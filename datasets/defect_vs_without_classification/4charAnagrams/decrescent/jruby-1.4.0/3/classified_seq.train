WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	/*     * Is this item a copy?     *     * @see java.lang.Object#equals(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// once one criticism is found, exit
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructor
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // user interface
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // criticism control
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // issue resolutions
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // criticism control
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // critiquing
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // design feedback
WITHOUT_CLASSIFICATION	// the critiquing thread should wait if disabled.
WITHOUT_CLASSIFICATION	// why?
WITHOUT_CLASSIFICATION	/*     * Performs critique asap.     *     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // critiquing
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructor and singeton methods
WITHOUT_CLASSIFICATION	// why?
WITHOUT_CLASSIFICATION	//                      && getAutoCritique()
WITHOUT_CLASSIFICATION	/* Don't clear everything here, breaks loading! */
WITHOUT_CLASSIFICATION	//v71
WITHOUT_CLASSIFICATION	// Don't let a transient error kill the thread
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	//clear out queues! @@@
WITHOUT_CLASSIFICATION	//decision model listener
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	/* end class ChildGenDMElements */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // user interface
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // issue resolution
WITHOUT_CLASSIFICATION	//TODO: This should be the name of the designer that created //      the todoitem, not the current username!
WITHOUT_CLASSIFICATION	// LOG.log(Level.FINE, "predicate() returned true, creating ToDoItem");
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // corrective automations, wizards
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructor
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // critiquing
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // criticism control
WITHOUT_CLASSIFICATION	/* TODO: Make use of the constants defined in the ToDoItem class! */
WITHOUT_CLASSIFICATION	// if wizClass is not a subclass of Wizard, print a warning
WITHOUT_CLASSIFICATION	//return getCriticName();
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // criticism control
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // design feedback
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // issue resolution
WITHOUT_CLASSIFICATION	/* end interface Poster */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// LOG.log(Level.FINE, //         "Adding resolution for: " + c.getClass() + " " + canCreate);
WITHOUT_CLASSIFICATION	// Use this for fast fail instead. // Sacrificed for complete fail. d00mst //throw new UnresolvableException( //	"Unable to create ItemUID for class: " //	+ obj.getClass());
WITHOUT_CLASSIFICATION	// TODO: values
WITHOUT_CLASSIFICATION	/* end class Goal */
WITHOUT_CLASSIFICATION	// check if we are using a supported java version
WITHOUT_CLASSIFICATION	//implements java.io.Serialization
WITHOUT_CLASSIFICATION	// end class CurDecisionCM
WITHOUT_CLASSIFICATION	/* end class StandardCM */
WITHOUT_CLASSIFICATION	// end class CompositeCM
WITHOUT_CLASSIFICATION	// end class EnabledCM
WITHOUT_CLASSIFICATION	// end class NotSnoozedCM
WITHOUT_CLASSIFICATION	// end class AndCM
WITHOUT_CLASSIFICATION	// end class DesignGoalsCM
WITHOUT_CLASSIFICATION	// end class OrCM
WITHOUT_CLASSIFICATION	// Register our last chance exception handler
WITHOUT_CLASSIFICATION	// Get the splash screen up as early as possible
WITHOUT_CLASSIFICATION	// We have to do this to set the LAF for the splash screen
WITHOUT_CLASSIFICATION	// main initialization happens here
WITHOUT_CLASSIFICATION	//ToolTipManager.sharedInstance().setInitialDelay(500);
WITHOUT_CLASSIFICATION	// Force the configuration to load
WITHOUT_CLASSIFICATION	// Synchronize the startup directory
WITHOUT_CLASSIFICATION	// then, print out some version info for debuggers...
WITHOUT_CLASSIFICATION	// Set the i18n locale
WITHOUT_CLASSIFICATION	/* set properties for application behaviour */
WITHOUT_CLASSIFICATION	// now, let's print it
WITHOUT_CLASSIFICATION	// nothing else to do (?)
WITHOUT_CLASSIFICATION	// We MUST have a project open before continuing. Create if necessary
WITHOUT_CLASSIFICATION	//        initPreinitialize(); //        initializeSubsystems(new SimpleTimer(), null); //        ArgoFrame.getInstance().setVisible(true);
WITHOUT_CLASSIFICATION	// Perform one command.
WITHOUT_CLASSIFICATION	// Now create a new object.
WITHOUT_CLASSIFICATION	// initLogging();
WITHOUT_CLASSIFICATION	// On uniprocessors wait until we're sure the splash screen // has been painted so that we aren't competing for resources
WITHOUT_CLASSIFICATION	// make the projectbrowser
WITHOUT_CLASSIFICATION	/* end Class Main */
WITHOUT_CLASSIFICATION	/* end class PostLoad */
WITHOUT_CLASSIFICATION	/* We don't care if optional modules aren't found. */
WITHOUT_CLASSIFICATION	/* We don't care if optional modules aren't found. */
WITHOUT_CLASSIFICATION	/* end class LoadModules */
WITHOUT_CLASSIFICATION	/* All tabs are added at the end, except a TabToDoTarget: */
WITHOUT_CLASSIFICATION	/* End interface GUISettingsTabInterface */
WITHOUT_CLASSIFICATION	// skip pos, we know it's not a valid char from above
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	// Store in the user configuration, and // let gef know also.
WITHOUT_CLASSIFICATION	// Use the configuration if it exists, otherwise // use what gef thinks.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructor
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // actions
WITHOUT_CLASSIFICATION	//failed to clone
WITHOUT_CLASSIFICATION	/* Remark: The code in             * ProjectSettings.init() currently presumes             * that nobody is using this event. */
WITHOUT_CLASSIFICATION	// NOTE: This is package scope to force callers to use ResourceLoaderWrapper
WITHOUT_CLASSIFICATION	/*     * Strip all characters out of <var>s</var> that could not be part of a     * valid Java identifier. Return either the given string (if all characters     * were valid), or a new string with all invalid characters stripped out.     * This allows automatic conversion of strings containing punctuation and     * spaces to a resource name that can be looked up.     */
WITHOUT_CLASSIFICATION	/* end class ResourceLoader */
WITHOUT_CLASSIFICATION	// the validity checking thread should wait if disabled.
WITHOUT_CLASSIFICATION	// If element has been deleted, it's no longer valid
WITHOUT_CLASSIFICATION	// History.TheHistory.addItemResolution(item, // "no longer valid"); // ((ToDoItem)item).resolve("no longer valid"); // notifyObservers("removeElement", item);
WITHOUT_CLASSIFICATION	// ////////////////////////////////////////////////////////////// // Notifications and Updates
WITHOUT_CLASSIFICATION	/* skip any identical items already on the list */
WITHOUT_CLASSIFICATION	// cat.debug("Checking for inhibitors " + rc);
WITHOUT_CLASSIFICATION	// History.TheHistory.addItemResolution(item, reason);
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	/* end class ArgoJMenu */
WITHOUT_CLASSIFICATION	// Block added by BobTarling 8-Jan-2002 Set the checkbox on or // off according to the SELECTED value of the action.  If no // SELECTED value is found then this defaults to true in order // to remain compatible with previous versions of this code.
WITHOUT_CLASSIFICATION	// EventListenerList.add() is synchronized, so we don't need to // synchronize ourselves
WITHOUT_CLASSIFICATION	// End of block
WITHOUT_CLASSIFICATION	/* end interface Clarifier */
WITHOUT_CLASSIFICATION	// Set the checkbox on or // off according to the SELECTED value of the action.  If no // SELECTED value is found then this defaults to true.
WITHOUT_CLASSIFICATION	// Extra care to be taken since allOffenders can be reset while // this method is running.
WITHOUT_CLASSIFICATION	// these are blue in Metal Default Theme
WITHOUT_CLASSIFICATION	// Cached expansions
WITHOUT_CLASSIFICATION	// these are gray in Metal Default Theme
WITHOUT_CLASSIFICATION	// Extra care to be taken since allPosters can be reset while // this method is running.
WITHOUT_CLASSIFICATION	// set the icon for this poster
WITHOUT_CLASSIFICATION	// EventListenerList.remove() is synchronized, so we don't need to // synchronize ourselves
WITHOUT_CLASSIFICATION	//MVW
WITHOUT_CLASSIFICATION	// ////////////////////////////////////////////////////////////// // event related stuff
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static variables
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#equals(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Enable buttons when selection made.     *     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	/* end class CheckManager */
WITHOUT_CLASSIFICATION	// Now lets search
WITHOUT_CLASSIFICATION	/* end class TabChecklist */
WITHOUT_CLASSIFICATION	// We found it!
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handling
WITHOUT_CLASSIFICATION	// Enter the class to speed up the next search.
WITHOUT_CLASSIFICATION	// Stop updating model when we're not visible
WITHOUT_CLASSIFICATION	// Update our model with our saved target
WITHOUT_CLASSIFICATION	//////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////// // instance varables
WITHOUT_CLASSIFICATION	//////////////// // constructor
WITHOUT_CLASSIFICATION	//////////////// // TableModel implemetation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // criticism control
WITHOUT_CLASSIFICATION	//////////////// // event handlers
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static accessors
WITHOUT_CLASSIFICATION	//////////////// // instance varables
WITHOUT_CLASSIFICATION	//////////////// // constructor
WITHOUT_CLASSIFICATION	//////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////// // TableModel implemetation
WITHOUT_CLASSIFICATION	/* in the past, 0 milliseconds after January 1, 1970, 00:00:00 GMT. */
WITHOUT_CLASSIFICATION	/* in the past, 0 milliseconds after January 1, 1970, 00:00:00 GMT. */
WITHOUT_CLASSIFICATION	/* by default, double the snooze interval each time */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* end class SnoozeOrder */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // wizard actions
WITHOUT_CLASSIFICATION	/* This changes the complete structure of the table,          * so we need to set the column widths again. */
WITHOUT_CLASSIFICATION	// TODO: do all following steps // TODO: resolve item from ToDoList
WITHOUT_CLASSIFICATION	/* end class ActionOpenCritics */
WITHOUT_CLASSIFICATION	/** * Dialog box to list all critics and allow editing of some of their * properties. <p> * * TODO: supported goals, critic network. */
WITHOUT_CLASSIFICATION	// Set initial sorting on Critic Headline
WITHOUT_CLASSIFICATION	// Critics Table
WITHOUT_CLASSIFICATION	// instead of making a new list, decrement index, return when // found and index == 0
WITHOUT_CLASSIFICATION	// Critic Details panel
WITHOUT_CLASSIFICATION	// case 2
WITHOUT_CLASSIFICATION	//  TableModel implemetation
WITHOUT_CLASSIFICATION	//TODO:
WITHOUT_CLASSIFICATION	// no maximum set, so it will stretch...
WITHOUT_CLASSIFICATION	/* and for advanced mode: */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(     * javax.swing.tree.TreePath, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers
WITHOUT_CLASSIFICATION	// Set tableSP's preferred height to 0 so that details height // is used in pack()
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	//     c.gridy = 0; //     c.gridx = 0; //     JLabel priLabel = new JLabel("Priority:"); //     gb.setConstraints(priLabel, c); //     _mainPanel.add(priLabel);
WITHOUT_CLASSIFICATION	//fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	//     c.gridy = 0; //     c.gridx = 1; //     JLabel offLabel = new JLabel("Off"); //     gb.setConstraints(offLabel, c); //     _mainPanel.add(offLabel);
WITHOUT_CLASSIFICATION	//     c.gridy = 0; //     c.gridx = 2; //     JLabel lowLabel = new JLabel("Low"); //     gb.setConstraints(lowLabel, c); //     _mainPanel.add(lowLabel);
WITHOUT_CLASSIFICATION	//     c.gridy = 0; //     c.gridx = 3; //     JLabel twoLabel = new JLabel("ad"); //     gb.setConstraints(twoLabel, c); //     _mainPanel.add(twoLabel);
WITHOUT_CLASSIFICATION	//     c.gridy = 0; //     c.gridx = 4; //     JLabel threeLabel = new JLabel("asd"); //     gb.setConstraints(threeLabel, c); //     _mainPanel.add(threeLabel);
WITHOUT_CLASSIFICATION	//     c.gridy = 0; //     c.gridx = 5; //     JLabel fourLabel = new JLabel("asd"); //     gb.setConstraints(fourLabel, c); //     _mainPanel.add(fourLabel);
WITHOUT_CLASSIFICATION	//     c.gridy = 0; //     c.gridx = 6; //     JLabel highLabel = new JLabel("High"); //     gb.setConstraints(highLabel, c); //     _mainPanel.add(highLabel);
WITHOUT_CLASSIFICATION	// ------------ other methods ------------
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeCellRenderer#getTreeCellRendererComponent(     * javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int,     * boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ToDoListListener implementation
WITHOUT_CLASSIFICATION	//fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeModel implementation - todo specific stuff
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // class variables
WITHOUT_CLASSIFICATION	// general icons for poster
WITHOUT_CLASSIFICATION	// specialised icons for designer
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeCellRenderer implementation
WITHOUT_CLASSIFICATION	/* end class ToDoTreeRenderer */
WITHOUT_CLASSIFICATION	//   public static Decision decisionUNCATEGORIZED = //   new Decision("Uncategorized", 1);
WITHOUT_CLASSIFICATION	/* end class ToDoByDecision */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeModel implementation
WITHOUT_CLASSIFICATION	// instead of making a new list, decrement index, return when // found and index == 0
WITHOUT_CLASSIFICATION	// store wizard?
WITHOUT_CLASSIFICATION	//     c.gridx = 1; //     c.gridy = 3; //     c.gridheight = GridBagConstraints.REMAINDER; //     SpacerPanel spacer2 = new SpacerPanel(); //     gb.setConstraints(spacer2, c); //     _mainPanel.add(spacer2);
WITHOUT_CLASSIFICATION	//image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	//image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	//image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	/* end class WizStepTextField */
WITHOUT_CLASSIFICATION	// store wizard?
WITHOUT_CLASSIFICATION	// store wizard?
WITHOUT_CLASSIFICATION	/* end class WizDescription */
WITHOUT_CLASSIFICATION	/* end class WizStepCue */
WITHOUT_CLASSIFICATION	// stop/start creating more critics
WITHOUT_CLASSIFICATION	/* end class ActionGoToCritique */
WITHOUT_CLASSIFICATION	/* Correct lazy initialization of static field              * without further updates: */
WITHOUT_CLASSIFICATION	// does nothing
WITHOUT_CLASSIFICATION	/* end class ActionAutoCritique */
WITHOUT_CLASSIFICATION	// stop/start cleaning up invalid TodoItems.
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(     * java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeModel implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ToDoListListener implementation
WITHOUT_CLASSIFICATION	//fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	//otherwise parent must be an offending design material
WITHOUT_CLASSIFICATION	/* end class ActionOpenGoals */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	//? inform()
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Update our model with our saved target
WITHOUT_CLASSIFICATION	// Stop updating model when we're not visible
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeModel implementation
WITHOUT_CLASSIFICATION	// instead of making a new list, decrement index, return when // found and index == 0
WITHOUT_CLASSIFICATION	//image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	// store wizard?
WITHOUT_CLASSIFICATION	// the target of description will always be set directly by tabtodo
WITHOUT_CLASSIFICATION	// Request that we be made visible if we're not? // topLevelTabbedPane.setSelectedComponent(t);
WITHOUT_CLASSIFICATION	// ------------- MouseListener implementation ---------------
WITHOUT_CLASSIFICATION	/* end class WizStepConfirm */
WITHOUT_CLASSIFICATION	// next line coming from projectbrowser
WITHOUT_CLASSIFICATION	// ------------ ItemListener implementation ----------------------
WITHOUT_CLASSIFICATION	// -------------TreeSelectionListener implementation -----------
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// not needed in UML 1.x
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * Prepare for typing in rationale field when window is opened.     *     * @see java.awt.Component#setVisible(boolean)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ToDoListListener implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ToDoListListener implementation
WITHOUT_CLASSIFICATION	// keep nagging until the user solves the problem: // This seems a nice way to nag:
WITHOUT_CLASSIFICATION	// Only interrupt for one todoitem
WITHOUT_CLASSIFICATION	/* end class ActionOpenDecisions */
WITHOUT_CLASSIFICATION	// blinks?
WITHOUT_CLASSIFICATION	/* end class ToDoByOffender */
WITHOUT_CLASSIFICATION	// add the perspectives to a list for the combobox
WITHOUT_CLASSIFICATION	// decSlide.setPaintLabels(true);
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants //////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	// TODO: This looks O(n^2)
WITHOUT_CLASSIFICATION	//TODO: make a new history item
WITHOUT_CLASSIFICATION	//cat.debug("bad decision");
WITHOUT_CLASSIFICATION	//cat.debug("bad goal");
WITHOUT_CLASSIFICATION	/* end class DismissToDoItemDialog */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(     * java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	// finally, apply profile configuration to the model
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(     * javax.swing.tree.TreePath, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers
WITHOUT_CLASSIFICATION	// store wizard?
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeModel implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ToDoListListener implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ToDoListListener implementation
WITHOUT_CLASSIFICATION	//fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	//image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	//otherwise parent must be an offending design material
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/* end class WizStep */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // actions
WITHOUT_CLASSIFICATION	// This is done for compatibility with previous version: // Move the argo.user.properties // written before 0.25.4 to the new location, if it exists.
WITHOUT_CLASSIFICATION	// Don't allow instantiation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ActionListener implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // DocumentListener implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TargetListener implementation
WITHOUT_CLASSIFICATION	// copy to new file and let the regular load code // do the actual load
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // Instance variables
WITHOUT_CLASSIFICATION	/* end class ConfigurationFactory */
WITHOUT_CLASSIFICATION	// LOG.log(Level.INFO, "Configuration saved to {0}\n", url);
WITHOUT_CLASSIFICATION	// check for the older properties file and // copy it over if possible
WITHOUT_CLASSIFICATION	// Only allow one load
WITHOUT_CLASSIFICATION	// add the first point twice
WITHOUT_CLASSIFICATION	// add the first point twice
WITHOUT_CLASSIFICATION	// Scale everything up
WITHOUT_CLASSIFICATION	// Initialize band buffer bounds
WITHOUT_CLASSIFICATION	//        LOG.log(Level.FINE, "getData Rectangle = " + clip);
WITHOUT_CLASSIFICATION	//        LOG.log(Level.FINE, "getData returning raster = " + translatedRaster);
WITHOUT_CLASSIFICATION	// Create a new graphics context so we start with fresh transforms
WITHOUT_CLASSIFICATION	// Fill with our background color
WITHOUT_CLASSIFICATION	// Translate & clip graphic to match region of interest
WITHOUT_CLASSIFICATION	// Ask GEF to print a band of the diagram (translated & clipped)
WITHOUT_CLASSIFICATION	// Make sure it isn't caching anything that should be written
WITHOUT_CLASSIFICATION	//        assert !initialized; // GUITestActionOpenProject fails over this...
WITHOUT_CLASSIFICATION	// Retain the original one:
WITHOUT_CLASSIFICATION	// Retain the original one:
WITHOUT_CLASSIFICATION	/*     * Internal initialization method.  Handles initialization which     * is common to both public methods.     */
WITHOUT_CLASSIFICATION	/* This is needed for the JUnit tests.         * Otherwise a "assert initialized" would suffice. */
WITHOUT_CLASSIFICATION	/* This is needed for the JUnit tests.         * Otherwise a "assert initialized" would suffice. */
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Flag the command as to whether it is first in a chain
WITHOUT_CLASSIFICATION	/* end class DelayedChangeNotify */
WITHOUT_CLASSIFICATION	// Default diagram settings
WITHOUT_CLASSIFICATION	// Default notation settings
WITHOUT_CLASSIFICATION	/* Generation preferences: */
WITHOUT_CLASSIFICATION	/*         * The next one defaults to TRUE, to stay compatible with older         * ArgoUML versions that did not have this setting:         */
WITHOUT_CLASSIFICATION	/*         * The next ones defaults to TRUE, to stay compatible with older         * ArgoUML versions that did not have this setting:         */
WITHOUT_CLASSIFICATION	/* This Notation is not available! */
WITHOUT_CLASSIFICATION	// Always put the model at the top
WITHOUT_CLASSIFICATION	// otherwise add the diagram at the start
WITHOUT_CLASSIFICATION	// otherwise add the diagram at the start
WITHOUT_CLASSIFICATION	// finally, apply profile configuration to the model
WITHOUT_CLASSIFICATION	//        uri = PersistenceManager.getInstance().fixUriExtension(theProjectUri);
WITHOUT_CLASSIFICATION	// Register with the save action with other subsystems so that // any changes in those subsystems will enable the // save button/menu item etc.
WITHOUT_CLASSIFICATION	// not needed in UML 1.x
WITHOUT_CLASSIFICATION	/* end interface DelayedVChangeListener */
WITHOUT_CLASSIFICATION	// a profile initially has no applied profiles, we go bottom-up
WITHOUT_CLASSIFICATION	/* Skip leading underscores: */
WITHOUT_CLASSIFICATION	/**     * TODO: should just be the directory to write.     */
WITHOUT_CLASSIFICATION	/* The preferences with project-scope: */
WITHOUT_CLASSIFICATION	/* The ArgoUML version with which this project was last saved: */
WITHOUT_CLASSIFICATION	// if diagram added successfully, add the member too
WITHOUT_CLASSIFICATION	// Adding a todo member removes any existing one.
WITHOUT_CLASSIFICATION	// got past the veto, add the member
WITHOUT_CLASSIFICATION	// send indeterminate new value instead of making copy of vector
WITHOUT_CLASSIFICATION	/* Remove the dependent         * modelelements, such as the statemachine         * for a statechartdiagram:         */
WITHOUT_CLASSIFICATION	/* Hence, a diagram name was saved in the project             * that we are loading. So, we use this name             * to retrieve any matching diagram. */
WITHOUT_CLASSIFICATION	/* Use the first diagram. */
WITHOUT_CLASSIFICATION	/* If there was no diagram at all,             * then use the (first) UML model. */
WITHOUT_CLASSIFICATION	// we don't need this HashMap anymore so free up the memory
WITHOUT_CLASSIFICATION	//Can not delete the model
WITHOUT_CLASSIFICATION	//Can not delete the profile
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#finalize()     */
WITHOUT_CLASSIFICATION	/*	 * @see javax.swing.table.TableModel#getColumnCount()	 */
WITHOUT_CLASSIFICATION	/*	 * @see javax.swing.table.TableModel#getColumnName(int)	 */
WITHOUT_CLASSIFICATION	/*	 * @see javax.swing.table.TableModel#getRowCount()	 */
WITHOUT_CLASSIFICATION	// Make the topmost diagram (that is not the one being deleted) // current.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // trash related methods
WITHOUT_CLASSIFICATION	// Fire an event some anyone who cares about diagrams being // removed can listen for it
WITHOUT_CLASSIFICATION	// If we delete a FigEdge // or FigNode we actually call this method with the owner not // the Fig itself. However, this method // is called by ActionDeleteModelElements // for primitive Figs (without owner).
WITHOUT_CLASSIFICATION	// there's just one ProfileConfiguration in a project // and there's no other way to add another one
WITHOUT_CLASSIFICATION	/** * Tab for the settings dialog that makes it possible to * select the modules that are to be enabled. * * TODO: Header for the table. * * @author Linus Tolke */
WITHOUT_CLASSIFICATION	// Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	// Access methods for program infrastructure.
WITHOUT_CLASSIFICATION	/*	 * @see java.io.FileFilter#accept(java.io.File)	 */
WITHOUT_CLASSIFICATION	// The creation of the actual GUI elements is deferred until // they are actually needed. Otherwize we have problems // with the initialization.
WITHOUT_CLASSIFICATION	// Do nothing! // The next time we refresh, we will fetch the values again.
WITHOUT_CLASSIFICATION	// Access methods for modules that need to query about the status of // other modules.
WITHOUT_CLASSIFICATION	// Access methods for the GUI that the user uses to enable and disable // modules.
WITHOUT_CLASSIFICATION	// Access methods for the program infrastructure
WITHOUT_CLASSIFICATION	// Catch all exceptions and errors, however severe
WITHOUT_CLASSIFICATION	// TODO: huntForModulesFromJavaWebStart();
WITHOUT_CLASSIFICATION	// Load modules specified by a System property. // Modules specified by a system property is for // running modules from within Eclipse and running // from Java Web Start.
WITHOUT_CLASSIFICATION	// Try-catch only the JarFile instantiation so we // don't accidentally mask anything in ArgoJarClassLoader // or processJarFile.
WITHOUT_CLASSIFICATION	// We expect all extensions to have a manifest even though we // can operate without one if necessary.
WITHOUT_CLASSIFICATION	// Look for our specification
WITHOUT_CLASSIFICATION	// Add this to search list for I18N properties // (Done for both modules & localized property file sets)
WITHOUT_CLASSIFICATION	// We havn't found it. Add it.
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * Utility function to unregister all listeners     * registered through addElementListener.     *     * @see #addElementListener(Object, String)     */
WITHOUT_CLASSIFICATION	/*     * Called after the notation default property gets changed.     *     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	// e.g. for an operation: // if pce.getSource() == modelElement // && event.propertyName = "parameter" //     if event instanceof AddAssociationEvent //         Get the parameter instance from event.newValue //         Call model to add listener on parameter on change //             of "name", "type" //     else if event instanceof RemoveAssociationEvent //         Get the parameter instance from event.oldValue //         Call model to remove listener on parameter on change //             of "name", "type" //     end if // end if
WITHOUT_CLASSIFICATION	// The following check should have been satisfied before we // instantiated the module, but double check again
WITHOUT_CLASSIFICATION	// If it didn't have a loadable module class and it doesn't look like // a localized property set, warn the user that something funny is in // their extension directory
WITHOUT_CLASSIFICATION	// Since there is no way to compare the objects as equal, // we have to search through the list at this point.
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * Remark:     * There is also a java-like notation, which is also     * part of ArgoUML core distribution.     */
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/* This Notation is not available! */
WITHOUT_CLASSIFICATION	// This is needed for the case when the default notation is // not loaded at this point.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // class accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // Static workers for dealing with notation names.
WITHOUT_CLASSIFICATION	// No valid field for above notationLanguage.  It's valid if not null.
WITHOUT_CLASSIFICATION	// We also show stereotypes
WITHOUT_CLASSIFICATION	// We also show stereotypes
WITHOUT_CLASSIFICATION	// We also show the type (of which e.g. the name may change)
WITHOUT_CLASSIFICATION	// We also show the type (of which e.g. the name may change)
WITHOUT_CLASSIFICATION	// We also show tagged values (the / for derived)
WITHOUT_CLASSIFICATION	// We also show tagged values (the / for derived)
WITHOUT_CLASSIFICATION	// and when the Operation is replaced:
WITHOUT_CLASSIFICATION	// and when the class changes name:
WITHOUT_CLASSIFICATION	/* mvw: Indeed. The intention of the constructor parameter is to prove         * that there is a valid UML object to bind the notation to.          * So, the next statement should fail on a null parameter,          * and on anything that is not an object of which          * we can retrieve the multiplicity. */
WITHOUT_CLASSIFICATION	/* We are not interested in the name. */
WITHOUT_CLASSIFICATION	/* And the parameter names and values: */
WITHOUT_CLASSIFICATION	/* And the arguments: */
WITHOUT_CLASSIFICATION	// We also show parameters
WITHOUT_CLASSIFICATION	//  We also show types of parameters
WITHOUT_CLASSIFICATION	/* Listen to the modelelement itself: */
WITHOUT_CLASSIFICATION	// We also show tagged values (the / for derived)
WITHOUT_CLASSIFICATION	// If this fails, then there is a problem... // dthompson 29/12/2008: It seems that the returned value is  // irrelevant here, so I assume that the purpose of this call // is just to throw an exception in case of a problem.
WITHOUT_CLASSIFICATION	// register for events from all modelelements // that change the name and body text // i.e. when the CallAction is replaced:
WITHOUT_CLASSIFICATION	// and when the owner is replaced (unlikely for operations), // and when the operation changes name:
WITHOUT_CLASSIFICATION	/* Listen to the modelelement itself: */
WITHOUT_CLASSIFICATION	// removed stereotype
WITHOUT_CLASSIFICATION	// register for events from all modelelements // that change the text // i.e. when the Transition is replaced:
WITHOUT_CLASSIFICATION	// new stereotype
WITHOUT_CLASSIFICATION	/* Listen to name changes in the path (useful for e.g. Package): */
WITHOUT_CLASSIFICATION	// register for the doActivity etc.
WITHOUT_CLASSIFICATION	// register for internal transitions:
WITHOUT_CLASSIFICATION	//        return "parsing.java.help.attribute";
WITHOUT_CLASSIFICATION	// TODO: The src_visibility tag doesn't appear to be created // anywhere by ArgoUML currently
WITHOUT_CLASSIFICATION	//        return "parsing.help.fig-association-end-name";
WITHOUT_CLASSIFICATION	//TODO: initial value
WITHOUT_CLASSIFICATION	/* skip spaces */
WITHOUT_CLASSIFICATION	// the name itself
WITHOUT_CLASSIFICATION	/* Check the name for validity: */
WITHOUT_CLASSIFICATION	/* TODO: Check the name for validity. */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *         java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// pick out return type
WITHOUT_CLASSIFICATION	// handle multiplicity here since we need the type // actually the API of generator is buggy since to generate // multiplicity correctly we need the attribute too
WITHOUT_CLASSIFICATION	// Build the final string
WITHOUT_CLASSIFICATION	//TODO: qualifiers (e.g., const) //TODO: stereotypes...
WITHOUT_CLASSIFICATION	// name and params
WITHOUT_CLASSIFICATION	/* Do nothing. */
WITHOUT_CLASSIFICATION	// constructor
WITHOUT_CLASSIFICATION	// check for more attributes (';' separated):
WITHOUT_CLASSIFICATION	/*     * For Java notation, we also need to listen to "leaf" changes,      * since they are shown as "final" on the diagram.     */
WITHOUT_CLASSIFICATION	// Remove bases that aren't there anymore
WITHOUT_CLASSIFICATION	/*Notation.findNotation("Java");*/
WITHOUT_CLASSIFICATION	/* Initialize the NotationUtilityUml: */
WITHOUT_CLASSIFICATION	// copy - can't iterate modify live collection while iterating it
WITHOUT_CLASSIFICATION	/* When nothing is generated: omit the space. */
WITHOUT_CLASSIFICATION	// Loop through all base classes, building a comma separated list
WITHOUT_CLASSIFICATION	// yes, there are more:
WITHOUT_CLASSIFICATION	//no text? remove attr!
WITHOUT_CLASSIFICATION	//no non-whitechars in text? remove attr!
WITHOUT_CLASSIFICATION	/* We need to set the namespace/owner                     * of the new attribute before parsing: */
WITHOUT_CLASSIFICATION	/* If the 1st attribute is static,                         * then the new ones, too. */
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// yes, there are more:
WITHOUT_CLASSIFICATION	/*     * Generates a string representation for the provided     * attribute. The string representation will be of the form:     *          visibility name [multiplicity] : type-expression =     *                          initial-value {property-string}     * Depending on settings in Notation, visibility, multiplicity,     * type-expression, initial value and properties are shown/not shown.     */
WITHOUT_CLASSIFICATION	/* Handle Derived: */
WITHOUT_CLASSIFICATION	/* Handle Derived: */
WITHOUT_CLASSIFICATION	/* Handle Visibility: */
WITHOUT_CLASSIFICATION	// fix for loading bad projects
WITHOUT_CLASSIFICATION	/*                     * The "show types" defaults to TRUE, to stay compatible                     * with older ArgoUML versions that did not have this                     * setting:                     */
WITHOUT_CLASSIFICATION	// The element was deleted while we were processing it
WITHOUT_CLASSIFICATION	// strip any trailing semi-colons
WITHOUT_CLASSIFICATION	// construct bases string (comma separated)
WITHOUT_CLASSIFICATION	//no text? remove op!
WITHOUT_CLASSIFICATION	//no non-whitechars in text? remove op!
WITHOUT_CLASSIFICATION	// check for more operations (';' separated):
WITHOUT_CLASSIFICATION	// end while loop
WITHOUT_CLASSIFICATION	// parameterlist is guaranteed to contain at least "("
WITHOUT_CLASSIFICATION	// Don't create a stereotype for <<signal>> on a Reception // but create any other parsed stereotypes as needed
WITHOUT_CLASSIFICATION	// lets concatenate it to the resulting string (genStr)
WITHOUT_CLASSIFICATION	/* The "show types" defaults to TRUE, to stay compatible with older             * ArgoUML versions that did not have this setting: */
WITHOUT_CLASSIFICATION	// the parameters
WITHOUT_CLASSIFICATION	// the returnparameters
WITHOUT_CLASSIFICATION	// The model element was deleted while we were working on it
WITHOUT_CLASSIFICATION	// else: we remove only the extra ","
WITHOUT_CLASSIFICATION	// the query state
WITHOUT_CLASSIFICATION	/*         * Although Operation and Signal are peers in the UML type          * hierarchy they share the attributes isRoot, isLeaf,          * isAbstract, and  specification. Concurrency is *not*          * shared and is specific to Operation.         */
WITHOUT_CLASSIFICATION	// remove last ,
WITHOUT_CLASSIFICATION	// end of block
WITHOUT_CLASSIFICATION	// A string of the form "name:"
WITHOUT_CLASSIFICATION	// this is a Message UML object
WITHOUT_CLASSIFICATION	/* Supported format:         *     predecessors number ":" action         * The 3 parts of the string to generate: */
WITHOUT_CLASSIFICATION	/*(MMessage)*/
WITHOUT_CLASSIFICATION	// This may return null:
WITHOUT_CLASSIFICATION	// activatorIntNo is now guaranteed not null
WITHOUT_CLASSIFICATION	//        List<String> args = null;
WITHOUT_CLASSIFICATION	// get the ordered list of immediate successors:
WITHOUT_CLASSIFICATION	// the condition or iteration expression (recurrence):
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	/* Now apply the changes to the model: */
WITHOUT_CLASSIFICATION	/* MMessage */
WITHOUT_CLASSIFICATION	// If there are more than one suitable operation, // then we pick the first one.
WITHOUT_CLASSIFICATION	/* Disconnect the message from the call graph                 * Make copies of returned live collections                 * since we're modifying                 */
WITHOUT_CLASSIFICATION	// Find the preceding message, if any, on either end of the // association.
WITHOUT_CLASSIFICATION	/* MClassifierRole */
WITHOUT_CLASSIFICATION	// Connect the message at a new spot
WITHOUT_CLASSIFICATION	// case 3 & 4
WITHOUT_CLASSIFICATION	/* MMessage */
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	/* MClassifierRole */
WITHOUT_CLASSIFICATION	/* If no variable name was given, then retain the one in the model. */
WITHOUT_CLASSIFICATION	/* If no function-name was given, then retain the one in the model. */
WITHOUT_CLASSIFICATION	/* Store the guard, i.e. condition or iteration expression,         * in the recurrence field of the Action: */
WITHOUT_CLASSIFICATION	/* If there was no Action yet, create a CallAction: */
WITHOUT_CLASSIFICATION	// Things are strange if there are more than one candidate root, // it has no obvious interpretation in terms of a call tree.
WITHOUT_CLASSIFICATION	/*MMessage*/
WITHOUT_CLASSIFICATION	/*MMessage*/
WITHOUT_CLASSIFICATION	// Jaap Branderhorst 2002-23-09 added next lines to link // parameters and operations to the figs that represent // them
WITHOUT_CLASSIFICATION	// We can do nothing if we don't have both the use case and extension // point.
WITHOUT_CLASSIFICATION	// Parse the string to creat a new extension point.
WITHOUT_CLASSIFICATION	// If we got back null we interpret this as meaning delete the // reference to the extension point from the use case, otherwise we set // the fields of the extension point to the values in newEp.
WITHOUT_CLASSIFICATION	// Build a new extension point
WITHOUT_CLASSIFICATION	// The empty string. Return null
WITHOUT_CLASSIFICATION	/* Handle Derived: */
WITHOUT_CLASSIFICATION	// If we are given the null string, return immediately,  // so that the extensionpoint is removed.
WITHOUT_CLASSIFICATION	// A string of the form "location". This will be confused by the // string ":", so we pick this out as an instruction to clear both // name and location.
WITHOUT_CLASSIFICATION	// A string of the form "name:location". Discard the middle token // (":")
WITHOUT_CLASSIFICATION	// Read past the colon.
WITHOUT_CLASSIFICATION	// The string to build
WITHOUT_CLASSIFICATION	// Get the fields we want
WITHOUT_CLASSIFICATION	// Put in the name field if it's there
WITHOUT_CLASSIFICATION	// Put in the location field if it's there
WITHOUT_CLASSIFICATION	/* First we decode the string: */
WITHOUT_CLASSIFICATION	/* Secondly we check the previous model structure: */
WITHOUT_CLASSIFICATION	/* And 3rd, we adapt the model: */
WITHOUT_CLASSIFICATION	// Same class, other operation
WITHOUT_CLASSIFICATION	// Other class
WITHOUT_CLASSIFICATION	// We found the classifier, now go find the operation:
WITHOUT_CLASSIFICATION	/* Here we located the new classifier                          * with its operation. */
WITHOUT_CLASSIFICATION	/* the text was: {frozen} */
WITHOUT_CLASSIFICATION	/* the text was: {frozen = false} */
WITHOUT_CLASSIFICATION	/* the text was: {frozen = true} */
WITHOUT_CLASSIFICATION	// Copy returned parameters because it will be a live collection for MDR
WITHOUT_CLASSIFICATION	// Should we be getting this from the GUI? BT 11 aug 2002
WITHOUT_CLASSIFICATION	// no type defined yet
WITHOUT_CLASSIFICATION	/* If the current property occurs a second time             * in the given list of properties, then skip it: */
WITHOUT_CLASSIFICATION	/* This automatically pulls in a TagDefinition from the profile: */
WITHOUT_CLASSIFICATION	/* The TV existed, but maybe it was not "true": */
WITHOUT_CLASSIFICATION	/* TODO: For UML2: Check if the type of the TV is String. */
WITHOUT_CLASSIFICATION	/* Generate all the existing internal transitions,         * so that we can compare them as text with the newly entered ones.         */
WITHOUT_CLASSIFICATION	// strip any trailing semi-colons
WITHOUT_CLASSIFICATION	/* This would be solution (1):                  * Model.getExtensionMechanismsHelper().setDataValues(                 *      taggedValue, new String[] {"false"});                 */
WITHOUT_CLASSIFICATION	/* There are 2 possibilities: either (1) we follow the traditional notation                  * philosophy, and set the tagged value to false, or (2) we restore to                  * the pristine situation and delete the taggedValue (whatever the                  * value was). I chose the latter (mvw).*/
WITHOUT_CLASSIFICATION	// Allow concatenation order and separator to be localized
WITHOUT_CLASSIFICATION	/*Parameter etc.*/
WITHOUT_CLASSIFICATION	/* "in" is the default */
WITHOUT_CLASSIFICATION	/*"in"*/
WITHOUT_CLASSIFICATION	// return nothing
WITHOUT_CLASSIFICATION	// it can still be null if the UML element  // did not have a multiplicity defined.
WITHOUT_CLASSIFICATION	/* Let's not be picky about the brackets - just remove them: */
WITHOUT_CLASSIFICATION	// get the // classifier
WITHOUT_CLASSIFICATION	// the State of a ClassifierInState is removed, // so let's reduce it to a Classifier.
WITHOUT_CLASSIFICATION	// the model is changed - job done
WITHOUT_CLASSIFICATION	// Strings
WITHOUT_CLASSIFICATION	/* Remove the states that did not match. */
WITHOUT_CLASSIFICATION	/*                     * Now we have to see if any state in any statemachine of                     * classifier is named [name]. If so, then we only have to                     * link the state to c.                     */
WITHOUT_CLASSIFICATION	// the model is changed - our job is done
WITHOUT_CLASSIFICATION	// the model is changed - our job is done
WITHOUT_CLASSIFICATION	// no state named s is found, so we have to // reject the user's input
WITHOUT_CLASSIFICATION	/* Finally, do the adaptations: */
WITHOUT_CLASSIFICATION	// then c is a "normal" Classifier // UML states
WITHOUT_CLASSIFICATION	// let's create a new ClassifierInState with the correct links
WITHOUT_CLASSIFICATION	/* This updates the diagram - hence as last statement: */
WITHOUT_CLASSIFICATION	// case 2
WITHOUT_CLASSIFICATION	// case 3
WITHOUT_CLASSIFICATION	/*         * We can distinguish between 4 cases:         * 1. A trigger is given. None exists yet.         * 2. The trigger was present, and it is the same type,         * or a different type, and its text is changed, or the same.         * 3. A trigger is not given. None exists yet.         * 4. The name of the trigger was present, but is removed.         * The reaction in these cases should be:         * 1. Find the referred trigger (issue 5988) or create a new one, and hook it to the transition.         * 2. Rename the trigger.         * 3. Nop.         * 4. Unhook and erase the existing trigger.         */
WITHOUT_CLASSIFICATION	// if no classifier has been set, then entering a state is // not useful, so the user's input has to be rejected.
WITHOUT_CLASSIFICATION	/* TODO: If the next line trows an exception, then what                     * do we do with the remainder of the                     * parsed/to be parsed lines?                     */
WITHOUT_CLASSIFICATION	/* Add this new one, and mark it to be retained: */
WITHOUT_CLASSIFICATION	/* Process the final list of internal transitions,         * and hook it to the state:         */
WITHOUT_CLASSIFICATION	// don't forget to remove old internals!
WITHOUT_CLASSIFICATION	// Make next accesses to this instance predictable:
WITHOUT_CLASSIFICATION	// and hook in the new ones:
WITHOUT_CLASSIFICATION	// the ActionExpression
WITHOUT_CLASSIFICATION	// let's look for a TimeEvent, ChangeEvent, CallEvent or SignalEvent
WITHOUT_CLASSIFICATION	// operation(paramlist)
WITHOUT_CLASSIFICATION	// the part after the || is for when there's nothing between the ()
WITHOUT_CLASSIFICATION	/* It is safe to give a null to the next function,         * since a statemachine is always composed by a model anyhow. */
WITHOUT_CLASSIFICATION	// else the empty s will do
WITHOUT_CLASSIFICATION	// case 1 and 2
WITHOUT_CLASSIFICATION	/*language*/
WITHOUT_CLASSIFICATION	/* Do not set the name. */
WITHOUT_CLASSIFICATION	/* Do not set the name. */
WITHOUT_CLASSIFICATION	/* This case is a bit different, because of the parameters.                      * If the event already exists, the parameters are ignored. */
WITHOUT_CLASSIFICATION	// when(...)
WITHOUT_CLASSIFICATION	// signalname
WITHOUT_CLASSIFICATION	// and parse the parameter list
WITHOUT_CLASSIFICATION	/* And hook it to the transition immediately,                 * so that an exception can not cause it to remain dangling: */
WITHOUT_CLASSIFICATION	/* Do nothing. */
WITHOUT_CLASSIFICATION	// yes, there are more:
WITHOUT_CLASSIFICATION	// strip any trailing semi-colons
WITHOUT_CLASSIFICATION	/*Parameter etc.*/
WITHOUT_CLASSIFICATION	/* "in" is the default */
WITHOUT_CLASSIFICATION	/*"in"*/
WITHOUT_CLASSIFICATION	// return nothing
WITHOUT_CLASSIFICATION	// and parse the parameter list
WITHOUT_CLASSIFICATION	// case 2
WITHOUT_CLASSIFICATION	/* Just change the time expression */
WITHOUT_CLASSIFICATION	// we have an event without expression
WITHOUT_CLASSIFICATION	/* It's a time-event now,                         * but was of another type before! */
WITHOUT_CLASSIFICATION	/* Just change the ChangeExpression */
WITHOUT_CLASSIFICATION	/* Create a new expression: */
WITHOUT_CLASSIFICATION	/* The parsed text describes a change-event,                         * but the model contains another type! */
WITHOUT_CLASSIFICATION	/* Just change the Name and linked operation */
WITHOUT_CLASSIFICATION	/* TODO: Change the linked operation. */
WITHOUT_CLASSIFICATION	/* Just change the Name and linked signal */
WITHOUT_CLASSIFICATION	// case 3 and 4
WITHOUT_CLASSIFICATION	/* case 3 */
WITHOUT_CLASSIFICATION	/* case 3 */
WITHOUT_CLASSIFICATION	// case 4 // erase it
WITHOUT_CLASSIFICATION	// case 4 // erase it
WITHOUT_CLASSIFICATION	/* Do not check if the parameters match. */
WITHOUT_CLASSIFICATION	// case 1
WITHOUT_CLASSIFICATION	// NSUML does this (?) // Model.getFacade().setGuard(trans, g);
WITHOUT_CLASSIFICATION	/* No text. We may remove the literal. */
WITHOUT_CLASSIFICATION	/* No non-white chars in text? remove literal! */
WITHOUT_CLASSIFICATION	/* Heuristic algorithm: do not show stereotypes if there is no name. */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.JComponent#setVisible(boolean)     */
WITHOUT_CLASSIFICATION	// strip any trailing semi-colons
WITHOUT_CLASSIFICATION	// construct bases string (comma separated)
WITHOUT_CLASSIFICATION	/* Great! The class already existed - just use it. */
WITHOUT_CLASSIFICATION	/* If no base was typed, then only set the name: */
WITHOUT_CLASSIFICATION	/* Only set the name if the base was found: */
WITHOUT_CLASSIFICATION	/* If the base was not changed, then only set the name: */
WITHOUT_CLASSIFICATION	//get the associationRole name
WITHOUT_CLASSIFICATION	/* Let's create a class with the given name, otherwise         * the user will not understand why we refuse his input! */
WITHOUT_CLASSIFICATION	// Only instantiate when we need it.
WITHOUT_CLASSIFICATION	/* If the base is already set to this assoc,                      * then do not set it again.                     * This check is needed, otherwise the setbase()                     *  below gives an exception.*/
WITHOUT_CLASSIFICATION	// 2002-07-31 // Jaap Branderhorst // from here made visibility etc. configurable
WITHOUT_CLASSIFICATION	//get the base association name
WITHOUT_CLASSIFICATION	// no instantiations
WITHOUT_CLASSIFICATION	/*             * The next one defaults to TRUE, to stay compatible with older             * ArgoUML versions that did not have this setting:             */
WITHOUT_CLASSIFICATION	// end of OCLEvaluator
WITHOUT_CLASSIFICATION	// look for associations
WITHOUT_CLASSIFICATION	// look for associations
WITHOUT_CLASSIFICATION	//MAssociationEnd
WITHOUT_CLASSIFICATION	//MParameter
WITHOUT_CLASSIFICATION	//MAssociationEnd
WITHOUT_CLASSIFICATION	// The ocl toolkit does not like void return types
WITHOUT_CLASSIFICATION	// MClassifiers // cannot be Bag
WITHOUT_CLASSIFICATION	//MClassifier
WITHOUT_CLASSIFICATION	// first search for appropriate attributes
WITHOUT_CLASSIFICATION	// first search for appropriate attributes
WITHOUT_CLASSIFICATION	//MClassifier
WITHOUT_CLASSIFICATION	//MOperation
WITHOUT_CLASSIFICATION	//MOperation
WITHOUT_CLASSIFICATION	// ... and not incompletely imported
WITHOUT_CLASSIFICATION	/* Query checking added 05/21/01, sz9 */
WITHOUT_CLASSIFICATION	/* Query checking added 05/21/01, sz9 */
WITHOUT_CLASSIFICATION	/* end class OCLExpander */
WITHOUT_CLASSIFICATION	// skip first parameter == return type
WITHOUT_CLASSIFICATION	// skip first parameter == return type
WITHOUT_CLASSIFICATION	// Only look at classes...
WITHOUT_CLASSIFICATION	// abstract classes are hardly ever singletons
WITHOUT_CLASSIFICATION	// and not association classes
WITHOUT_CLASSIFICATION	// with a name...
WITHOUT_CLASSIFICATION	// If there is an attribute which is not static => no problem
WITHOUT_CLASSIFICATION	// If there is an outgoing association => no problem
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	// Only look at classes
WITHOUT_CLASSIFICATION	// Only look at classes
WITHOUT_CLASSIFICATION	// Check for Singleton stereotype, uninitialised instance variables and // outgoing associations, as per JavaDoc above.
WITHOUT_CLASSIFICATION	// Found no such attribute
WITHOUT_CLASSIFICATION	// We only look at singletons
WITHOUT_CLASSIFICATION	// We only look at singletons
WITHOUT_CLASSIFICATION	/* end class CrSingletonViolatedOnlyPrivateConstructors */
WITHOUT_CLASSIFICATION	// NOTE: For historical reasons true == hide, so we need to invert // the sense of this
WITHOUT_CLASSIFICATION	/* end class CrEmptyPackage */
WITHOUT_CLASSIFICATION	/* At this stage during loading, the diagrams are         * not created yet - so we have to store this name for later use. */
WITHOUT_CLASSIFICATION	//            pw.close();
WITHOUT_CLASSIFICATION	/* Retain the previous project file even when the save operation         * crashes in the middle. Also create a backup file after saving. */
WITHOUT_CLASSIFICATION	//project.setFile(file);
WITHOUT_CLASSIFICATION	// for AndroMDA profiles
WITHOUT_CLASSIFICATION	/* Retain the previous project file even when the save operation         * crashes in the middle. Also create a backup file after saving. */
WITHOUT_CLASSIFICATION	// Give the parser a map of model elements // keyed by their UUID. This is used to allocate // figs to their owner using the "href" attribute // in PGML.
WITHOUT_CLASSIFICATION	// if save did not raise an exception // and name+"#" exists move name+"#" to name+"~" // this is the correct backup file
WITHOUT_CLASSIFICATION	// If we get a 2nd error, just ignore it
WITHOUT_CLASSIFICATION	// frank: in case of exception // delete name and mv name+"#" back to name if name+"#" exists // this is the "rollback" to old file
WITHOUT_CLASSIFICATION	// we have to give a message to user and set the system to unsaved!
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Should never happen - something's really wrong
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main parsing methods
WITHOUT_CLASSIFICATION	/*         * @see java.io.InputStream#close()         */
WITHOUT_CLASSIFICATION	/*     * @see java.io.InputStream#read()     */
WITHOUT_CLASSIFICATION	/*     * @see java.io.InputStream#read(byte[], int, int)     */
WITHOUT_CLASSIFICATION	// if save did not raise an exception // and name+"#" exists move name+"#" to name+"~" // this is the correct backup file
WITHOUT_CLASSIFICATION	// frank: in case of exception // delete name and mv name+"#" back to name if name+"#" exists // this is the "rollback" to old file
WITHOUT_CLASSIFICATION	// we have to give a message to user and set the system to unsaved!
WITHOUT_CLASSIFICATION	//boolean upgradeRequired = !checkVersion(fileVersion, releaseVersion)
WITHOUT_CLASSIFICATION	// Upgrade is in the way for UML2 projects, so we turn it off in that case:
WITHOUT_CLASSIFICATION	// Load .argo project descriptor
WITHOUT_CLASSIFICATION	// Load the rest
WITHOUT_CLASSIFICATION	// Copy the todo items after the model and diagrams so that // any model elements or figs that the todo items refer to // will exist before creating critics.
WITHOUT_CLASSIFICATION	// first read the .argo file from Zip
WITHOUT_CLASSIFICATION	// Keep reading till we hit the <argo> tag
WITHOUT_CLASSIFICATION	// Get the version from the tag.
WITHOUT_CLASSIFICATION	// Skip 1 lines
WITHOUT_CLASSIFICATION	// Loop round loading the diagrams
WITHOUT_CLASSIFICATION	//private EventListenerList listenerList = new EventListenerList();
WITHOUT_CLASSIFICATION	// Skip the 2 lines //<?xml version="1.0" encoding="UTF-8" ?> //<!DOCTYPE todo SYSTEM "todo.dtd" >
WITHOUT_CLASSIFICATION	// Keep reading till we get the left bracket of an opening tag
WITHOUT_CLASSIFICATION	// Compare each following character to see // that it matches the tag we want
WITHOUT_CLASSIFICATION	// We also want to match with the right bracket of the tag or // some other terminator
WITHOUT_CLASSIFICATION	// We've found the matching tag but do we have // the correct instance with matching attributes?
WITHOUT_CLASSIFICATION	// Read the name of the child tag // and then reset read position // back to that child tag.
WITHOUT_CLASSIFICATION	// Skip any whitespace till we should be on an equals sign.
WITHOUT_CLASSIFICATION	// Skip any whitespace till we should be on a quote symbol.
WITHOUT_CLASSIFICATION	// No other uses of string in PGMLHandler
WITHOUT_CLASSIFICATION	// Handle other uses of <private> contents
WITHOUT_CLASSIFICATION	// Sanity check - the returned path item placement // strategy should match the one in the UML. // If it doesn't, it could be that the UML was // created with an older argo version, and the new // argo version use a different placement strategy. // If they don't match, just use the default.
WITHOUT_CLASSIFICATION	// If any of the values are null, ignore the element.
WITHOUT_CLASSIFICATION	// If the PathItemPlacement was unknown, leave the // diagram with the default settings.
WITHOUT_CLASSIFICATION	// For a match to be found, it has to have the same // owner, and the same long class name.
WITHOUT_CLASSIFICATION	///** // * A list of the path item attributes for this container. // * The list is populated during parsing, them processed at endElement() // */ //private List<Hashtable<String, String>> pathItemAttrs = //    new ArrayList<Hashtable<String, String>>();
WITHOUT_CLASSIFICATION	// This code has to go within the startElement block after the strings // have been matched.
WITHOUT_CLASSIFICATION	//// Method 1: //// (collect data and assign later in endElement() method). //Hashtable<String, String> ht = //    new Hashtable<String, String>(); //ht.put("classname", classname); //ht.put("figclassname", figclassname); //ht.put("ownerhref", ownerhref); //ht.put("angle", angle); //ht.put("offset", offset); //pathItemAttrs.add(ht);
WITHOUT_CLASSIFICATION	// Create a new diagram wide settings block which is backed by // the project-wide defaults that we were passed
WITHOUT_CLASSIFICATION	// Ignore non-private elements within FigNode groups
WITHOUT_CLASSIFICATION	// Handle ItemUID in container contents
WITHOUT_CLASSIFICATION	// Discard class name, x y w h
WITHOUT_CLASSIFICATION	// The owner should always have already been set in the constructor
WITHOUT_CLASSIFICATION	// happens when 'is' comes from a zip file
WITHOUT_CLASSIFICATION	// continue with null stream, readDiagram(...) will take care of // it
WITHOUT_CLASSIFICATION	// TODO: Localize these
WITHOUT_CLASSIFICATION	// If the id does not look like a top-level Fig then we can assume // that this is an id of a FigEdgePort inside some FigEdge. // So extract the FigEdgePort from the FigEdge and return that as // the FigNode.
WITHOUT_CLASSIFICATION	// If there is no dot then this must be a top level Fig and can be // assumed to be a FigNode.
WITHOUT_CLASSIFICATION	// We are looking first to match with 3 different constructor // types. We would not expect a Fig to have any mix of these. // Any constructor other than these should be deprecated so we // look for these first. // Fig(DiagramEdgeSettings, DiagramSettings) // Fig(Object, Rectangle, DiagramSettings) // Fig(Rectangle, DiagramSettings)
WITHOUT_CLASSIFICATION	// FigNodeModelElements should match here
WITHOUT_CLASSIFICATION	// FigEdgeModelElements should match here (they have no // bounds)
WITHOUT_CLASSIFICATION	/* Retain the previous project file even when the save operation         * crashes in the middle. Also create a backup file after saving. */
WITHOUT_CLASSIFICATION	// frank: in case of exception // delete name and mv name+"#" back to name if name+"#" exists // this is the "rollback" to old file
WITHOUT_CLASSIFICATION	// Fall back to GEF's handling if we couldn't find an appropriate // constructor
WITHOUT_CLASSIFICATION	//myWriter,
WITHOUT_CLASSIFICATION	// Empty constructor
WITHOUT_CLASSIFICATION	// Empty constructor
WITHOUT_CLASSIFICATION	// for compatibility with older format
WITHOUT_CLASSIFICATION	// <model> is not used in current implementation
WITHOUT_CLASSIFICATION	// <model> is not used in current implementation
WITHOUT_CLASSIFICATION	/* || model == null */
WITHOUT_CLASSIFICATION	/* || model == null */
WITHOUT_CLASSIFICATION	// we have to give a message to user and set the system // to unsaved!
WITHOUT_CLASSIFICATION	// Write out header section
WITHOUT_CLASSIFICATION	// Note we assume members are ordered correctly already
WITHOUT_CLASSIFICATION	// let's initialize the progressMgr
WITHOUT_CLASSIFICATION	// Run through any stylesheet upgrades
WITHOUT_CLASSIFICATION	// Don't use systemId here or it will get opened in preference // to inputStream.
WITHOUT_CLASSIFICATION	// UML 2.x files could also contain a profile model. // Try again with uml:Profile as main tag.
WITHOUT_CLASSIFICATION	// let's update the progress
WITHOUT_CLASSIFICATION	// If we're trying to load a file from a future version // complain and refuse.
WITHOUT_CLASSIFICATION	// Empty constructor
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// No more we can do here on failure
WITHOUT_CLASSIFICATION	// Buffer containing characters which have been decoded from the bytes // in inBB.
WITHOUT_CLASSIFICATION	// RegEx pattern for XML declaration and, optionally, DOCTYPE // Backslashes are doubled up - one for Java, one for Regex
WITHOUT_CLASSIFICATION	// Convert from bytes back to characters
WITHOUT_CLASSIFICATION	// rewind our character buffer
WITHOUT_CLASSIFICATION	// Remove anything that matches our pattern
WITHOUT_CLASSIFICATION	// Remove null characters at the end
WITHOUT_CLASSIFICATION	// Reencode the remaining characters as bytes again
WITHOUT_CLASSIFICATION	// and write them to our output stream
WITHOUT_CLASSIFICATION	// Skip the <?xml... first line
WITHOUT_CLASSIFICATION	//cat.debug("NOTE: TodoParser handleStartTag:" + e.getName());
WITHOUT_CLASSIFICATION	// NOP
WITHOUT_CLASSIFICATION	/* This is expected to be safe, don't add a try block here */
WITHOUT_CLASSIFICATION	//cat.debug("Added ToDoItem: " + _headline);
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static variables
WITHOUT_CLASSIFICATION	/*     * @see org.xml.sax.ContentHandler#startElement(java.lang.String,     *         java.lang.String, java.lang.String, org.xml.sax.Attributes)     */
WITHOUT_CLASSIFICATION	/*     * @see org.xml.sax.ContentHandler#endElement(java.lang.String,     *         java.lang.String, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.xml.sax.ContentHandler#characters(char[], int, int)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	/* Retain the previous project file even when the save operation         * crashes in the middle. Also create a backup file after saving. */
WITHOUT_CLASSIFICATION	/* These strings match the XML element names in the argo.tee exactly. */
WITHOUT_CLASSIFICATION	// The following is deprecated, but can never be removed to preserve  // backward compatibility with old project files
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // protected methods
WITHOUT_CLASSIFICATION	// empty constructor
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // abstract methods
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // non-abstract methods
WITHOUT_CLASSIFICATION	//e.g:org.argouml.uml.generator.ui.ClassGenerationDialog -> poseidon.jar
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // convenience methods
WITHOUT_CLASSIFICATION	/* end class SAXParserBase */
WITHOUT_CLASSIFICATION	// Stop UI interception
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.filechooser.FileFilter#getDescription()     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	/* Retain the previous project file even when the save operation         * crashes in the middle. Also create a backup file after saving. */
WITHOUT_CLASSIFICATION	// if save did not raise an exception // and name+"#" exists move name+"#" to name+"~" // this is the correct backup file
WITHOUT_CLASSIFICATION	// frank: in case of exception // delete name and mv name+"#" back to name if name+"#" exists // this is the "rollback" to old file
WITHOUT_CLASSIFICATION	// we have to give a message to user and set the system to unsaved!
WITHOUT_CLASSIFICATION	// we have to give a message to user and set the system to unsaved!
WITHOUT_CLASSIFICATION	// Make sure the file doesn't exist so the user will // get prompted to choose a new name
WITHOUT_CLASSIFICATION	// possibly use the following instead //            MemberFilePersister persister = new DiagramMemberFilePersister();
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // class methods
WITHOUT_CLASSIFICATION	/* end class XMLTokenTableBase */
WITHOUT_CLASSIFICATION	// These are the file formats I know about:
WITHOUT_CLASSIFICATION	// If anything goes wrong return the stack // trace as a string so that we get some // useful feedback.
WITHOUT_CLASSIFICATION	/**     * Return just the comment edges for a specific layer.     * TODO: Document: Diagram / layer?     *     * @param diagram The diagram.     * @return a {@link List} with the edges.     */
WITHOUT_CLASSIFICATION	/* make sure this setting exists in the configuration file         * to facilitate changing: */
WITHOUT_CLASSIFICATION	// Is row at top of screen?
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.filechooser.FileFilter#getDescription()     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // FileFilter API
WITHOUT_CLASSIFICATION	// this check for files without extension...
WITHOUT_CLASSIFICATION	//        }
WITHOUT_CLASSIFICATION	/* end class XMLElement */
WITHOUT_CLASSIFICATION	// for AndroMDA
WITHOUT_CLASSIFICATION	// For some reason, this alleged directory is a single file // This could be that there is some confusion or just // the normal, that a single file was selected and is // supposed to be imported.
WITHOUT_CLASSIFICATION	// Get the contents of the directory
WITHOUT_CLASSIFICATION	// The following test can cause trouble with // links, because links are accepted as // directories, even if they link files. Links // could also result in infinite loops. For this // reason we don't do this traversing recursively.
WITHOUT_CLASSIFICATION	// If this file is a directory
WITHOUT_CLASSIFICATION	// load profile name
WITHOUT_CLASSIFICATION	// Yes, scroll up one row
WITHOUT_CLASSIFICATION	/* Testing: Works Ok. */
WITHOUT_CLASSIFICATION	// if there is only one package in the model, // we should suppose it's the profile model, // if there is more than one, we take the ones // marked as <<profile>>
WITHOUT_CLASSIFICATION	// load profile dependencies
WITHOUT_CLASSIFICATION	/* Set up the property panels for critics: */
WITHOUT_CLASSIFICATION	/* init profiles defined in jar files */
WITHOUT_CLASSIFICATION	// We have our own UML2 profile, but it is not used. Instead, // by the following line the build-in eclipse UML2 standard // profile and primitive types implementation are used.
WITHOUT_CLASSIFICATION	// Missing WFRs
WITHOUT_CLASSIFICATION	// Association Class // 4.5.3.2 [1]
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	// 4.5.3.2 [2]
WITHOUT_CLASSIFICATION	// Behavioral Feature // 4.5.3.5 [2]
WITHOUT_CLASSIFICATION	/* TODO: Partly overlaps CrOppEndVsAttr. */
WITHOUT_CLASSIFICATION	/* Tested with fabricated XMI - OK. */
WITHOUT_CLASSIFICATION	/* Tested with fabricated XMI - OK. */
WITHOUT_CLASSIFICATION	/* Tested with fabricated XMI - OK. */
WITHOUT_CLASSIFICATION	// 4.5.3.20 [4]
WITHOUT_CLASSIFICATION	//                    + "a.allConnections->exists(r | r.type.oclIsKindOf(Actor)) and "
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAIfExpression(tudresden.ocl.parser.node.AIfExpression)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALogicalExpressionTail(tudresden.ocl.parser.node.ALogicalExpressionTail)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseARelationalExpressionTail(tudresden.ocl.parser.node.ARelationalExpressionTail)     */
WITHOUT_CLASSIFICATION	// UseCase // 4.11.3.5 [2]
WITHOUT_CLASSIFICATION	// Classifier // 4.5.3.8 [5]
WITHOUT_CLASSIFICATION	// GeneralizableElement // 4.5.3.20 [1]
WITHOUT_CLASSIFICATION	// DataType // 4.5.3.12 [1]
WITHOUT_CLASSIFICATION	// Actor // 4.11.3.1 [1]
WITHOUT_CLASSIFICATION	// Namespace // 4.5.3.26 [2]
WITHOUT_CLASSIFICATION	// UseCase // 4.11.3.5 [1]
WITHOUT_CLASSIFICATION	// Actor // 4.11.3.1 [2]
WITHOUT_CLASSIFICATION	/* Tested OK, except in some cases, depending on the         * sequence of the EPs. Probably the implementation of         * "forAll (x, y | ..." does not cover all combinations. */
WITHOUT_CLASSIFICATION	// UseCase // 4.11.3.5 [4]
WITHOUT_CLASSIFICATION	// UseCase // 4.11.3.5 [3]
WITHOUT_CLASSIFICATION	// ActionState // 4.13.3.2 [3] // Issue 715
WITHOUT_CLASSIFICATION	// no default type for UML2
WITHOUT_CLASSIFICATION	// the UML Profile is always present and default
WITHOUT_CLASSIFICATION	// register the built-in profiles
WITHOUT_CLASSIFICATION	// if an exception is raised file is unusable
WITHOUT_CLASSIFICATION	// if the list does not exist add the code generation and // good practices profiles as default
WITHOUT_CLASSIFICATION	// this profile could have not been loaded when // the default profile configuration // was loaded at first, so we need to do it again
WITHOUT_CLASSIFICATION	// We assume profile is contained in a single extent
WITHOUT_CLASSIFICATION	// Nothing to delete if we couldn't get the packages
WITHOUT_CLASSIFICATION	// If we found an old-style name, update it to the new package name
WITHOUT_CLASSIFICATION	// Make sure the names didn't change again
WITHOUT_CLASSIFICATION	// simply use name as it is
WITHOUT_CLASSIFICATION	// //   if element is an AssociationEnd use //      the namespace of containing association //
WITHOUT_CLASSIFICATION	// if one side is null, compare with the equality operator
WITHOUT_CLASSIFICATION	// XXX: hypotheses for AFeatureCall: fwd = op, val = head
WITHOUT_CLASSIFICATION	// hypotheses no time expression (only invariants)
WITHOUT_CLASSIFICATION	/*                 * For a iterator call we should provide: (a) the variables (b)                 * the expression to be evaluated on each step (c) the                 * lambda-evaluator to evaluate it                 */
WITHOUT_CLASSIFICATION	// XXX hypothesis: no time expression (inv)
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAConstraint(tudresden.ocl.parser.node.AConstraint)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAClassifierContext(tudresden.ocl.parser.node.AClassifierContext)     */
WITHOUT_CLASSIFICATION	// these operations are ok for lists too
WITHOUT_CLASSIFICATION	// LOG.log(Level.FINE, "OCL FEATURE CALL: " + subject + ""+ type +""+ feature + "" // + parameters);
WITHOUT_CLASSIFICATION	// XXX this should be done in CollectionsModelInterpreter // but it can't trigger another invokeFeature...
WITHOUT_CLASSIFICATION	// /** //  * Logger. //  */ // private static final Logger LOG = //     Logger.getLogger(DefaultOclEvaluator.class.getName());
WITHOUT_CLASSIFICATION	//LOG.log(Level.FINE, "OCL: " + ocl);
WITHOUT_CLASSIFICATION	// propagate
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// if test fails this element should not // be in the result set
WITHOUT_CLASSIFICATION	// if test is ok this element should not // be in the result set
WITHOUT_CLASSIFICATION	// these operations are ok for bags too
WITHOUT_CLASSIFICATION	/* 4.5.2.1 Abstraction */
WITHOUT_CLASSIFICATION	/* 4.5.2.3 Association */
WITHOUT_CLASSIFICATION	// Additional Operation 4.5.3.1 [1]
WITHOUT_CLASSIFICATION	/* 4.5.2.5 AssociationEnd */
WITHOUT_CLASSIFICATION	// Additional Operation 4.5.3.3 [1]
WITHOUT_CLASSIFICATION	/* 4.5.2.6 Attribute */
WITHOUT_CLASSIFICATION	/* 4.5.2.7 BehavioralFeature */
WITHOUT_CLASSIFICATION	/* 4.5.2.8 Binding */
WITHOUT_CLASSIFICATION	/* 4.5.2.9 Class */
WITHOUT_CLASSIFICATION	/* 4.5.2.10 Classifier */
WITHOUT_CLASSIFICATION	// TODO specifiedEnd??
WITHOUT_CLASSIFICATION	/* 4.5.2.11 Comment */
WITHOUT_CLASSIFICATION	/* 4.5.2.12 Component */
WITHOUT_CLASSIFICATION	// Additional Operation in 4.5.3.9
WITHOUT_CLASSIFICATION	// No, scroll down one row
WITHOUT_CLASSIFICATION	/* 4.5.2.14 Dependency */
WITHOUT_CLASSIFICATION	/* 4.5.2.18 ElementOwnership */
WITHOUT_CLASSIFICATION	/* 4.5.2.19 Enumeration */
WITHOUT_CLASSIFICATION	/* 4.5.2.20 EnumerationLiteral */
WITHOUT_CLASSIFICATION	/* 4.5.2.21 Feature */
WITHOUT_CLASSIFICATION	/* 4.5.2.23 Generalizable Element */
WITHOUT_CLASSIFICATION	// Additional Operation in 4.5.3.20
WITHOUT_CLASSIFICATION	/* 4.5.2.26 Method */
WITHOUT_CLASSIFICATION	/* 4.5.2.27 ModelElement */
WITHOUT_CLASSIFICATION	// avoiding null names
WITHOUT_CLASSIFICATION	// As extended by 4.6.2.2
WITHOUT_CLASSIFICATION	// Additional Operations in 4.5.3.25
WITHOUT_CLASSIFICATION	// Additional Operations in 4.5.3.26
WITHOUT_CLASSIFICATION	/* 4.5.2.29 Node */
WITHOUT_CLASSIFICATION	/* 4.5.2.30 Operation */
WITHOUT_CLASSIFICATION	/* 4.5.2.31 Parameter */
WITHOUT_CLASSIFICATION	/* 4.5.2.35 ProgrammingLanguageDataType */
WITHOUT_CLASSIFICATION	// Set the icon:
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#equals(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getMinimumSize()     */
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	/* 4.5.2.37 StructuralFeature */
WITHOUT_CLASSIFICATION	/* 4.5.2.38 TemplateArgument */
WITHOUT_CLASSIFICATION	/* 4.5.2.39 TemplateParameter */
WITHOUT_CLASSIFICATION	/* 4.11.3.5 UseCase */
WITHOUT_CLASSIFICATION	/*  The operation specificationPath results in a set containing                     * all surrounding Namespaces that are not instances of                     *  Package.                     *  specificationPath : Set(Namespace)                     * specificationPath = self.allSurroundingNamespaces->select(n |                     *    n.oclIsKindOf(Subsystem) or n.oclIsKindOf(Class))                     **/
WITHOUT_CLASSIFICATION	/* 4.5.3.2 AssociationClass */
WITHOUT_CLASSIFICATION	/* The operation allConnections results in the set of all                     * AssociationEnds of the AssociationClass, including all                     * connections defined by its parent (transitive closure).                     */
WITHOUT_CLASSIFICATION	/* 4.6.2.3 Stereotype */
WITHOUT_CLASSIFICATION	// stereotypeConstraint ?
WITHOUT_CLASSIFICATION	/* 4.6.2.4 TagDefinition */
WITHOUT_CLASSIFICATION	/* 4.6.2.5 TaggedValue */
WITHOUT_CLASSIFICATION	// add adapters that do nothing for keyboard and mouse actions
WITHOUT_CLASSIFICATION	// discard the event if its source is not from the correct type
WITHOUT_CLASSIFICATION	// Guard against error conditions if climb search wasn't successful
WITHOUT_CLASSIFICATION	// Sets the mouse cursor to hourglass mode
WITHOUT_CLASSIFICATION	// Start receiving all events and consume them if necessary
WITHOUT_CLASSIFICATION	// Activate the glass pane capabilities
WITHOUT_CLASSIFICATION	// Stop receiving all events
WITHOUT_CLASSIFICATION	// Deactivate the glass pane capabilities
WITHOUT_CLASSIFICATION	// Sets the mouse cursor back to the regular pointer
WITHOUT_CLASSIFICATION	// no initialization required
WITHOUT_CLASSIFICATION	/* end class SpacerPanel */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#getTransferData(java.awt.datatransfer.DataFlavor)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#getTransferDataFlavors()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#isDataFlavorSupported(java.awt.datatransfer.DataFlavor)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * Called when the user has pressed Save. Performs "Save" in all Tabs.     */
WITHOUT_CLASSIFICATION	// Climb the component hierarchy until a RootPaneContainer is found or  // until the very top
WITHOUT_CLASSIFICATION	/* end class SplashPanel */
WITHOUT_CLASSIFICATION	// Retrieve an existing GlassPane if old one already exist or  // create a new one, otherwise return null
WITHOUT_CLASSIFICATION	// Add settings from the settings registry.
WITHOUT_CLASSIFICATION	// keep track of the visible window associated w/the component // useful during event filtering
WITHOUT_CLASSIFICATION	// show a chooser dialog for the file name, only xmi is allowed
WITHOUT_CLASSIFICATION	// If a toolbar was requested, create an empty one.
WITHOUT_CLASSIFICATION	// Increase width to accommodate all tabs on one row.
WITHOUT_CLASSIFICATION	// TODO: Localize
WITHOUT_CLASSIFICATION	// TODO: Localize
WITHOUT_CLASSIFICATION	/*     * Called when the user has pressed Cancel. Performs "Cancel" in all Tabs.     */
WITHOUT_CLASSIFICATION	/* end class TabText */
WITHOUT_CLASSIFICATION	// If a recursive call from setVisible(), just return
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	// windowOpen state will be changed when window is activated
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	/* We have to tell the settings tab in which project                     * the settings reside: */
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	// We only request focus the first time we become visible
WITHOUT_CLASSIFICATION	// Use Case
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowOpened(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	// Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	// Handle the same as an explicit cancel
WITHOUT_CLASSIFICATION	//        savePosition(prpTodo, TabToDo.class); //        savePosition(prpProperties, TabProps.class); //        savePosition(prpDocumentation, TabDocumentation.class); //        savePosition(prpStyle, TabStyle.class); //        savePosition(prpSource, TabSrc.class); //        savePosition(prpConstraints, TabConstraints.class); //        savePosition(prpTaggedValues, TabTaggedValues.class);
WITHOUT_CLASSIFICATION	// defer work until fetched/visible
WITHOUT_CLASSIFICATION	// Actor
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	//        loadPosition(prpTodo, TabToDo.class); //        loadPosition(prpProperties, TabProps.class); //        loadPosition(prpDocumentation, TabDocumentation.class); //        loadPosition(prpStyle, TabStyle.class); //        loadPosition(prpSource, TabSrc.class); //        loadPosition(prpConstraints, TabConstraints.class); //        loadPosition(prpTaggedValues, TabTaggedValues.class);
WITHOUT_CLASSIFICATION	// ------------- Rule management --------------
WITHOUT_CLASSIFICATION	// ----------- name -------------------------
WITHOUT_CLASSIFICATION	// ------ all rules ----------
WITHOUT_CLASSIFICATION	/** TODO: factor out     *     * @param rule the rule to be added     */
WITHOUT_CLASSIFICATION	// Put the current pane in a scroll pane.
WITHOUT_CLASSIFICATION	/* end class StylePanelFigText */
WITHOUT_CLASSIFICATION	// NOTE: These must stay in this order to match rendering styles
WITHOUT_CLASSIFICATION	// The boundary box as held in the target fig, and as listed in // the // boundary box style field (null if we don't have anything // valid)
WITHOUT_CLASSIFICATION	// Only reset the text if the two are not the same (i.e the fig // has // moved, rather than we've just edited the text, when // setTargetBBox() // will have made them the same). Note that styleBounds could // be null, // so we do the test this way round.
WITHOUT_CLASSIFICATION	// Change the fill colour
WITHOUT_CLASSIFICATION	// Change the line colour
WITHOUT_CLASSIFICATION	// Can't do anything if we don't have a fig.
WITHOUT_CLASSIFICATION	// Parse the boundary box text. Null is // returned if it is empty or // invalid, which causes no change. Otherwise we tell // GEF we are making // a change, make the change and tell GEF we've // finished.
WITHOUT_CLASSIFICATION	// Get the text in the field, and don't do anything if the // field is // empty.
WITHOUT_CLASSIFICATION	// Parse the string as if // possible
WITHOUT_CLASSIFICATION	// Empty implementation - we only care about keyTyped
WITHOUT_CLASSIFICATION	// Empty implementation - we only care about keyTyped
WITHOUT_CLASSIFICATION	// ignored - will never be called
WITHOUT_CLASSIFICATION	// add preloading progress bar?
WITHOUT_CLASSIFICATION	// JasonsThemes
WITHOUT_CLASSIFICATION	// TODO - lets pass in Project as a constructor argument
WITHOUT_CLASSIFICATION	/* Make up a default */
WITHOUT_CLASSIFICATION	/*lafClass == null ||*/
WITHOUT_CLASSIFICATION	// Set to the default LAF
WITHOUT_CLASSIFICATION	/* top, left, bottom, right */
WITHOUT_CLASSIFICATION	// If LAF is Metal (either set explicitly, or as the default)
WITHOUT_CLASSIFICATION	// Set a custom LAF
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.JTree#fireTreeCollapsed(javax.swing.tree.TreePath)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.JTree#setModel(javax.swing.tree.TreeModel)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getName()     */
WITHOUT_CLASSIFICATION	// TODO: Localize
WITHOUT_CLASSIFICATION	// TODO: Localize
WITHOUT_CLASSIFICATION	/* It looks better if the height increases, too */
WITHOUT_CLASSIFICATION	// TODO: 10 and 120 were found by trial and error.  Calculate them.
WITHOUT_CLASSIFICATION	//pack();
WITHOUT_CLASSIFICATION	// Not localized:
WITHOUT_CLASSIFICATION	// Alphabetic order!
WITHOUT_CLASSIFICATION	// Alphabetic order!
WITHOUT_CLASSIFICATION	/* end class AboutBox */
WITHOUT_CLASSIFICATION	// Save project at slightly lower priority to keep UI responsive
WITHOUT_CLASSIFICATION	// saves the project
WITHOUT_CLASSIFICATION	/* MVW: We should use default font sizes as much as possible.         * BTW, this impacts only the width, and reduces readibility:         */
WITHOUT_CLASSIFICATION	//        setFont(LookAndFeelMgr.getInstance().getSmallFont());
WITHOUT_CLASSIFICATION	// This enables tooltips for tree; this one won't be shown:
WITHOUT_CLASSIFICATION	/* The default (16) puts the icons too close together: */
WITHOUT_CLASSIFICATION	// ------------ methods that override JTree methods ---------
WITHOUT_CLASSIFICATION	/*                 * If the name is too long or multi-line (e.g. for comments)                 * then we reduce to the first line or 80 chars.                 */
WITHOUT_CLASSIFICATION	// Look for stereotype
WITHOUT_CLASSIFICATION	// Use default formatting for any other type of UML element
WITHOUT_CLASSIFICATION	// ------------- other methods ------------------
WITHOUT_CLASSIFICATION	/* Labels at the left ... */
WITHOUT_CLASSIFICATION	/* ... and fields at the right. */
WITHOUT_CLASSIFICATION	/* The user's full name: */
WITHOUT_CLASSIFICATION	/* The user's email: */
WITHOUT_CLASSIFICATION	/* The project description: */
WITHOUT_CLASSIFICATION	/* This non-editable field shows          * the version of the ArgoUML          * that last saved this project: */
WITHOUT_CLASSIFICATION	/* We need to fill the whole pane,          * so that the description field can          * take all available space: */
WITHOUT_CLASSIFICATION	// There is no default description.
WITHOUT_CLASSIFICATION	// //////
WITHOUT_CLASSIFICATION	// Defer all work until we're actually needed
WITHOUT_CLASSIFICATION	// ////////////
WITHOUT_CLASSIFICATION	// //////////
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// these are blue in Metal Default Theme
WITHOUT_CLASSIFICATION	// these are gray in Metal Default Theme
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ActionListener implementation
WITHOUT_CLASSIFICATION	// //////
WITHOUT_CLASSIFICATION	// /////
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary1()     */
WITHOUT_CLASSIFICATION	//    private JCheckBox jchbBold = null;
WITHOUT_CLASSIFICATION	// find and add all subdirectories
WITHOUT_CLASSIFICATION	//    private JCheckBox jchbItalic = null;
WITHOUT_CLASSIFICATION	// Initialize font faces list
WITHOUT_CLASSIFICATION	// Most of this code originates from ActionOpenProject.
WITHOUT_CLASSIFICATION	// Initialize font sizes list
WITHOUT_CLASSIFICATION	//            jContentPane.add(getJchbBold(), gridBagConstraints2); //            jContentPane.add(getJchbItalic(), gridBagConstraints3);
WITHOUT_CLASSIFICATION	/* Try adding the extension from the chosen filter. */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // MouseListener implementation
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	// these are blue in Metal Default Theme
WITHOUT_CLASSIFICATION	// these are gray in Metal Default Theme
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // KeyListener implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ListSelectionListener implementation
WITHOUT_CLASSIFICATION	// diagrams are not placed in search results
WITHOUT_CLASSIFICATION	// Only return once per diagram so we don't, for example, find // a class as a diagram element and also as a child of a package // which is on the diagram
WITHOUT_CLASSIFICATION	// no related
WITHOUT_CLASSIFICATION	//TODO: tabs for class, state, usecase, help
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// TabResults has really large preferred height, so divide in // half to reduce size of dialog which will be sized based on // this preferred size.
WITHOUT_CLASSIFICATION	// Load project at slightly lower priority to keep UI responsive
WITHOUT_CLASSIFICATION	//JTabbedPane tabs = new JTabbedPane(); //mainPanel.add(tabs, BorderLayout.CENTER); //tabs.addTab("All Diagrams", allDiagrams);
WITHOUT_CLASSIFICATION	/* The south panel always has tabs - but they are             * added (later) elsewhere.             */
WITHOUT_CLASSIFICATION	// loads the project
WITHOUT_CLASSIFICATION	// default tab todo
WITHOUT_CLASSIFICATION	// Special case for backward compatibility
WITHOUT_CLASSIFICATION	// default tab todo
WITHOUT_CLASSIFICATION	// Select prop panel if current panel is not appropriate // for selected target
WITHOUT_CLASSIFICATION	// not visible any more - so remove as listener
WITHOUT_CLASSIFICATION	// Newly selected tab may have stale target info, so generate // a new set target event for it to refresh it
WITHOUT_CLASSIFICATION	// update the previously selected tab
WITHOUT_CLASSIFICATION	// The other tabs need to be updated depending on the selection.
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// TODO: Quick return here for target == null? - tfm
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	//          Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// ---------------- listener management ----------------
WITHOUT_CLASSIFICATION	// --------------- tree nodes -------------------------
WITHOUT_CLASSIFICATION	// ------------- tree structure -----------------
WITHOUT_CLASSIFICATION	// see getValue(), setValue()
WITHOUT_CLASSIFICATION	//Create a timer.
WITHOUT_CLASSIFICATION	// Mount the glasspane on the component window
WITHOUT_CLASSIFICATION	// keep track of the glasspane as an instance variable
WITHOUT_CLASSIFICATION	// Start interception UI interactions
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/* If action comes in with *no* modifiers, it is a pure                 * keyboard event (e.g. spacebar), so do it.  Anything else                 * is probably a mouse event, so ignore it. Mouse events are                 * dealt with by mousePressed() instead (see bottom of page).                 */
WITHOUT_CLASSIFICATION	/* end class StylePanel */
WITHOUT_CLASSIFICATION	//}
WITHOUT_CLASSIFICATION	// Make sure the correspondence that we depend on doesn't change
WITHOUT_CLASSIFICATION	//getContentPane().add(_menuBar, BorderLayout.NORTH);
WITHOUT_CLASSIFICATION	// allows me to ask "Do you want to save first?"
WITHOUT_CLASSIFICATION	// Add listener for project changes
WITHOUT_CLASSIFICATION	// add listener to get notified when active diagram changes
WITHOUT_CLASSIFICATION	// Add a listener to focus changes. // Rationale: reset the undo manager to start a new chain.
WITHOUT_CLASSIFICATION	/* We get many many events (why?), so let's filter: */
WITHOUT_CLASSIFICATION	// create the todopane
WITHOUT_CLASSIFICATION	/*         * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.JFrame#getJMenuBar()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#setVisible(boolean)     */
WITHOUT_CLASSIFICATION	// There are various details panes all of which could hold // different tabs pages according to users settings. // Place each pane in the required border area.
WITHOUT_CLASSIFICATION	// Toolbar boundary is the area between the menu and the status // bar. It contains the workarea at centre and the toolbar // position north, south, east or west.
WITHOUT_CLASSIFICATION	// Add target listeners for details panes
WITHOUT_CLASSIFICATION	// Convenience methods to return saved width and height values
WITHOUT_CLASSIFICATION	// In theory there can be multiple details pane (work in // progress). It must first be determined which details // page contains the properties tab. Bob Tarling 7 Dec 2002
WITHOUT_CLASSIFICATION	// The trySave method results in the save taking place in another thread. // If that completes without error the ProjectBrowser.exit() method will // be called which will actually exist the system.
WITHOUT_CLASSIFICATION	/* end class WindowCloser */
WITHOUT_CLASSIFICATION	// the project changed
WITHOUT_CLASSIFICATION	//Designer.TheDesigner.getToDoList().removeAllElements();
WITHOUT_CLASSIFICATION	// update all panes
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////////////////////////// // TargetListener methods implemented so notified when selected // diagram changes. Used to update the window title.
WITHOUT_CLASSIFICATION	// this method is invoked from several places, so we have to check // whether if the project uri is set or not
WITHOUT_CLASSIFICATION	// does the file really exists?
WITHOUT_CLASSIFICATION	// project file doesn't exist. let's pop up a message dialog..
WITHOUT_CLASSIFICATION	// ..and let's ask the user whether he wants to save the actual // project into a new file or not
WITHOUT_CLASSIFICATION	// save action has been cancelled
WITHOUT_CLASSIFICATION	// Attempt to save this project under a new name.
WITHOUT_CLASSIFICATION	// Prompt the user for the new name.
WITHOUT_CLASSIFICATION	// let's call the real save method
WITHOUT_CLASSIFICATION	// Repair any errors in the project
WITHOUT_CLASSIFICATION	/*             * notification of menu bar             */
WITHOUT_CLASSIFICATION	/*     * Simulate some errors to repair.     * Replace with junits - Bob     */
WITHOUT_CLASSIFICATION	// Change to true to enable testing
WITHOUT_CLASSIFICATION	// A Fig with a null owner
WITHOUT_CLASSIFICATION	// A Fig with a null layer
WITHOUT_CLASSIFICATION	// A Fig with a removed model element
WITHOUT_CLASSIFICATION	// Remove the old project first.  It's wasteful to create a temp // empty project, but too much of ArgoUML depends on having a // current project
WITHOUT_CLASSIFICATION	// Let's save this project in the mru list
WITHOUT_CLASSIFICATION	// Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	// Let's save this project as the last used one // in the configuration file
WITHOUT_CLASSIFICATION	// an error that can be corrected by the user, so no stack // trace, but instead an explanation and a hint how to fix
WITHOUT_CLASSIFICATION	// an error that can be corrected by the user, so no stack // trace, but instead an explanation and a hint how to fix
WITHOUT_CLASSIFICATION	// This is temporary. Load project // should create a new project // with its own UndoManager and so // there should be no Command
WITHOUT_CLASSIFICATION	// Make sure save action is always reinstated
WITHOUT_CLASSIFICATION	// We clear the save-required flag on the Swing event thread // in the hopes that it gets done after any other background // work (listener updates) that is being done there
WITHOUT_CLASSIFICATION	// adding project files icon
WITHOUT_CLASSIFICATION	/* end class ProjectBrowser */
WITHOUT_CLASSIFICATION	// Defer initialization until we're visible
WITHOUT_CLASSIFICATION	// Make the result inmediately visible in case of apply:
WITHOUT_CLASSIFICATION	/* Disabled since it gives various problems: e.g. the toolbar icons         * get too wide. Also the default does not give the new java 5.0 looks.        SwingUtilities.updateComponentTreeUI(SwingUtilities.getRootPane(this));        */
WITHOUT_CLASSIFICATION	//filled in later
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnName(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getRowCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getValueAt(int, int)     */
WITHOUT_CLASSIFICATION	// Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	// Create new menu item if it doesn't exist for this class.
WITHOUT_CLASSIFICATION	// Make this change persistant
WITHOUT_CLASSIFICATION	// If menus don't containt menu item necessary for this class, create it
WITHOUT_CLASSIFICATION	// If visibility is already changed for this class, respect it.
WITHOUT_CLASSIFICATION	// If there is persistant state for this toolbar, respect it, // or add it to persistance data
WITHOUT_CLASSIFICATION	// Queue to event thread to prevent race during close
WITHOUT_CLASSIFICATION	// Add toolbar.
WITHOUT_CLASSIFICATION	// Register popup menu with toolbar.
WITHOUT_CLASSIFICATION	// these settings are needed to make the ProgressMonitor pop up early
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *      java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowActivated(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowDeiconified(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowIconified(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	// Add settings from the settings registry.
WITHOUT_CLASSIFICATION	// Increase width to accommodate all tabs on one row.
WITHOUT_CLASSIFICATION	// windowOpen state will be changed when window is activated
WITHOUT_CLASSIFICATION	/*     * Called when the user has pressed Save. Performs "Save" in all Tabs.     */
WITHOUT_CLASSIFICATION	/*     * Called when the user has pressed Cancel. Performs "Cancel" in all Tabs.     */
WITHOUT_CLASSIFICATION	// We only request focus the first time we become visible
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	// Handle the same as an explicit cancel
WITHOUT_CLASSIFICATION	// File load/save gets done on a background thread, so we'll  // probably have to queue this to the Swing event thread
WITHOUT_CLASSIFICATION	// TODO: concatenate? - tfm // overwrite for now
WITHOUT_CLASSIFICATION	/* end class StylePanelFigRRect */
WITHOUT_CLASSIFICATION	// Let the parent do its refresh.
WITHOUT_CLASSIFICATION	// lets redraw the box
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getPreferredSize()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * Called when the user selects a tab, by clicking or otherwise.     *     * @see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// We don't know what thread events will be delivered on, so make sure // we run Swing methods on the Swing thread
WITHOUT_CLASSIFICATION	//This instead of the label ??? //displayPane.setBorder(new TitledBorder( //    Translator.localize("Display: ")));
WITHOUT_CLASSIFICATION	// add in front of the others // add the label in front of the "pane"
WITHOUT_CLASSIFICATION	// and finally, adjust the scrollbars to show the Fig
WITHOUT_CLASSIFICATION	// % thresholds for bar color changes
WITHOUT_CLASSIFICATION	// making it possible to jump to the modelroots
WITHOUT_CLASSIFICATION	// org.argouml.ui.TabTable // TabMetrics // TabJavaSrc | TabSrc // TabUMLDisplay // TabHash
WITHOUT_CLASSIFICATION	/*     * Timer action method.  Periodically update our stats and force a repaint.     */
WITHOUT_CLASSIFICATION	// Virtual memory (heap) stats
WITHOUT_CLASSIFICATION	// Thin bar to show current allocated heap size
WITHOUT_CLASSIFICATION	// Thin bar to show current used
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	// Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	// the introducing label
WITHOUT_CLASSIFICATION	// how to handle empty target lists?  probably the // MultiEditorPane should only show an empty pane in that case
WITHOUT_CLASSIFICATION	//    private JPanel constraintsTab = new JPanel();
WITHOUT_CLASSIFICATION	//The child is sometimes not found when the tree is being updated
WITHOUT_CLASSIFICATION	//    private JTabbedPane tabs = new JTabbedPane();
WITHOUT_CLASSIFICATION	//        tabs.setMinimumSize(new Dimension(300, 250));
WITHOUT_CLASSIFICATION	//    private JPanel modifiedTab = new JPanel();
WITHOUT_CLASSIFICATION	/* The ActivityGraph. */
WITHOUT_CLASSIFICATION	//    private JPanel tagValsTab = new JPanel();
WITHOUT_CLASSIFICATION	// open space at gridy = 2;
WITHOUT_CLASSIFICATION	//        mainPanel.add(north, BorderLayout.NORTH);
WITHOUT_CLASSIFICATION	// Any type
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     * java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// TODO: Localize
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // MouseListener implementation
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// This text is for the developers. // It doesn't need to be localized.
WITHOUT_CLASSIFICATION	// These shouldn't really be <br> instead of <p> elements, but // the lines all get run together when pasted into a browser window.
WITHOUT_CLASSIFICATION	//        JPanel north = new JPanel(); //        north.setLayout(new BorderLayout()); //        north.add(tabs, BorderLayout.CENTER);
WITHOUT_CLASSIFICATION	//        initConstraintsTab(); //        tabs.addTab(Translator.localize("tab.constraints"), //		     constraintsTab); //        tabs.setEnabledAt(3, false);
WITHOUT_CLASSIFICATION	//        initTagValsTab(); //        tabs.addTab(Translator.localize("dialog.find.tab.tagged-values"), //                tagValsTab); //        tabs.setEnabledAt(2, false);
WITHOUT_CLASSIFICATION	/* end class FindDialog */
WITHOUT_CLASSIFICATION	//name += " in " + dName;
WITHOUT_CLASSIFICATION	// Not in UML 2.x (or metatypes) //        type.addItem(PredicateMType.create( //                Model.getMetaTypes().getActivityGraph()));
WITHOUT_CLASSIFICATION	// Set the name and icon:
WITHOUT_CLASSIFICATION	//help tab is 0
WITHOUT_CLASSIFICATION	// end runGC_actionPerformed()
WITHOUT_CLASSIFICATION	/* end class PredicateMType */
WITHOUT_CLASSIFICATION	//end updateInfo()
WITHOUT_CLASSIFICATION	/* end class NavigatorPane */
WITHOUT_CLASSIFICATION	// end copy_actionPerformed()
WITHOUT_CLASSIFICATION	/* end class ActionGotoDiagram */
WITHOUT_CLASSIFICATION	/* end class SystemInfoDialog */
WITHOUT_CLASSIFICATION	// clean the history
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	/* But exclude elements that enclose others,                      * since their algorithms to calculate the minimum size                      * does not take enclosed objects into account: */
WITHOUT_CLASSIFICATION	//        super(Translator.localize("action.size-to-fit-contents"));
WITHOUT_CLASSIFICATION	// unsupported. 
WITHOUT_CLASSIFICATION	/* Only resize elements which the user would also be able             * to resize: */
WITHOUT_CLASSIFICATION	// if a default action was voided then we have to save it
WITHOUT_CLASSIFICATION	// Set the name:
WITHOUT_CLASSIFICATION	// let's load the default shortcut for every action
WITHOUT_CLASSIFICATION	/* end class ActionFind */
WITHOUT_CLASSIFICATION	// let's load the current shortcut from the configuration (as a string)
WITHOUT_CLASSIFICATION	// generate menu
WITHOUT_CLASSIFICATION	// it should never go here!
WITHOUT_CLASSIFICATION	// view menu
WITHOUT_CLASSIFICATION	// file menu
WITHOUT_CLASSIFICATION	// align submenu
WITHOUT_CLASSIFICATION	// edit menu
WITHOUT_CLASSIFICATION	// create menu
WITHOUT_CLASSIFICATION	// arrange menu
WITHOUT_CLASSIFICATION	// help menu
WITHOUT_CLASSIFICATION	// help menu
WITHOUT_CLASSIFICATION	/* This ID is used as DEFAULT_ID ! */
WITHOUT_CLASSIFICATION	/* end class ActionAboutArgoUML */
WITHOUT_CLASSIFICATION	// distribute submenu
WITHOUT_CLASSIFICATION	/* end class ActionPageSetup */
WITHOUT_CLASSIFICATION	// trap focus traversal keys also 
WITHOUT_CLASSIFICATION	// let's add the key printing logic
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	/* The "Close window" shortcut (ALT+F4) actually can't             * be registered as a shortcut,             * because it closes the configuration dialog! */
WITHOUT_CLASSIFICATION	// if a not-default current shortcut was added, then we have to // save it
WITHOUT_CLASSIFICATION	// if the actual is not going to be saved, then try to remove it // (as it could have been cancelled)
WITHOUT_CLASSIFICATION	// no modifiers - let's check if the key is valid
WITHOUT_CLASSIFICATION	// middle of shortcut 
WITHOUT_CLASSIFICATION	// Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	// add last recently used list _before_ exit menu
WITHOUT_CLASSIFICATION	// KeyStroke f7 = KeyStroke.getKeyStroke(KeyEvent.VK_F7, 0);
WITHOUT_CLASSIFICATION	// and exit menu entry starting with separator.
WITHOUT_CLASSIFICATION	// This used to be deferred, but it's only 30-40 msec of work.
WITHOUT_CLASSIFICATION	// now, let's set up the "selected action" container
WITHOUT_CLASSIFICATION	// generate.add(Actions.GenerateWeb);
WITHOUT_CLASSIFICATION	// Add the help menu item.
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the name and icon:
WITHOUT_CLASSIFICATION	// clean the history
WITHOUT_CLASSIFICATION	// Comment out when we are ready to release undo/redo //        JMenuItem undoItem = edit.add( //                ProjectActions.getInstance().getUndoAction()); //        setMnemonic(undoItem, "Undo"); //        ShortcutMgr.assignAccelerator(undoItem, ShortcutMgr.ACTION_UNDO); // //        JMenuItem redoItem = edit.add( //                ProjectActions.getInstance().getRedoAction()); //        setMnemonic(redoItem, "Redo"); //        ShortcutMgr.assignAccelerator(redoItem, ShortcutMgr.ACTION_REDO); // //        edit.addSeparator();
WITHOUT_CLASSIFICATION	// JMenuItem cutItem = edit.add(ActionCut.getInstance()); // setMnemonic(cutItem, "Cut"); // setAccelerator(cutItem, ctrlX); // // JMenuItem copyItem = edit.add(ActionCopy.getInstance()); // setMnemonic(copyItem, "Copy"); // setAccelerator(copyItem, ctrlC); // // JMenuItem pasteItem = edit.add(ActionPaste.getInstance()); // setMnemonic(pasteItem, "Paste"); // setAccelerator(pasteItem, ctrlV); // // edit.addSeparator();
WITHOUT_CLASSIFICATION	/* Create the edit toolbar based on the Menu.             * All menuItems that have an Icon are presumed to             * be based upon an Action,             * and these Actions are used in the toolbar.  */
WITHOUT_CLASSIFICATION	// setHelpMenu(help);
WITHOUT_CLASSIFICATION	//Component or Action
WITHOUT_CLASSIFICATION	// set maximum length of menu entry
WITHOUT_CLASSIFICATION	//JMenuItem item = _fileMenu.add(new ActionReopenProject(filename));
WITHOUT_CLASSIFICATION	// the text is used by the event handler for opening the project
WITHOUT_CLASSIFICATION	// create all nessessary configuration keys for lru
WITHOUT_CLASSIFICATION	// holds file menu
WITHOUT_CLASSIFICATION	// text is short, tooltip is long
WITHOUT_CLASSIFICATION	// read existing file names from configuration
WITHOUT_CLASSIFICATION	// empty entry stops reading --> last line!
WITHOUT_CLASSIFICATION	// this is the recent count
WITHOUT_CLASSIFICATION	// delete all existing entries
WITHOUT_CLASSIFICATION	// add new entry as first entry
WITHOUT_CLASSIFICATION	// add other existing entries, but filter the just added one
WITHOUT_CLASSIFICATION	// save count
WITHOUT_CLASSIFICATION	// and store configuration props
WITHOUT_CLASSIFICATION	/* end class ActionExit */
WITHOUT_CLASSIFICATION	// box.setLocationRelativeTo(jframe);
WITHOUT_CLASSIFICATION	/* end class ActionHelp */
WITHOUT_CLASSIFICATION	// instantiation not allowed
WITHOUT_CLASSIFICATION	/* end class ActionPrint */
WITHOUT_CLASSIFICATION	// let's add the table, inside a JScrollPane
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getColumnCount()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getColumnName(int)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getRowCount()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getValueAt(int, int)         */
WITHOUT_CLASSIFICATION	// Do nothing! // The next time we refresh, we will fetch the values again.
WITHOUT_CLASSIFICATION	// Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	// init from config // read number, write result as new default and prepare keys
WITHOUT_CLASSIFICATION	// get already existing names from menu actions // real file names, not action names !
WITHOUT_CLASSIFICATION	// let's enable the radiobuttons container
WITHOUT_CLASSIFICATION	// updating the radiobuttons container's title
WITHOUT_CLASSIFICATION	// let's select the correct radio button
WITHOUT_CLASSIFICATION	// no shortcuts --> NONE
WITHOUT_CLASSIFICATION	// current shortcut == default --> DEFAULT
WITHOUT_CLASSIFICATION	// customized shortcut --> CUSTOM
WITHOUT_CLASSIFICATION	// let's reload the shortcuts
WITHOUT_CLASSIFICATION	// conflict detected: showing a warning to the user, instead of // saving shortcuts
WITHOUT_CLASSIFICATION	// saving shortcuts
WITHOUT_CLASSIFICATION	// if a shortcut has been select then we have to check if the actual // action is in conflict with other ones
WITHOUT_CLASSIFICATION	// this shortcut was already been assigned to another action; // let's pop-up a message for the user
WITHOUT_CLASSIFICATION	// blanking the old action's shortcut.. // and now refreshing the table.
WITHOUT_CLASSIFICATION	// re-selecting the old row, without changing the target - // and without throwing another ListSelectionEvent!
WITHOUT_CLASSIFICATION	// let's change the target
WITHOUT_CLASSIFICATION	// duplicate shortcut not found; let's check for duplicates
WITHOUT_CLASSIFICATION	// there's a duplicate: let's recheck if there is a conflict
WITHOUT_CLASSIFICATION	// updating the shortcut field
WITHOUT_CLASSIFICATION	// updating the table data
WITHOUT_CLASSIFICATION	// updating the actions
WITHOUT_CLASSIFICATION	// the shortcut has already been assigned to another action!
WITHOUT_CLASSIFICATION	// if the given object is a KeyStroke instance, then we ca
WITHOUT_CLASSIFICATION	// let's update also the actions array
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// show a chooser dialog for the file name, only xmi is allowed
WITHOUT_CLASSIFICATION	/* The default nr of rows is 8,          * but since we have 9 perspectives by default now,          * setting to 9 is nicer. */
WITHOUT_CLASSIFICATION	/* Check if multiple items are selected. */
WITHOUT_CLASSIFICATION	// profile section: dealing with profiles in different states
WITHOUT_CLASSIFICATION	// 1. a noneditable applied profile
WITHOUT_CLASSIFICATION	// just no item added in this case
WITHOUT_CLASSIFICATION	// 3. the editable unapplied profile
WITHOUT_CLASSIFICATION	// end of profile section
WITHOUT_CLASSIFICATION	// Can't delete last top level model
WITHOUT_CLASSIFICATION	// Determine if only diagrams are in the target list.
WITHOUT_CLASSIFICATION	// "x nodes and x edges"
WITHOUT_CLASSIFICATION	// Check to see if all targets are classifiers // before adding an option to create an association between // them all
WITHOUT_CLASSIFICATION	// test if this element can be contained by the target
WITHOUT_CLASSIFICATION	// iterate through all possible model elements to determine which // are valid to be contained by the selected target
WITHOUT_CLASSIFICATION	/* end class ActionAddExistingRelatedNode */
WITHOUT_CLASSIFICATION	// this element can be contained add a menu item // that allows the user to take that action
WITHOUT_CLASSIFICATION	/* ... otherwise we select the item below the mousepointer. */
WITHOUT_CLASSIFICATION	/*             * We preserve the current (multiple) selection, if we are over part             * of it ...             */
WITHOUT_CLASSIFICATION	// unimplemented - we only care about expanding
WITHOUT_CLASSIFICATION	/* end class ExplorerMouseListener */
WITHOUT_CLASSIFICATION	// does nothing.
WITHOUT_CLASSIFICATION	// need to update the selection state.
WITHOUT_CLASSIFICATION	/*     * Perform recursive search of subtree rooted at 'node', selecting all nodes     * which have a userObject matching one of our targets.     */
WITHOUT_CLASSIFICATION	// get the elements
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// target may appear multiple places in the tree, so // we don't stop here (but it's expensive to search // the whole tree) - tfm - 20070904 // targets.remove(t); // break;
WITHOUT_CLASSIFICATION	// scan the visible rows for duplicates of // this elem and select them
WITHOUT_CLASSIFICATION	// check which targetmanager method to call
WITHOUT_CLASSIFICATION	// we must call the correct method on targetmanager // for each added or removed target
WITHOUT_CLASSIFICATION	// we can't remove the targets in one go, we have to // do it one by one.
WITHOUT_CLASSIFICATION	// setTargets(e.getNewTargets());
WITHOUT_CLASSIFICATION	// setTargets(e.getNewTargets());
WITHOUT_CLASSIFICATION	// at the top // right bottom // left bottom
WITHOUT_CLASSIFICATION	// the dialog is modal
WITHOUT_CLASSIFICATION	//sortJListModel(ruleLibraryList);
WITHOUT_CLASSIFICATION	//disable the buttons for now, since no selection has been made yet
WITHOUT_CLASSIFICATION	// the text will be set later
WITHOUT_CLASSIFICATION	// the text will be set later
WITHOUT_CLASSIFICATION	// remove the ones already selected (if a perspective is selected)
WITHOUT_CLASSIFICATION	// add them
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// update the label (which shows the number of rules)
WITHOUT_CLASSIFICATION	// must add an editable list of new ExplorerPerspective's // to the list model so that the original ones are not changed // in the case of a cancel action by the user.
WITHOUT_CLASSIFICATION	// set the newly selected item in the library list
WITHOUT_CLASSIFICATION	// update the label (which shows the number of rules)
WITHOUT_CLASSIFICATION	// set the newly selected item in the library list
WITHOUT_CLASSIFICATION	// remove the rule from the library list
WITHOUT_CLASSIFICATION	/* The name of the UMLDiagram                  * represented by this node has changed. */
WITHOUT_CLASSIFICATION	// uml model events
WITHOUT_CLASSIFICATION	// notation events
WITHOUT_CLASSIFICATION	// Handle remove for non-UML elements (e.g. diagrams)
WITHOUT_CLASSIFICATION	/*         * Get the selected targets (UML ModelElements)         * from the TargetManager.         */
WITHOUT_CLASSIFICATION	// project events
WITHOUT_CLASSIFICATION	// show a chooser dialog for the file name, only xmi is allowed
WITHOUT_CLASSIFICATION	// get one of the default profile dirs, if available // (as a default value for the following save dialog)
WITHOUT_CLASSIFICATION	// save profile
WITHOUT_CLASSIFICATION	// register it as a user profile
WITHOUT_CLASSIFICATION	// this is safe because getName always returns a string of some type
WITHOUT_CLASSIFICATION	// load user perspectives
WITHOUT_CLASSIFICATION	// get the perspective name
WITHOUT_CLASSIFICATION	// make sure there are some rules...
WITHOUT_CLASSIFICATION	// get the rules
WITHOUT_CLASSIFICATION	// get the rule name
WITHOUT_CLASSIFICATION	// create the rule
WITHOUT_CLASSIFICATION	// rule name but no rules
WITHOUT_CLASSIFICATION	// add the perspective
WITHOUT_CLASSIFICATION	// no user defined perspectives
WITHOUT_CLASSIFICATION	// one last check that some loaded.
WITHOUT_CLASSIFICATION	// works for both statediagram as activitygraph
WITHOUT_CLASSIFICATION	// Enter here go rules only relevant for UML 2 // empty for now
WITHOUT_CLASSIFICATION	/*         * The drag gesture recognizer fires events         * in response to drag gestures in a component.         */
WITHOUT_CLASSIFICATION	//specifies valid actions
WITHOUT_CLASSIFICATION	// Eliminates right mouse clicks as valid actions
WITHOUT_CLASSIFICATION	// First argument:  Component to associate the target with // Second argument: DropTargetListener
WITHOUT_CLASSIFICATION	/*         * Get the cell renderer (which is a JLabel)         * for the path being dragged.         */
WITHOUT_CLASSIFICATION	/* The layout manager would normally do this: */
WITHOUT_CLASSIFICATION	// Get a buffered image of the selection for dragging a ghost image
WITHOUT_CLASSIFICATION	/*         * Ask the cell renderer to paint itself into the BufferedImage.         * Make the image ghostlike.         */
WITHOUT_CLASSIFICATION	/*         * Now paint a gradient UNDER the ghosted JLabel text         * (but not under the icon if any).         */
WITHOUT_CLASSIFICATION	/* Make the gradient ghostlike: */
WITHOUT_CLASSIFICATION	/*         * Remember the path being dragged (because if it is being moved,         * we will have to delete it later).         */
WITHOUT_CLASSIFICATION	/*         * We pass our drag image just in case         * it IS supported by the platform.         */
WITHOUT_CLASSIFICATION	/* If the destination is not a NameSpace, then abort: */
WITHOUT_CLASSIFICATION	/* If the destination is a DataType, then abort: */
WITHOUT_CLASSIFICATION	/* We are sure "dest" is a Namespace now. */
WITHOUT_CLASSIFICATION	/*         * MVW: These are the WFRs for DataType:         * [1] A DataType can only contain Operations,         * which all must be queries.         * self.allFeatures->forAll(f |         *  f.oclIsKindOf(Operation) and f.oclAsType(Operation).isQuery)         * [2] A DataType cannot contain any other ModelElements.         *  self.allContents->isEmpty         *  IMHO we should enforce these WFRs here.         *  ... so it is still possible to copy or move query operations,         *  hence we should allow this.         */
WITHOUT_CLASSIFICATION	/*         * Let's check all dragged elements - if one of these         * may be dropped, then the drag is valid.         * The others will be ignored when dropping.         */
WITHOUT_CLASSIFICATION	// empty implementation - not used.
WITHOUT_CLASSIFICATION	// empty implementation - not used.
WITHOUT_CLASSIFICATION	// empty implementation - not used.
WITHOUT_CLASSIFICATION	// Figure out which row we're on.
WITHOUT_CLASSIFICATION	// If we are not on a row then ignore this autoscroll request
WITHOUT_CLASSIFICATION	/* We are sure "dest" is a Namespace now. */
WITHOUT_CLASSIFICATION	//  Autoscroll Interface... //  The following code was borrowed from the book: // 		Java Swing // 		By Robert Eckstein, Marc Loy & Dave Wood // 		Paperback - 1221 pages 1 Ed edition (September 1998) // 		O'Reilly & Associates; ISBN: 156592455X // //  The relevant chapter of which can be found at: // 		http://www.oreilly.com/catalog/jswing/chapter/dnd.beta.pdf
WITHOUT_CLASSIFICATION	// Now decide if the row is at the top of the screen or at the // bottom. We do this to make the previous row (or the next // row) visible as appropriate. If were at the absolute top or // bottom, just return the first or last row respectively.
WITHOUT_CLASSIFICATION	/* Set up a hover timer, so that a node will be             * automatically expanded or collapsed             * if the user lingers on it for more than a short time.             */
WITHOUT_CLASSIFICATION	/*isRootPath*/
WITHOUT_CLASSIFICATION	// Set timer to one-shot mode
WITHOUT_CLASSIFICATION	//            LOG.log(Level.FINE, "dragOver");
WITHOUT_CLASSIFICATION	/*             * The next condition becomes false when dragging in             * something from another application.             */
WITHOUT_CLASSIFICATION	/*                 * If a drag image is not supported by the platform,                 * then draw my own drag image.                 */
WITHOUT_CLASSIFICATION	/* Rub out the last ghost image and cue line: */
WITHOUT_CLASSIFICATION	/* And remember where we are about to draw                     * the new ghost image:                     */
WITHOUT_CLASSIFICATION	// Just rub out the last cue line
WITHOUT_CLASSIFICATION	/*             * In any case draw (over the ghost image if necessary)             * a cue line indicating where a drop will occur.             */
WITHOUT_CLASSIFICATION	// And include the cue line in the area to be rubbed out next time
WITHOUT_CLASSIFICATION	/* Testcase: drag something from another             * application into ArgoUML,             * and the explorer shows the drop icon, instead of the noDrop.             */
WITHOUT_CLASSIFICATION	// to prohibit dropping onto the drag source:
WITHOUT_CLASSIFICATION	/* If the destination is not a NameSpace, then reject: */
WITHOUT_CLASSIFICATION	/* If the destination is a DataType, then reject: */
WITHOUT_CLASSIFICATION	/* Prevent hover timer from doing an unwanted             * expandPath or collapsePath:             */
WITHOUT_CLASSIFICATION	/* Clear the ghost image: */
WITHOUT_CLASSIFICATION	//get new parent node
WITHOUT_CLASSIFICATION	//get the model elements that are being transfered.
WITHOUT_CLASSIFICATION	/* The user-DropActions are:                 * Ctrl + Shift -> ACTION_LINK                 * Ctrl         -> ACTION_COPY                 * Shift        -> ACTION_MOVE                 * (none)       -> ACTION_MOVE                 */
WITHOUT_CLASSIFICATION	// Only accept COPY or MOVE gestures (ie LINK is not supported)
WITHOUT_CLASSIFICATION	// Only accept COPY or MOVE gestures (ie LINK is not supported)
WITHOUT_CLASSIFICATION	// Do this if you want to prohibit dropping onto the drag source...
WITHOUT_CLASSIFICATION	// Do this if you want to prohibit dropping onto the drag source...
WITHOUT_CLASSIFICATION	/* end class */
WITHOUT_CLASSIFICATION	// remove references for gc
WITHOUT_CLASSIFICATION	// This should only be helpful for old garbage collectors.
WITHOUT_CLASSIFICATION	// Avoid doing this too early in the initialization process
WITHOUT_CLASSIFICATION	// Avoid recursively updating the same child
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.DefaultTreeModel#insertNodeInto(javax.swing.tree.MutableTreeNode, javax.swing.tree.MutableTreeNode, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.DefaultTreeModel#removeNodeFromParent(javax.swing.tree.MutableTreeNode)     */
WITHOUT_CLASSIFICATION	// This is somewhat inconsistent with the design of the constructor // that receives the root object by argument. If this is okay // then there may be no need for a constructor with that argument.
WITHOUT_CLASSIFICATION	// Enumerate the current children of node to find out which now sorts // in different order, since these must be moved
WITHOUT_CLASSIFICATION	// Avoid our deinitialization here // The node will be added back to the tree again
WITHOUT_CLASSIFICATION	// For each reordered node, find it's new position among the current // children and move it there
WITHOUT_CLASSIFICATION	// Avoid our initialization here
WITHOUT_CLASSIFICATION	// Collect the current set of objects that should be children to // this node
WITHOUT_CLASSIFICATION	// Handle WeakExplorerNodes
WITHOUT_CLASSIFICATION	// Remove the node from removeSet
WITHOUT_CLASSIFICATION	// Remove obj3 from weakNodes and newChildren
WITHOUT_CLASSIFICATION	// Remember that children are not TreeNodes but UserObjects
WITHOUT_CLASSIFICATION	// Add any remaining nodes
WITHOUT_CLASSIFICATION	// it is the combo for "order"
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Order the new children, the dependencies cannot and // need not be ordered
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// Sequence diagrams are not shown as children of the // collaboration that they show but as children of the // classifier/operation the collaboration represents. // Statediagrams and activitydiagrams are shown as children // of the statemachine or activitygraph they belong to.
WITHOUT_CLASSIFICATION	//was ""
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// abstractions are represented in the Inheritance Node.
WITHOUT_CLASSIFICATION	// abstractions are represented in the Inheritance Node.
WITHOUT_CLASSIFICATION	// abstractions are represented in the Inheritance Node.
WITHOUT_CLASSIFICATION	// abstractions are represented in the Inheritance Node.
WITHOUT_CLASSIFICATION	// the name of this instance of diagram
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	/* Also show unattached sequence diagrams: */
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// in UML2, we don't want to see element imports in profiles
WITHOUT_CLASSIFICATION	/*(MAssociationEnd)*/
WITHOUT_CLASSIFICATION	/*(MAssociationEnd)*/
WITHOUT_CLASSIFICATION	/*(MAssociationEnd)*/
WITHOUT_CLASSIFICATION	/** * Rule for Project->Root (Top level) Elements. *  * TODO: As currently implemented it returns all top level elements in  * the model repository, not just those in a given project.  Since we * only support a single project at a time currently, these are equivalent * but this will need to be enhanced with additional bookkeeping in  * Project when we support multiple open projects - tfm. * * TODO: I changed it to get the roots from the project. It was showing * the profiles that were loaded but were not applied to the current project * - maurelio1234. *  * @author Tom Morris <tfmorris@gmail.com> */
WITHOUT_CLASSIFICATION	// in UML2, some elements are not to be shown
WITHOUT_CLASSIFICATION	// don't show a profile application
WITHOUT_CLASSIFICATION	// don't show element imports in profiles
WITHOUT_CLASSIFICATION	// don't show extensions in profiles
WITHOUT_CLASSIFICATION	//&& Model.getFacade().isAProperty(o)
WITHOUT_CLASSIFICATION	// don't show base_... properties in stereotypes
WITHOUT_CLASSIFICATION	// "N/A" or "x nodes and x edges"
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// Transition
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: what?
WITHOUT_CLASSIFICATION	// Todo: What?
WITHOUT_CLASSIFICATION	// First get the collection of ElementResidence
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: what?
WITHOUT_CLASSIFICATION	// only targets we didn't have allready count
WITHOUT_CLASSIFICATION	// If nothing selected, go to last selected target
WITHOUT_CLASSIFICATION	// Needed for Argo startup :-(
WITHOUT_CLASSIFICATION	/* Remove duplicates and take care of getOwner()         * and remove nulls: */
WITHOUT_CLASSIFICATION	/*|| !targets.contains(target)*/
WITHOUT_CLASSIFICATION	//	targets.remove(target);
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// implement set-like behaviour. The same element // may not be added more then once.
WITHOUT_CLASSIFICATION	// we put the targets 'backwards' in the history // since the first target in the addedTargets array is // the first one selected.
WITHOUT_CLASSIFICATION	// cannot break here since an object can be multiple // times in history
WITHOUT_CLASSIFICATION	// CommentEdge - the owner of a FigEdgeNote
WITHOUT_CLASSIFICATION	// check if there are new elements in the list // if the old and new list are of the same size // set the oldTargets to the correct selection
WITHOUT_CLASSIFICATION	// If not found, try the parent namespace
WITHOUT_CLASSIFICATION	// Listen for the removal of diagrams from project
WITHOUT_CLASSIFICATION	// give priority to standard documentation tag
WITHOUT_CLASSIFICATION	// Figs on a diagram without an owning model element
WITHOUT_CLASSIFICATION	/* end class DocumentationManager */
WITHOUT_CLASSIFICATION	// TODO: Needs localization
WITHOUT_CLASSIFICATION	/* end class ChildGenRelated */
WITHOUT_CLASSIFICATION	/*         * Convert the string (e.g. "aaa,bbb,ccc") into separate         * stereotype-names (e.g. "aaa", "bbb", "ccc").         */
WITHOUT_CLASSIFICATION	// adds all stereotypes defined at the top level namespaces
WITHOUT_CLASSIFICATION	// and now remove them
WITHOUT_CLASSIFICATION	// collect the to be removed stereotypes
WITHOUT_CLASSIFICATION	// the name of this type of diagram
WITHOUT_CLASSIFICATION	// add stereotypes
WITHOUT_CLASSIFICATION	// Loop through each element in the namespace, recursing.
WITHOUT_CLASSIFICATION	/* end class UUIDManager */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.util.ChildGenerator#gen(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// Instance
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // comments
WITHOUT_CLASSIFICATION	// For all other model elements, return any elements // associated in any way
WITHOUT_CLASSIFICATION	// adds all stereotypes defined at the profiles applied to the // current namespace
WITHOUT_CLASSIFICATION	// adds all stereotypes defined at the profiles applied // to the current project
WITHOUT_CLASSIFICATION	//////////////// // TableModel implementation
WITHOUT_CLASSIFICATION	// the name of this type of ModelElement
WITHOUT_CLASSIFICATION	// the name of this instance of ModelElement
WITHOUT_CLASSIFICATION	// the name of the parent diagram instance
WITHOUT_CLASSIFICATION	// the name of this type of Object
WITHOUT_CLASSIFICATION	// not safe to presume the destination is the comment
WITHOUT_CLASSIFICATION	// this also sets the target as a convenient side effect
WITHOUT_CLASSIFICATION	// This is the tooltip of a comment link
WITHOUT_CLASSIFICATION	// Class
WITHOUT_CLASSIFICATION	/* end class ProjectMemberModel */
WITHOUT_CLASSIFICATION	//??
WITHOUT_CLASSIFICATION	//??
WITHOUT_CLASSIFICATION	//??
WITHOUT_CLASSIFICATION	// Association
WITHOUT_CLASSIFICATION	// Attribute
WITHOUT_CLASSIFICATION	// State
WITHOUT_CLASSIFICATION	// Operation
WITHOUT_CLASSIFICATION	// Interface
WITHOUT_CLASSIFICATION	// Link
WITHOUT_CLASSIFICATION	// // This function will, by design, contain long lists of i18n keys. // It might be tempting to shorten these by constructing them from // the parts but please then consider that we might loose the // possibility to build tools to statically check the property files // against this file. //
WITHOUT_CLASSIFICATION	//umlReserved.add("document");
WITHOUT_CLASSIFICATION	// replace all occurances of OFFENDER with the name of the // first offender
WITHOUT_CLASSIFICATION	// check for all uppercase and/or mixed with underscores
WITHOUT_CLASSIFICATION	//umlReserved.add("file");
WITHOUT_CLASSIFICATION	//umlReserved.add("node");
WITHOUT_CLASSIFICATION	//umlReserved.add("send");
WITHOUT_CLASSIFICATION	/* The modelelement must have been                 * deleted - ignore this - it will pass. */
WITHOUT_CLASSIFICATION	// TODO: This could just work off the names in the UML profile // TODO: It doesn't look like it matches what's in the UML 1.4 spec
WITHOUT_CLASSIFICATION	//umlReserved.add("destroy");
WITHOUT_CLASSIFICATION	// self.allConnections->forAll(ar|ar.participant <> self)
WITHOUT_CLASSIFICATION	/* end class CrCircularAssocClass */
WITHOUT_CLASSIFICATION	/*(MAttribute)*/
WITHOUT_CLASSIFICATION	// If the name is only underscores
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#paintIcon(java.awt.Component, java.awt.Graphics,     * int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#getIconWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#getIconHeight()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#paintIcon(java.awt.Component, java.awt.Graphics,     *      int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#getIconWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#getIconHeight()     */
WITHOUT_CLASSIFICATION	//     umlReserved.add("initial"); //     umlReserved.add("final"); //     umlReserved.add("fork"); //     umlReserved.add("join"); //     umlReserved.add("history");
WITHOUT_CLASSIFICATION	//umlReserved.add("copy"); //umlReserved.add("create");
WITHOUT_CLASSIFICATION	// Types can probably have associations, but we should not nag at them // not having any. // utility is a namespace collection - also not strictly required // to have associations.
WITHOUT_CLASSIFICATION	/* end class ClAttributeCompartment */
WITHOUT_CLASSIFICATION	// check whether constant, constants are often weird and thus not a // problem
WITHOUT_CLASSIFICATION	// why are we here?
WITHOUT_CLASSIFICATION	// If the classifier does not have a name, // then no problem - the model is not finished anyhow.
WITHOUT_CLASSIFICATION	// added by Eric Lefevre 13 Mar 1999: we must check if the // FigText for attributes is drawn before drawing things // over it
WITHOUT_CLASSIFICATION	// Abstract elements do not necessarily require associations
WITHOUT_CLASSIFICATION	//TODO: different critic or special message for classes //that inherit all ops but define none of their own.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// added by Eric Lefevre 13 Mar 1999: we must check if the // FigText for operations is drawn before drawing things // over it
WITHOUT_CLASSIFICATION	// special cases for use cases // Extending use cases and use case that are being included are // not required to have associations.
WITHOUT_CLASSIFICATION	// for use cases we need to check for extend/includes // actors cannot have them, so no need to check
WITHOUT_CLASSIFICATION	// Get the ends from the association (we know there are two), and the // types associated with them.
WITHOUT_CLASSIFICATION	// The association that triggered the critic. Its just possible the // association is no longer there, in which case we return null
WITHOUT_CLASSIFICATION	/* end class ClOperationCompartment */
WITHOUT_CLASSIFICATION	// First step. Create the panel if not already done and options are // available. Otherwise it retains its default value of null.
WITHOUT_CLASSIFICATION	// Now create the five options
WITHOUT_CLASSIFICATION	// Get the names of the two ends. If there are none (i.e they are // currently anonymous), use the ArgoUML convention of "(anon)" for the // names
WITHOUT_CLASSIFICATION	// Default (any other step) is to return nothing
WITHOUT_CLASSIFICATION	// Just completed the first step where we make our choices. First // see if we have a choice. We always should, so print a rude // message if we don't
WITHOUT_CLASSIFICATION	// Set the appropriate aggregation on each end
WITHOUT_CLASSIFICATION	// It is quite possible that the cause of the problem has by now // been deleted, in which case we will throw an exception if we try // to change things. Catch this tidily.
WITHOUT_CLASSIFICATION	// Start is a composite aggregation of end
WITHOUT_CLASSIFICATION	// Start is a shared aggregation of end
WITHOUT_CLASSIFICATION	// End is a composite aggregation of start
WITHOUT_CLASSIFICATION	// End is a shared aggregation of start
WITHOUT_CLASSIFICATION	// No aggregation
WITHOUT_CLASSIFICATION	// Someone took our association away.
WITHOUT_CLASSIFICATION	// Can't finish if our parent can't
WITHOUT_CLASSIFICATION	// Can finish if it's step 0
WITHOUT_CLASSIFICATION	// Can finish if we're on step1 and have actually made a choice
WITHOUT_CLASSIFICATION	// Otherwise we can't finish
WITHOUT_CLASSIFICATION	// TODO: The WFR doesn't restrict this to Classifiers - tfm
WITHOUT_CLASSIFICATION	// TODO: The WFR doesn't restrict this to Classifiers - tfm
WITHOUT_CLASSIFICATION	/*Model.getFacade().getModelElement(*/
WITHOUT_CLASSIFICATION	/*)*/
WITHOUT_CLASSIFICATION	// replace all occurances of OFFENDER with the name of the // first offender
WITHOUT_CLASSIFICATION	// check if there is no OCL_END; if so, the critic expression // is not correct and can not be expanded
WITHOUT_CLASSIFICATION	// Get the Association and its connections. // Iterate over all the AssociationEnds and check that each connected // classifier is in the same sub-system or model
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // display related methods
WITHOUT_CLASSIFICATION	/* end class CrInterfaceAllPublic */
WITHOUT_CLASSIFICATION	// return original string if no replacements made
WITHOUT_CLASSIFICATION	// If we drop out there is no problem
WITHOUT_CLASSIFICATION	// Only look at associations
WITHOUT_CLASSIFICATION	/* end class CrCrossNamespaceAssoc */
WITHOUT_CLASSIFICATION	//TODO: different critic for packages consisting only //of references to elements of other packages?
WITHOUT_CLASSIFICATION	// The next AssociationEnd, and its classifier. Check the // classifier is in the namespace of the association. If not we // have a problem.
WITHOUT_CLASSIFICATION	// original class was not abstract
WITHOUT_CLASSIFICATION	// theStereotype.setStereotype(???);
WITHOUT_CLASSIFICATION	// found a concrete subclass
WITHOUT_CLASSIFICATION	// Nothing to do.
WITHOUT_CLASSIFICATION	// no concrete subclasses defined, this class is "useless"
WITHOUT_CLASSIFICATION	// //   see if there is already an element with the same name //
WITHOUT_CLASSIFICATION	/* end class CrClassMustBeAbstract */
WITHOUT_CLASSIFICATION	/* end class CrUselessAbstract */
WITHOUT_CLASSIFICATION	/*(MClassifier)*/
WITHOUT_CLASSIFICATION	// Only look at classes
WITHOUT_CLASSIFICATION	//TODO: different critic or special message for classes //that inherit all ops but define none of their own.
WITHOUT_CLASSIFICATION	// utility is a namespace collection - also not strictly // required to have operations.
WITHOUT_CLASSIFICATION	/* end class CrTooManyAssoc */
WITHOUT_CLASSIFICATION	/* end class CrUselessInterface */
WITHOUT_CLASSIFICATION	/* end class CrComponentInstanceWithoutClassifier */
WITHOUT_CLASSIFICATION	/* end class CrTooManyClasses */
WITHOUT_CLASSIFICATION	// We don't consider secondary stuff.
WITHOUT_CLASSIFICATION	// if the object does not have a name, // than no problem
WITHOUT_CLASSIFICATION	// types can probably contain operations, but we should not nag at them // not having any.
WITHOUT_CLASSIFICATION	// Types don't need a constructor.
WITHOUT_CLASSIFICATION	// Utilities usually do not require a constructor either
WITHOUT_CLASSIFICATION	// Check for uninitialised instance variables and // constructor.
WITHOUT_CLASSIFICATION	// Get all the features (giving up if there are none). Then loop // through finding all operations. Each time we find one, we compare // its signature with all previous (held in collection operSeen),  // and then if it doesn't match add it to the collection.
WITHOUT_CLASSIFICATION	// There is a constructor.
WITHOUT_CLASSIFICATION	/* end class CrTooManyStates */
WITHOUT_CLASSIFICATION	// We have found a non-static one that is not initialized.
WITHOUT_CLASSIFICATION	// Compare against all earlier operations. If there's a match we've // found the problem
WITHOUT_CLASSIFICATION	// Check that the parameter lists match.
WITHOUT_CLASSIFICATION	// Add to the collection and round to look at the next one
WITHOUT_CLASSIFICATION	// yeah right...we don't have an operation (and thus no
WITHOUT_CLASSIFICATION	// This pair of params where the same. Lets check the next pair.
WITHOUT_CLASSIFICATION	// Only do this for classifiers
WITHOUT_CLASSIFICATION	// Get the next non-return parameter. Null if non left.
WITHOUT_CLASSIFICATION	// If we drop out here, there was no match and we have no problem
WITHOUT_CLASSIFICATION	// Check that the names match.
WITHOUT_CLASSIFICATION	// Both lists have the same length
WITHOUT_CLASSIFICATION	// Both lists have the same length.
WITHOUT_CLASSIFICATION	// Different lengths:
WITHOUT_CLASSIFICATION	/* end class CrMultiComposite */
WITHOUT_CLASSIFICATION	// Compare the type of the parameters. If any of the types is // null, then we have a match.
WITHOUT_CLASSIFICATION	// normal model elements are not allowed to have spaces, // but for States we make an exception
WITHOUT_CLASSIFICATION	// initialize test data
WITHOUT_CLASSIFICATION	/* end class CrIllegalName */
WITHOUT_CLASSIFICATION	/* dm is a transition */
WITHOUT_CLASSIFICATION	// initialize new ToDoItem
WITHOUT_CLASSIFICATION	/* the source of the transition is a pseudostate */
WITHOUT_CLASSIFICATION	/* the source of the transition is a choice */
WITHOUT_CLASSIFICATION	/* end class CrTooManyAttr */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // critiquing API
WITHOUT_CLASSIFICATION	/* end class CrZeroLengthEdge */
WITHOUT_CLASSIFICATION	/*(MStateVertex)*/
WITHOUT_CLASSIFICATION	/*(MAssociationEnd)*/
WITHOUT_CLASSIFICATION	// only classes with name need a constructor
WITHOUT_CLASSIFICATION	//Forks have their own outgoing transitions critic
WITHOUT_CLASSIFICATION	// types can probably have variables, but we should not nag at them // not having any.
WITHOUT_CLASSIFICATION	// code generation
WITHOUT_CLASSIFICATION	// utility is a namespace collection - also not strictly // required to have variables.
WITHOUT_CLASSIFICATION	// If we find an instance variable that is not a constant // we have succeeded
WITHOUT_CLASSIFICATION	// I am only prepared to go this far.
WITHOUT_CLASSIFICATION	/*(Classifier)*/
WITHOUT_CLASSIFICATION	// first element is e.g. the class, but we need to have its namespace // to recompute the offenders.
WITHOUT_CLASSIFICATION	// Compound critics
WITHOUT_CLASSIFICATION	// warn about inherited name conflicts, different critic?
WITHOUT_CLASSIFICATION	// warn about inherited name conflicts, different critic?
WITHOUT_CLASSIFICATION	/*(MAssociation)*/
WITHOUT_CLASSIFICATION	// Only look at Associations
WITHOUT_CLASSIFICATION	// container state / composite state
WITHOUT_CLASSIFICATION	// Iterate over all the AssociationEnds. We only have a problem if 1) // there is an end connected to an Interface and 2) an end other than // that end is navigable.
WITHOUT_CLASSIFICATION	// both ends must be classes, otherwise there is nothing to merge
WITHOUT_CLASSIFICATION	// We can give up looking if we've hit both criteria
WITHOUT_CLASSIFICATION	// both ends must be navigable, otherwise there is nothing to merge
WITHOUT_CLASSIFICATION	// End at an Interface? // Navigable other end?
WITHOUT_CLASSIFICATION	/* end class CrMergeClasses */
WITHOUT_CLASSIFICATION	// Specify design issue category and knowledge type
WITHOUT_CLASSIFICATION	// If we drop out we didn't meet both criteria, and all is well.
WITHOUT_CLASSIFICATION	// The next AssociationEnd
WITHOUT_CLASSIFICATION	// If its an interface we have an interface end, otherwise its // something else and we should see if it is navigable. We don't // check that the end is a Classifier, rather than its child // ClassifierRole, since we have effectively eliminated that // possiblity in rejecting AssociationRoles above.
WITHOUT_CLASSIFICATION	/* end class CrNavFromInterface */
WITHOUT_CLASSIFICATION	/*(MCompositeState)*/
WITHOUT_CLASSIFICATION	/* end class CrNoInitialState */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // critiquing API
WITHOUT_CLASSIFICATION	/* end class CrInstanceWithoutClassifier */
WITHOUT_CLASSIFICATION	/* Now we are sure dm is a Composite State. */
WITHOUT_CLASSIFICATION	// In DeploymentDiagrams the situation is not the // same as in other diagrams only classes, // interfaces and objects can intersect each other // while they are not the EnclosingFig, so you // have to prouve only these elements.
WITHOUT_CLASSIFICATION	/* Now we are sure dm is a StateVertex. */
WITHOUT_CLASSIFICATION	/* Now we are sure dm is a State. */
WITHOUT_CLASSIFICATION	/* If dm is the top state of the statemachine, then it is              * not supposed to have incoming transitions. */
WITHOUT_CLASSIFICATION	/*(MAssociationEnd)*/
WITHOUT_CLASSIFICATION	/*(MAssociation)*/
WITHOUT_CLASSIFICATION	// container state / composite state
WITHOUT_CLASSIFICATION	/* end class CrInvalidSynch */
WITHOUT_CLASSIFICATION	// no good trigger
WITHOUT_CLASSIFICATION	/* end class CrConflictingComposites */
WITHOUT_CLASSIFICATION	/* end class CrAlreadyRealizes */
WITHOUT_CLASSIFICATION	/* end class CrUnnavigableAssoc */
WITHOUT_CLASSIFICATION	//TODO: GenNavigableClasses?
WITHOUT_CLASSIFICATION	/* end class CrDisambigStateName */
WITHOUT_CLASSIFICATION	/*(MAssociationEnd)*/
WITHOUT_CLASSIFICATION	/*(MAssociation)*/
WITHOUT_CLASSIFICATION	/* end class WizMEName */
WITHOUT_CLASSIFICATION	// Only for associations
WITHOUT_CLASSIFICATION	// Get the assocations and connections. No problem (there is a separate // critic) if this is not a binary association or is an association // role.
WITHOUT_CLASSIFICATION	// Loop through the associations, counting the ends with aggregations
WITHOUT_CLASSIFICATION	// A problem if we found more than 1 aggregation
WITHOUT_CLASSIFICATION	/* end class CrMultipleAgg */
WITHOUT_CLASSIFICATION	/* end class CrNameConflictAC */
WITHOUT_CLASSIFICATION	/* end class WizNavigable */
WITHOUT_CLASSIFICATION	/* end class CrFinalSubclassed */
WITHOUT_CLASSIFICATION	// no good trigger
WITHOUT_CLASSIFICATION	//TODO: AssociationRole
WITHOUT_CLASSIFICATION	//                LOG.log(Level.FINE, "Finding children for " + o.getClass());
WITHOUT_CLASSIFICATION	// argument can be an instanceof a Fig which we ignore
WITHOUT_CLASSIFICATION	// no need for trigger on "specialization"
WITHOUT_CLASSIFICATION	/* end class CrCircularInheritance */
WITHOUT_CLASSIFICATION	/* end class CrNonAggDataType */
WITHOUT_CLASSIFICATION	////////////////
WITHOUT_CLASSIFICATION	////////////////
WITHOUT_CLASSIFICATION	// test an unknown file
WITHOUT_CLASSIFICATION	// container state / composite state
WITHOUT_CLASSIFICATION	// no good trigger
WITHOUT_CLASSIFICATION	/*(MTransition)*/
WITHOUT_CLASSIFICATION	// WFR Transitions, OMG UML 1.3
WITHOUT_CLASSIFICATION	// Only work for associations
WITHOUT_CLASSIFICATION	//	 WFR Transitions, OMG UML 1.3
WITHOUT_CLASSIFICATION	// No problem if this is an association role.
WITHOUT_CLASSIFICATION	// Loop through all the ends, comparing the name against those already // seen (ignoring any with no name). // No problem if there are no connections defined, we will fall // through immediately.
WITHOUT_CLASSIFICATION	/* end class CrInterfaceOperOnly */
WITHOUT_CLASSIFICATION	// Ignore non-existent and empty names
WITHOUT_CLASSIFICATION	// Is the name already in the list of those seen, if not add it // and go on round.
WITHOUT_CLASSIFICATION	// Only work for associatins
WITHOUT_CLASSIFICATION	// If we drop out there were no clashes
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#paintIcon(java.awt.Component, java.awt.Graphics,     * int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#getIconWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#getIconHeight()     */
WITHOUT_CLASSIFICATION	/*(MAssociationEnd)*/
WITHOUT_CLASSIFICATION	/*(MAssociation)*/
WITHOUT_CLASSIFICATION	/* Now we are sure dm is a StateVertex. */
WITHOUT_CLASSIFICATION	/* Now we are sure dm is a State. */
WITHOUT_CLASSIFICATION	/* Now we are sure dm is a Composite State. */
WITHOUT_CLASSIFICATION	/* end class ClClassName */
WITHOUT_CLASSIFICATION	/* If dm is the top state of the statemachine, then it is              * not supposed to have outgoing transitions. */
WITHOUT_CLASSIFICATION	/* end class CrTooManyOper */
WITHOUT_CLASSIFICATION	/* end class CrTooManyTransitions */
WITHOUT_CLASSIFICATION	// general
WITHOUT_CLASSIFICATION	// Loop through the associations, looking for one with aggregation
WITHOUT_CLASSIFICATION	// If drop out, we're OK
WITHOUT_CLASSIFICATION	/* end class CrNWayAgg.java */
WITHOUT_CLASSIFICATION	/* end class CrOppEndConflict */
WITHOUT_CLASSIFICATION	// we could check for base class of the stereotype but the // condition normally covers it all.
WITHOUT_CLASSIFICATION	// intentional: if there is nonsense in the field, // we return false
WITHOUT_CLASSIFICATION	// intentional: if there is nonsense in the field, // we do not set the value
WITHOUT_CLASSIFICATION	//	fireNodeRemoved(node);
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.Diagram#setName(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#containsNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	//        newEdge.setDiElement( //            GraphChangeAdapter.getInstance().createElement(gm, edge));
WITHOUT_CLASSIFICATION	/////////////////// End GEF methods ////////////////////////
WITHOUT_CLASSIFICATION	// not allowed
WITHOUT_CLASSIFICATION	// return;
WITHOUT_CLASSIFICATION	// TODO: Comments are on Element in UML 2.x
WITHOUT_CLASSIFICATION	/*     * Create a diagram.  This 4-arg version is only for internal use.  The     * 'namespace' argument is deprecated and not used in the new APIs.     */
WITHOUT_CLASSIFICATION	// This shouldn't be possible, but just in case
WITHOUT_CLASSIFICATION	// fail silently as we expect users to accidentally drop // on to wrong component
WITHOUT_CLASSIFICATION	// Create the UML connection of the given type between the // given model elements. // default aggregation (none)
WITHOUT_CLASSIFICATION	// Commentlinks for comments. Iterate over all the comment links // to find the comment and annotated elements.
WITHOUT_CLASSIFICATION	// The connection is not valid unless both nodes are // in this graph model.
WITHOUT_CLASSIFICATION	/*             * The diagram are always owned by the model             * in this first implementation.             */
WITHOUT_CLASSIFICATION	// *IMPORTANT* - These MUST remain in order!
WITHOUT_CLASSIFICATION	// singleton, no instantiation
WITHOUT_CLASSIFICATION	/*     * The special value <code>null</code> is used internally to indicate that     * the default value should be inherited from the next level of settings.     */
WITHOUT_CLASSIFICATION	// Repeat until no faults are fixed
WITHOUT_CLASSIFICATION	/* Diagram appearance settings with project scope: */
WITHOUT_CLASSIFICATION	// We can not remove this and have the application manage things directly // based on the font, since only the names should be bold.
WITHOUT_CLASSIFICATION	/* Some cached fonts based on the above settings */
WITHOUT_CLASSIFICATION	/*         * Since body ever looks         * at the type of the diagram appearance event, we can simplify from         * sending every existing event to one event only. But since there is no         * catch-all event defined, we just use one. Rationale: reduce the         * number of total refreshes of the drawing.         */
WITHOUT_CLASSIFICATION	// If we've got a local (uninherited) font name or size or if we've got // no parent to inherit from recompute our cached fonts
WITHOUT_CLASSIFICATION	/** * This class is a temporary wrapper around the GEF UndoManager. * This will be changed when GEF is modified to create commands and * provide an observer interface for ArgoUML to receive them. * <p> * TODO: How does this relate to {@link org.argouml.kernel.DefaultUndoManager}? * * @author Bob Tarling */
WITHOUT_CLASSIFICATION	// Listen for name changes so we can veto them if we don't like them
WITHOUT_CLASSIFICATION	// get all the classes from the diagram
WITHOUT_CLASSIFICATION	// The fix
WITHOUT_CLASSIFICATION	// The report
WITHOUT_CLASSIFICATION	// The report
WITHOUT_CLASSIFICATION	// The fix
WITHOUT_CLASSIFICATION	// The fix
WITHOUT_CLASSIFICATION	// The fix
WITHOUT_CLASSIFICATION	// 2. Make sure that all Figs are visible
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// TODO: These should get replaced immediately by the creating // initialization code, but make sure we've got a default just in case.
WITHOUT_CLASSIFICATION	// 1. Make sure all Figs in the Diagrams layer refer back to // that layer.
WITHOUT_CLASSIFICATION	// maybe we have a modelelement that is part of some other // fig
WITHOUT_CLASSIFICATION	// Register for notification of any global changes that would affect // our rendering
WITHOUT_CLASSIFICATION	// Add the diagram as a listener to the namespace so // that when the namespace is removed the diagram is deleted also.
WITHOUT_CLASSIFICATION	// 4. Make sure all FigNodes and FigEdges have an owner // The report
WITHOUT_CLASSIFICATION	// 3. Make sure all FigEdges are attached to a valid FigNode // The report
WITHOUT_CLASSIFICATION	// 5. Make sure all FigNodes and FigEdges have a valid owner // The report
WITHOUT_CLASSIFICATION	// 4. Make sure the only FigGroups on a diagram are also //    FigNodes // The report
WITHOUT_CLASSIFICATION	// Do nothing, override in subclass.
WITHOUT_CLASSIFICATION	// If we haven't succeeded in getting a namespace then abort
WITHOUT_CLASSIFICATION	// This should always be true, but just in case...
WITHOUT_CLASSIFICATION	/*     * The diagram to be laid out.     */
WITHOUT_CLASSIFICATION	/*     * List of objects.     *      * NOTE: This methods which read/write this don't appear to be used.     */
WITHOUT_CLASSIFICATION	/*     * Point at which to start layout (initial state goes here). The X     * coordinate must be greater than half the width of the widest figure to     * be placed (because figures are centered on this location).     */
WITHOUT_CLASSIFICATION	/*     * Amount to increment Y position by for each node placed. We pack them     * densely on the assumption that the user is going to split them into at     * least two swimlanes.     */
WITHOUT_CLASSIFICATION	/*     * FinalState element for ActivityDiagram     */
WITHOUT_CLASSIFICATION	// Find our Initial State
WITHOUT_CLASSIFICATION	// Place all the nodes
WITHOUT_CLASSIFICATION	// Place the final state last with a little separation
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// If we're trying to set the namespace to the existing value // then don't do any more work.
WITHOUT_CLASSIFICATION	/*     * Recursively place all nodes pointed to by outgoing transitions.     *      * Because of the recursive algorithm multiple outgoing transitions     * will end up very lopsided because one entire subgraph will be done     * before dealing with the other transition(s).     *      * @param seen set of nodes seen so far     * @param node the node to collect neighbors for     */
WITHOUT_CLASSIFICATION	//        figClone.seperator = (FigLine) it.next();
WITHOUT_CLASSIFICATION	//Needed for project deletion
WITHOUT_CLASSIFICATION	// we want to maintain a minimum size for the partition
WITHOUT_CLASSIFICATION	// TODO: midpoints for side handles
WITHOUT_CLASSIFICATION	/* We removed the last partition, so now remove the pool, too: */
WITHOUT_CLASSIFICATION	// no action required in case of veto on setName
WITHOUT_CLASSIFICATION	// This test needed for project deletion
WITHOUT_CLASSIFICATION	// TODO: side handles
WITHOUT_CLASSIFICATION	/* Listen to activitygraph deletion,         * delete this diagram. */
WITHOUT_CLASSIFICATION	//////////////////////// // actions for toolbar
WITHOUT_CLASSIFICATION	// no action required
WITHOUT_CLASSIFICATION	/* The namespace of the activitygraph is changed! */
WITHOUT_CLASSIFICATION	/*getActionSubactivityState()*/
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *      org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *      java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * The space between the 2 text figs is: PADDING.     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	// we want to maintain a minimum size for the partition
WITHOUT_CLASSIFICATION	/** * Class to display graphics for a UML ObjectFlowState in a diagram.<p> * * The Fig of this modelElement may either represent the following UMLelements: * <p> * (1) an ObjectFlowState with a Classifier as type, or <p> * (2) an ObjectFlowState with a ClassifierInState as type. <p> * * In both cases (1) and (2), the Fig shows * the underlined name of the Classifier, * and in the latter case (2), it shows also the names of the states * of the ClassifierInState. <p> * * In the examples in the UML standard, this is written like<pre> *      PurchaseOrder *       [approved] * </pre> * i.e. in 2 lines. The first line is underlined, * to indicate that it is an instance (object).<p> * * The fact that the first line is underlined, and the 2nd not, is the * reason to implement them in 2 separate Figs.<p> * * TODO: Allow stereotypes to be shown. * * @author mvw */
WITHOUT_CLASSIFICATION	//      Model.getActivityGraphsHelper() //      .isAddingActivityGraphAllowed(base);
WITHOUT_CLASSIFICATION	/* TODO: We may return the following when the         * relocate() has been implemented.         */
WITHOUT_CLASSIFICATION	/* TODO: We may return something useful when the         * relocate() has been implemented. */
WITHOUT_CLASSIFICATION	// register for events from the type
WITHOUT_CLASSIFICATION	// Create a map of partitions keyed by x coordinate
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// Sort the x coordinates into order
WITHOUT_CLASSIFICATION	// the state name
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	// If the layer is null, then most likely we are being deleted.
WITHOUT_CLASSIFICATION	/* Don't listen to all property names             * We only need to listen to its "type", and "remove". */
WITHOUT_CLASSIFICATION	/* the height of the blank space above and below the text figs: */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * Override setBounds to keep shapes looking right.     *     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// and listen to name changes of the submachine
WITHOUT_CLASSIFICATION	// both have the same settings
WITHOUT_CLASSIFICATION	// both have the same owner
WITHOUT_CLASSIFICATION	// add them back to front
WITHOUT_CLASSIFICATION	// Let our superclass sort itself out first
WITHOUT_CLASSIFICATION	// add the listeners to the newOwner
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.SelectionButtons#getNewNode(int)     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // MutableGraphModel implementation
WITHOUT_CLASSIFICATION	/* Set up the property panels for activity diagrams: */
WITHOUT_CLASSIFICATION	// overrule the single-line name-fig created by the parent
WITHOUT_CLASSIFICATION	// A binary association is not a node so reject.
WITHOUT_CLASSIFICATION	//setBlinkPorts(false); //make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	/* TODO: Do we need to clone the stereotype(s)? */
WITHOUT_CLASSIFICATION	/*(MGeneralization)*/
WITHOUT_CLASSIFICATION	/* The stereoDim has height=2, even if it is empty,          * hence the -2 below: */
WITHOUT_CLASSIFICATION	// the width needs to be > the height
WITHOUT_CLASSIFICATION	// Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // GraphModel implementation
WITHOUT_CLASSIFICATION	// TODO:?
WITHOUT_CLASSIFICATION	// ((MClassifier)node).setNamespace(_collab.getNamespace());
WITHOUT_CLASSIFICATION	// TODO: assumes public, user pref for default visibility?
WITHOUT_CLASSIFICATION	/*     * Add the given edge to the graph, if valid.     *     * @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/* TODO: We may return the following when the         * relocate() has been implemented.         */
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	/*     * The NotationProvider for the ClassifierRole. <p>     *      * The syntax is for UML is:     * <pre>     * baselist := [base] [, base]*     * classifierRole := [name] [/ role] [: baselist]     * </pre></p>     *      * The <code>name</code> is the Instance name, not used currently.     * See ClassifierRoleNotationUml for details.<p>     *     * This syntax is compatible with the UML 1.4 specification.     */
WITHOUT_CLASSIFICATION	// TODO: assumes public
WITHOUT_CLASSIFICATION	// The stereotype. Width is the same as the cover, height is its default // (since the font is not yet set). The text should be centered.
WITHOUT_CLASSIFICATION	//throws PropertyVetoException
WITHOUT_CLASSIFICATION	/*(MElementImport)*/
WITHOUT_CLASSIFICATION	//getStereotypeFig().setFilled(false);
WITHOUT_CLASSIFICATION	/* end class CollabDiagramGraphModel */
WITHOUT_CLASSIFICATION	// In the rather unlikely case that we have no name, we give up.
WITHOUT_CLASSIFICATION	// The big port. Color of the big port is irrelevant
WITHOUT_CLASSIFICATION	// The name. Width is the same as the cover, height is the default. // The text of the name will be centered by // default. In the same place as the stereotype, since at this stage // the stereotype is not displayed. Being a classifier role it is // underlined
WITHOUT_CLASSIFICATION	// The cover. 
WITHOUT_CLASSIFICATION	/* At least one stereotype is visible */
WITHOUT_CLASSIFICATION	// Remember where we are at present, so we can tell GEF later. Then // check we are as big as the minimum size
WITHOUT_CLASSIFICATION	// Set the bounds of the bigPort and cover
WITHOUT_CLASSIFICATION	// Work out the padding each side, depending on whether the stereotype // is displayed and set bounds accordingly
WITHOUT_CLASSIFICATION	// Record the changes in the instance variables of our parent, tell GEF // and trigger the edges to reconsider themselves.
WITHOUT_CLASSIFICATION	// singleton
WITHOUT_CLASSIFICATION	//this one behaves differently, hence seperated:
WITHOUT_CLASSIFICATION	//this one behaves differently, hence seperated:
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#calcBounds()     */
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	/* TODO: We may return something useful when the         * relocate() has been implemented. */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // GraphModel implementation
WITHOUT_CLASSIFICATION	// TODO:?
WITHOUT_CLASSIFICATION	// A binary association is not a node so reject.
WITHOUT_CLASSIFICATION	// Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	/* end class FigAssociationRole */
WITHOUT_CLASSIFICATION	// If location is non-null, convert to a rectangle that we can use
WITHOUT_CLASSIFICATION	// TODO -> settings
WITHOUT_CLASSIFICATION	// the figs that make up this group
WITHOUT_CLASSIFICATION	// the figs that make up this group
WITHOUT_CLASSIFICATION	// _x = first.getX(); // _y = first.getY();
WITHOUT_CLASSIFICATION	// _x = first.getX(); // _y = first.getY();
WITHOUT_CLASSIFICATION	/* Set up the property panels for collaboration diagrams: */
WITHOUT_CLASSIFICATION	// this is neat...
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNodeRelatedEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *         java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// TODO: assumes public
WITHOUT_CLASSIFICATION	// Modifiers ...
WITHOUT_CLASSIFICATION	// TODO: assumes public, user pref for default visibility? //do I have to check the namespace here? (Toby)
WITHOUT_CLASSIFICATION	// elementOrdering(figures);
WITHOUT_CLASSIFICATION	// elementOrdering(figures);
WITHOUT_CLASSIFICATION	/* Set up the property panels for deployment diagrams: */
WITHOUT_CLASSIFICATION	//////////////// // actions for toolbar
WITHOUT_CLASSIFICATION	////////////////////////////// // Getters for plugin modules: //////////////////////////////
WITHOUT_CLASSIFICATION	// so it still looks like a cube
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add the listeners to the newOwner
WITHOUT_CLASSIFICATION	// elementOrdering(figures);
WITHOUT_CLASSIFICATION	// elementOrdering(figures);
WITHOUT_CLASSIFICATION	// Modifiers ...
WITHOUT_CLASSIFICATION	//_bigPort.setBounds(x+1, y+1, w-2, h-2);
WITHOUT_CLASSIFICATION	// nothing extra to do currently
WITHOUT_CLASSIFICATION	/*     * North, South, West, East, South-West     */
WITHOUT_CLASSIFICATION	/* end class PredIsStartpackage */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	// If the layer is null, then most likely we are being deleted.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // GraphModel implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // MutableGraphModel implementation
WITHOUT_CLASSIFICATION	// Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // VetoableChangeListener implementation
WITHOUT_CLASSIFICATION	//throws PropertyVetoException
WITHOUT_CLASSIFICATION	// singleton
WITHOUT_CLASSIFICATION	/* end class StateDiagramGraphModel */
WITHOUT_CLASSIFICATION	// Don't do it for comment.
WITHOUT_CLASSIFICATION	/* (MElementImport) */
WITHOUT_CLASSIFICATION	/* (MTransition) */
WITHOUT_CLASSIFICATION	// prevent no changes...
WITHOUT_CLASSIFICATION	/* If a UML object is found, you can not remove selected elms. */
WITHOUT_CLASSIFICATION	// check parameter types:
WITHOUT_CLASSIFICATION	/* If nothing is selected, then not allowed to remove it. */
WITHOUT_CLASSIFICATION	/* If only Figs without owner are selected, then you can remove them! */
WITHOUT_CLASSIFICATION	/* end class PredIsFinalState */
WITHOUT_CLASSIFICATION	/* This presumes that the layer is set after the owner: */
WITHOUT_CLASSIFICATION	/* If it is concurrent and contains concurrent regions,        the bottom region has a minimum height*/
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// The purpose of this method is not explained and it give give // NPE depending on z order of figs as they are read. For now // ignore if null but for future lets delete this.
WITHOUT_CLASSIFICATION	/* We only handle the case where a region has been removed: */
WITHOUT_CLASSIFICATION	/* Check if multiple items are selected: */
WITHOUT_CLASSIFICATION	/* Check if multiple items are selected: */
WITHOUT_CLASSIFICATION	/*If it is concurrent and contains concurrent regions,        the regions are resized*/
WITHOUT_CLASSIFICATION	/* None of the menu-items below apply         * when multiple modelelements are selected:*/
WITHOUT_CLASSIFICATION	// do we need to 
WITHOUT_CLASSIFICATION	/*     * The returned list of Figs is sorted according layout: from top to bottom.     */
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * This makes dragging connected edges very smooth.     *     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	//The event source is the owner stub state
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event processing
WITHOUT_CLASSIFICATION	/* end class FigCompositeState */
WITHOUT_CLASSIFICATION	/*The event source is the submachine state*/
WITHOUT_CLASSIFICATION	//        TargetManager.getInstance().addTargetListener(this);
WITHOUT_CLASSIFICATION	// ignored - fixed rendering
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // Event handlers
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // Cmd API
WITHOUT_CLASSIFICATION	/* end class ActionCreatePseudostate */
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event processing
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	/* The submachine has got a new name*/
WITHOUT_CLASSIFICATION	// The event source is the stub state's referenced state // or one of the referenced state's path.
WITHOUT_CLASSIFICATION	// This indicates a change in association, not name - tfm
WITHOUT_CLASSIFICATION	//All states in the new reference state's path are added // as listeners
WITHOUT_CLASSIFICATION	// The source was the referenced state that has got // a new name.
WITHOUT_CLASSIFICATION	// ignored - rendering is fixed
WITHOUT_CLASSIFICATION	//The source was one of the referenced state's path which // has got a new name.
WITHOUT_CLASSIFICATION	//The old submachine container is deleted as listener
WITHOUT_CLASSIFICATION	// The Referenced State or one of his path's states has got // a new name
WITHOUT_CLASSIFICATION	//The new submachine container is added as listener
WITHOUT_CLASSIFICATION	//All states in the old reference state's path are deleted // as listeners
WITHOUT_CLASSIFICATION	// Translate any old style sequence diagrams
WITHOUT_CLASSIFICATION	// Just swap order of arguments to get to new form
WITHOUT_CLASSIFICATION	// Translate any sequence diagrams create with any previous svn // work in progress
WITHOUT_CLASSIFICATION	// Get the first existing FigNode and if it exists set the // y position and height of _pers to be the same as it.
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	// ignored - rendering is fixed
WITHOUT_CLASSIFICATION	// ignore mouse clicks
WITHOUT_CLASSIFICATION	// ignore mouse clicks
WITHOUT_CLASSIFICATION	// The Machine State has got a new name
WITHOUT_CLASSIFICATION	/* This assert fails for the TestPropertyPanels,          * file GUITestPropertyPanels.zargo: */
WITHOUT_CLASSIFICATION	//assert  w == h;
WITHOUT_CLASSIFICATION	// The Machine State has been deleted from model
WITHOUT_CLASSIFICATION	/* Ignore w and h from here on. */
WITHOUT_CLASSIFICATION	// keep d even or odd, just like the line width:
WITHOUT_CLASSIFICATION	// leave some space below the "include"
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *      org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *      java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor(     *      org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *      java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// both have the same settings
WITHOUT_CLASSIFICATION	// both have the same owner
WITHOUT_CLASSIFICATION	// TODO -> settings
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// There are one or more regions so find the one that the //vertex was dropped in
WITHOUT_CLASSIFICATION	// The vertex was dropped onto the diagram. // Get the region as the first Region in the StateMachine. // If there is no region in the StateMachine then create one.
WITHOUT_CLASSIFICATION	/*     * @see     * org.argouml.uml.diagram.state.ui.FigStateVertex#initNotationProviders     * (java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see     * org.argouml.uml.diagram.ui.FigNodeModelElement#removeFromDiagramImpl()     */
WITHOUT_CLASSIFICATION	// _x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// noop - fixed rendering
WITHOUT_CLASSIFICATION	// There are no regions so create one and // place the vertex there.
WITHOUT_CLASSIFICATION	// Temporary start //    private static final Color[] COLOR_ARRAY = { //        Color.RED, Color.BLUE, Color.CYAN, Color.YELLOW, Color.GREEN}; //    private int nextColor = 0; // Temporary end
WITHOUT_CLASSIFICATION	//setBlinkPorts(false); //make port invisble unless mouse enters
WITHOUT_CLASSIFICATION	// there can only be one
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getUseTrapRect()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	/* We aren't able to resize neither the top bound             * from the first region nor             * the bottom bound from the last region.             */
WITHOUT_CLASSIFICATION	/*The group must be resized if a text field exceed the bounds*/
WITHOUT_CLASSIFICATION	/* if curHandle.index is 0 or 2,             * the adjacent region is the previous region             * but if it is 5 or 7, the adjacent region is the next region.             * curHandle.index show which corner of the bound we are dragging.             */
WITHOUT_CLASSIFICATION	/*         * A Concurrent region cannot have incoming or outgoing transitions so         * incoming or outgoing transitions are redirected to its concurrent         * composite state container.         */
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseMotionListener#mouseMoved(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// nothing we can do about veto, so just ignore it
WITHOUT_CLASSIFICATION	// nothing we can do about veto, so just ignore it
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// singleton
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event processing
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////////////////////////// // event handlers - MouseListener and MouseMotionListener implementation
WITHOUT_CLASSIFICATION	// or just the owner?
WITHOUT_CLASSIFICATION	/* Listen to machine deletion,         * to delete the diagram. */
WITHOUT_CLASSIFICATION	// this in case we are being deleted
WITHOUT_CLASSIFICATION	/* The namespace of the statemachine is changed! */
WITHOUT_CLASSIFICATION	// return;
WITHOUT_CLASSIFICATION	// return;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// A binary association is not a node so reject.
WITHOUT_CLASSIFICATION	//throws PropertyVetoException
WITHOUT_CLASSIFICATION	// If location is non-null, convert to a rectangle that we can use
WITHOUT_CLASSIFICATION	// prevent no changes...
WITHOUT_CLASSIFICATION	// check parameter types:
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	//      Model.getStateMachinesHelper() //              .isAddingStatemachineAllowed(base);
WITHOUT_CLASSIFICATION	/* Set up the property panels for statechart diagrams: */
WITHOUT_CLASSIFICATION	// if location is null here the position of the new figNode is set // after in org.tigris.gef.base.ModePlace.mousePressed(MouseEvent e)
WITHOUT_CLASSIFICATION	//MModelElement modelElement = elementImport.getModelElement();
WITHOUT_CLASSIFICATION	// top of the hierarchy is ME:
WITHOUT_CLASSIFICATION	// top of the hierarchy is ME:
WITHOUT_CLASSIFICATION	// then Generalizable Element
WITHOUT_CLASSIFICATION	// then Generalizable Element
WITHOUT_CLASSIFICATION	// then Classifier & Package
WITHOUT_CLASSIFICATION	// navigable.... only want incoming
WITHOUT_CLASSIFICATION	// then Classifier
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // MutableGraphModel implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // VetoableChangeListener implementation
WITHOUT_CLASSIFICATION	// cast the params
WITHOUT_CLASSIFICATION	// N.B. A node which is an Association is either a n-ary association // or the Class part of an AssociationClass
WITHOUT_CLASSIFICATION	// check param types: only some connections are legal uml connections:
WITHOUT_CLASSIFICATION	//set the new end type!
WITHOUT_CLASSIFICATION	// rerouting the destination:
WITHOUT_CLASSIFICATION	// rerouting the source:
WITHOUT_CLASSIFICATION	// empty at the moment
WITHOUT_CLASSIFICATION	// move down
WITHOUT_CLASSIFICATION	// empty at the moment
WITHOUT_CLASSIFICATION	// empty at the moment
WITHOUT_CLASSIFICATION	// move more right
WITHOUT_CLASSIFICATION	// move left
WITHOUT_CLASSIFICATION	// use left and right, up and down
WITHOUT_CLASSIFICATION	// calculate the higher and lower Figs
WITHOUT_CLASSIFICATION	// the amount of the "sidestep"
WITHOUT_CLASSIFICATION	/*         * If center points are "close enough" we just adjust the endpoints         * of the line a little bit.  Otherwise we add a jog in the middle to         * deal with the offset.         *         * TODO: Epsilon is currently fixed, but could probably be computed         * dynamically as 10% of the width of the narrowest figure or some         * other value which is visually not noticeable.         */
WITHOUT_CLASSIFICATION	// currentEdge.setBetweenNearestPoints(false);
WITHOUT_CLASSIFICATION	//LOG.debug(result + " node1: " + this + ", node2 " + node);
WITHOUT_CLASSIFICATION	// split = //     (split == null || split.isStandalone()) ? node : split;
WITHOUT_CLASSIFICATION	// (xOffset - curW) / 2;
WITHOUT_CLASSIFICATION	// Element is allowed, but only NamedElement can return nonempty list
WITHOUT_CLASSIFICATION	/* Do nothing. */
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	// self associations are special cases. No need to let the maze // runner find the way.
WITHOUT_CLASSIFICATION	// Link does not exist in UML2
WITHOUT_CLASSIFICATION	// now we construct the zig zag inheritance line //getUnderlyingFig()
WITHOUT_CLASSIFICATION	/** * Class to display graphics for a UML Link in a diagram. <p> *  * The underlined association name is shown next to the middle of the path. *  * TODO: Show more notation as described in the standard: * "A rolename may be shown at each end of the link. An association  * name may be shown near the path. If present, it is underlined * to indicate an instance. Links do not have instance names,  * they take their identity from the instances that they relate. * Multiplicity is not shown for links because they are instances.  * Other association adornments (aggregation, composition,  * navigation) may be shown on the link ends." */
WITHOUT_CLASSIFICATION	/*     * Text group to contain name & stereotype     */
WITHOUT_CLASSIFICATION	/* end class FigLink */
WITHOUT_CLASSIFICATION	/* The next line is needed so that we have the right dimension          * when drawing this Fig on the diagram by pressing down          * the mouse button, even before releasing the mouse button: */
WITHOUT_CLASSIFICATION	/* Stereotype covers NameFig: */
WITHOUT_CLASSIFICATION	/* Compartments from top to bottom: */
WITHOUT_CLASSIFICATION	// Make all the parts match the main fig
WITHOUT_CLASSIFICATION	// by default, do not show operations nor attributes:
WITHOUT_CLASSIFICATION	// We're going to change the name immediately, so just use ""
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	//////////////// // actions for toolbar
WITHOUT_CLASSIFICATION	// TODO: place comments near connected classes // TODO: place from middle towards outer edges? (or place largest // groups first)
WITHOUT_CLASSIFICATION	//        boolean hasPackages = false; // TODO: move "package in row" to NodeRow
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// This calls the getters to fetch actions even though the // action variables are defined is instances of this class. // This is because any number of action getters could have // been overridden in a descendant and it is the action from // that overridden method that should be returned in the array.
WITHOUT_CLASSIFICATION	// since UML2, this must appear before the isAClass clause
WITHOUT_CLASSIFICATION	// this rectangle marks the operation section; all operations // are inside it
WITHOUT_CLASSIFICATION	// 2nd compartment, so adjust Y appropriately
WITHOUT_CLASSIFICATION	// TODO: We should be able to just call renderingChanged on the child // figs here instead of doing an updateOperations...
WITHOUT_CLASSIFICATION	// TODO: We just need to get someone to re-render a single // line of text which represents the element here, but I'm // not sure how to do that. - tfm // TODO: Bob replies - we shouldn't be interested in this // event here. The FigFeature (or its notation) should be // listen for change and the FigFeature should be update // from that.
WITHOUT_CLASSIFICATION	// Collect the set of model elements that we want to listen to
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#translate(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// add the listeners to the newOwner
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	// Make all the parts match the main fig
WITHOUT_CLASSIFICATION	/* check if any stereotype is defined */
WITHOUT_CLASSIFICATION	// and the stereotypes of its features
WITHOUT_CLASSIFICATION	// and its features
WITHOUT_CLASSIFICATION	// and the parameter of its operations
WITHOUT_CLASSIFICATION	// Update the listeners to match the desired set using the minimal // update facility
WITHOUT_CLASSIFICATION	// Modifier ...
WITHOUT_CLASSIFICATION	// Create a Body that reacts to double-clicks and jumps to a diagram.
WITHOUT_CLASSIFICATION	// Add ...
WITHOUT_CLASSIFICATION	// Visibility ...
WITHOUT_CLASSIFICATION	// Set properties of the stereotype box. // Initially not set to be displayed, but this will be changed // when we try to render it, if we find we have a stereotype.
WITHOUT_CLASSIFICATION	// There are 2 boxes showing lines: the tab and the body.
WITHOUT_CLASSIFICATION	/* This populates the stereotypes area: */
WITHOUT_CLASSIFICATION	// else nothing changed
WITHOUT_CLASSIFICATION	// else nothing changed
WITHOUT_CLASSIFICATION	/* we got at least one stereotype */
WITHOUT_CLASSIFICATION	// the user wants to hide them
WITHOUT_CLASSIFICATION	// Modifier ...
WITHOUT_CLASSIFICATION	// Visibility ...
WITHOUT_CLASSIFICATION	/* The figPoly is located at the right of the name text.             * The nameFig size is increased, so that it fits its text,             * and the figPoly next to the text, all within the boundaries             * of the nameFig. */
WITHOUT_CLASSIFICATION	// If we have any number of stereotypes displayed, then allow // some space for that (only width, height is included in nameFig):
WITHOUT_CLASSIFICATION	// take into account the tab is not as wide as the body:
WITHOUT_CLASSIFICATION	// we want at least some of the package body to be displayed
WITHOUT_CLASSIFICATION	// And now aSize has the answer
WITHOUT_CLASSIFICATION	// Save our old boundaries (needed later), and get minimum size // info. "aSize" will be used to maintain a running calculation of our // size at various points.
WITHOUT_CLASSIFICATION	// The new size can not be smaller than the minimum.
WITHOUT_CLASSIFICATION	// Now resize all sub-figs, including not displayed figs. Start by the // name. We override the getMinimumSize if it is less than our view (21 // pixels hardcoded!). Add in the shared extra, plus in this case the // correction.
WITHOUT_CLASSIFICATION	// Now sort out the stereotype display. If the stereotype is displayed, // move the upper boundary of the name compartment up and set new // bounds for the name and the stereotype compartments and the // stereoLineBlinder that blanks out the line between the two
WITHOUT_CLASSIFICATION	// Advance currentY to where the start of the body box is, // remembering that it overlaps the next box by 1 pixel. Calculate the // size of the body box, and update the Y pointer past it if it is // displayed.
WITHOUT_CLASSIFICATION	// -1 for 1 pixel overlap
WITHOUT_CLASSIFICATION	// set bounds of big box
WITHOUT_CLASSIFICATION	/* The figPoly is located at the right edge of the nameFig.             * The nameFig size is such that it at least fits its text,             * and the figPoly next to the text.             * Making the package bigger, causes the figPoly to stick to             * the right edge.*/
WITHOUT_CLASSIFICATION	// Now force calculation of the bounds of the figure, update the edges // and trigger anyone who's listening to see if the "bounds" property // has changed.
WITHOUT_CLASSIFICATION	/* Only show the menuitems if they make sense: */
WITHOUT_CLASSIFICATION	/* save first */
WITHOUT_CLASSIFICATION	/*while*/
WITHOUT_CLASSIFICATION	/* If we get here then we didn't get the		     * default diagram.                     */
WITHOUT_CLASSIFICATION	/* Try to create a new class diagram.                     */
WITHOUT_CLASSIFICATION	/*if package */
WITHOUT_CLASSIFICATION	/* if doubleclicks */
WITHOUT_CLASSIFICATION	/* change prefix */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(         *         java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	// add the listeners to the newOwner
WITHOUT_CLASSIFICATION	// and its features
WITHOUT_CLASSIFICATION	/* end class FigPackage */
WITHOUT_CLASSIFICATION	// Readonly class: no generalization, no association to self
WITHOUT_CLASSIFICATION	/* end class StylePanelFigPackage */
WITHOUT_CLASSIFICATION	// In the DeploymentDiagram there are no Generalizations
WITHOUT_CLASSIFICATION	// Self-association isn't draggable
WITHOUT_CLASSIFICATION	/* end class StylePanelFigInterface */
WITHOUT_CLASSIFICATION	// No Generalizations on Deployment Diagram
WITHOUT_CLASSIFICATION	// and its stereotypes
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handling
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handling
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	// add the listeners to the newOwner
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	/* Stereotype covers NameFig: */
WITHOUT_CLASSIFICATION	/* Compartments from top to bottom: */
WITHOUT_CLASSIFICATION	// Make all the parts match the main fig
WITHOUT_CLASSIFICATION	// Collect the set of model elements that we want to listen to
WITHOUT_CLASSIFICATION	// and its features
WITHOUT_CLASSIFICATION	// and the stereotypes of its features
WITHOUT_CLASSIFICATION	// and the parameter of its operations
WITHOUT_CLASSIFICATION	// Use super because not fully init'd
WITHOUT_CLASSIFICATION	// and its enumerationLiterals
WITHOUT_CLASSIFICATION	// And now add listeners to them all:
WITHOUT_CLASSIFICATION	// Put all the bits together, suppressing bounds calculations until // we're all done for efficiency.
WITHOUT_CLASSIFICATION	/* The next line is needed so that we have the right dimension         * when drawing this Fig on the diagram by pressing down         * the mouse button, even before releasing the mouse button: */
WITHOUT_CLASSIFICATION	// stereotype fig covers the name fig:
WITHOUT_CLASSIFICATION	// Set the bounds of the figure to the total of the above
WITHOUT_CLASSIFICATION	// If moved into an Package
WITHOUT_CLASSIFICATION	// If default Namespace is not already set
WITHOUT_CLASSIFICATION	// The next if-clause is important for the Deployment-diagram // it detects if the enclosing fig is a component, in this case // the container will be set for the owning Interface
WITHOUT_CLASSIFICATION	/* Testing: Add a parameter to an operation on an Interface.                         * Does the Interface Fig adapt its width? */
WITHOUT_CLASSIFICATION	/* Set up the property panels for class diagrams: */
WITHOUT_CLASSIFICATION	// The figure that holds the text of the note.
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	// Update the listeners to match the desired set using the minimal // update facility
WITHOUT_CLASSIFICATION	// Get the size of the text field.
WITHOUT_CLASSIFICATION	// Mark this as newly created. This is to get round the problem with // creating figs for loaded comments that had stereotypes. They are // saved with their dimensions INCLUDING the stereotype, but since we // pretend the stereotype is not visible, we add height the first time // we render such a comment. This is a complete fudge, and really we // ought to address how comment objects with stereotypes are saved. But // that will be hard work.
WITHOUT_CLASSIFICATION	// update the relative sizes and positions of internel Figs
WITHOUT_CLASSIFICATION	// update any text, colors, fonts, etc.
WITHOUT_CLASSIFICATION	//parse the text that was edited
WITHOUT_CLASSIFICATION	// Resize the text figure
WITHOUT_CLASSIFICATION	// resize the FigNode to accomodate the new text
WITHOUT_CLASSIFICATION	// Not used, do nothing.
WITHOUT_CLASSIFICATION	// Not used, do nothing.
WITHOUT_CLASSIFICATION	// Resize the big port around the figure
WITHOUT_CLASSIFICATION	// The text element has no border, so the line color doesn't matter.
WITHOUT_CLASSIFICATION	// The text is always opaque.
WITHOUT_CLASSIFICATION	/*? 2*LINE_WIDTH? */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *         org.tigris.gef.graph.GraphModel,     *         org.tigris.gef.base.Layer, java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// Make a seamless integration of the text // in the note figure.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // user interaction methods
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessor methods
WITHOUT_CLASSIFICATION	// If we have a stereotype displayed, then allow some space for that // (width and height)
WITHOUT_CLASSIFICATION	// And add the gaps around the textfield to get the minimum // size of the note.
WITHOUT_CLASSIFICATION	// Since this is a complex polygon, there's no easy way to resize it.
WITHOUT_CLASSIFICATION	// Just move the corner to it's new position.
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////// // Internal methods
WITHOUT_CLASSIFICATION	/* Remove the commentedge.             * If there are more then one comment-edges between             * the 2 objects, then delete them all. */
WITHOUT_CLASSIFICATION	// all connected edges
WITHOUT_CLASSIFICATION	// Only adjust the stereotype height if we are not newly // created. This gets round the problem of loading classes with // stereotypes defined, which have the height already including // the stereotype.
WITHOUT_CLASSIFICATION	// Whatever happened we are no longer newly created, so clear the // flag. Then set the bounds for the rectangle we have defined.
WITHOUT_CLASSIFICATION	/* end class StylePanelFigClass */
WITHOUT_CLASSIFICATION	// TODO: get tip string from comment
WITHOUT_CLASSIFICATION	/* This one is still usable, so let's retain it, */
WITHOUT_CLASSIFICATION	// the last one needs extra space below it
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigEdge#setDestFigNode(org.tigris.gef.presentation.FigNode)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigEdge#setSourceFigNode(org.tigris.gef.presentation.FigNode)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handling
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // contructors
WITHOUT_CLASSIFICATION	// Modifiers ...
WITHOUT_CLASSIFICATION	/* The next line is needed so that we have the right dimension          * when drawing this Fig on the diagram by pressing down          * the mouse button, even before releasing the mouse button: */
WITHOUT_CLASSIFICATION	// Make all the parts match the main fig
WITHOUT_CLASSIFICATION	// Visibility ...
WITHOUT_CLASSIFICATION	// stereotype fig covers the name fig:
WITHOUT_CLASSIFICATION	// element will normally be null when called from PGML parser // It will get it's source & destination set later in attachEdges
WITHOUT_CLASSIFICATION	// Unfortunately the Fig and it's associated CommentEdge will not be // fully initialized yet here if we're being loaded from a PGML file. // The remainder of the initialization will happen when // set{Dest|Source}FigNode are called from PGMLStackParser.attachEdges()
WITHOUT_CLASSIFICATION	// unimplemented
WITHOUT_CLASSIFICATION	/* Alternatively, we could just return null here,          * so that you can not create a comment just          * linked to a comment this way - which is a bit uncommon,         * but not illegal, so for consistency, we better allow it.          */
WITHOUT_CLASSIFICATION	//        return null;
WITHOUT_CLASSIFICATION	/** * Class to display a Stereotype declaration figure using * Classifier box notation.<p> * * TODO: This is just a place-holder right now! - tfm * This needs to show tags and constraints. */
WITHOUT_CLASSIFICATION	// Add...
WITHOUT_CLASSIFICATION	// Show ...
WITHOUT_CLASSIFICATION	// register for tagDefinitions:
WITHOUT_CLASSIFICATION	/* TODO: constraints, ... */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractAction#isEnabled()     */
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	// Make all the parts match the main fig
WITHOUT_CLASSIFICATION	// Put all the bits together, suppressing bounds calculations until // we're all done for efficiency.
WITHOUT_CLASSIFICATION	/* The next line is needed so that we have the right dimension         * when drawing this Fig on the diagram by pressing down         * the mouse button, even before releasing the mouse button: */
WITHOUT_CLASSIFICATION	// TODO: Need named Tags and Constraints compartments here //        addFig(tagsFig); //        addFig(constraintsFig);
WITHOUT_CLASSIFICATION	// If moved into an Package
WITHOUT_CLASSIFICATION	// If default Namespace is not already set
WITHOUT_CLASSIFICATION	// When this is called from PGMLStackParser.attachEdges, we finished // the initialization of owning pseudo element (CommentEdge)
WITHOUT_CLASSIFICATION	/*     * If the Operation/Reception is abstract,      * then the text will be set to italics.     */
WITHOUT_CLASSIFICATION	// avoid GEF calcDrawingArea bug when nothing in a diagram.
WITHOUT_CLASSIFICATION	// TODO: Add Tags & Constraints //        addMenu.add(TargetManager.getInstance().getAddAttributeAction()); //        addMenu.add(TargetManager.getInstance().getAddOperationAction());
WITHOUT_CLASSIFICATION	// avoid GEF calcDrawingArea bug when nothing in a diagram.
WITHOUT_CLASSIFICATION	// No generalizations in Deployment Diagrams
WITHOUT_CLASSIFICATION	// the diagram image data
WITHOUT_CLASSIFICATION	// copy the gif image to the clipboard
WITHOUT_CLASSIFICATION	// the diagram image data
WITHOUT_CLASSIFICATION	// hide grid, otherwise can't see anything
WITHOUT_CLASSIFICATION	//        bigPort.setFilled(f);
WITHOUT_CLASSIFICATION	// background color.
WITHOUT_CLASSIFICATION	// 2 Pixel padding after compartment
WITHOUT_CLASSIFICATION	// Set up hide all / show all
WITHOUT_CLASSIFICATION	// Perform the action
WITHOUT_CLASSIFICATION	// Only the bigPort may be filled
WITHOUT_CLASSIFICATION	/*?LINE_WIDTH?*/
WITHOUT_CLASSIFICATION	//see parent
WITHOUT_CLASSIFICATION	/*?LINE_WIDTH?*/
WITHOUT_CLASSIFICATION	// We remove all of them:
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.undo.UndoableAction#isEnabled()     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*?LINE_WIDTH?*/
WITHOUT_CLASSIFICATION	// If we don't have a fig for this UML object, we'll need to add // one. We set the bounds, but they will be reset later.
WITHOUT_CLASSIFICATION	/* but its position may have been changed: */
WITHOUT_CLASSIFICATION	// bounds not relevant here, but I am perfectionist...
WITHOUT_CLASSIFICATION	/* We need to set a new notationprovider, since                 * the Notation language may have been changed:  */
WITHOUT_CLASSIFICATION	// add it again (but now in the right sequence)
WITHOUT_CLASSIFICATION	// Now put the text in // We must handle the case where the text is null
WITHOUT_CLASSIFICATION	// No longer abstract to allow subclasses to remove, so we provide a // null default implementation
WITHOUT_CLASSIFICATION	// If this is not overridden it will revert to the old behavior // All internal subclasses have been updated, but this if for // compatibility of non-ArgoUML extensions.
WITHOUT_CLASSIFICATION	/* Find the compartment fig for this umlObject: */
WITHOUT_CLASSIFICATION	// Override superclass to do nothing. // Fill property cannot be changed.
WITHOUT_CLASSIFICATION	// Override superclass to do nothing. // Line width cannot be changed.
WITHOUT_CLASSIFICATION	// Override superclass to do nothing. // Line width property cannot be changed.
WITHOUT_CLASSIFICATION	// aggregation
WITHOUT_CLASSIFICATION	/* end class ActionSrcMultOneToMany */
WITHOUT_CLASSIFICATION	// TODO: set font?
WITHOUT_CLASSIFICATION	// to circumvent too many registered listeners
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#hit(java.awt.Rectangle)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Calling connect() will add the edge to the GraphModel and // any LayerPersectives on that GraphModel will get a // edgeAdded event and will add an appropriate FigEdge // (determined by the GraphEdgeRenderer).
WITHOUT_CLASSIFICATION	// ending editing
WITHOUT_CLASSIFICATION	// USED BY PGML.tee
WITHOUT_CLASSIFICATION	// Actually return the FigEdge that the FigEdgePort is part of.
WITHOUT_CLASSIFICATION	//            throw new IllegalArgumentException();
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handling
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	// If the user selects an Action that is already selected in sticky // mode (double clicked) then we turn off sticky mode and make sure // no action is selected.
WITHOUT_CLASSIFICATION	/*Here the actions to divide a region*/
WITHOUT_CLASSIFICATION	/* The 1st region has an invisible divider line                 * (the box is always invisible): */
WITHOUT_CLASSIFICATION	/* Throw out any previous elements that were                 * enclosed but are not a concurrent region;                 * let's move them onto the first region: */
WITHOUT_CLASSIFICATION	//linewidth?
WITHOUT_CLASSIFICATION	/* The divider line should be visible, so no need to change its color. */
WITHOUT_CLASSIFICATION	/* Make the composite state 1 region higher: */
WITHOUT_CLASSIFICATION	/* TODO: Verify this.             * IIUC, then this triggers the CompountStateFig             * to draw itself correctly.             * Hence, there was a reason to wait this long             * to make the state concurrent. */
WITHOUT_CLASSIFICATION	// Look for the dashed edge
WITHOUT_CLASSIFICATION	// We have the dashed edge now find the opposite FigNode
WITHOUT_CLASSIFICATION	/* Prevent triggering too many events by setName(). */
WITHOUT_CLASSIFICATION	// not???
WITHOUT_CLASSIFICATION	// Do nothing    
WITHOUT_CLASSIFICATION	// Do nothing        
WITHOUT_CLASSIFICATION	// Consume to stop other modes from trying to take over
WITHOUT_CLASSIFICATION	// marker interface only
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	// Only reset the text if the two are not the same (i.e the fig // has // moved, rather than we've just edited the text, when // setTargetBBox() // will have made them the same). Note that styleBounds could // be null, // so we do the test this way round.
WITHOUT_CLASSIFICATION	// Can't do anything if we don't have a fig.
WITHOUT_CLASSIFICATION	// 2 Pixel padding after compartment
WITHOUT_CLASSIFICATION	// or vice versa?
WITHOUT_CLASSIFICATION	// Provide feedback to the user that their name was // not accepted
WITHOUT_CLASSIFICATION	// Subtract the the offset of the click, to take account of user // having not initially clicked in the centre.
WITHOUT_CLASSIFICATION	// super returns -1 if any of GEFs buttons was hit // (but maybe one of the not-GEF-buttons)
WITHOUT_CLASSIFICATION	/* Do not show border line, make transparent: */
WITHOUT_CLASSIFICATION	//cleanup of unused FigText's
WITHOUT_CLASSIFICATION	// TODO: This doesn't do anything special with keywords. // They should probably go first.
WITHOUT_CLASSIFICATION	//There is one fig more in the group than (stereotypes + keyword):
WITHOUT_CLASSIFICATION	// The keyword fig already exists.
WITHOUT_CLASSIFICATION	/* This will contain the Figs that we do not need anymore: */
WITHOUT_CLASSIFICATION	// bounds not relevant here
WITHOUT_CLASSIFICATION	// bounds not relevant here
WITHOUT_CLASSIFICATION	// The stereotype fig already exists.
WITHOUT_CLASSIFICATION	// The boundary box as held in the target fig, and as listed // in the boundary box style field (null if we don't have  // anything valid)
WITHOUT_CLASSIFICATION	// remove all stereotypes that have a graphical icon
WITHOUT_CLASSIFICATION	//TODO: check!
WITHOUT_CLASSIFICATION	//set new bounds for all included figs
WITHOUT_CLASSIFICATION	// StylePanelFigClass relies on getPanelTarget() to return a  // FigCompartmentBox
WITHOUT_CLASSIFICATION	// Get class box, because we will set it's bounding box
WITHOUT_CLASSIFICATION	// Get class box, because we will set it's bounding box in text field
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Calling connect() will add the edge to the GraphModel and // any LayerPersectives on that GraphModel will get a // edgeAdded event and will add an appropriate FigEdge // (determined by the GraphEdgeRenderer).
WITHOUT_CLASSIFICATION	// The keyword fig does not exist yet. // Let's create one:
WITHOUT_CLASSIFICATION	// keywords which look like a stereotype (e.g. <<interface>>) have // no owner
WITHOUT_CLASSIFICATION	// if there are no stereotypes, we return (0,0), preventing // double lines in the class (see issue 4939)
WITHOUT_CLASSIFICATION	/* end class StylePanelFigAssociationClass */
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // // Constructors // ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // // Main methods // ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// Create the singleton if it does not exist, and then return it
WITHOUT_CLASSIFICATION	// When a new target is selected, we have to check if it 's a use case. //Then, the icone "add extension point" have to become enabled.
WITHOUT_CLASSIFICATION	// Find the target in the project browser. We can only do anything if // its a use case.
WITHOUT_CLASSIFICATION	// Create a new extension point and make it the browser target. Then // invoke the superclass action method.
WITHOUT_CLASSIFICATION	/* end class ActionAddExtensionPoint */
WITHOUT_CLASSIFICATION	// We have already confirmed the connection is valid
WITHOUT_CLASSIFICATION	// Detach any edges (such as comment edges) already attached // to the FigAssociation before the FigAssociation is removed. // They'll later be re-attached to the new FigNodeAssociation
WITHOUT_CLASSIFICATION	// If there are bits of an association class then // remember their location and path.
WITHOUT_CLASSIFICATION	// Create the new FigNodeAssociation and locate it.
WITHOUT_CLASSIFICATION	// Add the association ends to the graph model
WITHOUT_CLASSIFICATION	// Add the edges (such as comment edges) that were on the old // FigAssociation to our new FigNodeAssociation and make sure they are // positioned correctly.
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DropTargetListener#dragEnter(     *         java.awt.dnd.DropTargetDragEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DropTargetListener#dragOver(     *         java.awt.dnd.DropTargetDragEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DropTargetListener#dropActionChanged(     *         java.awt.dnd.DropTargetDragEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//get the model elements that are being transfered.
WITHOUT_CLASSIFICATION	// multiplicity
WITHOUT_CLASSIFICATION	/* end class ModeCreateAssociation */
WITHOUT_CLASSIFICATION	/*&& ((UMLDiagram) dia).doesAccept(dtde.getSource())*/
WITHOUT_CLASSIFICATION	/*     * Create a new FigText instance based on the given mouse down     * event and the state of the parent Editor.      */
WITHOUT_CLASSIFICATION	//			System.err.println("NullPointerException ignored.");
WITHOUT_CLASSIFICATION	/* end class SPFigEdgeModelElement */
WITHOUT_CLASSIFICATION	//    		System.err.println("NullPointerException ignored.");
WITHOUT_CLASSIFICATION	// Get all our sub Figs and hit them with the big stick too
WITHOUT_CLASSIFICATION	/* Only show the path item when there is                          * an owning namespace. */
WITHOUT_CLASSIFICATION	/* Only show the path item when there is                          * an owning namespace. */
WITHOUT_CLASSIFICATION	// enumerate all selected figures and update their path accordingly  
WITHOUT_CLASSIFICATION	/* Force the line-width to 0, since the FigGroup that contains the      * stereotype may want to show a border, but we don't. */
WITHOUT_CLASSIFICATION	// compartments
WITHOUT_CLASSIFICATION	/*     * TODO: Support commentEdges.     * TODO: Support associations to self.     *     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// add
WITHOUT_CLASSIFICATION	/* 20 = height of name fig ?*/
WITHOUT_CLASSIFICATION	// Now force calculation of the bounds of the figure, update the edges // and trigger anyone who's listening to see if the "bounds" property // has changed.
WITHOUT_CLASSIFICATION	/* 2*LINE_WIDTH?  or extra padding? */
WITHOUT_CLASSIFICATION	// Set properties of the stereotype box.
WITHOUT_CLASSIFICATION	/*         * The nameFig is transparent, since this is a box and the fill color is         * drawn by the bigPort.         */
WITHOUT_CLASSIFICATION	// Use "aSize" to build up the minimum size. Start with the size of the // name compartment and build up.
WITHOUT_CLASSIFICATION	/*         * Only take into account the stereotype width, not the height, since         * the height is included in the name fig:         */
WITHOUT_CLASSIFICATION	/* Add the height of all the compartments (if there are any),         * and check their minimum width: */
WITHOUT_CLASSIFICATION	// Save our old boundaries so it can be used in property message later
WITHOUT_CLASSIFICATION	// Make sure we don't try to set things smaller than the minimum
WITHOUT_CLASSIFICATION	/* The box for the compartments is somewhere         * inside the outside bounds: */
WITHOUT_CLASSIFICATION	/* Now the new nameFig height will include the stereotype height: */
WITHOUT_CLASSIFICATION	/* The new height can not be less than the name height: */
WITHOUT_CLASSIFICATION	/* Calculate the minimum needed height for all the compartments:*/
WITHOUT_CLASSIFICATION	/*                     * Distribute the extra height over the visible                     * compartments:                     */
WITHOUT_CLASSIFICATION	/* Increase the height of the fig: */
WITHOUT_CLASSIFICATION	/* Finally set the bounds of the big box and the border fig: */
WITHOUT_CLASSIFICATION	// hide compartment
WITHOUT_CLASSIFICATION	/*                 * Hiding one compartment means that the Fig returns to minimal                 * dimensions:                 */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.JComponent#setVisible(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.PathConv#stuffPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.PathConv#setClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.PathConv#applyOffsetAmount(java.awt.Point, java.awt.Point, int, java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*                 * Alternatively, we could reduce the height of the Fig by the                 * height of this one hidden compartment. But that would not be                 * possible for the width - so we better return to minimal                 * dimensions overall.                 */
WITHOUT_CLASSIFICATION	// show compartment
WITHOUT_CLASSIFICATION	/* This sets the lineWidth of all in the group: */
WITHOUT_CLASSIFICATION	/* NameFig and StereotypeFig are handled by parent. */
WITHOUT_CLASSIFICATION	// forceRepaintShadow();
WITHOUT_CLASSIFICATION	/* Update the diagram, and other users of these settings: */
WITHOUT_CLASSIFICATION	// @jve:decl-index=0:visual-constraint="10,10"
WITHOUT_CLASSIFICATION	// find the point offset on the line that gives a // correct offset
WITHOUT_CLASSIFICATION	// default angle is 90 deg.
WITHOUT_CLASSIFICATION	// Boundary condition in GEF, make sure this is LESS THAN, not equal
WITHOUT_CLASSIFICATION	// If we're using a fixed offset, just add it and return // No collision detection is done in this case
WITHOUT_CLASSIFICATION	// Check for a collision between our computed position and the edge
WITHOUT_CLASSIFICATION	// increase offset by 2px at a time
WITHOUT_CLASSIFICATION	// Get the points representing the poly line for our edge
WITHOUT_CLASSIFICATION	// increase offset by increments until we're clear
WITHOUT_CLASSIFICATION	// limit our retries in case its too hard to get free
WITHOUT_CLASSIFICATION	// If we timed out, give it one more try on the other side
WITHOUT_CLASSIFICATION	/* count >= limit */
WITHOUT_CLASSIFICATION	/* Force the line-width to 0, since the FigGroup that contains the      * stereotype may want to show a border, but we don't. */
WITHOUT_CLASSIFICATION	//                LOG.log(Level.FINE, "Final point #" + count + " " + result //                        + " offset of " + scaledOffset);
WITHOUT_CLASSIFICATION	// segment size for computing slope
WITHOUT_CLASSIFICATION	// Two points for line segment used to compute slope of path here // NOTE that this is the average slope, not instantaneous, so it will // give screwy results near bends in the path
WITHOUT_CLASSIFICATION	// If our position was clamped, try to make it up on the other end
WITHOUT_CLASSIFICATION	// Can't get the slope of a point.  Just return an arbitrary point.
WITHOUT_CLASSIFICATION	// Our angle theta is arctan(opposite/adjacent) // Because y increases going down the screen, positive angles are // clockwise rather than counterclockwise
WITHOUT_CLASSIFICATION	// This shouldn't happen, because of our line segment size check
WITHOUT_CLASSIFICATION	// "We're going vertical!" - Goose in "Top Gun"
WITHOUT_CLASSIFICATION	// Arctan only returns -PI/2 to PI/2 // Handle the other two quadrants and normalize to 0 - 2PI
WITHOUT_CLASSIFICATION	// Quadrant II & III
WITHOUT_CLASSIFICATION	// Quadrant IV
WITHOUT_CLASSIFICATION	// Set the following for some backward compatibility with old algorithm
WITHOUT_CLASSIFICATION	// Add displacement angle to slope
WITHOUT_CLASSIFICATION	// Transform to 0 - 2PI range if we've gone all the way around circle
WITHOUT_CLASSIFICATION	// Compute our deltas
WITHOUT_CLASSIFICATION	//        LOG.log(Level.FINE,result.x + ", " + result.y //                + " theta = " + theta * 180 / Math.PI //                + " dx = " + dx + " dy = " + dy);
WITHOUT_CLASSIFICATION	// Load the standard colour, just add an alpha channel.
WITHOUT_CLASSIFICATION	// Should never get here.  If we do, return the inner point.
WITHOUT_CLASSIFICATION	// Called by propertyChange
WITHOUT_CLASSIFICATION	// this does a calcBounds()
WITHOUT_CLASSIFICATION	// NOTE: This listener needs to always be active // even if this tab isn't visible
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.Diagram#getClassAndModelID()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * The clone method that should clone the JGraph with it's contents and     * the toolbar with it's contents. Since both JGraph as the toolbar are     * coming from the GEF framework, cloning them will be hard work and should     * actually not be placed here but in a clone method of the JGraph and the     * Toolbar.     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#setVisible(boolean)     */
WITHOUT_CLASSIFICATION	// If location is non-null, convert to a rectangle that we can use
WITHOUT_CLASSIFICATION	/* The following is the default implementation         * for diagrams of which the owner is a namespace.         */
WITHOUT_CLASSIFICATION	// source // source position // destination // destination position // number of objects to be copied
WITHOUT_CLASSIFICATION	/*"unnamed " + */
WITHOUT_CLASSIFICATION	// TODO: should update to size of diagram contents
WITHOUT_CLASSIFICATION	/* This should not be needed if the above is correct,          * but let's be sure: */
WITHOUT_CLASSIFICATION	/* This should not be needed if the above is correct,          * but let's be sure: */
WITHOUT_CLASSIFICATION	/*             * ActionPaste.getInstance().setEnabled( Globals.clipBoard             * != null && !Globals.clipBoard.isEmpty());             */
WITHOUT_CLASSIFICATION	// next statement gives us a clone JGraph but not a cloned Toolbar
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.event.ModeChangeListener#modeChange(org.tigris.gef.event.ModeChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseMotionListener#mouseMoved(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// remains selected
WITHOUT_CLASSIFICATION	// the old selection
WITHOUT_CLASSIFICATION	// Target might not have been initialised yet.
WITHOUT_CLASSIFICATION	// add to selection
WITHOUT_CLASSIFICATION	// Optimize for the normal case to minimize target changes
WITHOUT_CLASSIFICATION	//            }
WITHOUT_CLASSIFICATION	// Assuming the target is some model element.
WITHOUT_CLASSIFICATION	// how to handle empty target lists? // probably the TabDiagram should only show an empty pane in that case
WITHOUT_CLASSIFICATION	// Assuming the target is some model element.
WITHOUT_CLASSIFICATION	//was ""
WITHOUT_CLASSIFICATION	// Although we register for notification of diagrams being // deleted, we currently depend on the TargetManager to assign // a new target when this happens // When we implement MDI and have our own list of open diagrams // we can ressurect the use of this
WITHOUT_CLASSIFICATION	// Any Swing work done here needs to be queued to the AWT thread // since we don't know what thread our event will arrive on
WITHOUT_CLASSIFICATION	//- RedrawManager.lock();
WITHOUT_CLASSIFICATION	//- RedrawManager.lock();
WITHOUT_CLASSIFICATION	//getLayerManager().getActiveLayer().paint(g);
WITHOUT_CLASSIFICATION	//- RedrawManager.unlock(); //- _redrawer.repairDamage();
WITHOUT_CLASSIFICATION	//getLayerManager().getActiveLayer().paint(g);
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#getValue(java.lang.String)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* This makes the text not touch the text-border line: */
WITHOUT_CLASSIFICATION	// TODO: We don't currently have any settings that can change on a // per-fig basis, so we can just use the project/diagram defaults //        settings = new DiagramSettings(renderSettings);
WITHOUT_CLASSIFICATION	// Certain types of fixed text (e.g. a FigStereotype with a keyword) // may not have an owner
WITHOUT_CLASSIFICATION	//Now, we link it to the modelelements which are represented by FigNode
WITHOUT_CLASSIFICATION	//update all tools' enabled status
WITHOUT_CLASSIFICATION	// remember the fig for later
WITHOUT_CLASSIFICATION	//Let's build the comment first, unlinked.
WITHOUT_CLASSIFICATION	/* Prevent e.g. AssociationClasses from being added trice: */
WITHOUT_CLASSIFICATION	//Select the new comment as target
WITHOUT_CLASSIFICATION	//Create the Node Fig for the comment itself and draw it
WITHOUT_CLASSIFICATION	//Create the comment links and draw them
WITHOUT_CLASSIFICATION	//Place the comment Fig on the nicest spot on the diagram
WITHOUT_CLASSIFICATION	// If we're drawing from an edge
WITHOUT_CLASSIFICATION	//$NON-NLS-<n>$
WITHOUT_CLASSIFICATION	//$NON-NLS-<n>$
WITHOUT_CLASSIFICATION	//$NON-NLS-<n>$
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.undo.UndoableAction#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Calling connect() will add the edge to the GraphModel and // any LayerPersectives on that GraphModel will get a // edgeAdded event and will add an appropriate FigEdge // (determined by the GraphEdgeRenderer).
WITHOUT_CLASSIFICATION	// user made a false start
WITHOUT_CLASSIFICATION	// So, the target is a MAssociationRole
WITHOUT_CLASSIFICATION	/*MVW This is not the correct way,        * but it allows connecting a CommentEdge to it!        * See e.g. ActionAddNote for the correct way.        * Testcase:        * 1. Select the message.        * 2. Click the Comment tool.        * */
WITHOUT_CLASSIFICATION	/* end class ActionAddMessage */
WITHOUT_CLASSIFICATION	// let's use groups to construct the different text sections at // the association
WITHOUT_CLASSIFICATION	/* No further listeners required in this case - the rest is handled         * by the notationProvider and sub-Figs. */
WITHOUT_CLASSIFICATION	/* This only happens if model-change events arrive             * before we are completely constructed. */
WITHOUT_CLASSIFICATION	// x^2 + y^2 = r^2  (equation of a circle)
WITHOUT_CLASSIFICATION	// max distance is set at 100 pixels, (rSquared = 100^2)
WITHOUT_CLASSIFICATION	// east
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *         java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* end class FigAssociation */
WITHOUT_CLASSIFICATION	// Note that "multiplicity" is what is the notation is listening // for in UML1.4 "uppervalue" are listened to in UML2. It is not // currently why it is not required to register for "lowerValue" // also.
WITHOUT_CLASSIFICATION	// no need to listen to these property changes - the // notationProvider takes care of this.
WITHOUT_CLASSIFICATION	// no need to listen to these property changes - the // notationProvider takes care of this.
WITHOUT_CLASSIFICATION	/*, new String[] {"name", "visibility", "stereotype"}*/
WITHOUT_CLASSIFICATION	/*, new String[] {"name", "visibility", "stereotype"}*/
WITHOUT_CLASSIFICATION	// These are a list of arrow types.
WITHOUT_CLASSIFICATION	// Added to the arrow type for navigable
WITHOUT_CLASSIFICATION	// Finished editing. // Parse the text that was edited. // Only the role is editable, hence:
WITHOUT_CLASSIFICATION	//            figEdge.showHelp(role.getParsingHelp()); //            role.setText();
WITHOUT_CLASSIFICATION	// Pass everything else to superclass
WITHOUT_CLASSIFICATION	/* end class ActionNavigability */
WITHOUT_CLASSIFICATION	/* Nothing yet. Later maybe something like: */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//        putNotationArgument("showAssociationName",  //                getSettings().isShowAssociationNames());
WITHOUT_CLASSIFICATION	/* The text the user has filled in the textfield is first checked             * to see if it's a valid multiplicity. If so then that is the              * multiplicity to be set. If not the input is rejected. */
WITHOUT_CLASSIFICATION	// Fonts and colors should get updated automatically for contained figs
WITHOUT_CLASSIFICATION	/* There is none... */
WITHOUT_CLASSIFICATION	// only initialized to prevent warning
WITHOUT_CLASSIFICATION	//not supported for this target
WITHOUT_CLASSIFICATION	// make space for the clarifier // margin between text and border
WITHOUT_CLASSIFICATION	/* This next line presumes that the 1st fig with this owner             * is the previous port - and consequently nullifies the owner             * of this 1st fig. */
WITHOUT_CLASSIFICATION	// Add a listener for changes to any property
WITHOUT_CLASSIFICATION	/* Check if multiple items are selected: */
WITHOUT_CLASSIFICATION	// Show ...
WITHOUT_CLASSIFICATION	// popupAddOffset should be equal to the number of items added here:
WITHOUT_CLASSIFICATION	// TODO: The following is carried over from setOwner, but probably // isn't needed //        renderingChanged(); // It does the following (add as needed): //        updateNameText(); //        updateStereotypeText(); //        updateStereotypeIcon(); //        updateBounds(); //        damage();
WITHOUT_CLASSIFICATION	// Be careful here since subclasses could have overridden this with // the assumption that it wouldn't be called before the constructors // finished
WITHOUT_CLASSIFICATION	/* TODO: MVW: I think this has to be:                 * clone.nameFig = (FigSingleLineText) cloneFig;                 * but have not the means to investigate,                 * since this code is not yet used.                 * Enable the menu-items for Copy/Paste to test...                 * BTW: In some other FigNodeModelElement                 * classes I see the same mistake. */
WITHOUT_CLASSIFICATION	// this rectangle marks the whole modelelement figure; everything // is inside it:
WITHOUT_CLASSIFICATION	/**     * Clone this figure. After the base clone method has been called determine     * which child figs of the clone represent the name, stereotype and port.     * <p>     * TODO: enclosedFigs, encloser and eventSenders may also need to be cloned.     *     * @see java.lang.Object#clone()     * @return the cloned figure     */
WITHOUT_CLASSIFICATION	/* Idem here:                 * clone.stereotypeFig = (FigStereotypesGroup) cloneFig; */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getEnclosingFig()     */
WITHOUT_CLASSIFICATION	// update any text, colors, fonts, etc.
WITHOUT_CLASSIFICATION	//parse the text that was edited
WITHOUT_CLASSIFICATION	// add stereotype view submenu
WITHOUT_CLASSIFICATION	// The node's been placed on the diagram
WITHOUT_CLASSIFICATION	// Add stereotypes submenu
WITHOUT_CLASSIFICATION	// Set the namespace of the enclosed model element to the // namespace of the encloser.
WITHOUT_CLASSIFICATION	// Find all ElementResidences between the class and the component:
WITHOUT_CLASSIFICATION	// There was no ElementResidence yet, so let's create one:
WITHOUT_CLASSIFICATION	// The node's been placed within some Fig
WITHOUT_CLASSIFICATION	// There were 2 ElementResidences .. strange case.
WITHOUT_CLASSIFICATION	// There is already a correct ElementResidence
WITHOUT_CLASSIFICATION	// The owner is already linked to the component
WITHOUT_CLASSIFICATION	// We are getting events we don't want. Filter them out.
WITHOUT_CLASSIFICATION	/* Only update the bounds if they change:  */
WITHOUT_CLASSIFICATION	// We handle and consume editing events
WITHOUT_CLASSIFICATION	// resize the FigNode to accommodate the new text
WITHOUT_CLASSIFICATION	/* If the source of the event is an UML object,             * e.g. the owner of this Fig (but not always only the owner             * is shown, e.g. for a class, also its attributes are shown),             * then the UML model has been changed.             */
WITHOUT_CLASSIFICATION	// TODO: Should this not be an assert?
WITHOUT_CLASSIFICATION	// west
WITHOUT_CLASSIFICATION	/*     * If the user double clicks on any part of this FigNode, pass it     * down to one of the internal Figs. This allows the user to     * initiate direct text editing.     *     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// south
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers - MouseListener implementation
WITHOUT_CLASSIFICATION	// Convert null to empty string and clear help message
WITHOUT_CLASSIFICATION	// it is done
WITHOUT_CLASSIFICATION	//this enables direct text editing for sub figs of a //FigGroup object:
WITHOUT_CLASSIFICATION	// either layer or owner was null
WITHOUT_CLASSIFICATION	// Default is to do nothing
WITHOUT_CLASSIFICATION	// Default is to do nothing
WITHOUT_CLASSIFICATION	// Default is to do nothing
WITHOUT_CLASSIFICATION	// Default is to do nothing
WITHOUT_CLASSIFICATION	//This test needed for a FigPool
WITHOUT_CLASSIFICATION	// Get model listeners removed:
WITHOUT_CLASSIFICATION	// is used as InstanceSpecification, see UMLDeploymentDiagram
WITHOUT_CLASSIFICATION	// TODO: what about ObjectNode? //        return org.eclipse.uml2.uml.ObjectNode.class;        
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// TODO: State & Vertex are independent classes in UML 2.1
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// only initialized to prevent warning
WITHOUT_CLASSIFICATION	//not supported for this target
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // internal methods
WITHOUT_CLASSIFICATION	// TODO assert modelElement != null???
WITHOUT_CLASSIFICATION	// Default for name and stereotype is no border
WITHOUT_CLASSIFICATION	/*     * Override FigNode implementation to keep setOwner from getting called.     */
WITHOUT_CLASSIFICATION	// TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	// TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	// TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	// TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	// Use DiagramInterface to add classes to diagram
WITHOUT_CLASSIFICATION	// ActionAddAllClassesFromModel
WITHOUT_CLASSIFICATION	// we have an edge (the UML modelelement!)
WITHOUT_CLASSIFICATION	// situation 1
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * Text group to contain name & stereotype     */
WITHOUT_CLASSIFICATION	// computeRoute(); // this recomputes the route if you reload the diagram.
WITHOUT_CLASSIFICATION	// in case someone turns it on
WITHOUT_CLASSIFICATION	// Do not allow fill to change. We should see through // the text to the color of the main FIg background.
WITHOUT_CLASSIFICATION	/* Now force minimum dimensions for the text: */
WITHOUT_CLASSIFICATION	/* Now add the areas around the text to return the complete size: */
WITHOUT_CLASSIFICATION	// calculate the source and dest figs for to self assoc
WITHOUT_CLASSIFICATION	//reset the pointIndex
WITHOUT_CLASSIFICATION	// check pre-conds
WITHOUT_CLASSIFICATION	//Set-up:
WITHOUT_CLASSIFICATION	// the fig that was under the mouse when it was released
WITHOUT_CLASSIFICATION	//make a nice little target area:
WITHOUT_CLASSIFICATION	// and find the Fig:
WITHOUT_CLASSIFICATION	// last is the top fig.
WITHOUT_CLASSIFICATION	// check intermediate post-condition.
WITHOUT_CLASSIFICATION	// delegate the re-routing to graphmodels.
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// set it to an invalid number by default // to make sure it is set correctly.
WITHOUT_CLASSIFICATION	//figPoly.setFillColor(col);
WITHOUT_CLASSIFICATION	//figClone._polygon = (Polygon) _polygon.clone();
WITHOUT_CLASSIFICATION	// north
WITHOUT_CLASSIFICATION	// Do nothing until code is reviewed
WITHOUT_CLASSIFICATION	// Do nothing until code is reviewed
WITHOUT_CLASSIFICATION	// TODO: Do nothing until code is reviewed
WITHOUT_CLASSIFICATION	// Message
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*         * Crazy numbering scheme at work here.  Here's how the handle numbers         * are laid out.  Values 0-7 are defined by GEF and go left to         * right, top to bottom (ie not clockwise or counterclockwise).         * Values 10-14 zigzag North, South, West, East, Southwest.         * If you can correctly guess where 15 will go, you should buy         * a lottery ticket immediately.         *  <pre>         *            10         *     0-------1-------2         *     |               |         *  12 3               4 13         *     |               |         *  14 5-------6-------7         *            11         * </pre>         */
WITHOUT_CLASSIFICATION	// ClassifierRole // ClassifierRole
WITHOUT_CLASSIFICATION	/* Simulate a press of the mouse above the calculated point: */
WITHOUT_CLASSIFICATION	/* Calculate the drop location, and place every n-th element             * at an offset proportional to n.             */
WITHOUT_CLASSIFICATION	// super implementation found a hit
WITHOUT_CLASSIFICATION	/* Take canvas scrolling into account.             * The implementation below does place the element correctly             * when the canvas has been scrolled.             */
WITHOUT_CLASSIFICATION	/* Simulate a release of the mouse: */
WITHOUT_CLASSIFICATION	/*     * Overridden in order to implement PathCompartmentContainer.     */
WITHOUT_CLASSIFICATION	// do nothing by default
WITHOUT_CLASSIFICATION	// Don't allow drag outside of bounds of diagram
WITHOUT_CLASSIFICATION	/*     * Overridden in order to implement PathCompartmentContainer.     */
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#calcBounds()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// If the user has selected ModePlace either by a diagram // tool or AddToDiagram then we don't want to show the // clarifiers.
WITHOUT_CLASSIFICATION	// If the user has selected ModePlace either by a diagram // tool or AddToDiagram then we don't want to show the // toolbelt items.
WITHOUT_CLASSIFICATION	// Remember what handle was clicked for the case where the drag // is released over empty space
WITHOUT_CLASSIFICATION	// transparent cyan
WITHOUT_CLASSIFICATION	// 
WITHOUT_CLASSIFICATION	// yellow
WITHOUT_CLASSIFICATION	// translucent green
WITHOUT_CLASSIFICATION	//        super(ModeCreatePolyEdge.class, "edgeClass", //	      Model.getMetaTypes().getAssociation(), name);
WITHOUT_CLASSIFICATION	// set this to true on to enable debugging figs
WITHOUT_CLASSIFICATION	// anchor position
WITHOUT_CLASSIFICATION	/* The EnumerationLiteral uses a dedicated notation that supports          * parsing "name1;name2;name3" and stereotypes.          * Also supports deleting a literal by erasing text. */
WITHOUT_CLASSIFICATION	/* TODO: The UML does not seem to define this name. Or is it? */
WITHOUT_CLASSIFICATION	/*     * The serialVersionUID (generated by Eclipse)     */
WITHOUT_CLASSIFICATION	// UML spec for Generalizations doesn't call for name
WITHOUT_CLASSIFICATION	// Name & stereotypes get updated by superclass
WITHOUT_CLASSIFICATION	// Update the discriminator if it changed
WITHOUT_CLASSIFICATION	// show it
WITHOUT_CLASSIFICATION	//                fig.calcBounds();
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// we only take the filename, not the whole system path
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers - MouseListener implementation
WITHOUT_CLASSIFICATION	//      The following does not seem to work - centered the Fig instead. //        getNameFig().setJustificationByName("center");
WITHOUT_CLASSIFICATION	// get the widest of all textfigs // calculate the total height
WITHOUT_CLASSIFICATION	// Create the new FigAssociation edge to replace the node
WITHOUT_CLASSIFICATION	/* Center the NameFig, since center justification          * does not seem to work. */
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Do nothing, this rect will always be transparent
WITHOUT_CLASSIFICATION	// Do nothing, this rect will always be transparent
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	// update any text, colors, fonts, etc.
WITHOUT_CLASSIFICATION	// update the relative sizes and positions of internel Figs
WITHOUT_CLASSIFICATION	// popupAddOffset should be equal to the number of items added here:
WITHOUT_CLASSIFICATION	// Add stereotypes submenu
WITHOUT_CLASSIFICATION	// We handle and consume editing events
WITHOUT_CLASSIFICATION	// Detach any non-associationend edges (such as comment edges) already // attached before this association node is removed. // They'll later be re-attached to the new FigAssociation
WITHOUT_CLASSIFICATION	// Now we can remove ourself (which will also remove the // attached association ends edges)
WITHOUT_CLASSIFICATION	// Add the non-associationend edges (such as comment edges) that were // originally attached to this and attach them to the new // FigAssociation and make sure they are positioned correctly.
WITHOUT_CLASSIFICATION	/*     * List of model element listeners we've registered.     */
WITHOUT_CLASSIFICATION	// Added this part to load the extra menu content
WITHOUT_CLASSIFICATION	/* Owner related todo items: */
WITHOUT_CLASSIFICATION	/* Fig related todo items: */
WITHOUT_CLASSIFICATION	// parse the text that was edited
WITHOUT_CLASSIFICATION	// Pass everything except editing events to superclass
WITHOUT_CLASSIFICATION	/* If the source of the event is an UML object,             * then the UML model has been changed.*/
WITHOUT_CLASSIFICATION	/* The following is a possible future improvement         * of the modelChanged() function.         * Michiel: Propose not to do this to keep architecture stable. */
WITHOUT_CLASSIFICATION	// Default implementation is to do nothing
WITHOUT_CLASSIFICATION	// Default implementation is to do nothing
WITHOUT_CLASSIFICATION	// TODO: Update setting
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// We moused over an object just as it was deleted // transient condition - doesn't require I18N
WITHOUT_CLASSIFICATION	// TODO: We don't have any settings that can change per-fig currently // so we can just use the default settings; //        settings = new DiagramSettings(renderSettings);
WITHOUT_CLASSIFICATION	// Default implementation is to do nothing
WITHOUT_CLASSIFICATION	// Default implementation is to do nothing
WITHOUT_CLASSIFICATION	// Default implementation is to do nothing
WITHOUT_CLASSIFICATION	// Default implementation is to do nothing
WITHOUT_CLASSIFICATION	// Required for MouseListener interface, but we only care about clicks
WITHOUT_CLASSIFICATION	// Required for MouseListener interface, but we only care about clicks
WITHOUT_CLASSIFICATION	// Required for MouseListener interface, but we only care about clicks
WITHOUT_CLASSIFICATION	// Required for MouseListener interface, but we only care about clicks
WITHOUT_CLASSIFICATION	// No need to update if model element went away
WITHOUT_CLASSIFICATION	// Required for KeyListener interface, but not used
WITHOUT_CLASSIFICATION	// Required for KeyListener interface, but not used
WITHOUT_CLASSIFICATION	// Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // internal methods
WITHOUT_CLASSIFICATION	// If the edge is from a circle to a circle (e.g. between use // cases) we have our own implementation overriding GEF. Which // attempts to keep the edges perpendicular if the edge is already // close to perpendicular.
WITHOUT_CLASSIFICATION	//newFC = _content;
WITHOUT_CLASSIFICATION	// GEF sets a different Fig than the one that we had at construction // time, so we need to set its color and width
WITHOUT_CLASSIFICATION	// place the edge on the layer and update the diagram
WITHOUT_CLASSIFICATION	/* end computeRoute */
WITHOUT_CLASSIFICATION	//TODO: Does this help?
WITHOUT_CLASSIFICATION	// If this is not a circle to circle edge we default to let GEF // calculate edge route.
WITHOUT_CLASSIFICATION	// ? two iterations of refinement, maybe should be a for-loop
WITHOUT_CLASSIFICATION	// Give up if the assocation ends don't have a type defined
WITHOUT_CLASSIFICATION	// Get the two ends of any valid edge
WITHOUT_CLASSIFICATION	// Only allow binary associations
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	// TODO: assumes public
WITHOUT_CLASSIFICATION	/*(MElementImport)*/
WITHOUT_CLASSIFICATION	// Modifiers ...
WITHOUT_CLASSIFICATION	/* This sets the lineWidth of all in the group: */
WITHOUT_CLASSIFICATION	/* NameFig and StereotypeFig are handled by parent. */
WITHOUT_CLASSIFICATION	// If the line angle is less than 3 degrees then snap the line // straight
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // // Methods that implement the MutableGraphModel interface // ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// A dependency potentially has many clients and suppliers. We only // consider the first of each (not clear that we should really // accept the case where there is more than one of either)
WITHOUT_CLASSIFICATION	// Add the node, check that it is an actor or use case and add it to // the model namespace.
WITHOUT_CLASSIFICATION	// Tell GEF its changed
WITHOUT_CLASSIFICATION	// Add the element and place it in the namespace of the model
WITHOUT_CLASSIFICATION	// Tell GEF
WITHOUT_CLASSIFICATION	// Suggest that actors may not connect (see JavaDoc comment about // this).
WITHOUT_CLASSIFICATION	// Everything else is OK
WITHOUT_CLASSIFICATION	// Remove a node
WITHOUT_CLASSIFICATION	// Remove an edge
WITHOUT_CLASSIFICATION	// Something was added - nothing for us to worry about
WITHOUT_CLASSIFICATION	// Invoke the parent constructor first
WITHOUT_CLASSIFICATION	// Invoke the parent refresh first
WITHOUT_CLASSIFICATION	/* end class StylePanelFigUseCase */
WITHOUT_CLASSIFICATION	// initialize any other Figs here
WITHOUT_CLASSIFICATION	// Only the head should be filled (not the text)
WITHOUT_CLASSIFICATION	//Accumulate a bounding box for all the Figs in the group.
WITHOUT_CLASSIFICATION	//      name updating
WITHOUT_CLASSIFICATION	/*     * Text fig to hold the <<include>> label     */
WITHOUT_CLASSIFICATION	// The <<include>> label. // It's not a true stereotype, so don't use the stereotype support
WITHOUT_CLASSIFICATION	/* TRY SOME ACTION ERRORS */
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	/* Check if multiple items are selected: */
WITHOUT_CLASSIFICATION	// Make all the parts match the main fig
WITHOUT_CLASSIFICATION	// If the element import is in the old owned, it means it must have // been removed. Make sure the associated model element is removed.
WITHOUT_CLASSIFICATION	// By default we don't show the attribute check box. Mark this object // as a listener for the check box.
WITHOUT_CLASSIFICATION	//These are the positions of child figs inside this fig //They must be added in the constructor in this order. //For now the name must not be last as this would force //zero width lines (until GEF is fixed)
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order // Put this rectangle behind the rest, so it goes first
WITHOUT_CLASSIFICATION	// Make the line dashed
WITHOUT_CLASSIFICATION	// Add an arrow with an open arrow head
WITHOUT_CLASSIFICATION	// Make the edge go between nearest points
WITHOUT_CLASSIFICATION	// Create a new version of the relevant fig
WITHOUT_CLASSIFICATION	// The nodes at the two ends
WITHOUT_CLASSIFICATION	// The figs for the two end nodes
WITHOUT_CLASSIFICATION	// Link the new include relationship in to the ends
WITHOUT_CLASSIFICATION	// Link the new dependency in to the ends
WITHOUT_CLASSIFICATION	/* Side effect: This creates the fig: */
WITHOUT_CLASSIFICATION	/*         * A use case has an external separator.         * External means external to the compartment box.          * This horizontal line sticks out of the box,          * and touches the ellipse edge.         */
WITHOUT_CLASSIFICATION	// by default, do not show extension points:
WITHOUT_CLASSIFICATION	/* Use arbitrary dimensions for now. */
WITHOUT_CLASSIFICATION	// Get the parent vector first
WITHOUT_CLASSIFICATION	// Formula for a is described in the overall class description.
WITHOUT_CLASSIFICATION	/* For an ellipse, we can put the box in the middle:  */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	// Make the edge go between nearest points
WITHOUT_CLASSIFICATION	// Add menu to add an extension point or note. Placed one before last, // so the "Properties" entry is always last.
WITHOUT_CLASSIFICATION	// Where there is more than one supplier or client, take the first // element in each case. There really ought to be a check that // there are some here for safety.
WITHOUT_CLASSIFICATION	// Modifier menu. Placed one before last, so the "Properties" entry is // always last.
WITHOUT_CLASSIFICATION	// Work out the radii of the ellipse, a and b. The top right corner of // the ellipse (Cartesian coordinates, centered on the origin) will be // at (x,y)
WITHOUT_CLASSIFICATION	// Result as integers, rounded up. We ensure that the radii are // integers for convenience.
WITHOUT_CLASSIFICATION	/*     * Use the code from the FigCircle, not the one from Fig.     */
WITHOUT_CLASSIFICATION	/* Let's register for events from all modelelements         * that change the name or body text:          */
WITHOUT_CLASSIFICATION	/* Register for name changes, added extensionPoints             * and abstract makes the text italic.             * All Figs need to listen to "remove", too: */
WITHOUT_CLASSIFICATION	// register for extension points:
WITHOUT_CLASSIFICATION	// Set bounds will be called from our superclass constructor before // our constructor has run, so make sure this gets set up if needed.
WITHOUT_CLASSIFICATION	// Set up FigText to hold the condition.
WITHOUT_CLASSIFICATION	// Join all into a group
WITHOUT_CLASSIFICATION	// UML spec for Extend doesn't call for name nor stereotype
WITHOUT_CLASSIFICATION	// Make sure the line is dashed
WITHOUT_CLASSIFICATION	/* Set up the property panels for use case diagrams: */
WITHOUT_CLASSIFICATION	// Actions specific to the use case diagram toolbar
WITHOUT_CLASSIFICATION	// The renderer should be a singleton
WITHOUT_CLASSIFICATION	/*     * Allow all Packages and Classifiers..     */
WITHOUT_CLASSIFICATION	/* TRY THE PREDECESSORS */
WITHOUT_CLASSIFICATION	// If location is non-null, convert to a rectangle that we can use
WITHOUT_CLASSIFICATION	// TODO: This is using the default platform character encoding // specifying an encoding will produce more predictable results
WITHOUT_CLASSIFICATION	// The <<extend>> label. // It's not a true stereotype, so don't use the stereotype support //int y = getNameFig().getBounds().height;
WITHOUT_CLASSIFICATION	// Place in the middle of the line and ensure the line is dashed.  Add // an arrow with an open arrow head. Remember that for an extends // relationship, the arrow points to the base use case, but because of // the way we draw it, that is still the destination end.
WITHOUT_CLASSIFICATION	// Let the group recalculate its bounds and then tell GEF we've // finished.
WITHOUT_CLASSIFICATION	/* We accept a Package, but not a Model or a Subsystem. */
WITHOUT_CLASSIFICATION	/* If we do not exclude a Model here, then dropping the                 * Model on a UseCase diagram causes a package                 * to be drawn. */
WITHOUT_CLASSIFICATION	// empty list
WITHOUT_CLASSIFICATION	// private constructor to enforce singleton
WITHOUT_CLASSIFICATION	// some convenience methods
WITHOUT_CLASSIFICATION	// read until the end section is found, discard // generated content
WITHOUT_CLASSIFICATION	/**     * Constructor.     * <p>     * TODO: Correct?     *     * @param nodes The UML elements, typically classifiers, to generate.     * @param inModel <code>true</code> if the path is in the model.     */
WITHOUT_CLASSIFICATION	// Class Table
WITHOUT_CLASSIFICATION	// Select Buttons
WITHOUT_CLASSIFICATION	// Output Directory
WITHOUT_CLASSIFICATION	// Compile Checkbox
WITHOUT_CLASSIFICATION	// TODO: the last argument (recursive flag) should be a // selectable option
WITHOUT_CLASSIFICATION	// skip backup files. This is actually a workaround for the // cpp generator, which always creates backup files (it's a // bug).
WITHOUT_CLASSIFICATION	// TODO: Should be improved so that it's recognized whether there is something selected that can actually be generated // Nothing selected in the diagram
WITHOUT_CLASSIFICATION	// TODO: This is using the default platform character // encoding.  Specifying an encoding will produce more // predictable results
WITHOUT_CLASSIFICATION	// TODO: Get saved default directory // outputDirectoryComboBox.getModel().setSelectedItem(savedDir);
WITHOUT_CLASSIFICATION	// TODO: Get default output directory from user settings // Project p = ProjectManager.getManager().getCurrentProject(); // p.getProjectSettings().setGenerationOutputDir(path);
WITHOUT_CLASSIFICATION	// Generate Button --------------------------------------
WITHOUT_CLASSIFICATION	// remove trailing /
WITHOUT_CLASSIFICATION	// classify nodes by base path
WITHOUT_CLASSIFICATION	// else ignore
WITHOUT_CLASSIFICATION	// generate the files
WITHOUT_CLASSIFICATION	// Doesn't really matter what set we use.
WITHOUT_CLASSIFICATION	// Show Filechooser to select OutputDirectory
WITHOUT_CLASSIFICATION	/* end class ClassGenerationDialog */
WITHOUT_CLASSIFICATION	/* end class TableModelClassChecks */
WITHOUT_CLASSIFICATION	/* Try Changing the direction of m7 */
WITHOUT_CLASSIFICATION	// private constructor to enforce singleton
WITHOUT_CLASSIFICATION	// The diagram already exists in this project. Select it // as the current target.
WITHOUT_CLASSIFICATION	// ////////////// // TableModel implementation
WITHOUT_CLASSIFICATION	//        ArgoEventPump.fireEvent( //                new ArgoImporterEvent(ArgoEventTypes.IMPORTER_ADDED, gen));
WITHOUT_CLASSIFICATION	// Check if this diagram already exists in the project
WITHOUT_CLASSIFICATION	// Otherwise create a new classdiagram for the package.
WITHOUT_CLASSIFICATION	// if the classifier is not in the current diagram, add it:
WITHOUT_CLASSIFICATION	/*             * The following calls are ORDER DEPENDENT. Not sure why, but the             * layer add must come before the model add or we'll end up with             * duplicate figures in the diagram. - tfm             */
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// the class is in the diagram // so we are on a second pass, // find the fig for this class can update its visible state.
WITHOUT_CLASSIFICATION	// add edges // for a 2-pass r.e. process we might have already added the // class but not its edges
WITHOUT_CLASSIFICATION	// "Java" is the default module for historical reasons, // but it's not required to be there
WITHOUT_CLASSIFICATION	// the previous line helps, but we better check again:
WITHOUT_CLASSIFICATION	// not a SuffixFilter selected, so we take all
WITHOUT_CLASSIFICATION	// filter out all unchanged files
WITHOUT_CLASSIFICATION	// set the lastModified value
WITHOUT_CLASSIFICATION	//return Arrays.copyOf(selectedFiles, selectedFiles.length);
WITHOUT_CLASSIFICATION	//          iss.setValue(countFiles + (i + 1) / 10);
WITHOUT_CLASSIFICATION	// Roughly equivalent to and derived from old Import.doFile()
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.JFileChooser#approveSelection()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.JFileChooser#cancelSelection()         */
WITHOUT_CLASSIFICATION	// New style importers don't create diagrams, so we'll do it // based on the list of newElements that they created
WITHOUT_CLASSIFICATION	// Do layout even if problems occurred during import
WITHOUT_CLASSIFICATION	// Add messages from caught exceptions
WITHOUT_CLASSIFICATION	// Select the correct diagram (implicitly creates it)
WITHOUT_CLASSIFICATION	// Add the element to the diagram
WITHOUT_CLASSIFICATION	/*     * Print an exception trace to a string buffer     */
WITHOUT_CLASSIFICATION	// TODO: Get the list of extended settings from the current // language importer and add those too
WITHOUT_CLASSIFICATION	// level 0 import detail
WITHOUT_CLASSIFICATION	// level 1 import detail
WITHOUT_CLASSIFICATION	// level 2 import detail
WITHOUT_CLASSIFICATION	// build the configPanel:
WITHOUT_CLASSIFICATION	// de-selects the fig minimising & layout // if we are not creating diagrams
WITHOUT_CLASSIFICATION	// select the level of import // 0 - classifiers only // 1 - classifiers plus feature specifications // 2 - full import, feature detail
WITHOUT_CLASSIFICATION	// cp1252 is often the default, but windows-1252 is the name listed // by Charset.availableCharsets
WITHOUT_CLASSIFICATION	/*     * Get the extension panel for the configuration settings.     */
WITHOUT_CLASSIFICATION	// ExplorerEventAdaptor.getInstance().structureChanged(); // ProjectBrowser.getInstance().getStatusBar().showProgress(0);
WITHOUT_CLASSIFICATION	/*     * Create chooser for objects we are to import. Old style modules get to     * provide their own (although I don't believe any of them do), while new     * style modules get the a chooser provided by us (which matches what the     * abstract class FileImportSupport used to provide).     */
WITHOUT_CLASSIFICATION	// this is because of the (senseless?) "All files" FileFilter
WITHOUT_CLASSIFICATION	// Parsing file x of z.
WITHOUT_CLASSIFICATION	// progress bar
WITHOUT_CLASSIFICATION	// For some reason, this alleged directory is a single file // This could be that there is some confusion or just // the normal, that a single file was selected and is // supposed to be imported.
WITHOUT_CLASSIFICATION	// Get the contents of the directory
WITHOUT_CLASSIFICATION	// The following test can cause trouble with // links, because links are accepted as // directories, even if they link files. Links // could also result in infinite loops. For this // reason we don't do this traversing recursively.
WITHOUT_CLASSIFICATION	// If this file is a directory
WITHOUT_CLASSIFICATION	// TODO: Add filename ?
WITHOUT_CLASSIFICATION	// can't remove the last file
WITHOUT_CLASSIFICATION	// can't remove from existing one so create new one.
WITHOUT_CLASSIFICATION	// Error/warning messageArea
WITHOUT_CLASSIFICATION	//        gbc.gridheight = 10;
WITHOUT_CLASSIFICATION	// cancel/close button
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// the introducing label
WITHOUT_CLASSIFICATION	// User closing the progress window is interpreted as cancel request
WITHOUT_CLASSIFICATION	// panel for controls
WITHOUT_CLASSIFICATION	//This method can be called only if //there's a valid selection //so go ahead and remove whatever's selected.
WITHOUT_CLASSIFICATION	//nothings left, disable firing.
WITHOUT_CLASSIFICATION	//Select an index.
WITHOUT_CLASSIFICATION	//removed item in last position
WITHOUT_CLASSIFICATION	// Just quit
WITHOUT_CLASSIFICATION	// the text box containing the problem messages
WITHOUT_CLASSIFICATION	// continue and abort buttons
WITHOUT_CLASSIFICATION	// listeners
WITHOUT_CLASSIFICATION	//stores the action command into the UMLPlainTextDocument //class which is also used //for setProperty and getProperty
WITHOUT_CLASSIFICATION	// TODO: this seems to be called at startup only so no check so far
WITHOUT_CLASSIFICATION	// Add an invisible button to be used when everything is off
WITHOUT_CLASSIFICATION	/*|  //removed to workaround problems with autosplit                     OCLEditor.OPTIONMASK_AUTOSPLIT*/
WITHOUT_CLASSIFICATION	//TabModelTarget interface methods
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Update our model with our saved target
WITHOUT_CLASSIFICATION	// There is no need to test if classes is empty because // the shouldBeEnabled mechanism blanks out the possibility to // choose this alternative in this case.
WITHOUT_CLASSIFICATION	//List classes = getCandidates(); //return classes.size() > 0;
WITHOUT_CLASSIFICATION	// Our first button is invisible.   // Selecting it deselects all visible buttons.
WITHOUT_CLASSIFICATION	// Set editor's model
WITHOUT_CLASSIFICATION	// check ocl parsing constraints
WITHOUT_CLASSIFICATION	// do not create a constraint:
WITHOUT_CLASSIFICATION	// Parse and check specified constraint.
WITHOUT_CLASSIFICATION	// Ignored: Highly unlikely, and what would we // do anyway?  log it
WITHOUT_CLASSIFICATION	// Split constraint body, if user wants us to
WITHOUT_CLASSIFICATION	// the constraint _must_ be owned by a namespace
WITHOUT_CLASSIFICATION	// the constraint _must_ be owned by a namespace
WITHOUT_CLASSIFICATION	// Store constraint body
WITHOUT_CLASSIFICATION	// New constraint, first time setData is called
WITHOUT_CLASSIFICATION	// a runtime exception that occurs when some // internal test fails
WITHOUT_CLASSIFICATION	// Check name for consistency with spec
WITHOUT_CLASSIFICATION	// Set name
WITHOUT_CLASSIFICATION	// Also set name in constraint body -- Added 03/14/2001
WITHOUT_CLASSIFICATION	// replace name
WITHOUT_CLASSIFICATION	// OK, so that didn't work out... Just ignore // any problems and don't set the name in the // constraint body better had log it.
WITHOUT_CLASSIFICATION	// TODO: Why is this ignored? - tfm - 20070110
WITHOUT_CLASSIFICATION	/* TRY PREDECESSORS */
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	//        cmd.setObjects(run.getParams().get(0));
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// We have no model event listeners, so no need to do anything
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	// TODO: I18N // Don't use the empty string for this or it won't show in the list
WITHOUT_CLASSIFICATION	// It would be better if we didn't need the container to get // the target. This constructor can have zero parameters as // soon as we improve targetChanged.
WITHOUT_CLASSIFICATION	/* TODO: Here too? */
WITHOUT_CLASSIFICATION	/* TODO: Here too? */
WITHOUT_CLASSIFICATION	/* This should not be necessary, but let's be sure: */
WITHOUT_CLASSIFICATION	// end of interval
WITHOUT_CLASSIFICATION	// start of interval
WITHOUT_CLASSIFICATION	/* Remove old listeners: */
WITHOUT_CLASSIFICATION	// in middle of interval
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	/* Add new listeners: */
WITHOUT_CLASSIFICATION	/*  MVW: This can never happen, isn't it? */
WITHOUT_CLASSIFICATION	// makes sure we can select 'none'
WITHOUT_CLASSIFICATION	// TODO: For large lists, this is doing a linear search of literally thousands of elements
WITHOUT_CLASSIFICATION	// Don't try to test this if we're removing the element
WITHOUT_CLASSIFICATION	// we tried to remove a value
WITHOUT_CLASSIFICATION	// Object[] args = { newValue };
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalRemoved(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetAdded(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetRemoved(TargetEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// //  if one or the other is null or they are not equal
WITHOUT_CLASSIFICATION	// Do not set buildingModel = false here, // otherwise the action for selection is performed.
WITHOUT_CLASSIFICATION	// catch callers attempting to use one without other
WITHOUT_CLASSIFICATION	// //  as long as they aren't both null //   (or a really rare identical string pointer)
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// TODO: this seems to be called at startup only so no check so far
WITHOUT_CLASSIFICATION	// may only occur as child of the model or in a package
WITHOUT_CLASSIFICATION	// to rupdate the diagram set the stimulus name again // TODO: Explain that this really works also in the // MDR case. Linus is a sceptic.
WITHOUT_CLASSIFICATION	// //    if event source is unknown or //       the event source is the container's target //          then update the field
WITHOUT_CLASSIFICATION	// //   check the possibility that this is a promiscuous event
WITHOUT_CLASSIFICATION	// a deployment diagram shows something about the whole model // according to the UML spec, but we rely on the caller to enforce // that if desired.
WITHOUT_CLASSIFICATION	// a deployment diagram shows something about the whole model // according to the uml spec
WITHOUT_CLASSIFICATION	/*     * For a deployment diagram, not just any     * namespace will do - we need a package.     */
WITHOUT_CLASSIFICATION	// ns is a namespace, but not a package
WITHOUT_CLASSIFICATION	// ommit root package name; it's the model's root
WITHOUT_CLASSIFICATION	// there is a selection
WITHOUT_CLASSIFICATION	/* end class ActionCopy */
WITHOUT_CLASSIFICATION	/* Add a predicate for ArgoUML's default capabilities: */
WITHOUT_CLASSIFICATION	//Parser.ParseAndUpdate(modelObject, s);
WITHOUT_CLASSIFICATION	// remove from the model
WITHOUT_CLASSIFICATION	// It is a UML element that is not a ModelElement
WITHOUT_CLASSIFICATION	// lets see if this diagram has some figs on it
WITHOUT_CLASSIFICATION	// no content of diagram
WITHOUT_CLASSIFICATION	// we can delete figs like figrects now too
WITHOUT_CLASSIFICATION	/* TODO: If a namespace with sub-classdiagrams is deleted, then {            confirmStr +=                Translator.localize(                    "optionpane.remove-from-model-will-remove-subdiagram");            doAsk = true;        }*/
WITHOUT_CLASSIFICATION	// we cannot delete the last diagram
WITHOUT_CLASSIFICATION	// we cannot delete the model itself
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.text.Document#remove(int, int)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//ArgoDiagram activeDiagram = DiagramUtils.getActiveDiagram(); //return (activeDiagram instanceof UMLClassDiagram);
WITHOUT_CLASSIFICATION	// TODO: Probably really want to cancel editing //((FigTextEditor) focusOwner).cancelEditing();
WITHOUT_CLASSIFICATION	// usage of other sureRemove method is legacy. They should be // integrated.
WITHOUT_CLASSIFICATION	// the diagram contains figs so lets ask the user if // he/she is sure
WITHOUT_CLASSIFICATION	// TODO: This catch block needs to be narrower and do something // with the caught exception - tfm 20071120 // Ignore
WITHOUT_CLASSIFICATION	// TODO: All of the following can be broken if we have multiple // targets selected
WITHOUT_CLASSIFICATION	// OK Button ------------------------------------------
WITHOUT_CLASSIFICATION	// Delete Button
WITHOUT_CLASSIFICATION	// confirm with the user that he wants to delete, presenting the // list of settings to delete
WITHOUT_CLASSIFICATION	// procede with the deletion in the model
WITHOUT_CLASSIFICATION	// disable the button since no row will be selected now
WITHOUT_CLASSIFICATION	/* end class SourcePathDialog */
WITHOUT_CLASSIFICATION	// Mutators hold write lock & will deadlock if use is not thread safe
WITHOUT_CLASSIFICATION	// Mutators hold write lock & will deadlock // if use is not thread-safe
WITHOUT_CLASSIFICATION	/* The user cancelled! */
WITHOUT_CLASSIFICATION	//Custom button text:
WITHOUT_CLASSIFICATION	// 0
WITHOUT_CLASSIFICATION	// 1
WITHOUT_CLASSIFICATION	// 2
WITHOUT_CLASSIFICATION	// 3
WITHOUT_CLASSIFICATION	/* TRY SOME PREDECESSOR ERRORS */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.text.Document#remove(int, int)     */
WITHOUT_CLASSIFICATION	/* Try adding the extension from the chosen filter. */
WITHOUT_CLASSIFICATION	// adding project files icon
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	//do not use a custom Icon //the titles of buttons //default button title
WITHOUT_CLASSIFICATION	// NOTE: This may be called from a different thread, so we need to be // careful of the threading restrictions imposed by AbstractDocument // for mutators to be sure we don't deadlock.
WITHOUT_CLASSIFICATION	/* end class ActionOpenProject */
WITHOUT_CLASSIFICATION	// TODO: see if the new target has a TV that we can proxy
WITHOUT_CLASSIFICATION	/* Try adding the default extension. */
WITHOUT_CLASSIFICATION	//            LOG.debug("is a Base or Multiplicity");
WITHOUT_CLASSIFICATION	/* end class ActionSaveProjectAs */
WITHOUT_CLASSIFICATION	// only need to this from super()
WITHOUT_CLASSIFICATION	// --------------------------------------------------------
WITHOUT_CLASSIFICATION	// ----- setup similar to the super() implementation -----
WITHOUT_CLASSIFICATION	/*     * This action performs the layout and triggers a redraw of the editor pane.     *      * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////// // Proxy methods for real UMLModelElementTaggedValue ///////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// load of the new project // just reuse of the ActionOpen object
WITHOUT_CLASSIFICATION	// Rearrange the diagram layout
WITHOUT_CLASSIFICATION	// Leave logging commented out by default for efficiency //        LOG.debug("determine rendering for: " + value); //        LOG.debug("show icon: " + showIcon);
WITHOUT_CLASSIFICATION	// targets ought to be UML objects or diagrams
WITHOUT_CLASSIFICATION	// TODO: We shouldn't need this as well as the above.
WITHOUT_CLASSIFICATION	//      Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	/* end class TabProps */
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// If our map has any entries for this type, it's a connection type
WITHOUT_CLASSIFICATION	// Get the list of valid model item pairs for the given connection type
WITHOUT_CLASSIFICATION	// See if there's a pair in this list that match the given // model elements
WITHOUT_CLASSIFICATION	/*     * @see TargettableModelView#getTargettableModel()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// we tried to remove a value
WITHOUT_CLASSIFICATION	// put everything together
WITHOUT_CLASSIFICATION	// no title looks better
WITHOUT_CLASSIFICATION	// now remove the ones already applied.
WITHOUT_CLASSIFICATION	// make lists
WITHOUT_CLASSIFICATION	// make buttons
WITHOUT_CLASSIFICATION	// ignored this event
WITHOUT_CLASSIFICATION	// make buttons layout
WITHOUT_CLASSIFICATION	// make listeners
WITHOUT_CLASSIFICATION	//Remove the element from Available List
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#setItem(java.lang.Object)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#getEditorComponent()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#addActionListener(java.awt.event.ActionListener)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#removeActionListener(java.awt.event.ActionListener)         */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/** * Implements the source path controller. * NOTE: If requested in the future this could be returned from the language * modules. * * TODO: Update this to use the UML 1.4 TagDefinition mechanism instead of * UML 1.3 String type tag types. The TagDefinition can be made more specific * so that it just applies to Components with a <<sourceModule>> stereotype * or something similar. - tfm *  * @author euluis * @since 0.17.1 */
WITHOUT_CLASSIFICATION	/* end of SourcePathControllerImpl class definition */
WITHOUT_CLASSIFICATION	//sb.append(Model.getFacade().getName(c));
WITHOUT_CLASSIFICATION	//sb.append((String) Model.getFacade().getBody(c));
WITHOUT_CLASSIFICATION	/*MModelElement*/
WITHOUT_CLASSIFICATION	// next statement is necessary to update the textfield // if the selection is equal to what was allready // selected
WITHOUT_CLASSIFICATION	//ok
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#selectAll()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#getItem()         */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	//ok
WITHOUT_CLASSIFICATION	// necessary to create distance between // the textfield and the icon.
WITHOUT_CLASSIFICATION	//make new column with LabelledLayout
WITHOUT_CLASSIFICATION	// Comment.name text field - editing disabled
WITHOUT_CLASSIFICATION	// Comment.body text field - editing disabled
WITHOUT_CLASSIFICATION	/* Since there are no buttons on this panel, we have to set         * the size of the buttonpanel, otherwise the          * title would not be aligned right. */
WITHOUT_CLASSIFICATION	// Only change the background colour if it is supplied by the LAF. // Otherwise leave look and feel to handle this itself.
WITHOUT_CLASSIFICATION	// In this case, the bounds are determined by the FigEdge
WITHOUT_CLASSIFICATION	// In this case, the bounds are determined by the FigEdge
WITHOUT_CLASSIFICATION	// In this case, the bounds (of the box) are determined // by the FigClassAssociationClass
WITHOUT_CLASSIFICATION	// In this case, the bounds (of the box) are determined // by the FigClassAssociationClass
WITHOUT_CLASSIFICATION	// A newly created AssociationClass may not have all its parts // created by the time we are called
WITHOUT_CLASSIFICATION	// A newly created AssociationClass may not have all its parts // created by the time we are called
WITHOUT_CLASSIFICATION	// TODO: Defer most of this work if the panel isn't visible - tfm
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetAdded(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetRemoved(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	//          Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// how to handle empty target lists? // probably the TabProps should only show an empty pane in that // case
WITHOUT_CLASSIFICATION	// chooser.setSelectedFile(new File(fileName));
WITHOUT_CLASSIFICATION	/* So, let's do it the hard way: */
WITHOUT_CLASSIFICATION	// TODO: The following can be used when we drop Java 5 support or // when an ImageIO GIF writer plugin is bundled //            cmd = new SaveGIFAction2(Translator.localize("action.save-gif"));
WITHOUT_CLASSIFICATION	// If the diagram is empty, GEF won't write anything, leaving us with // an empty (and invalid) file.  Handle this case ourselves to prevent // this from happening.
WITHOUT_CLASSIFICATION	// Anything else is handled the normal way
WITHOUT_CLASSIFICATION	// Create an image which will do deferred rendering of the GEF // diagram on demand as data is pulled from it
WITHOUT_CLASSIFICATION	/** * Action to save a diagram as a GIF image in a supplied OutputStream. * * TODO: This requires Java 6 in its current state, so don't use. * * @author Tom Morris <tfmorris@gmail.com> */
WITHOUT_CLASSIFICATION	// NOTE: GEF's GIF writer uses Jeff Poskanzer's GIF encoder, but that // saves a copy of the entire image in an internal buffer before // starting work, defeating the whole purpose of our incremental // rendering.
WITHOUT_CLASSIFICATION	// Java SE 6 has a native GIF writer, but it's not in Java 5.  One // is available in the JAI-ImageIO library, but we don't currently // bundle that and at 6+ MB it seems like a heavyweight solution, but // I don't have time to produce a stripped down version right now - tfm // https://jai-imageio.dev.java.net/
WITHOUT_CLASSIFICATION	//        LayerPerspective layer = DiagramUtils.getActiveDiagram().getLayer();
WITHOUT_CLASSIFICATION	// Anything else is handled the normal way
WITHOUT_CLASSIFICATION	// Create an image which will do deferred rendering of the GEF // diagram on demand as data is pulled from it
WITHOUT_CLASSIFICATION	/** * Action to save a diagram as a GIF image in a supplied OutputStream. * * TODO: This requires Java 6 in its current state, so don't use. * * @author Tom Morris <tfmorris@gmail.com> */
WITHOUT_CLASSIFICATION	// we actually are computing max x & max y, not width & height
WITHOUT_CLASSIFICATION	// Convert max x/y to width/height
WITHOUT_CLASSIFICATION	// Get a DOMImplementation
WITHOUT_CLASSIFICATION	// Create an instance of org.w3c.dom.Document
WITHOUT_CLASSIFICATION	// Create an instance of the SVG Generator
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//        LayerPerspective layer = DiagramUtils.getActiveDiagram().getLayer();
WITHOUT_CLASSIFICATION	// we actually are computing max x & max y, not width & height
WITHOUT_CLASSIFICATION	// Convert max x/y to width/height
WITHOUT_CLASSIFICATION	// Get a DOMImplementation
WITHOUT_CLASSIFICATION	// Create an instance of org.w3c.dom.Document
WITHOUT_CLASSIFICATION	// Create an instance of the SVG Generator
WITHOUT_CLASSIFICATION	// make it stretch vertically
WITHOUT_CLASSIFICATION	//"org.argouml.cognitive.critics",
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnName(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnClass(int)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// handle multivalued tagged value
WITHOUT_CLASSIFICATION	// handle multivalued tagged value
WITHOUT_CLASSIFICATION	// Target has been deleted
WITHOUT_CLASSIFICATION	// If the row is past the end of our current collection, // return an empty string so they can add a new value
WITHOUT_CLASSIFICATION	// tagValue = true;
WITHOUT_CLASSIFICATION	// for debugging
WITHOUT_CLASSIFICATION	/*     * Return the ith element from a Collection.     *     * @param collection collection to get element from     *     * @param index index of the element to be returned     *     * @return the object     */
WITHOUT_CLASSIFICATION	// We really shouldn't add it until after it is set up, but we // need it to have an owner for the following method calls
WITHOUT_CLASSIFICATION	// Since we aren't sure of ordering, fire event for whole table
WITHOUT_CLASSIFICATION	// no way, we have to give up
WITHOUT_CLASSIFICATION	// Do nothing during the deprecation period, then it can be removed.
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.DefaultListModel#contains(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.DefaultListModel#addElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetAdded(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetRemoved(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireContentsChanged(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	// we tried to remove a value
WITHOUT_CLASSIFICATION	// get the first editable extent (which is OK unless there is more // than one editable extent)
WITHOUT_CLASSIFICATION	/*             * This can throw an exception if the target has been             * deleted. We don't want to try locking the repository             * because this is called from the event delivery thread and             * could cause a deadlock. Instead catch the exception and             * leave the model empty.             */
WITHOUT_CLASSIFICATION	/* end class ActionImportFromSources */
WITHOUT_CLASSIFICATION	// Don't test changed element if it was deleted
WITHOUT_CLASSIFICATION	// this is never downlighted...
WITHOUT_CLASSIFICATION	// Only specified format are allowed.
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetAdded(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetRemoved(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentMoved(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentResized(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Add stereotypes submenu
WITHOUT_CLASSIFICATION	// Set up the target and its model element variant.
WITHOUT_CLASSIFICATION	// Set the tooltip of the arrow to open combined tools:
WITHOUT_CLASSIFICATION	// If the target has changed notify the third party listener if it // exists and dispatch a new element event listener to // ourself. Otherwise dispatch a target reasserted to ourself.
WITHOUT_CLASSIFICATION	/* Set the minimum and preferred equal,         * so that the size is fixed for the labelledlayout.         */
WITHOUT_CLASSIFICATION	// This will add a new ModelElement event listener // after update is complete
WITHOUT_CLASSIFICATION	/* We presume that the container equals this PropPanel. */
WITHOUT_CLASSIFICATION	// Refresh the target for all our children which weren't getting // while not visible
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* This works - we do get an event - and now              * refresh the UI: */
WITHOUT_CLASSIFICATION	// to manage the case there are no label/component // pairs but just one component
WITHOUT_CLASSIFICATION	// If the component is a JLabel which has another // component assigned then position/size the label and // calculate the size of the registered component
WITHOUT_CLASSIFICATION	// Assumes the next child is the labelled component
WITHOUT_CLASSIFICATION	// Make sure the component width isn't any greater // than its maximum allowed width
WITHOUT_CLASSIFICATION	// If the child component is resizable then // we don't know it's actual size yet. // It will be calculated later as a // proportion of the available left over // space.  For now this is flagged as zero.
WITHOUT_CLASSIFICATION	// If a preferred height is not given or is // the same as the minimum height then fix the // height of this row.
WITHOUT_CLASSIFICATION	//Project p = ProjectManager.getManager().getCurrentProject(); //Collection elems = //ModelManagementHelper.getHelper() //    .getAllModelElementsOfKind(MClassifier.class);
WITHOUT_CLASSIFICATION	// Expressions are DataTypes, not independent model elements // be careful not to reuse them
WITHOUT_CLASSIFICATION	// Allow listening to other elements: //                removeOtherModelEventListeners(listTarget);
WITHOUT_CLASSIFICATION	// setDoubleBuffered(true);
WITHOUT_CLASSIFICATION	/* TRY SOME MORE COMPLEX MOVING */
WITHOUT_CLASSIFICATION	// Implements backspace functionality
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.CaretListener#caretUpdate(javax.swing.event.CaretEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	// we tried to remove a value
WITHOUT_CLASSIFICATION	// there is a selection
WITHOUT_CLASSIFICATION	/*             * This can throw an exception if the target has been             * deleted. We don't want to try locking the repository             * because this is called from the event delivery thread and             * could cause a deadlock. Instead catch the exception and             * leave the model empty.             */
WITHOUT_CLASSIFICATION	// Don't test changed element if it was deleted
WITHOUT_CLASSIFICATION	/* end class ActionCut */
WITHOUT_CLASSIFICATION	// Allow listening to other elements: //                addOtherModelEventListeners(listTarget);
WITHOUT_CLASSIFICATION	//      if there is a selection on the clipboard
WITHOUT_CLASSIFICATION	// get localised strings once only
WITHOUT_CLASSIFICATION	// setting the icon
WITHOUT_CLASSIFICATION	// setting the tooltip to type and name
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static variables
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Update our model with our saved target
WITHOUT_CLASSIFICATION	// Stop updating model when we're not visible
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// in UML2, a td is a property of a stereotype in a profile
WITHOUT_CLASSIFICATION	// Only update our model if we're visible
WITHOUT_CLASSIFICATION	// Most likely cause of this is that someone deleted our // target with the event pump turned off so we didn't // get notification.  Nothing we can do about it now and // we are changing targets anyway, so just log it.
WITHOUT_CLASSIFICATION	/* This target is a statemachine,              * for which no diagram exists yet,              * so, let's use it. */
WITHOUT_CLASSIFICATION	/* end class TabTaggedValues */
WITHOUT_CLASSIFICATION	// setEnabled((Globals.clipBoard != null && // !Globals.clipBoard.isEmpty()) || // !isSystemClipBoardEmpty());
WITHOUT_CLASSIFICATION	/* end class ActionPaste */
WITHOUT_CLASSIFICATION	/* The target is a valid context. */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *      java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* Let's just build a Statemachine,              * and put it in a suitable namespace. */
WITHOUT_CLASSIFICATION	/* Follow well-formedness rule for a Class [2].                 * Determine the owning namespace for the statemachine: */
WITHOUT_CLASSIFICATION	// upperPanel.setBorder(BorderFactory.createEtchedBorder());
WITHOUT_CLASSIFICATION	// buttonBox.add(Box.createRigidArea(new Dimension(0, 20)));
WITHOUT_CLASSIFICATION	// String title = getUI().getDialogTitle(this);
WITHOUT_CLASSIFICATION	/**     * Test if the given namespace is a valid namespace to add the diagram to.     * TODO: This method was created to facilitate the merge     * of this class with ActionAddDiagram.     *     * @param ns the namespace to check     * @return Returns <code>true</code> if valid.     */
WITHOUT_CLASSIFICATION	// TODO: Since there may be multiple top level elements in // a project, this should be using the default Namespace (currently // undefined) or something similar
WITHOUT_CLASSIFICATION	// button action:
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Make sure it's parseable as an number
WITHOUT_CLASSIFICATION	// ignored - we just skipped inserting it in our document
WITHOUT_CLASSIFICATION	//            select.setText(Translator.localize("action.select"));
WITHOUT_CLASSIFICATION	//                select.add(ActionAddEventAsDeferrableEvent.SINGLETON);
WITHOUT_CLASSIFICATION	//        newMenu.setText(Translator.localize("action.new"));
WITHOUT_CLASSIFICATION	/*(MExtend)*/
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	// repair action for possible NP after load
WITHOUT_CLASSIFICATION	/* (MClassifier) */
WITHOUT_CLASSIFICATION	/* TRY SOME MORE ERRORS */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* (MModelElement) */
WITHOUT_CLASSIFICATION	//to be able to remove dep's later
WITHOUT_CLASSIFICATION	//to be able to remove dependencies later
WITHOUT_CLASSIFICATION	/**     * ADDONLY_COMMAND determines a changeability kind.     * TODO: Removed from UML 2.x.  Phase out of UI - tfm - 20070529     */
WITHOUT_CLASSIFICATION	// TODO: Removed from UML 2.x - phase out usage - tfm 20070530
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// because we're listening for stereotypes being added and removed // but we're really interested in their owned tag definitions, // the default implementation won't work for us
WITHOUT_CLASSIFICATION	/* end class ActionAddAttribute */
WITHOUT_CLASSIFICATION	// Ask to be notified of any changes to TagDefinitions so that we // can track new ones, name changes, etc
WITHOUT_CLASSIFICATION	// since UML2 it's easier: TDs only via stereotypes
WITHOUT_CLASSIFICATION	// Just mark for rebuild next time since we use lazy loading
WITHOUT_CLASSIFICATION	// A stereotype got applied or removed // Just mark for rebuild next time since we use lazy loading
WITHOUT_CLASSIFICATION	/*     * @see Namespace#pushNamespaceElement(NamespaceElement)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.swidgets.Dialog#nameButtons()     */
WITHOUT_CLASSIFICATION	// All strings collate before all UML elements
WITHOUT_CLASSIFICATION	// All strings collate before all UML elements
WITHOUT_CLASSIFICATION	/*     * Compare path of two elements in reverse order (inner to outer)     * using a primary strength text collator.      * This will collate e, E, �, � together, but not eliminate non-identical     * strings which collate in the same place.     *      * @return equivalent of list1.compareTo(list2)     */
WITHOUT_CLASSIFICATION	// and then by their enclosing path to fully distinguish them
WITHOUT_CLASSIFICATION	// Elements are collated first by name hoping for a quick solution
WITHOUT_CLASSIFICATION	// Keep track of first non-equal comparison to use in case the // case-insensitive comparisons all end up equal
WITHOUT_CLASSIFICATION	// Add the action to the component
WITHOUT_CLASSIFICATION	// It's illegal in UML to have multiple elements in a namespace with // the same name, but if it happens, keep them distinct so the user // has a chance of catching the error.  Pick an arbitrary, but stable, // collating order. // We don't call them equal because otherwise one will get eliminated // from the TreeSet where this comparator is used.
WITHOUT_CLASSIFICATION	// If the strings differed only in non-primary characteristics at // some point (case, accent, etc) pick an arbitrary, but stable,  // collating order.
WITHOUT_CLASSIFICATION	/* {transient=false, volatile=false} */
WITHOUT_CLASSIFICATION	// Argo customization
WITHOUT_CLASSIFICATION	// prohibit instantiation
WITHOUT_CLASSIFICATION	// KeyEvent.isActionKey() method
WITHOUT_CLASSIFICATION	// Apparently this object had no getItemUID
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// Apparently this object had no getUUID
WITHOUT_CLASSIFICATION	// Apparently it had a getItemUID, // but we're not allowed to call it
WITHOUT_CLASSIFICATION	// Apparently it had a getItemUID, // but we're not allowed to call it
WITHOUT_CLASSIFICATION	// Apparently it had a getItemUID, // but we're not allowed to call it
WITHOUT_CLASSIFICATION	// Apparently this object had no setItemUID
WITHOUT_CLASSIFICATION	// Apparently it had a setItemUID, // but we're not allowed to call it
WITHOUT_CLASSIFICATION	// Apparently it had a setItemUID, // but we're not allowed to call it
WITHOUT_CLASSIFICATION	// class preloading, so packages are there...
WITHOUT_CLASSIFICATION	// ...getPackage() can return null's, so we have to // cater for this:
WITHOUT_CLASSIFICATION	// make this thread interruptible, if called from SwingWorker
WITHOUT_CLASSIFICATION	/* Switch the value back off, so that we will                     * get notified again next time.                     */
WITHOUT_CLASSIFICATION	// Ignore any nested exceptions. We don't want infinite loop.
WITHOUT_CLASSIFICATION	// Didn't work.
WITHOUT_CLASSIFICATION	// Create a proxy object around this handler that can be reflectively added as an Apple ApplicationListener
WITHOUT_CLASSIFICATION	// Likely a NoSuchMethodException or an IllegalAccessException loading/invoking eawt.Application methods
WITHOUT_CLASSIFICATION	// All of the ApplicationListener methods are void; return null regardless of what happens
WITHOUT_CLASSIFICATION	// If the target method returns a boolean, use that as a hint
WITHOUT_CLASSIFICATION	// For eclipse setup
WITHOUT_CLASSIFICATION	// For ant setup
WITHOUT_CLASSIFICATION	// When running from maven
WITHOUT_CLASSIFICATION	// If we're setting a handler, enable the About menu item by calling // com.apple.eawt.Application reflectively
WITHOUT_CLASSIFICATION	// If we're setting a handler, enable the Preferences menu item by calling // com.apple.eawt.Application reflectively
WITHOUT_CLASSIFICATION	// Override OSXAdapter.callTarget to send information on the // file to be opened
WITHOUT_CLASSIFICATION	// Ignore if the directory does not exist. // This error will throw when running from the ant setup.
WITHOUT_CLASSIFICATION	// Ignore if the directory does not exist. // This error will throw when running from the Eclipse setup.
WITHOUT_CLASSIFICATION	// Ignore if the directory does not exist. // This error will throw when running from the Eclipse setup.
WITHOUT_CLASSIFICATION	//"org.argouml.notation.providers",//fails because sub-packages fail (?) //"org.argouml.notation.providers.java", //"org.argouml.notation.providers.uml", //"org.argouml.notation",//fails because sub-packages fail (?) //"org.argouml.notation.ui",
WITHOUT_CLASSIFICATION	// There was a comment saying that the below has no cycles, but // Classycle thinks there's a cycle here too, so I believe there // really is one - tfm 20070702 //            "org.argouml.uml.cognitive.critics",
WITHOUT_CLASSIFICATION	//TODO:{"org.argouml.ui", "org.argouml.cognitive.ui"},//fails due to subpackages //TODO:{"org.argouml.cognitive", "org.argouml.cognitive.critics"},
WITHOUT_CLASSIFICATION	//{"org.argouml.kernel", "org.argouml.uml.diagram.ui"},//why does this fail?
WITHOUT_CLASSIFICATION	// do nothing by design
WITHOUT_CLASSIFICATION	/* These 3 steps are only needed for          * the 2 cases indicated with a X below. */
WITHOUT_CLASSIFICATION	// Obey the contract ourselves!
WITHOUT_CLASSIFICATION	// register all of the event listener trackers
WITHOUT_CLASSIFICATION	// remove all of the listeners
WITHOUT_CLASSIFICATION	// fire all of the diagram events
WITHOUT_CLASSIFICATION	// fire all of the generator events
WITHOUT_CLASSIFICATION	// fire all of the help events
WITHOUT_CLASSIFICATION	// fire all of the notation events
WITHOUT_CLASSIFICATION	// verify all events were fired correctly
WITHOUT_CLASSIFICATION	// keep track of total events fired
WITHOUT_CLASSIFICATION	// keep track of which events fired
WITHOUT_CLASSIFICATION	// X // X
WITHOUT_CLASSIFICATION	// initialize the event listener trackers which // verify that all of the proper events were fired
WITHOUT_CLASSIFICATION	// Display events are fired on the Swing event thread. // We need to wait for them to be dispatched // NOTE: if more display events are added to this test, this one // needs to be last
WITHOUT_CLASSIFICATION	// Notation events are fired on the Swing event thread. // We assume that serializing on the final call is sufficient
WITHOUT_CLASSIFICATION	// counts each bit that has been fired
WITHOUT_CLASSIFICATION	/* ResolvedCritic(String, List) */
WITHOUT_CLASSIFICATION	/* ResolvedCritic(Critic, ListSet) */
WITHOUT_CLASSIFICATION	/* ResolvedCritic(Critic, ListSet, boolean) */
WITHOUT_CLASSIFICATION	/* testmc should now have an ItemUID so we should be able to         * create without adding a new ItemUID */
WITHOUT_CLASSIFICATION	// EnabledCM isRelevant checks if the critic is enabled // initialize this to true to verify isRelevant returns true
WITHOUT_CLASSIFICATION	// verify isRelevant returns true
WITHOUT_CLASSIFICATION	// set enabled to false and check the opposite condition
WITHOUT_CLASSIFICATION	// verify isRelevant not is false
WITHOUT_CLASSIFICATION	// NotSnoozedCM isRelevant checks if the critic is snoozed // snooze the critic to verify isRelevant returns false
WITHOUT_CLASSIFICATION	// unsnooze the critic to verify the critic is not relevant
WITHOUT_CLASSIFICATION	// verify isRelevant is true
WITHOUT_CLASSIFICATION	// CurDecisionCM isRelevant checks to see if the critic has // any decisions that have a priority > 0 and less than the // priority of the critic.  By default the critic has no // decisions so isRelevant should return false.
WITHOUT_CLASSIFICATION	// verify isRelevant is still false
WITHOUT_CLASSIFICATION	// isRelevant should now be true
WITHOUT_CLASSIFICATION	// isRelevant should still be true
WITHOUT_CLASSIFICATION	// initialize test data
WITHOUT_CLASSIFICATION	// initialize the ToDoList
WITHOUT_CLASSIFICATION	// add a ToDoItem
WITHOUT_CLASSIFICATION	// redundantly add item again which should be ignored
WITHOUT_CLASSIFICATION	// size should be 1 since addition of second item would have been ignored
WITHOUT_CLASSIFICATION	// retrieve item
WITHOUT_CLASSIFICATION	// remove item
WITHOUT_CLASSIFICATION	// size should be 0 since item was removed
WITHOUT_CLASSIFICATION	// initialize the GoalModel
WITHOUT_CLASSIFICATION	// check that the model was initialized with the unspecified goal
WITHOUT_CLASSIFICATION	// change priority of unspecified goal so we can verify it was updated
WITHOUT_CLASSIFICATION	// first verify that the set goal priority did not add an extra goal
WITHOUT_CLASSIFICATION	// check that the model correctly updates a goal's priority
WITHOUT_CLASSIFICATION	// test the removal of a goal
WITHOUT_CLASSIFICATION	// number of goals should now be 0
WITHOUT_CLASSIFICATION	// start desiring a goal which should add a goal and bump the size to 1
WITHOUT_CLASSIFICATION	// number of goals should now be 1
WITHOUT_CLASSIFICATION	// stop desiring the goal which should remove it from the model
WITHOUT_CLASSIFICATION	//        UMLSequenceDiagram seqdiag = new UMLSequenceDiagram();
WITHOUT_CLASSIFICATION	// initialize test data
WITHOUT_CLASSIFICATION	// This test calls ToDoList.addElement which requires the // Model.  We are able to get away with using the Mock model.
WITHOUT_CLASSIFICATION	//        checkAssignIDToObject(seqdiag, true, true);
WITHOUT_CLASSIFICATION	// FigEdgeNote has no UUID
WITHOUT_CLASSIFICATION	//checkAssignIDToObject(figassociationrole, true, true);
WITHOUT_CLASSIFICATION	//checkAssignIDToObject(fighistorystate, true, true);
WITHOUT_CLASSIFICATION	//checkAssignIDToObject(figstate, true, true);
WITHOUT_CLASSIFICATION	// initialize basic parameters that are // different from Decision.UNSPEC
WITHOUT_CLASSIFICATION	// initialize a decision object with parameters
WITHOUT_CLASSIFICATION	// initialize a decision object with parameters
WITHOUT_CLASSIFICATION	// verify parameters were initialized correctly by the constructor
WITHOUT_CLASSIFICATION	// set the priority to a different value
WITHOUT_CLASSIFICATION	// set the priority to a different value
WITHOUT_CLASSIFICATION	// verify the priority was correctly updated
WITHOUT_CLASSIFICATION	// verify the priority was correctly updated
WITHOUT_CLASSIFICATION	// set the name to a different value
WITHOUT_CLASSIFICATION	// set the name to a different value
WITHOUT_CLASSIFICATION	// verify the name property was correctly updated
WITHOUT_CLASSIFICATION	// following the update the priority should be // equivalent to Decision.UNSPEC
WITHOUT_CLASSIFICATION	// test that properties were correctly initialized by the constructor
WITHOUT_CLASSIFICATION	// initialize the Checklist
WITHOUT_CLASSIFICATION	// add some test data
WITHOUT_CLASSIFICATION	// add some test data
WITHOUT_CLASSIFICATION	// verify the size of the list
WITHOUT_CLASSIFICATION	// verify the size of the list
WITHOUT_CLASSIFICATION	// verify the items were correctly added
WITHOUT_CLASSIFICATION	// verify the items were correctly added
WITHOUT_CLASSIFICATION	// test that the category and description are correct
WITHOUT_CLASSIFICATION	// create a new list to test the addAll
WITHOUT_CLASSIFICATION	// create a new list to test the addAll
WITHOUT_CLASSIFICATION	// add all of the test items from the first list
WITHOUT_CLASSIFICATION	// add all of the test items from the first list
WITHOUT_CLASSIFICATION	// verify the size of the new list
WITHOUT_CLASSIFICATION	// verify the size of the new list
WITHOUT_CLASSIFICATION	// initialize the ChecklistStatus
WITHOUT_CLASSIFICATION	// Construct a CheckItem 
WITHOUT_CLASSIFICATION	// (1) test that the properties were correctly initialized
WITHOUT_CLASSIFICATION	// reset the values to something different
WITHOUT_CLASSIFICATION	// (2) Construct another CheckItem
WITHOUT_CLASSIFICATION	// test that the properties were correctly initialized
WITHOUT_CLASSIFICATION	// verify that the equivalence test works
WITHOUT_CLASSIFICATION	// initialize SnoozeOrder
WITHOUT_CLASSIFICATION	// snooze and verify its been enabled
WITHOUT_CLASSIFICATION	// unsnooze and verify its been disabled
WITHOUT_CLASSIFICATION	// maybe next test is going to change in future
WITHOUT_CLASSIFICATION	// test with a class in a package
WITHOUT_CLASSIFICATION	// Let's make it a bit more difficult by setting the target:
WITHOUT_CLASSIFICATION	// test with a class and an inner class
WITHOUT_CLASSIFICATION	// test with a class and an inner class
WITHOUT_CLASSIFICATION	// test with a class and class diagram
WITHOUT_CLASSIFICATION	// test with a class and class diagram
WITHOUT_CLASSIFICATION	// try with Statediagram
WITHOUT_CLASSIFICATION	// try with Statediagram
WITHOUT_CLASSIFICATION	// try with Statediagram
WITHOUT_CLASSIFICATION	// try with Statediagram
WITHOUT_CLASSIFICATION	/* Put the statemachine in the namespace of the class: */
WITHOUT_CLASSIFICATION	// test with a package and a class and activity diagram
WITHOUT_CLASSIFICATION	// test with a package and a class and activity diagram
WITHOUT_CLASSIFICATION	// build the Activity Diagram
WITHOUT_CLASSIFICATION	// build the Activity Diagram
WITHOUT_CLASSIFICATION	/* In the next line, replacing makeEmptyProject         * by getCurrentProject fails the test,         * except when run in Eclipse.         * MVW: I have no idea why.*/
WITHOUT_CLASSIFICATION	/* We no longer send individual events,             *  so next code is obsolete: */
WITHOUT_CLASSIFICATION	/* We initialised Java Notation, so let's activate it: */
WITHOUT_CLASSIFICATION	/* Needed for initialisations: */
WITHOUT_CLASSIFICATION	// set MetaProfile as a default profile
WITHOUT_CLASSIFICATION	// create a dependency from the project's model to the MetaProfile
WITHOUT_CLASSIFICATION	// remove the MetaProfile from the project's profile configuration
WITHOUT_CLASSIFICATION	// save the project into a new file
WITHOUT_CLASSIFICATION	// setup a user defined profile
WITHOUT_CLASSIFICATION	/* TRY GUARD/ITERATOR SYNTAX */
WITHOUT_CLASSIFICATION	// create a new project and assert that it has the MetaProfile  // as part of the project's profile configuration
WITHOUT_CLASSIFICATION	// assert that the project's model element that had a dependency to  // the MetaProfile doesn't get inconsistent
WITHOUT_CLASSIFICATION	// reopen the project and assert that the MetaProfile isn't part of  // the profile configuration, including the fact that the stereotype  // <<Critic>> isn't found
WITHOUT_CLASSIFICATION	// assert that the project's model elements that had a dependency to  // the UML profile for Java are consistent
WITHOUT_CLASSIFICATION	// add it to the project configuration
WITHOUT_CLASSIFICATION	// add it to the project configuration
WITHOUT_CLASSIFICATION	// create a dependency between the project's model and the user defined  // profile
WITHOUT_CLASSIFICATION	// create a dependency between the project's model and the user defined  // profile
WITHOUT_CLASSIFICATION	// save the project
WITHOUT_CLASSIFICATION	// save the project
WITHOUT_CLASSIFICATION	// load the project
WITHOUT_CLASSIFICATION	// assert that the model element that depends on the profile is  // consistent
WITHOUT_CLASSIFICATION	// remove the user defined profile and the directory where it is
WITHOUT_CLASSIFICATION	// Success - expected exception
WITHOUT_CLASSIFICATION	// Clean up after ourselves by deleting profile model
WITHOUT_CLASSIFICATION	// Test both forms of addBaseClass
WITHOUT_CLASSIFICATION	// Test remaining form of removeBaseClass
WITHOUT_CLASSIFICATION	// by default the build already builds one default EP
WITHOUT_CLASSIFICATION	//$JUnit-BEGIN$
WITHOUT_CLASSIFICATION	//$JUnit-END$
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// Flag to enable performance testing - off by default
WITHOUT_CLASSIFICATION	// initialize the model and profile subsystems to simulate a fresh  // ArgoUML session
WITHOUT_CLASSIFICATION	// 20 sec.
WITHOUT_CLASSIFICATION	// Add one child.
WITHOUT_CLASSIFICATION	// Performance testing parameters
WITHOUT_CLASSIFICATION	// Add grandchild.
WITHOUT_CLASSIFICATION	// Create a generalizable element with an element without children.
WITHOUT_CLASSIFICATION	// Check periodically to see if we've exceeded time limit
WITHOUT_CLASSIFICATION	// Add another child.
WITHOUT_CLASSIFICATION	// Tree is created depth first, so this should be at the bottom
WITHOUT_CLASSIFICATION	// Try changing namespace of element and make sure results track
WITHOUT_CLASSIFICATION	/*     * Populate our namespace hierarchy to the requested depth.  Total number     * of created elements is children^maxLevel, so be careful not to increase     * parameters too much.     */
WITHOUT_CLASSIFICATION	/* TRY SOME GUARD/ITERATOR ERRORS */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#TestCase(String)     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// Make sure we have a root model for TagDefinitions to get put in.
WITHOUT_CLASSIFICATION	// create the tree of objects
WITHOUT_CLASSIFICATION	// copy package p1 into p2 package
WITHOUT_CLASSIFICATION	// change the structure in p1 package
WITHOUT_CLASSIFICATION	// verify the copied package
WITHOUT_CLASSIFICATION	// verify the copied class
WITHOUT_CLASSIFICATION	// verify the copied nested package and the copied interface
WITHOUT_CLASSIFICATION	// verify the copied attribute
WITHOUT_CLASSIFICATION	// See if we can copy a class right off
WITHOUT_CLASSIFICATION	// Change things
WITHOUT_CLASSIFICATION	// Change things
WITHOUT_CLASSIFICATION	// Change things
WITHOUT_CLASSIFICATION	// Change things
WITHOUT_CLASSIFICATION	// Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	// Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	// See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	// See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	// See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	// See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	// See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	// See if two copies look like copies of eachother
WITHOUT_CLASSIFICATION	// See if two copies look like copies of eachother
WITHOUT_CLASSIFICATION	// See if two copies look like copies of eachother
WITHOUT_CLASSIFICATION	// See if we can copy a datatype right off
WITHOUT_CLASSIFICATION	// See if two copies look like copies of each other
WITHOUT_CLASSIFICATION	// See if two copies look like copies of each other
WITHOUT_CLASSIFICATION	// See if we can copy an interface right off
WITHOUT_CLASSIFICATION	/*     * Create a new tagged value with the given type and value     * and add it to a ModelElement.     */
WITHOUT_CLASSIFICATION	/*     * Update an existing tagged value on a model element.     */
WITHOUT_CLASSIFICATION	// See if we can copy a package right off
WITHOUT_CLASSIFICATION	// See if we can copy a stereotype right off
WITHOUT_CLASSIFICATION	// Expected
WITHOUT_CLASSIFICATION	//	"Permission",
WITHOUT_CLASSIFICATION	// Check to see if association still exists
WITHOUT_CLASSIFICATION	// Expected IllegalArgumentException seen
WITHOUT_CLASSIFICATION	// A parameterized class can only be the client of a single binding
WITHOUT_CLASSIFICATION	// exception expected - test success
WITHOUT_CLASSIFICATION	// expected - test success
WITHOUT_CLASSIFICATION	// expected - test success
WITHOUT_CLASSIFICATION	// Create a new arg list with a different set of args (but same types)
WITHOUT_CLASSIFICATION	// success
WITHOUT_CLASSIFICATION	// not static
WITHOUT_CLASSIFICATION	// Test passed
WITHOUT_CLASSIFICATION	// Test passed
WITHOUT_CLASSIFICATION	// NOT UML1.4
WITHOUT_CLASSIFICATION	// non existent in UML1
WITHOUT_CLASSIFICATION	// Not in UML1.4
WITHOUT_CLASSIFICATION	// Not in UML1.4
WITHOUT_CLASSIFICATION	// Not in UML1.4
WITHOUT_CLASSIFICATION	// Not in UML1.4
WITHOUT_CLASSIFICATION	// not in UML1.4
WITHOUT_CLASSIFICATION	// This is not a well formed model in a strict sense. // See the multiplicity in UML 1.3 Figure 2-5.
WITHOUT_CLASSIFICATION	// returns List
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// Deleting the stereotype should cascade to the TagDefinition, // then the TaggedValue
WITHOUT_CLASSIFICATION	// TODO: constraints // TODO: required tags
WITHOUT_CLASSIFICATION	// Enumerate declaring class
WITHOUT_CLASSIFICATION	// NOTE: Although it's not shown in the UML 1.4 spec, a TemplateArgument // appears to be a datavalue (like MultiplicityRange) and can not be // reused in multiple instances.  The UML diagrams don't show it as a // composition, but it effectively is.
WITHOUT_CLASSIFICATION	// Must be called after setImplementation.
WITHOUT_CLASSIFICATION	// Enumerate fields
WITHOUT_CLASSIFICATION	// Enumerate constructors
WITHOUT_CLASSIFICATION	// Indicate that the test was validated
WITHOUT_CLASSIFICATION	// TODO: Look up class in truth table
WITHOUT_CLASSIFICATION	// Check superclass. //Make sure this class does not extend or reference non-ArgoUML classes
WITHOUT_CLASSIFICATION	// Enumerate methods // Enumerate method arguments
WITHOUT_CLASSIFICATION	// Not currently present as token in Model.getFacade(). // NIF: runTruthTest(Model.getFacade().isAElement(o), //                   Model.getFacade().ELEMENT); // NIF: runTruthTest(Model.getFacade().isAExpression(o), //           Model.getFacade().EXPRESSION); // NIF: runTruthTest(Model.getFacade().isAExtensionPoint(o), //           Model.getFacade().EXTENSION_POINT); // NIF: runTruthTest(Model.getFacade().isAFeature(o), //                   Model.getFacade().FEATURE);
WITHOUT_CLASSIFICATION	// NIF: runTruthTest(Model.getFacade().isAInteraction(o), //           Model.getFacade().INTERACTION);
WITHOUT_CLASSIFICATION	// NIF: unTruthTest(Model.getFacade().isAMethod(o), //	Model.getMetaTypes().getMethod());
WITHOUT_CLASSIFICATION	//	runTruthTest(Model.getFacade().isARelationship(o), //	        Model.getMetaTypes().getRelationship());
WITHOUT_CLASSIFICATION	// NIF: runTruthTest(Model.getFacade().isAStructuralFeature(o), //          Model.getMetaTypes().getStructuralFeature()); // NIF: runTruthTest(Model.getFacade().isATaggedValue(o), //          Model.getMetaTypes().getTaggedValue());
WITHOUT_CLASSIFICATION	// Call methods that exists for all objects and that always return // something meaningful
WITHOUT_CLASSIFICATION	// Call methods that exists for all objects and that always return // something meaningful
WITHOUT_CLASSIFICATION	// Multiplicity, MultiplicityRange, and all Expression subtypes // don't have 0-argument create methods, so we special case them.
WITHOUT_CLASSIFICATION	// Find the create method in the offical API
WITHOUT_CLASSIFICATION	// Now get the factory implementation method to be invoked
WITHOUT_CLASSIFICATION	// Here it is another object sent to the test.
WITHOUT_CLASSIFICATION	// Here it is another object sent to the test.
WITHOUT_CLASSIFICATION	// abstract
WITHOUT_CLASSIFICATION	// abstract
WITHOUT_CLASSIFICATION	// abstract
WITHOUT_CLASSIFICATION	// Make sure we start off clean
WITHOUT_CLASSIFICATION	// Delete the model and make sure everything inside goes with it
WITHOUT_CLASSIFICATION	// The association should have same namespace as from class
WITHOUT_CLASSIFICATION	// Only one end should be navigable
WITHOUT_CLASSIFICATION	//        "UseCaseInstance",  // Gone in UML 2.x & unused by ArgoUML
WITHOUT_CLASSIFICATION	// Set namespace so buildAssocationRole works
WITHOUT_CLASSIFICATION	// Correct Exception was thrown.
WITHOUT_CLASSIFICATION	// Correct Exception was thrown.
WITHOUT_CLASSIFICATION	// Correct Exception was thrown.
WITHOUT_CLASSIFICATION	// Correct Exception was thrown.
WITHOUT_CLASSIFICATION	// Build an activity graph with a single action state // the way the GUI would
WITHOUT_CLASSIFICATION	// This is a private method in Model.
WITHOUT_CLASSIFICATION	// Handling methods that doesn't return
WITHOUT_CLASSIFICATION	// Handling the isInitiated method
WITHOUT_CLASSIFICATION	// Handling the initialise method
WITHOUT_CLASSIFICATION	// Handle methods which return opaque objects
WITHOUT_CLASSIFICATION	// one of the expected errors, just ignore
WITHOUT_CLASSIFICATION	// Could not find model.
WITHOUT_CLASSIFICATION	// Could not find model.
WITHOUT_CLASSIFICATION	// Handle UML 1.4 metamodel which is a MOF 1.3 model
WITHOUT_CLASSIFICATION	/*     * Get a node's name along with the name of its parent (which we'll use to     * find the factory to create it with.     */
WITHOUT_CLASSIFICATION	// UML 1.4
WITHOUT_CLASSIFICATION	// UML 2.x
WITHOUT_CLASSIFICATION	// XMI 2.1
WITHOUT_CLASSIFICATION	// XMI 1.1
WITHOUT_CLASSIFICATION	// Remap specific classes
WITHOUT_CLASSIFICATION	// Only remap package if we didn't remap specific class
WITHOUT_CLASSIFICATION	/*         * The following UML 1.4 elements have been removed from UML 2.x, so we         * don't bother testing them.         */
WITHOUT_CLASSIFICATION	/*         * A few of our factories are slightly different than as declared in the         * UML 1.4 metamodel, so we remap them here.  <metamodel, argouml>         */
WITHOUT_CLASSIFICATION	// Packages to be remapped
WITHOUT_CLASSIFICATION	/*         * For those things which we've already migrated to UML 2.x syntax         * we need to map them back to their UML 1.4 equivalents during the         * migration period.         */
WITHOUT_CLASSIFICATION	// Subsystem has been removed from UML 2.x
WITHOUT_CLASSIFICATION	/* TRY THE ACTIONS */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// abstract
WITHOUT_CLASSIFICATION	// abstract
WITHOUT_CLASSIFICATION	// This is the XMI version used to encode the metamodel.  We could // parse deeper to pull out the actual UML version.  The UML 1.4 // version is at XMI/XMI.header/XMI.model[@xmi.version].  The UML 2.1.1 // metamodel doesn't actually seem to contain its version.
WITHOUT_CLASSIFICATION	// Because UML 1.4 & 2.1 metamodels are organized differently we need // to traverse the hierarchy looking for our owning Package.
WITHOUT_CLASSIFICATION	// Specific classes to be remapped //      remap.put("", "");
WITHOUT_CLASSIFICATION	// Go the other way to lookup an element by path 
WITHOUT_CLASSIFICATION	// ...
WITHOUT_CLASSIFICATION	// ...
WITHOUT_CLASSIFICATION	// ...
WITHOUT_CLASSIFICATION	// ActivityGraphs
WITHOUT_CLASSIFICATION	// Instance (in UML 1.4) and Classifier are abstract and not tested
WITHOUT_CLASSIFICATION	/*         *  Extend, Include, UseCaseInstance & ExtensionPoint not implemented         */
WITHOUT_CLASSIFICATION	//        assertNotNull(Model.getUmlFactory().buildNode( //                Model.getMetaTypes().getExtend())); //        assertNotNull(Model.getUmlFactory().buildNode( //                Model.getMetaTypes().getInclude())); //        assertNotNull(Model.getUmlFactory().buildNode( //                Model.getMetaTypes().getUseCaseInstance())); //        assertNotNull(Model.getUmlFactory().buildNode( //                Model.getMetaTypes().getExtensionPoint())); // ...
WITHOUT_CLASSIFICATION	/*         * State is concrete in UML 1.3, but becomes abstract in UML 1.4, so we         * never allow it to be created (and don't test creation)         */
WITHOUT_CLASSIFICATION	//        new InitProfileSubsystem().init();   
WITHOUT_CLASSIFICATION	// This should work now that they both have names
WITHOUT_CLASSIFICATION	/*                     * this call could easily fall if there is e.g. no public                     * default constructor. If it fails tweak the if/else tree                     * above to accommodate the parameter or check if we need to                     * test the particular method at all.                     */
WITHOUT_CLASSIFICATION	// If method not supported ignore failure
WITHOUT_CLASSIFICATION	// Fine!
WITHOUT_CLASSIFICATION	// Fine!
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	//        assertNotNull(Model.getUmlFactory().buildNode( //                Model.getMetaTypes().getState()));
WITHOUT_CLASSIFICATION	// CommonBehaviorFactory // DataTypesFactory // ExtensionMechanismsFactory // ModelManagementFactory
WITHOUT_CLASSIFICATION	// set up all parameters. Some methods are invoked with // primitives or collections, so we need to create them // accordingly
WITHOUT_CLASSIFICATION	// The following should fail
WITHOUT_CLASSIFICATION	// and leave things unchanged
WITHOUT_CLASSIFICATION	// This one should work except Java is not registered by default //        assertTrue(settings.setNotationLanguage("Java")); //        assertEquals("Java", settings.getNotationLanguage());
WITHOUT_CLASSIFICATION	//        NotationProviderFactory2.getInstance().addNotationProvider(1234,  //                name, MyNP.class); //        NotationProvider notationProvider = //            NotationProviderFactory2.getInstance().getNotationProvider( //                    1234, new Object()); //        assertTrue("Test notation provider for 1234 not found",  //                notationProvider != null);
WITHOUT_CLASSIFICATION	/*         * Constructor.         */
WITHOUT_CLASSIFICATION	/*         * Constructor.         *           * @param me an Object         */
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	// reuse signal event:
WITHOUT_CLASSIFICATION	// reuse call event:
WITHOUT_CLASSIFICATION	// reuse time event:
WITHOUT_CLASSIFICATION	// reuse change event:
WITHOUT_CLASSIFICATION	// try creating a string from the generated modelelements:
WITHOUT_CLASSIFICATION	//try creating a TimeEvent
WITHOUT_CLASSIFICATION	//try changing the triggertype to ChangeEvent
WITHOUT_CLASSIFICATION	// nested class:
WITHOUT_CLASSIFICATION	// nested class:
WITHOUT_CLASSIFICATION	/* No need to check any further if we fail the 1st part. */
WITHOUT_CLASSIFICATION	/* START TESTING STUFF */
WITHOUT_CLASSIFICATION	/* TRY MOVING IN A SIMPLE MANER */
WITHOUT_CLASSIFICATION	/* TRY SOME ERRORS */
WITHOUT_CLASSIFICATION	// For a Transition use indirection through source StateVertex
WITHOUT_CLASSIFICATION	// If we can't find a model, return the outermost // containing model element
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	// This swaps the direction of m3:
WITHOUT_CLASSIFICATION	// This swaps the direction of m3 back: // the colon is obliged, but the / not and the 2nd dot also not
WITHOUT_CLASSIFICATION	// Notation allows to add or modify things, not remove. // Hence, this does nothing:
WITHOUT_CLASSIFICATION	// The expected exception is thrown.
WITHOUT_CLASSIFICATION	/* Both diagram types shall show sequence numbers when requested: */
WITHOUT_CLASSIFICATION	/* But the collaboration diagram refuses to leave them out: */
WITHOUT_CLASSIFICATION	/* If the message has a name, but no action, then show the name: */
WITHOUT_CLASSIFICATION	/* If a message has a name and a named operation,         * then show the operation: */
WITHOUT_CLASSIFICATION	/* If a message has a name and a named operation and a script,         * then show the script: */
WITHOUT_CLASSIFICATION	/* TODO: Should there really be () here? */
WITHOUT_CLASSIFICATION	/* If a message has a name and a named operation and an empty script,         * then show the operation: */
WITHOUT_CLASSIFICATION	/* If a message has a name and a named operation          * and an expression with no script,         * then show the operation: */
WITHOUT_CLASSIFICATION	/* If a message has a name and a named operation          * and a named script with parameters,         * then show the script: */
WITHOUT_CLASSIFICATION	/* TODO: Why is there a space before the ( here,          * and not in case of the operation name? */
WITHOUT_CLASSIFICATION	/* The action still has the argument from above. */
WITHOUT_CLASSIFICATION	/* If a message has a name and a named operation          * and a script with parameters but without name,         * then show the operation name: */
WITHOUT_CLASSIFICATION	//this is not a very useful transition
WITHOUT_CLASSIFICATION	/* One of everything */
WITHOUT_CLASSIFICATION	/* Upper / Lower case */
WITHOUT_CLASSIFICATION	/* Mixed case */
WITHOUT_CLASSIFICATION	/* A complex internal transition */
WITHOUT_CLASSIFICATION	/* These are NOT entry/exit/do activities! */
WITHOUT_CLASSIFICATION	/* Long list of internals */
WITHOUT_CLASSIFICATION	// or should the 1 be 0 ?
WITHOUT_CLASSIFICATION	// deleting it all
WITHOUT_CLASSIFICATION	// we want the b: Foo attribute, that is the second in the list
WITHOUT_CLASSIFICATION	/* If there is no script, then the language should not be maintained. */
WITHOUT_CLASSIFICATION	//ok
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// Success - expected exception
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	// Create file
WITHOUT_CLASSIFICATION	// This is the normal case.
WITHOUT_CLASSIFICATION	// Load a project which contains links to it
WITHOUT_CLASSIFICATION	// test project readable files
WITHOUT_CLASSIFICATION	// Standard UML 1.4 profile
WITHOUT_CLASSIFICATION	// Create a default profile and record its contents
WITHOUT_CLASSIFICATION	// Write the profile out to a temp file
WITHOUT_CLASSIFICATION	// Read it back in to a new empty project
WITHOUT_CLASSIFICATION	// Clean up our two models and the extent that we read profile in to
WITHOUT_CLASSIFICATION	// setting up the dependent profile creation
WITHOUT_CLASSIFICATION	// actual call that executes everything
WITHOUT_CLASSIFICATION	// verifications
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// TODO: the following cleans up left overs from previous tests, but, // preferably we shouldn't have to do this...
WITHOUT_CLASSIFICATION	// create profile model
WITHOUT_CLASSIFICATION	// create profile model
WITHOUT_CLASSIFICATION	// save the profile into a xmi file
WITHOUT_CLASSIFICATION	// save the profile into a xmi file
WITHOUT_CLASSIFICATION	// Called during teardown
WITHOUT_CLASSIFICATION	// Called during teardown
WITHOUT_CLASSIFICATION	// remove leftovers from other tests
WITHOUT_CLASSIFICATION	// TODO: User defined profile support untested currently //        + "\t\t<userDefined>\n" //        + "\t\t\t<filename>\n" //        + "foo.profile\n" //        + "</filename>\n" //        + "\t\t\t<model>\n" //        + "foo.profile.package\n" //        + "\t\t\t</model>\n" //        + "\t\t</userDefined>\n"
WITHOUT_CLASSIFICATION	// There seems to be cases where we don't erase the profile. // Let's make sure it is deleted.        
WITHOUT_CLASSIFICATION	// [euluis] Using Windows style initial path, don't know if this fails  // in *nixes.
WITHOUT_CLASSIFICATION	// ensure that model subsystem implementation doesn't remember the // profiles by changing their names and directories
WITHOUT_CLASSIFICATION	// but, lookout, it doesn't work both ways
WITHOUT_CLASSIFICATION	//        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi, //                "x.oclIsKindOf(Classifier)"), true);               
WITHOUT_CLASSIFICATION	// on a headless system (without display) this will crash
WITHOUT_CLASSIFICATION	// private JPanel propertyPane;
WITHOUT_CLASSIFICATION	// contains instances of each modelelement // used for testing so that we only use each modelelement // once
WITHOUT_CLASSIFICATION	// propertyPane = /*TabProps */
WITHOUT_CLASSIFICATION	//            theDetailsPane.getNamedTab(Translator.localize("tab.properties"));
WITHOUT_CLASSIFICATION	// currently this is in this try block as it does not work // _propertyPanel always has size 0,0
WITHOUT_CLASSIFICATION	// ProjectBrowser exposes functionality, not components. //	assertNotNull(pb.getTabProps()); //	assertNotNull(pb.getStatusBar());
WITHOUT_CLASSIFICATION	// Make sure this test happens on the AWT event thread
WITHOUT_CLASSIFICATION	//        JPanel docPane = pane.getTab(TabDocumentation.class);
WITHOUT_CLASSIFICATION	// The target list is empty, re-emptying it again  // should not generate any events:
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// new target is of type object, refresh should not be called
WITHOUT_CLASSIFICATION	/*         * commented out next piece to remove failure of testcase. The testcase         * is probably correct but the implementation of DetailsPane is not        pane.getTabs().setSelectedComponent(docPane);        pane.targetSet(e);        assertEquals(docPane, pane.getTabs().getSelectedComponent());        */
WITHOUT_CLASSIFICATION	// new target is a fig, refresh should be called
WITHOUT_CLASSIFICATION	// Setting one target should generate one event:
WITHOUT_CLASSIFICATION	// new target is of type UMLClassDiagram, refresh should not be called
WITHOUT_CLASSIFICATION	// TODO: We could check that the contents of the files differ.
WITHOUT_CLASSIFICATION	// new target is a modelelement, refresh should not be called
WITHOUT_CLASSIFICATION	//testing with subset of targets
WITHOUT_CLASSIFICATION	// set same target again should not generate new events:
WITHOUT_CLASSIFICATION	//TabProps gets selected! //So, 2nd time right
WITHOUT_CLASSIFICATION	// adding same targets list again should not generate new events:
WITHOUT_CLASSIFICATION	// adding same target again should not generate new events:
WITHOUT_CLASSIFICATION	//reverse order
WITHOUT_CLASSIFICATION	// now remove one target by setting subset:
WITHOUT_CLASSIFICATION	// TODO: the following fails due to the XMI writing saving all top level // model elements and because even if there was no empty project, by // creating a class, the undo mechanism in the project manager will // force the creation of an empty project. //        assertEquals(1, profileModels.size());
WITHOUT_CLASSIFICATION	// NOTE: we have to do this due to leftovers from other tests // being causing strange errors when running in Eclipse.
WITHOUT_CLASSIFICATION	// all tests should consider the threshold as inclusive value
WITHOUT_CLASSIFICATION	// this test is a bit stupid, but nevertheless...
WITHOUT_CLASSIFICATION	// {A, A} are offenders
WITHOUT_CLASSIFICATION	// everything ok
WITHOUT_CLASSIFICATION	// everything ok
WITHOUT_CLASSIFICATION	// same name, same participants, two offenders
WITHOUT_CLASSIFICATION	// same name, different classes, everything ok
WITHOUT_CLASSIFICATION	// same name, different classes, everything ok
WITHOUT_CLASSIFICATION	// same name, same participants, two offenders
WITHOUT_CLASSIFICATION	// {A,A,B,B} are offenders
WITHOUT_CLASSIFICATION	// {} no offenders
WITHOUT_CLASSIFICATION	// simply create 3 usecases and an actor in a package with individual names
WITHOUT_CLASSIFICATION	// generalizations are not required to have unique names within a // namespace
WITHOUT_CLASSIFICATION	// All use cases and actors require associations // hence all predicates evalulate to true
WITHOUT_CLASSIFICATION	// build association // build association between actor and top use case.
WITHOUT_CLASSIFICATION	// test for return parameters. they can ALSO fail!
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// Arbitrary settings - not used used for testing
WITHOUT_CLASSIFICATION	// Arbitrary settings - not used used for testing
WITHOUT_CLASSIFICATION	// the graph should stay the same.
WITHOUT_CLASSIFICATION	// build extend // these parameters seem to be in correct order // add an extend. We do not need an assoc on the extending use case
WITHOUT_CLASSIFICATION	// build include // it seems that the parameters for build include are just the other way // round // add an include: we do not need to have associtions on one
WITHOUT_CLASSIFICATION	// setup
WITHOUT_CLASSIFICATION	// Handle the simple cases // Anything very exotic will fail, but that will be our clue // that the test needs to be extended
WITHOUT_CLASSIFICATION	// real test
WITHOUT_CLASSIFICATION	// Some arbitrary bounds and settings - unused in test
WITHOUT_CLASSIFICATION	// Make sure everything created gets deleted
WITHOUT_CLASSIFICATION	/*         * This needs to be a concrete metatype, so we can't use         * the general, but abstract, Classifier.  Replace with its         * concrete subtypes.         */
WITHOUT_CLASSIFICATION	/*         * This needs to be a concrete metatype, so we can't use         * the general, but abstract, Classifier.  Replace with its         * concrete subtypes.         */
WITHOUT_CLASSIFICATION	// setup the Project due to its use in SourcePathTableModel ctor
WITHOUT_CLASSIFICATION	// create a class model element
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see AbstractTestActionAddDiagram#getValidNamespaceClasses()     */
WITHOUT_CLASSIFICATION	/*     * @see TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// save the project
WITHOUT_CLASSIFICATION	// Tests used to be coded to assume immediate event delivery. // They've been modified to use flush() where needed. - tfm //oldEventPolicy = MFactoryImpl.getEventPolicy(); //MFactoryImpl.setEventPolicy(MFactoryImpl.EVENT_POLICY_IMMEDIATE);
WITHOUT_CLASSIFICATION	// Return a package to use as the Namespace.
WITHOUT_CLASSIFICATION	// restore original event policy - not supported by MDR - tfm //MFactoryImpl.setEventPolicy(oldEventPolicy);
WITHOUT_CLASSIFICATION	//        assertNotNull(actionSupplier.getValue(Action.SMALL_ICON));
WITHOUT_CLASSIFICATION	//cont.setTarget(elem);
WITHOUT_CLASSIFICATION	// Testing with more than one, since it failed with a manual test I  // made.
WITHOUT_CLASSIFICATION	//        assertNotNull(actionClient.getValue(Action.SMALL_ICON));
WITHOUT_CLASSIFICATION	// The following will bring up a dialog box, so can't be run headless //        actionSupplier.actionPerformed(new ActionEvent(this, 0, "foo"));
WITHOUT_CLASSIFICATION	// The following will bring up a dialog box, so can't be run headless //        actionClient.actionPerformed(new ActionEvent(this, 0, "foo"));
WITHOUT_CLASSIFICATION	// create a new empty project
WITHOUT_CLASSIFICATION	// Inconclusive
WITHOUT_CLASSIFICATION	// Inconclusive
WITHOUT_CLASSIFICATION	// setup a user defined profile which isn't loaded by the model // subsystem and contains a stereotype and this contains a // tag definition
WITHOUT_CLASSIFICATION	// add the profile stereotype to the class
WITHOUT_CLASSIFICATION	// add the profile to the project configuration
WITHOUT_CLASSIFICATION	// This works when running the test from within Eclipse. // Apparently Eclipse runs the tests using a class-loader that // has the tests Folder among the URL:s.
WITHOUT_CLASSIFICATION	// create a class in the project model
WITHOUT_CLASSIFICATION	// check that the tag definition is returned by // {@link UMLTagDefinitionComboBoxModel#getApplicableTagDefinitions(Object)}
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	// If no project was entered on the command line, // try to reload the most recent project if that option is true
WITHOUT_CLASSIFICATION	// Set the screen layout to what the user left it before, or // to reasonable defaults.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// case 4 // erase it
WITHOUT_CLASSIFICATION	//////////////// // event handlers
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeModel implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeModel implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ToDoListListener implementation
WITHOUT_CLASSIFICATION	// case 1 // after(...)
WITHOUT_CLASSIFICATION	// initialize the model and profile subsystems to simulate a fresh  // ArgoUML session
WITHOUT_CLASSIFICATION	// We have the path provided from the build script.
WITHOUT_CLASSIFICATION	// Check the localized parts.
WITHOUT_CLASSIFICATION	// Wait for all Model subsystem events to be delivered
WITHOUT_CLASSIFICATION	// Wait for all AWT events to be dispatched and processed
WITHOUT_CLASSIFICATION	// Check here if there are no incoming call actions // if not then create an activation at the top of the lifeline
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// if save did not raise an exception // and name+"#" exists move name+"#" to name+"~" // this is the correct backup file
WITHOUT_CLASSIFICATION	//      calcBounds();
WITHOUT_CLASSIFICATION	// For classifiers
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// This is null as until // the first stereotype declaration is seen. // After that it is non-null.
WITHOUT_CLASSIFICATION	//newOp.setOwnerScope(op.getOwnerScope()); // //not needed in case of operation
WITHOUT_CLASSIFICATION	// includes the "/" // the "seq_expr" from the header javadoc // the ":" is not included in "number" - it is always present
WITHOUT_CLASSIFICATION	//                Model.getExtensionMechanismsFactory().buildTaggedValue( //                        tagName, new String[] {"true"}, Model.getFacade().getRoot(umlObject));
WITHOUT_CLASSIFICATION	// MClassifiers // cannot be Bag
WITHOUT_CLASSIFICATION	// If the model repository doesn't manage a DI model // then we must generate our Figs by inspecting PGML
WITHOUT_CLASSIFICATION	// Read xsltStream into a temporary file // Get url for temp file. // openStream from url and wrap in StreamSource
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	// if the object does not have a name, // than no problem
WITHOUT_CLASSIFICATION	// tree // value // isSelected	(dont want a colored background) // isExpanded // isLeaf // row	(not important for rendering) // hasFocus (dont want a focus rectangle)
WITHOUT_CLASSIFICATION	// If we don't have it, find the trigger. If this fails it will keep // its default value of null
WITHOUT_CLASSIFICATION	//@Override //public final void setHeadline(String s) { //setupHeadAndDesc(); //}
WITHOUT_CLASSIFICATION	// We need to find the stereotype with the name // "create" and the base class BehavioralFeature in // the model. If there is none then we create one and // put it there.
WITHOUT_CLASSIFICATION	// first element is e.g. the class, but we need to have its namespace // to recompute the offenders.
WITHOUT_CLASSIFICATION	//- RedrawManager.unlock(); //- _redrawer.repairDamage();
WITHOUT_CLASSIFICATION	// if this composite state is not attached to a statemachine // it is not the toplevel composite state.
WITHOUT_CLASSIFICATION	// Get the assocations and connections. No problem (there is a separate // critic) if this is a binary association or is an association role.
WITHOUT_CLASSIFICATION	// If this was an association then there will be relevant // information to fetch out of the mode arguments.  If it // not an association then these will be passed forward // harmlessly as null.
WITHOUT_CLASSIFICATION	// find selected rows and make a list of the model elements // that are selected
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeCellRenderer implementation
WITHOUT_CLASSIFICATION	// Build namespace hierarchy like this: //   g     a //         /\ //        b  c //           /\ //          d  e f
WITHOUT_CLASSIFICATION	//    private Property	prpTodo; //    private Property	prpProperties; //    private Property	prpDocumentation; //    private Property	prpStyle; //    private Property	prpSource; //    private Property	prpConstraints; //    private Property	prpTaggedValues;
WITHOUT_CLASSIFICATION	// always fire changes in the case something has changed in the // composition of the taggedValues collection.
WITHOUT_CLASSIFICATION	// Build up an array list of the heights of each label/component pair. // Heights of zero indicate a proportional height.
WITHOUT_CLASSIFICATION	//            CmdPaste cmd = new CmdPaste(); //            cmd.doIt();
WITHOUT_CLASSIFICATION	// stereotypes applied to the target mostly control which TDs // (but see below for other listeners too)
WITHOUT_CLASSIFICATION	// TODO: Add referenceValue for tagged values  // which have a non-primitive type
WITHOUT_CLASSIFICATION	// add a decision but set the critic priority to 0 so isRelevant // should still be false
WITHOUT_CLASSIFICATION	//TODO: We should also test that the object //have been removed from their namespace. //Collection c = Model.getFacade().getOwnedElements(p.getRoot());
WITHOUT_CLASSIFICATION	// Because the notation events get dispatched on the Swing // event thread, we need to use invokeAndWait to make sure that we // don't return until they've been delivered
WITHOUT_CLASSIFICATION	// Parent is Element, but it has no attributes or associations to check // checkElementCopy(e1, e2);
WITHOUT_CLASSIFICATION	// Extra careful now, not to keep any references to the // second argument.
WITHOUT_CLASSIFICATION	// Auto-create a return message for a call message
WITHOUT_CLASSIFICATION	// get the source of the return message
WITHOUT_CLASSIFICATION	// get the dest of the return message
WITHOUT_CLASSIFICATION	//            GridBagConstraints gridBagConstraints3 = new GridBagConstraints(); //            gridBagConstraints3.gridx = 2; //            gridBagConstraints3.anchor = GridBagConstraints.NORTHWEST; //            gridBagConstraints3.insets = new Insets(5, 5, 0, 0); //            gridBagConstraints3.gridy = 3; //            GridBagConstraints gridBagConstraints2 = new GridBagConstraints(); //            gridBagConstraints2.gridx = 0; //            gridBagConstraints2.anchor = GridBagConstraints.NORTHWEST; //            gridBagConstraints2.insets = new Insets(5, 5, 0, 0); //            gridBagConstraints2.gridy = 3;
WITHOUT_CLASSIFICATION	//            Fig spf = null; //            Fig dpf = null; //            FigNode sfn = null; //            FigNode dfn = null;
WITHOUT_CLASSIFICATION	// If the event originated from the window w/glass pane, consume  // the event
WITHOUT_CLASSIFICATION	// Add GUI-internal stuff. // GUI-internal stuff is panes, tabs, menu items that are // part of the GUI subsystem i.e. a class in the // org.argouml.ui-package. // Things that are not part of the GUI, like everything that // has any knowledge about UML, Diagrams, Code Generation,  // Reverse Engineering, creates and registers itself // when that subsystem or module is loaded.
WITHOUT_CLASSIFICATION	// The workarea is all the visible space except the menu, // toolbar and status bar.  Workarea is laid out as a // BorderSplitPane where the various components that make up // the argo application can be positioned.
WITHOUT_CLASSIFICATION	// iterate through the tabbed panels to determine whether they // should be enabled.
WITHOUT_CLASSIFICATION	// Always select properties panel if defaultToProperties is true, // and if properties panel is appropriate for selected perspective
WITHOUT_CLASSIFICATION	//        tabs.addTab(Translator.localize("dialog.find.tab.name-and-location"), //                nameLocTab);
WITHOUT_CLASSIFICATION	//_tableModel.setTarget(_target); //_table.setModel(_tableModel);
WITHOUT_CLASSIFICATION	// if the current shortcut has not been set, then the actual // shortcut value is the default one
WITHOUT_CLASSIFICATION	// if the user cancelled the operation, // we don't have to save anything
WITHOUT_CLASSIFICATION	// create the return message modelelement with the interaction // and the collaboration
WITHOUT_CLASSIFICATION	// Generate and register the OSXAdapter, passing the methods // we wish to use as delegates for various // com.apple.eawt.ApplicationListener methods
WITHOUT_CLASSIFICATION	// TODO: no Links in UML 2
WITHOUT_CLASSIFICATION	// nothing we can do about veto, so just ignore it
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handling
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // Fig accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers - MouseListener implementation
WITHOUT_CLASSIFICATION	// the UML object // wrong end of the edge
WITHOUT_CLASSIFICATION	// We are going to add the ones still valid & new ones // in the right sequence:
WITHOUT_CLASSIFICATION	// This is perfectly normal and happens among other things // within the call to setDiagram (below).
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // events
WITHOUT_CLASSIFICATION	// if the new edge implements the MouseListener // interface it has to receive the mouseReleased() event
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // user feedback
WITHOUT_CLASSIFICATION	// needs to be updated for changes in Notation subsystem - tfm //            String nameStr = Notation.generate(this, getOwner()).trim(); //            getNameFig().setText(nameStr);
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // GraphFactory implementation
WITHOUT_CLASSIFICATION	// adapted from SelectionWButtons from line 280 // calls a helper method to avoid this edge disappearing // if the new source and dest are the same node.
WITHOUT_CLASSIFICATION	// Give up if we are already on the graph. This is a bit inconistent // with canAddNode above.
WITHOUT_CLASSIFICATION	// Link the new extend relationship in to the ends. Remember we // draw from the extension use case to the base use case.
WITHOUT_CLASSIFICATION	// TODO: This is using the default platform character encoding // specifying an encoding will produce more predictable results
WITHOUT_CLASSIFICATION	// Check against "" is needed for backward // compatibility.  Don't remove without // checking subclasses and warning downstream // developers - tfm - 20081211
WITHOUT_CLASSIFICATION	// next line does give user.home back but this is not // compliant with how the project.uri works and therefore // open and save project as give different starting // directories.  String directory = // Globals.getLastDirectory();
WITHOUT_CLASSIFICATION	// Correct the activator value
WITHOUT_CLASSIFICATION	// We know this is a return action now. It must be pointing the // opposite way to the activator.
WITHOUT_CLASSIFICATION	// Java SE 6 has a native GIF writer, but it's not in Java 5.  One // is available in the JAI-ImageIO library, but we don't currently // bundle that and at 6+ MB it seems like a heavyweight solution, but // I don't have time to produce a stripped down version right now - tfm // https://jai-imageio.dev.java.net/
WITHOUT_CLASSIFICATION	// we don't want to show some nasty gray background // color, now do we?
WITHOUT_CLASSIFICATION	// Although we've historically written out the DOCTYPE, the DTD doesn't // actually exist and this line will get stripped by the .uml file // persister //        + "<!DOCTYPE profile SYSTEM \"profile.dtd\" >\n"
WITHOUT_CLASSIFICATION	// check that the tag definition is returned by // {@link UMLTagDefinitionComboBoxModel#getApplicableTagDefinitions(Object)}
WITHOUT_CLASSIFICATION	// TODO real numbers not yet supported //assertEquals(DefaultOclEvaluator.getInstance() //.evaluate(null, null, "1.5"), 1.5);
WITHOUT_CLASSIFICATION	// REMEMBER to change this if you change the number of MEs with source // path settings
WITHOUT_CLASSIFICATION	// put the x at the right side of the activation if needed
WITHOUT_CLASSIFICATION	// Make sure there is the minimum gap above the message being drawn
WITHOUT_CLASSIFICATION	// Make sure there is the minimum gap below the message being drawn
WITHOUT_CLASSIFICATION	// The FigMessage that triggered this FigActivation into existence
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	// This module will still register as enabled for UML1.4 but it won't // actually do anything.
WITHOUT_CLASSIFICATION	// Get the region as the first Region in the State. // If there is no region in the StateMachine then create one.
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// Create the layer
WITHOUT_CLASSIFICATION	// Create the renderer
WITHOUT_CLASSIFICATION	// If we're not provided a namespace then get it from the diagram or // the root
WITHOUT_CLASSIFICATION	// Link the previous/next reference of the swimlanes // according to the x order.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // GraphModel implementation
WITHOUT_CLASSIFICATION	// make space for the clarifier // for vertical symmetry // margin between text and border
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // MutableGraphModel implementation
WITHOUT_CLASSIFICATION	//////////////// // actions for toolbar
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // VetoableChangeListener implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // contructors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event processing
WITHOUT_CLASSIFICATION	// The purpose of this method is not explained and it give give // NPE depending on z order of figs as they are read. For now // ignore if null but for future lets delete this.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // Fig accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // fig accessors
WITHOUT_CLASSIFICATION	// can't have a connection between 2 interfaces: // get the 'other' end type
WITHOUT_CLASSIFICATION	// If there's only a single child (and we're it's only parent), // set a hint for where to place it when we get to its row
WITHOUT_CLASSIFICATION	// Use "aSize" to build up the minimum size. Start with the size of the // name fig and build up.
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	// if we are the dest and is a call action, create the  // activation, but don't add it until the height is set.
WITHOUT_CLASSIFICATION	// if we are the dest and is a call action, create the  // activation, but don't add it until the height is set.
WITHOUT_CLASSIFICATION	// if we are the destination of a create action, // create the entire activation
WITHOUT_CLASSIFICATION	// if we are the target of a destroy action // the figlifeline ends here and we add the activation
WITHOUT_CLASSIFICATION	// if we are the source of a return action // the activation ends here.
WITHOUT_CLASSIFICATION	// If we have a currentAct object that means have reached the end // of the lifeline with a call or a create not returned. // Add the activation to the list after setting its height to end // at the end of the lifeline.
WITHOUT_CLASSIFICATION	// we do nothing. No call to the parent
WITHOUT_CLASSIFICATION	// we don't recalculate activations, just move them
WITHOUT_CLASSIFICATION	// if is a classifier role, it must return all the related messages.
WITHOUT_CLASSIFICATION	// if is a message, it must return the sender // and the receiver of the message.
WITHOUT_CLASSIFICATION	// Comments from anywhere in the model are allowed
WITHOUT_CLASSIFICATION	// All other types of elements must be in this namespace
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// we initialize the coordinates.
WITHOUT_CLASSIFICATION	// we do nothing
WITHOUT_CLASSIFICATION	// manage if cursor x is less than lastX1 
WITHOUT_CLASSIFICATION	// manage if cursor x is more than lastX2 
WITHOUT_CLASSIFICATION	// manage changes of direction...
WITHOUT_CLASSIFICATION	// I have no direction yet
WITHOUT_CLASSIFICATION	// we move down or up the messages that are downward the broom
WITHOUT_CLASSIFICATION	// we recalculate all the activations
WITHOUT_CLASSIFICATION	// we draw a cross
WITHOUT_CLASSIFICATION	// we don't let the user move the messages horizontally.
WITHOUT_CLASSIFICATION	// if the edge is near the bottom of the classifier roles, // we enlarge all the FigClassifierRoles in the diagram.
WITHOUT_CLASSIFICATION	//super(Model.getFacade().getName(op), null);
WITHOUT_CLASSIFICATION	// we need the edge to be complete
WITHOUT_CLASSIFICATION	// if the added edge is a Create Message it will affect the position // of the ClassifierRole so it should be repositioned
WITHOUT_CLASSIFICATION	// the initial x is the left side of the activation
WITHOUT_CLASSIFICATION	// the initial x is the left side of the activation
WITHOUT_CLASSIFICATION	// put the x at the right side of the activation if needed
WITHOUT_CLASSIFICATION	// if the y coordinate is before the classifier role y, // we place the start in the corner of the fighead.
WITHOUT_CLASSIFICATION	// if the y coordinate is inside the head, // the x must be in the border of the headFig.
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see     * org.argouml.uml.diagram.state.ui.FigStateVertex#initNotationProviders     * (java.lang.Object)     */
WITHOUT_CLASSIFICATION	// if the y coordinate is before the classifier role y, // we place the start in the corner of the fighead.
WITHOUT_CLASSIFICATION	// if the y coordinate is inside the head, // the x must be in the border of the headFig.
WITHOUT_CLASSIFICATION	/* Use a different notation as Messages on a collaboration diagram: */
WITHOUT_CLASSIFICATION	/* This next argument may be used to switch off     * the generation of sequence numbers - this is     * still to be implemented.     * They are less desired in sequence diagrams,     * since they do not add any information.     * In collaboration diagrams they are needed,     * and they are still optional in sequence diagrams. */
WITHOUT_CLASSIFICATION	// Operations ...
WITHOUT_CLASSIFICATION	//TODO: add logging, but this will never happen and is handled
WITHOUT_CLASSIFICATION	// If possible we determine this by checking the destination // and source Figs are the same. If this is not possible // because the edge is not yet connected then we check the // model.
WITHOUT_CLASSIFICATION	// we update the activations...
WITHOUT_CLASSIFICATION	// for performance, we check if this is a selfmessage // if it is, we have just updated the activations
WITHOUT_CLASSIFICATION	// This call seems not very robust. Yet to determine cause.
WITHOUT_CLASSIFICATION	// this constructor is needed for PGMLStackParser to load // saved diagrams. It does nothing, because  // PGMLStackParser will call setPoints later.
WITHOUT_CLASSIFICATION	// vertical resizing
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// This module will still register as enabled for UML1.4 but it won't // actually do anything.
WITHOUT_CLASSIFICATION	// Get the region as the first Region in the State. // If there is no region in the StateMachine then create one.
WITHOUT_CLASSIFICATION	// There are no regions so create one and place the vertex //there.
WITHOUT_CLASSIFICATION	// There are one or more regions so find the one that the //vertex was dropped in
WITHOUT_CLASSIFICATION	// The vertex was dropped onto the diagram. // Get the region as the first Region in the StateMachine. // If there is no region in the StateMachine then create one.
WITHOUT_CLASSIFICATION	/*     * @see     * org.argouml.uml.diagram.ui.FigNodeModelElement#removeFromDiagramImpl()     */
WITHOUT_CLASSIFICATION	// _x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// Create the layer
WITHOUT_CLASSIFICATION	// nothing we can do about veto, so just ignore it
WITHOUT_CLASSIFICATION	// Create the renderer
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	// in this event we do nothing, // only stop drawing the broom.
WITHOUT_CLASSIFICATION	// There is a bug in GEF where positioning nodes can affect // edge positions. We need to do 3 iterations to protect // against that.
WITHOUT_CLASSIFICATION	// 1. Remember current message paths
WITHOUT_CLASSIFICATION	// 2. Reposition and resize nodes
WITHOUT_CLASSIFICATION	// 3. Now reposition messages based on their original position
WITHOUT_CLASSIFICATION	// Compute the initial center position of the CR
WITHOUT_CLASSIFICATION	// horizontal resizing
WITHOUT_CLASSIFICATION	// Compute the final center position of the CR
WITHOUT_CLASSIFICATION	// Self messages act differently so it is needed to move them separetly. // Only self messages of selected CR should be horizontally translated.
WITHOUT_CLASSIFICATION	// Create the graph model
WITHOUT_CLASSIFICATION	// Y position of the new CR should match existing CRs Y position
WITHOUT_CLASSIFICATION	// Init the sequence diagrams from the module
WITHOUT_CLASSIFICATION	// debugging and looking at fig.headFig.figs[1]._currText  // I can see that it's working, but how to test it?       
WITHOUT_CLASSIFICATION	// Operations that work on elements:
WITHOUT_CLASSIFICATION	// Operations that work on classes of objects:
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//    Object getImportedPackage(Object element);
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//    Object getIncludingCase(Object handle);
WITHOUT_CLASSIFICATION	//////// Javadoc reviewed above this point - tfm /////////////
WITHOUT_CLASSIFICATION	//    Object getImportingNamespace(Object element);
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//Object createStereotype();
WITHOUT_CLASSIFICATION	/* Implementation Note:    * Unlike many of the interfaces to the model there is no control to force    * a single instance of an XmiReader. This is to allow work objects generated    * by the implementation to be garbage collected when an XmiReader instance    * falls out of scope.    */
WITHOUT_CLASSIFICATION	// ADiagramElementProperty delegate methods
WITHOUT_CLASSIFICATION	/*     * @see org.omg.uml.diagraminterchange.ADiagramElementProperty#add(     *         org.omg.uml.diagraminterchange.DiagramElement,     *         org.omg.uml.diagraminterchange.Property)     */
WITHOUT_CLASSIFICATION	/*     * @see org.omg.uml.diagraminterchange.ADiagramElementProperty#exists(     *         org.omg.uml.diagraminterchange.DiagramElement,     *         org.omg.uml.diagraminterchange.Property)     */
WITHOUT_CLASSIFICATION	/*     * @see org.omg.uml.diagraminterchange.ADiagramElementProperty#getProperty(     *         org.omg.uml.diagraminterchange.DiagramElement)     */
WITHOUT_CLASSIFICATION	//easy interface to properties
WITHOUT_CLASSIFICATION	// Here follows the interfaces that contain the enums of different // kinds in the UML meta-model.
WITHOUT_CLASSIFICATION	// Flow is not in UML 2.x - don't implement
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	//additional support for tagged values
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Here follows the interfaces that contain the enums of different // kinds in the UML meta-model.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // public methods
WITHOUT_CLASSIFICATION	/* end class UUIDManager */
WITHOUT_CLASSIFICATION	// Write out something for us to read back in
WITHOUT_CLASSIFICATION	// Now read it and check the results.
WITHOUT_CLASSIFICATION	// Create an empty file and try to read it
WITHOUT_CLASSIFICATION	// Depends on implementation: 
WITHOUT_CLASSIFICATION	// TODO: 
WITHOUT_CLASSIFICATION	//    /** //     * Construct an exception with a message and a causing exception. //     * //     * @param message the message //     * @param c the cause of the exception //     */ //    public XmiReferenceException(String message, Throwable c) { //        super(message, c); //    }
WITHOUT_CLASSIFICATION	// The netbeans SAXParser sets line number // and column number to -1.
WITHOUT_CLASSIFICATION	// The xerces SAXParser sets line number // and column number to 1.
WITHOUT_CLASSIFICATION	// Not true in general, but should be true for our test models
WITHOUT_CLASSIFICATION	// This throws  // org.argouml.model.XmiException: Unknown element in XMI file : Model // because the UML 1.3->1.4 converter can only handle XMI 1.0, not 1.1
WITHOUT_CLASSIFICATION	// TODO:
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// If the region is changed to another region then // we make sure that a delete event is not fired // as a result. //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	/* In this case, either the container was not set,         * or it was not contained in a statemachine.         */
WITHOUT_CLASSIFICATION	// The only way a region is set to null is if we're deleting // the vertex in which case we do nothing special so that // the removal of the state triggers a delete event.
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// TODO:
WITHOUT_CLASSIFICATION	// In UML a message could have an Action. In UML2 it never does.
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// No body found.
WITHOUT_CLASSIFICATION	// oops we already have the body
WITHOUT_CLASSIFICATION	//        return handle.stringValue();
WITHOUT_CLASSIFICATION	//        public Collection<Element> getExtendedElements(Object handle) {
WITHOUT_CLASSIFICATION	// For a Transition use indirection through source StateVertex
WITHOUT_CLASSIFICATION	// Gone from UML 2.x //        throw new NotImplementedException();
WITHOUT_CLASSIFICATION	// Get all the relationships, that this model element has. // and filter everything, that is not an import.
WITHOUT_CLASSIFICATION	// Can't be done in the general case of federated repositories, // but at least get what we can find for the current resource set
WITHOUT_CLASSIFICATION	// MultiplicityElement is now an interface implemented // by element types that support multiplicities - tfm
WITHOUT_CLASSIFICATION	// should be Element not EObject really
WITHOUT_CLASSIFICATION	/* Classifier powerType = */
WITHOUT_CLASSIFICATION	// TODO: Signal -> Receptions association not navigable in this // direction
WITHOUT_CLASSIFICATION	// in UML2, the tag definition is the attribute itself
WITHOUT_CLASSIFICATION	// usage differs from UML1
WITHOUT_CLASSIFICATION	// usage differs from UML1
WITHOUT_CLASSIFICATION	// Transitions can have multiple Triggers now
WITHOUT_CLASSIFICATION	// Gone in UML 2.x
WITHOUT_CLASSIFICATION	// ActionState, CallState, and SubactivityState have been replaced // in UML 2.0 by explicitly modeled Actions
WITHOUT_CLASSIFICATION	// TODO: Double check - tfm
WITHOUT_CLASSIFICATION	// TODO: gone in UML 2
WITHOUT_CLASSIFICATION	// TODO: Gone in UML 2
WITHOUT_CLASSIFICATION	// TODO: Double check - tfm
WITHOUT_CLASSIFICATION	// TODO: double check - tfm
WITHOUT_CLASSIFICATION	// below for UML 1.4 compatibility
WITHOUT_CLASSIFICATION	// TODO: double check - tfm
WITHOUT_CLASSIFICATION	// TODO: Changed from UML 1.4
WITHOUT_CLASSIFICATION	// TODO: gone in UML 2
WITHOUT_CLASSIFICATION	// TODO: changed for UML 2.x
WITHOUT_CLASSIFICATION	// TODO: gone from UML 2
WITHOUT_CLASSIFICATION	// has <<subsystem>> stereotype
WITHOUT_CLASSIFICATION	// TODO: Not exact, but close
WITHOUT_CLASSIFICATION	// && ((Action) handle).get
WITHOUT_CLASSIFICATION	// Not in UML2
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Even though this is not relevant for UML2 we have // code calling this that expects it for UML1.4 // and we must handle it gracefully.
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//        return ((RedefinableElement) handle).isRoot(); // TODO: One part of UML 2.1.1 spec says that this is as above, // but it appears to be gone - tfm
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//        lifeline.setRepresents(prop);
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// A composite state contains at least one region
WITHOUT_CLASSIFICATION	// an AssociationEnd is now a Property owned by an Association
WITHOUT_CLASSIFICATION	//        throw new NotImplementedException( //            "This is not a UML2 element"); //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// TODO: Exception has been removed for UML 2.x // just return Signal for now - tfm
WITHOUT_CLASSIFICATION	// Gone in UML 2.x - just Classifier now
WITHOUT_CLASSIFICATION	// TODO: Not really the same thing, but close
WITHOUT_CLASSIFICATION	// The name of the meta type is the class name (after the last .) // and before the "Impl" or end of class name.
WITHOUT_CLASSIFICATION	// TODO: Gone in UML 2.x // Return place holder for now
WITHOUT_CLASSIFICATION	// TODO: no separate SyncState in UML 2.1 - tfm
WITHOUT_CLASSIFICATION	/*ActionSequence.class*/
WITHOUT_CLASSIFICATION	/*ClassifierInState.class*/
WITHOUT_CLASSIFICATION	/*Argument.class*/
WITHOUT_CLASSIFICATION	/*AttributeLink.class*/
WITHOUT_CLASSIFICATION	/*UninterpretedAction.class*/
WITHOUT_CLASSIFICATION	// Access should be fast
WITHOUT_CLASSIFICATION	// Iteration should be fast
WITHOUT_CLASSIFICATION	// LiteralSpecification  
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// i.e. eventType == Notification.REMOVE
WITHOUT_CLASSIFICATION	/*implements CommandStack*/
WITHOUT_CLASSIFICATION	//list.add("OpaqueExpression");
WITHOUT_CLASSIFICATION	//LiteralSpecification //list.add("LiteralNull");//When other ok
WITHOUT_CLASSIFICATION	//list.add("LiteralInteger");//When other ok
WITHOUT_CLASSIFICATION	//list.add("LiteralUnlimitedNatural");//When other ok
WITHOUT_CLASSIFICATION	//list.add("InstanceValue");
WITHOUT_CLASSIFICATION	// TODO else => Exception !
WITHOUT_CLASSIFICATION	// Can't be changed
WITHOUT_CLASSIFICATION	//rewrite it after change setExpression ?
WITHOUT_CLASSIFICATION	// as write in UML specification, we have size(bodies)==size(langs) // we must have tabValues.length%2==0 
WITHOUT_CLASSIFICATION	// LiteralSpecification  
WITHOUT_CLASSIFICATION	// Can't be set
WITHOUT_CLASSIFICATION	//rewrite it after change setExpression ?
WITHOUT_CLASSIFICATION	// as write in UML specification, we have size(bodies)==size(langs) // we must have tabValues.length%2==0
WITHOUT_CLASSIFICATION	// A Link is an Assocation in UML2.x
WITHOUT_CLASSIFICATION	// Link does not exist in UML2, a link is represented just as an // association
WITHOUT_CLASSIFICATION	// must not be used in UML2; we model a method as a // OpaqueBehavior object that already has a body, so there is no need // to have an intermediate expression object
WITHOUT_CLASSIFICATION	// We need a method (operation implementation) // to store the method body.
WITHOUT_CLASSIFICATION	// Maybe this operation already has a method, that fits our purpose? // In this case, try to reuse it, instead of creating a new // implementation.
WITHOUT_CLASSIFICATION	// Check, if we have to create a new implementation.
WITHOUT_CLASSIFICATION	// Create a new implementation.
WITHOUT_CLASSIFICATION	// And set the specification to the current operation.
WITHOUT_CLASSIFICATION	// Add it to the operation's methods.
WITHOUT_CLASSIFICATION	// Look, if there's already a java implementation
WITHOUT_CLASSIFICATION	// Try to get the corresponding body and set it // to the current body // This _should_ work, if all the bodies // were stored with their corresponding languages.
WITHOUT_CLASSIFICATION	// Job done.
WITHOUT_CLASSIFICATION	// It seems, there was no implementation of // our current target language, so we just add one.
WITHOUT_CLASSIFICATION	// We cannot set the body of this model element type.
WITHOUT_CLASSIFICATION	// Removed from UML 2.x
WITHOUT_CLASSIFICATION	// also parse 1_* or 0_N etc.
WITHOUT_CLASSIFICATION	// WARNING - This has containment side effects! // Eclipse UML2 will move the Property from the Classifier to // the Association when the navigability is changed.
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//$NON-NLS-1$//$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// for other xmi files with further namespaces:
WITHOUT_CLASSIFICATION	// eclipse namespaces:
WITHOUT_CLASSIFICATION	// For the .uml files in the eclipse jar files, we need this:
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Not needed currently for UML 2
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// final Object scope,
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// The attribute 'targetScope' of an AssociationEnd in UML1.x is no // longer supported in UML2.x
WITHOUT_CLASSIFICATION	// Nothing to do
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#getSource(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#getDestination(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)     */
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// in UML2, we model a method as a Behavior (initially OpaqueBehavior)
WITHOUT_CLASSIFICATION	// The interface realization will be created in the client namespace // (client is a namespace)
WITHOUT_CLASSIFICATION	// Extent ignored for eUML2 implementation (required for NetBeans MDR)
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ExtensionMechanismsHelper#getCommonTaggedValueTypes()     */
WITHOUT_CLASSIFICATION	//        cmd.setObjects(run.getParams().get(0));
WITHOUT_CLASSIFICATION	// maybe UML2 has these as constants somewhere
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// also apply subprofiles:
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	/*     * Sets the value of an element#s property (tagged value). This method     * makes sure that a Collection of values is set if and only if the     * property is multivalued (upper multiplicity value greater 1), so passing     * a collection is safe.     *      * @see org.argouml.model.ExtensionMechanismsHelper#setValueOfTag(java.lang.Object, java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	//commonTaggedValueTypes.add(org.eclipse.uml2.uml.resource.UMLResource.)
WITHOUT_CLASSIFICATION	// remove base class by destroying the extension
WITHOUT_CLASSIFICATION	// consider the property multiplicity
WITHOUT_CLASSIFICATION	// or getDefaultValueFor(prop)?
WITHOUT_CLASSIFICATION	// too bad, we choose to take the first value
WITHOUT_CLASSIFICATION	// ready to set the value finally
WITHOUT_CLASSIFICATION	// in case of a tagged value, the type shouldn't be set here
WITHOUT_CLASSIFICATION	// not implementable in UML2, because property is missing
WITHOUT_CLASSIFICATION	// also unapply subprofiles:
WITHOUT_CLASSIFICATION	// also define subprofiles:
WITHOUT_CLASSIFICATION	//        {AssociationRole.class,  ClassifierRole.class, },
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//        {Link.class, Instance.class, }, //        {Transition.class,       StateVertex.class, },
WITHOUT_CLASSIFICATION	//        {Message.class, ClassifierRole.class },
WITHOUT_CLASSIFICATION	// Note for UML2 the aggregation ends are swapped
WITHOUT_CLASSIFICATION	// Extend, but only between two use cases. Remember we draw from the // extension port to the base port.
WITHOUT_CLASSIFICATION	// in UML2 subsystem is a Component with <<subsystem>> stereotype // so this must occur after the metaTypes.getComponent() case
WITHOUT_CLASSIFICATION	// find the passed in container in validContainmentMap
WITHOUT_CLASSIFICATION	// determine if metaType is a valid element for container
WITHOUT_CLASSIFICATION	/*             * UML 1.4.2 Spec section 4.5.3.20 [5]             * A GeneralizableElement may only be a child of             * GeneralizableElement of the same kind.             */
WITHOUT_CLASSIFICATION	// specifies valid elements for a Region to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Region to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Region to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Package to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Package to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Package to contain
WITHOUT_CLASSIFICATION	// valid elements for a Profile to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a class to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a classifier to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an Interface to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Signal to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an Actor to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Use Case to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Use Case to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Component to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Node to contain
WITHOUT_CLASSIFICATION	//$NON-NLS-1$//$NON-NLS-2$
WITHOUT_CLASSIFICATION	// A list of valid connections between elements, the // connection type first and then the elements to be connected
WITHOUT_CLASSIFICATION	// If there isn't a 3rd column then this represents a connection // of elements of the same type.
WITHOUT_CLASSIFICATION	// If there is a 3rd column then this represents a connection // of between 2 different types of element.
WITHOUT_CLASSIFICATION	// If the array hasn't been flagged to indicate otherwise // swap elements the elemnts and add again.
WITHOUT_CLASSIFICATION	// specifies valid elements for a DataType to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an Operation to contain
WITHOUT_CLASSIFICATION	// valid elements for a Stereotype to contain
WITHOUT_CLASSIFICATION	// valid elements for an Action to contain
WITHOUT_CLASSIFICATION	// trying to get a built-in standard profile from eclipse UML2
WITHOUT_CLASSIFICATION	// Removed from UML 2
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Roll back transaction to remove any partial results read
WITHOUT_CLASSIFICATION	// We shouldn't get here, but just in case... // We want a wide exception catcher to make sure our // transaction always gets ended
WITHOUT_CLASSIFICATION	// If we can find a nested SAX exception, it will have information // on the line number, etc.
WITHOUT_CLASSIFICATION	// Ignore if the extent never got created or has been deleted
WITHOUT_CLASSIFICATION	// InputSource xformedInput = chainedTransform(transformFiles, pIs);
WITHOUT_CLASSIFICATION	// InputSource xformedInput = chainedTransform(transformFiles, pIs);
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.XmiReader#getXMIUUIDToObjectMap()     */
WITHOUT_CLASSIFICATION	// Set up reader to be first filter in chain
WITHOUT_CLASSIFICATION	// Set up source for style sheet
WITHOUT_CLASSIFICATION	// Create & set up temporary output file
WITHOUT_CLASSIFICATION	// In UML2.x there is no metaclass named Method, but we use the // 'method' association of BehavioralFeature
WITHOUT_CLASSIFICATION	//        ret.setIsLeaf(false); //        ret.setIsRoot(false);
WITHOUT_CLASSIFICATION	// Create filter for each style sheet and chain to previous // filter/reader
WITHOUT_CLASSIFICATION	// Create transformer and do transformation
WITHOUT_CLASSIFICATION	// Set up for next iteration
WITHOUT_CLASSIFICATION	// Create & set up temporary output file
WITHOUT_CLASSIFICATION	// Silently ignore anything specified by caller attempt to continue
WITHOUT_CLASSIFICATION	// we presume the stream is encoded using the default char encoding
WITHOUT_CLASSIFICATION	// Delete the old extent first
WITHOUT_CLASSIFICATION	//                LOG.log(Level.WARNING, "Unable to find extent " + extent);
WITHOUT_CLASSIFICATION	/*         * Set the storage id for our repository so that MofIds will be unique         * (they are composed as "storageId":"serialNumber"). NOTE: The storage         * manager only looks for a few property names such as the         * StorageFactoryClassName. Everything else needs to be prefixed with         * "MDRStorageProperty." which gets deleted from the property name         * before it and its associated value are copied to an *internal*         * property table separate from the system property table.         */
WITHOUT_CLASSIFICATION	// Connect to the repository
WITHOUT_CLASSIFICATION	// Create an extent and read in our metamodel (M2 model)
WITHOUT_CLASSIFICATION	// Create and start event pump first so it's available for all others
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDiagramInterchangeModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getFacade()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getModelEventPump()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getActivityGraphsFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getActivityGraphsHelper()     */
WITHOUT_CLASSIFICATION	// handles all children of relationship including extend and // include which are not members of core
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Disable event delivery during model load
WITHOUT_CLASSIFICATION	// If we've got a streaming input, copy it to make sure we'll // be able to rewind it if necessary
WITHOUT_CLASSIFICATION	// Use a transaction to avoid the performance penalty (3x) of // MDR's autocommit mode
WITHOUT_CLASSIFICATION	// If a UML 1.3 file, attempt to upgrade it to UML 1.4
WITHOUT_CLASSIFICATION	// Roll back transaction from first attempt & start new one
WITHOUT_CLASSIFICATION	// Clear the associated ID maps & reset starting collection
WITHOUT_CLASSIFICATION	// Make sure we always have a default extent. // The old extent will get deleted as part of creating the // new extent.
WITHOUT_CLASSIFICATION	// DataTypes is next so it's available for Kinds, ModelManagement, // & Extensions
WITHOUT_CLASSIFICATION	// Initialize remaining factories and helpers // (but defer heavyweight ones until needed)
WITHOUT_CLASSIFICATION	// Create a default extent for the user UML model. This will get // replaced if a new model is read in from an XMI file.
WITHOUT_CLASSIFICATION	// NOTE: If we switch to a persistent repository like the b-tree // repository we'll want to keep the old extent(s) around
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCollaborationsFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCommonBehaviorHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCopyHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCoreFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCoreHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDataTypesFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDataTypesHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getExtensionMechanismsFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getModelManagementFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getModelManagementHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getStateMachinesFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getStateMachinesHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUmlFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUmlHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUseCasesFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUseCasesHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getChangeableKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getAggregationKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getPseudostateKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getScopeKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getConcurrencyKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDirectionKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getOrderingKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.CommonBehaviorHelper#setNodeInstance(java.lang.Object,     *      java.lang.Object)     */
WITHOUT_CLASSIFICATION	// Elements created after file load won't have index entries
WITHOUT_CLASSIFICATION	// Normally the extent should exist already, but in the case of // making an empty project, we may not have an extent yet, so // create a default extent
WITHOUT_CLASSIFICATION	/*     * Private constructor for common work needed by both public     * constructors.     */
WITHOUT_CLASSIFICATION	// end our transaction
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ExtensionMechanismsHelper#getAllPossibleStereotypes(java.util.Collection, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ExtensionMechanismsHelper#getCommonTaggedValueTypes()     */
WITHOUT_CLASSIFICATION	// there is nothing to do in UML1.4
WITHOUT_CLASSIFICATION	// forbid instantiation
WITHOUT_CLASSIFICATION	// MDR classes may have a UML or Uml prefix which should be removed.
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.MetaTypes#getAbstraction()     */
WITHOUT_CLASSIFICATION	// Delete Stimulii which have this as their dispatchAction
WITHOUT_CLASSIFICATION	// Delete Messages which have this as their action
WITHOUT_CLASSIFICATION	// Delete LinkEnds
WITHOUT_CLASSIFICATION	// Delete AttributeLinks where this is the value
WITHOUT_CLASSIFICATION	// Delete Stimuli which have this as a Sender or Receiver
WITHOUT_CLASSIFICATION	// binary link
WITHOUT_CLASSIFICATION	// Delete all SendActions which have this as signal
WITHOUT_CLASSIFICATION	// Delete all SignalEvents which have this as the signal
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#deleteCollection(java.util.Collection)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#getSource(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#getDestination(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)     */
WITHOUT_CLASSIFICATION	// Text was stored in name in UML 1.3
WITHOUT_CLASSIFICATION	// The name of the meta type is the class name (after the last .) // and before the next $ or end of class name.
WITHOUT_CLASSIFICATION	// Delete CollaborationInstanceSets where // this is the last participatingInstance
WITHOUT_CLASSIFICATION	// Delete InteractionInstanceSets where // this is the last participatingStimulus
WITHOUT_CLASSIFICATION	// handles all children of relationship including extend and // include which are not members of core
WITHOUT_CLASSIFICATION	// this doesn't support I18N or multiple states,  // but it's just a default
WITHOUT_CLASSIFICATION	// Partitions are composite elements and will get deleted implicitly // Partition contents don't need to be deleted or checked
WITHOUT_CLASSIFICATION	/*     * @see org.netbeans.api.xmi.XMIReferenceProvider#getReference(javax.jmi.reflect.RefObject)     */
WITHOUT_CLASSIFICATION	// Look for an existing reference matching our MofID
WITHOUT_CLASSIFICATION	// probably redundant - just in case
WITHOUT_CLASSIFICATION	// delete Messages which have this as sender or receiver
WITHOUT_CLASSIFICATION	// Helper interfaces and methods.
WITHOUT_CLASSIFICATION	// CHECKSTYLE:OFF - ignore too many parameters since API is fixed by MDR
WITHOUT_CLASSIFICATION	// CHECKSTYLE:ON
WITHOUT_CLASSIFICATION	// Shorthand notation for convenience
WITHOUT_CLASSIFICATION	// Quick exit if it's a transaction event // (we get a lot of them and they are all ignored)
WITHOUT_CLASSIFICATION	// The 4-arg version of this method depends on this ordering. // Don't change it!
WITHOUT_CLASSIFICATION	// InteractionInstanceSets will get deleted automatically // because they are associated by composition
WITHOUT_CLASSIFICATION	// If this is the only message contained in the Interaction // we delete the Interaction
WITHOUT_CLASSIFICATION	// Object from a different file, register with superclass so it // can resolve all references
WITHOUT_CLASSIFICATION	/*     * @see org.netbeans.lib.jmi.xmi.XmiContext#getReference(java.lang.String, java.lang.String)     */
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////// ////////// Begin AndroMDA Code ////////////////////// /////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// if the model URL has a suffix of '.zip' or '.jar', get // the suffix without it and store it in the urlMap
WITHOUT_CLASSIFICATION	// Several tries to construct a URL that really exists.
WITHOUT_CLASSIFICATION	// If systemId is publicId previously mapped from a systemId, // try to use the systemId.
WITHOUT_CLASSIFICATION	// Try to find suffix in module list.
WITHOUT_CLASSIFICATION	// search the classpath
WITHOUT_CLASSIFICATION	// Give up and let superclass deal with it.
WITHOUT_CLASSIFICATION	// remove the first prefix because it may be an archive // (like magicdraw)
WITHOUT_CLASSIFICATION	// We've got a profile read pending - handle it ourselves now
WITHOUT_CLASSIFICATION	// shouldn't happen
WITHOUT_CLASSIFICATION	// Otherwise if it's not something we've already read, just // punt to the super class.
WITHOUT_CLASSIFICATION	// Unfortunately the MDR super implementation throws // DebugException with just the message from the causing // exception rather than nesting the exception itself, so // we don't have all the information we'd like
WITHOUT_CLASSIFICATION	// Only add MOF elements, not primitive datatypes
WITHOUT_CLASSIFICATION	// Only add MOF elements, not primitive datatypes
WITHOUT_CLASSIFICATION	// For Transition use indirection through target StateVertex
WITHOUT_CLASSIFICATION	// Look for an existing reference matching our MofID
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Get all (UML) metaclasses
WITHOUT_CLASSIFICATION	//                    Object[] args = { typeName, elemName }; //                  misc.name.element-import = Imported {0}: {1} //                    return Translator //                            .localize("misc.name.element-import", args);
WITHOUT_CLASSIFICATION	// Although this only handles one level of package, it is // OK for UML 1.4 because of clustering // Get the right UML package in the extent
WITHOUT_CLASSIFICATION	// Return the metatype proxy
WITHOUT_CLASSIFICATION	// we must find out if the activator itself does not have // message as it's activator
WITHOUT_CLASSIFICATION	// An activator can't also be a predecessor of a message
WITHOUT_CLASSIFICATION	/* This double 'for' loop may be optimised as follows:             * - Use arrays in stead of a Set for bases             * - Have the second loop start from the element after base1             * ... but I chose not to do this, since the gain is small,             * and this is only used for a lazily filled combo.             * BTW: This is also used by Notation.*/
WITHOUT_CLASSIFICATION	// An Association can only have a single unnamed ClassifierRole, so
WITHOUT_CLASSIFICATION	// if we are unnamed eliminate all classifiers which are already // the base of some role
WITHOUT_CLASSIFICATION	// eliminate Classifiers which already have an unnamed role
WITHOUT_CLASSIFICATION	// WFR 2.10.3.3 #4
WITHOUT_CLASSIFICATION	// eliminate Classifiers which already have an unnamed role
WITHOUT_CLASSIFICATION	/* We need to verify that ns is a Package,         * if not - find its parent package!         * Otherwise this causes an exception when creating         * a sequence diagram for a ClassifierRole.*/
WITHOUT_CLASSIFICATION	// No initialization currently
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// if we are unnamed eliminate all classifiers which are already // the base of some role
WITHOUT_CLASSIFICATION	//|| context instanceof Collaboration //|| context instanceof Model
WITHOUT_CLASSIFICATION	/*     * @see org.netbeans.lib.jmi.xmi.XMIHeaderProvider#writeHeader(java.io.Writer)     */
WITHOUT_CLASSIFICATION	// NOTE: The <XMI.header></XMI.header> is provided for us
WITHOUT_CLASSIFICATION	// Not implemented in MDR 
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#addModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#addModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#removeModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#removeModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#removeModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#addClassModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */
WITHOUT_CLASSIFICATION	// Clean up index entries
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// Create a change event for the corresponding property
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// Create an event for the other end of the association
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// and a change event for that end
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// Create a change event for the associated property
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// Create an event for the other end of the association
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// Create a change event for the associated property
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// Cut down on debugging noise
WITHOUT_CLASSIFICATION	// Unregister deleted instances after all events have been delivered
WITHOUT_CLASSIFICATION	// Any given listener is only called once even if it is // registered for multiple relevant matches
WITHOUT_CLASSIFICATION	// This will include all subtypes registered
WITHOUT_CLASSIFICATION	/*(LOG.isDebugEnabled()*/
WITHOUT_CLASSIFICATION	// For debugging you probably want either this // OR the logging for every event which is fired - not both
WITHOUT_CLASSIFICATION	/*LOG.isDebugEnabled()*/
WITHOUT_CLASSIFICATION	// Fetch the key before going in synchronized mode
WITHOUT_CLASSIFICATION	// LOG.log(Level.FINE, " Class " + name + " has subtypes : " // + names.get(name));
WITHOUT_CLASSIFICATION	// convert classname to RefObject
WITHOUT_CLASSIFICATION	// If we don't have a MofClass, see if we can get one from the // instance
WITHOUT_CLASSIFICATION	// If we still don't have a MofClass, something's wrong
WITHOUT_CLASSIFICATION	//                    throw new IllegalArgumentException("Property '" //                            + attribute + "' doesn't exist in metamodel");
WITHOUT_CLASSIFICATION	// If there isn't a 3rd column then this represents a connection // of elements of the same type.
WITHOUT_CLASSIFICATION	// Save the model (current)
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ChangeableKind#getAddOnly()     */
WITHOUT_CLASSIFICATION	// Lookup primary key, creating new entry if needed
WITHOUT_CLASSIFICATION	// Lookup primary key, creating new entry if needed
WITHOUT_CLASSIFICATION	// If there are no subkeys, register using our special value // to indicate that this is a primary key only registration
WITHOUT_CLASSIFICATION	// UML 2.x only
WITHOUT_CLASSIFICATION	// UML 2.x only
WITHOUT_CLASSIFICATION	// UML 2.x only
WITHOUT_CLASSIFICATION	// Look for a TagDefinition matching the given name
WITHOUT_CLASSIFICATION	// Create a new TagDefinition if none found
WITHOUT_CLASSIFICATION	// only add all if there are some to add.
WITHOUT_CLASSIFICATION	// Clear target so that multiple copies have no effect  // (other than inefficiency)
WITHOUT_CLASSIFICATION	// Delete all TaggedValues with this type
WITHOUT_CLASSIFICATION	/*     * Used by the copy functions. Do not call this function directly.     *      * @param source     *            The stereotype to copy from.     * @param target     *            The object becoming a copy.     */
WITHOUT_CLASSIFICATION	// "Element");
WITHOUT_CLASSIFICATION	// Well formedness rule 4.12.3.1 CompositeState // [4] There have to be at least two composite substates in a // concurrent composite state. // If this is broken by deletion of substate then we delete the other // remaining substates.
WITHOUT_CLASSIFICATION	// The effect will get deleted automatically by MDR, unlike the Guard.
WITHOUT_CLASSIFICATION	// Although Usage & Permission are Dependencies, they need to // be include separately because of the way lookup works
WITHOUT_CLASSIFICATION	// The following is specifically for Realizations
WITHOUT_CLASSIFICATION	// The next 3 restrictions for Abstraction seem to be Argo specific // not something the UML spec requires - tfm - 20070215
WITHOUT_CLASSIFICATION	// A list of valid connections between elements, the // connection type first and then the elements to be connected
WITHOUT_CLASSIFICATION	// TODO: constraints // TODO: required tags
WITHOUT_CLASSIFICATION	// specifies valid elements for a Model to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Model to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Package to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a classifier to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an Interface to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Signal to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an Actor to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Use Case to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Use Case to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Node to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Enumeration to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a DataType to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Operation to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an Event to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an State to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an CallState to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an SimpleState to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an SubactivityState to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an ActionState to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an ActionState to contain
WITHOUT_CLASSIFICATION	// supports implementation of some special elements not // supported by buildNode
WITHOUT_CLASSIFICATION	// the list of namespaces to return
WITHOUT_CLASSIFICATION	// If our map has any entries for this type, it's a connection type
WITHOUT_CLASSIFICATION	// Get the list of valid model item pairs for the given connection type
WITHOUT_CLASSIFICATION	// See if there's a pair in this list that match the given // model elements
WITHOUT_CLASSIFICATION	// find the passed in container in validContainmentMap
WITHOUT_CLASSIFICATION	// determine if metaType is a valid element for container
WITHOUT_CLASSIFICATION	/*             * UML 1.4.2 Spec section 4.5.3.20 [5]             * A GeneralizableElement may only be a child of             * GeneralizableElement of the same kind.             */
WITHOUT_CLASSIFICATION	// Begin a transaction - we'll do a bunch of reads first // to collect a set of elements to delete - then delete them all
WITHOUT_CLASSIFICATION	// no else here to make sure Classifier with // its double inheritance goes ok
WITHOUT_CLASSIFICATION	// no else here to make sure AssociationClass goes ok
WITHOUT_CLASSIFICATION	// no else to handle multiple inheritance of linkobject
WITHOUT_CLASSIFICATION	// If we get this with the repository locked, it means our root // model element was already deleted.  Nothing to do...
WITHOUT_CLASSIFICATION	// Our wrapped version of the same error
WITHOUT_CLASSIFICATION	// end our transaction
WITHOUT_CLASSIFICATION	// if there are no owned elements then return empty list
WITHOUT_CLASSIFICATION	// This enforces the following well-formedness rule. // <p>Well formedness rule 4.12.3.1 CompositeState // [4] There have to be at least two composite // substates in a concurrent composite state.<p> // If this is broken by deletion of substate then we // change the parent composite substate to be not // concurrent.
WITHOUT_CLASSIFICATION	// We don't care about the value - just want to see if it throws
WITHOUT_CLASSIFICATION	// Recurse into ourself for each parent
WITHOUT_CLASSIFICATION	// the following should always be true
WITHOUT_CLASSIFICATION	// If we were handed a Classifier to start, // this must be a Classifier
WITHOUT_CLASSIFICATION	// we have to follow the // arrows..
WITHOUT_CLASSIFICATION	// || ns instanceof UseCase // see comment below
WITHOUT_CLASSIFICATION	/*                 * NOTE: Although WFR #3 in section 2.11.3.5 UseCase of the                 * UML 1.4 spec says "A UseCase cannot contain any                 * Classifiers," the OCL is actually self.contents->isEmpty                 * which would seem to imply it can't contain any elements                 * - tfm - 20060416                 */
WITHOUT_CLASSIFICATION	// Made following changes from OCL in UML 1.4 section 2.9.3.16: //   CollaborationInstance -> CollaborationInstanceSet //   Stimuli -> Stimulus
WITHOUT_CLASSIFICATION	// A Profile is a special package having the <<profile>> // stereotype which can only contain the following types
WITHOUT_CLASSIFICATION	/* || modelElement instanceof StateMachine */
WITHOUT_CLASSIFICATION	// A Profile is a special package having the <<profile>> stereotype
WITHOUT_CLASSIFICATION	// There actually don't appear to be any restrictions on the // namespace for a Generalization.  The UML 1.4 WFR 2.5.3.20 #3 // refers to GeneralizableElements, not Generalizations - tfm
WITHOUT_CLASSIFICATION	// only build a namepace if needed, with
WITHOUT_CLASSIFICATION	//        return struc.getOwner().getNamespace().getOwnedElement().contains( //                struc.getType());
WITHOUT_CLASSIFICATION	//  self.allConnections->forAll(r // | self.namespace.allContents->includes(r.participant) )
WITHOUT_CLASSIFICATION	//  d.supplier.oclAsType(GeneralizableElement). //  allParents.oclAsType(Namespace).ownedElement->select (e | //              e. elementOwnership.visibility = //                      #public)->includes (r.participant) or
WITHOUT_CLASSIFICATION	//  d.supplier.oclAsType(Namespace).ownedElement->select (e | //  e.elementOwnership.visibility = //  #public)->includes (r.participant) or
WITHOUT_CLASSIFICATION	//  d.supplier.oclAsType(Package).allImportedElements->select ( //                  e | e. elementImport.visibility = //                      #public) ->includes (r.participant) ) )
WITHOUT_CLASSIFICATION	// Get the namespace hierarchy for each element
WITHOUT_CLASSIFICATION	// Traverse the lists looking for the last (innermost) match
WITHOUT_CLASSIFICATION	// This is an expensive method that we should ensure is called // rarely. Hence info level to track easily.
WITHOUT_CLASSIFICATION	// UML 1.4 WFR 2.5.3.1 #3
WITHOUT_CLASSIFICATION	// UML 1.4 WFR 2.5.3.1 #3 - no aggregation for N-ary associations
WITHOUT_CLASSIFICATION	// We silently ignore requests which conflict with // UML 1.4 WFR 2.5.3.1 #3 - no aggregation for n-ary associations
WITHOUT_CLASSIFICATION	// If we made something aggregate, make sure the other ends conform // to UML 1.4 WFR 2.5.3.1 #2 - no more than one aggregate end
WITHOUT_CLASSIFICATION	// UML 1.4 WFR 2.5.3.1 #3 - no aggregation for N-ary associations
WITHOUT_CLASSIFICATION	/*         * <em>Warning: when changing the implementation of this method be         * warned that the sequence of the if then else tree DOES matter.</em>         * Most notably, do not move the setNamespace method any level up in         * the tree.<p>         */
WITHOUT_CLASSIFICATION	// All text was stored in name field in UML 1.3
WITHOUT_CLASSIFICATION	// Returns nothing
WITHOUT_CLASSIFICATION	// Boolean, String, Integer, Long, Float, Double, etc
WITHOUT_CLASSIFICATION	/*     * This method is CPU intensive and therefore needs to be as efficient as     * possible.     */
WITHOUT_CLASSIFICATION	/*         * Because we get the metatype class stripped of its reflective         * proxies, we need to jump through a hoop or two to find it         * in the metamodel, then work from there to get its proxy.         */
WITHOUT_CLASSIFICATION	// Remove any elements not in requested namespace
WITHOUT_CLASSIFICATION	/*     * Check whether model element is contained in given namespace/container.     */
WITHOUT_CLASSIFICATION	// Get Classifiers in Namespace
WITHOUT_CLASSIFICATION	// Get Features owned by those Classifiers
WITHOUT_CLASSIFICATION	// Select those Features which are BehavioralFeatures
WITHOUT_CLASSIFICATION	// Should these also be deleted?
WITHOUT_CLASSIFICATION	// This is silly, but for backward compatibility
WITHOUT_CLASSIFICATION	/* TODO: This is the 2nd part of this method: */
WITHOUT_CLASSIFICATION	/*             * For a Classifier:             * <pre>             * [10] The operation allContents returns a Set containing             * all ModelElements contained in the Classifier together             * with the contents inherited from its parents.             *   allContents : Set(ModelElement);             *   allContents = self.contents->union(             *       self.parent.allContents->select(e |             *            e.elementOwnership.visibility = #public or             *            e.elementOwnership.visibility = #protected))             * where parent is defined for GeneralizableElement as:             * [1] The operation parent returns a Set containing all direct             * parents             *   parent : Set(GeneralizableElement);             *   parent = self.generalization.parent             * </pre><p>             */
WITHOUT_CLASSIFICATION	/*             * For a Collaboration:             * <pre>             * [1 ] The operation allContents results in the set of             * all ModelElements contained in the Collaboration             * together with those contained in the parents             * except those that have been specialized.             *   allContents : Set(ModelElement);             *   allContents = self.contents->union (             *                       self.parent.allContents->reject ( e |             *                       self.contents.name->include (e.name) ))             *             *  parent here is the GeneralizableElement definition             * </pre>             */
WITHOUT_CLASSIFICATION	// wellformednessrules and preconditions
WITHOUT_CLASSIFICATION	// UML 1.4 WFR 2.5.3.1 #3 - no aggregation for N-ary associations
WITHOUT_CLASSIFICATION	// equal
WITHOUT_CLASSIFICATION	// greater
WITHOUT_CLASSIFICATION	// less than
WITHOUT_CLASSIFICATION	// binary association
WITHOUT_CLASSIFICATION	// delete LinkEnds which have this as their associationEnd
WITHOUT_CLASSIFICATION	// delete AttributeLinks where this is the Attribute
WITHOUT_CLASSIFICATION	// delete CreateActions which have this as their instantiation
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ActivityGraphsHelper#findClassifierByName(     *         java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	// Delete dependencies where this is the only client
WITHOUT_CLASSIFICATION	// Delete dependencies where this is the only supplier
WITHOUT_CLASSIFICATION	// delete CallActions which have this as their operation
WITHOUT_CLASSIFICATION	// delete CallEvents which have this as their operation
WITHOUT_CLASSIFICATION	/*     * TODO: All the ToDos in the doCopyFoo methods below are inherited from the     * NSUML implementation and do not reflect new issues. One additional thing     * which does need to be dealt with is the copying of any attributes which     * have been added since this code was implemented for UML 1.3.     */
WITHOUT_CLASSIFICATION	// Nothing more to do.
WITHOUT_CLASSIFICATION	/**     * Used by the copy functions. Do not call this function directly.     * TODO: actions? instances? collaborations etc?     *     * @param source     *            the source classifier     * @param target     *            the target classifier     */
WITHOUT_CLASSIFICATION	// Copy all the Features
WITHOUT_CLASSIFICATION	/**     * Used by the copy functions. Do not call this function directly.     * TODO: generalizations, specializations?     *     * @param source     *            the source generalizable element     * @param target     *            the target generalizable element     */
WITHOUT_CLASSIFICATION	/**     * Used by the copy functions. Do not call this function directly.     * TODO: template parameters, default type     * TODO: constraining elements     * TODO: flows, dependencies, comments, bindings, contexts ???     * TODO: contents, residences ???     *     * @param source     *            the source me     * @param target     *            the target me     */
WITHOUT_CLASSIFICATION	// Nothing more to do, don't copy owned elements.
WITHOUT_CLASSIFICATION	// copy raised signals:
WITHOUT_CLASSIFICATION	// Set the name so that superclasses can find the newly // created element in the model, if necessary.
WITHOUT_CLASSIFICATION	// Note that if we're copying this element then we // must also be allowed to copy other necessary // objects.
WITHOUT_CLASSIFICATION	// Don't explicitly check if element is null
WITHOUT_CLASSIFICATION	// Return 1..1 multiplicity for empty string
WITHOUT_CLASSIFICATION	// Convert "*" to "0..*" instead of "*..*"
WITHOUT_CLASSIFICATION	/* In this case, either the container was not set,             * or it was not contained in a statemachine.             */
WITHOUT_CLASSIFICATION	/* according WFR: in case of ActivityGraph only. */
WITHOUT_CLASSIFICATION	// For consistency with attribute and operation, give it a default // name and location
WITHOUT_CLASSIFICATION	// Delete Extends which have this as their only ExtensionPoint
WITHOUT_CLASSIFICATION	// delete Extends where this is the base
WITHOUT_CLASSIFICATION	// delete Includes where this is the addition
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// Test multipe items registered for single key set
WITHOUT_CLASSIFICATION	// Remove with null item should remove all entries for key
WITHOUT_CLASSIFICATION	// success
WITHOUT_CLASSIFICATION	// success
WITHOUT_CLASSIFICATION	/* Need to copy the lists since we will be moving the elements              * one by one: */
WITHOUT_CLASSIFICATION	// Deleting "source" here would probably delete the parameters...
WITHOUT_CLASSIFICATION	/*         * Only set the name if it differs from the text.         */
WITHOUT_CLASSIFICATION	/* Need to copy the lists since we will be moving the elements: */
WITHOUT_CLASSIFICATION	// This is not necessarily the current diagram!
WITHOUT_CLASSIFICATION	/* Remove the old fig from the diagram, so we can draw the                 * new one in its place: */
WITHOUT_CLASSIFICATION	//            p.moveToTrash(source);
WITHOUT_CLASSIFICATION	// As soon as we've created a notation and have registered it listener // force an event to go to the listener so it draws for the first time.
WITHOUT_CLASSIFICATION	// If there are no subkeys, register using our special value // to indicate that this is a primary key only registration
WITHOUT_CLASSIFICATION	// Made following change from OCL in UML 1.4 section 2.9.3.22: //   CollaborationInstance -> CollaborationInstanceSet
WITHOUT_CLASSIFICATION	// If there is a 3rd column then this represents a connection // of between 2 different types of element.
WITHOUT_CLASSIFICATION	// Elements which will be deleted when their container is deleted // don't get added to the list of elements to be deleted // (but we still want to traverse them looking for other elements //  to be deleted)
WITHOUT_CLASSIFICATION	// Technically this is legal, but a StructuralFeature should probably // only ever have an owner instead of a namespace. - tfm
WITHOUT_CLASSIFICATION	// We'll put the association in the namespace of whichever end // is not navigable and is writeable.  If they both are, we'll use the // namepace of c1.
WITHOUT_CLASSIFICATION	// EnumerationLiterals should get deleted implicitly // since they are associated by composition
WITHOUT_CLASSIFICATION	// Set the namespace to that of the base as first choice, or that of // the addition as second choice.
WITHOUT_CLASSIFICATION	// UML2 only
WITHOUT_CLASSIFICATION	//            Editor editor = Globals.curEditor(); //            GraphModel gm = editor.getGraphModel(); //            LayerDiagram lay = //                ((LayerDiagram) editor.getLayerManager().getActiveLayer());
WITHOUT_CLASSIFICATION	// Have we handled UML2 here?
WITHOUT_CLASSIFICATION	/*    	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)    	     */
WITHOUT_CLASSIFICATION	/*    	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)    	     */
WITHOUT_CLASSIFICATION	/*    	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)    	     */
WITHOUT_CLASSIFICATION	/*    	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)    	     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	// Get all classifiers in all top level packages of all profiles
WITHOUT_CLASSIFICATION	/*	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	     */
WITHOUT_CLASSIFICATION	// We got passed an unmodifiable List.  Copy it and sort the result
WITHOUT_CLASSIFICATION	/*	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	     */
WITHOUT_CLASSIFICATION	/*	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(     *      java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/* Set up the property panels for UML elements: */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Build up an array list of the heights of each label/component pair. // Heights of zero indicate a proportional height.
WITHOUT_CLASSIFICATION	// Make sure the component width isn't any greater // than its maximum allowed width
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/* If we do not set it to null first, then we get a MDR DebugException: */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.ui.UMLComboBoxModel#addElement(java.lang.Object)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxModel#setSelectedItem(java.lang.Object)         */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*             * This can throw an exception if the target has been             * deleted. We don't want to try locking the repository             * because this is called from the event delivery thread and             * could cause a deadlock. Instead catch the exception and             * leave the model empty.             */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.DefaultListModel#contains(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// we tried to remove a value
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	// Don't test changed element if it was deleted
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireContentsChanged(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalAdded(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalRemoved(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/* Do nothing by design. */
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	// Allow null
WITHOUT_CLASSIFICATION	/*     * This is explained by WFR 2 of a StructuralFeature: The type of a     * StructuralFeature must be a Class, DataType, or Interface.     *      * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	// restricting types for tagged values
WITHOUT_CLASSIFICATION	// classifier is way too much in UML 2.x
WITHOUT_CLASSIFICATION	// the minimum set of standard types
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	// keep them sorted
WITHOUT_CLASSIFICATION	// We got passed an unmodifiable List.  Copy it and sort the result
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(         * java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#addOtherModelEventListeners(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/* Make a copy of the modelelements: */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	// Add stereotypes submenu
WITHOUT_CLASSIFICATION	// the method
WITHOUT_CLASSIFICATION	// the selected operation
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildPopup(javax.swing.JPopupMenu, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// make sure we know it when a classifier is added as a base
WITHOUT_CLASSIFICATION	// make sure we know it when a classifier is added as a base
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#removeOtherModelEventListeners(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	// base is already set to this assoc...
WITHOUT_CLASSIFICATION	/* This check is needed, otherwise the setbase()                 *  below gives an exception.*/
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Just in case the existing selected element is from elsewhere // make sure it is in the list
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/* The selected value may be "" to              * clear the represented classifier. */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	//    private boolean mustRefresh;
WITHOUT_CLASSIFICATION	//        mustRefresh = true;
WITHOUT_CLASSIFICATION	/* This should not happen. */
WITHOUT_CLASSIFICATION	// if it has no language, then we assume it is not an instance of // OpaqueExpression, so we leave it null and handle elsewhere
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	// /////////////////////////////////////// // Build the field // ///////////////////////////////////////
WITHOUT_CLASSIFICATION	// /////////////////////////////////////// // Add field(s) to panel // ///////////////////////////////////////
WITHOUT_CLASSIFICATION	// click on the already selected value must not call setValue
WITHOUT_CLASSIFICATION	// The 2 Radios have only one information.
WITHOUT_CLASSIFICATION	// Update the model, and then notify
WITHOUT_CLASSIFICATION	// When call by contructor : no one is selected
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	//    private boolean mustRefresh;
WITHOUT_CLASSIFICATION	//        mustRefresh = true;
WITHOUT_CLASSIFICATION	/* This should not happen. */
WITHOUT_CLASSIFICATION	/* If we do not set it to null first, then we get a MDR DebugException: */
WITHOUT_CLASSIFICATION	// Expressions are DataTypes, not independent model elements // be careful not to reuse them
WITHOUT_CLASSIFICATION	// We need to to this otherwise there is no notification // and diagram isn't change
WITHOUT_CLASSIFICATION	// needed for notification
WITHOUT_CLASSIFICATION	// if the control is a panel, add it
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	/* To be really sure, let's add the operation             * that is linked to the action in the model,             * too - if it is not listed yet.             * We need this, incase an operation is moved             * out of the package,             * or maybe with imported XMI...             */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	// fill the list with items
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// in UML2, the target is already the "expression" (Opaque...)
WITHOUT_CLASSIFICATION	// reuse Opaque..., just set it's attributes
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	// Expressions are DataTypes, not independent model elements // be careful not to reuse them
WITHOUT_CLASSIFICATION	// make it stretch vertically
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.     * DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/* If we do not set it to null first, then we get a MDR DebugException: */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	// make it stretch vertically
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBox#doIt(ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	//p  = new UMLValueSpecificationPanel(model, propertyName);
WITHOUT_CLASSIFICATION	/*MModelElement*/
WITHOUT_CLASSIFICATION	// if not, it is a control and must be labeled...
WITHOUT_CLASSIFICATION	// only association end has an aggregation option box
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Create it [Here, OpaqueExpression which is the first // choice] // Note that if we edit the Initial value in the diagram // (double clic) // it was replaced by an OpaqueExpression
WITHOUT_CLASSIFICATION	// Destroy it
WITHOUT_CLASSIFICATION	// title = "" because already done for Optional
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	// We got passed an unmodifiable List.  Copy it and sort the result
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Force the parent to redraw
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// Do not set buildingModel = false here, // otherwise the action for selection is performed.
WITHOUT_CLASSIFICATION	/* Add new listeners: */
WITHOUT_CLASSIFICATION	// makes sure we can select 'none'
WITHOUT_CLASSIFICATION	// TODO: For large lists, this is doing a linear search of literally thousands of elements
WITHOUT_CLASSIFICATION	/* TODO: Here too? */
WITHOUT_CLASSIFICATION	// Check against "" is needed for backward // compatibility.  Don't remove without // checking subclasses and warning downstream // developers - tfm - 20081211
WITHOUT_CLASSIFICATION	// start of interval
WITHOUT_CLASSIFICATION	// end of interval
WITHOUT_CLASSIFICATION	// in middle of interval
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	// makes sure we can select 'none'
WITHOUT_CLASSIFICATION	/* Add new listeners: */
WITHOUT_CLASSIFICATION	// Don't try to test this if we're removing the element
WITHOUT_CLASSIFICATION	// we tried to remove a value
WITHOUT_CLASSIFICATION	// It would be better if we didn't need the container to get // the target. This constructor can have zero parameters as // soon as we improve targetChanged.
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ListModel#getElementAt(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ListModel#getSize()     */
WITHOUT_CLASSIFICATION	// catch callers attempting to use one without other
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ComboBoxModel#setSelectedItem(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ComboBoxModel#getSelectedItem()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireContentsChanged(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalAdded(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalRemoved(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	// Mutators hold write lock & will deadlock if use is not thread safe
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.text.Document#remove(int, int)     */
WITHOUT_CLASSIFICATION	// Mutators hold write lock & will deadlock // if use is not thread-safe
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/* Do nothing by design. */
WITHOUT_CLASSIFICATION	// NOTE: This may be called from a different thread, so we need to be // careful of the threading restrictions imposed by AbstractDocument // for mutators to be sure we don't deadlock.
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Mutators hold write lock & will deadlock if use is not thread safe
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox#buildModel()     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	//super(new LabelledLayout());
WITHOUT_CLASSIFICATION	// c.insets = new Insets(1, 1, 1, 1);
WITHOUT_CLASSIFICATION	// Get the list: OpaqueExpression, LiteralString,...
WITHOUT_CLASSIFICATION	// By default, the first value of the combobox is selected.
WITHOUT_CLASSIFICATION	// Get current InitialValue
WITHOUT_CLASSIFICATION	// Select the Current type in the combobox
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// default : 0 => OpaqueExpression // set to 1 for test
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/* If we do not set it to null first, then we get a MDR DebugException: */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	// Create the body and language Field
WITHOUT_CLASSIFICATION	// Create other panel element
WITHOUT_CLASSIFICATION	// create Panel containing the previous field
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	// Our comparator will throw an InvalidElementException if the old // list contains deleted elements (eg after a new project is loaded) // so remove all the old contents first
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(         * java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	// make it stretch vertically
WITHOUT_CLASSIFICATION	/*        * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)        */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/* There are no composite states, so this will work: */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	// Allow null
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// make sure we know it when a classifier is added as a base
WITHOUT_CLASSIFICATION	// make sure we know it when a classifier is added as a base
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	// make it stretch vertically
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()     */
WITHOUT_CLASSIFICATION	// Get all classifiers in our model // TODO: We need the property panels to have some reference to the // project they belong to instead of using deprecated functionality
WITHOUT_CLASSIFICATION	// Get all classifiers in all top level packages of all profiles
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/* The selected value may be "" to              * clear the represented operation. */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	// ignored - we just skipped inserting it in our document
WITHOUT_CLASSIFICATION	// Allow null
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	// Make sure it's parseable as an number
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#setItem(java.lang.Object)         */
WITHOUT_CLASSIFICATION	// we don't want to show some nasty gray background // color, now do we?
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#getEditorComponent()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#addActionListener(java.awt.event.ActionListener)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#removeActionListener(java.awt.event.ActionListener)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#selectAll()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#getItem()         */
WITHOUT_CLASSIFICATION	// we don't want to show some nasty gray background // color, now do we?
WITHOUT_CLASSIFICATION	// we don't want to show some nasty gray background // color, now do we?
WITHOUT_CLASSIFICATION	// necessary to create distance between // the textfield and the icon.
WITHOUT_CLASSIFICATION	// necessary to create distance between // the textfield and the icon.
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBox2#UMLComboBox2( UMLComboBoxModel,     *      Action)     */
WITHOUT_CLASSIFICATION	// next statement is necessary to update the textfield // if the selection is equal to what was allready // selected
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)     */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#setItem(java.lang.Object)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#getEditorComponent()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#addActionListener(java.awt.event.ActionListener)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#removeActionListener(java.awt.event.ActionListener)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#selectAll()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#getItem()         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Temporary until SimpleListModel is used for all
WITHOUT_CLASSIFICATION	// Temporary until SimpleListModel is used for all
WITHOUT_CLASSIFICATION	// Create popup tool if we have a single row
WITHOUT_CLASSIFICATION	// Create add and remove buttons if needed first
WITHOUT_CLASSIFICATION	// then any new buttons
WITHOUT_CLASSIFICATION	// Pushing this to the end of the AWT thread seems to be the only // way to get this to update correctly
WITHOUT_CLASSIFICATION	// button action:
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// TODO: Probably really want to cancel editing //((FigTextEditor) focusOwner).cancelEditing();
WITHOUT_CLASSIFICATION	// The 5 main component : 2 label, a panel for langage , a panel with // button, a textarea
WITHOUT_CLASSIFICATION	// Translator.localize("button.delete")
WITHOUT_CLASSIFICATION	// Copy previous element
WITHOUT_CLASSIFICATION	// Copy next element
WITHOUT_CLASSIFICATION	// Translator.localize("button.move-up")
WITHOUT_CLASSIFICATION	// Copy in memory the current
WITHOUT_CLASSIFICATION	// Copy the previous value in the current
WITHOUT_CLASSIFICATION	// Copy the current in the previous
WITHOUT_CLASSIFICATION	// Copy in memory the current
WITHOUT_CLASSIFICATION	// Copy the next value in the current
WITHOUT_CLASSIFICATION	// Copy the current in the next
WITHOUT_CLASSIFICATION	// Layout
WITHOUT_CLASSIFICATION	// The 2 component: a textField and a list
WITHOUT_CLASSIFICATION	// Layout
WITHOUT_CLASSIFICATION	// Extract the icon that is used by the tree control // for the current look and feel
WITHOUT_CLASSIFICATION	// Add a new entry in the list and select it. // Translator.localize("button.add") // +
WITHOUT_CLASSIFICATION	// necessary to create distance between // the textfield and the icon.
WITHOUT_CLASSIFICATION	// Eclipse UML2 implementation classes often start with "UML" //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Eclipse UML2 implementation classes end with "Impl" //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ // Make sure we have a recognized file extension //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// If the eUML.resources system property is defined then we are in a // stand alone application, else we're in an Eclipse plug in. // The eUML.resource should contain the path to the // org.eclipse.uml2.uml.resource jar plugin. //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// slope of the line we're finding the normal to // is slope, and the normal is the negative reciprocal // slope is (p1.y - p2.y) / (p1.x - p2.x) // so recip is - (p1.x - p2.x) / (p1.y - p2.y)
WITHOUT_CLASSIFICATION	// UML1.4 only
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	// Set the child components to the heights in the array list // calculating the height of any proportional component on the // fly.
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*             * @see org.argouml.uml.ui.ActionSetMultiplicity#setSelectedItem(             *      java.lang.Object, java.lang.Object)             */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// If we have a model but no list then build the list with // preferred constructor. Eventually all lists should be built // this way.
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.DefaultListModel#addElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*	 * @see	 * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent	 * )	 */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#removeOtherModelEventListeners(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(     *         java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	// If the component is a JLabel which has another // component assigned then position/size the label and // calculate the size of the registered component
WITHOUT_CLASSIFICATION	// If the child component is resizable then // we don't know it's actual size yet. // It will be calculated later as a // proportion of the available left over // space.  For now this is flagged as zero.
WITHOUT_CLASSIFICATION	// If a preferred height is not given or is // the same as the minimum height then fix the // height of this row.
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.     * DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// We only have this here until we have stereotypes // list on property panel
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * The property value has changed so rebuild our view.     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel#isValidElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/* So, we found a Classifier                     * that is not a ClassifierInState.                     * And at least one state has been selected.                     * Well, let's correct that:                     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	// Not in UML1.4
WITHOUT_CLASSIFICATION	// Not in UML1.4
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBox#UMLComboBox( UMLComboBoxModel,     *      Action, boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Layout
WITHOUT_CLASSIFICATION	// Language has changed
WITHOUT_CLASSIFICATION	// Translator.localize("button.move-down")
WITHOUT_CLASSIFICATION	//        Object icon = ResourceLoaderWrapper.lookupIcon(s); //        putValue(Action.NAME, Translator.localize(s)); //        putValue(Action.SMALL_ICON, icon); //        // Set the tooltip string: //        putValue(Action.SHORT_DESCRIPTION, Translator.localize(s));
WITHOUT_CLASSIFICATION	/*             * MDR has a hardcoded printStackTrace on all exceptions,             * even if they're caught, which is unsightly, so we handle             * unknown elements ourselves rather than letting MDR throw             * an exception for us to catch.             *             * org/netbeans/lib/jmi/util/Logger.java             *             * This can be uses to disable logging.  Default output is             * System.err             * setProperty("org.netbeans.lib.jmi.Logger.fileName", "")             *              org.netbeans.mdr.Logger             *             * The property org.netbeans.lib.jmi.Logger controls the minimum             * severity level for logging             */
WITHOUT_CLASSIFICATION	// Commit our transaction
WITHOUT_CLASSIFICATION	// not in UML1.4
WITHOUT_CLASSIFICATION	// Ignore any error.  The transaction may already have // been unwound as part of exception processing by MDR
WITHOUT_CLASSIFICATION	// Give the resolver.getIdToObjectMap() entries // priority over entries with the same UUID from // resolver.getIdToObjectMaps() because entries // in resolver.getIdToObjectMaps() are historic.
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCollaborationsHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCommonBehaviorFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getExtensionMechanismsHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getMetaTypes()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getMessageSort()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.CommonBehaviorHelper#setReceiver(java.lang.Object,     *      java.lang.Object)     */
WITHOUT_CLASSIFICATION	// Nothing to do - we get all events automatically
WITHOUT_CLASSIFICATION	// handles all children of relationship including extend and // include which are not members of core
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)     */
WITHOUT_CLASSIFICATION	// Remember the system id of our root document so that we can write // out profiles and linked models to a different file if requested
WITHOUT_CLASSIFICATION	// For now just skip registering this and ignore the request, // but the real issue is that MagicDraw serializes the same // object in two different composition associations, first in // the referencing file and second in the referenced file
WITHOUT_CLASSIFICATION	// if we've found the module model, log it // and place it in the map so we don't have to // find it if we need it again.
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////// ////////// End AndroMDA Code ////////////////////// /////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// returns a List
WITHOUT_CLASSIFICATION	// Simulates UML2 getting the aggregation from the opposite end
WITHOUT_CLASSIFICATION	// find the bases of the connected classifierroles so that we can see // what associations are between them. If there are bases then the // associations between those bases form the possible bases. Otherwise // the bases are formed by all associations in the namespace of the // collaboration
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#addModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#critique(java.lang.Object,     * org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Decision)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getSupportedDecisions()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#addSupportedDecision(org.argouml.cognitive.Decision)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Goal)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getSupportedGoals()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#addSupportedGoal(org.argouml.cognitive.Goal)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#containsKnowledgeType(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#addKnowledgeType(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#expand(java.lang.String, ListSet)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#isActive()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     * org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedMetatypes()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Decision)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getSupportedDecisions()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Goal)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getSupportedGoals()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#containsKnowledgeType(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * Just returns the descr param.     *     * @see org.argouml.cognitive.Poster#expand(java.lang.String, ListSet)     */
WITHOUT_CLASSIFICATION	/*     * Get the generic clarifier for this designer/poster.     *     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#snooze()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#unsnooze()     */
WITHOUT_CLASSIFICATION	/*     * Does not do anything.     *     * @see org.argouml.cognitive.Poster#fixIt(org.argouml.cognitive.ToDoItem,     * java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Just returns false.     *     * @see org.argouml.cognitive.Poster#canFixIt(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Decision)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Goal)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#containsKnowledgeType(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#expand(java.lang.String, org.argouml.cognitive.ListSet)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#fixIt(org.argouml.cognitive.ToDoItem, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.WizStep#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *          TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *          TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.ProjectFilePersister#doLoad(java.io.File)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoGeneratorEventListener#generatorChanged(org.argouml.application.events.ArgoGeneratorEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoGeneratorEventListener#generatorAdded(org.argouml.application.events.ArgoGeneratorEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoGeneratorEventListener#generatorRemoved(org.argouml.application.events.ArgoGeneratorEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.NotationName#getConfigurationValue()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.NotationName#sameNotationAs(org.argouml.notation.NotationName)     */
WITHOUT_CLASSIFICATION	/*     * Add an element listener and remember the registration.     *     * @param element     *            element to listen for changes on     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener, Object, String)     */
WITHOUT_CLASSIFICATION	/*     * Utility function to add a listener for a given property name     * and remember the registration.     *     * @param element     *            element to listen for changes on     * @param property     *            name of property to listen for changes of     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener,     *      Object, String)     */
WITHOUT_CLASSIFICATION	/*     * Utility function to add a listener for an array of property names     * and remember the registration.     *     * @param element     *            element to listen for changes on     * @param property     *            array of property names (Strings) to listen for changes of     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener,     *      Object, String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * Utility function to remove an element listener     * and adapt the remembered list of registration.     *     * @param element     *            element to listen for changes on     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener, Object, String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#updateListener(java.beans.PropertyChangeListener, java.lang.Object, java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(     * java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.notation.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.notation.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.notation.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.notation.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationChanged(org.argouml.application.events.ArgoNotationEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationAdded(org.argouml.application.events.ArgoNotationEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationRemoved(org.argouml.application.events.ArgoNotationEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationProviderAdded(org.argouml.application.events.ArgoNotationEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationProviderRemoved(org.argouml.application.events.ArgoNotationEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.SAXParserBase#handleStartElement(     *         org.argouml.persistence.XMLElement)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.SAXParserBase#handleEndElement(     *         org.argouml.persistence.XMLElement)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.SAXParserBase#isElementOfInterest(String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.MemberFilePersister#getMainTag()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getDesc()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.XmiFilePersister#isSaveEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.MemberFilePersister#getMainTag()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getDesc()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#isSaveEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.ProjectFilePersister#doLoad(java.io.File)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.XMLTokenTableBase#setupTokens()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.MemberFilePersister#getMainTag()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.MemberFilePersister#load(org.argouml.kernel.Project, java.io.InputStream)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.MemberFilePersister#save(org.argouml.kernel.ProjectMember, java.io.OutputStream)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getDesc()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.ProjectFilePersister#doLoad(java.io.File)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.XMLTokenTableBase#setupTokens()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getDesc()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#isSaveEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getDesc()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#isSaveEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.ProjectFilePersister#doLoad(java.io.File)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.ProfileManager#lookForRegisteredProfile(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @param pc     * @see org.argouml.profile.ProfileManager#applyConfiguration(org.argouml.kernel.ProfileConfiguration)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.HashMap,     *      java.lang.Object, java.lang.String, java.lang.String,     *      java.lang.Object[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#getBuiltInSymbol(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Critic#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.OclExpressionEvaluator#evaluate(java.util.HashMap, org.argouml.profile.internal.ocl.ModelInterpreter, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.HashMap,     *      java.lang.Object, java.lang.String, java.lang.String,     *      java.lang.Object[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#getBuiltInSymbol(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.uml14.Bag#count(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#setMaximumProgress(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#getBuiltInSymbol(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * Returns the target of this tab.     *     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * Refresh the text of the tab.     *     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.AbstractArgoJPanel#spawn()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * Style panels only apply when a Fig is selected.     *     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *      TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *      TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * Report a progress to the ProgressMonitor window.     * @see org.argouml.persistence.ProgressListener#progress(org.argouml.persistence.ProgressEvent)     */
WITHOUT_CLASSIFICATION	/*     * Report a progress to the ProgressMonitor window.     * @see org.argouml.application.api.ProgressMonitor#updateProgress(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#isCanceled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#close()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#notifyMessage(java.lang.String, java.lang.String, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#notifyNullAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.CommandLineInterface#doCommand(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.PerspectiveManagerListener#addPerspective(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.PerspectiveManagerListener#removePerspective(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(         * org.argouml.ui.targetmanager.TargetEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(         * org.argouml.ui.targetmanager.TargetEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.ui.targetmanager.TargetListener#targetSet(         * org.argouml.ui.targetmanager.TargetEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementChanged(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementAdded(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementRemoved(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * the model structure has changed significantly, eg a new project.     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#structureChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// NOTE: No longer a separate type in UML 2.1
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.AbstractProjectMember#getType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.AbstractProjectMember#getZipFileExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoItem#deselect()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoItem#select()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.AbstractProjectMember#getType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.AbstractProjectMember#getZipFileExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.checklist.CheckItem#expand(java.lang.String,     *      java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.AbstractCrUnconventionalName#computeSuggestion(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#setToDoItem(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#hit(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#setToDoItem(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#hit(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#predicate( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(Object, Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.UMLWizard#getNumSteps()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.WizMEName#makePanel(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.WizMEName#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.AbstractCrUnconventionalName#computeSuggestion(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     * java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(     * java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *      org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.AbstractCrUnconventionalName#computeSuggestion(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedMetatypes()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*    * @see org.argouml.profile.Profile#getProfileIdentifier()    */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *         java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.AbstractCrUnconventionalName#computeSuggestion(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedMetatypes()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#makePanel(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#canFinish()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.UMLWizard#setSuggestion(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#getNumSteps()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#makePanel(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#getNumSteps()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#makePanel(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#canGoNext()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#canFinish()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#makePanel(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#setToDoItem(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#hit(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *         java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#makePanel(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#getNumSteps()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#makePanel(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#canFinish()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *      org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.AbstractProjectMember#getType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.AbstractProjectMember#getZipFileExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.ProjectMember#repair()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.layout.Layouter#add(org.argouml.uml.diagram.layout.LayoutedObject)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.layout.Layouter#remove(org.argouml.uml.diagram.layout.LayoutedObject)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.layout.Layouter#getObjects()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.layout.Layouter#getObject(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.layout.Layouter#layout()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getDependentElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.layout.Layouter#getMinimumDiagramSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getOwner()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.activity.ui.FigActionState#getNotationProviderType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigStateVertex#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#initNotationProviders(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEdited(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateNameText()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#addEnclosedFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.activity.ui.SelectionActionState#getNewNodeType(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getUmlActions()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * If the new encloser is null, and the old one is a Component,     * then the "enclosed" Fig has been moved on the diagram.     * This causes the model to be adapted as follows:     * remove the elementResidence     * between the "enclosed" and the oldEncloser.     *     * @see org.argouml.ui.ArgoDiagram#changeFigEncloser(org.tigris.gef.presentation.FigNode, org.tigris.gef.presentation.FigNode, org.tigris.gef.presentation.FigNode)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#getNotationProviderType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.UMLMutableGraphSupport#isRemoveFromDiagramAllowed(Collection)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigHistoryState#getH()     */
WITHOUT_CLASSIFICATION	/*     * The Transition has a name text box. It contains:     * <ul>     * <li>The event-signature     * <li>The guard condition between []     * <li>The action expression     * </ul><p>     *     * The content of the text box is generated by its own notationProvider.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getDestination()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getSource()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialHeight()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialX()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialY()     */
WITHOUT_CLASSIFICATION	/*     * Update the text labels.     *     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * Update the text labels and listeners.     *     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialHeight()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialX()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialY()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigStateVertex#initNotationProviders(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#removeFromDiagramImpl()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEdited(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialHeight()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialX()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialY()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialHeight()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialX()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialY()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigHistoryState#getH()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getDependentElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.layout.LayoutedEdge#layout()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getTypeOrderNumer()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#calculateWeight()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getRank()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getWeight()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#isStandalone()     */
WITHOUT_CLASSIFICATION	/*     * Nothing is editable, since a Link takes its identity      * from the Association.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(     * org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * Listen also to the association, of which the link is an instantiation,      * since we want to update the rendering when      * the association name changes.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(     * java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getDestination()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getSource()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#setNamespace(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getUmlActions()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateStereotypeText()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettings#getImportLevel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.StereotypeContainer#isStereotypeVisible()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.StereotypeContainer#setStereotypeVisible(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.VisibilityContainer#isVisibilityVisible()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.VisibilityContainer#setVisibilityVisible(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEdited(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateStereotypeText()     */
WITHOUT_CLASSIFICATION	/*     * Only refresh the tab if the bounds propertyChange event arrives.     *     * @see org.argouml.ui.StylePanel#refresh(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * Listen for a RemoveAssociationEvent between the comment     * and the annotated element. When recieved delete the CommentEdge     * and this FigEdgeNote.     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigSingleLineText#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigSingleLineText#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigSingleLineText#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigSingleLineText#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#toggleValueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#valueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * If we're drawing to an edge then only allow if the start is a comment     * @see org.argouml.uml.diagram.ui.ModeCreateGraphEdge#isConnectionValid(org.tigris.gef.presentation.Fig, org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.StylePanelFig#setTargetBBox()     */
WITHOUT_CLASSIFICATION	/*     * Only refresh the tab if the bounds propertyChange event arrives.     *     * @see org.argouml.ui.StylePanel#refresh(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.StylePanelFig#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * If we're drawing to an edge then only allow if the start is a comment     * @see org.argouml.uml.diagram.ui.ModeCreateGraphEdge#isConnectionValid(org.tigris.gef.presentation.Fig, org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getUmlCollection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getNotationType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionRadioMenuItem#toggleValueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionRadioMenuItem#toggleValueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.Relocatable#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.Relocatable#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#toggleValueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#valueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *          TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *          TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(     *          org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getUmlCollection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getNotationType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettings#getInputSourceEncoding()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEdited(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#toggleValueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#valueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionRadioMenuItem#toggleValueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEdited(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.PathContainer#isPathVisible()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.PathContainer#setPathVisible(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionRadioMenuItem#toggleValueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigSingleLineText#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#getNotationProviderType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(     * java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNameFig()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNameBounds()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getUmlCollection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getNotationType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * The only thing we need to deal with is updating is the condition text.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getUmlActions()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettings#isCreateDiagramsSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettings#isMinimiseFigsSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettingsInternal#isDiagramLayoutSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettingsInternal#isDescendSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettingsInternal#isChangedOnlySelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettings#getInputSourceEncoding()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportCommon#getImportLevel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportCommon#isCreateDiagramsChecked()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportCommon#isMinimiseFigsChecked()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportCommon#isDiagramLayoutSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportCommon#isDescendSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportCommon#isChangedOnlySelected()     */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.reveng.SettingsTypes.BooleanSelection#isSelected()         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.reveng.SettingsTypes.BooleanSelection#getDefaultValue()         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.reveng.ImportSettingTypes.UniqueSelection#getDefaultSelection()         */
WITHOUT_CLASSIFICATION	/*         * We return a new List with the options instead of the options themself         * because we don't want the user to be able to change the options.         *          * @see org.argouml.uml.reveng.SettingsTypes.UniqueSelection#getOptions()         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.reveng.ImportSettingTypes.UniqueSelection#setSelection(int)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#close()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#isCanceled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#notifyMessage(java.lang.String, java.lang.String, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#notifyNullAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#updateMainTask(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#updateSubTask(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.ProgressListener#progress(org.argouml.persistence.ProgressEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetReasserted()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#isValidNamespace(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionNewDiagram#createDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetReasserted()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#isValidNamespace(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetReasserted()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.PropPanel#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.SourcePathController#getSourcePath(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.SourcePathController#getSourcePathSettings()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.SourcePathController#setSourcePath(org.argouml.uml.ui.SourcePathTableModel)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.SourcePathController#setSourcePath(     * java.lang.Object, java.io.File)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.SourcePathController#deleteSourcePath(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.SourcePathController#getAllModelElementsWithSourcePath()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBox2#UMLComboBox2( UMLComboBoxModel2,     *      Action, boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.PropPanel#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetReasserted()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargettableModelView#getTargettableModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#getProfile()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#getModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#formatElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#formatNamespace(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#formatCollection(java.util.Iterator)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildPopup(javax.swing.JPopupMenu, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargettableModelView#getTargettableModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargettableModelView#getTargettableModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#isValidNamespace(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getChoices()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getDialogTitle()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getChoices()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getDialogTitle()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#setSelectedItem(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.Namespace#peekNamespaceElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.Namespace#popNamespaceElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.Namespace#getBaseNamespace()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.Namespace#getCommonNamespace(     *         org.argouml.uml.util.namespace.Namespace)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.Namespace#iterator()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.Namespace#isEmpty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.Namespace#setDefaultScopeToken(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.NamespaceElement#getNamespaceElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.CommandLineInterface#doCommand(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getFacade()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDiagramInterchangeModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getModelEventPump()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getActivityGraphsFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getActivityGraphsHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCollaborationsFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCollaborationsHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCommonBehaviorFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCommonBehaviorHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCoreFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCoreHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDataTypesFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDataTypesHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getExtensionMechanismsFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getExtensionMechanismsHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getModelManagementFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getModelManagementHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getStateMachinesFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getStateMachinesHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUmlFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUmlHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUseCasesFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUseCasesHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getMessageSort()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getMetaTypes()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getChangeableKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getAggregationKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getPseudostateKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getScopeKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getConcurrencyKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDirectionKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getOrderingKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getVisibilityKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getXmiReader()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getXmiWriter(java.lang.Object, java.io.Writer, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCopyHelper()     */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.ui.TabTarget#refresh()         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.     *      AbstractTestActionAddDiagram#getValidNamespaceClasses()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Overridden purely to keep our superclass from removing the listener     * that we just added.     *     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.StateMachinesHelper#getSource(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UseCasesHelper#getAllUseCases(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#addListenersToModel(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#removeClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#addModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#addModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#addModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#addModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#removeModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#removeModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#removeModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#removeModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#addClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#addClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#removeClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ExtensionMechanismsHelper#getStereotypes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.CoreHelper#clearStereotypes(java.lang.Object)     *      * All methods below similarly override methods in CoreHelper.     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.CollaborationsHelper#getAllClassifierRoles(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.CommonBehaviorHelper#getSource(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ActivityGraphsHelper#findClassifierByName(java.lang.Object, java.lang.String)     *     * all methods below similarly implement methods from ActivityGraphsHelper      */
WITHOUT_CLASSIFICATION	/*     * Returns the value of an element's property (tagged value). This method     * makes sure that a Collection of values is returned if and only if the     * property is multivalued (upper multiplicity value greater 1).     *     * @see org.argouml.model.Facade#getValueOfTag(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#removeClassModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#startPumpingEvents()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#stopPumpingEvents()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#flushModelEvents()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AggregationKind#getAggregate()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.PseudostateKind#getChoice()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ChangeableKind#getChangeable()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ScopeKind#getClassifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AggregationKind#getComposite()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ConcurrencyKind#getConcurrent()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.PseudostateKind#getDeepHistory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.PseudostateKind#getFork()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ChangeableKind#getFrozen()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ConcurrencyKind#getGuarded()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.DirectionKind#getInParameter()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.PseudostateKind#getInitial()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.DirectionKind#getInOutParameter()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ScopeKind#getInstance()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.PseudostateKind#getJoin()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.PseudostateKind#getJunction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AggregationKind#getNone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.OrderingKind#getOrdered()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.DirectionKind#getOutParameter()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.VisibilityKind#getPackage()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.VisibilityKind#getPrivate()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.VisibilityKind#getProtected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.VisibilityKind#getPublic()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.DirectionKind#getReturnParameter()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ConcurrencyKind#getSequential()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.PseudostateKind#getShallowHistory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.OrderingKind#getUnordered()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ExtensionMechanismsFactory#createTaggedValue()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.CoreHelper#clearStereotypes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/**     * @see org.argouml.model.CopyHelper#copy(java.lang.Object, java.lang.Object)     *     * Make a copy of element in the given namespace.<p>     *     * This function is a dispatcher that calls the     * copyElement(Element,Namespace) function from XXXFactory.<p>     *     * This function may fail and return null for any of the following reasons:     * <ol>     * <li>No copy function is known for element's type.     * <li>The copy function fails or throws.     * </ol>     *     * @param anelement     *            is the element to copy.     * @param ans     *            the namespace     * @return a copy of element, or null.     *     * @throws IllegalArgumentException     *             if element is null.     */
WITHOUT_CLASSIFICATION	// Because we map both ends of an association we'll see many // names twice //                LOG.log(Level.FINE, "Duplicate property name found - {0}:{1}", new Object[]{typeName, propertyName});
WITHOUT_CLASSIFICATION	/*     * Builds an initialized stereotype with no namespace. A stereotype must     * have a namespace so this method is unsafe. Use buildStereotype(String,     * Object).     *      * @param text     *            is the name of the stereotype     * @return an initialized stereotype.     */
WITHOUT_CLASSIFICATION	/*     * Used by the copy functions. Do not call this function directly.     *      * @param source     *            The stereotype to copy from.     * @param target     *            The object becoming a copy.     */
WITHOUT_CLASSIFICATION	// If the array hasn't been flagged to indicate otherwise // swap elements the elements and add again.
WITHOUT_CLASSIFICATION	// specifies valid elements for a class to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Component to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an ObjectFlowState to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an SimpleState to contain
WITHOUT_CLASSIFICATION	// Extend, but only between two use cases. Remember we draw from the // extension port to the base port.
WITHOUT_CLASSIFICATION	// default parameter name
WITHOUT_CLASSIFICATION	// build all other elements using existing buildNode
WITHOUT_CLASSIFICATION	// There is a bug in the version of MDR (20050711) that // we use  that causes it to fail to delete aggregate // elements which are single valued and where the // aggregate end is listed second in the association // defined in the metamodel. For the UML 1.4 metamodel, // this affects a StateMachine's top StateVertex and // a Transition's Guard.  See issue 4948 & 5227 - tfm // 20080713
WITHOUT_CLASSIFICATION	/*             * In UML 1.3, the name is the only place to store text.             * In UML 1.4, there is a body as well, but some tools             * still seem to use name.             */
WITHOUT_CLASSIFICATION	/*                 * Although not represented in the OCL (or our Java), the                 * English text of WFR #4 of Section 2.10.3.4 in the UML 1.4                 * spec is more restrictive - "[4] A Collaboration may only                 * contain ClassifierRoles and AssociationRoles, the                 * Generalizations and the Constraints between them, and                 * Actions used in the Collaboration's Interactions."                 */
WITHOUT_CLASSIFICATION	/*         * The following from the original NSUML implemenetation was attempting         * to implement WFR #1 from section 2.5.3.32 of the UML 1.4 spec, but if         * there is an owner set, no namespace is valid. The checks for this         * WFR, if desired, need to go in setOwner() and setType() - tfm         */
WITHOUT_CLASSIFICATION	// or //      self.allConnections->forAll( //              r | self.namespace.allContents->excludes //      (r.participant) implies //      self.namespace.clientDependency->exists (d | //      d.oclIsTypeOf(Permission) and //      d.stereotype.name = 'access' and
WITHOUT_CLASSIFICATION	/*     * Return a list of namespaces enclosing this element.     * The list is ordered outer to inner. i.e. it starts at the root model.     */
WITHOUT_CLASSIFICATION	// ScopeKind, VisibilityKind, PseudostateKind, etc // Doesn't include Boolean though, despite what UML 1.4 spec says
WITHOUT_CLASSIFICATION	/*             * For a Namespace:             * <pre>             * [2] The operation allContents results in a Set containing             * all ModelElements contained by the Namespace.             *   allContents : Set(ModelElement);             *   allContents = self.contents             * where             *   contents = self.ownedElement -> union(self.namespace, contents)             * </pre><p>             */
WITHOUT_CLASSIFICATION	/*             * For a Package:             * <pre>             * [3]  The operation allContents results in a Set containing             * the ModelElements owned by or imported             * by the Package or one of its ancestors.             *   allContents : Set(ModelElement);             *   allContents = self.contents->union(             *     self.parent.allContents->select(e |             *          e.elementOwnership.visibility = #public or             *          e.elementOwnership.visibility = #protected))             *             * where the required operations are defined as :             *             * [1] The operation contents results in a Set containing the             * ModelElements owned by or imported by the Package.             *   contents : Set(ModelElement)             *   contents = self.ownedElement->union(self.importedElement)             * [2] The operation allImportedElements results in a Set containing             * the ModelElements imported by the Package or one of its parents.             *   allImportedElements : Set(ModelElement)             *   allImportedElements = self.importedElement->union(             *     self.parent.oclAsType(Package).allImportedElements->select(             *                   re | re.elementImport.visibility = #public or             *                        re.elementImport.visibility = #protected))             * </pre>             */
WITHOUT_CLASSIFICATION	// Get the implementations of this operations and // look for an OpaqueBehavior.
WITHOUT_CLASSIFICATION	// TODO: In UML 2.0, ClassifierRole, AssociationRole, and // AssociationEndRole have been replaced by the internal // structure of the Collaboration
WITHOUT_CLASSIFICATION	// For a Transition use indirection through source StateVertex
WITHOUT_CLASSIFICATION	// TODO: unimplemented //          return ((Property) handle).gets
WITHOUT_CLASSIFICATION	// Removed from UML 2.x and deprecated in Model API // so we won't implement it //        throw new NotImplementedException(); // we do not throw an exception because ArgoUML still uses this
WITHOUT_CLASSIFICATION	// This doesn't work in UML2: both owner and property needed!
WITHOUT_CLASSIFICATION	// TODO: Restructured in UML 2
WITHOUT_CLASSIFICATION	// TODO: Gone in UML 2.1 // It is now an InstanceSpecification with an  // Association as its classifier
WITHOUT_CLASSIFICATION	//list.add("LiteralReal");//UML 2.4 //End LiteralSpecification     
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Link does not exist in UML2, a link is represented just as an // association
WITHOUT_CLASSIFICATION	// Search for our current target language.
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// The attribute 'targetScope' of an AssociationEnd in UML1.x is no // longer supported in UML2.x
WITHOUT_CLASSIFICATION	//        cmd.setObjects(run.getParams().get(0));
WITHOUT_CLASSIFICATION	// handles all children of relationship including extend and // include which are not members of core
WITHOUT_CLASSIFICATION	// Although Usage & Permission are Dependencies, they need to // be include separately because of the way lookup works
WITHOUT_CLASSIFICATION	// The next 3 restrictions for Abstraction seem to be Argo specific // not something the UML spec requires - tfm - 20070215 // There is no need for these because they arn't used by buildConnection() - b00__1 //        {Abstraction.class, org.eclipse.uml2.uml.Class.class, org.eclipse.uml2.uml.Class.class, null, }, //        {Abstraction.class, org.eclipse.uml2.uml.Package.class,org.eclipse.uml2.uml.Package.class, null, }, //        {Abstraction.class, Component.class, Interface.class, null, },
WITHOUT_CLASSIFICATION	// specifies valid elements for a Enumeration to contain
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#equals(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// This module will still register as enabled for UML1.4 but it won't // actually do anything.
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#remove(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#contains(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     *     * This will result in rather bad performance but at least we will     * not violate the contract together with {@link #equals(Object)}.     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#size()     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#isEmpty()     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#iterator()     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#toArray()     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#toArray(java.lang.Object[])     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#add(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#containsAll(java.util.Collection)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#addAll(java.util.Collection)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#retainAll(java.util.Collection)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#removeAll(java.util.Collection)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#clear()     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#addAll(int, java.util.Collection)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#get(int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#set(int, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#add(int, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#remove(int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#indexOf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#lastIndexOf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#listIterator()     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#listIterator(int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#subList(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     *     * This is a rather bad hash solution but with the {@link #equals(Object)}     * defined as below, it is not possible to do better.     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.swidgets.Orientable#setOrientation(Orientation)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Observable#notifyObservers(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see Observable#notifyObservers()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnClass(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getName()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary2()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary3()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary1()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary2()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary3()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getControlTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSystemTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getUserTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getMenuTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSubTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getWindowTitleFont()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnName(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#isCellEditable(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getRowCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getValueAt(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnName(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnClass(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#isCellEditable(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getRowCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getValueAt(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)     */
WITHOUT_CLASSIFICATION	/*     * Updates the button if the current row changes     *     * @see javax.swing.event.TableModelListener#tableChanged(javax.swing.event.TableModelEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * Refresh the table when a critique is enabled/disabled     *     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnName(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnClass(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#isCellEditable(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getRowCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getValueAt(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(     * java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object,     *      java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object,     * java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(     * javax.swing.tree.TreePath, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getRoot()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(     * javax.swing.tree.TreePath, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(     * javax.swing.tree.TreePath, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(     * java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(     * javax.swing.tree.TreePath, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.TreeSelectionListener#valueChanged(javax.swing.event.TreeSelectionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.ModeCreateFigPoly#createNewItem(java.awt.event.MouseEvent, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/*	 * @see javax.swing.table.TableModel#getValueAt(int, int)	 */
WITHOUT_CLASSIFICATION	/*	 * @see javax.swing.table.TableModel#setValueAt(	 *         java.lang.Object, int, int)	 */
WITHOUT_CLASSIFICATION	/*	 * @see javax.swing.table.TableModel#getColumnClass(int)	 */
WITHOUT_CLASSIFICATION	/*	 * @see javax.swing.table.TableModel#isCellEditable(int, int)	 */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.ModelFacade#getClassifier(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#navigateQualified(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type2#navigateParameterizedQuery(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#navigateParameterized(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#conformsTo(tudresden.ocl.check.types.Type)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#equals(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#navigateQualified(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type2#navigateParameterizedQuery(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#navigateParameterized(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#conformsTo(tudresden.ocl.check.types.Type)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#equals(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.persistence.pgml.HandlerFactory#getHandler(     * HandlerStack, Object, String, String, String, Attributes)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.persistence.pgml.PGMLStackParser#setAttrs(     * org.tigris.gef.presentation.Fig, org.xml.sax.Attributes)     */
WITHOUT_CLASSIFICATION	/*     * @see org.xml.sax.EntityResolver#resolveEntity(java.lang.String,     *         java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.filechooser.FileFilter#getDescription()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.filechooser.FileFilter#accept(java.io.File)     */
WITHOUT_CLASSIFICATION	/*     * @see java.io.InputStream#read()     */
WITHOUT_CLASSIFICATION	/*     * @see java.io.InputStream#read(byte[], int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Throwable#printStackTrace()     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#hasState(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Throwable#printStackTrace(java.io.PrintStream)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Throwable#printStackTrace(java.io.PrintWriter)     */
WITHOUT_CLASSIFICATION	/*     * @see ProfileModelLoader#loadModel(ProfileReference)     */
WITHOUT_CLASSIFICATION	/*         * @see java.io.FileFilter#accept(java.io.File)         */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAAdditiveExpressionTail(tudresden.ocl.parser.node.AAdditiveExpressionTail)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAMultiplicativeExpressionTail(tudresden.ocl.parser.node.AMultiplicativeExpressionTail)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAUnaryUnaryExpression(tudresden.ocl.parser.node.AUnaryUnaryExpression)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAPostfixExpressionTail(tudresden.ocl.parser.node.APostfixExpressionTail)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeaturePrimaryExpression(tudresden.ocl.parser.node.AFeaturePrimaryExpression)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAEmptyFeatureCallParameters(tudresden.ocl.parser.node.AEmptyFeatureCallParameters)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeatureCallParameters(tudresden.ocl.parser.node.AFeatureCallParameters)     */
WITHOUT_CLASSIFICATION	/*     * @param node     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAStandardDeclarator(tudresden.ocl.parser.node.AStandardDeclarator)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALetExpression(tudresden.ocl.parser.node.ALetExpression)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAStringLiteral(tudresden.ocl.parser.node.AStringLiteral)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outARealLiteral(tudresden.ocl.parser.node.ARealLiteral)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAIntegerLiteral(tudresden.ocl.parser.node.AIntegerLiteral)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outABooleanLiteral(tudresden.ocl.parser.node.ABooleanLiteral)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAEnumLiteral(tudresden.ocl.parser.node.AEnumLiteral)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALiteralCollection(tudresden.ocl.parser.node.ALiteralCollection)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAExpressionListOrRange(tudresden.ocl.parser.node.AExpressionListOrRange)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAListExpressionListOrRangeTail(tudresden.ocl.parser.node.AListExpressionListOrRangeTail)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getPreferredSize()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getSize()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *      java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowActivated(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowClosed(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowDeactivated(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowDeiconified(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowIconified(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * Tests if enter is pressed in the _bbodField so we need to set the target     * bounds.     *     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.IStatusBar#showStatus(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * Override paint so we can set a flag the first time we're called     * and notify any waiting threads that the splash screen has been     * painted.     * @see java.awt.Component#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary2()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary3()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary1()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary2()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary3()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getControlTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSystemTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getUserTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getMenuTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSubTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getWindowTitleFont()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractAction.AbstractAction()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractAction.AbstractAction(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractAction.AbstractAction(     *       java.lang.String, javax.swing.Icon)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getName()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary2()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary3()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary1()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary2()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary3()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getControlTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSystemTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getUserTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getMenuTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSubTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getWindowTitleFont()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.swidgets.Dialog#nameButtons()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.swidgets.Orientable#setOrientation(org.tigris.swidgets.Orientation)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetAdded(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetRemoved(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*             * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)             */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getLocale()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Window#dispose()     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(     *         java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowClosed(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#setValueAt(     *         java.lang.Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnClass(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#isCellEditable(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowDeactivated(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ListCellRenderer#getListCellRendererComponent(         *         javax.swing.JList, java.lang.Object, int, boolean, boolean)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.JComponent#paintComponent(java.awt.Graphics)         */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowOpened(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * Catches a mouseevent and calls mySingleClick and myDoubleClick if a tab     * is clicked which is selected.     * @see java.awt.event.MouseListener#mouseClicked(MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getRoot()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object,     * java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(javax.swing.tree.TreePath, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.swidgets.Dialog#nameButtons()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getMinimumSize()     *     * sets minimum size to 120,100     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.MenuListener#menuSelected(javax.swing.event.MenuEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.MenuListener#menuDeselected(javax.swing.event.MenuEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.MenuListener#menuCanceled(javax.swing.event.MenuEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.Cmd#undoIt()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *         java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *         java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getColumnClass(int)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#isCellEditable(int, int)         */
WITHOUT_CLASSIFICATION	/*     * Compares obj1 and obj2 sorting by user object type, then name. Diagrams     * are sorted first, then packages, then other types. sorts by name within     * type groups. Nulls are sorted first for names.     *      * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*         * @see         * javax.swing.event.TreeWillExpandListener#treeWillCollapse(javax.swing         * .event.TreeExpansionEvent)         */
WITHOUT_CLASSIFICATION	/*         * Updates stereotype setting, adds all children per treemodel 'build on         * demand' design.         *          * @see         * javax.swing.event.TreeWillExpandListener#treeWillExpand(javax.swing         * .event.TreeExpansionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.event.TreeExpansionListener#treeCollapsed(         * javax.swing.event.TreeExpansionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.event.TreeExpansionListener#treeExpanded(         * javax.swing.event.TreeExpansionEvent) Updates the selection state.         */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeNode#isLeaf()     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * Do string compare of names of UML objects.  Comparison is     * case insensitive using a primary strength collator in the user's     * locale.     *      * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DragSourceListener#dragDropEnd(java.awt.dnd.DragSourceDropEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DragSourceListener#dragEnter(java.awt.dnd.DragSourceDragEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DragSourceListener#dragExit(java.awt.dnd.DragSourceEvent)     */
WITHOUT_CLASSIFICATION	/*     * This is not the correct location to set the cursor.     * The commented out code illustrates the calculation     * of coordinates.     *     * @see java.awt.dnd.DragSourceListener#dragOver(java.awt.dnd.DragSourceDragEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DragSourceListener#dropActionChanged(java.awt.dnd.DragSourceDragEvent)     */
WITHOUT_CLASSIFICATION	/*     * Ok, we've been told to scroll because the mouse cursor is in our     * scroll zone.     * @see java.awt.dnd.Autoscroll#autoscroll(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * Calculate the insets for the *JTREE*, not the viewport the tree is in.     * This makes it a bit messy.     *     * @see java.awt.dnd.Autoscroll#getAutoscrollInsets()     */
WITHOUT_CLASSIFICATION	/*                     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)                     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.dnd.DropTargetListener#dragEnter(java.awt.dnd.DropTargetDragEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.dnd.DropTargetListener#dragExit(java.awt.dnd.DropTargetEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.dnd.DropTargetListener#dropActionChanged(java.awt.dnd.DropTargetDragEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object)         */
WITHOUT_CLASSIFICATION	/*     * @see     * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#getValue(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.util.ChildGenerator#gen(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getRowCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnName(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnClass(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#isCellEditable(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getValueAt(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNodeRelatedEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphListener#nodeAdded(org.tigris.gef.graph.GraphEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphListener#edgeAdded(org.tigris.gef.graph.GraphEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphListener#nodeRemoved(org.tigris.gef.graph.GraphEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphListener#edgeRemoved(org.tigris.gef.graph.GraphEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphListener#graphChanged(org.tigris.gef.graph.GraphEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.Diagram#initialize(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Override setBounds to keep shapes looking right.     * The classifier and state Figs are nicely centered vertically,     * and stretched out over the full width,     * to allow easy selection with the mouse.     * The Fig can only be shrunk to half its original size - so that     * it is not reducible to a few pixels only.     *     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     *     * Override setBounds to keep shapes looking right.     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * Return all ports on node or edge.     *     * @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Return the node or edge that owns the given port.     *     * @see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Return all edges going to given port.     *     * @see org.tigris.gef.graph.GraphModel#getInEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Return all edges going from given port.     *     * @see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Return true if the given object is a valid node in this graph.     *     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Return true if the given object is a valid edge in this graph.     *     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Add the given node to the graph, if valid.     *     * @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNodeRelatedEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Return true if the two given ports can be connected by a     * kind of edge to be determined by the ports.     *     * @see org.tigris.gef.graph.MutableGraphModel#canConnect(java.lang.Object,     * java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphFactory#makeNode()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigGroup#addFig(Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#calcBounds()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigGroup#addFig(Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *         java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getInEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor(     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *         java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * Override setBounds to keep shapes looking right.     *     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.util.Predicate#predicate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getInEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNodeRelatedEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canConnect(java.lang.Object,     *      java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#connect(java.lang.Object,     *      java.lang.Object, java.lang.Class)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.util.Predicate#predicate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Overridden to make it possible to include a stateVertex in a composite     * state.     * @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getUseTrapRect()     */
WITHOUT_CLASSIFICATION	/*     * Override setBounds to keep shapes looking right.     *     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getUseTrapRect()     */
WITHOUT_CLASSIFICATION	/*     * Override setBounds to keep shapes looking right.     *     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * This function only sets the color of the divider line      * (since that is the only visible part), and can be used to make      * the divider line invisible for the top region in a composite state.     *      * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getUseTrapRect()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(         *         java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(         *         java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(         *         java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)         */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getUseTrapRect()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigText#setTextFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.ClipboardOwner#lostOwnership(     *      java.awt.datatransfer.Clipboard, java.awt.datatransfer.Transferable)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#getTransferDataFlavors()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#isDataFlavorSupported(     *         java.awt.datatransfer.DataFlavor)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#getTransferData(     *         java.awt.datatransfer.DataFlavor)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#getTransferDataFlavors()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#isDataFlavorSupported(     *         java.awt.datatransfer.DataFlavor)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#getTransferData(     *         java.awt.datatransfer.DataFlavor)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#classNameAndBounds()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigNode#hitPort(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigGroup#hitFig(java.awt.Rectangle)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#isSelectable()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigNode#getPortFig(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.SelectionButtons#paintButtons(Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DropTargetListener#dragExit(     *         java.awt.dnd.DropTargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DropTargetListener#drop(     *         java.awt.dnd.DropTargetDropEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#translate(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * Overridden to set Argo-specific RenderingHints to determine whether     * or not antialiasing should be turned on.     *     * @see org.tigris.gef.base.Editor#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseMotionListener#mouseMoved(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * Overridden to set Argo-specific RenderingHints to determine whether     * or not antialiasing should be turned on.     *     * @see org.tigris.gef.base.Editor#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.ModeCreatePolyEdge#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * Updates the modelelement container if the fig is moved in or     * out another fig. If this fig doesn't have an enclosing fig     * anymore, the namespace of the diagram will be the owning     * modelelement. If this fig is moved inside another     * FigNodeModelElement the owner of that fignodemodelelement will     * be the owning modelelement.     *     * @see org.tigris.gef.presentation.FigNode#setEnclosingFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getEnclosedFigs()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#classNameAndBounds()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#calcBounds()     */
WITHOUT_CLASSIFICATION	/*     * Necessary since GEF contains some errors regarding the hit subject.     *     * @see org.tigris.gef.presentation.Fig#hit(Rectangle)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigNode#isDragConnectable()     */
WITHOUT_CLASSIFICATION	/*     * Need to 'arm' the rerouting capability with mouseDragged().     * <p>     * Don't arm if the edtior's current mode is a figedge create mode,     * because once a new edge has been created it is not deselected,     * therefore on the next create an unwanted reroute is performed.     *     * @see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * Override setBounds to keep shapes looking right.     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.Command#execute()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphFactory#makeGraphModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphFactory#makeEdge()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphFactory#makeNode()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.SelectionButtons#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.SelectionButtons#paintButtons(Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.SelectionButtons#getNewNode(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.Selection#dragHandle(int, int, int, int,     * org.tigris.gef.presentation.Handle)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * Makes sure that the edges stick to the outline of the fig.     * @see org.tigris.gef.presentation.Fig#getGravityPoints()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#damage()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * If the user double clicks on any part of this FigNode, pass it     * down to one of the internal Figs.  This allows the user to     * initiate direct text editing.     *     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLayer(org.tigris.gef.base.Layer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#hit(java.awt.Rectangle)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * Makes sure that the edges stick to the outline of the fig.     * @see org.tigris.gef.presentation.Fig#getGravityPoints()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*             * @see             * java.awt.event.ActionListener#actionPerformed(java.awt.event.             * ActionEvent)             */
WITHOUT_CLASSIFICATION	/*             * @see             * java.awt.event.ActionListener#actionPerformed(java.awt.event.             * ActionEvent)             */
WITHOUT_CLASSIFICATION	/*             * @see             * java.awt.event.ActionListener#actionPerformed(java.awt.event.             * ActionEvent)             */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.swidgets.Dialog#nameButtons()     */
WITHOUT_CLASSIFICATION	/*     * @see     * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getColumnCount()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getColumnName(int)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getColumnClass(int)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#isCellEditable(int, int)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getRowCount()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getValueAt(int, int)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#setValueAt( java.lang.Object, int,         * int)         */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ListModel#getElementAt(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ListModel#getSize()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ComboBoxModel#setSelectedItem(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ComboBoxModel#getSelectedItem()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireContentsChanged(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalAdded(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * The property value has changed so rebuild our view.     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetAdded(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetRemoved(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(     *          java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(     *          java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.CaretListener#caretUpdate(javax.swing.event.CaretEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ListCellRenderer#getListCellRendererComponent(     * javax.swing.JList, java.lang.Object, int, boolean, boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.text.Document#getDefaultRootElement()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.text.Document#getLength()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.text.Document#render(Runnable r)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.text.Document#getText(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList,     *      java.lang.Object, int, boolean, boolean)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(         *         java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)         */
WITHOUT_CLASSIFICATION	/*             * @see java.lang.Runnable#run()             */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#isCellEditable(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getRowCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getValueAt(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.     * PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.     * PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see     * org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.     * beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalAdded(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalRemoved(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see AbstractAction#actionPerformed(ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.swidgets.Orientable#setOrientation(org.tigris.swidgets.Orientation)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.DefaultListModel#contains(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.DefaultListModel#addElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetAdded(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetRemoved(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireContentsChanged(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalAdded(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalRemoved(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeCellRenderer#getTreeCellRendererComponent(     *      javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int,     *      boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.FocusListener#focusLost(java.awt.event.FocusEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.CaretListener#caretUpdate(javax.swing.event.CaretEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see     * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *      java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.filechooser.FileFilter#accept(java.io.File)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.filechooser.FileFilter#getDescription()     */
WITHOUT_CLASSIFICATION	/*         * @see java.beans.PropertyChangeListener#propertyChange(         *         java.beans.PropertyChangeEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.util.Enumeration#hasMoreElements()         */
WITHOUT_CLASSIFICATION	/*         * @see java.util.Enumeration#nextElement()         */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*         * @see PropertyChangeListener#propertyChange(PropertyChangeEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*      * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * Here we are actually violating the test independance since we keep     * the DetailsPane from test to test. The reason to do this is to make     * it possible to run the tests with less memory requirements.     *     * Hopefully someone might eventually fix the DetailsPane so that it is     * garbage collected properly and this is no longer needed.     *     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#runTest()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*	 * @see TargetListener#targetAdded(TargetEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * @see TargetListener#targetRemoved(TargetEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * @see TargetListener#targetSet(TargetEvent)	 */
WITHOUT_CLASSIFICATION	/*	     * @see TargetListener#targetAdded(TargetEvent)	     */
WITHOUT_CLASSIFICATION	/*	     * @see TargetListener#targetRemoved(TargetEvent)	     */
WITHOUT_CLASSIFICATION	/*	     * @see TargetListener#targetSet(TargetEvent)	     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see AbstractTestActionAddDiagram#getValidNamespaceClasses()     */
WITHOUT_CLASSIFICATION	/*     * @see AbstractTestActionAddDiagram#getValidNamespaceClasses()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see AbstractTestActionAddDiagram#getValidNamespaceClasses()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * This method is overridden in order to ignore change of the y coordinate     * during dragging.     *     * @see org.tigris.gef.presentation.FigNode#superTranslate(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphFactory#makeNode()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *         java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor(     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *         java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	/* end class StartCritics */
WITHOUT_CLASSIFICATION	// initialized in static initializer block below
WITHOUT_CLASSIFICATION	// Needs to happen after initialization is done & modules loaded
WITHOUT_CLASSIFICATION	// create an anonymous class as a kind of adaptor for the cognitive // System to provide proper translation/i18n.
WITHOUT_CLASSIFICATION	// The reason the gui is initialized before the commands are run // is that some of the commands will use the projectbrowser.
WITHOUT_CLASSIFICATION	/*         * Initialize the module loader. At least the plug-ins that provide         * profiles need to be initialized before the project is loaded,         * because some of these profile may have been set as default         * profiles and need to be applied to the project as soon as it has         * been created or loaded. The first instance of a Project is needed         * during the GUI initialization.         */
WITHOUT_CLASSIFICATION	/*         *  The string <code>log4j.configuration</code> is the         *  same string found in         *  {@link org.apache.log4j.Configuration.DEFAULT_CONFIGURATION_FILE}         *  but if we use the reference, then log4j configures itself         *  and clears the system property and we never know if it was         *  set.         *         *  If it is set, then we let the static initializer in         * {@link Argo} perform the initialization.         */
WITHOUT_CLASSIFICATION	/** * A subclass of JPanel that can act as a tab in the DetailsPane or * MultiEditorPane. Added functionality:<p> * * Spawning: When the tab is double-clicked, this JPanel will generate a * separate window of the same size and with the same contents. This is almost * like "tearing off" a tab.<p> * * TODO: Spawning of windows disabled in spawn()<p> * * Title: This JPanel keeps track of its own title.<p> * * Icon: This JPanel keeps track of its own icon; i.e. an arrow pointing to * the panel that it gives details of.<p> * * Orientation: This JPanel is Orientable.<p> * * Cloning: This JPanel may be cloned.<p> * * This class used to be named TabSpawnable. * Renamed since it is not a Tab, but a Panel, and being spawnable is * not any more its main purpose. */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	// Notation events are likely to cause GEF/Swing operations, so we // dispatch them on the Swing event thread as a convenience so that // the receiving notationChanged() methods don't need to deal with it
WITHOUT_CLASSIFICATION	/**     * @param item the todo item     * @param reason the reason TODO: Use it!     * @return <code>true</code> if the argument was a component of this list;     *         <code>false</code> otherwise     * @throws UnresolvableException unable to resolve     */
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // issue resolution
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static accessors
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// This needs to iterate to fill entire output raster if implemented //        return image.copyData(outRaster);
WITHOUT_CLASSIFICATION	// Catch all exceptions and errors, however severe
WITHOUT_CLASSIFICATION	// Notify the user that the modules in the list that are selected // but not enabled were not possible to enable and that are not // selected that we cannot disable. // // Currently we just log this. // // TODO: We could eventually pop up some warning window. //
WITHOUT_CLASSIFICATION	// if we have only one return value and without type, // the return param string is ": ,", we remove it
WITHOUT_CLASSIFICATION	/* If the script of the Action is empty,             * (or only specifies arguments and no method name)             * then we generate a string based on             * a different model element: */
WITHOUT_CLASSIFICATION	/* MMessage */
WITHOUT_CLASSIFICATION	/* MMessage */
WITHOUT_CLASSIFICATION	/* MMessage */
WITHOUT_CLASSIFICATION	/* MMessage */
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	// no state with the given name is found, so we have to // reject the complete user's input
WITHOUT_CLASSIFICATION	/* Now let's check if the new line is already present in             * the old list of internal transitions; if it is, then             * mark the old one to be retained (i.e. do not create a new one),             * if it isn't, continue with parsing:             */
WITHOUT_CLASSIFICATION	// case 1
WITHOUT_CLASSIFICATION	// check for more literals (';' separated):
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#hasState(java.lang.String)     */
WITHOUT_CLASSIFICATION	// if save did not raise an exception // and name+"#" exists move name+"#" to name+"~" // this is the correct backup file
WITHOUT_CLASSIFICATION	// frank: in case of exception // delete name and mv name+"#" back to name if name+"#" exists // this is the "rollback" to old file
WITHOUT_CLASSIFICATION	// Skip the 2 lines //<?xml version="1.0" encoding="UTF-8" ?> //<!DOCTYPE pgml SYSTEM "pgml.dtd">
WITHOUT_CLASSIFICATION	// Search all attributes found to those expected. // If any don't match then turn off the found flag // so that we search for the next matching tag.
WITHOUT_CLASSIFICATION	// Now we're into processing each specific path // item strategy. // At the moment, we only know PathItemPlacement
WITHOUT_CLASSIFICATION	// for compatibility with older format
WITHOUT_CLASSIFICATION	// If we're about to upgrade the file lets take an archive // of it first.
WITHOUT_CLASSIFICATION	// No more we can do here on failure
WITHOUT_CLASSIFICATION	// Write any left over bytes in the input buffer // (perhaps from a partially decoded character)
WITHOUT_CLASSIFICATION	// NOP
WITHOUT_CLASSIFICATION	/** * To persist to and from zargo (zipped file) storage containing seperate * xmi, argo, plgml and todo zip entries. * @author Bob Tarling * TODO: Review use of this against ZargoFilePersister - Bob */
WITHOUT_CLASSIFICATION	// Add the path of the model to the search path, so we can // read dependent models
WITHOUT_CLASSIFICATION	// we only need to add the classloader once // and if and only if there is at least a profile // in the JAR
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeatureCall(tudresden.ocl.parser.node.AFeatureCall)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.Map,     *      java.lang.Object, java.lang.String, java.lang.String,     *      java.lang.Object[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.Map,     *      java.lang.Object, java.lang.String, java.lang.String,     *      java.lang.Object[])     */
WITHOUT_CLASSIFICATION	// TODO: isStatic in UML 2.x
WITHOUT_CLASSIFICATION	// Additional Operations in 4.5.3.8
WITHOUT_CLASSIFICATION	/* 4.5.2.13 Constraint */
WITHOUT_CLASSIFICATION	/* 4.5.2.24 Generalization */
WITHOUT_CLASSIFICATION	/* 4.5.2.28 Namespace */
WITHOUT_CLASSIFICATION	// Do not set buildingModel = false here, // otherwise the action for selection is performed.
WITHOUT_CLASSIFICATION	//        prpTodo = createProperty("label.todo-pane", positions, TabToDo.class); //        prpProperties = //            createProperty("label.properties-pane", //                    positions, TabProps.class); //        prpDocumentation = //            createProperty("label.documentation-pane", //                    positions, TabDocumentation.class); //        prpStyle = //            createProperty("label.style-pane", //                    positions, TabStyle.class); //        prpSource = //            createProperty("label.source-pane", //                    positions, TabSrc.class); //        prpConstraints = //            createProperty("label.constraints-pane", //                    positions, TabConstraints.class); //        prpTaggedValues = //            createProperty("label.tagged-values-pane", //                    positions, TabTaggedValues.class); // //        Property[] propertyList = new Property[] { //            prpTodo, prpProperties, prpDocumentation, prpStyle, //	    prpSource, prpConstraints, prpTaggedValues, //        }; //        Arrays.sort(propertyList); // //        top.add(new JScrollPane(new PropertyTable( //						  propertyList, //						  paneColumnHeader, //						  positionColumnHeader)), //		BorderLayout.CENTER);
WITHOUT_CLASSIFICATION	// Parse the boundary box text. Null is // returned if it is empty or // invalid, which causes no change. Otherwise we tell // GEF we are making // a change, make the change and tell GEF we've // finished.
WITHOUT_CLASSIFICATION	// TODO: Add double click listener 
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary1()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary1()     */
WITHOUT_CLASSIFICATION	// if the current shortcut has been set but is void, then the // current shortcut is not set --> then the default value does not // change
WITHOUT_CLASSIFICATION	// Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	// Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	// Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	// Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	// Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	// Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	// 2. the profile configuration, holding noneditable applied profiles
WITHOUT_CLASSIFICATION	// the text will be set later
WITHOUT_CLASSIFICATION	//    private static final StereotypeView[] stereotypeViewMap; //     //    static { //        stereotypeViewMap = new StereotypeView[3]; //        StereotypeView. //        stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_TEXTUAL] =  //            StereotypeView.TEXTUAL; //        stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_BIG_ICON] =  //            StereotypeView.BIG_ICON; //        stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_SMALL_ICON] =  //            StereotypeView.SMALL_ICON; //    }
WITHOUT_CLASSIFICATION	/** * This class represents all Diagrams within ArgoUML. * It is based upon the GEF Diagram.<p> * * It adds a namespace, and the capability * to delete itself when its namespace is deleted. <p> * * TODO: MVW: I am not sure of the following:<p> * The "namespace" of the diagram is e.g. used when creating new elements * that are shown on the diagram; they will have their namespace set * according this. It is NOT necessarily equal to the "owner". <p> * * MVW: I doubt all following: * The "namespace" of the diagram is e.g. used to register a listener * to the UML model, to be notified if this element is removed; * which will imply that this diagram has to be deleted, too. <p> * * Hence the namespace of e.g. a collaboration diagram should be the * represented classifier or, in case of a represented operation, the * classifier that owns this operation. * And the namespace of the statechart diagram should be * the namespace of its statemachine. */
WITHOUT_CLASSIFICATION	// The fix
WITHOUT_CLASSIFICATION	// A binary association is not a node so reject.
WITHOUT_CLASSIFICATION	// Make all the parts match the main fig
WITHOUT_CLASSIFICATION	// and the stereotypes of its features
WITHOUT_CLASSIFICATION	// stereotype fig covers the name fig:
WITHOUT_CLASSIFICATION	/*         * Notation settings are different since, we know that, at a minimum,         * the isShowPath() setting can change because with implement         * PathContainer, so we make sure that we have a private copy of the         * notation settings.         */
WITHOUT_CLASSIFICATION	// null elements represent new constraints, which will be // added to the target the first time any actual editing // takes place.  This is done to ensure syntactical // correctness of constraints stored with the target.
WITHOUT_CLASSIFICATION	// Mutators hold write lock & will deadlock if use is not thread safe
WITHOUT_CLASSIFICATION	// test with a class and class diagram
WITHOUT_CLASSIFICATION	/**     * Constructor for a {@link FigClass} during file load.<p>     *     * Parent {@link org.argouml.uml.diagram.ui.FigNodeModelElement}     * will have created the main box {@link #getBigPort()} and its     * name {@link #getNameFig()} and stereotype     * (@link #getStereotypeFig()}. This constructor     * creates a box for the attributes and operations.<p>     *     * The properties of all these graphic elements are adjusted     * appropriately. The main boxes are all filled and have     * outlines.      * TODO: which is wrong, since the bigPort is filled, too.     *      * @param element model element to be represented by this fig.     * @param bounds rectangle describing bounds     * @param settings rendering settings     */
WITHOUT_CLASSIFICATION	// When this is called from PGMLStackParser.attachEdges, we finished // the initialization of owning pseudo element (CommentEdge)
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	// Override superclass to do nothing. // Fill property cannot be changed.
WITHOUT_CLASSIFICATION	// Override superclass to do nothing. // Fill property cannot be changed.
WITHOUT_CLASSIFICATION	/** * A Fig designed to be the child of some FigNode or FigEdge to display the * stereotypes of the model element represented by the parent Fig. * Currently, multiple stereotypes are shown stacked one on top of the other, * each enclosed by guillemets.<p> * * The minimum width of this fig is the largest minimum width of its child * figs. The minimum height of this fig is the total minimum height of its child * figs.<p> * * The owner of this Fig is the UML element that is extended * with the stereotypes. We are listening to changes to the model: * addition and removal of stereotypes. <p> * * This fig supports showing one keyword * as the first "stereotype" in the list. <p> * * There is no way to remove a keyword fig, once added. <p> * * TODO: Allow for UML2 style display where all stereotypes are displayed in * the same guillemet pair and are delimited by commas. The style should be * changeable by calling getOrientation(Orientation). The swidget Orientation * class can be used for this. * @author Bob Tarling */
WITHOUT_CLASSIFICATION	// The source of an association end should not // be the classifier. If it is the user has drawn the wrong way // round so we swap here.
WITHOUT_CLASSIFICATION	/* We want to maintain a minimum width for the fig. Also, add the border         * dimensions to the minimum space required for its contents:         */
WITHOUT_CLASSIFICATION	// Make sure we don't try to set things smaller than the minimum
WITHOUT_CLASSIFICATION	/*         * If requested height equals needed height then do nothing; it fits         * exactly.         */
WITHOUT_CLASSIFICATION	//        LOG.log(Level.FINE, "Slope = " + theta / Math.PI + "PI " //                + theta / Math.PI * 180.0);
WITHOUT_CLASSIFICATION	/* Test-case for the above code:          * Draw a class.          * Create a stereotype for it by clicking on the prop-panel tool, and          * name it.         * Remove the class from the diagram.         * Drag the class from the explorer on the diagram.         * Select the stereotype in the explorer, and change         * its name in the prop-panel to something longer.         * The longer name does not make the class Fig wider          * unless the above code is added.*/
WITHOUT_CLASSIFICATION	// If we have no source and dest connector then we assume this is // load of an old UML1.4 diagram from before this data was saved // in PGML. For UML1.4 we can assume the source is first connection // and destination is last connection stored in repository for this // association.
WITHOUT_CLASSIFICATION	// Note that "multiplicity" is what is the notation is listening // for in UML1.4 "uppervalue" are listened to in UML2. It is not // currently why it is not required to register for "lowerValue" // also.
WITHOUT_CLASSIFICATION	// Some subclasses will try to use this
WITHOUT_CLASSIFICATION	// FigClass calls setBoundsImpl before we set // the stereotypeFigProfileIcon
WITHOUT_CLASSIFICATION	// TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	// TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	// TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	// Perhaps something like the following would workd.  If not, then // traverse up the component hierarchy to a MultEditorPane //        Rectangle drawingArea = //            Globals.curEditor().getJComponent().getVisibleRect();
WITHOUT_CLASSIFICATION	// Default implementation is to do nothing
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // // Methods that implement the GraphModel itself // ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // // Methods that implement the VetoableChangeListener interface // ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// Only interested in the "ownedElement" property. Either something has // been added to the namespace for this model, or removed. In the // latter case the "something" will be in the old value of the // property, which is the collection of owned elements, and the new value // will be the element import describing the model element and the // model from which it was removed
WITHOUT_CLASSIFICATION	// The figs for the two end nodes
WITHOUT_CLASSIFICATION	// The figs for the two end nodes
WITHOUT_CLASSIFICATION	/**     * Private utility routine to work out the (positive) x coordinate of a     * point on an oval, given the radii and y coordinate.<p>     * TODO: Use this to calculate the separator lines!     *     * @param a  radius in X direction     * @param b  radius in Y direction     * @param y  Y coordinate     * @return   Positive X coordinate for the given Y coordinate     */
WITHOUT_CLASSIFICATION	// the responsibility of determining if the given target is a // correct one for this tab has been moved from the // DetailsPane to the member tabs of the details pane. Reason for // this is that the details pane is configurable and cannot // know what's the correct target for some tab.
WITHOUT_CLASSIFICATION	// If the diagram is empty, GEF won't write anything, leaving us with // an empty (and invalid) file.  Handle this case ourselves to prevent // this from happening.
WITHOUT_CLASSIFICATION	// NOTE: GEF's GIF writer uses Jeff Poskanzer's GIF encoder, but that // saves a copy of the entire image in an internal buffer before // starting work, defeating the whole purpose of our incremental // rendering.
WITHOUT_CLASSIFICATION	// Expressions are DataTypes, not independent model elements // be careful not to reuse them
WITHOUT_CLASSIFICATION	/**     * TODO: The next text was copied - to adapt.     *      * Sets the target. If the old target is an UML Element, it also removes     * the model from the element listener list of the target. If the new target     * is an UML Element, the model is added as element listener to the     * new target. <p>     *     * This function is called when the user changes the target.      * Hence, this shall not result in any UML model changes.<p>     *      * This function looks a lot like the one in UMLComboBoxModel2.     * <p>     * As a possible future extension, we could allow listening to      * other model elements.     *      * @param theNewTarget the new target     */
WITHOUT_CLASSIFICATION	// fire all of the status events
WITHOUT_CLASSIFICATION	// fire all of the profile events
WITHOUT_CLASSIFICATION	// verify isRelevant returns true
WITHOUT_CLASSIFICATION	// DesignGoalsCM checks if the critic isRelevantToGoals of the Designer // this value is always true for the Critic base class so  // DesignerGoal should always return true in this condition
WITHOUT_CLASSIFICATION	// update the priority of the critic to be the same priority as the // decision
WITHOUT_CLASSIFICATION	// check that the model was initialized with one goal
WITHOUT_CLASSIFICATION	// number of goals should now be 0
WITHOUT_CLASSIFICATION	// Arbitrary settings - not used used for testing
WITHOUT_CLASSIFICATION	// FigAssociationRole figassociationrole = new FigAssociationRole();
WITHOUT_CLASSIFICATION	// initialize basic parameters that are // different from Decision.UNSPEC
WITHOUT_CLASSIFICATION	// verify parameters were initialized correctly by the constructor
WITHOUT_CLASSIFICATION	// verify the name property was correctly updated
WITHOUT_CLASSIFICATION	// following the update the priority should be // equivalent to Decision.UNSPEC
WITHOUT_CLASSIFICATION	// test that the category and description are correct
WITHOUT_CLASSIFICATION	// update the values
WITHOUT_CLASSIFICATION	// verify SnoozeOrder starts off not snoozed
WITHOUT_CLASSIFICATION	// snooze and verify its been enabled
WITHOUT_CLASSIFICATION	// snooze and verify its been enabled
WITHOUT_CLASSIFICATION	// test with a class and class diagram
WITHOUT_CLASSIFICATION	// test with a class and class diagram
WITHOUT_CLASSIFICATION	// test with a class and class diagram
WITHOUT_CLASSIFICATION	//            pce = (PropertyChangeEvent) rxdEvent.getSource(); //            assertTrue("Wrong event name", //                    pce.getPropertyName().equals( //                            DiagramAppearance.KEY_DEFAULT_SHADOW_WIDTH.getKey())); //            String value = (String) pce.getOldValue(); //            int i = Integer.parseInt(value); //            assertTrue("Wrong old event value", i == 4); //            assertTrue("Wrong new event value", //                    ((String) pce.getNewValue()).equals("2"));
WITHOUT_CLASSIFICATION	// Change things
WITHOUT_CLASSIFICATION	// Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	// Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	// Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	// Create a different client to bind to the same supplier
WITHOUT_CLASSIFICATION	// success
WITHOUT_CLASSIFICATION	// success
WITHOUT_CLASSIFICATION	// success
WITHOUT_CLASSIFICATION	// success
WITHOUT_CLASSIFICATION	/*         * This comment was included in a previous version (before 1/2005)         * of the test which had this assertion commented out:         * ------         * Interaction should not be removed when removing ClassifierRole...         * maybe if the last message is removed from the interaction but even         * then it's doubtfull since it will probably lead to backward         * compatibility problems in save formats.         * ------         * but my reading of the UML 1.4 specification is that an Interaction         * without at least one message is definitely illegal, so MDR is         * doing the right thing by removing it in this case where we only         * have a single message, which then gets deleted. - tfm         */
WITHOUT_CLASSIFICATION	/*    * Get a list of UML metaclass names from the XMI document.    * <p>    * Though some of the DOM methods such as getAttributes    * may return null values under other conditions,    * in the context of this test    * and assuming a valid XMI file    * none should occur.    * <p>    * Hence there is no special checking for those abnormal    * cases, allowing the test to fail simply with a    * NullPointerException, with this comment indicating that    * either the input data is incorrect or the test needs    * to be improved.    */
WITHOUT_CLASSIFICATION	/**     * Test creating modelelements from a given notation, and then      * re-generate the notation-string again, and check if they are equal.     * Some of these tests are not very usefulll,      * since they may fail on white space differences.      * TODO: White space should best be ignored.      */
WITHOUT_CLASSIFICATION	// changing the sequence only
WITHOUT_CLASSIFICATION	//ok
WITHOUT_CLASSIFICATION	//ok
WITHOUT_CLASSIFICATION	//ok
WITHOUT_CLASSIFICATION	//ok
WITHOUT_CLASSIFICATION	// Make sure the contents match what we expect
WITHOUT_CLASSIFICATION	// Make sure we got what we started with
WITHOUT_CLASSIFICATION	// Clean up our model and the extent that we read profile in to
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// TODO: the following fails due to the XMI writing saving all top level // model elements and because even if there was no empty project, by // creating a class, the undo mechanism in the project manager will // force the creation of an empty project. //        assertEquals(1, profileModels.size());
WITHOUT_CLASSIFICATION	// we recalculate all the activations
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
DEFECT	// TODO: Huge side effect.  Hoist out of parse - tfm // let's load the project
DEFECT	// TODO: This should only be building list up to 'index'
DEFECT	// FIXME: Boundary condition at end of image for non-integral // multiples of BUFFER_HEIGHT
DEFECT	// TODO: We don't really want to do the following, but I'm not sure // what depends on it - tfm - 20070725
DEFECT	// TODO: We can't have a global "current" language // NotationProviderFactory2.setCurrentLanguage(oldLanguage);
DEFECT	// TODO: Use Model.getModelManagementHelper().getPathList(modelElement); // TODO: This will fail with nested Models
DEFECT	/* TODO: We should have all the information that is required in the         * NotationSettings object */
DEFECT	// TODO: This whole block can be deleted when issue 6266 is resolved
DEFECT	/* Dirty fix for issue 1758 (Needs to be amended             * when we start supporting parameters):             */
DEFECT	/* TODO: This does not work! (MVW)                 Model.getFacade().setBody(expr,guard);                 Model.getFacade().setExpression(g,expr); */
DEFECT	/* TODO: In this case, the properties panel                 is not updated with the changed expression! */
DEFECT	// WARNING: the OutputStream version of this doesn't work! - tfm
DEFECT	// WARNING: The GEF implementation of the OutputStream version of  // this method doesn't work - tfm - 20070531
DEFECT	// TODO: Not implemented by eUML
DEFECT	// TODO: The below is not strictly correct, but should // cover the case we deal with.  Using a real XML parser // would be better. // Look for XML document has just a single root element
DEFECT	// This will have problems if the smallest possible // data segment is smaller than the size of the buffer // needed for regex matching
DEFECT	// TODO: Why is this throwing a generic runtime exception?!?!
DEFECT	// TODO: This exception will be thrown during autoscrolling // when the edge of the canvas is reached causing either // the width or height to be "adjusted" to a negative value
DEFECT	// TODO: This exception will be thrown during autoscrolling // when the edge of the canvas is reached causing either // the width or height to be "adjusted" to a negative value
DEFECT	/* Disabled since it gives various problems: e.g. the toolbar icons         * get too wide. Also the default does not give the new java 5.0 looks.        Component tree = ProjectBrowser.getInstance();        SwingUtilities.updateComponentTreeUI(SwingUtilities.getRootPane(tree));        */
DEFECT	// TODO: This error needs to be reported!
DEFECT	// TODO: - should save and restore the last positions of the toolbars
DEFECT	// TODO:  Does anyone use command line? // If so, localization is needed - tfm
DEFECT	// TODO: We should be giving the user more direct feedback
DEFECT	// TODO: Allow adding models to a diagram - issue 4172.
DEFECT	// TODO: The following can be removed if selectAll gets fixed
DEFECT	/* TODO: Update the old and new node above this!                 * This is issue 5079.                 * The old and new UML namespaces are in the event, but                 * how do we know which nodes to refresh?                 * And how to refresh?                  * Not necessarily the namespaces,                  * depending on the perspective. */
DEFECT	/* Many many of these events .. this slows things down: */
DEFECT	// TODO: The following rather than the above is probably the correct // way to search // stereo = findStereotype(obj, null, name);
DEFECT	// Really ought to have a CriticException to throw here.
DEFECT	// Really ought to have a CriticException to throw here.
DEFECT	// TODO: This is only checking immediate siblings when it needs // to be checking all imported elements both here and by our // parents and also taking into account visibility
DEFECT	/**     * There is a possibility that the next step forward takes another path in     * this wizard. To allow for this we must destroy the path already traveled     * by.     * <p>     * TODO: I (Linus) would say that this is really a problem with the Wizard     * implementation since I believe it should be possible to explore a path in     * the wizard and then go back. {@inheritDoc}     */
DEFECT	// TODO: {name} is not expanded for diagram objects
DEFECT	// TODO: {name} is not expanded for diagram objects
DEFECT	//TODO: algorithm is n^2 in number of nodes
DEFECT	/** * A critic to detect when a classifier has to many operations). <p> * * TODO: exclude getter and setter operations from count */
DEFECT	// TODO: This is never executed as Ludos DI work was never // finished.
DEFECT	/**     * Offset in x & y for depth perspective lines of cube.     * TODO: This is the same value as the member 'D'in      * {@link org.tigris.gef.presentation.FigCube}, but there is     * nothing enforcing that correspondence.  Things will probably     * break if they don't match.     */
DEFECT	/** * Class to display graphics for a UML SynchState in a diagram. <p> *  * TODO: If the font increases, the circle should grow, too. * * @author pepargouml@yahoo.es */
DEFECT	// TODO: This is probably an undesirable side effect unless the user // confirms it.  Placing an element on a second diagram is going to // potentially change its namespace. - tfm 20061208
DEFECT	// TODO: assumes public // TODO: This is probably an undesirable side effect unless the user // confirms it.  Placing an element on a second diagram is going to // potentially change its namespace. - tfm 20061208
DEFECT	/**     * Rank the nodes depending on their level (position in hierarchy) and set     * their weight to achieve a proper node-sequence for the layout. Rows     * exceeding the maximum row width are split, if standalone nodes are     * available.     * <p>     * Weight the other nodes to determine their columns.     * <p>     * TODO: Weighting doesn't appear to be working as intended because multiple     * groups of children/specializations get intermixed in name order rather     * than being grouped by their parent/generalization. - tfm - 20070314     */
DEFECT	// Status as of Nov. 2008 - Figs created, property panels exist, more // work required on explorer and assumptions about models not being // nested - tfm
DEFECT	// TODO: This code doesn't look like it will get reached because // any abstraction/realization is going to take the // isAAbstraction leg of the if before it gets to this more // general case. - tfm 20080508
DEFECT	// TODO: make setBounds, calcBounds and updateBounds consistent
DEFECT	/** * A Mode to interpret user input while creating a permission edge. * The permission can connect any model elements including those represented * by edges as well as nodes. * <p> * TODO: In UML 2.x, Permission becomes PackageImport and the class hierarchy * has changed so that it is no longer a subtype of Dependency, so this may * need to be refactored to work correctly. */
DEFECT	// TODO: The size of text figs, which is what we care about most, // isn't computed correctly by GEF. If we got ambitious, we could // recompute a proper size ourselves.
DEFECT	// TODO: Why isn't this calculation for location working?
DEFECT	// TODO: This should probably only update the project when the user // presses Return or focus is lost
DEFECT	// TODO: If ActionCopy is no longer a singleton, how shall //       this work?
DEFECT	/* TODO: Support navigability.      * The code below causes and exception in FigAssociationEndAnnotation. */
DEFECT	// TODO: We currently don't support per-fig settings for most stuff, so // we can just use the defaults that we were given. //        settings = new DiagramSettings(renderSettings);
DEFECT	/**     * Utility function to localize the given string with help text, and show it     * in the status bar of the ArgoUML window. This function is used in favour     * of the inline call to enable later improvements; e.g. it would be     * possible to show a help-balloon.     * <p>     * TODO: Work this out. One matter to possibly improve: show multiple lines.     *     * @param s the given string to be localized and shown     */
DEFECT	// TODO: Why is this clearing the name?!?! - tfm
DEFECT	/*     * TODO: The code implementing this method is from 2003 (see issue 2171) -     * mechanically integrated by tfmorris in May 2007. Needs to be     * reviewed/updated.     *      * @author Decki,Endi,Yayan, Politechnic of Bandung. Computer Departement     * method for changing text of Message     */
DEFECT	/**     * TODO: The code implementing this method is from 2003 (see issue 2171) -     * mechanically integrated by tfmorris in May 2007. Needs to be     * reviewed/updated.     *      * @author Decki,Endi,Yayan, Politechnic of Bandung. Computer Departement     * method for changing text of Message     * @param newOwner     * @param parameter     */
DEFECT	// TODO: We should warn the user we have removed something - tfm
DEFECT	// TODO: We don't really want this to be filled, but if it's not then // the user can't double click in the compartment to add a new literal // Apparently GEF thinks unfilled figs are only selectable by border //        setFilled(false);
DEFECT	// Update attached node figures // TODO: Presumably this should only happen on a add or remove event
DEFECT	// TODO: Shouldn't we throw an exception here?!?!
DEFECT	// TODO: Not yet working for UML2
DEFECT	// TODO: Monitor is getting dismissed before layout is complete
DEFECT	// TODO: This appears to expect that the UML 1.3 tag name // will appear as a property name in an event, but with the // UML 1.4 switch to TagDefinitions, this won't work
DEFECT	/* This does not work (anymore/yet?),	 * since we never have a FigText here: */
DEFECT	/* The next line does not work: */
DEFECT	/* TODO: This does not work - no event arrives. */
DEFECT	/* TODO: If this is an ordered list, then you have to                        add in the right location! */
DEFECT	// TODO: Considering all delete events to be valid like below // is going to cause lots of unecessary work and some problems
DEFECT	// Set the child components to the heights in the array list // calculating the height of any proportional component on the // fly.  FIXME - This assumes that the JLabel and the // component it labels have been added to the parent component // consecutively.
DEFECT	/* TODO: The above statement also refreshes when                          * we are not shown (to be verified) - hence                          * not entirely correct. */
DEFECT	/* TODO: If this is an ordered list, then you have to                        add in the right location! */
DEFECT	// TODO: Considering all delete events to be valid like below // is going to cause lots of unecessary work and some problems
DEFECT	// TODO: This is a tagged value name which will never trigger an event
DEFECT	/* TODO: correctly implement next function          * in the model subsystem for          * issue 1942: */
DEFECT	/**     * Tests CopyHelper without using stereotypes.     * <p>     * The test is using the tree of objects:     *      * <pre>     *              model     *              /   \     *            p1     p2     *           /  \     *      class_  nestedPackage     *                \     *                interface_     *                  \     *                  attribute     * </pre>     *      * TODO: This test doesn't match the MDR implementation because it expects     * the contents of a namespace to be copied.  It is disabled until it can     * be fixed to run with both MDR and eUML. - tfm 20070820     *      * @author Bogdan     */
DEFECT	// TODO: This doesn't work, but should //        Collection elements = Model.getFacade().getRootElements(); //        Model.getUmlHelper().deleteCollection(elements); //        elements = Model.getFacade().getRootElements(); //        assertTrue("Failed to create clean environment", elements.isEmpty());
DEFECT	// TODO: Except this won't work because the names are different which // will cause a test in CheckUMLModelHelper to fail //        remap.put("Core:Permission", "Core:PackageImport");
DEFECT	/* TODO: Why does the next part not work? */
DEFECT	// FIXME: fails here. // The current behavior appears intentional (ie the test is wrong) - tfm //        assertNull("The profile stereotype named \"" //            + ProfileMother.STEREOTYPE_NAME_ST + "\" shouldn't be found.", //            findModelElementFromNamespace( //                StereotypeUtility.getAvailableStereotypes(aClass), //                ProfileMother.STEREOTYPE_NAME_ST, profileModel));
DEFECT	// FIXME: the following throws: // org.argouml.model.InvalidElementException:  // javax.jmi.reflect.InvalidObjectException: Object with  // MOFID 127-0-1-1-(...)000E75 no longer exists. //        applicableTagDefs = tagDefCBModel.getApplicableTagDefinitions(aClass); //        assertNotNull("Tag Definition wasn't found in return value of " //            + "tagDefCBModel.getApplicableTagDefinitions(aClass), " //            + "after loading the project.", //            TestStereotypeUtility.findModelElementNamed( //                ProfileMother.TAG_DEFINITION_NAME_TD, applicableTagDefs));
DEFECT	// TODO: Something might go wrong during processing. We don't really // want to create the model element until the user releases the mouse // in the place expected.
DEFECT	// TODO: We can't have a global "current" language // NotationProviderFactory2.setCurrentLanguage(newLanguage);
DEFECT	// TODO: This works for 90 degree angles, but is suboptimal // for other angles. It should reflect the angle, rather // than just using a negative offset along the same vector
DEFECT	// If we are not visible most likely we're being deleted. // TODO: This indicates a more fundamental problem that  // should be investigated - tfm - 20061230
DEFECT	//TODO i18n: GEF needs to pass us back the description // of what is being done.
DEFECT	// TODO: synchronized is required here as there can be some  // concurrent modification problems when drawing a call message and // having that automatically draw the reply. Maybe fixing the TODO // below will resolve this and the synch can go.
DEFECT	// TODO: Is this next line safe? What happens if there is just one // comment edge or a comment edge and a single message?
DEFECT	// else if the y coordinate is outside of the classifier role, // we fix the y in the max y of the classifier role. // FIXME: We should increase the height of the classifier role,  // don't???
DEFECT	// TODO: not in UML 2
DEFECT	// TODO: Only occurrence of isConcurrent in UML 2.1.1 is in index // it's not on the page that is indexed
DEFECT	// TODO: map UML2 names to UML1.x names //$NON-NLS-1$ //$NON-NLS-1$
DEFECT	// TODO: In UML2.x Event has no parameters. // TODO: Treat ObjectFlowState (this doesn't exist anymore in UML2) // and Classifier
DEFECT	// Appears to be gone from UML 2.x
DEFECT	// This doesn't work in UML2: both owner and property needed!
DEFECT	// This triggers some warnings (in logs) because some elements are // created without an owner (and eResource is null) // TODO: fix this // The warning log (if we would not add the EObject to a resource) would // looks like this: "...WARN [AWT-EventQueue-0] Encountered deleted // object during delete of..."
DEFECT	// FIXME: depends on internal behavior of XmiReaderImpl. // Needed for solving issue 5017.
DEFECT	// TODO: This looks backwards. Left over from issue 2034?
DEFECT	// if this is a feature get the owner of that feature // TODO: Does anything actually make use of this? It can // cause unexpected behaviour.
DEFECT	// TODO: This should be using internalGetAllRealizedInterfaces()
DEFECT	// TODO: Issue 6144. It is proposed to allow any paclage to return as a potential // namespace. Commenting out until this is reviewed and clearly accepted by all.
DEFECT	/* Strange, but the Link.getConnection()         * returns a Collection, not a List!         * This is a bug, compared to the UML standard (IMHO, mvw).         * Hence, the LinkEnd is added to the end instead... */
DEFECT	// TODO: uncomment the following to get the failure. //        assertLoadModel(ISSUE5946_BASE_DIR + "zipped-uml14" //            + "/andromda-profile-datatype/3.3/andromda-profile-datatype-3.3.xml.zip", //            null, "testReadCompressedAndroMDAProfileFileIssue5946");
DEFECT	// if we have anything or multiple elements selected, // we don't do anything // TODO: We need to support multiple selection. // See issue 2552: http://argouml.tigris.org/issues/show_bug.cgi?id=2552
DEFECT	/* These next lines for the case that the current namespace         * is not a valid one... Which of course should not happen,         * but it does - see the project attached to issue 3772.         */
DEFECT	// make it stretch vertically // TODO: The curBody must notify modification
DEFECT	// TODO: Removed from UML2 //$NON-NLS-1$
DEFECT	// TODO: Considering all delete events to be valid like below // is going to cause lots of unecessary work and some problems
DEFECT	// TODO: When the attribute isn't in the diagram // , for exemple: select attribut by Explorer // Then, the refresh isn't auto: we had to click !!
DEFECT	/**     * Builds a message within some interaction related to some assocationrole.     * The message is added as the last in the interaction sequence.     * Furthermore, the message is added as the last to the list of messages     * already attached to the role. Effectively, the already attached messages     * become predecessors of this message.     * TODO: This sets the activator as a side effect. However it is impossible     * to determine the activator at this stage as we don't yet know what the     * action will be of the message we're creating. See issue 5692.     *     * @param inter     *            The Interaction.     * @param role     *            The Association Role.     * @return The newly created Message.     */
DEFECT	// XXX this seems to be a bug of the parser, // it always requires a context
DEFECT	// If we are not visible most likely // we're being deleted. // TODO: This indicates a more fundamental problem that // should be investigated - tfm - 20061230
DEFECT	// TODO: This brute force approach of updating listeners on each // and every event, without checking the event type or any other // information is going to cause lots of InvalidElementExceptions // in subclasses implementations of updateListeners (and they // won't have the event information to make their own decisions)
DEFECT	// else if the y coordinate is outside of the classifier role, // we fix the y in the max y of the classifier role. // FIXME: We should increase the height of the classifier role,  // don't???
DEFECT	// TODO: This doesn't perform well enough with large models to have // it enabled by default. If the performance can't be improved, // perhaps we can introduce a manual "find in explorer tree" action. // selectAll(targets);
DEFECT	// TODO: This only works if the item is visible // (all its parents are expanded) // getExpandedDescendants, makeVisible
DEFECT	/*TODO: Make the tree refresh and expand                                     * really work in all cases!                                     */
DEFECT	/**     * TODO: The code implementing this method is from 2003 (see issue 2171) -     * mechanically integrated by tfmorris in May 2007. Needs to be     * reviewed/updated.     *      * @author Decki,Endi,Yayan, Politechnic of Bandung. Computer Departement     * method for changing text of Message     * @param newOwner model element which should now be listened to     */
DEFECT	// TODO do tests for allInstances (8.5.11), // even though it is not yet supported
DEFECT	// TODO: not in UML 2
DEFECT	// TODO: not in UML 2
DEFECT	// TODO: not in UML 2
DEFECT	// TODO: not in UML 2
DEFECT	// TODO: not in UML 2
DEFECT	// TODO: not in UML 2
DEFECT	// TODO: not in UML 2
DEFECT	/**     * Parse a transition description line of the form:<pre>     *    "event-signature [guard-condition] / action-expression".     * </pre>     *     * A ";" is not interpreted as having any special meaning. <p>     *     * The "event-signature" may be one of the 4     * formats:<ul>     * <li> ChangeEvent: "when(condition)"     * <li> TimeEvent: "after(duration)"     * <li> CallEvent: "a(parameter-list)".     * <li> SignalEvent: any string without ().     * </ul>     *     * Remark: The UML standard does not make a distinction between     * the syntax of a CallEvent and SignalEvent:     * both may have parameters between ().     * For simplicity and user-friendliness, we chose for this distinction.     * If a user wants parameters for a SignalEvent,     * then he may add them in the properties panels, but not on the diagram.     * <p>     *     * An alternative solution would be to create a CallEvent by default,     * and when editing an existing event, do not change the type.<p>     *     * TODO: This function fails when the event-signature contains a "["     * or a "/". See issue 5983 for other cases that were      * a problem in the past.     *     * @param trans the transition object to which this string applies     * @param s     the string to be parsed     * @return      the transition object     * @throws ParseException when no matching [] are found     */
WITHOUT_CLASSIFICATION	//test out the optimizer:
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	/* | this | bean | args | raw bean | */
WITHOUT_CLASSIFICATION	// invokeinterface
WITHOUT_CLASSIFICATION	// astore 4 // store the raw bean
WITHOUT_CLASSIFICATION	/* current stack len = 0 */
WITHOUT_CLASSIFICATION	/* current stack len = 0 */
WITHOUT_CLASSIFICATION	/* local variables | target obj | each oldvalue | */
WITHOUT_CLASSIFICATION	// invokeinterface // invoke Enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	// putfield // new value of the field
WITHOUT_CLASSIFICATION	// reference type
WITHOUT_CLASSIFICATION	// double
WITHOUT_CLASSIFICATION	// double
WITHOUT_CLASSIFICATION	// long
WITHOUT_CLASSIFICATION	// just decrement the lock, don't recache // (we don't know which transaction won)
WITHOUT_CLASSIFICATION	// decode row selection...
WITHOUT_CLASSIFICATION	//disassembled state gets put in a new array (we write to cache by value!)
WITHOUT_CLASSIFICATION	// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.
WITHOUT_CLASSIFICATION	// CHECK
WITHOUT_CLASSIFICATION	// ROW ID
WITHOUT_CLASSIFICATION	// COMPOSITE-ID
WITHOUT_CLASSIFICATION	// DISCRIMINATOR
WITHOUT_CLASSIFICATION	/*				 * Property prop = new Property(); prop.setName("id");				 * prop.setPropertyAccessorName("embedded"); prop.setValue(id);				 * entity.setIdentifierProperty(prop);				 */
WITHOUT_CLASSIFICATION	// DYNAMIC INSERT
WITHOUT_CLASSIFICATION	// PERSISTER
WITHOUT_CLASSIFICATION	// get meta's from <subclass>
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// generated properties can *never* be insertable...
WITHOUT_CLASSIFICATION	// TABLE
WITHOUT_CLASSIFICATION	//by default, natural-ids are "immutable" (constant)
WITHOUT_CLASSIFICATION	// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);
WITHOUT_CLASSIFICATION	// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result
WITHOUT_CLASSIFICATION	/**	 * Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements	 *	 * @param resultSetElem The element containing the return definitions.	 * @param path No clue...	 * @param mappings The current processing state.	 * @return The description of the mappings...	 */
WITHOUT_CLASSIFICATION	//	private boolean showSql; //	private boolean formatSql;
WITHOUT_CLASSIFICATION	//	public boolean isShowSqlEnabled() { //		return showSql; //	} // //	public boolean isFormatSqlEnabled() { //		return formatSql; //	}
WITHOUT_CLASSIFICATION	/**	 * Set a custom entity resolver. This entity resolver must be	 * set before addXXX(misc) call.	 * Default value is {@link org.hibernate.util.DTDEntityResolver}	 *	 * @param entityResolver entity resolver to use	 */
WITHOUT_CLASSIFICATION	//			final List extendsQueue,
WITHOUT_CLASSIFICATION	// If close() is called, guarantee unbind()
WITHOUT_CLASSIFICATION	// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.
WITHOUT_CLASSIFICATION	// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.
WITHOUT_CLASSIFICATION	//cannot be instantiated
WITHOUT_CLASSIFICATION	// 60 second lock timeout
WITHOUT_CLASSIFICATION	// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//			option.setDataVersion( NonLockingDataVersion.INSTANCE );
WITHOUT_CLASSIFICATION	// do the put outside the scope of the JTA txn
WITHOUT_CLASSIFICATION	//ignore!
WITHOUT_CLASSIFICATION	// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...
WITHOUT_CLASSIFICATION	//60 seconds
WITHOUT_CLASSIFICATION	//ignore!
WITHOUT_CLASSIFICATION	//60 seconds
WITHOUT_CLASSIFICATION	//do the failfast put outside the scope of the JTA txn
WITHOUT_CLASSIFICATION	// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated
WITHOUT_CLASSIFICATION	//    protected RegionRootListener listener;
WITHOUT_CLASSIFICATION	// Establish the region root node with a non-locking data version
WITHOUT_CLASSIFICATION	// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)
WITHOUT_CLASSIFICATION	// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            
WITHOUT_CLASSIFICATION	// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root
WITHOUT_CLASSIFICATION	// Don't hold a transactional lock for this 
WITHOUT_CLASSIFICATION	// Make sure the root node for the region exists and  // has a DataVersion that never complains
WITHOUT_CLASSIFICATION	// Never evict this node
WITHOUT_CLASSIFICATION	// Fix up the resident flag
WITHOUT_CLASSIFICATION	// 60 seconds
WITHOUT_CLASSIFICATION	// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists
WITHOUT_CLASSIFICATION	// no-op. We don't own the cache so we shouldn't stop it.
WITHOUT_CLASSIFICATION	// This should only be possible if the caches are constructor injected 
WITHOUT_CLASSIFICATION	// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted
WITHOUT_CLASSIFICATION	// Set up the cache factory
WITHOUT_CLASSIFICATION	// See if the user configured a multiplexer stack
WITHOUT_CLASSIFICATION	// Default to collections sharing entity cache if there is one
WITHOUT_CLASSIFICATION	// Default to sharing the entity cache if there is one
WITHOUT_CLASSIFICATION	// For Timestamps, we default to a separate config
WITHOUT_CLASSIFICATION	// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that
WITHOUT_CLASSIFICATION	// Configure the cache to use our TM
WITHOUT_CLASSIFICATION	// Make sure JBC doesn't look one up
WITHOUT_CLASSIFICATION	// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start
WITHOUT_CLASSIFICATION	// Make sure we don't re-release the same cache
WITHOUT_CLASSIFICATION	// We use a different delegate than the non-optimistic superclass default
WITHOUT_CLASSIFICATION	// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here
WITHOUT_CLASSIFICATION	// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation
WITHOUT_CLASSIFICATION	// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication
WITHOUT_CLASSIFICATION	// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit
WITHOUT_CLASSIFICATION	// Double check the distributed cache
WITHOUT_CLASSIFICATION	// Get an exclusive right to update JBC for this key from this node.
WITHOUT_CLASSIFICATION	// We ensure ASYNC semantics (JBCACHE-1175)
WITHOUT_CLASSIFICATION	// Initial load from JBC
WITHOUT_CLASSIFICATION	// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase
WITHOUT_CLASSIFICATION	// We ensure ASYNC semantics (JBCACHE-1175)
WITHOUT_CLASSIFICATION	// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer
WITHOUT_CLASSIFICATION	// The standard comparator types are not Serializable but are singletons
WITHOUT_CLASSIFICATION	// ignore!
WITHOUT_CLASSIFICATION	// ignore it
WITHOUT_CLASSIFICATION	// construct the cache
WITHOUT_CLASSIFICATION	// local cache, so we use synchronization
WITHOUT_CLASSIFICATION	// local cache, so we use synchronization
WITHOUT_CLASSIFICATION	//ie. 60 seconds
WITHOUT_CLASSIFICATION	//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.
WITHOUT_CLASSIFICATION	/*DataSource unpooled = DataSources.unpooledDataSource(				jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS)			);*/
WITHOUT_CLASSIFICATION	// TRUE if the pool is borrowed from the outside, FALSE if we used to create it
WITHOUT_CLASSIFICATION	// get a connection from the pool (thru DriverManager, cfr. Proxool doc)
WITHOUT_CLASSIFICATION	// set the Transaction Isolation if defined
WITHOUT_CLASSIFICATION	// toggle autoCommit to false if set
WITHOUT_CLASSIFICATION	// return the connection
WITHOUT_CLASSIFICATION	// Get the configurator files (if available)
WITHOUT_CLASSIFICATION	// Default the Proxool alias setting
WITHOUT_CLASSIFICATION	// Validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	// Validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	// Append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	// Set the existing pool flag to true
WITHOUT_CLASSIFICATION	// Configured using the JAXP Configurator
WITHOUT_CLASSIFICATION	// Validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	// Append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	// Append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	// Configured using the Properties File Configurator
WITHOUT_CLASSIFICATION	// Remember Isolation level
WITHOUT_CLASSIFICATION	// If the provider was leeching off an existing pool don't close it
WITHOUT_CLASSIFICATION	// We have created the pool ourselves, so shut it down
WITHOUT_CLASSIFICATION	// not really a many-to-one association *necessarily*
WITHOUT_CLASSIFICATION	// not really a many-to-one association *necessarily*
WITHOUT_CLASSIFICATION	//always overwrite nonversioned data
WITHOUT_CLASSIFICATION	//public Currency getCurrency(int col) throws HibernateException;
WITHOUT_CLASSIFICATION	// default is POJO
WITHOUT_CLASSIFICATION	// use setParameter for null values
WITHOUT_CLASSIFICATION	// use setParameter for null values
WITHOUT_CLASSIFICATION	//private CacheEntry cacheEntry;
WITHOUT_CLASSIFICATION	// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail
WITHOUT_CLASSIFICATION	//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!
WITHOUT_CLASSIFICATION	// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array
WITHOUT_CLASSIFICATION	// this entity defines proeprty generation, so process those generated // values...
WITHOUT_CLASSIFICATION	// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).
WITHOUT_CLASSIFICATION	/*!persister.isCacheInvalidationRequired()*/
WITHOUT_CLASSIFICATION	// need to look it up from the persistence-context
WITHOUT_CLASSIFICATION	//sort first by role name
WITHOUT_CLASSIFICATION	//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!
WITHOUT_CLASSIFICATION	//then by fk
WITHOUT_CLASSIFICATION	// nothing to do		
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)
WITHOUT_CLASSIFICATION	// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner
WITHOUT_CLASSIFICATION	//			boolean put = persister.getCache().insert(ck, cacheEntry);
WITHOUT_CLASSIFICATION	// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush
WITHOUT_CLASSIFICATION	//do nothing - we only need to notify the cache...
WITHOUT_CLASSIFICATION	//sort first by entity name
WITHOUT_CLASSIFICATION	//then by id
WITHOUT_CLASSIFICATION	// to be safe...
WITHOUT_CLASSIFICATION	// no transformations took place, so handle it as we would a // non-instrumented class
WITHOUT_CLASSIFICATION	// see if the entry represents a class file
WITHOUT_CLASSIFICATION	// see if the entry represents a class file
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	//test out the optimizer:
WITHOUT_CLASSIFICATION	// set the name of bulk accessor.
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// invokespecial
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// aload_1 // load bean
WITHOUT_CLASSIFICATION	// checkcast // cast bean
WITHOUT_CLASSIFICATION	// astore_3 // store bean
WITHOUT_CLASSIFICATION	// aload_2 // args
WITHOUT_CLASSIFICATION	// iconst_i // continue to aastore // growing stack is 1
WITHOUT_CLASSIFICATION	// new
WITHOUT_CLASSIFICATION	// dup
WITHOUT_CLASSIFICATION	// aload_3 // load the raw bean
WITHOUT_CLASSIFICATION	// invokeinterface
WITHOUT_CLASSIFICATION	// invokevirtual
WITHOUT_CLASSIFICATION	// invokevirtual
WITHOUT_CLASSIFICATION	// aastore // args
WITHOUT_CLASSIFICATION	/* | this | bean | args | i | raw bean | exception | */
WITHOUT_CLASSIFICATION	// required to exception table // iconst_0 // i
WITHOUT_CLASSIFICATION	// istore_3 // store i
WITHOUT_CLASSIFICATION	// aload_1 // load the bean
WITHOUT_CLASSIFICATION	// checkcast // cast the bean into a raw bean
WITHOUT_CLASSIFICATION	/* current stack len = 0 */
WITHOUT_CLASSIFICATION	// start region to handling exception (BulkAccessorException)
WITHOUT_CLASSIFICATION	// iinc 3, 1
WITHOUT_CLASSIFICATION	// aload 4 // load the raw bean
WITHOUT_CLASSIFICATION	// aload_2 // load the args
WITHOUT_CLASSIFICATION	// iconst_i
WITHOUT_CLASSIFICATION	// aaload
WITHOUT_CLASSIFICATION	// checkcast
WITHOUT_CLASSIFICATION	// checkcast (case of primitive type) // invokevirtual (case of primitive type)
WITHOUT_CLASSIFICATION	// checkcast (case of reference type)
WITHOUT_CLASSIFICATION	/* current stack len = 2 */
WITHOUT_CLASSIFICATION	// end region to handling exception (BulkAccessorException)
WITHOUT_CLASSIFICATION	// register in exception table
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// dup
WITHOUT_CLASSIFICATION	// invokevirtual
WITHOUT_CLASSIFICATION	// checkcast
WITHOUT_CLASSIFICATION	/* local variables | target obj | each oldvalue | */
WITHOUT_CLASSIFICATION	// astore 5 // store exception
WITHOUT_CLASSIFICATION	// new // BulkAccessorException
WITHOUT_CLASSIFICATION	// aload 5 // load exception
WITHOUT_CLASSIFICATION	// iload_3 // i
WITHOUT_CLASSIFICATION	// invokespecial // BulkAccessorException.<init>
WITHOUT_CLASSIFICATION	// athrow
WITHOUT_CLASSIFICATION	// WARNING: classfile only
WITHOUT_CLASSIFICATION	//swallow
WITHOUT_CLASSIFICATION	/* local variable | this | */
WITHOUT_CLASSIFICATION	// aload_0 // load this
WITHOUT_CLASSIFICATION	// aload_0 // load this
WITHOUT_CLASSIFICATION	// getfield // get field "$JAVASSIST_CALLBACK" defined already
WITHOUT_CLASSIFICATION	// areturn // return the value of the field
WITHOUT_CLASSIFICATION	/* local variables | this | callback | */
WITHOUT_CLASSIFICATION	// aload_1 // load callback
WITHOUT_CLASSIFICATION	// putfield // put field "$JAVASSIST_CALLBACK" defined already
WITHOUT_CLASSIFICATION	// case of non-static field
WITHOUT_CLASSIFICATION	// getfield // get each field
WITHOUT_CLASSIFICATION	// invokeinterface // invoke Enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	// ifnonnull
WITHOUT_CLASSIFICATION	// *return // each type
WITHOUT_CLASSIFICATION	// *return // each type
WITHOUT_CLASSIFICATION	// *store_1 // each type
WITHOUT_CLASSIFICATION	// ldc // name of the field
WITHOUT_CLASSIFICATION	// *load_1 // each type
WITHOUT_CLASSIFICATION	// invokeinterface // invoke Callback.read*() // each type
WITHOUT_CLASSIFICATION	// int
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// dup
WITHOUT_CLASSIFICATION	// invokeinterface
WITHOUT_CLASSIFICATION	// checkcast
WITHOUT_CLASSIFICATION	// checkcast
WITHOUT_CLASSIFICATION	// invokeinterface // enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	// invokeinterface // enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	// ifnonnull (label1)
WITHOUT_CLASSIFICATION	// *load_1
WITHOUT_CLASSIFICATION	// *load_1
WITHOUT_CLASSIFICATION	// putfield
WITHOUT_CLASSIFICATION	// return ;
WITHOUT_CLASSIFICATION	// ldc // field name
WITHOUT_CLASSIFICATION	// getfield // old value of the field
WITHOUT_CLASSIFICATION	// invokeinterface // callback.write*(..)
WITHOUT_CLASSIFICATION	// reference type
WITHOUT_CLASSIFICATION	// reference type
WITHOUT_CLASSIFICATION	// not array
WITHOUT_CLASSIFICATION	// array of reference type
WITHOUT_CLASSIFICATION	// boolean
WITHOUT_CLASSIFICATION	// byte
WITHOUT_CLASSIFICATION	// char
WITHOUT_CLASSIFICATION	// short
WITHOUT_CLASSIFICATION	// double
WITHOUT_CLASSIFICATION	// float
WITHOUT_CLASSIFICATION	// float
WITHOUT_CLASSIFICATION	// long
WITHOUT_CLASSIFICATION	// long
WITHOUT_CLASSIFICATION	// bad type
WITHOUT_CLASSIFICATION	// bad type
WITHOUT_CLASSIFICATION	// boolean, byte, char, int, short
WITHOUT_CLASSIFICATION	// boolean, byte, char, int, short
WITHOUT_CLASSIFICATION	// reference type
WITHOUT_CLASSIFICATION	// double
WITHOUT_CLASSIFICATION	// float
WITHOUT_CLASSIFICATION	// float
WITHOUT_CLASSIFICATION	// long
WITHOUT_CLASSIFICATION	// bad type
WITHOUT_CLASSIFICATION	// bad type
WITHOUT_CLASSIFICATION	// boolean, byte, char, int, short
WITHOUT_CLASSIFICATION	// skip finalize methods
WITHOUT_CLASSIFICATION	//Mainly for OSCache
WITHOUT_CLASSIFICATION	//decrement the lock
WITHOUT_CLASSIFICATION	// create new lock that times out immediately
WITHOUT_CLASSIFICATION	//recache the updated state
WITHOUT_CLASSIFICATION	// noop
WITHOUT_CLASSIFICATION	//null clientLock is remotely possible but will never happen in practice
WITHOUT_CLASSIFICATION	// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp
WITHOUT_CLASSIFICATION	//by requiring <, we rely on lock timeout in the case of an unsuccessful update!
WITHOUT_CLASSIFICATION	// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.
WITHOUT_CLASSIFICATION	// disassemble positional parameters
WITHOUT_CLASSIFICATION	// disassemble named parameters
WITHOUT_CLASSIFICATION	//ie. 60 seconds
WITHOUT_CLASSIFICATION	// noop
WITHOUT_CLASSIFICATION	//noop
WITHOUT_CLASSIFICATION	//noop
WITHOUT_CLASSIFICATION	// this is called from SettingsFactory irregardless; trivial to simply disregard
WITHOUT_CLASSIFICATION	// Do nothing; subclasses may override.
WITHOUT_CLASSIFICATION	// Do nothing; subclasses may override.
WITHOUT_CLASSIFICATION	//throw new UnsupportedOperationException("Can't write to a readonly object");
WITHOUT_CLASSIFICATION	//assembled state gets put in a new array (we read from cache by value!)
WITHOUT_CLASSIFICATION	//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load
WITHOUT_CLASSIFICATION	// no-op; CCS did not have such a concept
WITHOUT_CLASSIFICATION	// no-op; CCS did not have such a concept
WITHOUT_CLASSIFICATION	// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.
WITHOUT_CLASSIFICATION	// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction
WITHOUT_CLASSIFICATION	// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction
WITHOUT_CLASSIFICATION	// classes mentioned in extends not available - so put it in queue
WITHOUT_CLASSIFICATION	// get meta's from <hibernate-mapping>
WITHOUT_CLASSIFICATION	// get meta's from <class>
WITHOUT_CLASSIFICATION	// DB-OBJECTNAME
WITHOUT_CLASSIFICATION	// MUTABLE
WITHOUT_CLASSIFICATION	// WHERE
WITHOUT_CLASSIFICATION	// CHECK
WITHOUT_CLASSIFICATION	// POLYMORPHISM
WITHOUT_CLASSIFICATION	// TODO:
WITHOUT_CLASSIFICATION	// ID
WITHOUT_CLASSIFICATION	// VERSION / TIMESTAMP
WITHOUT_CLASSIFICATION	// DISCRIMINATOR
WITHOUT_CLASSIFICATION	// Primary key constraint
WITHOUT_CLASSIFICATION	// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag
WITHOUT_CLASSIFICATION	// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...
WITHOUT_CLASSIFICATION	// DISCRIMINATOR
WITHOUT_CLASSIFICATION	// ( (Column) discrim.getColumnIterator().next() ).setType(type);
WITHOUT_CLASSIFICATION	// go ahead and set the lazy here, since pojo.proxy can override it.
WITHOUT_CLASSIFICATION	// DYNAMIC UPDATE
WITHOUT_CLASSIFICATION	// IMPORT
WITHOUT_CLASSIFICATION	// BATCH SIZE
WITHOUT_CLASSIFICATION	// SELECT BEFORE UPDATE
WITHOUT_CLASSIFICATION	// OPTIMISTIC LOCK MODE
WITHOUT_CLASSIFICATION	// PERSISTER
WITHOUT_CLASSIFICATION	// CUSTOM SQL
WITHOUT_CLASSIFICATION	// get meta's from <subclass>
WITHOUT_CLASSIFICATION	// properties
WITHOUT_CLASSIFICATION	// joined subclasses
WITHOUT_CLASSIFICATION	// KEY
WITHOUT_CLASSIFICATION	// CHECK
WITHOUT_CLASSIFICATION	// CUSTOM SQL
WITHOUT_CLASSIFICATION	// properties
WITHOUT_CLASSIFICATION	// KEY
WITHOUT_CLASSIFICATION	// model.getKey().setType( new Type( model.getIdentifier() ) );
WITHOUT_CLASSIFICATION	// TABLENAME
WITHOUT_CLASSIFICATION	// join.getKey().setType( new Type( lazz.getIdentifier() ) );
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// COLUMN(S)
WITHOUT_CLASSIFICATION	// column index
WITHOUT_CLASSIFICATION	//column unique-key
WITHOUT_CLASSIFICATION	// automatically makes a column with the default name if none is specifed by XML
WITHOUT_CLASSIFICATION	// for an any
WITHOUT_CLASSIFICATION	// insertable simply because that is the user did not specify // anything; just override it
WITHOUT_CLASSIFICATION	// the user specifically supplied insert="true", // which constitutes an illegal combo
WITHOUT_CLASSIFICATION	// properties generated on update can never be updateable...
WITHOUT_CLASSIFICATION	// updateable only because the user did not specify  // anything; just override it
WITHOUT_CLASSIFICATION	// the user specifically supplied update="true", // which constitutes an illegal combo
WITHOUT_CLASSIFICATION	// ROLENAME
WITHOUT_CLASSIFICATION	// FETCH STRATEGY
WITHOUT_CLASSIFICATION	// TABLE
WITHOUT_CLASSIFICATION	//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );
WITHOUT_CLASSIFICATION	// SORT
WITHOUT_CLASSIFICATION	// CUSTOM SQL
WITHOUT_CLASSIFICATION	// unsorted, natural, comparator.class.name
WITHOUT_CLASSIFICATION	// ORPHAN DELETE (used for programmer error detection)
WITHOUT_CLASSIFICATION	// set up second pass
WITHOUT_CLASSIFICATION	// an "embedded" component (composite ids and unique) // note that this does not handle nested components
WITHOUT_CLASSIFICATION	// a nested composite element
WITHOUT_CLASSIFICATION	// for an any // we will have to use reflection
WITHOUT_CLASSIFICATION	//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy
WITHOUT_CLASSIFICATION	// use old (HB 2.1) defaults if outer-join is specified
WITHOUT_CLASSIFICATION	//lazy = !join;
WITHOUT_CLASSIFICATION	// GENERATOR
WITHOUT_CLASSIFICATION	// ID UNSAVED-VALUE
WITHOUT_CLASSIFICATION	// VERSION UNSAVED-VALUE
WITHOUT_CLASSIFICATION	// not necessarily a *unique* property reference
WITHOUT_CLASSIFICATION	// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);
WITHOUT_CLASSIFICATION	// contained elements:
WITHOUT_CLASSIFICATION	// for non-inverse one-to-many, with a not-null fk, add a backref!
WITHOUT_CLASSIFICATION	// Bind the where
WITHOUT_CLASSIFICATION	// Bind the order-by
WITHOUT_CLASSIFICATION	// Bind the filters
WITHOUT_CLASSIFICATION	// overriding inherited meta attribute. HBX-621 & HBX-793			
WITHOUT_CLASSIFICATION	// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.
WITHOUT_CLASSIFICATION	// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).
WITHOUT_CLASSIFICATION	//+ "_" + referencedColumnName not used for backward compatibility
WITHOUT_CLASSIFICATION	//SessionFactory name:
WITHOUT_CLASSIFICATION	//JDBC and connection settings:
WITHOUT_CLASSIFICATION	//JDBC and connection settings:
WITHOUT_CLASSIFICATION	//Interrogate JDBC metadata
WITHOUT_CLASSIFICATION	// user supplied JDBC connections
WITHOUT_CLASSIFICATION	//use dialect default properties
WITHOUT_CLASSIFICATION	// Transaction settings:
WITHOUT_CLASSIFICATION	//SQL Generation settings:
WITHOUT_CLASSIFICATION	//Query parser settings:
WITHOUT_CLASSIFICATION	// Second-level / query cache:
WITHOUT_CLASSIFICATION	// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default
WITHOUT_CLASSIFICATION	//SQL Exception converter:
WITHOUT_CLASSIFICATION	//Statistics and logging:
WITHOUT_CLASSIFICATION	//		settings.setShowSqlEnabled(showSql);
WITHOUT_CLASSIFICATION	//		settings.setFormatSqlEnabled(formatSql);
WITHOUT_CLASSIFICATION	//Schema export:
WITHOUT_CLASSIFICATION	//		String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); //		log.info( "Bytecode provider name : " + provider ); //		BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); //		settings.setBytecodeProvider( bytecodeProvider );
WITHOUT_CLASSIFICATION	// legacy behavior, apply the bridge...
WITHOUT_CLASSIFICATION	// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment
WITHOUT_CLASSIFICATION	//if dotted and not load-collection nor return-join //regular property
WITHOUT_CLASSIFICATION	//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 //	private BytecodeProvider bytecodeProvider;
WITHOUT_CLASSIFICATION	// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//	public ComponentTuplizerFactory getComponentTuplizerFactory() { //		return componentTuplizerFactory; //	}
WITHOUT_CLASSIFICATION	// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//	void setShowSqlEnabled(boolean b) { //		showSql = b; //	} // //	void setFormatSqlEnabled(boolean b) { //		formatSql = b; //	}
WITHOUT_CLASSIFICATION	//	public BytecodeProvider getBytecodeProvider() { //		return bytecodeProvider; //	} // //	void setBytecodeProvider(BytecodeProvider bytecodeProvider) { //		this.bytecodeProvider = bytecodeProvider; //	}
WITHOUT_CLASSIFICATION	// using local since the inheritedMetas at this point is not the correct map since it is always the empty map
WITHOUT_CLASSIFICATION	//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907
WITHOUT_CLASSIFICATION	//	protected List extendsQueue;
WITHOUT_CLASSIFICATION	//		extendsQueue = new ArrayList();
WITHOUT_CLASSIFICATION	//		componentTuplizerFactory = new ComponentTuplizerFactory();
WITHOUT_CLASSIFICATION	// if doc is null, then for whatever reason, the cached file cannot be used...
WITHOUT_CLASSIFICATION	// drop them in reverse order in case db needs it done that way...
WITHOUT_CLASSIFICATION	//	public ComponentTuplizerFactory getComponentTuplizerFactory() { //		return componentTuplizerFactory; //	}
WITHOUT_CLASSIFICATION	// This method may be called many times!!
WITHOUT_CLASSIFICATION	//			Iterator iterator = extendsQueue.iterator();
WITHOUT_CLASSIFICATION	//		Iterator iter = extendsQueue.iterator();
WITHOUT_CLASSIFICATION	// found
WITHOUT_CLASSIFICATION	// found
WITHOUT_CLASSIFICATION	//		settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );
WITHOUT_CLASSIFICATION	//	private final List extendsQueue;
WITHOUT_CLASSIFICATION	//<String, String>
WITHOUT_CLASSIFICATION	//<String, String>
WITHOUT_CLASSIFICATION	//+ "_" + referencedColumnName not used for backward compatibility
WITHOUT_CLASSIFICATION	//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227
WITHOUT_CLASSIFICATION	//orphan delete not supported for EntityMode.DOM4J
WITHOUT_CLASSIFICATION	//element = XMLHelper.generateDom4jElement( persister.getNodeName() );
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	//orphan delete not supported for EntityMode.DOM4J
WITHOUT_CLASSIFICATION	//element = XMLHelper.generateDom4jElement( persister.getNodeName() );
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	//maintain correct duplication if loaded in a cartesian product
WITHOUT_CLASSIFICATION	// the element has been removed from the set
WITHOUT_CLASSIFICATION	// the element has changed
WITHOUT_CLASSIFICATION	//Careful: these methods do not initialize the collection.
WITHOUT_CLASSIFICATION	//needed so that we remove this collection from the second-level cache
WITHOUT_CLASSIFICATION	// override on some subclasses
WITHOUT_CLASSIFICATION	//override on some subclasses
WITHOUT_CLASSIFICATION	//do this bit after setting initialized to true or it will recurse
WITHOUT_CLASSIFICATION	// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither
WITHOUT_CLASSIFICATION	// create the collection holding the Orphans
WITHOUT_CLASSIFICATION	// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access
WITHOUT_CLASSIFICATION	// iterate over the *old* list
WITHOUT_CLASSIFICATION	/*(array==null) ? tempList.size() :*/
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	/*(array==null) ? tempList.get(i) :*/
WITHOUT_CLASSIFICATION	//write(); -- doesn't
WITHOUT_CLASSIFICATION	//write(); -- doesn't
WITHOUT_CLASSIFICATION	// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	// finally, what it's all about...
WITHOUT_CLASSIFICATION	// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead
WITHOUT_CLASSIFICATION	// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!
WITHOUT_CLASSIFICATION	//a shortcut if its location didn't change!
WITHOUT_CLASSIFICATION	//search for it //note that this code is incorrect for other than one-to-many
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	//a shortcut if its location didn't change!
WITHOUT_CLASSIFICATION	//search for it //note that this code is incorrect for other than one-to-many
WITHOUT_CLASSIFICATION	/*public boolean equals(Object other) {		read();		return bag.equals(other);	}	public int hashCode(Object other) {		read();		return bag.hashCode();	}*/
WITHOUT_CLASSIFICATION	// List OPERATIONS:
WITHOUT_CLASSIFICATION	//pad with nulls from the current last element up to the new index
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	// from Map
WITHOUT_CLASSIFICATION	// from SortedMap
WITHOUT_CLASSIFICATION	//inject the data
WITHOUT_CLASSIFICATION	// cannot be instantiated
WITHOUT_CLASSIFICATION	//default pool size 20
WITHOUT_CLASSIFICATION	// trying via forName() first to be as close to DriverManager's semantics
WITHOUT_CLASSIFICATION	// if debug level is enabled, then log the password, otherwise mask it
WITHOUT_CLASSIFICATION	// register a cleanup synch
WITHOUT_CLASSIFICATION	// wrap the session in the transaction-protection proxy
WITHOUT_CLASSIFICATION	// then bind it
WITHOUT_CLASSIFICATION	// try to make sure we don't wrap and already wrapped session
WITHOUT_CLASSIFICATION	// allow these to go through the the real session no matter what
WITHOUT_CLASSIFICATION	// limit the methods available if no transaction is active
WITHOUT_CLASSIFICATION	// allow these (deprecated) methods to pass through
WITHOUT_CLASSIFICATION	// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).
WITHOUT_CLASSIFICATION	//cannot be instantiated
WITHOUT_CLASSIFICATION	//private String propertyName;
WITHOUT_CLASSIFICATION	/*public PropertyProjection project() {		return Projections.property(getPropertyName());	}*/
WITHOUT_CLASSIFICATION	//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );
WITHOUT_CLASSIFICATION	//" collection_ where " +
WITHOUT_CLASSIFICATION	//unsupported
WITHOUT_CLASSIFICATION	//unsupported
WITHOUT_CLASSIFICATION	//cannot be instantiated
WITHOUT_CLASSIFICATION	//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries
WITHOUT_CLASSIFICATION	//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set
WITHOUT_CLASSIFICATION	//implicit polymorphism not supported (would need a union)
WITHOUT_CLASSIFICATION	//pull off the last ", "
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	// we have the form: trim(trimSource) //      so we trim leading and trailing spaces
WITHOUT_CLASSIFICATION	// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)
WITHOUT_CLASSIFICATION	// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method
WITHOUT_CLASSIFICATION	// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Oracle did add support for ANSI CASE statements in 9i
WITHOUT_CLASSIFICATION	// the standard SQL function name is current_timestamp...
WITHOUT_CLASSIFICATION	// Informix doesn't have a bit type
WITHOUT_CLASSIFICATION	// or BYTE // or TEXT? // or MONEY
WITHOUT_CLASSIFICATION	// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"
WITHOUT_CLASSIFICATION	// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//pre H3.2 behavior: super.getReturnType(ct, m);
WITHOUT_CLASSIFICATION	// finally use the sqltype if == on Hibernate types did not find a match.
WITHOUT_CLASSIFICATION	//because numeric can be anything
WITHOUT_CLASSIFICATION	// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// standard sql92 functions (can be overridden by subclasses)
WITHOUT_CLASSIFICATION	//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses
WITHOUT_CLASSIFICATION	// register hibernate types for default use in scalar sqlquery type auto detection
WITHOUT_CLASSIFICATION	// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// by default we report no support
WITHOUT_CLASSIFICATION	// by default we report no support for NOWAIT lock semantics
WITHOUT_CLASSIFICATION	// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// grrr... for differentiation of mysql storage engines
WITHOUT_CLASSIFICATION	// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// return false here, as most databases do not properly support this construct...
WITHOUT_CLASSIFICATION	// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	//" cascade";
WITHOUT_CLASSIFICATION	//trim off the length/precision/scale
WITHOUT_CLASSIFICATION	/*public boolean dropTemporaryTableAfterUse() {		//we have to, because postgres sets current tx		//to rollback only after a failed create table		return true;	}*/
WITHOUT_CLASSIFICATION	// CHECK VIOLATION
WITHOUT_CLASSIFICATION	// UNIQUE VIOLATION
WITHOUT_CLASSIFICATION	// FOREIGN KEY VIOLATION
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// NOT NULL VIOLATION
WITHOUT_CLASSIFICATION	// ALL OTHER
WITHOUT_CLASSIFICATION	// Register the type of the out param - PostgreSQL uses Types.OTHER
WITHOUT_CLASSIFICATION	// seems to not really... //	public boolean supportsRowValueConstructorSyntax() { //		return true; //	}
WITHOUT_CLASSIFICATION	// seems to have spotty LOB suppport
WITHOUT_CLASSIFICATION	// HHH-2300
WITHOUT_CLASSIFICATION	// ignore (probably H2 not in the classpath)
WITHOUT_CLASSIFICATION	// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// not null is implicit
WITHOUT_CLASSIFICATION	// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}
WITHOUT_CLASSIFICATION	// Display the dialect version.
WITHOUT_CLASSIFICATION	// The RDMS concat() function only supports 2 parameters
WITHOUT_CLASSIFICATION	// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Original Dialect.java returns " for update";
WITHOUT_CLASSIFICATION	// Verify the state of this new method in Hibernate 3.0 Dialect.java
WITHOUT_CLASSIFICATION	// Origial Dialect.java returns true;
WITHOUT_CLASSIFICATION	// The keyword used to specify a nullable column.
WITHOUT_CLASSIFICATION	// *** Sequence methods - start. The RDMS dialect needs these
WITHOUT_CLASSIFICATION	// methods to make it possible to use the Native Id generator
WITHOUT_CLASSIFICATION	// The where clause was added to eliminate this statement from Brute Force Searches.
WITHOUT_CLASSIFICATION	// *** Sequence methods - end
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400
WITHOUT_CLASSIFICATION	// Used with DROP TABLE to delete all records in the table.
WITHOUT_CLASSIFICATION	// RDMS supports the UNION ALL clause.
WITHOUT_CLASSIFICATION	// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	// Multi-param dialect functions...
WITHOUT_CLASSIFICATION	// function templates
WITHOUT_CLASSIFICATION	//not null is implicit
WITHOUT_CLASSIFICATION	// this assumes schema support, which is present in 1.8.0 and later...
WITHOUT_CLASSIFICATION	// HSQLDB only supports READ_UNCOMMITTED transaction isolation
WITHOUT_CLASSIFICATION	// Multi-param string dialect functions...
WITHOUT_CLASSIFICATION	// Multi-param numeric dialect functions...
WITHOUT_CLASSIFICATION	// Multi-param date dialect functions...
WITHOUT_CLASSIFICATION	// simple nullability constraint
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// not final-static to avoid possible classcast exceptions if using different oracle drivers.
WITHOUT_CLASSIFICATION	//	register the type of the out param - an Oracle specific type
WITHOUT_CLASSIFICATION	// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.
WITHOUT_CLASSIFICATION	// new methods in dialect3
WITHOUT_CLASSIFICATION	/*public boolean supportsForUpdateNowait() {		return false;	}*/
WITHOUT_CLASSIFICATION	// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	// iterate entries ordered by capacity to find first fit
WITHOUT_CLASSIFICATION	// add new ordered map
WITHOUT_CLASSIFICATION	//		registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//		 This assumes you will want to ignore any update counts 
WITHOUT_CLASSIFICATION	// sql server just returns automatically
WITHOUT_CLASSIFICATION	//		return "select CURRENT_TIMESTAMP from RDB$DATABASE";
WITHOUT_CLASSIFICATION	//registerColumnType data types
WITHOUT_CLASSIFICATION	// hibernate seems to ignore this type...
WITHOUT_CLASSIFICATION	// IBID for current_time and current_date
WITHOUT_CLASSIFICATION	// Tell hibernate to use getBytes instead of getBinaryStream
WITHOUT_CLASSIFICATION	// No batch statements
WITHOUT_CLASSIFICATION	/*		 * We might want a special case for 19,2. This is very common for money types		 * and here it is converted to 18,1		 */
WITHOUT_CLASSIFICATION	//no pointbase BIT
WITHOUT_CLASSIFICATION	//no pointbase TINYINT
WITHOUT_CLASSIFICATION	// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)
WITHOUT_CLASSIFICATION	// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table
WITHOUT_CLASSIFICATION	// here assume SQLServer2005 using snapshot isolation, which does not have this problem
WITHOUT_CLASSIFICATION	//		registerColumnType( Types.BLOB, 16777215, "mediumblob" ); //		registerColumnType( Types.BLOB, 65535, "blob" );
WITHOUT_CLASSIFICATION	//		registerColumnType( Types.CLOB, 16777215, "mediumtext" ); //		registerColumnType( Types.CLOB, 65535, "text" );
WITHOUT_CLASSIFICATION	//		registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); //		registerColumnType( Types.VARCHAR, 65535, "text" );
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	/* package-private */
WITHOUT_CLASSIFICATION	// sql server just returns automatically
WITHOUT_CLASSIFICATION	//Sybase BIT type does not support null values
WITHOUT_CLASSIFICATION	//		 This assumes you will want to ignore any update counts
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//		 You may still have other ResultSets or update counts left to process here //		 but you can't do it now or the ResultSet you just got will be closed
WITHOUT_CLASSIFICATION	//not null ... (start with 1) is implicit
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.
WITHOUT_CLASSIFICATION	// Multi-param string dialect functions...
WITHOUT_CLASSIFICATION	// Multi-param numeric dialect functions...
WITHOUT_CLASSIFICATION	// Multi-param date dialect functions...
WITHOUT_CLASSIFICATION	// add another (inner) nested select // add the main query // close off the inner nested select
WITHOUT_CLASSIFICATION	// add the main query
WITHOUT_CLASSIFICATION	//add the restriction to the outer select
WITHOUT_CLASSIFICATION	// This assumes you will want to ignore any update counts 
WITHOUT_CLASSIFICATION	// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	// simple nullability constraint
WITHOUT_CLASSIFICATION	// not final-static to avoid possible classcast exceptions if using different oracle drivers.
WITHOUT_CLASSIFICATION	//	register the type of the out param - an Oracle specific type
WITHOUT_CLASSIFICATION	// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// binary %Stream // character %Stream
WITHOUT_CLASSIFICATION	//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);
WITHOUT_CLASSIFICATION	// hibernate impelemnts cast in Dialect.java
WITHOUT_CLASSIFICATION	// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list
WITHOUT_CLASSIFICATION	// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// below is for Cache' that don't have str in 2007.1 there is str and we register str directly
WITHOUT_CLASSIFICATION	// note that %string is deprecated
WITHOUT_CLASSIFICATION	// %upper is deprecated
WITHOUT_CLASSIFICATION	// The syntax used to add a foreign key constraint to a table.
WITHOUT_CLASSIFICATION	// identifier-commalist
WITHOUT_CLASSIFICATION	// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// identifier-commalist
WITHOUT_CLASSIFICATION	// The syntax used to add a column to a table
WITHOUT_CLASSIFICATION	// Completely optional cascading drop clause.
WITHOUT_CLASSIFICATION	// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	/*<String>*/
WITHOUT_CLASSIFICATION	// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// The keyword used to specify a nullable column.
WITHOUT_CLASSIFICATION	// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?
WITHOUT_CLASSIFICATION	// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?
WITHOUT_CLASSIFICATION	// The name of the SQL function that transforms a string to lowercase
WITHOUT_CLASSIFICATION	// Create an OuterJoinGenerator for this dialect.
WITHOUT_CLASSIFICATION	// The keyword used to insert a row without specifying // any column values
WITHOUT_CLASSIFICATION	//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );
WITHOUT_CLASSIFICATION	//skip the FROM keyword in params
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly
WITHOUT_CLASSIFICATION	// SQLFunction implementation
WITHOUT_CLASSIFICATION	// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap
WITHOUT_CLASSIFICATION	// register the standard dialect resolver
WITHOUT_CLASSIFICATION	// register resolvers set via Environment property
WITHOUT_CLASSIFICATION	// kept for backward compatibility until after the 3.1beta5 release of HA
WITHOUT_CLASSIFICATION	//cache the hashcode
WITHOUT_CLASSIFICATION	// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// delete does cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// orphans should be deleted during delete
WITHOUT_CLASSIFICATION	/*(LockMode) anything*/
WITHOUT_CLASSIFICATION	// lock doesn't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// refresh doesn't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// evicts don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// saves / updates don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// orphans should be deleted during save/update
WITHOUT_CLASSIFICATION	// for deprecated saveOrUpdateCopy()
WITHOUT_CLASSIFICATION	// persists don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	//a proxy cannot be transient and it breaks ForeignKeys.isTransient
WITHOUT_CLASSIFICATION	// replicate does cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// handles arrays and newly instantiated collections
WITHOUT_CLASSIFICATION	// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.
WITHOUT_CLASSIFICATION	// Add these directly to the executions queue
WITHOUT_CLASSIFICATION	// continue loop
WITHOUT_CLASSIFICATION	//sort the updates by fk
WITHOUT_CLASSIFICATION	//sort the updates by pk
WITHOUT_CLASSIFICATION	// the mapping of entity names to their latest batch numbers.
WITHOUT_CLASSIFICATION	// the map of batch numbers to EntityInsertAction lists
WITHOUT_CLASSIFICATION	//optimize the hash size to eliminate a rehash.
WITHOUT_CLASSIFICATION	// the list of entity names that indicate the batch number
WITHOUT_CLASSIFICATION	// remove the current element from insertions. It will be added back later.
WITHOUT_CLASSIFICATION	// the entity associated with the current action.
WITHOUT_CLASSIFICATION	// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.
WITHOUT_CLASSIFICATION	// now rebuild the insertions list. There is a batch for each entry in the name list.
WITHOUT_CLASSIFICATION	// the current batch number is the latest batch for this entity type.
WITHOUT_CLASSIFICATION	// loop through all the associations of the current entity and make sure that they are processed // before the current batch number
WITHOUT_CLASSIFICATION	// find the batch number associated with the current association, if any.
WITHOUT_CLASSIFICATION	// create a new batch for this type. The batch number is the number of current batches.
WITHOUT_CLASSIFICATION	// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.
WITHOUT_CLASSIFICATION	// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.
WITHOUT_CLASSIFICATION	//cascade to current collection elements
WITHOUT_CLASSIFICATION	//not really necessary, but good for consistency...
WITHOUT_CLASSIFICATION	// we can't cascade to non-embedded elements
WITHOUT_CLASSIFICATION	//a newly instantiated collection can't have orphans
WITHOUT_CLASSIFICATION	// handle orphaned entities!!
WITHOUT_CLASSIFICATION	// Loaded entity instances, by EntityUniqueKey
WITHOUT_CLASSIFICATION	// Identity map of EntityEntry instances, by the entity instance
WITHOUT_CLASSIFICATION	// Entity proxies, by EntityKey
WITHOUT_CLASSIFICATION	// Snapshots of current database state for entities // that have *not* been loaded
WITHOUT_CLASSIFICATION	// Identity map of array holder ArrayHolder instances, by the array instance
WITHOUT_CLASSIFICATION	// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection
WITHOUT_CLASSIFICATION	// Set of EntityKeys of deleted objects
WITHOUT_CLASSIFICATION	// properties that we have tried to load, and not found in the database
WITHOUT_CLASSIFICATION	// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query
WITHOUT_CLASSIFICATION	// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!
WITHOUT_CLASSIFICATION	// Downgrade locks
WITHOUT_CLASSIFICATION	// any earlier proxy takes precedence
WITHOUT_CLASSIFICATION	//unwrap the object
WITHOUT_CLASSIFICATION	//initialize + unwrap the object
WITHOUT_CLASSIFICATION	//return the proxied object
WITHOUT_CLASSIFICATION	//overwrite old proxy
WITHOUT_CLASSIFICATION	// early exit...
WITHOUT_CLASSIFICATION	// or should it actually throw an exception?
WITHOUT_CLASSIFICATION	//treat it just like a new collection
WITHOUT_CLASSIFICATION	//do this work only at the very highest level of the load //don't let this method be called recursively
WITHOUT_CLASSIFICATION	//note that each iteration of the loop may add new elements
WITHOUT_CLASSIFICATION	//it might be an unwrapped collection reference! //try to find a wrapper (slowish)
WITHOUT_CLASSIFICATION	/*public boolean isNonExistant(EntityKey key) {		return nonExistantEntityKeys.contains(key);	}*/
WITHOUT_CLASSIFICATION	/*public boolean isNonExistant(EntityUniqueKey key) {		return nonExistentEntityUniqueKeys.contains(key);	}*/
WITHOUT_CLASSIFICATION	// iterate all the entities currently associated with the persistence context.
WITHOUT_CLASSIFICATION	// does this entity entry pertain to the entity persister in which we are interested (owner)?
WITHOUT_CLASSIFICATION	//check if the managed object is the parent
WITHOUT_CLASSIFICATION	// otherwise, the proxy was pruned during the serialization process
WITHOUT_CLASSIFICATION	// adds remove as a sort-of alias for delete...
WITHOUT_CLASSIFICATION	//bad cast
WITHOUT_CLASSIFICATION	//return lhsPersister.getSubclassPropertyColumnNames(property);
WITHOUT_CLASSIFICATION	//property-refs for associations defined on a //component are not supported, so no need to slice
WITHOUT_CLASSIFICATION	//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)
WITHOUT_CLASSIFICATION	//handle a property-ref
WITHOUT_CLASSIFICATION	/*NativeSQLQueryReturn*/
WITHOUT_CLASSIFICATION	//final boolean forceCacheRefresh,
WITHOUT_CLASSIFICATION	// why is all others non final ?
WITHOUT_CLASSIFICATION	//this.forceCacheRefresh = forceCacheRefresh;
WITHOUT_CLASSIFICATION	// HELLA IMPORTANT OPTIMIZATION!!!
WITHOUT_CLASSIFICATION	/*return that.type.equals(type) && 			EqualsHelper.equals(that.value, value);*/
WITHOUT_CLASSIFICATION	//Must occur after resolving identifiers!
WITHOUT_CLASSIFICATION	//take a snapshot
WITHOUT_CLASSIFICATION	// do a check
WITHOUT_CLASSIFICATION	// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context
WITHOUT_CLASSIFICATION	// do the work
WITHOUT_CLASSIFICATION	// We've been here before
WITHOUT_CLASSIFICATION	// it is or was referenced _somewhere_
WITHOUT_CLASSIFICATION	// do the work
WITHOUT_CLASSIFICATION	// if either its role changed,
WITHOUT_CLASSIFICATION	// or its key changed
WITHOUT_CLASSIFICATION	// we will need to create new entries
WITHOUT_CLASSIFICATION	// we will need to remove ye olde entries
WITHOUT_CLASSIFICATION	// force initialize!
WITHOUT_CLASSIFICATION	// else if it's elements changed
WITHOUT_CLASSIFICATION	//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES
WITHOUT_CLASSIFICATION	// session-start/post-flush persistent state
WITHOUT_CLASSIFICATION	// allow the CollectionSnapshot to be serialized
WITHOUT_CLASSIFICATION	// ATTRIBUTES USED ONLY DURING FLUSH CYCLE
WITHOUT_CLASSIFICATION	// "current" means the reference that was found during flush() 
WITHOUT_CLASSIFICATION	// "loaded" means the reference that is consistent  // with the current database state
WITHOUT_CLASSIFICATION	// during flush, we navigate the object graph to // collections and decide what to do with them
WITHOUT_CLASSIFICATION	// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()
WITHOUT_CLASSIFICATION	// new collections that get found + wrapped // during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)
WITHOUT_CLASSIFICATION	//collection.clearDirty()
WITHOUT_CLASSIFICATION	//collection.clearDirty()
WITHOUT_CLASSIFICATION	// detached collections that get found + reattached // during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	//optimization
WITHOUT_CLASSIFICATION	//optimization //optimization
WITHOUT_CLASSIFICATION	//re-snapshot
WITHOUT_CLASSIFICATION	// for convenience to save some lookups
WITHOUT_CLASSIFICATION	//NOTE: this is not updated when properties are fetched lazily!
WITHOUT_CLASSIFICATION	//memory optimization
WITHOUT_CLASSIFICATION	// use the id value of a newly instantiated instance as the unsaved-value
WITHOUT_CLASSIFICATION	// copied from Session:
WITHOUT_CLASSIFICATION	// this should not happen since the DTD prevents it
WITHOUT_CLASSIFICATION	// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.
WITHOUT_CLASSIFICATION	// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many
WITHOUT_CLASSIFICATION	//check basic level one nullablilty
WITHOUT_CLASSIFICATION	//values is not null and is checkable, we'll look deeper
WITHOUT_CLASSIFICATION	//for non null args, check for components and elements containing components
WITHOUT_CLASSIFICATION	//cache the hashcode
WITHOUT_CLASSIFICATION	//persistent collections may have components
WITHOUT_CLASSIFICATION	//check for all components values in the collection
WITHOUT_CLASSIFICATION	/* will check current level if some of them are not null		 * or sublevels if they exist		 */
WITHOUT_CLASSIFICATION	//do the test
WITHOUT_CLASSIFICATION	// if its an uninitialized proxy it can't be transient
WITHOUT_CLASSIFICATION	//unwrap it
WITHOUT_CLASSIFICATION	// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)
WITHOUT_CLASSIFICATION	// an unfetched association can only point to // an entity that already exists in the db
WITHOUT_CLASSIFICATION	// let the interceptor inspect the instance to decide
WITHOUT_CLASSIFICATION	// let the persister inspect the instance to decide
WITHOUT_CLASSIFICATION	// we use the assumed value, if there is one, to avoid hitting // the database
WITHOUT_CLASSIFICATION	// hit the database, after checking the session cache for a snapshot
WITHOUT_CLASSIFICATION	// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...
WITHOUT_CLASSIFICATION	//int count = 0;
WITHOUT_CLASSIFICATION	//the first key found after the given key
WITHOUT_CLASSIFICATION	//checkForEnd = false;
WITHOUT_CLASSIFICATION	//count++;
WITHOUT_CLASSIFICATION	//end of array, start filling again from start
WITHOUT_CLASSIFICATION	//we ran out of keys to try
WITHOUT_CLASSIFICATION	//first element of array is reserved for the actual instance we are loading!
WITHOUT_CLASSIFICATION	//the first id found after the given id
WITHOUT_CLASSIFICATION	//we ran out of ids to try
WITHOUT_CLASSIFICATION	// look for existing collection as part of the persistence context
WITHOUT_CLASSIFICATION	// ignore this row of results! Note the early exit
WITHOUT_CLASSIFICATION	// initialize this collection
WITHOUT_CLASSIFICATION	// create one
WITHOUT_CLASSIFICATION	// warning: can cause a recursive calls! (proxy initialization)
WITHOUT_CLASSIFICATION	// there were no queued additions // and the role has a cache
WITHOUT_CLASSIFICATION	// and this is not a forced initialization during flush
WITHOUT_CLASSIFICATION	// some filters affecting the collection are enabled on the session, so do not do the put into the cache.
WITHOUT_CLASSIFICATION	// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...
WITHOUT_CLASSIFICATION	// the cache of the actual plans...
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	// assumes that types are all of span 1
WITHOUT_CLASSIFICATION	// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful
WITHOUT_CLASSIFICATION	// don't care...
WITHOUT_CLASSIFICATION	// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// don't care...
WITHOUT_CLASSIFICATION	// NOTE : firstRow is zero-based
WITHOUT_CLASSIFICATION	// break the outer loop !!!
WITHOUT_CLASSIFICATION	// named parameter
WITHOUT_CLASSIFICATION	// could be either an ordinal or JPA-positional parameter
WITHOUT_CLASSIFICATION	// a peek ahead showed this as an JPA-positional parameter
WITHOUT_CLASSIFICATION	// make sure this "name" is an integral
WITHOUT_CLASSIFICATION	// pre-determine and cache the hashcode
WITHOUT_CLASSIFICATION	// perform the actual work
WITHOUT_CLASSIFICATION	// if everything went ok, commit the transaction and close the obtained // connection handle...
WITHOUT_CLASSIFICATION	// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible
WITHOUT_CLASSIFICATION	// finally handle the exception
WITHOUT_CLASSIFICATION	// a "detached" collection that belonged to a different entity
WITHOUT_CLASSIFICATION	//saveOrUpdateCopy() is deprecated!
WITHOUT_CLASSIFICATION	// collectionPersister should not be null, but we don't want to throw // an exception if it is null
WITHOUT_CLASSIFICATION	// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);
WITHOUT_CLASSIFICATION	// a "detached" collection that originally belonged to the same entity
WITHOUT_CLASSIFICATION	//do nothing
WITHOUT_CLASSIFICATION	//do nothing
WITHOUT_CLASSIFICATION	//Force a substitution!
WITHOUT_CLASSIFICATION	// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock
WITHOUT_CLASSIFICATION	// the database now holds a lock + the object is flushed from the cache, // so release the soft lock
WITHOUT_CLASSIFICATION	// now update the object .. has to be outside the main if block above (because of collections)
WITHOUT_CLASSIFICATION	// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object
WITHOUT_CLASSIFICATION	// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed
WITHOUT_CLASSIFICATION	// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections
WITHOUT_CLASSIFICATION	//grab its state saved at deletion
WITHOUT_CLASSIFICATION	// grab its current state
WITHOUT_CLASSIFICATION	// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!
WITHOUT_CLASSIFICATION	// substitutes into values by side-effect
WITHOUT_CLASSIFICATION	// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object
WITHOUT_CLASSIFICATION	// compare to cached state (ignoring collections unless versioned)
WITHOUT_CLASSIFICATION	// if it was dirtied by a collection only
WITHOUT_CLASSIFICATION	// increment the version number (if necessary)
WITHOUT_CLASSIFICATION	// check nullability but do not perform command execute // we'll use scheduled updates for that.
WITHOUT_CLASSIFICATION	//give the Interceptor a chance to modify property values
WITHOUT_CLASSIFICATION	//now we might need to recalculate the dirtyProperties array
WITHOUT_CLASSIFICATION	//use the current version
WITHOUT_CLASSIFICATION	// Interceptor returned null, so do the dirtycheck ourself, if possible
WITHOUT_CLASSIFICATION	// object loaded by update()
WITHOUT_CLASSIFICATION	// dirty check against the usual snapshot of the entity
WITHOUT_CLASSIFICATION	// dirty check against the database snapshot, if possible/necessary
WITHOUT_CLASSIFICATION	// the Interceptor handled the dirty checking
WITHOUT_CLASSIFICATION	//even process null collections
WITHOUT_CLASSIFICATION	// get the id from the object
WITHOUT_CLASSIFICATION	//always do an INSERT, and let it fail by constraint violation
WITHOUT_CLASSIFICATION	//what is the version on the database?
WITHOUT_CLASSIFICATION	/// HHH-2378
WITHOUT_CLASSIFICATION	//will result in a SQL UPDATE:
WITHOUT_CLASSIFICATION	//else do nothing (don't even reassociate object!)
WITHOUT_CLASSIFICATION	// no existing row - do an insert
WITHOUT_CLASSIFICATION	//refresh() does not pass an entityName
WITHOUT_CLASSIFICATION	//do not return a proxy! //(this option indicates we are initializing a proxy)
WITHOUT_CLASSIFICATION	//return a proxy if appropriate
WITHOUT_CLASSIFICATION	// return existing object or initialized proxy (unless deleted)
WITHOUT_CLASSIFICATION	// return new uninitialized proxy
WITHOUT_CLASSIFICATION	// this object was already loaded
WITHOUT_CLASSIFICATION	// Entity was found in second-level cache...
WITHOUT_CLASSIFICATION	// make it circular-reference safe
WITHOUT_CLASSIFICATION	// intializes result by side-effect
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//some statistics
WITHOUT_CLASSIFICATION	//safe from concurrent modification because of how entryList() is implemented on IdentityMap
WITHOUT_CLASSIFICATION	// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.
WITHOUT_CLASSIFICATION	// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.
WITHOUT_CLASSIFICATION	// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()
WITHOUT_CLASSIFICATION	// Update the status of the object and if necessary, schedule an update
WITHOUT_CLASSIFICATION	// Schedule updates to collections:
WITHOUT_CLASSIFICATION	// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//the database has changed now, so the subselect results need to be invalidated
WITHOUT_CLASSIFICATION	//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set
WITHOUT_CLASSIFICATION	//otherwise recreate the mapping between the collection and its key
WITHOUT_CLASSIFICATION	//get a snapshot
WITHOUT_CLASSIFICATION	/* package-private */
WITHOUT_CLASSIFICATION	/* package-private */
WITHOUT_CLASSIFICATION	// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity
WITHOUT_CLASSIFICATION	// EARLY EXIT!!!
WITHOUT_CLASSIFICATION	//ie. the entity came in from update()
WITHOUT_CLASSIFICATION	// before any callbacks, etc, so subdeletions see that this deletion happened first
WITHOUT_CLASSIFICATION	// Ensures that containing deletions happen before sub-deletions
WITHOUT_CLASSIFICATION	//		TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );
WITHOUT_CLASSIFICATION	// cascade-delete to collections BEFORE the collection owner is deleted
WITHOUT_CLASSIFICATION	// cascade-delete to many-to-one AFTER the parent was deleted
WITHOUT_CLASSIFICATION	// if it is an initialized proxy, let cascade // handle it later on
WITHOUT_CLASSIFICATION	//assign the requested id to the proxy, *before* //reassociating the proxy
WITHOUT_CLASSIFICATION	// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()
WITHOUT_CLASSIFICATION	//initialize properties of the event:
WITHOUT_CLASSIFICATION	//return the id in the event object
WITHOUT_CLASSIFICATION	//TRANSIENT or DELETED
WITHOUT_CLASSIFICATION	// use the id assigned to the instance
WITHOUT_CLASSIFICATION	// assume this is a newly instantiated transient object // which should be saved rather than updated
WITHOUT_CLASSIFICATION	// this is a transient object with existing persistent state not loaded by the session
WITHOUT_CLASSIFICATION	// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()
WITHOUT_CLASSIFICATION	//cachedState,
WITHOUT_CLASSIFICATION	//assume true, since we don't really know, and it doesn't matter
WITHOUT_CLASSIFICATION	//a "detached" collection!
WITHOUT_CLASSIFICATION	// if the collection belonged to a different entity, // clean up the existing state of the collection
WITHOUT_CLASSIFICATION	//log.debug( "calling onLoad()" );
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session
WITHOUT_CLASSIFICATION	// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);
WITHOUT_CLASSIFICATION	// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );
WITHOUT_CLASSIFICATION	//we need to check even if it was not initialized, because of delayed adds!
WITHOUT_CLASSIFICATION	//NOTE: EARLY EXIT!
WITHOUT_CLASSIFICATION	// find any entities that are still transient after retry
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	// Check the persistence context for an entry relating to this // entity to be merged...
WITHOUT_CLASSIFICATION	// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance
WITHOUT_CLASSIFICATION	//DELETED
WITHOUT_CLASSIFICATION	//before cascade!
WITHOUT_CLASSIFICATION	// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);
WITHOUT_CLASSIFICATION	//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness
WITHOUT_CLASSIFICATION	// continue...; we'll find out if it ends up not getting saved later
WITHOUT_CLASSIFICATION	// cascade first, so that all unsaved objects get their // copy created before we actually copy
WITHOUT_CLASSIFICATION	// check that entity id = requestedId
WITHOUT_CLASSIFICATION	//before cascade!
WITHOUT_CLASSIFICATION	// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent
WITHOUT_CLASSIFICATION	// cascade first, so that all unsaved objects get their  // copy created before we actually copy
WITHOUT_CLASSIFICATION	//copyValues works by reflection, so explicitly mark the entity instance dirty
WITHOUT_CLASSIFICATION	//EARLY EXIT
WITHOUT_CLASSIFICATION	//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed
WITHOUT_CLASSIFICATION	// substitutes into values by side-effect
WITHOUT_CLASSIFICATION	//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );
WITHOUT_CLASSIFICATION	//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );
WITHOUT_CLASSIFICATION	//keep the existing version number in the case of replicate!
WITHOUT_CLASSIFICATION	// cascade-save to many-to-one BEFORE the parent is saved
WITHOUT_CLASSIFICATION	//pass this as an argument only to avoid double looking
WITHOUT_CLASSIFICATION	// the object is persistent
WITHOUT_CLASSIFICATION	//the entity is associated with the session, so check its status
WITHOUT_CLASSIFICATION	// do nothing for persistent instances
WITHOUT_CLASSIFICATION	//ie. e.status==DELETED
WITHOUT_CLASSIFICATION	// the object is transient or detached
WITHOUT_CLASSIFICATION	//NOTE EARLY EXIT!
WITHOUT_CLASSIFICATION	// Private constructor - stops checkstyle from complaining.
WITHOUT_CLASSIFICATION	// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...
WITHOUT_CLASSIFICATION	// eat it and try next
WITHOUT_CLASSIFICATION	// Otherwise, try to use the no-arg constructor
WITHOUT_CLASSIFICATION	// oracle sql-state code for deadlock
WITHOUT_CLASSIFICATION	// CollectionPropertyMapping processes everything except 'index'.
WITHOUT_CLASSIFICATION	// remove initial ", "
WITHOUT_CLASSIFICATION	// remove initial " and "
WITHOUT_CLASSIFICATION	//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!
WITHOUT_CLASSIFICATION	//notAfterClassTokens.add(",");
WITHOUT_CLASSIFICATION	// just especially for the trivial collection filter
WITHOUT_CLASSIFICATION	//update last non-whitespace token, if necessary
WITHOUT_CLASSIFICATION	// select-range is terminated by declaration of "from"
WITHOUT_CLASSIFICATION	//scan for next non-whitespace token
WITHOUT_CLASSIFICATION	// Note this!!
WITHOUT_CLASSIFICATION	// Error message constants.
WITHOUT_CLASSIFICATION	// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!
WITHOUT_CLASSIFICATION	// Show the modified AST.
WITHOUT_CLASSIFICATION	// Create a parameter specification for the collection filter...
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// Get the names of the columns used to link between the collection // owner and the collection elements.
WITHOUT_CLASSIFICATION	// The path AST should be a DotNode, and it should have been evaluated already.
WITHOUT_CLASSIFICATION	// Tell the dot node about the join type.
WITHOUT_CLASSIFICATION	// Re-arrange the tree so that the collection function is the root and the lhs is the path.
WITHOUT_CLASSIFICATION	// Don't forget to resolve the argument! // Resolve the collection function now.
WITHOUT_CLASSIFICATION	// Resolve everything up to this dot, but don't resolve the placeholders yet.
WITHOUT_CLASSIFICATION	// Should mean that no such property was found
WITHOUT_CLASSIFICATION	// Was there an explicit select expression?
WITHOUT_CLASSIFICATION	// Attach any mapping-defined "ORDER BY" fragments
WITHOUT_CLASSIFICATION	// Use the explicitly declared select expression; determine the // return types indicated by each select token
WITHOUT_CLASSIFICATION	// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.
WITHOUT_CLASSIFICATION	// Make #@%$^#^&# sure no alias is applied to the table name
WITHOUT_CLASSIFICATION	// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// We need to seed the version value as part of this bulk insert
WITHOUT_CLASSIFICATION	// we need to wrtap the param in a cast()
WITHOUT_CLASSIFICATION	// This is called when it's time to fully resolve a path expression.
WITHOUT_CLASSIFICATION	// Generate implicit joins, only if necessary.
WITHOUT_CLASSIFICATION	// Notify the FROM element that it is being referenced by the select.
WITHOUT_CLASSIFICATION	// Turn off includeSubclasses on all FromElements.
WITHOUT_CLASSIFICATION	// create the node initially with the param name so that it shows // appropriately in the "original text" attribute
WITHOUT_CLASSIFICATION	// Use the delegate, resolve identifiers as FROM element aliases.
WITHOUT_CLASSIFICATION	// select clauses for insert statements should alwasy be treated as shallow
WITHOUT_CLASSIFICATION	// no need to even collect this information if the persister is considered multi-table
WITHOUT_CLASSIFICATION	// Make sure that the persister is versioned
WITHOUT_CLASSIFICATION	// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();
WITHOUT_CLASSIFICATION	// Alias references and identifiers use the same node class.
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// make a new one
WITHOUT_CLASSIFICATION	// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.
WITHOUT_CLASSIFICATION	// Initialize SQL nodes here.
WITHOUT_CLASSIFICATION	// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// if template is null we just write the function out as it appears in the hql statement
WITHOUT_CLASSIFICATION	// this function has a template -> redirect output and catch the arguments
WITHOUT_CLASSIFICATION	// --- Inner classes (moved here from sql-gen.g) ---
WITHOUT_CLASSIFICATION	// check two "adjecent" nodes at the top of the from-clause tree
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// these are just two unrelated table references
WITHOUT_CLASSIFICATION	// again, both should be FromElements
WITHOUT_CLASSIFICATION	// NOTE : firstRow is zero-based
WITHOUT_CLASSIFICATION	// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement
WITHOUT_CLASSIFICATION	// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them
WITHOUT_CLASSIFICATION	// right represents a joins originating from left...
WITHOUT_CLASSIFICATION	// all clear
WITHOUT_CLASSIFICATION	// Ignore the token class name parameter, and use a specific token class.
WITHOUT_CLASSIFICATION	//overriden to avoid System.exit
WITHOUT_CLASSIFICATION	//overriden to avoid System.exit
WITHOUT_CLASSIFICATION	// remember that ordinal parameters numbers are 1-based!!!
WITHOUT_CLASSIFICATION	// don't care about other param types here, just those explicitly user-defined...
WITHOUT_CLASSIFICATION	// If the query is already compiled, skip the compilation.
WITHOUT_CLASSIFICATION	// Remember the parameters for the compilation.
WITHOUT_CLASSIFICATION	// PHASE 1 : Parse the HQL into an AST.
WITHOUT_CLASSIFICATION	// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.
WITHOUT_CLASSIFICATION	// PHASE 3 : Generate the SQL.
WITHOUT_CLASSIFICATION	// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes
WITHOUT_CLASSIFICATION	// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes
WITHOUT_CLASSIFICATION	//only needed during compilation phase...
WITHOUT_CLASSIFICATION	// Transform the tree.
WITHOUT_CLASSIFICATION	// Parse the query string into an HQL AST.
WITHOUT_CLASSIFICATION	// Delegate to the QueryLoader...
WITHOUT_CLASSIFICATION	// Delegate to the QueryLoader...
WITHOUT_CLASSIFICATION	// Delegate to the QueryLoader...
WITHOUT_CLASSIFICATION	// NOTE : ( max - 1 ) because first is zero-based while max is not...
WITHOUT_CLASSIFICATION	// -- Package local methods for the QueryLoader delegate --
WITHOUT_CLASSIFICATION	// If there are no collection fetches, then no further checks are needed
WITHOUT_CLASSIFICATION	// A shallow query is ok (although technically there should be no fetching here...)
WITHOUT_CLASSIFICATION	// should be the first, but just to be safe...
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return
WITHOUT_CLASSIFICATION	// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)
WITHOUT_CLASSIFICATION	// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...
WITHOUT_CLASSIFICATION	//			paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );
WITHOUT_CLASSIFICATION	// we are already processing a dot-structure
WITHOUT_CLASSIFICATION	// igndore it...
WITHOUT_CLASSIFICATION	// we are now at a new tree level
WITHOUT_CLASSIFICATION	// [jsd] The fix for HHH-558...
WITHOUT_CLASSIFICATION	// If the token can tell us if it could be an identifier...
WITHOUT_CLASSIFICATION	// ... and the expected token type was an identifier, then:
WITHOUT_CLASSIFICATION	// Use the token as an identifier.
WITHOUT_CLASSIFICATION	// Add the token to the AST.
WITHOUT_CLASSIFICATION	// (NOT (EQ a b) ) => (NE a b)
WITHOUT_CLASSIFICATION	// (NOT (NE a b) ) => (EQ a b)
WITHOUT_CLASSIFICATION	// (NOT (LT a b) ) => (GE a b)
WITHOUT_CLASSIFICATION	// (NOT (GE a b) ) => (LT a b)
WITHOUT_CLASSIFICATION	// (NOT (LE a b) ) => (GT a b)
WITHOUT_CLASSIFICATION	// (NOT (LIKE a b) ) => (NOT_LIKE a b)
WITHOUT_CLASSIFICATION	// (NOT (NOT_LIKE a b) ) => (LIKE a b)
WITHOUT_CLASSIFICATION	// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)
WITHOUT_CLASSIFICATION	// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)
WITHOUT_CLASSIFICATION	// Initialize the error handling delegate.
WITHOUT_CLASSIFICATION	//overriden to avoid System.exit
WITHOUT_CLASSIFICATION	// if // if // Otherwise, handle the error normally.
WITHOUT_CLASSIFICATION	// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)
WITHOUT_CLASSIFICATION	/* This can never happen because this rule will always eliminate the child NOT.			case NOT:				return x.getFirstChild();			// (NOT (NOT x) ) => (x)*/
WITHOUT_CLASSIFICATION	// Just add a 'not' parent.
WITHOUT_CLASSIFICATION	// (EQ NULL b) => (IS_NULL b)
WITHOUT_CLASSIFICATION	// (EQ a NULL) => (IS_NULL a)
WITHOUT_CLASSIFICATION	// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )
WITHOUT_CLASSIFICATION	// Add NOT if it's negated.
WITHOUT_CLASSIFICATION	// Create nodes that track line and column number.
WITHOUT_CLASSIFICATION	// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.
WITHOUT_CLASSIFICATION	// Case 2: The current token is after FROM and before '.'.
WITHOUT_CLASSIFICATION	// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...
WITHOUT_CLASSIFICATION	// See if the second lookahed token can be an identifier.
WITHOUT_CLASSIFICATION	// Set it!
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// strip the " where "
WITHOUT_CLASSIFICATION	// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail
WITHOUT_CLASSIFICATION	// at the very least cleanup the data :)
WITHOUT_CLASSIFICATION	// First, save off the pertinent ids, as the return value
WITHOUT_CLASSIFICATION	// jdbc params are 1-based
WITHOUT_CLASSIFICATION	// jdbc params are 1-based
WITHOUT_CLASSIFICATION	// Start performing the updates
WITHOUT_CLASSIFICATION	// First, save off the pertinent ids, saving the number of pertinent ids for return
WITHOUT_CLASSIFICATION	// Start performing the deletes
WITHOUT_CLASSIFICATION	// otherwise, everything ok.
WITHOUT_CLASSIFICATION	// visit width-first, then depth
WITHOUT_CLASSIFICATION	// if the types report logical equivalence, return true...
WITHOUT_CLASSIFICATION	// otherwise, perform a "deep equivalence" check...
WITHOUT_CLASSIFICATION	// If there is no WHERE node, make one.
WITHOUT_CLASSIFICATION	// inject the WHERE after the parent
WITHOUT_CLASSIFICATION	// Never include subclasses for implied from elements.
WITHOUT_CLASSIFICATION	// Moved here from SelectClause [jsd]
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// Use the table fromElement and the property name to get the array of column names.
WITHOUT_CLASSIFICATION	// Set the attributes of the property reference expression.
WITHOUT_CLASSIFICATION	// If the uresolved property path isn't set yet, just use the property name.
WITHOUT_CLASSIFICATION	// The 'from element' that the property is in.
WITHOUT_CLASSIFICATION	// Prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	// Prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	// If this dot has already been resolved, stop now.
WITHOUT_CLASSIFICATION	// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.
WITHOUT_CLASSIFICATION	// The property is a collection...
WITHOUT_CLASSIFICATION	// The property is a component...
WITHOUT_CLASSIFICATION	// The property is another class..
WITHOUT_CLASSIFICATION	// Otherwise, this is a primitive type.
WITHOUT_CLASSIFICATION	//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)
WITHOUT_CLASSIFICATION	// This 'dot' expression now refers to the resulting from element.
WITHOUT_CLASSIFICATION	// Always add the collection's query spaces.
WITHOUT_CLASSIFICATION	// in non-select queries, the only time we should need to join is if we are in a subquery from clause
WITHOUT_CLASSIFICATION	// this is the regression style determination which matches the logic of the classic translator
WITHOUT_CLASSIFICATION	// This 'dot' expression now refers to the resulting from element.
WITHOUT_CLASSIFICATION	// even though we might find a pre-existing element by join path, we may not be able to reuse it...
WITHOUT_CLASSIFICATION	// NOTE : addDuplicateAlias() already performs nullness checks on the alias.
WITHOUT_CLASSIFICATION	// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse
WITHOUT_CLASSIFICATION	// again, null != null here
WITHOUT_CLASSIFICATION	// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).
WITHOUT_CLASSIFICATION	// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery
WITHOUT_CLASSIFICATION	// we know only the lhs-hand type, so use that
WITHOUT_CLASSIFICATION	// the referenced node text is the special 'id'
WITHOUT_CLASSIFICATION	// only the identifier property field name can be a reference to the associated entity's PK...
WITHOUT_CLASSIFICATION	// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression
WITHOUT_CLASSIFICATION	// Append the new property name onto the unresolved path.
WITHOUT_CLASSIFICATION	// If the lhs is a collection, use CollectionPropertyMapping
WITHOUT_CLASSIFICATION	// Tell the destination fromElement to 'includeSubclasses'.
WITHOUT_CLASSIFICATION	// Use theta style (for regression) // Move the node up, after the origin node.
WITHOUT_CLASSIFICATION	// Don't resolve the node again.
WITHOUT_CLASSIFICATION	// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.
WITHOUT_CLASSIFICATION	// we need to strip off the embedded parens so that sql-gen does not double these up
WITHOUT_CLASSIFICATION	// we have something like : "? [op] rhs"
WITHOUT_CLASSIFICATION	// we have something like : "lhs [op] ?"
WITHOUT_CLASSIFICATION	// we know only the rhs-hand type, so use that
WITHOUT_CLASSIFICATION	// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)
WITHOUT_CLASSIFICATION	// one or the other needs to be a datetime for us to get into this method in the first place...
WITHOUT_CLASSIFICATION	// #3 - note that this is also true of "datetime - :param"...
WITHOUT_CLASSIFICATION	// #2
WITHOUT_CLASSIFICATION	// Generate the inner join -- The elements need to be joined to the collection they are in.
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// The 'from element' that represents the elements of the collection.
WITHOUT_CLASSIFICATION	// Add the condition to the join sequence that qualifies the indexed element.
WITHOUT_CLASSIFICATION	// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)
WITHOUT_CLASSIFICATION	// Now, set the text for this node.  It should be the element columns.
WITHOUT_CLASSIFICATION	// Get the function return value type, based on the type of the first argument.
WITHOUT_CLASSIFICATION	// This will call initialize(tok)!
WITHOUT_CLASSIFICATION	// mutation depends on the types of nodes invloved...
WITHOUT_CLASSIFICATION	// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...
WITHOUT_CLASSIFICATION	// logic operators by definition resolve to booleans
WITHOUT_CLASSIFICATION	// Generated select expressions are already resolved, nothing to do.
WITHOUT_CLASSIFICATION	// The path may be a reference to an alias defined in the parent query.
WITHOUT_CLASSIFICATION	// The HQL class alias refers to the class name.
WITHOUT_CLASSIFICATION	// Associate the table alias with the element.
WITHOUT_CLASSIFICATION	// try the parent FromClause...
WITHOUT_CLASSIFICATION	// Add the new node to the map so that we don't create it twice.
WITHOUT_CLASSIFICATION	// Make sure that all from elements registered with this FROM clause are actually in the AST.
WITHOUT_CLASSIFICATION	// Invoke setScalarColumnText on each constructor argument.
WITHOUT_CLASSIFICATION	// Collect the select expressions, skip the first child because it is the class name.
WITHOUT_CLASSIFICATION	// return an empty Type array
WITHOUT_CLASSIFICATION	// Constructors are always considered scalar results.
WITHOUT_CLASSIFICATION	// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor
WITHOUT_CLASSIFICATION	// if there is no order by, make one
WITHOUT_CLASSIFICATION	// Find the WHERE; if there is no WHERE, find the FROM...
WITHOUT_CLASSIFICATION	// Now, inject the newly built ORDER BY into the tree
WITHOUT_CLASSIFICATION	// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// logic operators by definition resolve to boolean.
WITHOUT_CLASSIFICATION	// Render the identifier select fragment using the table alias.
WITHOUT_CLASSIFICATION	// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).
WITHOUT_CLASSIFICATION	// For many-to-many joins, use the tablename from the queryable collection for the default text.
WITHOUT_CLASSIFICATION	// Otherwise, use the property mapping.
WITHOUT_CLASSIFICATION	// should be safe to only ever expect EntityPersister references here
WITHOUT_CLASSIFICATION	// If the property is a special collection property name, return a CollectionPropertyMapping.
WITHOUT_CLASSIFICATION	// Collection of components.
WITHOUT_CLASSIFICATION	// make sure the lhs is "assignable"...
WITHOUT_CLASSIFICATION	// false indicates to not generate parens around the assignment
WITHOUT_CLASSIFICATION	// Register the FromElement with the FROM clause, now that we have the names and aliases.
WITHOUT_CLASSIFICATION	// currently allowed...
WITHOUT_CLASSIFICATION	// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.
WITHOUT_CLASSIFICATION	//return classAlias == null ? className : classAlias;
WITHOUT_CLASSIFICATION	// This is an explicit FROM element.
WITHOUT_CLASSIFICATION	// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Fetch can't be used with scroll() or iterate().
WITHOUT_CLASSIFICATION	// If it's not implied or it is implied and it's a many to many join where the target wasn't found.
WITHOUT_CLASSIFICATION	// Since this is an explicit FROM element, it can't be implied in the FROM clause.
WITHOUT_CLASSIFICATION	// Do nothing, eplicit from elements are *always* in the projection list.
WITHOUT_CLASSIFICATION	// propertyName refers to something like collection.size...
WITHOUT_CLASSIFICATION	// property name is a sub-path of a component...
WITHOUT_CLASSIFICATION	// Always add the collection's query spaces.
WITHOUT_CLASSIFICATION	// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here
WITHOUT_CLASSIFICATION	// logic operators by definition resolve to booleans
WITHOUT_CLASSIFICATION	// DotNode uses null here...
WITHOUT_CLASSIFICATION	// We represent a from-clause alias
WITHOUT_CLASSIFICATION	// we are the LHS of the DOT representing a naked comp-prop-ref
WITHOUT_CLASSIFICATION	// we are the RHS of the DOT representing a naked comp-prop-ref
WITHOUT_CLASSIFICATION	// we represent a naked (simple) prop-ref
WITHOUT_CLASSIFICATION	// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...
WITHOUT_CLASSIFICATION	// assume this ident's text does *not* refer to a property on the given persister
WITHOUT_CLASSIFICATION	// just ignore it for now, it'll get resolved later...
WITHOUT_CLASSIFICATION	// This is not actually a constant, but a reference to FROM element.
WITHOUT_CLASSIFICATION	// check to see if our "propPath" actually // represents a property on the persister
WITHOUT_CLASSIFICATION	// these pieces are needed for usage in select clause
WITHOUT_CLASSIFICATION	// used to set the type of the parent dot node
WITHOUT_CLASSIFICATION	// assume we do *not* refer to a property on the given persister
WITHOUT_CLASSIFICATION	// assume we do *not* refer to a property on the given persister
WITHOUT_CLASSIFICATION	// naked property-refs cannot be used with an aliased from element
WITHOUT_CLASSIFICATION	// this piece is needed for usage in select clause
WITHOUT_CLASSIFICATION	// do *not* over-write the column text, as that has already been // "rendered" during resolve
WITHOUT_CLASSIFICATION	// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string
WITHOUT_CLASSIFICATION	// Look up class name using the first identifier in the path.
WITHOUT_CLASSIFICATION	// Add to the query spaces.
WITHOUT_CLASSIFICATION	// If the from element isn't in the same clause, create a new from element.
WITHOUT_CLASSIFICATION	// This is the root level node. // Generate an explicit from clause at the root.
WITHOUT_CLASSIFICATION	// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join
WITHOUT_CLASSIFICATION	// super-duper-classic-parser-regression-testing-mojo-magic...
WITHOUT_CLASSIFICATION	// A collection of entities...
WITHOUT_CLASSIFICATION	// A collection of components...
WITHOUT_CLASSIFICATION	// A collection of scalar elements...
WITHOUT_CLASSIFICATION	// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed
WITHOUT_CLASSIFICATION	// Don't include sub-classes for implied collection joins or subquery joins.
WITHOUT_CLASSIFICATION	// Treat explict from elements in sub-queries properly.
WITHOUT_CLASSIFICATION	//			        ( implied && DotNode.useThetaStyleImplicitJoins ) ) {
WITHOUT_CLASSIFICATION	// the "root from-element" in correlated subqueries do need this piece
WITHOUT_CLASSIFICATION	// Create the FROM element for the target (the elements of the collection).
WITHOUT_CLASSIFICATION	// If the join is implied, then don't include sub-classes on the element.
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.
WITHOUT_CLASSIFICATION	// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.
WITHOUT_CLASSIFICATION	// Get the class name of the associated entity.
WITHOUT_CLASSIFICATION	//  origin, path, implied, columns, classAlias,
WITHOUT_CLASSIFICATION	/*implied*/
WITHOUT_CLASSIFICATION	// For implied many-to-many, just add the end join.
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// the standard SQL function name is current_timestamp...
WITHOUT_CLASSIFICATION	// This causes the factory to instantiate the desired class.
WITHOUT_CLASSIFICATION	//private Type[] sqlResultTypes;
WITHOUT_CLASSIFICATION	// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	/*	 * The types represented in the SQL result set.	 *	 * @return The types represented in the SQL result set.	 */
WITHOUT_CLASSIFICATION	/*public Type[] getSqlResultTypes() {		return sqlResultTypes;	}*/
WITHOUT_CLASSIFICATION	// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!
WITHOUT_CLASSIFICATION	// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)
WITHOUT_CLASSIFICATION	//sqlResultTypeList.addAll( constructorArgumentTypeList );
WITHOUT_CLASSIFICATION	// If the data type is not an association type, it could not have been in the FROM clause.
WITHOUT_CLASSIFICATION	//sqlResultTypeList.add( type );
WITHOUT_CLASSIFICATION	// Always add the type to the return type list.
WITHOUT_CLASSIFICATION	// add the fetched entities
WITHOUT_CLASSIFICATION	// Get ready to start adding nodes.
WITHOUT_CLASSIFICATION	// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// If there are any scalars (non-entities) selected, render the select column aliases.
WITHOUT_CLASSIFICATION	/*sqlResultTypeList,*/
WITHOUT_CLASSIFICATION	/*ArrayList sqlResultTypeList,*/
WITHOUT_CLASSIFICATION	//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );
WITHOUT_CLASSIFICATION	// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//TODO:
WITHOUT_CLASSIFICATION	// Add the type to the list of returned sqlResultTypes.
WITHOUT_CLASSIFICATION	// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.
WITHOUT_CLASSIFICATION	// Generate the select expression.
WITHOUT_CLASSIFICATION	// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Skip 'DISTINCT' and 'ALL', so we return the first expression node.
WITHOUT_CLASSIFICATION	// Create SQL_TOKEN nodes for the columns.
WITHOUT_CLASSIFICATION	// Generate the property select tokens.
WITHOUT_CLASSIFICATION	// Get the function name node.
WITHOUT_CLASSIFICATION	// Method expressions in a SELECT should always be considered scalar.
WITHOUT_CLASSIFICATION	// If this is 'elements' then create a new FROM element.
WITHOUT_CLASSIFICATION	// Not elements(x)
WITHOUT_CLASSIFICATION	// Dialect function
WITHOUT_CLASSIFICATION	// Collection 'property function'
WITHOUT_CLASSIFICATION	// If the constant is an IDENT, figure out what it means...
WITHOUT_CLASSIFICATION	// IDENT is a class alias in the FROM.
WITHOUT_CLASSIFICATION	// Resolve to an identity column.
WITHOUT_CLASSIFICATION	// Otherwise, it's a literal.
WITHOUT_CLASSIFICATION	// the name of an entity class
WITHOUT_CLASSIFICATION	//the class discriminator value
WITHOUT_CLASSIFICATION	// Chop off the rest of the tree.
WITHOUT_CLASSIFICATION	// Add a space before the display text.
WITHOUT_CLASSIFICATION	// Find or create the WHERE clause
WITHOUT_CLASSIFICATION	// child == parent.getFirstChild()
WITHOUT_CLASSIFICATION	// Find or create the WHERE clause
WITHOUT_CLASSIFICATION	// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().
WITHOUT_CLASSIFICATION	// Put the FILTERS node before the HQL condition and theta joins
WITHOUT_CLASSIFICATION	// add the current fragment to the FILTERS node
WITHOUT_CLASSIFICATION	// Create a new THETA_JOINS node as a parent of all filters
WITHOUT_CLASSIFICATION	// Put the THETA_JOINS node before the HQL condition, after the filters.
WITHOUT_CLASSIFICATION	// add the current fragment to the THETA_JOINS node
WITHOUT_CLASSIFICATION	// First, try to get the persister using the given name directly.
WITHOUT_CLASSIFICATION	// unable to locate it using this name
WITHOUT_CLASSIFICATION	// If that didn't work, try using the 'import' name.
WITHOUT_CLASSIFICATION	// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)
WITHOUT_CLASSIFICATION	// locate the registered function by the given name
WITHOUT_CLASSIFICATION	// determine the type of the first argument...
WITHOUT_CLASSIFICATION	// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.
WITHOUT_CLASSIFICATION	// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.
WITHOUT_CLASSIFICATION	// Append the text of the current node.
WITHOUT_CLASSIFICATION	// If the node has a first child, recurse into the first child.
WITHOUT_CLASSIFICATION	// If there is a second child (RHS), recurse into that child.
WITHOUT_CLASSIFICATION	// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.
WITHOUT_CLASSIFICATION	// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT
WITHOUT_CLASSIFICATION	// this is used during SqlGenerator processing
WITHOUT_CLASSIFICATION	// If there is a FROM fragment and the FROM element is an explicit, then add the from part.
WITHOUT_CLASSIFICATION	/*&& StringHelper.isNotEmpty( frag )*/
WITHOUT_CLASSIFICATION	// The FROM fragment will probably begin with ', '.  Remove this if it is present.
WITHOUT_CLASSIFICATION	// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:
WITHOUT_CLASSIFICATION	// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p
WITHOUT_CLASSIFICATION	// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.
WITHOUT_CLASSIFICATION	//named query parameter
WITHOUT_CLASSIFICATION	//default mode
WITHOUT_CLASSIFICATION	//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);
WITHOUT_CLASSIFICATION	//reset the dotcount (but not the path) //after reset!
WITHOUT_CLASSIFICATION	//after reset!
WITHOUT_CLASSIFICATION	// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query
WITHOUT_CLASSIFICATION	// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22
WITHOUT_CLASSIFICATION	// dotcount>=2
WITHOUT_CLASSIFICATION	// Do the corresponding RHS
WITHOUT_CLASSIFICATION	//if its "id"
WITHOUT_CLASSIFICATION	//or its the id property name
WITHOUT_CLASSIFICATION	//join = q.createJoinFragment(useThetaStyleJoin);
WITHOUT_CLASSIFICATION	//important!!
WITHOUT_CLASSIFICATION	//String[] keyCols = collPersister.getKeyColumnNames();
WITHOUT_CLASSIFICATION	// an association
WITHOUT_CLASSIFICATION	//allow index() function:
WITHOUT_CLASSIFICATION	// here assume SQLServer2005 using snapshot isolation, which does not have this problem
WITHOUT_CLASSIFICATION	// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.
WITHOUT_CLASSIFICATION	//many-to-many
WITHOUT_CLASSIFICATION	// collections of values
WITHOUT_CLASSIFICATION	//opening paren in new Foo ( ... )
WITHOUT_CLASSIFICATION	//if we are inside a new Result(), but not inside a nested function
WITHOUT_CLASSIFICATION	//special case
WITHOUT_CLASSIFICATION	// the name of an SQL function
WITHOUT_CLASSIFICATION	//null child could occur for no from clause in a filter
WITHOUT_CLASSIFICATION	//this is basically a copy/paste of OrderByParser ... might be worth refactoring
WITHOUT_CLASSIFICATION	// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p
WITHOUT_CLASSIFICATION	// return aliases not supported in classic translator!
WITHOUT_CLASSIFICATION	//register collection role
WITHOUT_CLASSIFICATION	// The keyword used to specify an identity column, if identity column key generation is supported.
WITHOUT_CLASSIFICATION	//.getElementPropertyMapping();
WITHOUT_CLASSIFICATION	//crossJoins.add(name);
WITHOUT_CLASSIFICATION	//ie no select clause in HQL
WITHOUT_CLASSIFICATION	// initialize the Set of queried identifier spaces (ie. tables)
WITHOUT_CLASSIFICATION	//ie. no select clause
WITHOUT_CLASSIFICATION	//there _was_ a select clause
WITHOUT_CLASSIFICATION	// return the concrete type, or the underlying type if a concrete type // was not specified
WITHOUT_CLASSIFICATION	//many-to-many
WITHOUT_CLASSIFICATION	//q.addCollection(collectionName, collectionRole);
WITHOUT_CLASSIFICATION	// classic parser does not support bulk manipulation statements
WITHOUT_CLASSIFICATION	// can't cache this stuff either (per-invocation)
WITHOUT_CLASSIFICATION	// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance
WITHOUT_CLASSIFICATION	// This is the legacy behaviour for HQL queries...
WITHOUT_CLASSIFICATION	// not known!
WITHOUT_CLASSIFICATION	// not known!
WITHOUT_CLASSIFICATION	// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!
WITHOUT_CLASSIFICATION	// not known!
WITHOUT_CLASSIFICATION	// not known!
WITHOUT_CLASSIFICATION	//Need this, since join condition can appear inside parens!
WITHOUT_CLASSIFICATION	//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression
WITHOUT_CLASSIFICATION	//expressionTerminators.add(","); // deliberately excluded
WITHOUT_CLASSIFICATION	//expressionOpeners.add(","); // deliberately excluded
WITHOUT_CLASSIFICATION	// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!
WITHOUT_CLASSIFICATION	// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)
WITHOUT_CLASSIFICATION	//Inside a BETWEEN ... AND ... expression
WITHOUT_CLASSIFICATION	//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean
WITHOUT_CLASSIFICATION	//ie. a many-to-many
WITHOUT_CLASSIFICATION	//Cope with [,]
WITHOUT_CLASSIFICATION	//Cope with a continued path expression (ie. ].baz)
WITHOUT_CLASSIFICATION	//NOTE: early return
WITHOUT_CLASSIFICATION	//Cope with a subselect
WITHOUT_CLASSIFICATION	//Cope with special cases of AND, NOT, ()
WITHOUT_CLASSIFICATION	//Close extra brackets we opened
WITHOUT_CLASSIFICATION	//take note when this is a boolean expression
WITHOUT_CLASSIFICATION	// assumes that types are all of span 1
WITHOUT_CLASSIFICATION	//process a token, mapping OO path expressions to SQL expressions
WITHOUT_CLASSIFICATION	//Open any extra brackets we might need.
WITHOUT_CLASSIFICATION	//Cope with special cases of AND, NOT, )
WITHOUT_CLASSIFICATION	// the next one up must also be
WITHOUT_CLASSIFICATION	// Add any joins
WITHOUT_CLASSIFICATION	// assumes that types are all of span 1
WITHOUT_CLASSIFICATION	//named query parameter
WITHOUT_CLASSIFICATION	//path expression
WITHOUT_CLASSIFICATION	// saves / updates don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// persists don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	//anything else
WITHOUT_CLASSIFICATION	// the path expression continues after a ]
WITHOUT_CLASSIFICATION	// careful with this!
WITHOUT_CLASSIFICATION	// the path expression ends at the ]
WITHOUT_CLASSIFICATION	// "finish off" the join
WITHOUT_CLASSIFICATION	//NOTICE: no " or . since they are part of (compound) identifiers
WITHOUT_CLASSIFICATION	//cannot instantiate
WITHOUT_CLASSIFICATION	// start by looking for HQL keywords...
WITHOUT_CLASSIFICATION	// inner joins can be abbreviated to 'join'
WITHOUT_CLASSIFICATION	// 'outer' is optional and is ignored
WITHOUT_CLASSIFICATION	// now anything that is not a HQL keyword
WITHOUT_CLASSIFICATION	// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions
WITHOUT_CLASSIFICATION	// treat it as a classname
WITHOUT_CLASSIFICATION	// treat it as a path expression
WITHOUT_CLASSIFICATION	// starts with the name of a mapped class (new style)
WITHOUT_CLASSIFICATION	// starts with a path expression (new style)
WITHOUT_CLASSIFICATION	//allow ODMG OQL style: from Person p, p.cars c
WITHOUT_CLASSIFICATION	//handle quoted strings
WITHOUT_CLASSIFICATION	// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity
WITHOUT_CLASSIFICATION	// "finish off" the join
WITHOUT_CLASSIFICATION	//ignore whitespace
WITHOUT_CLASSIFICATION	//do replacements
WITHOUT_CLASSIFICATION	//handle HQL2 collection syntax
WITHOUT_CLASSIFICATION	// uuid.hex is deprecated
WITHOUT_CLASSIFICATION	// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//hilo params
WITHOUT_CLASSIFICATION	//sql = query;
WITHOUT_CLASSIFICATION	// performance opt
WITHOUT_CLASSIFICATION	//sql = update;
WITHOUT_CLASSIFICATION	//hilo config
WITHOUT_CLASSIFICATION	// so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(
WITHOUT_CLASSIFICATION	//abort the save (the object is already saved by a circular cascade)
WITHOUT_CLASSIFICATION	//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	//do nothing to avoid a lazy property initialization
WITHOUT_CLASSIFICATION	//keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	// so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	// do nothing until we hit the rsult set containing the generated id
WITHOUT_CLASSIFICATION	/* COLUMN and TABLE should be renamed but it would break the public API */
WITHOUT_CLASSIFICATION	// Loaded entity instances, by EntityKey
WITHOUT_CLASSIFICATION	// if the given name is un-qualified we may neen to qualify it
WITHOUT_CLASSIFICATION	// the default...
WITHOUT_CLASSIFICATION	// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	// Identity map of CollectionEntry instances, by the collection wrapper
WITHOUT_CLASSIFICATION	// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// prepare and execute the insert
WITHOUT_CLASSIFICATION	// prepare and execute the insert
WITHOUT_CLASSIFICATION	//fetch the generated id in a separate query
WITHOUT_CLASSIFICATION	// we just hit the last position
WITHOUT_CLASSIFICATION	// scroll ahead
WITHOUT_CLASSIFICATION	// scroll backward
WITHOUT_CLASSIFICATION	// we have not yet hit the last result...
WITHOUT_CLASSIFICATION	// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.
WITHOUT_CLASSIFICATION	// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Caches
WITHOUT_CLASSIFICATION	//Generators:
WITHOUT_CLASSIFICATION	// cache region is defined by the root-class in the hierarchy...
WITHOUT_CLASSIFICATION	//check if the detached object being merged is the parent
WITHOUT_CLASSIFICATION	// after *all* persisters and named queries are registered
WITHOUT_CLASSIFICATION	// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 		NOTE: decided to put this here rather than in the above loop as I was nervous about the performance //		of the loop-in-loop especially considering this is far more likely the 'edge case'
WITHOUT_CLASSIFICATION	//JNDI + Serialization:
WITHOUT_CLASSIFICATION	//checking for named queries
WITHOUT_CLASSIFICATION	//stats
WITHOUT_CLASSIFICATION	// EntityNotFoundDelegate
WITHOUT_CLASSIFICATION	// Check named HQL queries
WITHOUT_CLASSIFICATION	// this will throw an error if there's something wrong.
WITHOUT_CLASSIFICATION	//prevents this session from adding things to cache
WITHOUT_CLASSIFICATION	// from javax.naming.Referenceable
WITHOUT_CLASSIFICATION	// look for the instance by uuid
WITHOUT_CLASSIFICATION	//for a dynamic-class
WITHOUT_CLASSIFICATION	//test this entity to see if we must query it
WITHOUT_CLASSIFICATION	//NOTE EARLY EXIT
WITHOUT_CLASSIFICATION	// for backward-compatability
WITHOUT_CLASSIFICATION	// ignore this error for now
WITHOUT_CLASSIFICATION	//to stop the class from being unloaded
WITHOUT_CLASSIFICATION	// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)
WITHOUT_CLASSIFICATION	//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization
WITHOUT_CLASSIFICATION	// Make sure this is a defined parameter and check the incoming value type
WITHOUT_CLASSIFICATION	// for each of the defined parameters, make sure its value // has been set
WITHOUT_CLASSIFICATION	//we never need to apply locks to the SQL
WITHOUT_CLASSIFICATION	// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.
WITHOUT_CLASSIFICATION	// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//final boolean forceCacheRefresh,
WITHOUT_CLASSIFICATION	//final boolean forceCacheRefresh,
WITHOUT_CLASSIFICATION	// first, try to load it from the temp PC associated to this SS
WITHOUT_CLASSIFICATION	// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy
WITHOUT_CLASSIFICATION	// otherwise immediately materialize it
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// no auto-flushing to support in stateless session
WITHOUT_CLASSIFICATION	//after setting values to object, entityMode
WITHOUT_CLASSIFICATION	//for EJB3
WITHOUT_CLASSIFICATION	// just ignore
WITHOUT_CLASSIFICATION	// do a check
WITHOUT_CLASSIFICATION	// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// do not auto-flush while outside a transaction
WITHOUT_CLASSIFICATION	// this is an internal error of some sort...
WITHOUT_CLASSIFICATION	//stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete
WITHOUT_CLASSIFICATION	// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query
WITHOUT_CLASSIFICATION	// not for internal use:
WITHOUT_CLASSIFICATION	// otherwise, we only need to flush if there are in-memory changes // to the queried tables
WITHOUT_CLASSIFICATION	// might need to run a different filter entirely after the flush // because the collection role may have changed
WITHOUT_CLASSIFICATION	//stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	//stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted
WITHOUT_CLASSIFICATION	// basically just an adapted copy of find(CriteriaImpl)
WITHOUT_CLASSIFICATION	// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy
WITHOUT_CLASSIFICATION	// nothing to do in a stateful session
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// ignore this error for now
WITHOUT_CLASSIFICATION	// we need to writeObject() on this since interceptor is user defined
WITHOUT_CLASSIFICATION	// the old-time stand-by...
WITHOUT_CLASSIFICATION	// parameter bind values...
WITHOUT_CLASSIFICATION	// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// prepend value and type list with null for any positions before the wanted position.
WITHOUT_CLASSIFICATION	// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// we have a CGLIB enhanced entity
WITHOUT_CLASSIFICATION	// we have a CGLIB enhanced entity
WITHOUT_CLASSIFICATION	// we have a Javassist enhanced entity
WITHOUT_CLASSIFICATION	// we have a Javassist enhanced entity
WITHOUT_CLASSIFICATION	// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//let's assume that there is only one lazy fetch group, for now!
WITHOUT_CLASSIFICATION	// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// should *not* need to grow beyond the size of the total number of columns in the rs
WITHOUT_CLASSIFICATION	// should probably no-op commit/rollback here, at least in JTA scenarios
WITHOUT_CLASSIFICATION	// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// explicitly perform no checking...
WITHOUT_CLASSIFICATION	// used from testsuite
WITHOUT_CLASSIFICATION	// assume we are in an auto-commit state
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	// register synch; stats.connect()
WITHOUT_CLASSIFICATION	//noncritical, swallow and let the other propagate!
WITHOUT_CLASSIFICATION	// calls executeBatch()
WITHOUT_CLASSIFICATION	//no big deal
WITHOUT_CLASSIFICATION	// no big deal
WITHOUT_CLASSIFICATION	// no big deal
WITHOUT_CLASSIFICATION	// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case
WITHOUT_CLASSIFICATION	// see explanation above...
WITHOUT_CLASSIFICATION	// If we are in the process of releasing, no sense // checking for aggressive-release possibility.
WITHOUT_CLASSIFICATION	// EARLY EXIT!!!!
WITHOUT_CLASSIFICATION	// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// refer to comment in StatefulPersistenceContext.addCollection()
WITHOUT_CLASSIFICATION	// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Note : success = false, because we don't know the outcome of the transaction
WITHOUT_CLASSIFICATION	// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.
WITHOUT_CLASSIFICATION	// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization
WITHOUT_CLASSIFICATION	// transactions marked for rollback-only cause some TM impls to throw exceptions
WITHOUT_CLASSIFICATION	// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//postInitialize() will be called after initialization
WITHOUT_CLASSIFICATION	// cannot handle single quotes
WITHOUT_CLASSIFICATION	// todo : for 4.0 //	private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); // this is the legacy logging 'category'...
WITHOUT_CLASSIFICATION	// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"
WITHOUT_CLASSIFICATION	// don't even bother trying to read further
WITHOUT_CLASSIFICATION	// don't even bother trying to read any further
WITHOUT_CLASSIFICATION	// position cursor to the last row
WITHOUT_CLASSIFICATION	// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing
WITHOUT_CLASSIFICATION	// Read backwards until we read past the first physical sequential // row with the key we are interested in loading
WITHOUT_CLASSIFICATION	// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading
WITHOUT_CLASSIFICATION	// now get an existing proxy for each row element (if there is one)
WITHOUT_CLASSIFICATION	// force the proxy to resolve itself
WITHOUT_CLASSIFICATION	// this is equivalent to the old behavior...
WITHOUT_CLASSIFICATION	//if null, owner will be retrieved from session
WITHOUT_CLASSIFICATION	//final String queryString, 
WITHOUT_CLASSIFICATION	// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify
WITHOUT_CLASSIFICATION	//end of array, start filling again from start
WITHOUT_CLASSIFICATION	// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.
WITHOUT_CLASSIFICATION	//we can reuse it for each row
WITHOUT_CLASSIFICATION	//can't reuse in this case
WITHOUT_CLASSIFICATION	// First we need to suspend any current JTA transaction and obtain // a JDBC connection
WITHOUT_CLASSIFICATION	//getResultList(results);
WITHOUT_CLASSIFICATION	//if we only returned one entity, query by key is more efficient
WITHOUT_CLASSIFICATION	// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()
WITHOUT_CLASSIFICATION	// handle empty collection
WITHOUT_CLASSIFICATION	// else no collection element, but also no owner
WITHOUT_CLASSIFICATION	//handle empty collections
WITHOUT_CLASSIFICATION	// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)
WITHOUT_CLASSIFICATION	// validate() instances of Validatable
WITHOUT_CLASSIFICATION	// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>
WITHOUT_CLASSIFICATION	// remove all collections for the entity from the session-level cache
WITHOUT_CLASSIFICATION	//null version means the object is in the process of being loaded somewhere else in the ResultSet
WITHOUT_CLASSIFICATION	//problematic for <key-many-to-one>!
WITHOUT_CLASSIFICATION	//use the id passed in
WITHOUT_CLASSIFICATION	//do nothing
WITHOUT_CLASSIFICATION	// prefer re-generation of identity!
WITHOUT_CLASSIFICATION	//no point doing this if NONE was requested
WITHOUT_CLASSIFICATION	//If the object is already loaded, return the loaded one
WITHOUT_CLASSIFICATION	//its already loaded so don't need to hydrate it
WITHOUT_CLASSIFICATION	// cascade the refresh prior to refreshing this entity
WITHOUT_CLASSIFICATION	//the load() which takes an entity does not pass an entityName
WITHOUT_CLASSIFICATION	//we only check the version when _upgrading_ lock modes
WITHOUT_CLASSIFICATION	// look for a proxy
WITHOUT_CLASSIFICATION	//we need to upgrade the lock mode to the mode requested
WITHOUT_CLASSIFICATION	//its the given optional object
WITHOUT_CLASSIFICATION	// instantiate a new instance
WITHOUT_CLASSIFICATION	//need to hydrate it.
WITHOUT_CLASSIFICATION	// return a newly loaded object
WITHOUT_CLASSIFICATION	//will be ignored, using the existing Entry instead
WITHOUT_CLASSIFICATION	// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself
WITHOUT_CLASSIFICATION	//materialize associations (and initialize the object) later
WITHOUT_CLASSIFICATION	// Get the persister for the _subclass_
WITHOUT_CLASSIFICATION	// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior
WITHOUT_CLASSIFICATION	// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);
WITHOUT_CLASSIFICATION	//addInitializedCollection(collection, persister, id);
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	/*|| oj.getJoinable().consumesCollectionAlias() */
WITHOUT_CLASSIFICATION	// here we do not bother with the discriminator.
WITHOUT_CLASSIFICATION	// Code to handle subclasses of topClass
WITHOUT_CLASSIFICATION	//woops we got an instance of another class hierarchy branch
WITHOUT_CLASSIFICATION	// we can go straight to the first required row
WITHOUT_CLASSIFICATION	// we need to step through the rows one row at a time (slow)
WITHOUT_CLASSIFICATION	// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.
WITHOUT_CLASSIFICATION	// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.
WITHOUT_CLASSIFICATION	//before adding to collection!
WITHOUT_CLASSIFICATION	// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...
WITHOUT_CLASSIFICATION	//operations which cascade as far as the collection also cascade to collection elements
WITHOUT_CLASSIFICATION	// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:
WITHOUT_CLASSIFICATION	//a composite key
WITHOUT_CLASSIFICATION	// if no batch, use "foo = ? and bar = ?"
WITHOUT_CLASSIFICATION	//it must be a collection fetch
WITHOUT_CLASSIFICATION	// needed later for many-to-many/filter application
WITHOUT_CLASSIFICATION	/*&& etype.isReferenceToPrimaryKey()*/
WITHOUT_CLASSIFICATION	// it might still need to apply a collection ordering based on a // many-to-many defined order-by...
WITHOUT_CLASSIFICATION	// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins
WITHOUT_CLASSIFICATION	// belong to other persister // belong to other persister
WITHOUT_CLASSIFICATION	// we found it
WITHOUT_CLASSIFICATION	//we can use an inner join for the many-to-many
WITHOUT_CLASSIFICATION	//disable a join back to this same association
WITHOUT_CLASSIFICATION	//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!
WITHOUT_CLASSIFICATION	//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases
WITHOUT_CLASSIFICATION	//root entity comes *last*
WITHOUT_CLASSIFICATION	//deliberately ignore return value!
WITHOUT_CLASSIFICATION	//alias may be null //EARLY EXIT
WITHOUT_CLASSIFICATION	// if it is a compound path
WITHOUT_CLASSIFICATION	// otherwise assume the parent is the the criteria that created us
WITHOUT_CLASSIFICATION	// if its the root criteria, we are done
WITHOUT_CLASSIFICATION	// otherwise, recurse
WITHOUT_CLASSIFICATION	//the criteria instance
WITHOUT_CLASSIFICATION	// the entity name
WITHOUT_CLASSIFICATION	//not found in inner query , try the outer query
WITHOUT_CLASSIFICATION	//not found in inner query , try the outer query
WITHOUT_CLASSIFICATION	//it refers to an alias of a projection
WITHOUT_CLASSIFICATION	//should never happen, i think
WITHOUT_CLASSIFICATION	// Detect discriminator values...
WITHOUT_CLASSIFICATION	// Convert the string value into the proper type.
WITHOUT_CLASSIFICATION	// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us
WITHOUT_CLASSIFICATION	//it does not refer to an alias of a projection, //look for a property
WITHOUT_CLASSIFICATION	// Otherwise, this is an ordinary value.
WITHOUT_CLASSIFICATION	// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")
WITHOUT_CLASSIFICATION	//	private final String[] sqlAliases; //	private final String[] sqlAliasSuffixes;
WITHOUT_CLASSIFICATION	// this is only needed (afaict) for ResultTransformer processing...
WITHOUT_CLASSIFICATION	// determine if the collection elements are entities...
WITHOUT_CLASSIFICATION	// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)
WITHOUT_CLASSIFICATION	// replace {....} with corresponding column aliases
WITHOUT_CLASSIFICATION	// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop
WITHOUT_CLASSIFICATION	// apend everything up until the next encountered open brace
WITHOUT_CLASSIFICATION	// it is a simple table alias {foo}
WITHOUT_CLASSIFICATION	// passing through anything we do not know : to support jdbc escape sequences HB-898
WITHOUT_CLASSIFICATION	// passing through anything we do not know : to support jdbc escape sequences HB-898
WITHOUT_CLASSIFICATION	// The current alias is referencing the collection to be eagerly fetched
WITHOUT_CLASSIFICATION	// it is a property reference {foo.bar}
WITHOUT_CLASSIFICATION	// Possibly handle :something parameters for the query ?
WITHOUT_CLASSIFICATION	// Let return-propertys override whatever the persister has for aliases.
WITHOUT_CLASSIFICATION	//	private final List persisters = new ArrayList();
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	//NOTE: EARLY EXIT!
WITHOUT_CLASSIFICATION	//	private final List scalarTypes = new ArrayList(); //	private final List scalarColumnAliases = new ArrayList();
WITHOUT_CLASSIFICATION	// Now, process the returns
WITHOUT_CLASSIFICATION	//	private List collectionOwnerAliases = new ArrayList(); //	private List collectionAliases = new ArrayList(); //	private List collectionPersisters = new ArrayList(); //	private List collectionResults = new ArrayList();
WITHOUT_CLASSIFICATION	// already been processed...
WITHOUT_CLASSIFICATION	// already been processed...
WITHOUT_CLASSIFICATION	// Make sure the owner alias is known...
WITHOUT_CLASSIFICATION	// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners
WITHOUT_CLASSIFICATION	//		scalarColumnAliases.add( typeReturn.getColumnAlias() ); //		scalarTypes.add( typeReturn.getType() );
WITHOUT_CLASSIFICATION	// If this return's alias has not been processed yet, do so b4 further processing of this return
WITHOUT_CLASSIFICATION	//			collectionOwnerAliases.add( ownerAlias );
WITHOUT_CLASSIFICATION	// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved
WITHOUT_CLASSIFICATION	// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)
WITHOUT_CLASSIFICATION	//EARLY EXIT
WITHOUT_CLASSIFICATION	// cascade-save to collections AFTER the collection owner was saved
WITHOUT_CLASSIFICATION	// Initialize the error handling delegate.
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// currently only the Hibernate-supplied DbTimestampType is supported here
WITHOUT_CLASSIFICATION	// This is called when it's time to fully resolve a path expression.
WITHOUT_CLASSIFICATION	// make a new one
WITHOUT_CLASSIFICATION	// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...
WITHOUT_CLASSIFICATION	// (NOT (GT a b) ) => (LE a b)
WITHOUT_CLASSIFICATION	//private Type[] sqlResultTypes;
WITHOUT_CLASSIFICATION	//include the discriminator and class-level where, but not filters
WITHOUT_CLASSIFICATION	//sqlResultTypes = selectClause.getSqlResultTypes();
WITHOUT_CLASSIFICATION	//by default
WITHOUT_CLASSIFICATION	// This is now handled earlier in this method.
WITHOUT_CLASSIFICATION	// -- Loader implementation --
WITHOUT_CLASSIFICATION	// -- Loader overrides --
WITHOUT_CLASSIFICATION	// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)
WITHOUT_CLASSIFICATION	//NONE, because its the requested lock mode, not the actual! 
WITHOUT_CLASSIFICATION	// meant to handle dynamic instantiation queries...
WITHOUT_CLASSIFICATION	// --- Query translator methods ---
WITHOUT_CLASSIFICATION	// -- Implementation private methods --
WITHOUT_CLASSIFICATION	//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user
WITHOUT_CLASSIFICATION	// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used
WITHOUT_CLASSIFICATION	// to support dialects that have their own identity data type
WITHOUT_CLASSIFICATION	// Prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	//used also for generation of FK names!
WITHOUT_CLASSIFICATION	//usually useless
WITHOUT_CLASSIFICATION	// added this caching as I noticed that getType() is being called multiple times...
WITHOUT_CLASSIFICATION	//do not add unique constraint on DB not supporting unique and nullable columns
WITHOUT_CLASSIFICATION	//for backward compatibility, disable this:
WITHOUT_CLASSIFICATION	//may be final //may be final //may be final
WITHOUT_CLASSIFICATION	//may be final
WITHOUT_CLASSIFICATION	// may be final
WITHOUT_CLASSIFICATION	// Custom SQL
WITHOUT_CLASSIFICATION	//Primary key constraint
WITHOUT_CLASSIFICATION	// the root of the incoming property path matched one // of the embedded composite identifier properties
WITHOUT_CLASSIFICATION	// ignore it...
WITHOUT_CLASSIFICATION	//flat recursive algorithm
WITHOUT_CLASSIFICATION	//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded
WITHOUT_CLASSIFICATION	//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)
WITHOUT_CLASSIFICATION	//pass the entity-name, if not a collection-id
WITHOUT_CLASSIFICATION	// Custom SQL
WITHOUT_CLASSIFICATION	//Primary key constraint
WITHOUT_CLASSIFICATION	//pass the column name (a generated id almost always has a single column)
WITHOUT_CLASSIFICATION	//needed to satisfy KeyValue
WITHOUT_CLASSIFICATION	// empty means no scoping
WITHOUT_CLASSIFICATION	// index should be last column listed
WITHOUT_CLASSIFICATION	//if it is a formula index, use the element columns in the PK
WITHOUT_CLASSIFICATION	// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns
WITHOUT_CLASSIFICATION	/*ArrayList list = new ArrayList();			list.addAll( getKey().getConstraintColumns() );			list.addAll( getIndex().getConstraintColumns() );			getCollectionTable().createUniqueKey(list);*/
WITHOUT_CLASSIFICATION	// }
WITHOUT_CLASSIFICATION	// no foreign key element of for a one-to-many
WITHOUT_CLASSIFICATION	//TODO: we could just return all false...
WITHOUT_CLASSIFICATION	// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints
WITHOUT_CLASSIFICATION	//TODO: we could just return all false...
WITHOUT_CLASSIFICATION	// if the property mapping consists of all formulas,  // make it non-updateable
WITHOUT_CLASSIFICATION	//columnUpdateability.length==0 ||
WITHOUT_CLASSIFICATION	// if the property mapping consists of all formulas,  // make it insertable
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// expected type is intrinsic here...
WITHOUT_CLASSIFICATION	//}
WITHOUT_CLASSIFICATION	//}
WITHOUT_CLASSIFICATION	//return memberPersister.getPropertyType(propertyName);
WITHOUT_CLASSIFICATION	//return memberPersister.toColumns(alias, propertyName);
WITHOUT_CLASSIFICATION	//return memberPersister.getType();
WITHOUT_CLASSIFICATION	/*&& !indexIsFormula*/
WITHOUT_CLASSIFICATION	//		return !isOneToMany();
WITHOUT_CLASSIFICATION	//instanceof AssociationType;
WITHOUT_CLASSIFICATION	// we need to determine the best way to know that two joinables // represent a single many-to-many...
WITHOUT_CLASSIFICATION	//strip leading ','
WITHOUT_CLASSIFICATION	//public boolean isSubselectLoadable();
WITHOUT_CLASSIFICATION	// KEY
WITHOUT_CLASSIFICATION	//columns
WITHOUT_CLASSIFICATION	//SQL statements
WITHOUT_CLASSIFICATION	//extra information about the element type
WITHOUT_CLASSIFICATION	//types
WITHOUT_CLASSIFICATION	// custom sql
WITHOUT_CLASSIFICATION	//private final String unquotedIdentifierColumnName;
WITHOUT_CLASSIFICATION	// dynamic filters specifically for many-to-many inside the collection
WITHOUT_CLASSIFICATION	// dynamic filters for the collection
WITHOUT_CLASSIFICATION	// NativeSQL: collect key column and auto-aliases
WITHOUT_CLASSIFICATION	//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);
WITHOUT_CLASSIFICATION	//ELEMENT
WITHOUT_CLASSIFICATION	// NativeSQL: collect element column and auto-aliases
WITHOUT_CLASSIFICATION	// INDEX AND ROW SELECT
WITHOUT_CLASSIFICATION	// NativeSQL: collect index column and auto-aliases
WITHOUT_CLASSIFICATION	//unquotedIdentifierColumnName = identifierColumnAlias;
WITHOUT_CLASSIFICATION	//unquotedIdentifierColumnName = null;
WITHOUT_CLASSIFICATION	//GENERATE THE SQL:
WITHOUT_CLASSIFICATION	// for non-arrays, we don't need to know the element class //elementType.returnedClass();
WITHOUT_CLASSIFICATION	//not all classpersisters implement PropertyMapping!
WITHOUT_CLASSIFICATION	// Handle any filters applied to this collection
WITHOUT_CLASSIFICATION	// Handle any filters applied to this collection for many-to-many
WITHOUT_CLASSIFICATION	//if there is a user-specified loader, return that //TODO: filters!?
WITHOUT_CLASSIFICATION	// Take care of any entities that might have // been evicted!	
WITHOUT_CLASSIFICATION	//strip leading ','
WITHOUT_CLASSIFICATION	// Run a subquery loader
WITHOUT_CLASSIFICATION	//needed by arrays
WITHOUT_CLASSIFICATION	//TODO: something with formulas...
WITHOUT_CLASSIFICATION	//an assertion
WITHOUT_CLASSIFICATION	// Remove all the old entries
WITHOUT_CLASSIFICATION	//create all the new entries
WITHOUT_CLASSIFICATION	/*&& !indexIsFormula*/
WITHOUT_CLASSIFICATION	/*&& !indexIsFormula*/
WITHOUT_CLASSIFICATION	//delete all the deleted entries
WITHOUT_CLASSIFICATION	//insert all the new entries
WITHOUT_CLASSIFICATION	//==elementType ??
WITHOUT_CLASSIFICATION	//update all the modified entries
WITHOUT_CLASSIFICATION	//identifier collections not supported for 1-to-many
WITHOUT_CLASSIFICATION	// update removed rows fks to null
WITHOUT_CLASSIFICATION	// will still be issued when it used to be null
WITHOUT_CLASSIFICATION	// now update all changed or added rows fks
WITHOUT_CLASSIFICATION	//			buf.append( selectFragment( lhsAlias, "" ) )//ignore suffix for collection columns!
WITHOUT_CLASSIFICATION	//use suffix for the entity columns
WITHOUT_CLASSIFICATION	// the class hierarchy structure
WITHOUT_CLASSIFICATION	//private final String rootTableName;
WITHOUT_CLASSIFICATION	//INITIALIZATION:
WITHOUT_CLASSIFICATION	//Custom SQL
WITHOUT_CLASSIFICATION	// the class hierarchy structure
WITHOUT_CLASSIFICATION	// Execute the SQL:
WITHOUT_CLASSIFICATION	// This could also just be true all the time...
WITHOUT_CLASSIFICATION	//chop the last union (all)
WITHOUT_CLASSIFICATION	//TODO: check this....
WITHOUT_CLASSIFICATION	//INITIALIZATION:
WITHOUT_CLASSIFICATION	// properties of this class, including inherited properties
WITHOUT_CLASSIFICATION	// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE
WITHOUT_CLASSIFICATION	//MULTITABLES
WITHOUT_CLASSIFICATION	// Custom sql
WITHOUT_CLASSIFICATION	// subclass closure properties
WITHOUT_CLASSIFICATION	// SUBCLASSES
WITHOUT_CLASSIFICATION	//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
WITHOUT_CLASSIFICATION	//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
WITHOUT_CLASSIFICATION	// don't need subclass tables, because they can't appear in conditions
WITHOUT_CLASSIFICATION	// special case where we need to force incloude all subclass joins
WITHOUT_CLASSIFICATION	// the class hierarchy structure
WITHOUT_CLASSIFICATION	// properties of this class, including inherited properties
WITHOUT_CLASSIFICATION	// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	//get em on the second pass!
WITHOUT_CLASSIFICATION	// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)
WITHOUT_CLASSIFICATION	// discriminator column
WITHOUT_CLASSIFICATION	//INITIALIZATION:
WITHOUT_CLASSIFICATION	//private final Map propertyTableNumbersByName = new HashMap();
WITHOUT_CLASSIFICATION	// CLASS + TABLE
WITHOUT_CLASSIFICATION	// DISCRIMINATOR
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// SUBCLASSES
WITHOUT_CLASSIFICATION	// Execute the SQL:
WITHOUT_CLASSIFICATION	// JOINS
WITHOUT_CLASSIFICATION	//propertyTableNumbersByName.put( prop.getName(), join );
WITHOUT_CLASSIFICATION	//Access cached SQL
WITHOUT_CLASSIFICATION	//figure out which tables need to be fetched
WITHOUT_CLASSIFICATION	//figure out which columns are needed
WITHOUT_CLASSIFICATION	//figure out which formulas are needed
WITHOUT_CLASSIFICATION	//render the SQL
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// The optional SQL string defined in the where attribute
WITHOUT_CLASSIFICATION	//information about lazy properties of this class
WITHOUT_CLASSIFICATION	//information about all properties in class hierarchy
WITHOUT_CLASSIFICATION	//information about all columns/formulas in class hierarchy
WITHOUT_CLASSIFICATION	// dynamic filters attached to the class-level
WITHOUT_CLASSIFICATION	// SQL strings
WITHOUT_CLASSIFICATION	// for objects that came in via update()
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// IDENTIFIER
WITHOUT_CLASSIFICATION	// VERSION
WITHOUT_CLASSIFICATION	//WHERE STRING
WITHOUT_CLASSIFICATION	// SUBCLASS PROPERTY CLOSURE
WITHOUT_CLASSIFICATION	//before add :-)
WITHOUT_CLASSIFICATION	// Handle any filters applied to the class level
WITHOUT_CLASSIFICATION	// only one-to-one is lazy fetched
WITHOUT_CLASSIFICATION	//note early exit here:
WITHOUT_CLASSIFICATION	// object have been loaded with setReadOnly(true); HHH-2236
WITHOUT_CLASSIFICATION	// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!
WITHOUT_CLASSIFICATION	//strip leading ", "
WITHOUT_CLASSIFICATION	//if there is no resulting row, return null
WITHOUT_CLASSIFICATION	//otherwise return the "hydrated" state (ie. associations are not resolved)
WITHOUT_CLASSIFICATION	//null owner ok??
WITHOUT_CLASSIFICATION	// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...
WITHOUT_CLASSIFICATION	// Create a new FROM node for the referenced class.
WITHOUT_CLASSIFICATION	// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...
WITHOUT_CLASSIFICATION	// performance op to avoid the array search
WITHOUT_CLASSIFICATION	// properly handle property-ref-based associations
WITHOUT_CLASSIFICATION	//Enable for HHH-440, which we don't like:
WITHOUT_CLASSIFICATION	// ALIASES
WITHOUT_CLASSIFICATION	// aliases named identifier ( alias.idname )
WITHOUT_CLASSIFICATION	// aliases for composite-id's
WITHOUT_CLASSIFICATION	// Fetch embedded identifiers propertynames from the "virtual" identifier component
WITHOUT_CLASSIFICATION	// embedded composite ids ( alias.idname1, alias.idname2 )
WITHOUT_CLASSIFICATION	// TODO: skip formulas?
WITHOUT_CLASSIFICATION	//don't need filters for the static loaders
WITHOUT_CLASSIFICATION	//do two passes, for collection property-ref!
WITHOUT_CLASSIFICATION	// select the correct row by either pk or rowid
WITHOUT_CLASSIFICATION	//TODO: eventually, rowIdName[j]
WITHOUT_CLASSIFICATION	// this is a property of the table, which we are updating
WITHOUT_CLASSIFICATION	// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression
WITHOUT_CLASSIFICATION	// we are using "all" or "dirty" property-based optimistic locking
WITHOUT_CLASSIFICATION	// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here
WITHOUT_CLASSIFICATION	// this property belongs on the table and is to be inserted
WITHOUT_CLASSIFICATION	// add normal properties
WITHOUT_CLASSIFICATION	// add the discriminator
WITHOUT_CLASSIFICATION	// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type
WITHOUT_CLASSIFICATION	// add normal properties
WITHOUT_CLASSIFICATION	// this property belongs on the table and is to be inserted
WITHOUT_CLASSIFICATION	// add the discriminator
WITHOUT_CLASSIFICATION	// add the primary key
WITHOUT_CLASSIFICATION	// delegate already handles PK columns
WITHOUT_CLASSIFICATION	// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param
WITHOUT_CLASSIFICATION	// Render the SQL query
WITHOUT_CLASSIFICATION	// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state
WITHOUT_CLASSIFICATION	// TODO : shouldnt inserts be Expectations.NONE?
WITHOUT_CLASSIFICATION	//don't bother trying to update, we know there is no row there yet
WITHOUT_CLASSIFICATION	//if all fields are null, we might need to delete existing row
WITHOUT_CLASSIFICATION	//there is probably a row there, so try to update //if no rows were updated, we will find out
WITHOUT_CLASSIFICATION	//note: updates to joined tables can't be batched...
WITHOUT_CLASSIFICATION	// starting index
WITHOUT_CLASSIFICATION	//Now write the values of fields onto the prepared statement
WITHOUT_CLASSIFICATION	// Write any appropriate versioning conditional parameters
WITHOUT_CLASSIFICATION	//Render the SQL query
WITHOUT_CLASSIFICATION	// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued
WITHOUT_CLASSIFICATION	// We should use the _current_ object state (ie. after any updates that occurred during flush)
WITHOUT_CLASSIFICATION	// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	  oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)
WITHOUT_CLASSIFICATION	// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type
WITHOUT_CLASSIFICATION	// For the case of dynamic-update="true", we need to generate the UPDATE SQL
WITHOUT_CLASSIFICATION	// don't need to check laziness (dirty checking algorithm handles that)
WITHOUT_CLASSIFICATION	// For the case of dynamic-update="false", or no snapshot, we use the static SQL
WITHOUT_CLASSIFICATION	// if not "get", then try "is"
WITHOUT_CLASSIFICATION	// Now update only the tables with dirty properties (and the table with the version number)
WITHOUT_CLASSIFICATION	// For the case of dynamic-insert="true", we need to generate the INSERT SQL
WITHOUT_CLASSIFICATION	// For the case of dynamic-insert="true", we need to generate the INSERT SQL
WITHOUT_CLASSIFICATION	// For the case of dynamic-insert="false", use the static SQL
WITHOUT_CLASSIFICATION	// For the case of dynamic-insert="false", use the static SQL
WITHOUT_CLASSIFICATION	// not supported
WITHOUT_CLASSIFICATION	// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	// we need to utilize dynamic delete statements
WITHOUT_CLASSIFICATION	// otherwise, utilize the static delete statements
WITHOUT_CLASSIFICATION	//just a performance opt!
WITHOUT_CLASSIFICATION	//just a performance opt!
WITHOUT_CLASSIFICATION	//all joins join to the pk of the driving table
WITHOUT_CLASSIFICATION	//notice that we skip the first table; it is the driving table!
WITHOUT_CLASSIFICATION	//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables
WITHOUT_CLASSIFICATION	//skip the driving table
WITHOUT_CLASSIFICATION	//get 'em in the right order (not that it really matters)
WITHOUT_CLASSIFICATION	// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases
WITHOUT_CLASSIFICATION	//render the where and from parts
WITHOUT_CLASSIFICATION	//we *could* regerate this inside each called method!
WITHOUT_CLASSIFICATION	//now render the joins
WITHOUT_CLASSIFICATION	// This will add the new from element to the origin.
WITHOUT_CLASSIFICATION	//now render the select clause
WITHOUT_CLASSIFICATION	//now tie it all together
WITHOUT_CLASSIFICATION	//insert/update/delete SQL
WITHOUT_CLASSIFICATION	//select SQL
WITHOUT_CLASSIFICATION	//no need to check laziness, dirty checking handles that
WITHOUT_CLASSIFICATION	// Fully resolve the map reference, create implicit joins.
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// The basic implementation is to simply use the node's text
WITHOUT_CLASSIFICATION	// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.
WITHOUT_CLASSIFICATION	// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.
WITHOUT_CLASSIFICATION	// check the version unsaved-value, if appropriate
WITHOUT_CLASSIFICATION	// let this take precedence if defined, since it works for // assigned identifiers
WITHOUT_CLASSIFICATION	// check the id unsaved-value
WITHOUT_CLASSIFICATION	// check to see if it is in the second-level cache
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// For property references generate <tablealias>.<columnname> as <projectionalias>
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//if there is no resulting row, return null
WITHOUT_CLASSIFICATION	//force immediate execution of the insert
WITHOUT_CLASSIFICATION	// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.
WITHOUT_CLASSIFICATION	// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//cannot occur
WITHOUT_CLASSIFICATION	//cannot occur
WITHOUT_CLASSIFICATION	// only carry on if the method has no parameters
WITHOUT_CLASSIFICATION	// try "get"
WITHOUT_CLASSIFICATION	// do nothing...
WITHOUT_CLASSIFICATION	// do nothing...
WITHOUT_CLASSIFICATION	// should be safe to only ever expect EntityPersister references here
WITHOUT_CLASSIFICATION	// this page intentionally left blank :)
WITHOUT_CLASSIFICATION	// do not do anything
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	//cant instantiate
WITHOUT_CLASSIFICATION	//if it is a property of an embedded component, invoke on the "identifier"
WITHOUT_CLASSIFICATION	// otherwise:
WITHOUT_CLASSIFICATION	// skip finalize methods
WITHOUT_CLASSIFICATION	// note: interfaces is assumed to already contain HibernateProxy.class
WITHOUT_CLASSIFICATION	// note: interfaces is assumed to already contain HibernateProxy.class
WITHOUT_CLASSIFICATION	// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.
WITHOUT_CLASSIFICATION	// while constructor is running
WITHOUT_CLASSIFICATION	// while constructor is running
WITHOUT_CLASSIFICATION	// note: interface is assumed to already contain HibernateProxy.class
WITHOUT_CLASSIFICATION	// interfaces // arguments
WITHOUT_CLASSIFICATION	//TODO!
WITHOUT_CLASSIFICATION	// Get the caller
WITHOUT_CLASSIFICATION	// Get the caller principals
WITHOUT_CLASSIFICATION	//private static final Alias DEFAULT_ALIAS = new Alias(10, null);
WITHOUT_CLASSIFICATION	// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally
WITHOUT_CLASSIFICATION	//if the identifier is quoted, remove the quotes
WITHOUT_CLASSIFICATION	//truncate the identifier to the max alias length, less the suffix length
WITHOUT_CLASSIFICATION	//full joins are not supported.. yet!
WITHOUT_CLASSIFICATION	// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1
WITHOUT_CLASSIFICATION	// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	// strip off any leading 'and' token
WITHOUT_CLASSIFICATION	// if the condition is not already there...
WITHOUT_CLASSIFICATION	//dontSpace.add("'");
WITHOUT_CLASSIFICATION	//for MySQL
WITHOUT_CLASSIFICATION	//HashMap columnsUnique = new HashMap();
WITHOUT_CLASSIFICATION	//null caused some problems
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	//not sure if this would ever be null but wanted to be careful
WITHOUT_CLASSIFICATION	//even on inverse="true"
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	// If true then execute db updates, otherwise just generate and display updates
WITHOUT_CLASSIFICATION	// we only release the connection
WITHOUT_CLASSIFICATION	// deprecated option...
WITHOUT_CLASSIFICATION	//if an exception occurs during flush, user must call rollback()
WITHOUT_CLASSIFICATION	//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback
WITHOUT_CLASSIFICATION	// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)
WITHOUT_CLASSIFICATION	// Create an DotNode AST for the path and resolve it.
WITHOUT_CLASSIFICATION	//if an exception occurs during flush, user must call rollback()
WITHOUT_CLASSIFICATION	//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)
WITHOUT_CLASSIFICATION	// swallow it, and continue to roll back JTA transaction
WITHOUT_CLASSIFICATION	// so the transaction is already rolled back, by JTA spec
WITHOUT_CLASSIFICATION	// this method is a noop if there is a Synchronization!
WITHOUT_CLASSIFICATION	// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join
WITHOUT_CLASSIFICATION	// WebSphere, however, is not a sane JEE/JTA container...
WITHOUT_CLASSIFICATION	// for sane JEE/JTA containers, the transaction itself functions as its identifier...
WITHOUT_CLASSIFICATION	//swallow, the transaction was finished
WITHOUT_CLASSIFICATION	// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Create the join element under the from element.
WITHOUT_CLASSIFICATION	// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// map of EntityMode -> Tuplizer
WITHOUT_CLASSIFICATION	// this is a virtual id property...
WITHOUT_CLASSIFICATION	//this one needed only for guessEntityMode()
WITHOUT_CLASSIFICATION	// create our own copy of the user-supplied tuplizer impl map
WITHOUT_CLASSIFICATION	// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel
WITHOUT_CLASSIFICATION	// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available
WITHOUT_CLASSIFICATION	// Build the dynamic-map tuplizer...
WITHOUT_CLASSIFICATION	// then dom4j tuplizer, if dom4j representation is available
WITHOUT_CLASSIFICATION	// Build the dynamic-map tuplizer...
WITHOUT_CLASSIFICATION	// put the "standard" tuplizers into the tuplizer map first
WITHOUT_CLASSIFICATION	// found a ctor, but it was not publicly accessible so try to request accessibility
WITHOUT_CLASSIFICATION	//	private final SessionFactoryImplementor sessionFactory;
WITHOUT_CLASSIFICATION	// cached for efficiency...
WITHOUT_CLASSIFICATION	//	public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {
WITHOUT_CLASSIFICATION	//		this.sessionFactory = sessionFactory;
WITHOUT_CLASSIFICATION	//it was not embedded, so the argument is just an id
WITHOUT_CLASSIFICATION	// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available
WITHOUT_CLASSIFICATION	// then dom4j tuplizer, if dom4j representation is available
WITHOUT_CLASSIFICATION	// put the "standard" tuplizers into the tuplizer map first
WITHOUT_CLASSIFICATION	// then handle any user-defined entity modes...
WITHOUT_CLASSIFICATION	//return currentId;
WITHOUT_CLASSIFICATION	//reset the id
WITHOUT_CLASSIFICATION	//		origin.addDestination( destination ); // This was the cause of HHH-242 //		origin.setType( FROM_FRAGMENT );			// Set the parent node type so that the AST is properly formed. // The destination node will have all the FROM text. // The parent node is a collection join too (voodoo - see JoinProcessor)
WITHOUT_CLASSIFICATION	//reset the version
WITHOUT_CLASSIFICATION	// the default is to simply not lazy fetch properties for now...
WITHOUT_CLASSIFICATION	// Add the second join, the one that ends in the destination table.
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// found a ctor, but it was not publicly accessible so try to request accessibility
WITHOUT_CLASSIFICATION	// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy
WITHOUT_CLASSIFICATION	//		return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();
WITHOUT_CLASSIFICATION	//not final because proxy factory creation can fail
WITHOUT_CLASSIFICATION	// superclass entity-name
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//init the aliases, after initing the constructornode
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// legacy behavior (with no abstract attribute specified)
WITHOUT_CLASSIFICATION	// Get ready to start adding nodes.
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//note: this affects the return value!
WITHOUT_CLASSIFICATION	// Need to account for allowable '_' within the variant
WITHOUT_CLASSIFICATION	// Add the type to the list of returned sqlResultTypes.
WITHOUT_CLASSIFICATION	// Collection Types:
WITHOUT_CLASSIFICATION	// convenience methods relating to operations across arrays of types...
WITHOUT_CLASSIFICATION	//lobs cannot be compared
WITHOUT_CLASSIFICATION	//Blobs are ignored by merge()
WITHOUT_CLASSIFICATION	//value is the entity name
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().
WITHOUT_CLASSIFICATION	//TODO!
WITHOUT_CLASSIFICATION	//xml is the entity name
WITHOUT_CLASSIFICATION	//special case ... this is the leaf of the containment graph, even though not immutable
WITHOUT_CLASSIFICATION	//tolerates nulls
WITHOUT_CLASSIFICATION	/*sqlResultTypeList,*/
WITHOUT_CLASSIFICATION	// metaType is assumed to be single-column type
WITHOUT_CLASSIFICATION	// Get all the select expressions (that we just generated) and render the select.
WITHOUT_CLASSIFICATION	// Look through the FromElement's children to find any collections of values that should be fetched...
WITHOUT_CLASSIFICATION	//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...
WITHOUT_CLASSIFICATION	// Use the lower case function name. // Remember whether we're in a SELECT clause or not.
WITHOUT_CLASSIFICATION	// IDENT might be the name of a class.
WITHOUT_CLASSIFICATION	//TODO!!!
WITHOUT_CLASSIFICATION	//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only
WITHOUT_CLASSIFICATION	//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only
WITHOUT_CLASSIFICATION	// both are Timestamps
WITHOUT_CLASSIFICATION	// at least one is a plain old Date
WITHOUT_CLASSIFICATION	//noop
WITHOUT_CLASSIFICATION	// if the corresponding SQL value is NULL, the reader we got is NULL as well
WITHOUT_CLASSIFICATION	// Fetch Reader content up to the end - and put characters in a StringBuffer
WITHOUT_CLASSIFICATION	// Return StringBuffer content as a large String
WITHOUT_CLASSIFICATION	//or Types.LONGVARCHAR?
WITHOUT_CLASSIFICATION	//Not called at runtime so doesn't matter if its slow :)
WITHOUT_CLASSIFICATION	//TODO
WITHOUT_CLASSIFICATION	// Chop off the rest of the tree.
WITHOUT_CLASSIFICATION	//different nullability rules for pk/fk
WITHOUT_CLASSIFICATION	//cache this
WITHOUT_CLASSIFICATION	//only really need new array during semiresolve!
WITHOUT_CLASSIFICATION	// Forcefully remove leading ands from where fragments; the grammar will // handle adding them
WITHOUT_CLASSIFICATION	//TODO!!!!!!!
WITHOUT_CLASSIFICATION	// Create a new FILTERS node as a parent of all filters
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;
WITHOUT_CLASSIFICATION	//nothing to do
WITHOUT_CLASSIFICATION	//nothing to do
WITHOUT_CLASSIFICATION	// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...
WITHOUT_CLASSIFICATION	//lobs cannot be compared
WITHOUT_CLASSIFICATION	//not really necessary, I guess...
WITHOUT_CLASSIFICATION	//Clobs are ignored by merge() operation
WITHOUT_CLASSIFICATION	// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!
WITHOUT_CLASSIFICATION	// collections cannot be compared
WITHOUT_CLASSIFICATION	//remember the uk value
WITHOUT_CLASSIFICATION	//NOOP
WITHOUT_CLASSIFICATION	//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);
WITHOUT_CLASSIFICATION	//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly
WITHOUT_CLASSIFICATION	// collections don't dirty an unversioned parent entity
WITHOUT_CLASSIFICATION	// return false;
WITHOUT_CLASSIFICATION	// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception
WITHOUT_CLASSIFICATION	//NOTE: we avoid joining to the next table if the named property is just the foreign key value
WITHOUT_CLASSIFICATION	// the key is the owning entity itself, so get the ID from the key
WITHOUT_CLASSIFICATION	// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...
WITHOUT_CLASSIFICATION	//ignore subselect keywords
WITHOUT_CLASSIFICATION	// copy elements into newly empty target collection
WITHOUT_CLASSIFICATION	// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection
WITHOUT_CLASSIFICATION	// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...
WITHOUT_CLASSIFICATION	// get the elements back into the target making sure to handle dirty flag
WITHOUT_CLASSIFICATION	// check if collection is currently being loaded
WITHOUT_CLASSIFICATION	// check if it is already completely loaded, but unowned
WITHOUT_CLASSIFICATION	// cache the actual id of the object, not the value of the // property-ref, which might not be initialized
WITHOUT_CLASSIFICATION	//TODO!!!!!!!
WITHOUT_CLASSIFICATION	// create a new collection wrapper, to be initialized later
WITHOUT_CLASSIFICATION	// Some JDBC drivers erroneously return an empty array here for a null DB value :/
WITHOUT_CLASSIFICATION	// our column span is the number of columns in the PK
WITHOUT_CLASSIFICATION	//cannot batch fetch by unique key (property-ref associations)
WITHOUT_CLASSIFICATION	// we already know current is not null...
WITHOUT_CLASSIFICATION	// the ids are fully resolved, so compare them with isDirty(), not isModified()
WITHOUT_CLASSIFICATION	//the owner of the association is not the owner of the id
WITHOUT_CLASSIFICATION	// ----------------------------------------------------------- Constructors
WITHOUT_CLASSIFICATION	// ----------------------------------------------------- Instance Variables
WITHOUT_CLASSIFICATION	//	public static JDBCException newJDBCException(String string, SQLException root, String sql) { //		string = string + " [" + sql + ']'; //		log.error(string, root); //		logExceptions(root); //		return new JDBCException(string, root, sql); //	} // //	public static JDBCException newJDBCException(String string, SQLException root) { //		log.error(string, root); //		logExceptions(root); //		return new JDBCException(string, root); //	}
WITHOUT_CLASSIFICATION	// --------------------------------------------------------- Public Methods
WITHOUT_CLASSIFICATION	// Compare the two maps for equality
WITHOUT_CLASSIFICATION	// Simple tests that require no synchronization
WITHOUT_CLASSIFICATION	//Sybase fail if we don't do that, sigh...
WITHOUT_CLASSIFICATION	// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)
WITHOUT_CLASSIFICATION	// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders
WITHOUT_CLASSIFICATION	// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders
WITHOUT_CLASSIFICATION	// try to "pretty print" it
WITHOUT_CLASSIFICATION	// otherwise, just dump it
WITHOUT_CLASSIFICATION	//its an interface so we can't really tell anything...
WITHOUT_CLASSIFICATION	//its an interface so we can't really tell anything...
WITHOUT_CLASSIFICATION	// use default behavior
WITHOUT_CLASSIFICATION	//NOTE: early return
WITHOUT_CLASSIFICATION	// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries
WITHOUT_CLASSIFICATION	// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere
WITHOUT_CLASSIFICATION	// Clone //-----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// Serialize //-----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// stream closed in the finally
WITHOUT_CLASSIFICATION	// stream closed in the finally
WITHOUT_CLASSIFICATION	// Deserialize //-----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	/* static methods only - hide constructor */
WITHOUT_CLASSIFICATION	/*&& !('_'==character)*/
WITHOUT_CLASSIFICATION	// returnign null!
WITHOUT_CLASSIFICATION	// returnign null!
WITHOUT_CLASSIFICATION	// includes last '.'
WITHOUT_CLASSIFICATION	// +1 to include the following '.'
WITHOUT_CLASSIFICATION	// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...
WITHOUT_CLASSIFICATION	// first time we find match!
WITHOUT_CLASSIFICATION	// entityNames may now include slashes for the representations //classname may be an inner class
WITHOUT_CLASSIFICATION	// wrapped iterators
WITHOUT_CLASSIFICATION	// index of current iterator in the wrapped iterators array
WITHOUT_CLASSIFICATION	// the current iterator
WITHOUT_CLASSIFICATION	// the last used iterator
WITHOUT_CLASSIFICATION	//it was a boolean expression
WITHOUT_CLASSIFICATION	/*public static Object[] clone(Class elementClass, Object[] array) {		Object[] result = (Object[]) Array.newInstance( elementClass, array.length );		System.arraycopy(array, 0, result, 0, array.length);		return result;	}*/
WITHOUT_CLASSIFICATION	// call this before any Iterator method to make sure that the current Iterator // is not exhausted
WITHOUT_CLASSIFICATION	//doable if needed
WITHOUT_CLASSIFICATION	// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)
WITHOUT_CLASSIFICATION	// peek ahead
WITHOUT_CLASSIFICATION	// if we reach the end of the string w/o finding the // matching end, that is an exception
WITHOUT_CLASSIFICATION	// we have a placeholder, spin forward till we find the end
WITHOUT_CLASSIFICATION	// make sure spinning forward did not put us past the end of the buffer...
WITHOUT_CLASSIFICATION	// First, try to locate this resource through the current // context classloader.
WITHOUT_CLASSIFICATION	// Next, try to locate this resource through this class's classloader
WITHOUT_CLASSIFICATION	// Next, try to locate this resource through the system classloader
WITHOUT_CLASSIFICATION	// Anywhere else we should look?
WITHOUT_CLASSIFICATION	// would need an IdentitySet for this!
WITHOUT_CLASSIFICATION	//Arrays.asList doesn't do primitive arrays
WITHOUT_CLASSIFICATION	//faster?
WITHOUT_CLASSIFICATION	// the name of a class
WITHOUT_CLASSIFICATION	// Its the listener class name
WITHOUT_CLASSIFICATION	//allow 9,8,7,6,5,4,3,2,1
WITHOUT_CLASSIFICATION	// default to element set if no elements() specified
WITHOUT_CLASSIFICATION	// look for the instance by uuid
WITHOUT_CLASSIFICATION	// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)
WITHOUT_CLASSIFICATION	// first, lets determine whether to apply cglib or javassist based instrumentation...
WITHOUT_CLASSIFICATION	// Make sure we don't override previous set values
WITHOUT_CLASSIFICATION	//entirely optional!!
WITHOUT_CLASSIFICATION	// Its the listener instance (or better be)
WITHOUT_CLASSIFICATION	//context.unbind(boundName);
WITHOUT_CLASSIFICATION	//readResolveObject
WITHOUT_CLASSIFICATION	//cfg.setProperty("hibernate.show_sql", "true");
WITHOUT_CLASSIFICATION	// Defensive, convenience methods
WITHOUT_CLASSIFICATION	// Create the SessionFactory from hibernate.cfg.xml
WITHOUT_CLASSIFICATION	// Make sure you log the exception, as it might be swallowed
WITHOUT_CLASSIFICATION	// Begin unit of work
WITHOUT_CLASSIFICATION	// Write HTML header
WITHOUT_CLASSIFICATION	// Handle actions
WITHOUT_CLASSIFICATION	// Print page
WITHOUT_CLASSIFICATION	// Write HTML footer
WITHOUT_CLASSIFICATION	// End unit of work
WITHOUT_CLASSIFICATION	// Start the session to be used for this request
WITHOUT_CLASSIFICATION	// make the session available to the session factory's "current context"
WITHOUT_CLASSIFICATION	// pass control along to the rest of the processing chain
WITHOUT_CLASSIFICATION	// remove session from "current context"
WITHOUT_CLASSIFICATION	// Eager fetch the collection so we can use it detached
WITHOUT_CLASSIFICATION	// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:
WITHOUT_CLASSIFICATION	/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */
WITHOUT_CLASSIFICATION	// End of first unit of work
WITHOUT_CLASSIFICATION	// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);
WITHOUT_CLASSIFICATION	// Begin second unit of work
WITHOUT_CLASSIFICATION	// Reattachment of aPerson
WITHOUT_CLASSIFICATION	// The getEmailAddresses() might trigger a lazy load of the collection
WITHOUT_CLASSIFICATION	// We need our tm, so get it now and avoid doing other work // if there is a problem
WITHOUT_CLASSIFICATION	// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates
WITHOUT_CLASSIFICATION	// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates
WITHOUT_CLASSIFICATION	// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened
WITHOUT_CLASSIFICATION	//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations
WITHOUT_CLASSIFICATION	// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.
WITHOUT_CLASSIFICATION	// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these
WITHOUT_CLASSIFICATION	// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn
WITHOUT_CLASSIFICATION	// (AS is always optional, for consistency with SQL/OQL)
WITHOUT_CLASSIFICATION	// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction
WITHOUT_CLASSIFICATION	// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events
WITHOUT_CLASSIFICATION	// is a primitive type // invokespecial
WITHOUT_CLASSIFICATION	// array of primitive type // do nothing
WITHOUT_CLASSIFICATION	// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style
WITHOUT_CLASSIFICATION	//handle <=, >=, !=, is not, not between, not in
WITHOUT_CLASSIFICATION	// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level
WITHOUT_CLASSIFICATION	// transfer an explicitly defined entity name // handle the lazy attribute
WITHOUT_CLASSIFICATION	//keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	//keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	// get meta's from // <joined-subclass>
WITHOUT_CLASSIFICATION	// parameters on the property mapping should // override parameters in the typedef
WITHOUT_CLASSIFICATION	//fetch="join" overrides default laziness //fetch="join" overrides default laziness
WITHOUT_CLASSIFICATION	//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many
WITHOUT_CLASSIFICATION	// so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//	void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { //		this.componentTuplizerFactory = componentTuplizerFactory; //	}
WITHOUT_CLASSIFICATION	//element //index -> id
WITHOUT_CLASSIFICATION	// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!
WITHOUT_CLASSIFICATION	// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization
WITHOUT_CLASSIFICATION	// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...
WITHOUT_CLASSIFICATION	// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.
WITHOUT_CLASSIFICATION	//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml
WITHOUT_CLASSIFICATION	// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html
WITHOUT_CLASSIFICATION	// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );
WITHOUT_CLASSIFICATION	//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.
WITHOUT_CLASSIFICATION	// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400
WITHOUT_CLASSIFICATION	// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.
WITHOUT_CLASSIFICATION	// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list
WITHOUT_CLASSIFICATION	//		 You may still have other ResultSets or update counts left to process here  //		 but you can't do it now or the ResultSet you just got will be closed 
WITHOUT_CLASSIFICATION	// Note: For object <-> SQL datatype mappings see: //	 Configuration Manager | Advanced | SQL | System DDL Datatype Mappings // //	TBD	registerColumnType(Types.BINARY,        "binary($1)"); // changed 08-11-2005, jsl
WITHOUT_CLASSIFICATION	// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );
WITHOUT_CLASSIFICATION	// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type
WITHOUT_CLASSIFICATION	// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy
WITHOUT_CLASSIFICATION	//Named Queries:
WITHOUT_CLASSIFICATION	// this will throw an error if there's something wrong.
WITHOUT_CLASSIFICATION	// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast
WITHOUT_CLASSIFICATION	// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.
WITHOUT_CLASSIFICATION	// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)
WITHOUT_CLASSIFICATION	// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...
WITHOUT_CLASSIFICATION	// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)
WITHOUT_CLASSIFICATION	//slice, to get the columns for this component //property
WITHOUT_CLASSIFICATION	//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;
WITHOUT_CLASSIFICATION	// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.
WITHOUT_CLASSIFICATION	// detached collection wrappers that get found + reattached // during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message
WITHOUT_CLASSIFICATION	// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value
WITHOUT_CLASSIFICATION	// ie. we never have to null out a reference to // an uninitialized proxy
WITHOUT_CLASSIFICATION	// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack
WITHOUT_CLASSIFICATION	// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	* currently, not yet used...
WITHOUT_CLASSIFICATION	// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...
WITHOUT_CLASSIFICATION	// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility
WITHOUT_CLASSIFICATION	// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility
WITHOUT_CLASSIFICATION	// wrap up any new collections directly referenced by the object // or its components
WITHOUT_CLASSIFICATION	// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);
WITHOUT_CLASSIFICATION	// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...
WITHOUT_CLASSIFICATION	// upgrade the lock if necessary: //lock(result, lockMode);
WITHOUT_CLASSIFICATION	// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush
WITHOUT_CLASSIFICATION	//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in
WITHOUT_CLASSIFICATION	// Sub-insertions should occur before containing insertion so // Try to do the callback now
WITHOUT_CLASSIFICATION	//the entity is not associated with the session, so //try interceptor and unsaved-value
WITHOUT_CLASSIFICATION	//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)
WITHOUT_CLASSIFICATION	// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"
WITHOUT_CLASSIFICATION	// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.
WITHOUT_CLASSIFICATION	// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed
WITHOUT_CLASSIFICATION	// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by
WITHOUT_CLASSIFICATION	// ... and the token could be an identifer and the error is // a mismatched token error ...
WITHOUT_CLASSIFICATION	// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...
WITHOUT_CLASSIFICATION	//					int parameterStart = getWalker().getNumberOfParametersInSetClause(); //					List allParams = getIdSelectParameterSpecifications(); //					Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();
WITHOUT_CLASSIFICATION	// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.
WITHOUT_CLASSIFICATION	// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.
WITHOUT_CLASSIFICATION	// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.
WITHOUT_CLASSIFICATION	//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role
WITHOUT_CLASSIFICATION	// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).
WITHOUT_CLASSIFICATION	/*public final Currency getCurrency(int col) throws HibernateException {		return (Currency) get(col);	}*/
WITHOUT_CLASSIFICATION	// here, we have two possibilities: // 		1) the property-name matches the explicitly identifier property name //		2) the property-name matches the implicit 'id' property name
WITHOUT_CLASSIFICATION	// Set the unresolved path in this node and the parent. // Set the text for the parent.
WITHOUT_CLASSIFICATION	// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).
WITHOUT_CLASSIFICATION	// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.
WITHOUT_CLASSIFICATION	// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias
WITHOUT_CLASSIFICATION	// Not a collection? // Return the entity property mapping.
WITHOUT_CLASSIFICATION	// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...
WITHOUT_CLASSIFICATION	// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.
WITHOUT_CLASSIFICATION	// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.
WITHOUT_CLASSIFICATION	// check to see if our "propPath" actually // represents a property on the persister
WITHOUT_CLASSIFICATION	// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.
WITHOUT_CLASSIFICATION	// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:
WITHOUT_CLASSIFICATION	// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.
WITHOUT_CLASSIFICATION	//		origin.addDestination(destination); // Add the query spaces.
WITHOUT_CLASSIFICATION	// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.
WITHOUT_CLASSIFICATION	// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.
WITHOUT_CLASSIFICATION	//explicit = true;	// This is an explict Select. //ArrayList sqlResultTypeList = new ArrayList();
WITHOUT_CLASSIFICATION	//sqlResultTypeList.add( type ); // Generate the select expression.
WITHOUT_CLASSIFICATION	// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).
WITHOUT_CLASSIFICATION	// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing
WITHOUT_CLASSIFICATION	// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.
WITHOUT_CLASSIFICATION	// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...
WITHOUT_CLASSIFICATION	// classic translator does not support collection of ordinal // param metadata
WITHOUT_CLASSIFICATION	// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.
WITHOUT_CLASSIFICATION	// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level
WITHOUT_CLASSIFICATION	// should not be able to reach last without maxPosition being set // unless there are no results
WITHOUT_CLASSIFICATION	// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch
WITHOUT_CLASSIFICATION	//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!
WITHOUT_CLASSIFICATION	// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.
WITHOUT_CLASSIFICATION	// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping
WITHOUT_CLASSIFICATION	//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch
WITHOUT_CLASSIFICATION	// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)
WITHOUT_CLASSIFICATION	// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)
WITHOUT_CLASSIFICATION	// assume we are in an auto-commit state
WITHOUT_CLASSIFICATION	// log a message about potential connection leaks
WITHOUT_CLASSIFICATION	//			ps.close(); //just close it; do NOT try to return it to the pool! //NOTE: early exit!
WITHOUT_CLASSIFICATION	// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop
WITHOUT_CLASSIFICATION	// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance
WITHOUT_CLASSIFICATION	// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode
WITHOUT_CLASSIFICATION	// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//isSet = collection.isSet(); //isSorted = collection.isSorted();
WITHOUT_CLASSIFICATION	//lists, arrays //sets, maps, bags
WITHOUT_CLASSIFICATION	// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching
WITHOUT_CLASSIFICATION	//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)
WITHOUT_CLASSIFICATION	// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure
WITHOUT_CLASSIFICATION	// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.
WITHOUT_CLASSIFICATION	// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!
WITHOUT_CLASSIFICATION	//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time
WITHOUT_CLASSIFICATION	// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)
WITHOUT_CLASSIFICATION	// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...
WITHOUT_CLASSIFICATION	// we *always* assume an instance with a null // identifier or no identifier property is unsaved!
WITHOUT_CLASSIFICATION	// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...
WITHOUT_CLASSIFICATION	//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter
WITHOUT_CLASSIFICATION	//following doesn't handle (null, not null) but unnecessary //since this would mean all rows
WITHOUT_CLASSIFICATION	// IMPL NOTE : due to the delayed population of setters (setters cached // 		for performance), we really cannot pro0perly define equality for // 		this transformer
WITHOUT_CLASSIFICATION	// we need to dirty check collections, since they can cause an owner // version number increment
WITHOUT_CLASSIFICATION	//return the id, so we can use it to reset the proxy id //return result;
WITHOUT_CLASSIFICATION	//			optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( //					mappedClass, getterNames, setterNames, propTypes //			);
WITHOUT_CLASSIFICATION	// cache the actual id of the object, not the value of the // property-ref, which might not be initialized
WITHOUT_CLASSIFICATION	// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier
WITHOUT_CLASSIFICATION	// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object
WITHOUT_CLASSIFICATION	//not absolutely necessary, but helps for some //equals()/hashCode() implementations
WITHOUT_CLASSIFICATION	//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value
WITHOUT_CLASSIFICATION	// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache
WITHOUT_CLASSIFICATION	// can't just return null here, since that would // cause an owning component to become null
WITHOUT_CLASSIFICATION	//for arrays, replaceElements() may return a different reference, since //the array length might not match
WITHOUT_CLASSIFICATION	// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).
WITHOUT_CLASSIFICATION	// as soon as we encounter our first letter, return the substring // from that position
WITHOUT_CLASSIFICATION	// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma
WITHOUT_CLASSIFICATION	// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...
WITHOUT_CLASSIFICATION	// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"
WITHOUT_CLASSIFICATION	// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods
WITHOUT_CLASSIFICATION	// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).
WITHOUT_CLASSIFICATION	// and perform the load
WITHOUT_CLASSIFICATION	//important: reuse the same event instances for performance!
WITHOUT_CLASSIFICATION	//this is a query and we are loading multiple instances of the same collection role
WITHOUT_CLASSIFICATION	// we found a collection element in the result set
WITHOUT_CLASSIFICATION	// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection
WITHOUT_CLASSIFICATION	// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set
WITHOUT_CLASSIFICATION	// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested
WITHOUT_CLASSIFICATION	// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)
WITHOUT_CLASSIFICATION	// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"
WITHOUT_CLASSIFICATION	//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases
WITHOUT_CLASSIFICATION	//first look for a reference to a projection alias
WITHOUT_CLASSIFICATION	//first look for a reference to a projection alias
WITHOUT_CLASSIFICATION	//it does not refer to an alias of a projection, //look for a property
WITHOUT_CLASSIFICATION	// determine if the collection elements are entities...
WITHOUT_CLASSIFICATION	// Let return-propertys override whatever the persister has for aliases.
WITHOUT_CLASSIFICATION	/**	 * Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type.	 *	 * @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes)	 * @return a JoinFragment.XXX join type.	 * @see JoinFragment	 * @see SqlTokenTypes	 */
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	//        }
WITHOUT_CLASSIFICATION	//	public List getCollectionAliases() { //		return collectionAliases; //	} // //	/*public List getCollectionOwners() { //		return collectionOwners; //	}*/ // //	public List getCollectionOwnerAliases() { //		return collectionOwnerAliases; //	} // //	public List getCollectionPersisters() { //		return collectionPersisters; //	} // //	public Map getAlias2Persister() { //		return alias2Persister; //	} // //	/*public boolean isCollectionInitializer() { //		return isCollectionInitializer; //	}*/ // ////	public List getPersisters() { ////		return persisters; ////	} // //	public Map getAlias2OwnerAlias() { //		return alias2OwnerAlias; //	} // //	public List getScalarTypes() { //		return scalarTypes; //	} //	public List getScalarColumnAliases() { //		return scalarColumnAliases; //	} // //	public List getPropertyResults() { //		return propertyResults; //	} // //	public List getCollectionPropertyResults() { //		return collectionResults; //	} // // //	public Map getAlias2Return() { //		return alias2Return; //	}
WITHOUT_CLASSIFICATION	//		SQLQueryParser parser = new SQLQueryParser( //				sqlQuery, //				processor.getAlias2Persister(), //				processor.getAlias2Return(), //				aliases, //				collAliases, //				collPersisters, //				suffixes, //				collSuffixes //		); // //		sql = parser.process(); // //		namedParameterBindPoints = parser.getNamedParameters();
WITHOUT_CLASSIFICATION	//include the discriminator and class-level where, but not filters
WITHOUT_CLASSIFICATION	//			sqlAliasSuffixes[i] = element.getColumnAliasSuffix();
WITHOUT_CLASSIFICATION	//NONE, because its the requested lock mode, not the actual! 
WITHOUT_CLASSIFICATION	// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).
WITHOUT_CLASSIFICATION	// the column doesnt exist at all.
WITHOUT_CLASSIFICATION	// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property
WITHOUT_CLASSIFICATION	// we have an embedded composite identifier
WITHOUT_CLASSIFICATION	// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	/*rootTableName = persistentClass.getRootTable().getQualifiedName( 				factory.getDialect(), 				factory.getDefaultCatalog(), 				factory.getDefaultSchema() 		);*/
WITHOUT_CLASSIFICATION	// SUBCLASSES
WITHOUT_CLASSIFICATION	// Custom sql
WITHOUT_CLASSIFICATION	/*protected void initPropertyPaths(			final String path,			final Type type,			final String[] columns,			final String[] formulaTemplates,			final Mapping factory)	throws MappingException {		//addFormulaPropertyPath(path, type, formulaTemplates);		initPropertyPaths(path, type, columns, formulaTemplates, factory);	}*/
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//Custom SQL (would be better if these were private)
WITHOUT_CLASSIFICATION	// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'
WITHOUT_CLASSIFICATION	//decide which ResultSet to get the property value from:
WITHOUT_CLASSIFICATION	//note: it is conceptually possible that a UserType could map null to //	  a non-null value, so the following is arguable:
WITHOUT_CLASSIFICATION	// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.
WITHOUT_CLASSIFICATION	// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...
WITHOUT_CLASSIFICATION	// cache these since they are stateless // this one could even be static...
WITHOUT_CLASSIFICATION	//"as" is not in KEYWORDS
WITHOUT_CLASSIFICATION	// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);
WITHOUT_CLASSIFICATION	//use the id column alias
WITHOUT_CLASSIFICATION	//private List aliases = new ArrayList();
WITHOUT_CLASSIFICATION	//columns.add(columnName); //aliases.add(tableAlias);
WITHOUT_CLASSIFICATION	//where fragment must be empty!
WITHOUT_CLASSIFICATION	// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.
WITHOUT_CLASSIFICATION	//arbitrary on clause ignored!!
WITHOUT_CLASSIFICATION	// might happen with a managed connection
WITHOUT_CLASSIFICATION	// might happen with a managed connection
WITHOUT_CLASSIFICATION	//if an exception occurs during flush, user must call rollback()
WITHOUT_CLASSIFICATION	// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	//swallow it (the transaction _was_ successful or successfully rolled back)
WITHOUT_CLASSIFICATION	// ignore it
WITHOUT_CLASSIFICATION	// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information
WITHOUT_CLASSIFICATION	// create our own copy of the user-supplied tuplizer impl map
WITHOUT_CLASSIFICATION	// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx
WITHOUT_CLASSIFICATION	// then handle any user-defined entity modes...
WITHOUT_CLASSIFICATION	// Establish the region root node with a non-locking data version
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...
WITHOUT_CLASSIFICATION	// need to extract the component values and check for subtype replacements...
WITHOUT_CLASSIFICATION	// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists
WITHOUT_CLASSIFICATION	// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)
WITHOUT_CLASSIFICATION	// Configure the cache to use our TM
WITHOUT_CLASSIFICATION	//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();
WITHOUT_CLASSIFICATION	// Make sure JBC doesn't look one up
WITHOUT_CLASSIFICATION	// some collections are not lazy:
WITHOUT_CLASSIFICATION	// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster
WITHOUT_CLASSIFICATION	// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!
WITHOUT_CLASSIFICATION	// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.
WITHOUT_CLASSIFICATION	// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...
WITHOUT_CLASSIFICATION	// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).
WITHOUT_CLASSIFICATION	// local cache, so we use synchronization
WITHOUT_CLASSIFICATION	// local cache, so we use synchronization
WITHOUT_CLASSIFICATION	// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail
WITHOUT_CLASSIFICATION	// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush
WITHOUT_CLASSIFICATION	// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)
WITHOUT_CLASSIFICATION	//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache
WITHOUT_CLASSIFICATION	// intentionally empty
DEFECT	//FIXME we don't have the associated entity table name here, has to be done in a second pass
DEFECT	// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.
DEFECT	// RDMS does not directly support the trim() function, we use rtrim() and ltrim()
DEFECT	/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */
DEFECT	// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22
DEFECT	// note: at least my local SQL Server 2005 Express shows this not working...
DEFECT	// note: at least my local MySQL 5.1 install shows this not working...
DEFECT	/*		  * Algorithm		  * Check for any level one nullability breaks		  * Look at non null components to		  *   recursively check next level of nullability breaks		  * Look at Collections contraining component to		  *   recursively check next level of nullability breaks		  *		  *		  * In the previous implementation, not-null stuffs where checked		  * filtering by level one only updateable		  * or insertable columns. So setting a sub component as update="false"		  * has no effect on not-null check if the main component had good checkeability		  * In this implementation, we keep this feature.		  * However, I never see any documentation mentioning that, but it's for		  * sure a limitation.		  */
DEFECT	//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2
DEFECT	// TODO : this is broke for subqueries in statements other than selects...
DEFECT	// TODO : should this be an error?
DEFECT	// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...
DEFECT	// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //		joinSequence = joinSequence.getFromPart();	// Emulate the old addFromOnly behavior.
DEFECT	//TODO: would be nice to use false, but issues with MS SQL
DEFECT	//TODO: would be nice to use false, but issues with MS SQL
DEFECT	// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.
DEFECT	// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....
DEFECT	//TODO: BUG! this currently fails for named queries for non-POJO entities
DEFECT	// this call is side-effecty
DEFECT	//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()
DEFECT	//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!
DEFECT	// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...
DEFECT	//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)
DEFECT	//TODO: is this completely correct?
DEFECT	// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 		being further de-referenced... // 2) is this a DML statement // 3) we were asked to generate any needed joins (generateJoins==true) *OR* //		we are currently processing a select or from clause // (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) // // The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check // intended solely for use within the test suite.  This forces the // implicit join resolution to behave more like the classic parser. // The underlying issue is that classic translator is simply wrong // about its decisions on whether or not to render an implicit join // into a physical SQL join in a lot of cases.  The piece it generally // tends to miss is that INNER joins effect the results by further // restricting the data set!  A particular manifestation of this is // the fact that the classic translator will skip the physical join // for ToOne implicit joins *if the query is shallow*; the result // being that Query.list() and Query.iterate() could return // different number of results!
DEFECT	// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.
DEFECT	//TODO: inexact, what we really need to know is: are any outer joins used?
DEFECT	// todo : this call will not work for anything other than pojos!
DEFECT	//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete
DEFECT	// TODO: this disables laziness even in non-pojo entity modes:
DEFECT	//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id
DEFECT	//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....
DEFECT	//TODO: entities CAN be compared, by PK and entity name, fix this!
DEFECT	//TODO: this is kinda inconsistent with CollectionType
DEFECT	//TODO: would be nice to use false, but issues with MS SQL
DEFECT	// TODO: does not work for EntityMode.DOM4J yet!
DEFECT	//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)
DEFECT	//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state
DEFECT	// could happen for custom Criteria impls.  Not likely, but... // 		for long term solution, see HHH-3514
DEFECT	// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.
DEFECT	// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)
DEFECT	//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values
DEFECT	// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type
DEFECT	// First, validate all the enabled filters... //TODO: this implementation has bad performance
DEFECT	// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()
DEFECT	// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert
DEFECT	//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!
DEFECT	//note that this implementation is kinda broken //for components with many-to-one associations
DEFECT	// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values
DEFECT	//TODO: This is assertion is disabled because there is a bug that means the //	  original owner of a transient, uninitialized collection is not known //	  if the collection is re-referenced by a different object associated //	  with the current Session //throw new AssertionFailure("bug loading unowned collection");
DEFECT	// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };
DEFECT	// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...
WITHOUT_CLASSIFICATION	/*onlyStatic*/
WITHOUT_CLASSIFICATION	/*onlyStatic*/
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/*			Doing instanceof?  Next node is a type.		*/
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ ParentDirectoryRenderer class
WITHOUT_CLASSIFICATION	//{{{ TableMouseHandler class
WITHOUT_CLASSIFICATION	//{{{ mouseClicked() method
WITHOUT_CLASSIFICATION	// install man page
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// can't happen
WITHOUT_CLASSIFICATION	// set proxy authentication
WITHOUT_CLASSIFICATION	//{{{ autodetect() method
WITHOUT_CLASSIFICATION	// file does not begin with UTF-8-Y // signature. reset stream, read as // UTF-8.
WITHOUT_CLASSIFICATION	// Determine whether we are dealing // with a one-, two-, three-, or four- // byte sequence.
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ insideCompoundEdit() method
WITHOUT_CLASSIFICATION	// 1-byte sequence: 000000000xxxxxxx = 0xxxxxxx
WITHOUT_CLASSIFICATION	// null object ref is not instance of any type
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getName() method
WITHOUT_CLASSIFICATION	//{{{ getDocument() method
WITHOUT_CLASSIFICATION	//{{{ getParentElement() method
WITHOUT_CLASSIFICATION	//{{{ getAttributes() method
WITHOUT_CLASSIFICATION	//{{{ ensureCapacity() method
WITHOUT_CLASSIFICATION	//{{{ RootElement constructor
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getStartOffset() method
WITHOUT_CLASSIFICATION	//{{{ getEndOffset() method
WITHOUT_CLASSIFICATION	//{{{ getElementIndex() method
WITHOUT_CLASSIFICATION	// No super method, try to invoke regular method // could be a superfluous "super." which is legal.
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////// // Local Variables. //////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ loadClass() method
WITHOUT_CLASSIFICATION	//{{{ getZipFile() method
WITHOUT_CLASSIFICATION	/* Defer to whoever loaded us (such as JShell,			 * Echidna, etc) */
WITHOUT_CLASSIFICATION	// remember that this class doesn't exist for // future reference
WITHOUT_CLASSIFICATION	//{{{ getResourceAsStream() method
WITHOUT_CLASSIFICATION	//{{{ getResource() method
WITHOUT_CLASSIFICATION	//{{{ getResourceAsPath() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ dump() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ JARClassLoader constructor
WITHOUT_CLASSIFICATION	//{{{ finalize() method
WITHOUT_CLASSIFICATION	//{{{ activate() method
WITHOUT_CLASSIFICATION	//{{{ deactivate() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	// boolean
WITHOUT_CLASSIFICATION	// boolean
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ _loadClass() method
WITHOUT_CLASSIFICATION	//{{{ ServiceListHandler constructor
WITHOUT_CLASSIFICATION	//{{{ resolveEntity() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ attribute() method
WITHOUT_CLASSIFICATION	//{{{ doctypeDecl() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getElementCount() method
WITHOUT_CLASSIFICATION	//{{{ charData() method
WITHOUT_CLASSIFICATION	//{{{ startElement() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	// can't happen
WITHOUT_CLASSIFICATION	//{{{ getElement() method
WITHOUT_CLASSIFICATION	//{{{ endElement() method
WITHOUT_CLASSIFICATION	//{{{ startDocument() method
WITHOUT_CLASSIFICATION	//{{{ getCachedServices() method
WITHOUT_CLASSIFICATION	//{{{ isLeaf() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ pushElement() method
WITHOUT_CLASSIFICATION	//{{{ peekElement() method
WITHOUT_CLASSIFICATION	//{{{ popElement() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getName() method
WITHOUT_CLASSIFICATION	//{{{ getLabel() method
WITHOUT_CLASSIFICATION	//{{{ OptionGroup constructor
WITHOUT_CLASSIFICATION	//{{{ OptionGroup constructor
WITHOUT_CLASSIFICATION	//{{{ addOptionGroup() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ addOptionPane() method
WITHOUT_CLASSIFICATION	//{{{ addOptionPane() method
WITHOUT_CLASSIFICATION	//{{{ getMembers() method
WITHOUT_CLASSIFICATION	//{{{ getMember() method
WITHOUT_CLASSIFICATION	//{{{ getMemberIndex() method
WITHOUT_CLASSIFICATION	//{{{ getMemberCount() method
WITHOUT_CLASSIFICATION	//{{{ setSort() method
WITHOUT_CLASSIFICATION	//{{{ insertionSort() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ invoke() method
WITHOUT_CLASSIFICATION	//{{{ getName() method
WITHOUT_CLASSIFICATION	//{{{ getLabel() method
WITHOUT_CLASSIFICATION	//{{{ removeFromBus() method
WITHOUT_CLASSIFICATION	//{{{ addToBus() method
WITHOUT_CLASSIFICATION	//{{{ getComponents() method
WITHOUT_CLASSIFICATION	//{{{ send() method
WITHOUT_CLASSIFICATION	// can't create new instances
WITHOUT_CLASSIFICATION	//{{{ EditAction constructor
WITHOUT_CLASSIFICATION	//{{{ getMouseOverText() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getView() method
WITHOUT_CLASSIFICATION	//{{{ isToggle() method
WITHOUT_CLASSIFICATION	//{{{ isSelected() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getCode() method
WITHOUT_CLASSIFICATION	//{{{ noRepeat() method
WITHOUT_CLASSIFICATION	//{{{ noRecord() method
WITHOUT_CLASSIFICATION	//{{{ noRememberLast() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Wrapper class
WITHOUT_CLASSIFICATION	//{{{ setInterval() method
WITHOUT_CLASSIFICATION	//{{{ stop() method
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	// might come in handy useful some time
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Animator class
WITHOUT_CLASSIFICATION	//{{{ AbbrevEditor constructor
WITHOUT_CLASSIFICATION	//{{{ getAbbrev() method
WITHOUT_CLASSIFICATION	//{{{ setAbbrev() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}} //{{{ KEY_RELEASED...
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/* on some Windows versions, connections to localhost			 * fail if the network is not running. To avoid			 * confusing newbies with weird error messages, log			 * errors that occur while starting the server			 * as NOTICE, not ERROR */
WITHOUT_CLASSIFICATION	//{{{ run() method
WITHOUT_CLASSIFICATION	//{{{ handleClient() method
WITHOUT_CLASSIFICATION	//{{{ handleClient() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// no background mode, and opening a new view
WITHOUT_CLASSIFICATION	// no background mode, and reusing existing view
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ handleClient() method
WITHOUT_CLASSIFICATION	// un-iconify using JDK 1.3 API
WITHOUT_CLASSIFICATION	//{{{ isOK() method
WITHOUT_CLASSIFICATION	//{{{ getPort method
WITHOUT_CLASSIFICATION	//{{{ stopServer() method
WITHOUT_CLASSIFICATION	//{{{ invoke() method
WITHOUT_CLASSIFICATION	// Reset the timeout
WITHOUT_CLASSIFICATION	//{{{ BeanShellAction constructor
WITHOUT_CLASSIFICATION	/* Some characters that we like to use in action names		 * ('.', '-') are not allowed in BeanShell identifiers. */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getCode() method
WITHOUT_CLASSIFICATION	//{{{ isSelected() method
WITHOUT_CLASSIFICATION	//{{{ noRepeat() method
WITHOUT_CLASSIFICATION	//{{{ noRecord() method
WITHOUT_CLASSIFICATION	//{{{ noRememberLast() method
WITHOUT_CLASSIFICATION	// so that in the future we don't see streams of // exceptions
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ resolveEntity() method
WITHOUT_CLASSIFICATION	//{{{ attribute() method
WITHOUT_CLASSIFICATION	//{{{ doctypeDecl() method
WITHOUT_CLASSIFICATION	/* Runtime runtime = Runtime.getRuntime();		int freeMemory = (int)(runtime.freeMemory() / 1024);		int totalMemory = (int)(runtime.totalMemory() / 1024);		int usedMemory = (totalMemory - freeMemory);		Log.log(Log.DEBUG,this,"Java heap: " + usedMemory + "Kb / "			+ totalMemory + "Kb, " + (usedMemory * 100 / totalMemory)			+ "%"); */
WITHOUT_CLASSIFICATION	// save list of open files
WITHOUT_CLASSIFICATION	// flush log
WITHOUT_CLASSIFICATION	//{{{ ActionListHandler constructor
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	// can't happen
WITHOUT_CLASSIFICATION	//{{{ charData() method
WITHOUT_CLASSIFICATION	//{{{ startElement() method
WITHOUT_CLASSIFICATION	//{{{ endElement() method
WITHOUT_CLASSIFICATION	//{{{ startDocument() method
WITHOUT_CLASSIFICATION	//{{{ pushElement() method
WITHOUT_CLASSIFICATION	//{{{ paste() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ copy() method
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	//{{{ peekElement() method
WITHOUT_CLASSIFICATION	//{{{ popElement() method
WITHOUT_CLASSIFICATION	// protected members
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ append() method
WITHOUT_CLASSIFICATION	//{{{ append() method
WITHOUT_CLASSIFICATION	//{{{ append() method
WITHOUT_CLASSIFICATION	//{{{ paste() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ setRegister() method
WITHOUT_CLASSIFICATION	//{{{ setRegister() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	/* to avoid data loss, only do this if the above			 * completed successfully */
WITHOUT_CLASSIFICATION	//{{{ clearRegister() method
WITHOUT_CLASSIFICATION	//{{{ getRegisters() method
WITHOUT_CLASSIFICATION	//{{{ getRegisterStatusPrompt() method
WITHOUT_CLASSIFICATION	//{{{ saveRegisters() method
WITHOUT_CLASSIFICATION	//{{{ loadRegisters() method
WITHOUT_CLASSIFICATION	//Log.log(Log.DEBUG,Registers.class,fnf);
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ Register interface
WITHOUT_CLASSIFICATION	//{{{ ClipboardRegister class
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ resolveEntity() method
WITHOUT_CLASSIFICATION	// remove trailing \n
WITHOUT_CLASSIFICATION	//{{{ StringRegister class
WITHOUT_CLASSIFICATION	//{{{ RegistersHandler class
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ attribute() method
WITHOUT_CLASSIFICATION	//{{{ doctypeDecl() method
WITHOUT_CLASSIFICATION	//{{{ charData() method
WITHOUT_CLASSIFICATION	//{{{ endElement() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ EBMessage constructor
WITHOUT_CLASSIFICATION	//{{{ EBMessage constructor
WITHOUT_CLASSIFICATION	//{{{ getSource() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Deprecated methods
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getView() method
WITHOUT_CLASSIFICATION	//{{{ getBuffer() method
WITHOUT_CLASSIFICATION	//{{{ setBuffer() method
WITHOUT_CLASSIFICATION	//{{{ getTextArea() method
WITHOUT_CLASSIFICATION	// only do this if we are the current edit pane
WITHOUT_CLASSIFICATION	// Only do this after all I/O requests are complete
WITHOUT_CLASSIFICATION	// avoid a race condition // see bug #834338
WITHOUT_CLASSIFICATION	//{{{ prevBuffer() method
WITHOUT_CLASSIFICATION	//{{{ nextBuffer() method
WITHOUT_CLASSIFICATION	//{{{ recentBuffer() method
WITHOUT_CLASSIFICATION	//{{{ focusOnTextArea() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getLabel() method
WITHOUT_CLASSIFICATION	//{{{ ActionSet constructor
WITHOUT_CLASSIFICATION	//{{{ ActionSet constructor
WITHOUT_CLASSIFICATION	//{{{ ActionSet constructor
WITHOUT_CLASSIFICATION	//{{{ setLabel() method
WITHOUT_CLASSIFICATION	//{{{ getPluginJAR() method
WITHOUT_CLASSIFICATION	//{{{ addAction() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ removeAction() method
WITHOUT_CLASSIFICATION	//{{{ removeAllActions() method
WITHOUT_CLASSIFICATION	//{{{ getAction() method
WITHOUT_CLASSIFICATION	//{{{ getActionCount() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getActions() method
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ load() method
WITHOUT_CLASSIFICATION	//{{{ getActionNames() method
WITHOUT_CLASSIFICATION	//{{{ getActionNames() method
WITHOUT_CLASSIFICATION	//{{{ getCacheableActionNames() method
WITHOUT_CLASSIFICATION	//{{{ contains() method
WITHOUT_CLASSIFICATION	//{{{ size() method
WITHOUT_CLASSIFICATION	//{{{ initKeyBindings() method
WITHOUT_CLASSIFICATION	//actions.clear();
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ dragAndDropCallback() method
WITHOUT_CLASSIFICATION	//{{{ initTextArea() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ initBufferSwitcher() method
WITHOUT_CLASSIFICATION	//{{{ MyFocusManager class
WITHOUT_CLASSIFICATION	//{{{ MyFocusTraversalPolicy class
WITHOUT_CLASSIFICATION	//{{{ MouseWheelHandler class
WITHOUT_CLASSIFICATION	//{{{ TextAreaTransferHandler class
WITHOUT_CLASSIFICATION	/* I assume that there can be only one drag operation at the time */
WITHOUT_CLASSIFICATION	/* if user drops into the same			selection where they started, do			nothing. */
WITHOUT_CLASSIFICATION	/* if user drops into a selection,				replace selection */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/* otherwise just insert the text */
WITHOUT_CLASSIFICATION	// correctly handle text flavor + file list flavor // + text area read only, do an or of all flags
WITHOUT_CLASSIFICATION	//{{{ DropHandler class
WITHOUT_CLASSIFICATION	//textArea.getBuffer().beginCompoundEdit();
WITHOUT_CLASSIFICATION	//textArea.getBuffer().endCompoundEdit();
WITHOUT_CLASSIFICATION	//textArea.getBuffer().endCompoundEdit();
WITHOUT_CLASSIFICATION	//{{{ TextAreaSelection class
WITHOUT_CLASSIFICATION	//{{{ showBufferSwitcher() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Path name methods
WITHOUT_CLASSIFICATION	//{{{ constructPath() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ canonPath() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// get rid of mixed paths on Windows
WITHOUT_CLASSIFICATION	// also get rid of trailing spaces on Windows
WITHOUT_CLASSIFICATION	// do the same on OS X
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ resolveSymlinks() method
WITHOUT_CLASSIFICATION	//{{{ isAbsolutePath() method
WITHOUT_CLASSIFICATION	// not sure if this is correct for OpenVMS.
WITHOUT_CLASSIFICATION	// nice and simple
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ saveCaretInfo() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ concatPath() method
WITHOUT_CLASSIFICATION	// Make all child paths relative.
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getFileExtension() method
WITHOUT_CLASSIFICATION	//{{{ getFileName() method
WITHOUT_CLASSIFICATION	//{{{ getFileNameNoExtension() method
WITHOUT_CLASSIFICATION	//{{{ getFileParent() method
WITHOUT_CLASSIFICATION	//{{{ getParentOfPath() method
WITHOUT_CLASSIFICATION	//{{{ getFileProtocol() method
WITHOUT_CLASSIFICATION	//{{{ getProtocolOfURL() method
WITHOUT_CLASSIFICATION	//{{{ isURL() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// C:\AUTOEXEC.BAT
WITHOUT_CLASSIFICATION	// /etc/passwd
WITHOUT_CLASSIFICATION	// D:\WINDOWS, or doesn't contain : at all
WITHOUT_CLASSIFICATION	// If backups is 1, create ~ file
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//Selection[] selection = (Selection[])buffer.getProperty(Buffer.SELECTION);
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/* if backup file was created less than			 * 'backupTimeDistance' ago, we do not			 * create the backup */
WITHOUT_CLASSIFICATION	// If backups > 1, move old ~n~ files, create ~1~ file
WITHOUT_CLASSIFICATION	/* delete a backup created using above method */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ fileToClass() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ classToFile() method
WITHOUT_CLASSIFICATION	/*			Treat lhs and rhs as arbitrary objects and do the operation.			(including NULL and VOID represented by their Primitive types)		*/
WITHOUT_CLASSIFICATION	//{{{ Text methods
WITHOUT_CLASSIFICATION	//{{{ getLeadingWhiteSpace() method
WITHOUT_CLASSIFICATION	// FALL THROUGH TO DEFAULT CASE!!!
WITHOUT_CLASSIFICATION	/*		object is a non-null and non-void Primitive type	*/
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Bsh scripted object
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getTrailingWhiteSpace() method
WITHOUT_CLASSIFICATION	//{{{ getLeadingWhiteSpaceWidth() method
WITHOUT_CLASSIFICATION	//{{{ getVirtualWidth() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getOffsetOfVirtualColumn() method
WITHOUT_CLASSIFICATION	//{{{ createWhiteSpace() method
WITHOUT_CLASSIFICATION	//{{{ createWhiteSpace() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ globToRE() method
WITHOUT_CLASSIFICATION	//{{{ escapesToChars() method
WITHOUT_CLASSIFICATION	//{{{ charsToEscapes() method
WITHOUT_CLASSIFICATION	//{{{ charsToEscapes() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ compareVersions() method
WITHOUT_CLASSIFICATION	//{{{ compareStrings() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//_i--;
WITHOUT_CLASSIFICATION	//_j--;
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ stringsEqual() method
WITHOUT_CLASSIFICATION	//{{{ objectsEqual() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ isVMS() method
WITHOUT_CLASSIFICATION	//{{{ isMacOSLF() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ hasScreenMenuBar
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ isJava14() method
WITHOUT_CLASSIFICATION	//{{{ isJava15() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Class initializer
WITHOUT_CLASSIFICATION	// for debugging, make jEdit think its using a different // version of Java than it really is.
WITHOUT_CLASSIFICATION	//{{{ Some constants
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ charsToEntities() method
WITHOUT_CLASSIFICATION	//{{{ formatFileSize() method
WITHOUT_CLASSIFICATION	//{{{ getLongestPrefix() method
WITHOUT_CLASSIFICATION	//{{{ getLongestPrefix() method
WITHOUT_CLASSIFICATION	//{{{ getLongestPrefix() method
WITHOUT_CLASSIFICATION	/*delcaredOnly*/
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Sorting methods
WITHOUT_CLASSIFICATION	//{{{ quicksort() method
WITHOUT_CLASSIFICATION	//{{{ quicksort() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ quicksort() method
WITHOUT_CLASSIFICATION	//{{{ Compare interface
WITHOUT_CLASSIFICATION	//{{{ StringCompare class
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ StringICaseCompare class
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Java object
WITHOUT_CLASSIFICATION	//{{{ MenuItemCompare class
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Map types to assignable forms, need to keep this fast...
WITHOUT_CLASSIFICATION	//{{{ buildToVersion() method
WITHOUT_CLASSIFICATION	// First 2 chars are the major version number
WITHOUT_CLASSIFICATION	// Second 2 are the minor number
WITHOUT_CLASSIFICATION	// Then the pre-release status
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Finally the bug fix release
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ 1. Check whether tools.jar is in the system classpath:
WITHOUT_CLASSIFICATION	//Log.log(Log.DEBUG, MiscUtilities.class, //	"- is not in system classpath."); //}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ 2. Check whether it is in the jEdit user settings jars folder:
WITHOUT_CLASSIFICATION	// jEdit will load it automatically
WITHOUT_CLASSIFICATION	// jEdit will load it automatically
WITHOUT_CLASSIFICATION	//{{{ 3. Check whether it is in jEdit's system jars folder:
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ 4. Check whether it is in <java.home>/lib:
WITHOUT_CLASSIFICATION	//{{{ Load it, if not yet done:
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getEncodings() method
WITHOUT_CLASSIFICATION	//{{{ isSupportedEncoding() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ compareChars()
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ handleMessage() method
WITHOUT_CLASSIFICATION	//{{{ maybeReload() method
WITHOUT_CLASSIFICATION	// On Windows and MacOS, path names are case insensitive
WITHOUT_CLASSIFICATION	//{{{ Input/output methods
WITHOUT_CLASSIFICATION	/*onlyStatic*/
WITHOUT_CLASSIFICATION	// unwrap any primitives
WITHOUT_CLASSIFICATION	/*onlystatic*/
WITHOUT_CLASSIFICATION	/*onlystatic*/
WITHOUT_CLASSIFICATION	/*onlystatic*/
WITHOUT_CLASSIFICATION	// no field, try property acces
WITHOUT_CLASSIFICATION	// not a field, try property access
WITHOUT_CLASSIFICATION	// shouldn't happen
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getExpandOnInput() method
WITHOUT_CLASSIFICATION	//{{{ setExpandOnInput() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ expandAbbrev() method
WITHOUT_CLASSIFICATION	//{{{ Figure out some minor things
WITHOUT_CLASSIFICATION	// we reuse the 'pp' vector to save time
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ load() method
WITHOUT_CLASSIFICATION	// positional parameters will be inserted where $1, $2, $3, ... // occurs in the expansion
WITHOUT_CLASSIFICATION	//{{{ Handle abbrevs of the form abbrev#pos1#pos2#pos3#...
WITHOUT_CLASSIFICATION	// have to check again since above might set // NEW_FILE flag
WITHOUT_CLASSIFICATION	//{{{ reload() method
WITHOUT_CLASSIFICATION	// For `reload' command
WITHOUT_CLASSIFICATION	// Only on initial load
WITHOUT_CLASSIFICATION	//{{{ Do some stuff once loading is finished
WITHOUT_CLASSIFICATION	// if reloading a file, clear dirty flag
WITHOUT_CLASSIFICATION	// view text areas temporarily blank out while a buffer is // being loaded, to indicate to the user that there is no // data available yet.
WITHOUT_CLASSIFICATION	// theoretically a segment could // have seg.offset != 0 but // SegmentBuffer never does that
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ setMode() method
WITHOUT_CLASSIFICATION	//{{{ setMode() method
WITHOUT_CLASSIFICATION	//{{{ setMode() method
WITHOUT_CLASSIFICATION	/* This protects against stupid people (like me)		 * doing stuff like buffer.setMode(jEdit.getMode(...)); */
WITHOUT_CLASSIFICATION	// this must be in reverse order so that modes from the user // catalog get checked first!
WITHOUT_CLASSIFICATION	//{{{ markTokens() method
WITHOUT_CLASSIFICATION	//{{{ Indentation
WITHOUT_CLASSIFICATION	//{{{ removeTrailingWhiteSpace() method
WITHOUT_CLASSIFICATION	// blank line
WITHOUT_CLASSIFICATION	// no whitespace
WITHOUT_CLASSIFICATION	//{{{ shiftIndentLeft() method
WITHOUT_CLASSIFICATION	//{{{ shiftIndentRight() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getVirtualWidth() method
WITHOUT_CLASSIFICATION	//{{{ getOffsetOfVirtualColumn() method
WITHOUT_CLASSIFICATION	//{{{ getOpenParenIndent() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// the first element of pp is the abbrev itself
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //{{{ Handle ordinary abbrevs
WITHOUT_CLASSIFICATION	//{{{ Maybe show add abbrev dialog
WITHOUT_CLASSIFICATION	//{{{ getGlobalAbbrevs() method
WITHOUT_CLASSIFICATION	//{{{ setGlobalAbbrevs() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getModeAbbrevs() method
WITHOUT_CLASSIFICATION	//{{{ setModeAbbrevs() method
WITHOUT_CLASSIFICATION	//{{{ addGlobalAbbrev() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ load() method
WITHOUT_CLASSIFICATION	//{{{ addModeAbbrev() method
WITHOUT_CLASSIFICATION	// only load global abbrevs if user abbrevs file could not be loaded
WITHOUT_CLASSIFICATION	//{{{ countNewlines() method
WITHOUT_CLASSIFICATION	// try mode-specific abbrevs first
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ expandAbbrev() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ loadAbbrevs() method
WITHOUT_CLASSIFICATION	//{{{ saveAbbrevs() method
WITHOUT_CLASSIFICATION	//{{{ saveAbbrevs() method
WITHOUT_CLASSIFICATION	// write global abbrevs
WITHOUT_CLASSIFICATION	// write mode abbrevs
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// number of positional parameters in abbreviation expansion
WITHOUT_CLASSIFICATION	//{{{ Expansion constructor
WITHOUT_CLASSIFICATION	//{{{ Handle backslash
WITHOUT_CLASSIFICATION	// $n is 1-indexed, but vector // contents is zero indexed
WITHOUT_CLASSIFICATION	// $key will be $key, for // example
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ insertAtColumn() method
WITHOUT_CLASSIFICATION	//{{{ insertIndented() method
WITHOUT_CLASSIFICATION	// obtain the leading indent for later use
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ start() method
WITHOUT_CLASSIFICATION	//{{{ stop() method
WITHOUT_CLASSIFICATION	//{{{ getClassName() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getPluginJAR() method
WITHOUT_CLASSIFICATION	// this one only finds public (and in interfaces, etc.)
WITHOUT_CLASSIFICATION	// try declaredField
WITHOUT_CLASSIFICATION	//{{{ createMenuItems() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ createMenuItems() method
WITHOUT_CLASSIFICATION	//{{{ createBrowserMenuItems() method
WITHOUT_CLASSIFICATION	//{{{ Deprecated methods
WITHOUT_CLASSIFICATION	//{{{ createOptionPanes() method
WITHOUT_CLASSIFICATION	//{{{ getJAR() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	// package-private members
WITHOUT_CLASSIFICATION	//{{{ Deferred class
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	// package-private members
WITHOUT_CLASSIFICATION	//{{{ JAR class
WITHOUT_CLASSIFICATION	//{{{ getVersion() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getBuild() method
WITHOUT_CLASSIFICATION	// (major).(minor).(<99 = preX, 99 = final).(bug fix)
WITHOUT_CLASSIFICATION	//{{{ main() method
WITHOUT_CLASSIFICATION	//{{{ Check for Java 1.3 or later
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Miscellaneous methods
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getNext() method
WITHOUT_CLASSIFICATION	// MacOS users expect the app to keep running after all windows // are closed
WITHOUT_CLASSIFICATION	//{{{ getPrev() method
WITHOUT_CLASSIFICATION	//{{{ setWaitSocket() method
WITHOUT_CLASSIFICATION	//{{{ getIndex() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Parse command line
WITHOUT_CLASSIFICATION	// open initial view?
WITHOUT_CLASSIFICATION	// script to run
WITHOUT_CLASSIFICATION	//{{{ We need these initializations very early on
WITHOUT_CLASSIFICATION	//{{{ Try connecting to another running jEdit instance
WITHOUT_CLASSIFICATION	// block until its closed
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Initialize settings directory
WITHOUT_CLASSIFICATION	// Write a warning message:
WITHOUT_CLASSIFICATION	//{{{ Get things rolling
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Initialize server
WITHOUT_CLASSIFICATION	//{{{ Do more stuff
WITHOUT_CLASSIFICATION	// Buffer sort
WITHOUT_CLASSIFICATION	//{{{ Initialize Java 1.4-specific code
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Activate plugins that must be activated at startup
WITHOUT_CLASSIFICATION	//{{{ Load macros and run startup scripts, after plugins and settings are loaded
WITHOUT_CLASSIFICATION	//{{{ Run script specified with -run= parameter
WITHOUT_CLASSIFICATION	// Open files, create the view and hide the splash screen.
WITHOUT_CLASSIFICATION	//{{{ Property methods
WITHOUT_CLASSIFICATION	//{{{ getProperties() method
WITHOUT_CLASSIFICATION	//{{{ getProperty() method
WITHOUT_CLASSIFICATION	//{{{ getProperty() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getProperty() method
WITHOUT_CLASSIFICATION	//{{{ getBooleanProperty() method
WITHOUT_CLASSIFICATION	//{{{ getBooleanProperty() method
WITHOUT_CLASSIFICATION	//{{{ getIntegerProperty() method
WITHOUT_CLASSIFICATION	//{{{ getDoubleProperty() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Not found, fall through to next class
WITHOUT_CLASSIFICATION	// Now, on with the hunt...
WITHOUT_CLASSIFICATION	// Quick check catches public fields include those in interfaces
WITHOUT_CLASSIFICATION	//{{{ getFontProperty() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getFontProperty() method
WITHOUT_CLASSIFICATION	//{{{ getColorProperty() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ setColorProperty() method
WITHOUT_CLASSIFICATION	//{{{ setProperty() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ setTemporaryProperty() method
WITHOUT_CLASSIFICATION	//{{{ setBooleanProperty() method
WITHOUT_CLASSIFICATION	//{{{ setIntegerProperty() method
WITHOUT_CLASSIFICATION	//{{{ setDoubleProperty() method
WITHOUT_CLASSIFICATION	//{{{ setFontProperty() method
WITHOUT_CLASSIFICATION	//{{{ unsetProperty() method
WITHOUT_CLASSIFICATION	//{{{ resetProperty() method
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	// give all text areas the same font
WITHOUT_CLASSIFICATION	//defaults.put("TextField.font",font);
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Enable/Disable tooltips
WITHOUT_CLASSIFICATION	// we do this here instead of adding buffers to the bus.
WITHOUT_CLASSIFICATION	//{{{ getPluginJARs() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getPlugin() method
WITHOUT_CLASSIFICATION	//{{{ Plugin management methods
WITHOUT_CLASSIFICATION	//{{{ getNotLoadedPluginJARs() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getPluginJAR() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ _getLineManager() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getPlugin(String, boolean) method
WITHOUT_CLASSIFICATION	//{{{ getPlugins() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ addPluginJAR() method
WITHOUT_CLASSIFICATION	// backwards compatibility...
WITHOUT_CLASSIFICATION	//{{{ addPluginJARsFromDirectory() method
WITHOUT_CLASSIFICATION	// remove this when 4.1 plugin API is deprecated
WITHOUT_CLASSIFICATION	//{{{ removePluginJAR() method
WITHOUT_CLASSIFICATION	//{{{ Action methods
WITHOUT_CLASSIFICATION	//{{{ getActionContext() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ addActionSet() method
WITHOUT_CLASSIFICATION	//{{{ removeActionSet() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getAction() method
WITHOUT_CLASSIFICATION	//{{{ getBuiltInActionSet() method
WITHOUT_CLASSIFICATION	//{{{ getActionSets() method
WITHOUT_CLASSIFICATION	//{{{ getActionSetForAction() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getActions() method
WITHOUT_CLASSIFICATION	//{{{ getActionNames() method
WITHOUT_CLASSIFICATION	//{{{ getActionSetForAction() method
WITHOUT_CLASSIFICATION	//{{{ Edit mode methods
WITHOUT_CLASSIFICATION	//{{{ reloadModes() method
WITHOUT_CLASSIFICATION	/* Try to guess the eventual size to avoid unnecessary		 * copying */
WITHOUT_CLASSIFICATION	//{{{ Load the global catalog
WITHOUT_CLASSIFICATION	//{{{ Load user catalog
WITHOUT_CLASSIFICATION	// create dummy catalog
WITHOUT_CLASSIFICATION	//{{{ getMode() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ openFile() method
WITHOUT_CLASSIFICATION	//{{{ openFile() method
WITHOUT_CLASSIFICATION	//{{{ openFile() method
WITHOUT_CLASSIFICATION	//{{{ getModes() method
WITHOUT_CLASSIFICATION	//{{{ Buffer creation methods
WITHOUT_CLASSIFICATION	//{{{ openFiles() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ openFile() method
WITHOUT_CLASSIFICATION	//{{{ openTemporary() method
WITHOUT_CLASSIFICATION	//{{{ commitTemporary() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Buffer constructor
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// if loadAutosave is false, we loaded an // autosave file, so we set 'dirty' to true
WITHOUT_CLASSIFICATION	// note that we don't use setDirty(), // because a) that would send an unnecessary // message, b) it would also set the // AUTOSAVE_DIRTY flag, which will make // the autosave thread write out a // redundant autosave file
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ KeyHandler class
WITHOUT_CLASSIFICATION	//{{{ Renderer class
WITHOUT_CLASSIFICATION	//{{{ keyPressed() method
WITHOUT_CLASSIFICATION	/* int */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// send full range of events to avoid breaking plugins
WITHOUT_CLASSIFICATION	//{{{ newFile() method
WITHOUT_CLASSIFICATION	// don't want 'New File' to create a read only buffer // if current file is on SQL VFS or something
WITHOUT_CLASSIFICATION	// return the newly created 'untitled-1'
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Find the highest Untitled-n file
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Buffer management methods
WITHOUT_CLASSIFICATION	//{{{ closeBuffer() method
WITHOUT_CLASSIFICATION	// send some EditBus messages
WITHOUT_CLASSIFICATION	//EditBus.send(new BufferUpdate(Buffer.this, //	view,BufferUpdate.MARKERS_CHANGED));
WITHOUT_CLASSIFICATION	//{{{ keyTyped() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ insertFile() method
WITHOUT_CLASSIFICATION	// this returns false if initial sanity // checks (if the file is a directory, etc) // fail
WITHOUT_CLASSIFICATION	//{{{ checkFileStatus() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ autosave() method
WITHOUT_CLASSIFICATION	//{{{ saveAs() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	// files[] should have length 1, since the dialog type is // SAVE_DIALOG
WITHOUT_CLASSIFICATION	// Once save is complete, do a few other things
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	/* fall through */
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	// \t handled above
WITHOUT_CLASSIFICATION	/* eg, foo<C+b>, will insert foobar, */
WITHOUT_CLASSIFICATION	//{{{ getName() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ isFocusTraversable() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Getters/setter methods for various buffer meta-data
WITHOUT_CLASSIFICATION	//{{{ getLastModified() method
WITHOUT_CLASSIFICATION	//{{{ setLastModified() method
WITHOUT_CLASSIFICATION	//{{{ getVFS() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ _closeBuffer() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getPath() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getSymlinkPath() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ isClosed() method
WITHOUT_CLASSIFICATION	//{{{ getDirectory() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ isLoaded() method
WITHOUT_CLASSIFICATION	//{{{ isPerformingIO() method
WITHOUT_CLASSIFICATION	//{{{ isNewFile() method
WITHOUT_CLASSIFICATION	//{{{ setNewFile() method
WITHOUT_CLASSIFICATION	//{{{ isUntitled() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// zero it here so that BufferTabs doesn't have any problems
WITHOUT_CLASSIFICATION	//{{{ saveAllBuffers() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ reloadAllBuffers() method
WITHOUT_CLASSIFICATION	// save caret info. Buffer.load() will load it.
WITHOUT_CLASSIFICATION	//{{{ _getBuffer() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getBuffer() method
WITHOUT_CLASSIFICATION	//{{{ getBuffers() method
WITHOUT_CLASSIFICATION	//{{{ getBufferCount() method
WITHOUT_CLASSIFICATION	//{{{ getFirstBuffer() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getLastBuffer() method
WITHOUT_CLASSIFICATION	//{{{ checkBufferStatus() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ isDirty() method
WITHOUT_CLASSIFICATION	//{{{ isReadOnly() method
WITHOUT_CLASSIFICATION	//{{{ isEditable() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ setDirty() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ setReadOnly() method
WITHOUT_CLASSIFICATION	// fixes dirty flag not being reset on // save/insert/undo/redo/undo
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/* fall through */
WITHOUT_CLASSIFICATION	//{{{ View methods
WITHOUT_CLASSIFICATION	//{{{ getInputHandler() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ isTemporary() method
WITHOUT_CLASSIFICATION	//{{{ getIcon() method
WITHOUT_CLASSIFICATION	//{{{ Thread safety
WITHOUT_CLASSIFICATION	//{{{ readLock() method
WITHOUT_CLASSIFICATION	//{{{ readUnlock() method
WITHOUT_CLASSIFICATION	//{{{ writeLock() method
WITHOUT_CLASSIFICATION	//{{{ writeUnlock() method
WITHOUT_CLASSIFICATION	//{{{ Line offset methods
WITHOUT_CLASSIFICATION	//{{{ getLength() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// no need to lock since this just returns a value and that's it
WITHOUT_CLASSIFICATION	// no need to lock since this just returns a value and that's it
WITHOUT_CLASSIFICATION	//{{{ getLineCount() method
WITHOUT_CLASSIFICATION	//{{{ getLineOfOffset() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getLineStartOffset() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getLineEndOffset() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getLineLength() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ invalidateCachedScreenLineCounts() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Text getters and setters
WITHOUT_CLASSIFICATION	//{{{ getLineText() method
WITHOUT_CLASSIFICATION	//{{{ getLineText() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getText() method
WITHOUT_CLASSIFICATION	//{{{ getText() method
WITHOUT_CLASSIFICATION	//{{{ insert() method
WITHOUT_CLASSIFICATION	//{{{ insert() method
WITHOUT_CLASSIFICATION	//{{{ remove() method
WITHOUT_CLASSIFICATION	/* otherwise it will be delivered later */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Undo
WITHOUT_CLASSIFICATION	//{{{ undo() method
WITHOUT_CLASSIFICATION	//{{{ redo() method
WITHOUT_CLASSIFICATION	//{{{ isTransactionInProgress() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ beginCompoundEdit() method
WITHOUT_CLASSIFICATION	//{{{ endCompoundEdit() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ insideCompoundEdit() method
WITHOUT_CLASSIFICATION	//{{{ Buffer events
WITHOUT_CLASSIFICATION	//{{{ addBufferChangeListener() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ removeBufferChangeListener() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getBufferChangeListeners() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getProperty() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getIndentSize() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getTabSize() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ setProperty() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Now try buffer.<property>
WITHOUT_CLASSIFICATION	//{{{ initProxy() method
WITHOUT_CLASSIFICATION	// For backwards compatibility
WITHOUT_CLASSIFICATION	// First try the buffer-local properties
WITHOUT_CLASSIFICATION	// Now try mode.<mode>.<property>
WITHOUT_CLASSIFICATION	// Try returning it as an integer first
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ newView() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// set proxy host
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ newView() method
WITHOUT_CLASSIFICATION	//{{{ newView() method
WITHOUT_CLASSIFICATION	//{{{ newView() method
WITHOUT_CLASSIFICATION	// set proxy port
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// show tip of the day
WITHOUT_CLASSIFICATION	// set non proxy hosts list
WITHOUT_CLASSIFICATION	//{{{ closeView() method
WITHOUT_CLASSIFICATION	//{{{ getViews() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getViewCount() method
WITHOUT_CLASSIFICATION	//{{{ getFirstView() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getLastView() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getActiveView() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// eg user just closed a view and didn't focus another
WITHOUT_CLASSIFICATION	//{{{ Miscellaneous methods
WITHOUT_CLASSIFICATION	//{{{ isMainThread() method
WITHOUT_CLASSIFICATION	//{{{ isBackgroundMode() method
WITHOUT_CLASSIFICATION	//{{{ showMemoryStatusDialog() method
WITHOUT_CLASSIFICATION	//{{{ getJEditHome() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getSettingsDirectory() method
WITHOUT_CLASSIFICATION	//{{{ getJARCacheDirectory() method
WITHOUT_CLASSIFICATION	//{{{ backupSettingsFile() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ exit() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ saveSettings() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Wait for pending I/O requests
WITHOUT_CLASSIFICATION	// Close dialog, view.close() call need a view...
WITHOUT_CLASSIFICATION	// Send EditorExitRequested
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Close all buffers
WITHOUT_CLASSIFICATION	// If we are running in background mode and // reallyExit was not specified, then return here.
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Save settings in case user kills the backgrounded // jEdit process
WITHOUT_CLASSIFICATION	// Save view properties here
WITHOUT_CLASSIFICATION	// Stop autosave timer
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Send EditorExiting
WITHOUT_CLASSIFICATION	// Save settings
WITHOUT_CLASSIFICATION	// Close activity log stream
WITHOUT_CLASSIFICATION	// Byebye...
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ getEditServer() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ addMode() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ loadMode() method
WITHOUT_CLASSIFICATION	/* package-private */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ addPluginProps() method
WITHOUT_CLASSIFICATION	//{{{ removePluginProps() method
WITHOUT_CLASSIFICATION	//{{{ pluginError() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Static variables
WITHOUT_CLASSIFICATION	//{{{ setActiveView() method
WITHOUT_CLASSIFICATION	// buffer link list
WITHOUT_CLASSIFICATION	// makes openTemporary() thread-safe
WITHOUT_CLASSIFICATION	// view link list
WITHOUT_CLASSIFICATION	//{{{ usage() method
WITHOUT_CLASSIFICATION	//{{{ version() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ initMisc() method
WITHOUT_CLASSIFICATION	//{{{ makeServerScript() method
WITHOUT_CLASSIFICATION	// Add our protocols to java.net.URL's list
WITHOUT_CLASSIFICATION	/* Determine installation directory.		 * If the jedit.home property is set, use that.		 * Then, look for jedit.jar in the classpath.		 * If that fails, assume this is the web start version. */
WITHOUT_CLASSIFICATION	// Set the User-Agent string used by the java.net HTTP handler
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// check if web start
WITHOUT_CLASSIFICATION	// use user.dir as last resort
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ unsetProperty() method
WITHOUT_CLASSIFICATION	// Add an EditBus component that will reload edit modes and // macros if they are changed from within the editor
WITHOUT_CLASSIFICATION	//{{{ initSiteProperties() method
WITHOUT_CLASSIFICATION	//{{{ initSystemProperties() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// site properties are loaded as default properties, overwriting // jEdit's system properties
WITHOUT_CLASSIFICATION	//{{{ initResources() method
WITHOUT_CLASSIFICATION	//{{{ initPlugins() method
WITHOUT_CLASSIFICATION	//{{{ initUserProperties() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ initPLAF() method
WITHOUT_CLASSIFICATION	// give all Swing components our colors
WITHOUT_CLASSIFICATION	//defaults.put(prefix + ".inactiveForeground",foreground);
WITHOUT_CLASSIFICATION	//{{{ runStartupScripts() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// null not supported?
WITHOUT_CLASSIFICATION	//{{{ FirewallAuthenticator class
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ finishStartup() method
WITHOUT_CLASSIFICATION	// Start I/O threads
WITHOUT_CLASSIFICATION	// Start edit server
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Report any plugin errors
WITHOUT_CLASSIFICATION	//{{{ showPluginErrorDialog() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// in one case not a single AWT class will // have been touched (splash screen off + // -nogui -nobackground switches on command // line)
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ addBufferToList() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Can't happen
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getNotLoadedPluginJARs() method
WITHOUT_CLASSIFICATION	//{{{ gotoMarker() method
WITHOUT_CLASSIFICATION	// Handle line number
WITHOUT_CLASSIFICATION	// Handle marker
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// default value
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Sort buffer list
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ removeViewFromList() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// fixes the hang that can occur if we 'save as' to a new // filename which requires re-sorting
WITHOUT_CLASSIFICATION	//{{{ addViewToList() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ initKeyBindings() method
WITHOUT_CLASSIFICATION	//{{{ getProperties() method
WITHOUT_CLASSIFICATION	//{{{ closeView() method
WITHOUT_CLASSIFICATION	/* exit does editor event & save */
WITHOUT_CLASSIFICATION	//{{{ loadModeCatalog() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ loadSystemProps() method
WITHOUT_CLASSIFICATION	//{{{ loadSiteProps() method
WITHOUT_CLASSIFICATION	//{{{ loadUserProps() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ saveUserProps() method
WITHOUT_CLASSIFICATION	//{{{ loadPluginProps() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getProperty() method
WITHOUT_CLASSIFICATION	//{{{ setProperty() method
WITHOUT_CLASSIFICATION	//{{{ addPluginProps() method
WITHOUT_CLASSIFICATION	//{{{ removePluginProps() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ setTemporaryProperty() method
WITHOUT_CLASSIFICATION	//{{{ unsetProperty() method
WITHOUT_CLASSIFICATION	//{{{ resetProperty() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ getDefaultProperty() method
WITHOUT_CLASSIFICATION	//{{{ loadProps() method
WITHOUT_CLASSIFICATION	//{{{ Mode constructor
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ getTokenMarker() method
WITHOUT_CLASSIFICATION	//{{{ setTokenMarker() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getProperty() method
WITHOUT_CLASSIFICATION	//{{{ getBooleanProperty() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ setProperty() method
WITHOUT_CLASSIFICATION	//{{{ unsetProperty() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ accept() method
WITHOUT_CLASSIFICATION	//{{{ getName() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ runScript() method
WITHOUT_CLASSIFICATION	//{{{ runScript() method
WITHOUT_CLASSIFICATION	//{{{ evalSelection() method
WITHOUT_CLASSIFICATION	//{{{ showEvaluateDialog() method
WITHOUT_CLASSIFICATION	//{{{ showEvaluateLinesDialog() method
WITHOUT_CLASSIFICATION	//{{{ _runScript() method
WITHOUT_CLASSIFICATION	//{{{ _runScript() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getBooleanProperty() method
WITHOUT_CLASSIFICATION	// user cancelled???
WITHOUT_CLASSIFICATION	//{{{ getStringProperty() method
WITHOUT_CLASSIFICATION	//{{{ setStringProperty() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ setBooleanProperty() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getIntegerProperty() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ setIntegerProperty() method
WITHOUT_CLASSIFICATION	// will be cached from now on...
WITHOUT_CLASSIFICATION	//{{{ getRegexpProperty() method
WITHOUT_CLASSIFICATION	//{{{ getRuleSetAtOffset() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	//{{{ eval() method
WITHOUT_CLASSIFICATION	//{{{ _eval() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	//{{{ cacheBlock() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ runScript() method
WITHOUT_CLASSIFICATION	//{{{ runScript() method
WITHOUT_CLASSIFICATION	//{{{ eval() method
WITHOUT_CLASSIFICATION	//{{{ eval() method
WITHOUT_CLASSIFICATION	// never called
WITHOUT_CLASSIFICATION	//{{{ runCachedBlock() method
WITHOUT_CLASSIFICATION	//{{{ isScriptRunning() method
WITHOUT_CLASSIFICATION	//{{{ getNameSpace() method
WITHOUT_CLASSIFICATION	//{{{ Deprecated functions
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Static variables
WITHOUT_CLASSIFICATION	//{{{ resetClassManager() method
WITHOUT_CLASSIFICATION	//{{{ setupDefaultVariables() method
WITHOUT_CLASSIFICATION	//{{{ resetDefaultVariables() method
WITHOUT_CLASSIFICATION	//{{{ unwrapException() method
WITHOUT_CLASSIFICATION	//{{{ handleException() method
WITHOUT_CLASSIFICATION	//{{{ createInterpreter() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// garbage collected
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// clean up old listeners
WITHOUT_CLASSIFICATION	//System.err.println("cleaned up weak ref: "+deadref);
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getKeywordMapAtOffset() method
WITHOUT_CLASSIFICATION	//{{{ getContextSensitiveProperty() method
WITHOUT_CLASSIFICATION	// remove duplicates
WITHOUT_CLASSIFICATION	// remove duplicates
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Used to store property values
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// clean up old listeners
WITHOUT_CLASSIFICATION	//System.err.println("cleaned up weak ref: "+deadref);
WITHOUT_CLASSIFICATION	// clear the static caches in BshClassManager
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// garbage collected
WITHOUT_CLASSIFICATION	//{{{ User interface
WITHOUT_CLASSIFICATION	//{{{ Groups
WITHOUT_CLASSIFICATION	//{{{ addToolBar() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Common layers
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Layers for top group
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Layers for bottom group
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getDockableWindowManager() method
WITHOUT_CLASSIFICATION	//{{{ getToolBar() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ addToolBar() method
WITHOUT_CLASSIFICATION	//{{{ addToolBar() method
WITHOUT_CLASSIFICATION	//{{{ removeToolBar() method
WITHOUT_CLASSIFICATION	//{{{ showWaitCursor() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// still needed even though glass pane // has a wait cursor
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ hideWaitCursor() method
WITHOUT_CLASSIFICATION	//{{{ getStatus() method
WITHOUT_CLASSIFICATION	//{{{ getActionBar() method
WITHOUT_CLASSIFICATION	//{{{ getSearchBar() method
WITHOUT_CLASSIFICATION	//{{{ quickIncrementalSearch() method
WITHOUT_CLASSIFICATION	//{{{ quickHyperSearch() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getInputHandler() method
WITHOUT_CLASSIFICATION	//{{{ Input handling
WITHOUT_CLASSIFICATION	//{{{ getKeyEventInterceptor() method
WITHOUT_CLASSIFICATION	//{{{ setKeyEventInterceptor() method
WITHOUT_CLASSIFICATION	//{{{ setInputHandler() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getMacroRecorder() method
WITHOUT_CLASSIFICATION	//{{{ setMacroRecorder() method
WITHOUT_CLASSIFICATION	//{{{ processKeyEvent() method
WITHOUT_CLASSIFICATION	//{{{ processKeyEvent() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ processKeyEvent() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) FormalParameters */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Gather all of the methods of class and parents
WITHOUT_CLASSIFICATION	//{{{ toggleWordWrap() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/* boolean */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Buffers, edit panes, split panes
WITHOUT_CLASSIFICATION	//{{{ splitHorizontally() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/*	Type, name and expression syntax follows.*/
WITHOUT_CLASSIFICATION	//{{{ splitVertically() method
WITHOUT_CLASSIFICATION	//{{{ split() method
WITHOUT_CLASSIFICATION	//{{{ unsplit() method
WITHOUT_CLASSIFICATION	//{{{ unsplitCurrent() method
WITHOUT_CLASSIFICATION	// find first split pane parenting current edit pane
WITHOUT_CLASSIFICATION	// Succeeded.  Cache the resolved method.
WITHOUT_CLASSIFICATION	// Is the method public or are we in accessibility mode?
WITHOUT_CLASSIFICATION	// Yes, it is.
WITHOUT_CLASSIFICATION	// Found at least one matching method but couldn't use
WITHOUT_CLASSIFICATION	// ignore and move on
WITHOUT_CLASSIFICATION	// No, it is not.
WITHOUT_CLASSIFICATION	// Is this a class?
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) Type */
WITHOUT_CLASSIFICATION	/*ignore*/
WITHOUT_CLASSIFICATION	/* 			Find an appropriate constructor.			use declared here to see package and private as well			(there are no inherited constructors to worry about) 		*/
WITHOUT_CLASSIFICATION	// get rid of any edit pane that is a child // of the current edit pane's parent splitter
WITHOUT_CLASSIFICATION	//{{{ nextTextArea() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Pull out the method signatures with matching names
WITHOUT_CLASSIFICATION	// method matches name 
WITHOUT_CLASSIFICATION	/*        This method should parallel findMostSpecificMethod()    */
WITHOUT_CLASSIFICATION	//{{{ prevTextArea() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getBuffer() method
WITHOUT_CLASSIFICATION	//{{{ getSplitPane() method
WITHOUT_CLASSIFICATION	//{{{ setBuffer() method
WITHOUT_CLASSIFICATION	//{{{ goToBuffer() method
WITHOUT_CLASSIFICATION	/* ignore zero-height splits, etc */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getTextArea() method
WITHOUT_CLASSIFICATION	//{{{ getEditPane() method
WITHOUT_CLASSIFICATION	//{{{ getEditPanes() method
WITHOUT_CLASSIFICATION	//{{{ getViewConfig() method
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) FormalParameter */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/* fall through */
WITHOUT_CLASSIFICATION	/*bcm*/
WITHOUT_CLASSIFICATION	/*bcm*/
WITHOUT_CLASSIFICATION	/*shouldn't happen*/
WITHOUT_CLASSIFICATION	// why so cute?
WITHOUT_CLASSIFICATION	// add interpereter and namespace to args list
WITHOUT_CLASSIFICATION	/*@bgen(jjtree)*/
WITHOUT_CLASSIFICATION	/*@bgen(jjtree)*/
WITHOUT_CLASSIFICATION	/*this originally handled postfix array dimensions...void VariableDeclaratorId() #VariableDeclaratorId :{ Token t; }{  t=<IDENTIFIER> { jjtThis.name = t.image; }  ( "[" "]" { jjtThis.addUndefinedDimension(); } )*}*/
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/*	Gather modifiers for a class, method, or field.	I lookahead is true then we are being called as part of a lookahead and we	should not enforce any rules.  Otherwise we validate based on context	(field, method, class)*/
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) ClassDeclaration */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) MethodDeclaration */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) PackageDeclaration */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) ImportDeclaration */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) VariableDeclarator */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) ReturnType */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) PrimitiveType */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) AmbiguousName */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) Assignment */
WITHOUT_CLASSIFICATION	// This production is to determine lookahead only.
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) CastExpression */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) PrimaryExpression */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) PrimarySuffix */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) Literal */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// leave these on the stack for Arguments() to handle
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) AllocationExpression */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) ArrayDimensions */
WITHOUT_CLASSIFICATION	/* * Statement syntax follows. */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) Block */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) #FormalComment( retainComments) */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) SwitchStatement */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) SwitchLabel */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) WhileStatement */
WITHOUT_CLASSIFICATION	/*	Do statement is just a While statement with a special hook to execute	at least once.*/
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) ForStatement */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) EnhancedForStatement */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) TypedVariableDeclaration */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) StatementExpressionList */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) ReturnStatement */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) ThrowStatement */
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) TryStatement */
WITHOUT_CLASSIFICATION	// All core AWT listeners
WITHOUT_CLASSIFICATION	// All listeners in javax.swing.event as of Swing 1.1
WITHOUT_CLASSIFICATION	// handleEvent gets all events
WITHOUT_CLASSIFICATION	/*squeltch*/
WITHOUT_CLASSIFICATION	// send to specific event handler
WITHOUT_CLASSIFICATION	// Listener interfaces
WITHOUT_CLASSIFICATION	// Listener interfaces
WITHOUT_CLASSIFICATION	// used for the delayed evaluation...
WITHOUT_CLASSIFICATION	// Token was accepted
WITHOUT_CLASSIFICATION	/*paramTypes*/
WITHOUT_CLASSIFICATION	/*returnType*/
WITHOUT_CLASSIFICATION	// BSHType will cache the type for us
WITHOUT_CLASSIFICATION	// Hashtable implements Map
WITHOUT_CLASSIFICATION	// BSHFormalParameters will cache the type for us
WITHOUT_CLASSIFICATION	// Hashtable implements Map
WITHOUT_CLASSIFICATION	// Arrays incomplete... need to use the array setter
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Hypothetical question: can you have a RE that matches 1 times, // 3 times, 5 times, but not 2 times or 4 times?  Does having // the subexpression back-reference operator allow that?
WITHOUT_CLASSIFICATION	//{{{ isClosed() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Possible positions for the next repeat to match at
WITHOUT_CLASSIFICATION	// Declare variables used in loop
WITHOUT_CLASSIFICATION	// try next repeat at all possible positions
WITHOUT_CLASSIFICATION	// add all items in current to doables array
WITHOUT_CLASSIFICATION	// Find new doablesLast
WITHOUT_CLASSIFICATION	// if none of the possibilities worked out, break out of do/while
WITHOUT_CLASSIFICATION	// reassign where the next repeat can match
WITHOUT_CLASSIFICATION	// increment how many repeats we've successfully found
WITHOUT_CLASSIFICATION	// If there aren't enough repeats, then fail
WITHOUT_CLASSIFICATION	// We're greedy, but ease off until a true match is found 
WITHOUT_CLASSIFICATION	// else did not match rest of the tokens, try again on smaller sample
WITHOUT_CLASSIFICATION	// does this get all?
WITHOUT_CLASSIFICATION	// If we fall out, no matches.
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ isPlainView() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// clone() separates a single match from the chain
WITHOUT_CLASSIFICATION	// chain results to doneIndex
WITHOUT_CLASSIFICATION	// Find new doneIndexLast
WITHOUT_CLASSIFICATION	// matches after a newline
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// position in REToken.newline
WITHOUT_CLASSIFICATION	// Don't match at all if REG_NOTBOL is set.
WITHOUT_CLASSIFICATION	// value for end
WITHOUT_CLASSIFICATION	// closer to end
WITHOUT_CLASSIFICATION	// Allocate more space in the buffer.
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// value for end
WITHOUT_CLASSIFICATION	// Big enough for a \r\n pair // lookBehind[0] = most recent // lookBehind[1] = second most recent
WITHOUT_CLASSIFICATION	// this.index is index of next pos relative to charAt(0)
WITHOUT_CLASSIFICATION	// set flag that next should fail next time?
WITHOUT_CLASSIFICATION	// move read position [index] clicks from 'charAt(0)'
WITHOUT_CLASSIFICATION	// If we have buffered replace data, use it.
WITHOUT_CLASSIFICATION	// This is prone to infinite loops if replace string turns out empty.
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// closer to end
WITHOUT_CLASSIFICATION	// Allocate more space in the buffer.
WITHOUT_CLASSIFICATION	// this.index is index of next pos relative to charAt(0)
WITHOUT_CLASSIFICATION	// set flag that next should fail next time?
WITHOUT_CLASSIFICATION	// move read position [index] clicks from 'charAt(0)'
WITHOUT_CLASSIFICATION	// convert the byte read into a char
WITHOUT_CLASSIFICATION	// Error conditions from GNU regcomp(3) manual
WITHOUT_CLASSIFICATION	// Package scope constructor is used by RE.getMatchEnumeration()
WITHOUT_CLASSIFICATION	//else
WITHOUT_CLASSIFICATION	//else
WITHOUT_CLASSIFICATION	// no match
WITHOUT_CLASSIFICATION	// doesn't happen
WITHOUT_CLASSIFICATION	// need to deep clone?
WITHOUT_CLASSIFICATION	// cut off alternates
WITHOUT_CLASSIFICATION	// cut off alternates
WITHOUT_CLASSIFICATION	// Anchor position refers to the index into the source input // at which the matching operation began. // This is also useful for the ANCHORINDEX option.
WITHOUT_CLASSIFICATION	// Offset in source text where match was tried.  This is zero-based; // the actual position in the source text is given by (offset + anchor).
WITHOUT_CLASSIFICATION	// Package scope; used by RE. // used while matching to mark current match position in input // start positions (relative to offset) for each (sub)exp. // end positions for the same // other possibility (to avoid having to use arrays)
WITHOUT_CLASSIFICATION	// position in newline
WITHOUT_CLASSIFICATION	// assume for now that next can only be one character
WITHOUT_CLASSIFICATION	// Overrides REToken.chain() to optimize for strings
WITHOUT_CLASSIFICATION	// Note that there is some debate over whether '_' should be included
WITHOUT_CLASSIFICATION	// The RE constructor uses this to look up the constant for a string
WITHOUT_CLASSIFICATION	// Array indices correspond to constants defined above.
WITHOUT_CLASSIFICATION	// This is the number of subexpressions in this regular expression, // with a minimum value of zero.  Returned by getNumSubs()
WITHOUT_CLASSIFICATION	// The localized strings are kept in a separate file
WITHOUT_CLASSIFICATION	// This String will be returned by getVersion()
WITHOUT_CLASSIFICATION	// Retrieves a message from the ResourceBundle
WITHOUT_CLASSIFICATION	// internal constructor used for alternation
WITHOUT_CLASSIFICATION	// Subexpression index of this token.
WITHOUT_CLASSIFICATION	// For use by subclasses
WITHOUT_CLASSIFICATION	// The meat of construction
WITHOUT_CLASSIFICATION	// Number of subexpressions in this token.
WITHOUT_CLASSIFICATION	// linked list of tokens (sort of -- some closed loops can exist)
WITHOUT_CLASSIFICATION	// Precalculate these so we don't pay for the math every time we // need to access them.
WITHOUT_CLASSIFICATION	// This is the case of {x,}
WITHOUT_CLASSIFICATION	// This is used for {x,y} calculations
WITHOUT_CLASSIFICATION	//{{{ getMinimumSize() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Buffer a token so we can create a TokenRepeated, etc.
WITHOUT_CLASSIFICATION	// read the next character unit (including backslash escapes)
WITHOUT_CLASSIFICATION	// make everything up to here be a branch. create vector if nec.
WITHOUT_CLASSIFICATION	// LIST OPERATOR: //  [...] | [^...]
WITHOUT_CLASSIFICATION	// Check for initial caret, negation
WITHOUT_CLASSIFICATION	// Check for leading right bracket literal
WITHOUT_CLASSIFICATION	// Create a new RETokenOneOf
WITHOUT_CLASSIFICATION	//{{{ setWaitSocket() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// find end of subexpression
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// not a comment // subexpression
WITHOUT_CLASSIFICATION	//{{{ getNext() method
WITHOUT_CLASSIFICATION	// START OF LINE OPERATOR //  ^
WITHOUT_CLASSIFICATION	// END OF LINE OPERATOR //  $
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Read string of digits
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// BACKREFERENCE OPERATOR //  \1 \2 ... \9 // not available if RE_NO_BK_REFS is set
WITHOUT_CLASSIFICATION	// Check for stingy matching on RETokenRepeated
WITHOUT_CLASSIFICATION	// START OF STRING OPERATOR //  \A if RE_STRING_ANCHORS is set
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// WORD END OPERATOR  //  \> if ????
WITHOUT_CLASSIFICATION	// NON-WORD BREAK OPERATOR // \B if ????
WITHOUT_CLASSIFICATION	// NON-DIGIT OPERATOR //  \D
WITHOUT_CLASSIFICATION	// NEWLINE ESCAPE //  \n
WITHOUT_CLASSIFICATION	// RETURN ESCAPE //  \r
WITHOUT_CLASSIFICATION	// WHITESPACE OPERATOR //  \s if RE_CHAR_CLASS_ESCAPES is set
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// ALPHANUMERIC OPERATOR //  \w
WITHOUT_CLASSIFICATION	// NON-ALPHANUMERIC OPERATOR //  \W
WITHOUT_CLASSIFICATION	// END OF STRING OPERATOR //  \Z
WITHOUT_CLASSIFICATION	// not a special character
WITHOUT_CLASSIFICATION	// end while
WITHOUT_CLASSIFICATION	// Add final buffered token and an EndSub marker
WITHOUT_CLASSIFICATION	// compact the Vector
WITHOUT_CLASSIFICATION	// Trivial case
WITHOUT_CLASSIFICATION	// Overrides REToken.setUncle
WITHOUT_CLASSIFICATION	// to deal with empty subexpressions
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// handle pathological case of zero-length match
WITHOUT_CLASSIFICATION	/* Implements abstract method REToken.match() */
WITHOUT_CLASSIFICATION	// Note the start of this subexpression
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Read string of digits
WITHOUT_CLASSIFICATION	// Find longest match of them all to observe leftmost longest
WITHOUT_CLASSIFICATION	// Append character to buffer if needed
WITHOUT_CLASSIFICATION	//{{{ getPrev() method
WITHOUT_CLASSIFICATION	/* Helper function for constructor */
WITHOUT_CLASSIFICATION	// didn't match up
WITHOUT_CLASSIFICATION	// Precondition: input[index-1] == '{', minMax != null
WITHOUT_CLASSIFICATION	// This constructor is used for convenience when we know the set beforehand, // e.g. \d --> new RETokenOneOf("0123456789",false, ..) //      \D --> new RETokenOneOf("0123456789",true, ..)
WITHOUT_CLASSIFICATION	// We know min and max now, and they are valid.
WITHOUT_CLASSIFICATION	// return the index following the '}'
WITHOUT_CLASSIFICATION	// Cast input appropriately or throw exception
WITHOUT_CLASSIFICATION	// do we lose index info?
WITHOUT_CLASSIFICATION	// match was successful
WITHOUT_CLASSIFICATION	// Add tryMatch to list of possibilities.
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ handleMessage() method
WITHOUT_CLASSIFICATION	// set contents of mymatch equal to newMatch
WITHOUT_CLASSIFICATION	// try each one that matched
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ View constructor
WITHOUT_CLASSIFICATION	// index+1 works for [^abc] lists, not for generic lookahead (--> index)
WITHOUT_CLASSIFICATION	// If we have buffered replace data, use it.
WITHOUT_CLASSIFICATION	// check if input is at a valid position
WITHOUT_CLASSIFICATION	// handled by RE
WITHOUT_CLASSIFICATION	// true for the constant defined syntaxes
WITHOUT_CLASSIFICATION	// Values for constants are bit indexes
WITHOUT_CLASSIFICATION	// impl.
WITHOUT_CLASSIFICATION	// single line mode (/s)
WITHOUT_CLASSIFICATION	// Define syntaxes
WITHOUT_CLASSIFICATION	/* P1003.2/D11.2, section 4.20.7.1, lines 5078ff.  */
WITHOUT_CLASSIFICATION	/* Differs from RE_SYNTAX_POSIX_EXTENDED in that RE_CONTEXT_INVALID_OPS	 replaces RE_CONTEXT_INDEP_OPS and RE_NO_BK_REFS is added. */
WITHOUT_CLASSIFICATION	/* There is no official Perl spec, but here's a "best guess" */
WITHOUT_CLASSIFICATION	// except for '{', apparently
WITHOUT_CLASSIFICATION	// \d,\D,\w,\W,\s,\S
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// UNDONE
WITHOUT_CLASSIFICATION	// XXX
WITHOUT_CLASSIFICATION	// Unexpected EOF!
WITHOUT_CLASSIFICATION	// Per Patrick Beard:
WITHOUT_CLASSIFICATION	/*     * always: in the range 0 .. 9.     * The current block size is 100000 * this number.     */
WITHOUT_CLASSIFICATION	/*     * index of the last char in the block, so     * the block size == last + 1.     */
WITHOUT_CLASSIFICATION	/*     * index in zptr[] of original string after sorting.     */
WITHOUT_CLASSIFICATION	//throw new CCoruptionError();
WITHOUT_CLASSIFICATION	// throw new IOException("Invalid block size");
WITHOUT_CLASSIFICATION	/*         * not a char and not EOF         */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/*         * A bad CRC is considered a fatal error.         */
WITHOUT_CLASSIFICATION	//        currBlockNo++;
WITHOUT_CLASSIFICATION	/*         * Now the selectors         */
WITHOUT_CLASSIFICATION	/*         * Now the coding tables         */
WITHOUT_CLASSIFICATION	/*         * Create the Huffman decoding tables         */
WITHOUT_CLASSIFICATION	/*         * Receive the mapping table         */
WITHOUT_CLASSIFICATION	/* XXX */
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	/*     * If you are ever unlucky/improbable enough     * to get a stack overflow whilst sorting,     * increase the following constant and try     * again.  In practice I have never seen the     * stack go above 27 elems, so the following     * limit seems very generous.     */
WITHOUT_CLASSIFICATION	/*     * Knuth's increments seem to work better     * than Incerpi-Sedgewick here.  Possibly     * because the number of elems to sort is     * usually small, typically <= 20.     */
WITHOUT_CLASSIFICATION	/*     * Used when sorting.  If too many long comparisons     * happen, we stop sorting, randomise the block     * slightly, and try again.     */
WITHOUT_CLASSIFICATION	//        ch = 0;
WITHOUT_CLASSIFICATION	/*     * index in zptr[] of original string after sorting.     */
WITHOUT_CLASSIFICATION	/*         * The back end needs a place to store the MTF values         * whilst it calculates the coding tables.  We could         * put them in the zptr array.  However, these values         * will fit in a short, so we overlay szptr at the         * start of zptr, in the hope of reducing the number         * of cache misses induced by the multiple traversals         * of the MTF values when calculating coding tables.         * Seems to improve compression speed by about 1%.         */
WITHOUT_CLASSIFICATION	/*         * Nodes and heap entries run from 1.  Entry 0         * for both the heap and nodes is a sentinel.         */
WITHOUT_CLASSIFICATION	//throw new CError();
WITHOUT_CLASSIFICATION	//    szptr = zptr;
WITHOUT_CLASSIFICATION	//        blockNo++;
WITHOUT_CLASSIFICATION	// write 8-bit
WITHOUT_CLASSIFICATION	// write 8-bit
WITHOUT_CLASSIFICATION	/*         * sort the block and establish posn of original string         */
WITHOUT_CLASSIFICATION	/*         * Now the block's CRC, so it is in a known place.         */
WITHOUT_CLASSIFICATION	/*         * Now a single bit indicating randomisation.         */
WITHOUT_CLASSIFICATION	/*         * Finally, block's contents proper.         */
WITHOUT_CLASSIFICATION	/*         * Now another magic 48-bit number, 0x177245385090, to         * indicate the end of the last block.  (sqrt(pi), if         * you want to know.  I did want to use e, but it contains         * too much repetition -- 27 18 28 18 28 46 -- for me         * to feel statistically comfortable.  Call me paranoid.)         */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/*         * In the various block-sized structures, live data runs         * from 0 to last+NUM_OVERSHOOT_BYTES inclusive.  First,         * set up the overshoot area for block.         */
WITHOUT_CLASSIFICATION	/*             * Use simpleSort(), since the full sorting mechanism             * has quite a large constant overhead.             */
WITHOUT_CLASSIFICATION	/*             * Now ftab contains the first loc of every small bucket.             * Calculate the running order, from smallest to largest             * big bucket.             */
WITHOUT_CLASSIFICATION	/*             * The main sorting loop.             */
WITHOUT_CLASSIFICATION	/*                 * Process big buckets, starting with the least full.                 */
WITHOUT_CLASSIFICATION	//{{{ close() method
WITHOUT_CLASSIFICATION	// handle 16 bit signed numbers
WITHOUT_CLASSIFICATION	/*         * Decide how many coding tables to use         */
WITHOUT_CLASSIFICATION	/*             * Generate an initial set of coding tables             */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/*         * Iterate up to N_ITERS times to improve the tables.         */
WITHOUT_CLASSIFICATION	/*                 * Set group start & end marks.                 */
WITHOUT_CLASSIFICATION	/*                 * Calculate the cost of this group as coded                 * by each of the coding tables.                 */
WITHOUT_CLASSIFICATION	// run jEditLauncher installation
WITHOUT_CLASSIFICATION	/*                 * Increment the symbol frequencies for the selected table.                 */
WITHOUT_CLASSIFICATION	/*             * Recompute the tables based on the accumulated frequencies.             */
WITHOUT_CLASSIFICATION	/*             * Compute MTF values for the selectors.             */
WITHOUT_CLASSIFICATION	/*         * Assign actual codes for the tables.         */
WITHOUT_CLASSIFICATION	/*             * Transmit the mapping table.             */
WITHOUT_CLASSIFICATION	/*         * Now the selectors.         */
WITHOUT_CLASSIFICATION	/*                     * 11                     */
WITHOUT_CLASSIFICATION	/*         * And finally, the block data proper         */
WITHOUT_CLASSIFICATION	/*                 * copy 1                 */
WITHOUT_CLASSIFICATION	/*                 * copy 2                 */
WITHOUT_CLASSIFICATION	// ( (this.assemLen + numToWrite ) < this.recordBuf.length )
WITHOUT_CLASSIFICATION	// // When we get here we have EITHER: //   o An empty "assemble" buffer. //   o No bytes to write (numToWrite == 0) //
WITHOUT_CLASSIFICATION	//in.close();
WITHOUT_CLASSIFICATION	// Pass 1: compute preferred row heights / column widths
WITHOUT_CLASSIFICATION	// Pass 2: redistribute free space
WITHOUT_CLASSIFICATION	// synchronized
WITHOUT_CLASSIFICATION	// on by default
WITHOUT_CLASSIFICATION	// create app start script
WITHOUT_CLASSIFICATION	// Delete existing copy
WITHOUT_CLASSIFICATION	// Write simple script
WITHOUT_CLASSIFICATION	// Make it executable
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	/* XXX */
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	/* new JEditLauncherOSTask(installer) */
WITHOUT_CLASSIFICATION	// install user-selected packages
WITHOUT_CLASSIFICATION	// do operating system specific stuff (creating startup // scripts, installing man pages, etc.)
WITHOUT_CLASSIFICATION	//System.err.println(fileName);
WITHOUT_CLASSIFICATION	// label == null means no configurable options
WITHOUT_CLASSIFICATION	// can't happen
WITHOUT_CLASSIFICATION	//{{{ getShortcut() method
WITHOUT_CLASSIFICATION	//{{{ getPosition() method
WITHOUT_CLASSIFICATION	//{{{ Marker constructor
WITHOUT_CLASSIFICATION	//{{{ setShortcut() method
WITHOUT_CLASSIFICATION	//{{{ createPosition() method
WITHOUT_CLASSIFICATION	//{{{ removePosition() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	// forget the cached Position instance
WITHOUT_CLASSIFICATION	//{{{ setPosition() method
WITHOUT_CLASSIFICATION	//{{{ isPerspectiveDirty() method
WITHOUT_CLASSIFICATION	//{{{ setPerspectiveDirty() method
WITHOUT_CLASSIFICATION	//{{{ loadPerspective() method
WITHOUT_CLASSIFICATION	//{{{ savePerspective() method
WITHOUT_CLASSIFICATION	// backgrounded
WITHOUT_CLASSIFICATION	//{{{ input() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ runScript() method
WITHOUT_CLASSIFICATION	//{{{ PerspectiveHandler class
WITHOUT_CLASSIFICATION	// this will result in a slight speed up, since we // don't need to read the DTD anyway, as AElfred is // non-validating
WITHOUT_CLASSIFICATION	//{{{ showRunScriptDialog() method
WITHOUT_CLASSIFICATION	//{{{ message() method
WITHOUT_CLASSIFICATION	//{{{ error() method
WITHOUT_CLASSIFICATION	// save dockable window geometry, and close 'em
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ input() method
WITHOUT_CLASSIFICATION	// only executed if above loop falls // through, ie there is no handler for // this file
WITHOUT_CLASSIFICATION	//{{{ confirm() method
WITHOUT_CLASSIFICATION	//{{{ confirm() method
WITHOUT_CLASSIFICATION	//{{{ loadMacros() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ registerHandler() method
WITHOUT_CLASSIFICATION	//{{{ getHandlers() method
WITHOUT_CLASSIFICATION	//{{{ getHandlerForFileName() method
WITHOUT_CLASSIFICATION	//{{{ getHandler() method
WITHOUT_CLASSIFICATION	//{{{ getMacroHierarchy() method
WITHOUT_CLASSIFICATION	//{{{ getMacroActionSet() method
WITHOUT_CLASSIFICATION	//{{{ getMacro() method
WITHOUT_CLASSIFICATION	//{{{ Macro class
WITHOUT_CLASSIFICATION	//{{{ Macro constructor
WITHOUT_CLASSIFICATION	//{{{ getPath() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ getHandler() method
WITHOUT_CLASSIFICATION	//{{{ invoke() method
WITHOUT_CLASSIFICATION	//{{{ getCode() method
WITHOUT_CLASSIFICATION	//{{{ macroNameToLabel() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ loadMacros() method
WITHOUT_CLASSIFICATION	//{{{ recordTemporaryMacro() method
WITHOUT_CLASSIFICATION	//{{{ recordMacro() method
WITHOUT_CLASSIFICATION	//{{{ stopRecording() method
WITHOUT_CLASSIFICATION	//{{{ runTemporaryMacro() method
WITHOUT_CLASSIFICATION	/* I already wrote a comment expaining this in			 * Macro.invoke(). */
WITHOUT_CLASSIFICATION	//{{{ Static variables
WITHOUT_CLASSIFICATION	//{{{ Class initializer
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ recordMacro() method
WITHOUT_CLASSIFICATION	/* do nothing! */
WITHOUT_CLASSIFICATION	//{{{ try to merge with an existing menu first
WITHOUT_CLASSIFICATION	//{{{ addMacro() method
WITHOUT_CLASSIFICATION	// ignore if already added. // see comment in loadMacros().
WITHOUT_CLASSIFICATION	// setting the message to 'null' causes the status bar to check // if a recording is in progress
WITHOUT_CLASSIFICATION	//{{{ Recorder class
WITHOUT_CLASSIFICATION	//{{{ Recorder constructor
WITHOUT_CLASSIFICATION	//{{{ record() method
WITHOUT_CLASSIFICATION	//{{{ record() method
WITHOUT_CLASSIFICATION	//{{{ handleMessage() method
WITHOUT_CLASSIFICATION	//{{{ recordInput() method
WITHOUT_CLASSIFICATION	//{{{ recordInput() method
WITHOUT_CLASSIFICATION	//{{{ append() method
WITHOUT_CLASSIFICATION	//{{{ dispose() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ accept() method
WITHOUT_CLASSIFICATION	//{{{ createMacro() method
WITHOUT_CLASSIFICATION	//{{{ Handler class
WITHOUT_CLASSIFICATION	// setting the message to 'null' causes the status bar to // check if a recording is in progress
WITHOUT_CLASSIFICATION	//{{{ flushInput() method
WITHOUT_CLASSIFICATION	//{{{ getName() method
WITHOUT_CLASSIFICATION	//{{{ getLabel() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ runMacro() method
WITHOUT_CLASSIFICATION	//{{{ runMacro() method
WITHOUT_CLASSIFICATION	//{{{ Handler constructor
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ createMacro() method
WITHOUT_CLASSIFICATION	//{{{ runMacro() method
WITHOUT_CLASSIFICATION	//{{{ runMacro() method
WITHOUT_CLASSIFICATION	//{{{ BeanShellHandler class
WITHOUT_CLASSIFICATION	//{{{ BeanShellHandler constructor
WITHOUT_CLASSIFICATION	// Remove '.bsh'
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Some predefined icons
WITHOUT_CLASSIFICATION	//{{{ Icon methods
WITHOUT_CLASSIFICATION	//{{{ setIconPath() method
WITHOUT_CLASSIFICATION	//{{{ loadIcon() method
WITHOUT_CLASSIFICATION	// check if there is a cached version first
WITHOUT_CLASSIFICATION	// get the icon
WITHOUT_CLASSIFICATION	//{{{ getEditorIcon() method
WITHOUT_CLASSIFICATION	//{{{ getPluginIcon() method
WITHOUT_CLASSIFICATION	//{{{ Menus, tool bars
WITHOUT_CLASSIFICATION	//{{{ loadMenuBar() method
WITHOUT_CLASSIFICATION	//{{{ loadMenuBar() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ message() method
WITHOUT_CLASSIFICATION	//{{{ error() method
WITHOUT_CLASSIFICATION	//{{{ input() method
WITHOUT_CLASSIFICATION	//{{{ input() method
WITHOUT_CLASSIFICATION	//{{{ confirm() method
WITHOUT_CLASSIFICATION	//{{{ inputProperty() method
WITHOUT_CLASSIFICATION	//{{{ loadMenu() method
WITHOUT_CLASSIFICATION	//{{{ loadMenu() method
WITHOUT_CLASSIFICATION	//{{{ loadToolBar() method
WITHOUT_CLASSIFICATION	//{{{ loadPopupMenu() method
WITHOUT_CLASSIFICATION	//{{{ loadPopupMenu() method
WITHOUT_CLASSIFICATION	//{{{ loadToolBar() method
WITHOUT_CLASSIFICATION	//{{{ loadMenuItem() method
WITHOUT_CLASSIFICATION	//{{{ loadMenuItem() method
WITHOUT_CLASSIFICATION	//{{{ loadMenuItem() method
WITHOUT_CLASSIFICATION	//{{{ inputProperty() method
WITHOUT_CLASSIFICATION	//{{{ loadToolButton() method
WITHOUT_CLASSIFICATION	//{{{ loadToolButton() method
WITHOUT_CLASSIFICATION	//{{{ prettifyMenuLabel() method
WITHOUT_CLASSIFICATION	//{{{ showVFSFileDialog() method
WITHOUT_CLASSIFICATION	//{{{ Canned dialog boxes
WITHOUT_CLASSIFICATION	//{{{ Colors and styles
WITHOUT_CLASSIFICATION	//{{{ parseColor() method
WITHOUT_CLASSIFICATION	//{{{ parseColor() method
WITHOUT_CLASSIFICATION	//{{{ parseStyle() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ parseStyle() method
WITHOUT_CLASSIFICATION	//{{{ loadStyles() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ loadStyles() method
WITHOUT_CLASSIFICATION	// start at 1 not 0 to skip Token.NULL
WITHOUT_CLASSIFICATION	//{{{ Loading, saving window geometry
WITHOUT_CLASSIFICATION	//{{{ loadGeometry() method
WITHOUT_CLASSIFICATION	//{{{ adjustForScreenBounds() method
WITHOUT_CLASSIFICATION	// Make sure the window is displayed in visible region
WITHOUT_CLASSIFICATION	//{{{ ComponentHandler class
WITHOUT_CLASSIFICATION	//{{{ componentMoved() method
WITHOUT_CLASSIFICATION	//{{{ componentResized() method
WITHOUT_CLASSIFICATION	//{{{ WindowHandler class
WITHOUT_CLASSIFICATION	//{{{ windowOpened() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ saveGeometry() method
WITHOUT_CLASSIFICATION	//{{{ getExtendedState() method
WITHOUT_CLASSIFICATION	//{{{ setExtendedState() method
WITHOUT_CLASSIFICATION	//{{{ centerOnScreen() method
WITHOUT_CLASSIFICATION	//{{{ hideSplashScreen() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ createMultilineLabel() method
WITHOUT_CLASSIFICATION	//{{{ requestFocus() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ isMiddleButton() method
WITHOUT_CLASSIFICATION	//{{{ isPopupTrigger() method
WITHOUT_CLASSIFICATION	//{{{ isAncestorOf() method
WITHOUT_CLASSIFICATION	//System.err.println("x overflow");
WITHOUT_CLASSIFICATION	//{{{ isRightButton() method
WITHOUT_CLASSIFICATION	//{{{ getComponentParent() method
WITHOUT_CLASSIFICATION	//{{{ showPopupMenu() method
WITHOUT_CLASSIFICATION	//{{{ showPopupMenu() method
WITHOUT_CLASSIFICATION	//{{{ advanceSplashProgress() method
WITHOUT_CLASSIFICATION	//{{{ getParentDialog() method
WITHOUT_CLASSIFICATION	//{{{ showSplashScreen() method
WITHOUT_CLASSIFICATION	//{{{ getView() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getName() method
WITHOUT_CLASSIFICATION	//{{{ AbstractOptionPane constructor
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	// Only show class decs in CLASSES
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getComponent() method
WITHOUT_CLASSIFICATION	// final in 4.2
WITHOUT_CLASSIFICATION	// final in 4.2
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ addComponent() method
WITHOUT_CLASSIFICATION	//{{{ addComponent() method
WITHOUT_CLASSIFICATION	//{{{ addComponent() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// ALL
WITHOUT_CLASSIFICATION	//{{{ addComponent() method
WITHOUT_CLASSIFICATION	//{{{ addComponent() method
WITHOUT_CLASSIFICATION	//{{{ addSeparator() method
WITHOUT_CLASSIFICATION	//cons.insets = new Insets(1,0,1,0);
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ addSeparator() method
WITHOUT_CLASSIFICATION	//{{{ Protected members
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getEntry() method
WITHOUT_CLASSIFICATION	//{{{ setEntry() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getHistory() method
WITHOUT_CLASSIFICATION	//{{{ getBufferHistory() method
WITHOUT_CLASSIFICATION	//{{{ load() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//Log.log(Log.DEBUG,BufferHistory.class,fnf);
WITHOUT_CLASSIFICATION	/* to avoid data loss, only do this if the above			 * completed successfully */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Class initializer
WITHOUT_CLASSIFICATION	//{{{ addEntry() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/*				Try to squeltch the native code stack trace if the exception				was caused by a reflective call back into the bsh interpreter				(e.g. eval() or source()			*/
WITHOUT_CLASSIFICATION	// classExists caches info for us
WITHOUT_CLASSIFICATION	// classExists caches info for us
WITHOUT_CLASSIFICATION	// classExists caches the tests for us
WITHOUT_CLASSIFICATION	/*					Note: do *not* change this to 					BshClassManager plainClassForName() or equivalent.					This class must not touch any other bsh classes.				*/
WITHOUT_CLASSIFICATION	/*			Child is array initializer.  Evaluate it and fill in the 			dimensions it returns.  Initialized arrays are always fully defined			(no undefined dimensions to worry about).  			The syntax uses the undefinedDimension count.			e.g. int [][] { 1, 2 };		*/
WITHOUT_CLASSIFICATION	// fill in definedDimensions [] lengths
WITHOUT_CLASSIFICATION	// Evaluate the defined dimensions of the array
WITHOUT_CLASSIFICATION	// unsafe caching of types
WITHOUT_CLASSIFICATION	// first label
WITHOUT_CLASSIFICATION	// get the first label
WITHOUT_CLASSIFICATION	// while more labels or blocks and haven't hit return control
WITHOUT_CLASSIFICATION	// if label is default or equals switchVal
WITHOUT_CLASSIFICATION	// eval it
WITHOUT_CLASSIFICATION	// should check to disallow continue here?
WITHOUT_CLASSIFICATION	// skip nodes until next label
WITHOUT_CLASSIFICATION	// binaryOperation can return Primitive or wrapper type 
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ activatePlugin() method
WITHOUT_CLASSIFICATION	/* private */
WITHOUT_CLASSIFICATION	//{{{ removeEntry() method
WITHOUT_CLASSIFICATION	// XXX //e.printStackTrace();
WITHOUT_CLASSIFICATION	// Delegate to the static method
WITHOUT_CLASSIFICATION	// Create the class static namespace
WITHOUT_CLASSIFICATION	// Evaluate any inner class class definitions in the block  // effectively recursively call this method for contained classes first
WITHOUT_CLASSIFICATION	/*override*/
WITHOUT_CLASSIFICATION	/*override*/
WITHOUT_CLASSIFICATION	// Generate the type for our class
WITHOUT_CLASSIFICATION	// if debug, write out the class file to debugClasses directory
WITHOUT_CLASSIFICATION	// Define the new class in the classloader
WITHOUT_CLASSIFICATION	//bcm.doneDefiningClass( fqClassName );
WITHOUT_CLASSIFICATION	// import the unq name into parent
WITHOUT_CLASSIFICATION	//classStaticNameSpace.importClass( fqClassName.replace('$','.') );
WITHOUT_CLASSIFICATION	/*strictJava*/
WITHOUT_CLASSIFICATION	// evaluate the static portion of the block in the static space
WITHOUT_CLASSIFICATION	// Set the static bsh This callback 
WITHOUT_CLASSIFICATION	/*strict*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	// value error shouldn't happen
WITHOUT_CLASSIFICATION	/*declaringNameSpace*/
WITHOUT_CLASSIFICATION	//{{{ getFile() method
WITHOUT_CLASSIFICATION	// Also cache it in the static namespace... //classStaticNameSpace.cacheClass( name, genClass );
WITHOUT_CLASSIFICATION	// Give the static space its class static import // important to do this after all classes are defined
WITHOUT_CLASSIFICATION	// look for the specially named super delegate method
WITHOUT_CLASSIFICATION	/*onlyStatic*/
WITHOUT_CLASSIFICATION	/*onlyStatic*/
WITHOUT_CLASSIFICATION	// make all buttons the same size
WITHOUT_CLASSIFICATION	// cancel button goes on far left
WITHOUT_CLASSIFICATION	// prev and next buttons are on the right
WITHOUT_CLASSIFICATION	// calculate size for current page
WITHOUT_CLASSIFICATION	//{{{ getPath() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getCachePath() method
WITHOUT_CLASSIFICATION	//{{{ getZipFile() method
WITHOUT_CLASSIFICATION	//{{{ getClassLoader() method
WITHOUT_CLASSIFICATION	//{{{ getActions() method
WITHOUT_CLASSIFICATION	//{{{ getActionSet() method
WITHOUT_CLASSIFICATION	//{{{ getBrowserActionSet() method
WITHOUT_CLASSIFICATION	//{{{ checkDependencies() method
WITHOUT_CLASSIFICATION	//{{{ getDependentPlugins() method
WITHOUT_CLASSIFICATION	//{{{ getPlugin() method
WITHOUT_CLASSIFICATION	// recursive call
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// package-private members // package-private, not private, for speedy access by inner classes
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// for thread safety
WITHOUT_CLASSIFICATION	//{{{ activateIfNecessary() method
WITHOUT_CLASSIFICATION	// 4.1 plugin
WITHOUT_CLASSIFICATION	// 4.2 plugin
WITHOUT_CLASSIFICATION	// if at least one property listed here is true, // load the plugin
WITHOUT_CLASSIFICATION	//{{{ deactivatePlugin() method
WITHOUT_CLASSIFICATION	// see if this is a 4.1-style plugin
WITHOUT_CLASSIFICATION	//{{{ getDockablesURI() method
WITHOUT_CLASSIFICATION	//{{{ getServicesURI() method
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Static methods
WITHOUT_CLASSIFICATION	//{{{ getPluginCache() method
WITHOUT_CLASSIFICATION	// returns false with outdated cache
WITHOUT_CLASSIFICATION	//{{{ setPluginCache() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ PluginJAR constructor
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ uninit() method
WITHOUT_CLASSIFICATION	//{{{ getClasses() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Check if a plugin with the same name // is already loaded
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ actionsPresentButNotCoreClass() method
WITHOUT_CLASSIFICATION	//{{{ loadCache() method
WITHOUT_CLASSIFICATION	//{{{ generateCache() method
WITHOUT_CLASSIFICATION	//{{{ startPlugin() method
WITHOUT_CLASSIFICATION	// old plugins expected jEdit 4.1-style // behavior, where a PropertiesChanged // was sent after plugins were started
WITHOUT_CLASSIFICATION	// buffers retain a reference to the fold handler in // question... and the easiest way to handle fold // handler loading is this...
WITHOUT_CLASSIFICATION	// == null before loaded
WITHOUT_CLASSIFICATION	//{{{ startPluginLater() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ breakPlugin() method
WITHOUT_CLASSIFICATION	// but we want properties to hang around
WITHOUT_CLASSIFICATION	//{{{ PluginCacheEntry class
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ read() method
WITHOUT_CLASSIFICATION	/* read() and write() must be kept perfectly in sync...		 * its a very simple file format. doing it this way is		 * faster than serializing since serialization calls		 * reflection, etc. */
WITHOUT_CLASSIFICATION	//{{{ readStringArray() method
WITHOUT_CLASSIFICATION	//{{{ readURI() method
WITHOUT_CLASSIFICATION	//{{{ write() method
WITHOUT_CLASSIFICATION	//{{{ readBooleanArray() method
WITHOUT_CLASSIFICATION	//{{{ readMap() method
WITHOUT_CLASSIFICATION	//{{{ writeStringArray() method
WITHOUT_CLASSIFICATION	//{{{ writeBooleanArray() method
WITHOUT_CLASSIFICATION	//{{{ writeMap() method
WITHOUT_CLASSIFICATION	//{{{ Roster constructor
WITHOUT_CLASSIFICATION	//{{{ addRemove() method
WITHOUT_CLASSIFICATION	//{{{ addInstall() method
WITHOUT_CLASSIFICATION	//{{{ getOperation() method
WITHOUT_CLASSIFICATION	//{{{ getOperationCount() method
WITHOUT_CLASSIFICATION	//{{{ isEmpty() method
WITHOUT_CLASSIFICATION	//{{{ performOperationsInWorkThread() method
WITHOUT_CLASSIFICATION	//{{{ performOperationsInAWTThread() method
WITHOUT_CLASSIFICATION	// add the JARs before checking deps since dep check might // require all JARs to be present
WITHOUT_CLASSIFICATION	// now activate the plugins
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Operation interface
WITHOUT_CLASSIFICATION	//{{{ addOperation() method
WITHOUT_CLASSIFICATION	//{{{ getDownloadDir() method
WITHOUT_CLASSIFICATION	//{{{ runInAWTThread() method
WITHOUT_CLASSIFICATION	//{{{ Remove constructor
WITHOUT_CLASSIFICATION	//{{{ Remove class
WITHOUT_CLASSIFICATION	//{{{ runInAWTThread() method
WITHOUT_CLASSIFICATION	// close JAR file and all JARs that depend on this
WITHOUT_CLASSIFICATION	// remove cache file
WITHOUT_CLASSIFICATION	// move JAR first
WITHOUT_CLASSIFICATION	//{{{ unloadPluginJAR() method
WITHOUT_CLASSIFICATION	//{{{ equals() method
WITHOUT_CLASSIFICATION	//{{{ Install class
WITHOUT_CLASSIFICATION	//{{{ Install constructor
WITHOUT_CLASSIFICATION	// catch those hooligans passing null urls
WITHOUT_CLASSIFICATION	//{{{ getMaximum() method
WITHOUT_CLASSIFICATION	//{{{ runInWorkThread() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ equals() method
WITHOUT_CLASSIFICATION	// check if download failed
WITHOUT_CLASSIFICATION	// if download OK, remove existing version
WITHOUT_CLASSIFICATION	/* even if installDirectory is different */
WITHOUT_CLASSIFICATION	//{{{ download() method
WITHOUT_CLASSIFICATION	// do nothing, user clicked 'Stop'
WITHOUT_CLASSIFICATION	//{{{ copy() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Constructor
WITHOUT_CLASSIFICATION	//{{{ construct() method
WITHOUT_CLASSIFICATION	//{{{ menuSelected() method
WITHOUT_CLASSIFICATION	//{{{ menuDeselected() method
WITHOUT_CLASSIFICATION	//{{{ menuCanceled() method
WITHOUT_CLASSIFICATION	//{{{ ShowRecentMenuItem class
WITHOUT_CLASSIFICATION	// allocate the array to store the initializers // description of the array // The other dimensions default to zero and are assigned when  // the values are set.
WITHOUT_CLASSIFICATION	// Evaluate the initializers
WITHOUT_CLASSIFICATION	// unwrap primitive to the wrapper type
WITHOUT_CLASSIFICATION	// don't deal with object types here... unless above
WITHOUT_CLASSIFICATION	// store the value in the array
WITHOUT_CLASSIFICATION	// I think this can happen
WITHOUT_CLASSIFICATION	// Supply any defaulted attributes.
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////////////// // Constants. ////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// // Constants for element content type. //
WITHOUT_CLASSIFICATION	// // Constants for the entity type. //
WITHOUT_CLASSIFICATION	// // Constants for attribute type. //
WITHOUT_CLASSIFICATION	// // Constants for supported encodings. //
WITHOUT_CLASSIFICATION	// // Constants for attribute default value. //
WITHOUT_CLASSIFICATION	// Read the version.
WITHOUT_CLASSIFICATION	// Try reading an encoding declaration.
WITHOUT_CLASSIFICATION	// Try reading a standalone declaration
WITHOUT_CLASSIFICATION	// Read an optional version.
WITHOUT_CLASSIFICATION	// Read the encoding.
WITHOUT_CLASSIFICATION	// 8-bit encodings
WITHOUT_CLASSIFICATION	// 16-bit encodings
WITHOUT_CLASSIFICATION	// 32-bit encodings
WITHOUT_CLASSIFICATION	// Read the document type name.
WITHOUT_CLASSIFICATION	// Read the ExternalIDs.
WITHOUT_CLASSIFICATION	// Look for a declaration subset.
WITHOUT_CLASSIFICATION	// loop until the subset ends
WITHOUT_CLASSIFICATION	// end of subset
WITHOUT_CLASSIFICATION	// Read the external subset, if any
WITHOUT_CLASSIFICATION	// Loop until we end up back at '>'
WITHOUT_CLASSIFICATION	// No external subset.
WITHOUT_CLASSIFICATION	// Read the element type name.
WITHOUT_CLASSIFICATION	// Determine the current content type.
WITHOUT_CLASSIFICATION	// Read the element type name.
WITHOUT_CLASSIFICATION	// // Flags for parsing context. //
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////// // Major syntactic productions. //////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//skip all white, PIs, and comments //if this doesn't throw an exception...
WITHOUT_CLASSIFICATION	// Expand general entities in // default values of attributes. // (Do this after the doctypeDecl // event!). // expandAttributeDefaultValues();
WITHOUT_CLASSIFICATION	// This is the (global) counter for the // array of specified attributes.
WITHOUT_CLASSIFICATION	// Read the attributes, if any. // After this loop, we should be just // in front of the closing delimiter.
WITHOUT_CLASSIFICATION	// See if it was specified.
WITHOUT_CLASSIFICATION	// I guess not...
WITHOUT_CLASSIFICATION	// Figure out if this is a start tag // or an empty element, and dispatch an // event accordingly.
WITHOUT_CLASSIFICATION	// Restore the previous state.
WITHOUT_CLASSIFICATION	// Read the attribute name.
WITHOUT_CLASSIFICATION	// Parse '='
WITHOUT_CLASSIFICATION	// Handle delimiters
WITHOUT_CLASSIFICATION	// Found "&"
WITHOUT_CLASSIFICATION	// Found "<"
WITHOUT_CLASSIFICATION	// Found "<!"
WITHOUT_CLASSIFICATION	// Found "<!-"
WITHOUT_CLASSIFICATION	// Found "<!["
WITHOUT_CLASSIFICATION	// Found "</"
WITHOUT_CLASSIFICATION	// Found "<" followed by something else
WITHOUT_CLASSIFICATION	// Read the content model.
WITHOUT_CLASSIFICATION	// Parse the first content particle
WITHOUT_CLASSIFICATION	// Check for end or for a separator.
WITHOUT_CLASSIFICATION	// Register the separator.
WITHOUT_CLASSIFICATION	// Parse the rest of the content model.
WITHOUT_CLASSIFICATION	// Check for the occurrence indicator.
WITHOUT_CLASSIFICATION	// Check for PCDATA alone.
WITHOUT_CLASSIFICATION	// Parse mixed content.
WITHOUT_CLASSIFICATION	// Read the attribute type.
WITHOUT_CLASSIFICATION	// Read the default value.
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Note that the attribute has been // specified.
WITHOUT_CLASSIFICATION	// Read the first token.
WITHOUT_CLASSIFICATION	// Read the remaining tokens.
WITHOUT_CLASSIFICATION	// no surrogates needed
WITHOUT_CLASSIFICATION	// > 16 bits, surrogate needed
WITHOUT_CLASSIFICATION	// too big for surrogate
WITHOUT_CLASSIFICATION	// Check for a parameter entity.
WITHOUT_CLASSIFICATION	// Read the entity name, and prepend // '%' if necessary.
WITHOUT_CLASSIFICATION	// Read the entity value.
WITHOUT_CLASSIFICATION	// Internal entity.
WITHOUT_CLASSIFICATION	// Read the external IDs
WITHOUT_CLASSIFICATION	// Check for NDATA declaration.
WITHOUT_CLASSIFICATION	// Finish the declaration.
WITHOUT_CLASSIFICATION	// Read the external identifiers.
WITHOUT_CLASSIFICATION	// Register the notation.
WITHOUT_CLASSIFICATION	// Start with a little cheat -- in most // cases, the entire sequence of // character data will already be in // the readBuffer; if not, fall through to // the normal approach.
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////// // High-level reading and scanning methods. //////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// else fall through...
WITHOUT_CLASSIFICATION	// else fall through...
WITHOUT_CLASSIFICATION	// OK, do it by the book.
WITHOUT_CLASSIFICATION	// Read the first character.
WITHOUT_CLASSIFICATION	// Find the delimiter.
WITHOUT_CLASSIFICATION	// Read the literal.
WITHOUT_CLASSIFICATION	// Literals never have line ends
WITHOUT_CLASSIFICATION	// References may be allowed
WITHOUT_CLASSIFICATION	// check the next character
WITHOUT_CLASSIFICATION	// Return the value.
WITHOUT_CLASSIFICATION	// public id
WITHOUT_CLASSIFICATION	// system id
WITHOUT_CLASSIFICATION	// Expand buffer if necessary.
WITHOUT_CLASSIFICATION	// Skip whitespace at the start.
WITHOUT_CLASSIFICATION	// Skip whitespace at the end.
WITHOUT_CLASSIFICATION	// Start copying to the left.
WITHOUT_CLASSIFICATION	// Normalise all other whitespace to // a single space.
WITHOUT_CLASSIFICATION	// Generate a hash code.
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// error
WITHOUT_CLASSIFICATION	// Get the bucket.
WITHOUT_CLASSIFICATION	// Stop when we hit a null index.
WITHOUT_CLASSIFICATION	// If they're the same length, // check for a match. // If the loop finishes, 'index' will // contain the current bucket // position.
WITHOUT_CLASSIFICATION	// Stop if there are no more tuples.
WITHOUT_CLASSIFICATION	// That's it, we have a match!
WITHOUT_CLASSIFICATION	// Not found -- we'll have to add it.
WITHOUT_CLASSIFICATION	// Do we have to grow the bucket?
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////// // XML query routines. //////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// // Elements //
WITHOUT_CLASSIFICATION	// Try looking up the element
WITHOUT_CLASSIFICATION	// Make a new one if necessary.
WITHOUT_CLASSIFICATION	// Insert the content model, if any.
WITHOUT_CLASSIFICATION	// Insert the attributes, if any.
WITHOUT_CLASSIFICATION	// Save the element info.
WITHOUT_CLASSIFICATION	// Create a new hashtable if necessary.
WITHOUT_CLASSIFICATION	// Check that the attribute doesn't // already exist!
WITHOUT_CLASSIFICATION	// Use CONTENT_UNDECLARED to avoid overwriting // existing element declaration.
WITHOUT_CLASSIFICATION	// // Entities //
WITHOUT_CLASSIFICATION	// // Notations. //
WITHOUT_CLASSIFICATION	// // Location. //
WITHOUT_CLASSIFICATION	// As long as there's nothing in the // read buffer, try reading more data // (for an external entity) or popping // the entity stack (for either).
WITHOUT_CLASSIFICATION	// Normal condition.
WITHOUT_CLASSIFICATION	// Push the existing status.
WITHOUT_CLASSIFICATION	// Create a new read buffer. // (Note the four-character margin)
WITHOUT_CLASSIFICATION	// Flush any remaining data.
WITHOUT_CLASSIFICATION	// Make the URL absolute.
WITHOUT_CLASSIFICATION	// See if the application wants to // redirect the system ID and/or // supply its own character stream.
WITHOUT_CLASSIFICATION	// Start the entity.
WITHOUT_CLASSIFICATION	// Figure out what we're reading from.
WITHOUT_CLASSIFICATION	// There's an explicit character stream.
WITHOUT_CLASSIFICATION	// We have to open our own stream // to the URL.
WITHOUT_CLASSIFICATION	// Set the new status
WITHOUT_CLASSIFICATION	// If we get to here, there must be // an InputStream available.
WITHOUT_CLASSIFICATION	// Attempt to detect the encoding.
WITHOUT_CLASSIFICATION	// Read an XML or text declaration.
WITHOUT_CLASSIFICATION	// Read the XML/Encoding declaration.
WITHOUT_CLASSIFICATION	// Read the first four bytes for // autodetection.
WITHOUT_CLASSIFICATION	// Look for a known signature.
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// UCS-4 must begin with "<!XML" // 0x00 0x00 0x3c 0x00: UCS-4, unusual (2143)
WITHOUT_CLASSIFICATION	// UCS-2 with a byte-order marker. // 0xfe 0xff: UCS-2, big-endian (12)
WITHOUT_CLASSIFICATION	// UCS-2 without a BOM must begin with "<?XML" // 0x00 0x3c 0x00 0x3f: UCS-2, big-endian, no byte-order mark
WITHOUT_CLASSIFICATION	// UCS-2 without a BOM must begin with "<?XML" // 0x3c 0x00 0x3f 0x00: UCS-2, little-endian, no byte-order mark
WITHOUT_CLASSIFICATION	// Some kind of 8-bit encoding with "<?XML" // 0x3c 0x3f 0x78 0x6d: UTF-8 or other 8-bit markup (read ENCODING)
WITHOUT_CLASSIFICATION	// Push the existing status
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Don't bother if there is no input.
WITHOUT_CLASSIFICATION	// Push it onto the stack.
WITHOUT_CLASSIFICATION	// Throw an EOFException if there // is nothing else to pop.
WITHOUT_CLASSIFICATION	// Read the character
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// See if we have any overflow.
WITHOUT_CLASSIFICATION	// Special situation -- we're taking // input from a character stream.
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Filter out all carriage returns // if we've seen any.
WITHOUT_CLASSIFICATION	// Reset the position.
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// 2-byte sequence: 00000yyyyyxxxxxx = 110yyyyy 10xxxxxx
WITHOUT_CLASSIFICATION	// 3-byte sequence: zzzzyyyyyyxxxxxx = 1110zzzz 10yyyyyy 10xxxxxx
WITHOUT_CLASSIFICATION	// 4-byte sequence: 11101110wwwwzzzzyy + 110111yyyyxxxxxx //     = 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx // (uuuuu = wwww + 1)
WITHOUT_CLASSIFICATION	// Otherwise, the 8th bit may not be set in UTF-8
WITHOUT_CLASSIFICATION	// How many characters have we read?
WITHOUT_CLASSIFICATION	// Take a character from the buffer // or from the actual input stream.
WITHOUT_CLASSIFICATION	// Check for the correct bits at the // start.
WITHOUT_CLASSIFICATION	// Return the significant bits.
WITHOUT_CLASSIFICATION	// No errors; first line
WITHOUT_CLASSIFICATION	// Set up the buffers for data and names
WITHOUT_CLASSIFICATION	// Set up the DTD hash tables
WITHOUT_CLASSIFICATION	// Set up the variables for the current // element context.
WITHOUT_CLASSIFICATION	// Set up the input variables
WITHOUT_CLASSIFICATION	// // The current XML handler interface. //
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// // Hashtables for DTD information on elements, entities, and notations. //
WITHOUT_CLASSIFICATION	// // Element type currently in force. //
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// // Base external identifiers for resolution. //
WITHOUT_CLASSIFICATION	// // Stack of entity names, to help detect recursion. //
WITHOUT_CLASSIFICATION	// // Are we in a context where PEs are allowed? //
WITHOUT_CLASSIFICATION	// // Symbol table, for internalising names. //
WITHOUT_CLASSIFICATION	//{{{ Variables
WITHOUT_CLASSIFICATION	//{{{ start() method
WITHOUT_CLASSIFICATION	//app.setServicesProvider(delegate);
WITHOUT_CLASSIFICATION	//{{{ handleMessage() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Constructor
WITHOUT_CLASSIFICATION	//{{{ Variables
WITHOUT_CLASSIFICATION	// // Utility flag: have we noticed a CR while reading the last // data chunk?  If so, we will have to go back and normalise // CR/LF. //
WITHOUT_CLASSIFICATION	// Set type/creator codes for files
WITHOUT_CLASSIFICATION	//{{{ osok() method
WITHOUT_CLASSIFICATION	// According to Slava this is better
WITHOUT_CLASSIFICATION	//{{{ showInFinder() method
WITHOUT_CLASSIFICATION	//{{{ runScript() method
WITHOUT_CLASSIFICATION	//{{{ ScriptRunner class
WITHOUT_CLASSIFICATION	//{{{ openSelection() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Variables
WITHOUT_CLASSIFICATION	//Remember to make this an option later //NSApplication.sharedApplication().hide(jEdit.getPlugin("MacOSPlugin"));
WITHOUT_CLASSIFICATION	//SwingUtilities.invokeLater(new ScriptRunner(path)); //}}}
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ getSettings() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Constructor
WITHOUT_CLASSIFICATION	//{{{ Handlers
WITHOUT_CLASSIFICATION	//{{{ handleAbout() method
WITHOUT_CLASSIFICATION	//{{{ handleFileCodes() method
WITHOUT_CLASSIFICATION	// Set type/creator on save
WITHOUT_CLASSIFICATION	// Fail silently, since we may be using UFS
WITHOUT_CLASSIFICATION	// Add type/creator to local buffer property list on open
WITHOUT_CLASSIFICATION	// This will happen when a new file is created
WITHOUT_CLASSIFICATION	//{{{ handleOpenFile() method
WITHOUT_CLASSIFICATION	//{{{ handleOpenFile() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ handlePreferences() method
WITHOUT_CLASSIFICATION	//{{{ handleQuit() method
WITHOUT_CLASSIFICATION	//{{{ Delegate methods
WITHOUT_CLASSIFICATION	//{{{ applicationDockMenu() method
WITHOUT_CLASSIFICATION	// notify clients with -wait
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Buffers
WITHOUT_CLASSIFICATION	// Recent Buffers
WITHOUT_CLASSIFICATION	// Recent Directories
WITHOUT_CLASSIFICATION	// Macros
WITHOUT_CLASSIFICATION	//{{{ applicationOpenFiles() method
WITHOUT_CLASSIFICATION	//{{{ applicationShouldTerminate() method
WITHOUT_CLASSIFICATION	//{{{ Services
WITHOUT_CLASSIFICATION	//{{{ openFile() method
WITHOUT_CLASSIFICATION	//{{{ insertSelection() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Constructor
WITHOUT_CLASSIFICATION	//{{{ construct() method
WITHOUT_CLASSIFICATION	//{{{ menuSelected() method
WITHOUT_CLASSIFICATION	//{{{ Dock Menu
WITHOUT_CLASSIFICATION	//{{{ BufferMenu class
WITHOUT_CLASSIFICATION	//item.setImage(NSWorkspace.sharedWorkspace().iconForFile( //	buffs[i].getPath()));
WITHOUT_CLASSIFICATION	//{{{ MacrosMenu class
WITHOUT_CLASSIFICATION	//{{{ RecentMenu class
WITHOUT_CLASSIFICATION	//{{{ RecentDirMenu class
WITHOUT_CLASSIFICATION	//{{{ MacroAction class
WITHOUT_CLASSIFICATION	//{{{ NewViewAction class
WITHOUT_CLASSIFICATION	//{{{ ShowFileAction class
WITHOUT_CLASSIFICATION	//{{{ Constructor
WITHOUT_CLASSIFICATION	//{{{ construct() method
WITHOUT_CLASSIFICATION	//{{{ menuSelected() method
WITHOUT_CLASSIFICATION	//{{{ menuDeselected() method
WITHOUT_CLASSIFICATION	//{{{ menuDeselected() method
WITHOUT_CLASSIFICATION	//{{{ menuCanceled() method
WITHOUT_CLASSIFICATION	//{{{ ShowRecentDirMenuItem class
WITHOUT_CLASSIFICATION	//{{{ Constructor
WITHOUT_CLASSIFICATION	//{{{ menuCanceled() method
WITHOUT_CLASSIFICATION	//{{{ ShowFileAction class
WITHOUT_CLASSIFICATION	//{{{ ShowBufferMenuItem class
WITHOUT_CLASSIFICATION	//{{{ updateEveryTime() method
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	//{{{ ShowDirAction class
WITHOUT_CLASSIFICATION	//{{{ accept() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ accept() method
WITHOUT_CLASSIFICATION	//{{{ createMacro() method
WITHOUT_CLASSIFICATION	//{{{ runMacro() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ runMacro() method
WITHOUT_CLASSIFICATION	//{{{ Handler constructor
WITHOUT_CLASSIFICATION	// Begin BeanShell Modification - serializable
WITHOUT_CLASSIFICATION	// End BeanShell Modification - serializable
WITHOUT_CLASSIFICATION	// should normally be
WITHOUT_CLASSIFICATION	// Do the for init
WITHOUT_CLASSIFICATION	// do *not* invoke special override for block... (see above)
WITHOUT_CLASSIFICATION	// put it back
WITHOUT_CLASSIFICATION	// default impl
WITHOUT_CLASSIFICATION	//{{{ stringToSelection() method
WITHOUT_CLASSIFICATION	/*declaringNameSpace*/
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Begin Method components
WITHOUT_CLASSIFICATION	// Arguments
WITHOUT_CLASSIFICATION	// Scripted method body
WITHOUT_CLASSIFICATION	// Java Method
WITHOUT_CLASSIFICATION	// End method components
WITHOUT_CLASSIFICATION	/*paramNames*/
WITHOUT_CLASSIFICATION	/*method.block*/
WITHOUT_CLASSIFICATION	/*modifiers*/
WITHOUT_CLASSIFICATION	/*		Note: bshmethod needs to re-evaluate arg types here		This is broken.	*/
WITHOUT_CLASSIFICATION	/*		Note: bshmethod needs to re-evaluate the method return type here.		This is broken.	*/
WITHOUT_CLASSIFICATION	/*isNative*/
WITHOUT_CLASSIFICATION	// is this a syncrhonized method?
WITHOUT_CLASSIFICATION	// ???
WITHOUT_CLASSIFICATION	// Cardinality (number of args) mismatch
WITHOUT_CLASSIFICATION	// Make the local namespace for the method invocation
WITHOUT_CLASSIFICATION	// set the method parameters in the local namespace
WITHOUT_CLASSIFICATION	/*override*/
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Set typed variable
WITHOUT_CLASSIFICATION	// getAssignable would catch this for typed param
WITHOUT_CLASSIFICATION	// Push the new namespace on the call stack
WITHOUT_CLASSIFICATION	// save the callstack including the called method, just for error mess
WITHOUT_CLASSIFICATION	// Get back to caller namespace
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// return type is a class
WITHOUT_CLASSIFICATION	// Point to return statement point if we had one. // (else it was implicit return? What's the case here?)
WITHOUT_CLASSIFICATION	// The token.image text of the name... never changes.
WITHOUT_CLASSIFICATION	// null value means no value
WITHOUT_CLASSIFICATION	// check for easy mistake
WITHOUT_CLASSIFICATION	// Need to scrape a value from the last line?
WITHOUT_CLASSIFICATION	// I/O error
WITHOUT_CLASSIFICATION	// read results...
WITHOUT_CLASSIFICATION	// bad postURL
WITHOUT_CLASSIFICATION	// ?
WITHOUT_CLASSIFICATION	//  first node will either be PrimitiveType or AmbiguousName
WITHOUT_CLASSIFICATION	// Ease debugging... // XThis.this refers to the enclosing class instance
WITHOUT_CLASSIFICATION	/*				If equals() is not explicitly defined we must override the 				default implemented by the This object protocol for scripted				object.  To support XThis equals() must test for equality with 				the generated proxy object, not the scripted bsh This object;				otherwise callers from outside in Java will not see a the 				proxy object as equal to itself.			*/
WITHOUT_CLASSIFICATION	/*leave null*/
WITHOUT_CLASSIFICATION	/*leave null*/
WITHOUT_CLASSIFICATION	// XThis.this refers to the enclosing class instance
WITHOUT_CLASSIFICATION	// return cached type if available
WITHOUT_CLASSIFICATION	/*    * Ordinals for various reasons why an Error of this type can be thrown.    */
WITHOUT_CLASSIFICATION	// put it back
WITHOUT_CLASSIFICATION	// return cached type if available
WITHOUT_CLASSIFICATION	//  first node will either be PrimitiveType or AmbiguousName
WITHOUT_CLASSIFICATION	// finaly block
WITHOUT_CLASSIFICATION	/*    * Constructors of various flavors follow.    */
WITHOUT_CLASSIFICATION	// unwrap the target error
WITHOUT_CLASSIFICATION	// If the param is typed check assignability
WITHOUT_CLASSIFICATION	// Get catch block
WITHOUT_CLASSIFICATION	// If we have an exception, find a catch
WITHOUT_CLASSIFICATION	// Found match, execute catch block
WITHOUT_CLASSIFICATION	// set a typed variable (directly in the block)
WITHOUT_CLASSIFICATION	// set an untyped variable directly in the block
WITHOUT_CLASSIFICATION	// put cbNameSpace on the top of the stack
WITHOUT_CLASSIFICATION	// handled target
WITHOUT_CLASSIFICATION	// evaluate finally block
WITHOUT_CLASSIFICATION	// exception fell through, throw it upward...
WITHOUT_CLASSIFICATION	// Note: no way to mutate the Throwable message, must maintain our own
WITHOUT_CLASSIFICATION	// freeze the callstack for the stack trace.
WITHOUT_CLASSIFICATION	// Users should not normally see this.
WITHOUT_CLASSIFICATION	/*type*/
WITHOUT_CLASSIFICATION	/*type*/
WITHOUT_CLASSIFICATION	// check this.value
WITHOUT_CLASSIFICATION	/*strictjava*/
WITHOUT_CLASSIFICATION	// See notes in getThis()
WITHOUT_CLASSIFICATION	//Log.log(Log.ERROR,this,io);
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Prepare to execute the block. // We must create a new BlockNameSpace to hold the catch // parameter and swap it on the stack after initializing it.
WITHOUT_CLASSIFICATION	// Begin instance data // Note: if we add something here we should reset it in the clear() method.
WITHOUT_CLASSIFICATION	//|| ( getParent()!=null && getParent().classStatic != null ) 
WITHOUT_CLASSIFICATION	// End instance data
WITHOUT_CLASSIFICATION	// Begin constructors
WITHOUT_CLASSIFICATION	// Note: in this case parent must have a class manager.
WITHOUT_CLASSIFICATION	// Register for notification of classloader change
WITHOUT_CLASSIFICATION	// End constructors
WITHOUT_CLASSIFICATION	// if localscoping switch follow strictJava, else recurse
WITHOUT_CLASSIFICATION	/*recurse*/
WITHOUT_CLASSIFICATION	// primitives should have been wrapped
WITHOUT_CLASSIFICATION	// Locate the variable definition if it exists.
WITHOUT_CLASSIFICATION	// Found an existing variable here (or above if recurse allowed)
WITHOUT_CLASSIFICATION	// No previous variable definition found here (or above if recurse)
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// nameSpaceChanged() on new variable addition
WITHOUT_CLASSIFICATION	/*modifiers*/
WITHOUT_CLASSIFICATION	/*recurse*/
WITHOUT_CLASSIFICATION	// If we are disconnected from root we need to handle the def imports
WITHOUT_CLASSIFICATION	/*interp*/
WITHOUT_CLASSIFICATION	/*interp*/
WITHOUT_CLASSIFICATION	//Interpreter.debug("No class manager namespace:" +this);
WITHOUT_CLASSIFICATION	// try parent
WITHOUT_CLASSIFICATION	// Change import precedence if we are a class body/instance
WITHOUT_CLASSIFICATION	// Change import precedence if we are a class body/instance // Get imported first.
WITHOUT_CLASSIFICATION	//checkVariableModifiers( name, modifiers );
WITHOUT_CLASSIFICATION	/*		Get variables declared in this namespace.	*/
WITHOUT_CLASSIFICATION	// Setting a typed variable is always a local operation.
WITHOUT_CLASSIFICATION	// does the variable already exist?
WITHOUT_CLASSIFICATION	// Is it typed?
WITHOUT_CLASSIFICATION	// else set it and return
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//checkMethodModifiers( method );
WITHOUT_CLASSIFICATION	// Vector
WITHOUT_CLASSIFICATION	/*declaredOnly*/
WITHOUT_CLASSIFICATION	// Change import precedence if we are a class body/instance // Get import first.
WITHOUT_CLASSIFICATION	// m contains either BshMethod or Vector of BshMethod
WITHOUT_CLASSIFICATION	// unwrap 
WITHOUT_CLASSIFICATION	// Apply most specific signature matching
WITHOUT_CLASSIFICATION	/*onlyStatic*/
WITHOUT_CLASSIFICATION	/*onlyStatic*/
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Try object imports
WITHOUT_CLASSIFICATION	// Try static imports
WITHOUT_CLASSIFICATION	/*object*/
WITHOUT_CLASSIFICATION	/* 			Here we catch any EvalError from the interpreter because we are			using it as a tool to load the command, not as part of the			execution path.		*/
WITHOUT_CLASSIFICATION	// Look for the loaded command 
WITHOUT_CLASSIFICATION	//cacheCount++; // debug
WITHOUT_CLASSIFICATION	// Check the cache
WITHOUT_CLASSIFICATION	// Unqualified (simple, non-compound) name
WITHOUT_CLASSIFICATION	// Unqualified name check imported
WITHOUT_CLASSIFICATION	// Try imported class
WITHOUT_CLASSIFICATION	// if found as imported also cache it
WITHOUT_CLASSIFICATION	// Not found
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Try absolute
WITHOUT_CLASSIFICATION	// Cache unqualified names to prevent import check again
WITHOUT_CLASSIFICATION	// Try explicitly imported class, e.g. import foo.Bar;
WITHOUT_CLASSIFICATION	/*				Found the full name in imported classes.			*/
WITHOUT_CLASSIFICATION	// Try to make the full imported name
WITHOUT_CLASSIFICATION	// Handle imported inner class case
WITHOUT_CLASSIFICATION	/* not a class */
WITHOUT_CLASSIFICATION	// If found cache the full name in the BshClassManager
WITHOUT_CLASSIFICATION	/*			Try imported packages, e.g. "import foo.bar.*;"			in reverse order of import...			(give later imports precedence...)		*/
WITHOUT_CLASSIFICATION	/*			Try super import if available			Note: we do this last to allow explicitly imported classes			and packages to take priority.  This method will also throw an			error indicating ambiguity if it exists...		*/
WITHOUT_CLASSIFICATION	/*		For serialization.		Don't serialize non-serializable objects.	*/
WITHOUT_CLASSIFICATION	/*arbitrary flag*/
WITHOUT_CLASSIFICATION	// volatile, transient
WITHOUT_CLASSIFICATION	// default
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/* --- Begin static members --- */
WITHOUT_CLASSIFICATION	/* --- End static members --- */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// End constructors
WITHOUT_CLASSIFICATION	/* --- End instance data --- */
WITHOUT_CLASSIFICATION	/* 			Create the root "bsh" system object if it doesn't exist.		*/
WITHOUT_CLASSIFICATION	/*onlyStatic*/
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// bsh
WITHOUT_CLASSIFICATION	// bsh.system
WITHOUT_CLASSIFICATION	// alias
WITHOUT_CLASSIFICATION	// bsh.help
WITHOUT_CLASSIFICATION	// bsh.cwd
WITHOUT_CLASSIFICATION	// applets can't see sys props
WITHOUT_CLASSIFICATION	// bsh.interactive
WITHOUT_CLASSIFICATION	/*BshClassManager*/
WITHOUT_CLASSIFICATION	// init the callstack.  
WITHOUT_CLASSIFICATION	// try to sync up the console
WITHOUT_CLASSIFICATION	// this helps a little
WITHOUT_CLASSIFICATION	// sanity check during development
WITHOUT_CLASSIFICATION	// reinit the callstack
WITHOUT_CLASSIFICATION	// begin source and eval
WITHOUT_CLASSIFICATION	/*, CallStack callstack */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// nodes remember from where they were sourced
WITHOUT_CLASSIFICATION	// non-interactive, return control now
WITHOUT_CLASSIFICATION	// show extra "expecting..." info
WITHOUT_CLASSIFICATION	// add the source file info and throw again
WITHOUT_CLASSIFICATION	// failsafe, set the Line as the origin of the error.
WITHOUT_CLASSIFICATION	// failsafe, set the Line as the origin of the error.
WITHOUT_CLASSIFICATION	// end source and eval
WITHOUT_CLASSIFICATION	// End ConsoleInterface
WITHOUT_CLASSIFICATION	// map null to Primtive.NULL coming in...
WITHOUT_CLASSIFICATION	// optimization for common case
WITHOUT_CLASSIFICATION	/*			We jump through some hoops here to handle arbitrary cases like			unset("bsh.foo");		*/
WITHOUT_CLASSIFICATION	//lhs.assign( null, false );
WITHOUT_CLASSIFICATION	// end primary set and get methods
WITHOUT_CLASSIFICATION	/*	Methods for interacting with Parser */
WITHOUT_CLASSIFICATION	// Default is c:\windows under win98, $HOME under Unix
WITHOUT_CLASSIFICATION	// squeltch security exception, filenotfoundexception
WITHOUT_CLASSIFICATION	// if relative, fix up to bsh.cwd
WITHOUT_CLASSIFICATION	// set transient fields
WITHOUT_CLASSIFICATION	// ug
WITHOUT_CLASSIFICATION	// evaluate the expression
WITHOUT_CLASSIFICATION	// Order of body and condition is swapped for do / while
WITHOUT_CLASSIFICATION	// has body, else just for side effects
WITHOUT_CLASSIFICATION	// no body?
WITHOUT_CLASSIFICATION	//initCallStack( namespace );
WITHOUT_CLASSIFICATION	// null callstack, one will be created for us 
WITHOUT_CLASSIFICATION	/*declaringInterpreter*/
WITHOUT_CLASSIFICATION	// Find the bsh method
WITHOUT_CLASSIFICATION	// leave null
WITHOUT_CLASSIFICATION	// a default equals() testing for equality with the This reference
WITHOUT_CLASSIFICATION	// Call script "invoke( String methodName, Object [] args );
WITHOUT_CLASSIFICATION	//{{{ Entry class
WITHOUT_CLASSIFICATION	//{{{ RecentHandler class
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// These do not change during evaluation
WITHOUT_CLASSIFICATION	// For evaluation
WITHOUT_CLASSIFICATION	// number of times eval hit 'this.caller'
WITHOUT_CLASSIFICATION	//   //  End mutable instance variables. // ---------------------------------------------------------
WITHOUT_CLASSIFICATION	//{{{ updateTitle() method
WITHOUT_CLASSIFICATION	// Begin Cached result structures // These are optimizations 
WITHOUT_CLASSIFICATION	// End Cached result structures
WITHOUT_CLASSIFICATION	/*autoalloc*/
WITHOUT_CLASSIFICATION	// switch namespace and special var visibility
WITHOUT_CLASSIFICATION	// Resolved the variable
WITHOUT_CLASSIFICATION	/*				Keep adding parts until we have a class 			*/
WITHOUT_CLASSIFICATION	// not a class (or variable per above)
WITHOUT_CLASSIFICATION	/*			If we didn't find a class or variable name (or prefix) above			there are two possibilities:			- If we are a simple name then we can pass as a void variable 			reference.			- If we are compound then we must fail at this point.		*/
WITHOUT_CLASSIFICATION	/*			--------------------------------------------------------			After this point we're definitely evaluating relative to			a base object.			--------------------------------------------------------		*/
WITHOUT_CLASSIFICATION	/*			Do some basic validity checks.		*/
WITHOUT_CLASSIFICATION	// previous round produced null
WITHOUT_CLASSIFICATION	// previous round produced void
WITHOUT_CLASSIFICATION	// Class qualified 'this' reference from inner class. // e.g. 'MyOuterClass.this'
WITHOUT_CLASSIFICATION	// find the enclosing class instance space of the class name
WITHOUT_CLASSIFICATION	//&& thisNameSpace.getParent().classInstance != null
WITHOUT_CLASSIFICATION	// static field?
WITHOUT_CLASSIFICATION	// inner class?
WITHOUT_CLASSIFICATION	/* 			Some kind of field access?		*/
WITHOUT_CLASSIFICATION	// length access on array? 
WITHOUT_CLASSIFICATION	/* not a field */
WITHOUT_CLASSIFICATION	// if we get here we have failed
WITHOUT_CLASSIFICATION	/*			Some duplication for "super".  See notes for "this" above			If we're in an enclsing class instance and have a superclass			instance our super is the superclass instance.		*/
WITHOUT_CLASSIFICATION	// Allow getSuper() to through BlockNameSpace to the method's super
WITHOUT_CLASSIFICATION	// super is now the closure's super or class instance
WITHOUT_CLASSIFICATION	// get the previous context (see notes for this class)
WITHOUT_CLASSIFICATION	// get the previous context (see notes for this class)
WITHOUT_CLASSIFICATION	// early return
WITHOUT_CLASSIFICATION	// "var" means untyped, return null class
WITHOUT_CLASSIFICATION	/* Try straightforward class name first */
WITHOUT_CLASSIFICATION	/* 				Try toObject() which knows how to work through inner classes				and see what we end up with 			*/
WITHOUT_CLASSIFICATION	// Null interpreter and callstack references. // class only resolution should not require them.
WITHOUT_CLASSIFICATION	// couldn't resolve it
WITHOUT_CLASSIFICATION	/*	*/
WITHOUT_CLASSIFICATION	// Simple (non-compound) variable assignment e.g. x=5;
WITHOUT_CLASSIFICATION	// Interpreter.debug("Simple var LHS...");
WITHOUT_CLASSIFICATION	// Field e.g. foo.bar=5;
WITHOUT_CLASSIFICATION	/*autoallocthis*/
WITHOUT_CLASSIFICATION	// found a non-backslash char.
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	// Finished eval and its a class.
WITHOUT_CLASSIFICATION	// e.g. this.x=5;  or someThisType.x=5;
WITHOUT_CLASSIFICATION	// dissallow assignment to magic fields
WITHOUT_CLASSIFICATION	// Superclass method invocation? (e.g. super.foo())
WITHOUT_CLASSIFICATION	// Find target object or class identifier
WITHOUT_CLASSIFICATION	// if we've got an object, resolve the method
WITHOUT_CLASSIFICATION	// It's a class
WITHOUT_CLASSIFICATION	// try static method
WITHOUT_CLASSIFICATION	// cache the fact that this is a static method invocation on this class
WITHOUT_CLASSIFICATION	// return null; ???
WITHOUT_CLASSIFICATION	/*, ReflectError, InvocationTargetException*/
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// If defined, invoke it
WITHOUT_CLASSIFICATION	// Look for a BeanShell command
WITHOUT_CLASSIFICATION	// should try to print usage here if nothing found
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// end compound name routines
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/*checkonly*/
WITHOUT_CLASSIFICATION	/*fromValue*/
WITHOUT_CLASSIFICATION	/*checkOnly*/
WITHOUT_CLASSIFICATION	// This should not happen with checkOnly true
WITHOUT_CLASSIFICATION	// assignment to loose type, void type, or exactly same type
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getEditPanes() method
WITHOUT_CLASSIFICATION	// must be null in checkOnly
WITHOUT_CLASSIFICATION	// Cannot cast from arbitrary object to primitive
WITHOUT_CLASSIFICATION	// Casting to reference type
WITHOUT_CLASSIFICATION	// primitive to wrapper type
WITHOUT_CLASSIFICATION	// Primitive (not null or void) to Object.class type
WITHOUT_CLASSIFICATION	// box it
WITHOUT_CLASSIFICATION	// If type already assignable no cast necessary // We do this last to allow various errors above to be caught. // e.g cast Primitive.Void to Object would pass this
WITHOUT_CLASSIFICATION	// Currently unused, but we'll probably need it later.
WITHOUT_CLASSIFICATION	/*		Note: it may see like with the new 1.3 scoping this test could be		removed, but it cannot.  When recurse is false we still need to set the		variable in our parent, not here.	*/
WITHOUT_CLASSIFICATION	// set the var here in the block namespace
WITHOUT_CLASSIFICATION	// set the var in the enclosing (parent) namespace
WITHOUT_CLASSIFICATION	/*strict?*/
WITHOUT_CLASSIFICATION	// super.variables.containsKey( name ) not any faster, I checked
WITHOUT_CLASSIFICATION	//e.printStackTrace();
WITHOUT_CLASSIFICATION	// ClassPathException is a type of UtilEvalError
WITHOUT_CLASSIFICATION	/*		The interpretation of an ambiguous name is context sensitive.		We disallow a generic eval( ).	*/
WITHOUT_CLASSIFICATION	// Should never come here
WITHOUT_CLASSIFICATION	// Read all the backslashes
WITHOUT_CLASSIFICATION	// Both numeric wrapper types?  // Try numeric style promotion wrapper cast
WITHOUT_CLASSIFICATION	// // Begin methods which simply delegate to our parent (enclosing scope)  //
WITHOUT_CLASSIFICATION	// Here, we have seen an odd number of backslash's followed by a 'u'
WITHOUT_CLASSIFICATION	// assign doesn't need the pre-value
WITHOUT_CLASSIFICATION	//{{{ getSplitConfig() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// evaluate each child
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/* Determines whether the current node was actually closed and     pushed.  This should only be called in the final user action of a     node scope.  */
WITHOUT_CLASSIFICATION	/* Call this to reinitialize the node stack.  It is called     automatically by the parser's ReInit() method. */
WITHOUT_CLASSIFICATION	/* Returns the root node of the AST.  It only makes sense to call     this after a successful parse. */
WITHOUT_CLASSIFICATION	/* Pushes a node on to the stack. */
WITHOUT_CLASSIFICATION	/* Returns the node on the top of the stack, and remove it from the     stack.  */
WITHOUT_CLASSIFICATION	/* Returns the node currently on the top of the stack. */
WITHOUT_CLASSIFICATION	/* Returns the number of children on the stack in the current node     scope. */
WITHOUT_CLASSIFICATION	/* A conditional node is constructed if its condition is true.  All     the nodes that have been pushed since the node was opened are     made children of the the conditional node, which is then pushed     on to the stack.  If the condition is false the node is not     constructed and they are left on the stack. */
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	/*ignore*/
WITHOUT_CLASSIFICATION	// try scripted class
WITHOUT_CLASSIFICATION	// end HandlerBase implementation
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// classloader wants no leading slash
WITHOUT_CLASSIFICATION	// classloader wants no leading slash
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/*offset*/
WITHOUT_CLASSIFICATION	/*len*/
WITHOUT_CLASSIFICATION	// may have been axed previously
WITHOUT_CLASSIFICATION	// no args method
WITHOUT_CLASSIFICATION	/*	Note: this class is final because we may test == Primitive.class in places.	If we need to change that search for those tests.*/
WITHOUT_CLASSIFICATION	// boolean
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// special primitive types
WITHOUT_CLASSIFICATION	// keep track of the original types
WITHOUT_CLASSIFICATION	// Unwrap primitives
WITHOUT_CLASSIFICATION	// returns Object covering both Long and Boolean return types
WITHOUT_CLASSIFICATION	// arithmetic
WITHOUT_CLASSIFICATION	// bitwise
WITHOUT_CLASSIFICATION	// bitwise
WITHOUT_CLASSIFICATION	// returns Object covering both Integer and Boolean return types
WITHOUT_CLASSIFICATION	// returns Object covering both Double and Boolean return types
WITHOUT_CLASSIFICATION	// boolean
WITHOUT_CLASSIFICATION	// returns Object covering both Long and Boolean return types
WITHOUT_CLASSIFICATION	// arithmetic
WITHOUT_CLASSIFICATION	// arithmetic
WITHOUT_CLASSIFICATION	// can't shift floating-point values
WITHOUT_CLASSIFICATION	// can't shift floats
WITHOUT_CLASSIFICATION	// ++ and -- must be cast back the original type
WITHOUT_CLASSIFICATION	// Promote character to Number type for these purposes
WITHOUT_CLASSIFICATION	// arbitrary
WITHOUT_CLASSIFICATION	// map voids to nulls for the outside world
WITHOUT_CLASSIFICATION	/*fromValue*/
WITHOUT_CLASSIFICATION	/*checkOnly*/
WITHOUT_CLASSIFICATION	/*			Lots of preconditions checked here...			Once things are running smoothly we might comment these out			(That's what assertions are for).		*/
WITHOUT_CLASSIFICATION	// unwrap primitives
WITHOUT_CLASSIFICATION	/*    */
WITHOUT_CLASSIFICATION	// non boolean primitive, get appropriate flavor of zero
WITHOUT_CLASSIFICATION	/*fromType*/
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// unwrap, etc.
WITHOUT_CLASSIFICATION	// Trying to cast null to primitive type?
WITHOUT_CLASSIFICATION	// can only cast boolean to boolean
WITHOUT_CLASSIFICATION	// Do numeric cast
WITHOUT_CLASSIFICATION	// first promote char to Number type to avoid duplicating code
WITHOUT_CLASSIFICATION	// Begin BeanShell Modification - public, extend EvalError
WITHOUT_CLASSIFICATION	// End BeanShell Modification - public, extend EvalError
WITHOUT_CLASSIFICATION	// Begin BeanShell Modification - sourceFile
WITHOUT_CLASSIFICATION	// End BeanShell Modification - sourceFile
WITHOUT_CLASSIFICATION	// Begin BeanShell Modification - constructor
WITHOUT_CLASSIFICATION	// End BeanShell Modification - constructor
WITHOUT_CLASSIFICATION	// End BeanShell Modification - constructor
WITHOUT_CLASSIFICATION	// End BeanShell Modification - super constructor args
WITHOUT_CLASSIFICATION	// Begin BeanShell Modification - moved body to overloaded getMessage()
WITHOUT_CLASSIFICATION	/*strict*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	// End BeanShell Modification - moved body to overloaded getMessage()
WITHOUT_CLASSIFICATION	// Begin BeanShell Modification - added debug param
WITHOUT_CLASSIFICATION	// End BeanShell Modification - added debug param
WITHOUT_CLASSIFICATION	// Begin BeanShell Modification - added sourceFile info
WITHOUT_CLASSIFICATION	// End BeanShell Modification - added sourceFile info
WITHOUT_CLASSIFICATION	// Begin BeanShell Modification - made conditional on debug
WITHOUT_CLASSIFICATION	// End BeanShell Modification - made conditional on debug
WITHOUT_CLASSIFICATION	// Begin BeanShell Modification - override error methods and toString
WITHOUT_CLASSIFICATION	// copied from generated getMessage()
WITHOUT_CLASSIFICATION	// End BeanShell Modification - override error methods and toString
WITHOUT_CLASSIFICATION	// skip CR
WITHOUT_CLASSIFICATION	// Test it
WITHOUT_CLASSIFICATION	// for inner classes
WITHOUT_CLASSIFICATION	// Force the class public for now...
WITHOUT_CLASSIFICATION	// Generate the bsh instance 'This' reference holder field
WITHOUT_CLASSIFICATION	// Generate the static bsh static reference holder field
WITHOUT_CLASSIFICATION	// Generate the fields
WITHOUT_CLASSIFICATION	// Generate the constructors
WITHOUT_CLASSIFICATION	// Don't generate private constructors
WITHOUT_CLASSIFICATION	// If no other constructors, generate a default constructor
WITHOUT_CLASSIFICATION	/*index*/
WITHOUT_CLASSIFICATION	// Generate the delegate methods
WITHOUT_CLASSIFICATION	// Don't generate private /*or loosely return typed */ methods
WITHOUT_CLASSIFICATION	/*|| returnType == null*/
WITHOUT_CLASSIFICATION	// map loose return type to Object
WITHOUT_CLASSIFICATION	// Generate method body
WITHOUT_CLASSIFICATION	/*	 * The split config is recorded in a simple RPN "language".	 */
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Get the instance field
WITHOUT_CLASSIFICATION	// Generate code to push arguments as an object array
WITHOUT_CLASSIFICATION	// Push the boolean constant 'true' (for declaredOnly)
WITHOUT_CLASSIFICATION	//{{{ restoreSplitConfig() method
WITHOUT_CLASSIFICATION	// Generate code to push arguments as an object array
WITHOUT_CLASSIFICATION	// Invoke the method This.invokeMethod( name, Class [] sig, boolean )
WITHOUT_CLASSIFICATION	// Generate code to unwrap bsh Primitive types
WITHOUT_CLASSIFICATION	// Generate code to return the value
WITHOUT_CLASSIFICATION	// Create this constructor method
WITHOUT_CLASSIFICATION	/*isStatic*/
WITHOUT_CLASSIFICATION	// Generate the code implementing the alternate constructor switch
WITHOUT_CLASSIFICATION	// Generate code to invoke the ClassGeneratorUtil initInstance() method
WITHOUT_CLASSIFICATION	// push 'this' 
WITHOUT_CLASSIFICATION	// Push the class/constructor name as a constant
WITHOUT_CLASSIFICATION	// Push arguments as an object array
WITHOUT_CLASSIFICATION	// invoke the initInstance() method
WITHOUT_CLASSIFICATION	// push super class name // use superClassName var?
WITHOUT_CLASSIFICATION	// push class static This object
WITHOUT_CLASSIFICATION	// push args
WITHOUT_CLASSIFICATION	// push this constructor index number onto stack
WITHOUT_CLASSIFICATION	// invoke the ClassGeneratorUtil getConstructorsArgs() method
WITHOUT_CLASSIFICATION	// store ConstructorArgs in consArgsVar
WITHOUT_CLASSIFICATION	//{{{ toggleLineSeparator() method
WITHOUT_CLASSIFICATION	// Get the ConstructorArgs selector field from ConstructorArgs
WITHOUT_CLASSIFICATION	// push ConstructorArgs 
WITHOUT_CLASSIFICATION	// start switch
WITHOUT_CLASSIFICATION	/*max*/
WITHOUT_CLASSIFICATION	/*min*/
WITHOUT_CLASSIFICATION	// generate switch body
WITHOUT_CLASSIFICATION	// default branch always invokes no args super // push 'this' 
WITHOUT_CLASSIFICATION	// done with switch
WITHOUT_CLASSIFICATION	//cv.visitLineNumber( index, labels[index] ); // push this before args
WITHOUT_CLASSIFICATION	// Unload the arguments from the ConstructorArgs object
WITHOUT_CLASSIFICATION	// invoke the iterator method on the ConstructorArgs // push the ConstructorArgs
WITHOUT_CLASSIFICATION	// if it's an object type we must do a check cast
WITHOUT_CLASSIFICATION	// invoke the constructor for this branch
WITHOUT_CLASSIFICATION	// Maybe combine this with generateMethod()
WITHOUT_CLASSIFICATION	// map loose return to Object
WITHOUT_CLASSIFICATION	// Add method body
WITHOUT_CLASSIFICATION	// Push vars
WITHOUT_CLASSIFICATION	//long
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// use default super constructor
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/*modifiers*/
WITHOUT_CLASSIFICATION	// use default super constructor
WITHOUT_CLASSIFICATION	// Make a tmp namespace to hold the original constructor args for // use in eval of the parameters node
WITHOUT_CLASSIFICATION	// evaluate the args
WITHOUT_CLASSIFICATION	// find the matching super() constructor for the args
WITHOUT_CLASSIFICATION	// find the matching this() constructor for the args
WITHOUT_CLASSIFICATION	// Are we choosing ourselves recursively through a this() reference?
WITHOUT_CLASSIFICATION	// Get the static This reference from the proto-instance
WITHOUT_CLASSIFICATION	// Get the instance initializer block from the static This 
WITHOUT_CLASSIFICATION	/*override*/
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Create the instance namespace
WITHOUT_CLASSIFICATION	// Set the instance This reference on the instance
WITHOUT_CLASSIFICATION	// Give the instance space its object import
WITHOUT_CLASSIFICATION	// invoke the constructor method from the instanceThis 
WITHOUT_CLASSIFICATION	// Find the constructor (now in the instance namespace)
WITHOUT_CLASSIFICATION	// if args, we must have constructor
WITHOUT_CLASSIFICATION	// Evaluate the constructor
WITHOUT_CLASSIFICATION	/*overrideNameSpace*/
WITHOUT_CLASSIFICATION	/*callerInfo*/
WITHOUT_CLASSIFICATION	// unwrap Primitive.Null to null
WITHOUT_CLASSIFICATION	// right?
WITHOUT_CLASSIFICATION	// unsafe caching of type here
WITHOUT_CLASSIFICATION	// Begin Child node structure evaluated by insureNodesParsed
WITHOUT_CLASSIFICATION	// index of the first throws clause child node
WITHOUT_CLASSIFICATION	// End Child node structure evaluated by insureNodesParsed
WITHOUT_CLASSIFICATION	// there is always a paramsNode
WITHOUT_CLASSIFICATION	// skip throws
WITHOUT_CLASSIFICATION	// skip throws
WITHOUT_CLASSIFICATION	// Unsafe caching of type here. // null (none), Void.TYPE, or a Class
WITHOUT_CLASSIFICATION	// Install an *instance* of this method in the namespace. // See notes in BshMethod 
WITHOUT_CLASSIFICATION	// validate that the throws names are class names
WITHOUT_CLASSIFICATION	// if strictJava mode, check for loose parameters and return type
WITHOUT_CLASSIFICATION	// do nothing - ch already contains correct character
WITHOUT_CLASSIFICATION	// get next character
WITHOUT_CLASSIFICATION	// get next character
WITHOUT_CLASSIFICATION	// check the next two characters
WITHOUT_CLASSIFICATION	// type is either a class name or a primitive type
WITHOUT_CLASSIFICATION	// args is either constructor arguments or array dimensions
WITHOUT_CLASSIFICATION	// Look for scripted class object
WITHOUT_CLASSIFICATION	/* force class*/
WITHOUT_CLASSIFICATION	// Try regular class
WITHOUT_CLASSIFICATION	/*force class*/
WITHOUT_CLASSIFICATION	// Is an inner class style object allocation
WITHOUT_CLASSIFICATION	// No need to wrap this debug
WITHOUT_CLASSIFICATION	// Is it an inner class?
WITHOUT_CLASSIFICATION	// work through to class 'this'
WITHOUT_CLASSIFICATION	/*interfaces*/
WITHOUT_CLASSIFICATION	/*superClass*/
WITHOUT_CLASSIFICATION	/*isInterface*/
WITHOUT_CLASSIFICATION	// statical import fields from the interface so that code inside // can refer to the fields directly (e.g. HEIGHT)
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	/* all printable ASCII characters */
WITHOUT_CLASSIFICATION	//SwingUtilities.updateComponentTreeUI(getRootPane()); //}}}
WITHOUT_CLASSIFICATION	//{{{ loadToolBars() method
WITHOUT_CLASSIFICATION	//{{{ createEditPane() method
WITHOUT_CLASSIFICATION	//{{{ setEditPane() method
WITHOUT_CLASSIFICATION	// repaint the gutter so that the border color // reflects the focus state
WITHOUT_CLASSIFICATION	//{{{ handleBufferUpdate() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// zeros
WITHOUT_CLASSIFICATION	// First node is the expression on which to sync
WITHOUT_CLASSIFICATION	// Do the actual synchronization
WITHOUT_CLASSIFICATION	/*filter*/
WITHOUT_CLASSIFICATION	/*				Evaluate block in two passes: 				First do class declarations then do everything else.			*/
WITHOUT_CLASSIFICATION	// filter nodes
WITHOUT_CLASSIFICATION	// statement or embedded block evaluated a return statement
WITHOUT_CLASSIFICATION	// make sure we put the namespace back when we leave.
WITHOUT_CLASSIFICATION	/*		Our children are a prefix expression and any number of suffixes.		<p>		We don't eval() any nodes until the suffixes have had an		opportunity to work through them.  This lets the suffixes decide		how to interpret an ambiguous name (e.g. for the .class operation).	*/
WITHOUT_CLASSIFICATION	/*			If the result is a Node eval() it to an object or LHS			(as determined by toLHS)		*/
WITHOUT_CLASSIFICATION	// Some arbitrary kind of node
WITHOUT_CLASSIFICATION	// return LHS or value object as determined by toLHS
WITHOUT_CLASSIFICATION	// Type node is passed down the chain for array initializers // which need it under some circumstances
WITHOUT_CLASSIFICATION	// import the package we're in by default...
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// field access
WITHOUT_CLASSIFICATION	/*		Field access, .length on array, or a method invocation		Must handle toLHS case for each.	*/
WITHOUT_CLASSIFICATION	// .length on array
WITHOUT_CLASSIFICATION	// Property style access to Hashtable or Map
WITHOUT_CLASSIFICATION	// ++ and -- must be cast back the original type
WITHOUT_CLASSIFICATION	// Method invocation // (LHS or non LHS evaluation can both encounter method calls)
WITHOUT_CLASSIFICATION	/*key*/
WITHOUT_CLASSIFICATION	//public SimpleNode getParent() { return (SimpleNode)parent; }
WITHOUT_CLASSIFICATION	/*		Override this method if you want to customize how the node dumps		out its children.	*/
WITHOUT_CLASSIFICATION	//  ---- BeanShell specific stuff hereafter ----  //
WITHOUT_CLASSIFICATION	// If this is a unary increment of decrement (either pre or postfix) // then we need an LHS to which to assign the result.  Otherwise // just do the unary operation for the value.
WITHOUT_CLASSIFICATION	// resolve superclass if any
WITHOUT_CLASSIFICATION	// Get interfaces
WITHOUT_CLASSIFICATION	// Get the class body BSHBlock
WITHOUT_CLASSIFICATION	/*		type = VARIABLE;		this.varName = varName;		this.nameSpace = nameSpace;*/
WITHOUT_CLASSIFICATION	// Set the variable in namespace according to localVar flag
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// pass along target error
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// General case - performe the instanceof based on assignability
WITHOUT_CLASSIFICATION	/*			Look ahead and short circuit evaluation of the rhs if:				we're a boolean AND and the lhs is false.		*/
WITHOUT_CLASSIFICATION	/*			Look ahead and short circuit evaluation of the rhs if:				we're a boolean AND and the lhs is false.		*/
WITHOUT_CLASSIFICATION	// end stuff that was tacked on for boolean short-circuiting.
WITHOUT_CLASSIFICATION	/*			Are both the lhs and rhs either wrappers or primitive values?			do binary op		*/
WITHOUT_CLASSIFICATION	// Special case for EQ on two wrapper objects
WITHOUT_CLASSIFICATION	/*  					Don't auto-unwrap wrappers (preserve identity semantics)					FALL THROUGH TO OBJECT OPERATIONS BELOW.				*/
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// lazy instantiation
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// fix for the bug where key events in JTextComponents // inside views are also handled by the input handler
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ WindowHandler class
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ handleEditPaneUpdate() method
WITHOUT_CLASSIFICATION	//{{{ updateGutterBorders() method
WITHOUT_CLASSIFICATION	//{{{ _preprocessKeyEvent() method
WITHOUT_CLASSIFICATION	//{{{ CaretHandler class
WITHOUT_CLASSIFICATION	//{{{ FocusHandler class
WITHOUT_CLASSIFICATION	// walk up hierarchy, looking for an EditPane
WITHOUT_CLASSIFICATION	//{{{ ScrollHandler class
WITHOUT_CLASSIFICATION	// People have reported hangs with JDK 1.4; might be // caused by modal dialogs being displayed from // windowActivated()
WITHOUT_CLASSIFICATION	//{{{ ViewConfig class
WITHOUT_CLASSIFICATION	// dockables
WITHOUT_CLASSIFICATION	// this constructor keys the hash table
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ getAction() method
WITHOUT_CLASSIFICATION	//{{{ getActionNames() method
WITHOUT_CLASSIFICATION	//{{{ addActionSet() method
WITHOUT_CLASSIFICATION	//{{{ removeActionSet() method
WITHOUT_CLASSIFICATION	//{{{ getActionSets() method
WITHOUT_CLASSIFICATION	//{{{ getActionSetForAction() method
WITHOUT_CLASSIFICATION	//{{{ loadServices() method
WITHOUT_CLASSIFICATION	//{{{ invokeAction() method
WITHOUT_CLASSIFICATION	//{{{ unloadServices() method
WITHOUT_CLASSIFICATION	//{{{ registerService() method
WITHOUT_CLASSIFICATION	// this constructor is the value of the hash table
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ registerService() method
WITHOUT_CLASSIFICATION	//{{{ unregisterService() method
WITHOUT_CLASSIFICATION	//{{{ getServiceTypes() method
WITHOUT_CLASSIFICATION	//{{{ getServiceNames() method
WITHOUT_CLASSIFICATION	//{{{ getService() method
WITHOUT_CLASSIFICATION	// unknown service - <clazz,name> not in table
WITHOUT_CLASSIFICATION	//{{{ Descriptor class
WITHOUT_CLASSIFICATION	// avoid re-running script if it gives // us null
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// this constructor keys the hash table
WITHOUT_CLASSIFICATION	// this constructor is the value of the hash table
WITHOUT_CLASSIFICATION	// lazy instantiation
WITHOUT_CLASSIFICATION	// avoid re-running script if it gives // us null
WITHOUT_CLASSIFICATION	//{{{ EditServer constructor
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ removeNotify() method
WITHOUT_CLASSIFICATION	//{{{ addNotify() method
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ IOProgressMonitor constructor
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ paintComponent() method
WITHOUT_CLASSIFICATION	//UIManager.getFont("Label.font");
WITHOUT_CLASSIFICATION	//{{{ ErrorListCellRenderer constructor
WITHOUT_CLASSIFICATION	//{{{ getListCellRendererComponent() method
WITHOUT_CLASSIFICATION	//{{{ getPreferredSize() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ ErrorEntry class
WITHOUT_CLASSIFICATION	//{{{ ErrorListDialog constructor
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ handleMessage() method
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ getMinimumSize() method
WITHOUT_CLASSIFICATION	//{{{ EditPane constructor
WITHOUT_CLASSIFICATION	//{{{ close() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ handleBufferUpdate() method
WITHOUT_CLASSIFICATION	//{{{ isX11() method
WITHOUT_CLASSIFICATION	// Set up the right-click popup menu
WITHOUT_CLASSIFICATION	//{{{ getScreenBounds() method
WITHOUT_CLASSIFICATION	// use old property name for backwards compatibility
WITHOUT_CLASSIFICATION	//{{{ getScreenBounds() method
WITHOUT_CLASSIFICATION	//{{{ loadBufferSwitcher() method
WITHOUT_CLASSIFICATION	// Don't add duplicates
WITHOUT_CLASSIFICATION	/* When closing the last buffer, the BufferUpdate.CLOSED			 * handler doesn't call setBuffer(), because null buffers			 * are not supported. Instead, it waits for the subsequent			 * 'Untitled' file creation. */
WITHOUT_CLASSIFICATION	//shadow size
WITHOUT_CLASSIFICATION	//shadow size
WITHOUT_CLASSIFICATION	//{{{ isDOSDerived() method
WITHOUT_CLASSIFICATION	// Pick screen with largest intersection
WITHOUT_CLASSIFICATION	//{{{ isOS2() method
WITHOUT_CLASSIFICATION	// Make adjustments for some OS's
WITHOUT_CLASSIFICATION	//{{{ isWindows() method
WITHOUT_CLASSIFICATION	// Yay, we're finally there
WITHOUT_CLASSIFICATION	//{{{ getMarkers() method
WITHOUT_CLASSIFICATION	//{{{ isWindows9x() method
WITHOUT_CLASSIFICATION	//{{{ isUnix() method
WITHOUT_CLASSIFICATION	//{{{ isWindowsNT() method
WITHOUT_CLASSIFICATION	//{{{ indentLines() method
WITHOUT_CLASSIFICATION	//{{{ isMacOS() method
WITHOUT_CLASSIFICATION	// Do it
WITHOUT_CLASSIFICATION	//{{{ indentLines() method
WITHOUT_CLASSIFICATION	//{{{ Get properties
WITHOUT_CLASSIFICATION	//{{{ indentLine() method
WITHOUT_CLASSIFICATION	//{{{ indentLine() method
WITHOUT_CLASSIFICATION	//{{{ getCurrentIndentForLine() method
WITHOUT_CLASSIFICATION	//{{{ getIdealIndentForLine() method
WITHOUT_CLASSIFICATION	//{{{ Get indent attributes of previous line
WITHOUT_CLASSIFICATION	//{{{ getFile() method
WITHOUT_CLASSIFICATION	//{{{ createPosition() method
WITHOUT_CLASSIFICATION	//{{{ Deprecated methods
WITHOUT_CLASSIFICATION	//{{{ markTokens() method
WITHOUT_CLASSIFICATION	//{{{ Handle brackets
WITHOUT_CLASSIFICATION	//{{{ Get indent attributes for current line
WITHOUT_CLASSIFICATION	//{{{ putBooleanProperty() method
WITHOUT_CLASSIFICATION	// Additional bracket indent // For lining up closing // and opening brackets
WITHOUT_CLASSIFICATION	//{{{ Handle regexps
WITHOUT_CLASSIFICATION	//{{{ Deep indenting
WITHOUT_CLASSIFICATION	//{{{ isFoldStart() method
WITHOUT_CLASSIFICATION	// no parenthesis on previous line (prevLineParenWeight == 0) so the normal indenting rules are used
WITHOUT_CLASSIFICATION	//{{{ getRootElements() method
WITHOUT_CLASSIFICATION	// If the previous line matches indentNextLine or indentNextLines, // add a level of indent
WITHOUT_CLASSIFICATION	//{{{ getLineParenWeight() method
WITHOUT_CLASSIFICATION	//{{{ getParagraphElement() method
WITHOUT_CLASSIFICATION	//{{{ putProperty() method
WITHOUT_CLASSIFICATION	//{{{ isFoldEnd() method
WITHOUT_CLASSIFICATION	// for backwards compatibility
WITHOUT_CLASSIFICATION	//{{{ setFoldHandler() method
WITHOUT_CLASSIFICATION	//{{{ getDefaultRootElement() method
WITHOUT_CLASSIFICATION	//{{{ invalidateCachedFoldLevels() method
WITHOUT_CLASSIFICATION	//{{{ getCurrentIdentForLine() method
WITHOUT_CLASSIFICATION	//{{{ Folding methods
WITHOUT_CLASSIFICATION	//{{{ Position methods
WITHOUT_CLASSIFICATION	//{{{ getFoldLevel() method
WITHOUT_CLASSIFICATION	//{{{ getFoldAtLine() method
WITHOUT_CLASSIFICATION	//{{{ Marker methods
WITHOUT_CLASSIFICATION	//{{{ getFoldHandler() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ commitTemporary() method
WITHOUT_CLASSIFICATION	//{{{ getMarker() method
WITHOUT_CLASSIFICATION	// notify clients with -wait
WITHOUT_CLASSIFICATION	//Log.log(Log.ERROR,this,io);
WITHOUT_CLASSIFICATION	//{{{ close() method
WITHOUT_CLASSIFICATION	// don't sort markers while buffer is being loaded
WITHOUT_CLASSIFICATION	//{{{ getMarkerStatusPrompt() method
WITHOUT_CLASSIFICATION	//{{{ checkFileForLoad() method
WITHOUT_CLASSIFICATION	//{{{ addOrRemoveMarker() method
WITHOUT_CLASSIFICATION	//{{{ getMarkerInRange() method
WITHOUT_CLASSIFICATION	//{{{ addMarker() method
WITHOUT_CLASSIFICATION	// this must be called before any EditBus messages are sent
WITHOUT_CLASSIFICATION	//{{{ getMarkerAtLine() method
WITHOUT_CLASSIFICATION	//{{{ resetCachedProperties() method
WITHOUT_CLASSIFICATION	//{{{ removeMarker() method
WITHOUT_CLASSIFICATION	/* Magic: UNTITLED is only set if newFile param to		 * constructor is set, NEW_FILE is also set if file		 * doesn't exist on disk.		 *		 * This is so that we can tell apart files created		 * with jEdit.newFile(), and those that just don't		 * exist on disk.		 *		 * Why do we need to tell the difference between the		 * two? jEdit.addBufferToList() checks if the only		 * opened buffer is an untitled buffer, and if so,		 * replaces it with the buffer to add. We don't want		 * this behavior to occur with files that don't		 * exist on disk; only untitled ones.		 */
WITHOUT_CLASSIFICATION	//{{{ removeAllMarkers() method
WITHOUT_CLASSIFICATION	// Display
WITHOUT_CLASSIFICATION	//{{{ Flags
WITHOUT_CLASSIFICATION	//{{{ finishSaving() method
WITHOUT_CLASSIFICATION	//{{{ setFlag() method
WITHOUT_CLASSIFICATION	//{{{ setPath() method
WITHOUT_CLASSIFICATION	//{{{ getFlag() method
WITHOUT_CLASSIFICATION	//{{{ checkFileForSave() method
WITHOUT_CLASSIFICATION	//{{{ Flag values
WITHOUT_CLASSIFICATION	//{{{ recoverAutosave() method
WITHOUT_CLASSIFICATION	// this method might get called at startup
WITHOUT_CLASSIFICATION	//{{{ fireTransactionComplete() method
WITHOUT_CLASSIFICATION	//{{{ finishLoading() method
WITHOUT_CLASSIFICATION	// Create marker positions
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ setTokenMarker() method
WITHOUT_CLASSIFICATION	// if we don't do this, the autosave file won't be // deleted after a save as
WITHOUT_CLASSIFICATION	// Need to reset properties that were cached defaults, // since the defaults might have changed.
WITHOUT_CLASSIFICATION	// on a reload, the fold handler doesn't change, but // we still need to re-collapse folds. // don't do this on initial fold handler creation
WITHOUT_CLASSIFICATION	// show this message when all I/O requests are // complete
WITHOUT_CLASSIFICATION	/* if we save a file with the same name as one				 * that's already open, we presume that we can				 * close the existing file, since the user				 * would have confirmed the overwrite in the				 * 'save as' dialog box anyway */
WITHOUT_CLASSIFICATION	/* can't happen? */
WITHOUT_CLASSIFICATION	/* can't happen? */
WITHOUT_CLASSIFICATION	/* if we saved over an already open file using				 * 'save a copy as', then reload the existing				 * buffer */
WITHOUT_CLASSIFICATION	//{{{ Update this buffer for the new path
WITHOUT_CLASSIFICATION	// this ensures that undo can clear // the dirty flag properly when all // edits up to a save are undone
WITHOUT_CLASSIFICATION	// if user adds mode buffer-local property
WITHOUT_CLASSIFICATION	// new message type introduced in 4.0pre4
WITHOUT_CLASSIFICATION	//{{{ parseBufferLocalProperties() method
WITHOUT_CLASSIFICATION	//{{{ parseBufferLocalProperties() method
WITHOUT_CLASSIFICATION	// first line for last 10 lines, make sure not to overlap // with the first 10
WITHOUT_CLASSIFICATION	// use the low-level property setting code // so that if we have a buffer-local // property with the same value as a default, // later changes in the default don't affect // the buffer-local property
WITHOUT_CLASSIFICATION	// don't do this on initial token marker
WITHOUT_CLASSIFICATION	//{{{ getPriorNonEmptyLine() method
WITHOUT_CLASSIFICATION	// didn't find a line that contains non-whitespace chars // so return index of prior whitespace line
WITHOUT_CLASSIFICATION	//{{{ contentInserted() method
WITHOUT_CLASSIFICATION	//{{{ Event firing methods
WITHOUT_CLASSIFICATION	//{{{ getListener() method
WITHOUT_CLASSIFICATION	//{{{ fireFoldLevelChanged() method
WITHOUT_CLASSIFICATION	//{{{ fireContentInserted() method
WITHOUT_CLASSIFICATION	//{{{ fireContentRemoved() method
WITHOUT_CLASSIFICATION	//{{{ firePreContentRemoved() method
WITHOUT_CLASSIFICATION	//{{{ fireFoldHandlerChanged() method
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	// end HandlerBase implementation
WITHOUT_CLASSIFICATION	// so you the avid code reader should use MODES as the // DOCTYPE instead, but we still let old catalogs through // to avoid annoying users.
WITHOUT_CLASSIFICATION	// older jEdit versions used a DOCTYPE of CATALOG, which // is incorrect since the DOCTYPE must be the name of the // root element, which is MODES.
WITHOUT_CLASSIFICATION	// 1 because we've already 'seen' the first bracket
WITHOUT_CLASSIFICATION	//{{{ findMatchingBracket() method
WITHOUT_CLASSIFICATION	// to avoid slowdown with large files; only scan 10000 lines either way
WITHOUT_CLASSIFICATION	//{{{ Forward search
WITHOUT_CLASSIFICATION	//{{{ getTokenAtOffset() method
WITHOUT_CLASSIFICATION	// corresponding character // false - backwards, true - forwards
WITHOUT_CLASSIFICATION	//}}} //{{{ Backward search
WITHOUT_CLASSIFICATION	// Get the syntax token at 'offset' // only tokens with the same type will be checked for // the corresponding bracket
WITHOUT_CLASSIFICATION	// Nothing found
WITHOUT_CLASSIFICATION	//{{{ Go on to next line
WITHOUT_CLASSIFICATION	//{{{ Go on to previous line
WITHOUT_CLASSIFICATION	//{{{ the character under the cursor changes how we behave.
WITHOUT_CLASSIFICATION	//{{{ findWordStart() method
WITHOUT_CLASSIFICATION	//{{{ findWordStart() method
WITHOUT_CLASSIFICATION	//{{{ findWordStart() method
WITHOUT_CLASSIFICATION	//{{{ the character under the cursor changes how we behave.
WITHOUT_CLASSIFICATION	//{{{ Whitespace...
WITHOUT_CLASSIFICATION	//{{{ Whitespace...
WITHOUT_CLASSIFICATION	// only select other whitespace in this case
WITHOUT_CLASSIFICATION	// only select other whitespace in this case
WITHOUT_CLASSIFICATION	// word char or symbol; stop
WITHOUT_CLASSIFICATION	//}}} //{{{ Word character...
WITHOUT_CLASSIFICATION	// word char; keep going
WITHOUT_CLASSIFICATION	// whitespace; include in word if eating
WITHOUT_CLASSIFICATION	// whitespace; include in word if eating
WITHOUT_CLASSIFICATION	//}}} //{{{ Symbol...
WITHOUT_CLASSIFICATION	//{{{ findWordEnd() method
WITHOUT_CLASSIFICATION	//{{{ findWordEnd() method
WITHOUT_CLASSIFICATION	//{{{ findWordEnd() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	// whitespace; include in word if eating
WITHOUT_CLASSIFICATION	//}}} //{{{ Symbol...
WITHOUT_CLASSIFICATION	// align everything to paragraph's leading indent
WITHOUT_CLASSIFICATION	// if we see whitespace, set flag.
WITHOUT_CLASSIFICATION	//{{{ tabsToSpaces() method
WITHOUT_CLASSIFICATION	//{{{ spacesToTabs() method
WITHOUT_CLASSIFICATION	//{{{ createEncodingMenu() method
WITHOUT_CLASSIFICATION	//{{{ format() method
WITHOUT_CLASSIFICATION	//{{{ BrowserCommandsMenu constructor
WITHOUT_CLASSIFICATION	//{{{ getStringCase() method
WITHOUT_CLASSIFICATION	// set rename to false if > 1 file selected
WITHOUT_CLASSIFICATION	//{{{ toTitleCase() method
WITHOUT_CLASSIFICATION	/* all good */
WITHOUT_CLASSIFICATION	//{{{ formatParagraph() method
WITHOUT_CLASSIFICATION	//{{{ paintComponent() method
WITHOUT_CLASSIFICATION	// show 'close' item if at least one selected // file is currently open
WITHOUT_CLASSIFICATION	// this will disable most operations if // files of multiple types are selected
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ createMenuItem() method
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	//{{{ getIconForFile() method
WITHOUT_CLASSIFICATION	//{{{ FileCellRenderer constructor
WITHOUT_CLASSIFICATION	//{{{ getIconForFile() method
WITHOUT_CLASSIFICATION	//{{{ getTableCellRendererComponent() method
WITHOUT_CLASSIFICATION	//{{{ getEntryWidth() method
WITHOUT_CLASSIFICATION	//{{{ ExpansionToggleBorder class
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ processKeyEvent() method
WITHOUT_CLASSIFICATION	//{{{ ExpansionToggleBorder constructor
WITHOUT_CLASSIFICATION	//{{{ isExpansionToggle() method
WITHOUT_CLASSIFICATION	//setColumnSelectionAllowed(true); //setCellSelectionEnabled(false);
WITHOUT_CLASSIFICATION	//{{{ paintBorder() method
WITHOUT_CLASSIFICATION	//{{{ VFSDirectoryEntryTable constructor
WITHOUT_CLASSIFICATION	//{{{ getBorderInsets() method
WITHOUT_CLASSIFICATION	//{{{ getSelectedFiles() method
WITHOUT_CLASSIFICATION	//{{{ isBorderOpaque() method
WITHOUT_CLASSIFICATION	//{{{ selectFile() method
WITHOUT_CLASSIFICATION	/* TableColumn col1 = getColumnModel().getColumn(0);		col1.setMinWidth(20);		col1.setMaxWidth(20);		col1.setPreferredWidth(20); */
WITHOUT_CLASSIFICATION	//{{{ setDirectory() method
WITHOUT_CLASSIFICATION	//{{{ getExpandedDirectories() method
WITHOUT_CLASSIFICATION	//{{{ doTypeSelect() method
WITHOUT_CLASSIFICATION	//{{{ doTypeSelect() method
WITHOUT_CLASSIFICATION	//{{{ scrollRectToVisible() method
WITHOUT_CLASSIFICATION	//{{{ maybeReloadDirectory() method
WITHOUT_CLASSIFICATION	//{{{ toggleExpanded() method
WITHOUT_CLASSIFICATION	// avoid scrolling to the right
WITHOUT_CLASSIFICATION	//{{{ setSelectedRow() method
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ run() method
WITHOUT_CLASSIFICATION	//{{{ expand() method
WITHOUT_CLASSIFICATION	//{{{ resizeColumnsAppropriately() method
WITHOUT_CLASSIFICATION	//{{{ delete() method
WITHOUT_CLASSIFICATION	//{{{ ClearTypeSelect class
WITHOUT_CLASSIFICATION	//{{{ getExtendedAttribute() method
WITHOUT_CLASSIFICATION	//{{{ Request types
WITHOUT_CLASSIFICATION	//{{{ rename() method
WITHOUT_CLASSIFICATION	//{{{ BrowserIORequest constructor
WITHOUT_CLASSIFICATION	/* fireTableRowsInserted(startIndex + 1,				startIndex + list.size() + 1); */
WITHOUT_CLASSIFICATION	//{{{ listDirectory() method
WITHOUT_CLASSIFICATION	// allow user to change name // case
WITHOUT_CLASSIFICATION	//{{{ getColumnCount() method
WITHOUT_CLASSIFICATION	//{{{ mkdir() method
WITHOUT_CLASSIFICATION	/* fireTableRowsUpdated(startIndex,startIndex); */
WITHOUT_CLASSIFICATION	//{{{ VFSDirectoryEntryTableModel constructor
WITHOUT_CLASSIFICATION	//{{{ setRoot() method
WITHOUT_CLASSIFICATION	//{{{ getRowCount() method
WITHOUT_CLASSIFICATION	//{{{ collapse() method
WITHOUT_CLASSIFICATION	//{{{ addExtendedAttributes() method
WITHOUT_CLASSIFICATION	/* fireTableRowsUpdated(index,index);		fireTableRowsDeleted(index + 1,lastIndex); */
WITHOUT_CLASSIFICATION	//{{{ getColumnName() method
WITHOUT_CLASSIFICATION	//{{{ getColumnClass() method
WITHOUT_CLASSIFICATION	//{{{ removeExtendedAttributes() method
WITHOUT_CLASSIFICATION	//{{{ getValueAt() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Entry class
WITHOUT_CLASSIFICATION	//{{{ getSelectedFiles() method
WITHOUT_CLASSIFICATION	//{{{ maybeReloadDirectory() method
WITHOUT_CLASSIFICATION	//{{{ showFilePopup() method
WITHOUT_CLASSIFICATION	// this vfs has an extended attribute which is not // in the list. add it to the end with a ref count // of 1
WITHOUT_CLASSIFICATION	// this vfs has an extended attribute which is not // in the list ???
WITHOUT_CLASSIFICATION	// we no longer have any // dirs using this extended // attribute
WITHOUT_CLASSIFICATION	//{{{ BrowserView constructor
WITHOUT_CLASSIFICATION	// how deeply we are nested
WITHOUT_CLASSIFICATION	//{{{ clearExpansionState() method
WITHOUT_CLASSIFICATION	//{{{ ExtendedAttribute class
WITHOUT_CLASSIFICATION	//{{{ focusOnFileView() method
WITHOUT_CLASSIFICATION	/* reference counter allows us to remove a column from		 * the table when no directory using this column is		 * visible */
WITHOUT_CLASSIFICATION	//{{{ updateFileView() method
WITHOUT_CLASSIFICATION	//{{{ removeNotify() method
WITHOUT_CLASSIFICATION	//{{{ loadDirectory() method
WITHOUT_CLASSIFICATION	//{{{ selectNone() method
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	//{{{ saveExpansionState() method
WITHOUT_CLASSIFICATION	//{{{ directoryLoaded() method
WITHOUT_CLASSIFICATION	//{{{ getBrowser() method
WITHOUT_CLASSIFICATION	//{{{ If reloading root, update parent directory list
WITHOUT_CLASSIFICATION	// for the parent directory right-click; on the click we select // the clicked item, but when the popup goes away we select the // currently showing directory.
WITHOUT_CLASSIFICATION	//{{{ getTable() method
WITHOUT_CLASSIFICATION	//{{{ getParentDirectoryList() method
WITHOUT_CLASSIFICATION	// we use SwingUtilities.invokeLater() // so that the action is executed before // the popup is hidden.
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ dispose() method
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ processKeyEvent() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ getSelectedFiles() method
WITHOUT_CLASSIFICATION	// so that it doesn't resize...
WITHOUT_CLASSIFICATION	// because this method is called for *every* VFS update, // we don't want to scan the tree all the time. So we // use the following algorithm to determine if the path // might be part of the tree: // - if the path starts with the browser's current directory, //   we do the tree scan // - if the browser's directory is 'favorites:' -- we have to //   do the tree scan, as every path can appear under the //   favorites list // - if the browser's directory is 'roots:' and path is on //   the local filesystem, do a tree scan
WITHOUT_CLASSIFICATION	//{{{ mousePressed() method
WITHOUT_CLASSIFICATION	//{{{ isManagingFocus() method
WITHOUT_CLASSIFICATION	/* nothing */
WITHOUT_CLASSIFICATION	//{{{ doComplete() method
WITHOUT_CLASSIFICATION	//{{{ mouseReleased() method
WITHOUT_CLASSIFICATION	//{{{ getFocusTraversalKeysEnabled() method
WITHOUT_CLASSIFICATION	//{{{ VFSFileNameField constructor
WITHOUT_CLASSIFICATION	//{{{ VFSFileChooserDialog constructor
WITHOUT_CLASSIFICATION	// fix for bug #765507 // we don't type complete in save dialog // boxes. Press TAB to do an explicit // complete
WITHOUT_CLASSIFICATION	// fix for bug #765507 // we don't type complete in save dialog // boxes. Press TAB to do an explicit // complete
WITHOUT_CLASSIFICATION	//{{{ goToParent() method
WITHOUT_CLASSIFICATION	//{{{ BrowserHandler class
WITHOUT_CLASSIFICATION	//{{{ BackspaceAction class
WITHOUT_CLASSIFICATION	/* browser.getBrowserView().getTable().addKeyListener(new KeyHandler()); */
WITHOUT_CLASSIFICATION	//String filename = filenameField.getText();
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ doFileExistsWarning() method
WITHOUT_CLASSIFICATION	//{{{ filesSelected() method
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ handleMessage() method
WITHOUT_CLASSIFICATION	//{{{ getView() method
WITHOUT_CLASSIFICATION	//{{{ getActionContext() method
WITHOUT_CLASSIFICATION	//{{{ getMode() method
WITHOUT_CLASSIFICATION	//{{{ removeNotify() method
WITHOUT_CLASSIFICATION	//{{{ KeyHandler class
WITHOUT_CLASSIFICATION	//{{{ filesActivated() method
WITHOUT_CLASSIFICATION	// non-existent file
WITHOUT_CLASSIFICATION	// user pressed enter when the vfs table or // file name field has focus, with nothing // selected.
WITHOUT_CLASSIFICATION	//{{{ progressUpdate() method
WITHOUT_CLASSIFICATION	//{{{ WorkThreadListener class
WITHOUT_CLASSIFICATION	//{{{ statusUpdate() method
WITHOUT_CLASSIFICATION	//{{{ GetFileTypeRequest class
WITHOUT_CLASSIFICATION	// because its preferred size can be quite wide, we // don't want it to make the browser way too big, // so set the preferred width to 0.
WITHOUT_CLASSIFICATION	//{{{ Browser types
WITHOUT_CLASSIFICATION	//{{{ browseDirectoryInNewWindow() method
WITHOUT_CLASSIFICATION	//{{{ VFSBrowser constructor
WITHOUT_CLASSIFICATION	//{{{ VFSBrowser constructor
WITHOUT_CLASSIFICATION	//{{{ browseDirectory() method
WITHOUT_CLASSIFICATION	// see VFSBrowser.browseDirectory()
WITHOUT_CLASSIFICATION	//{{{ addNotify() method
WITHOUT_CLASSIFICATION	//{{{ focusOnDefaultComponent() method
WITHOUT_CLASSIFICATION	// unknown value??!!!
WITHOUT_CLASSIFICATION	//{{{ isMultipleSelectionEnabled() method
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ newFile() method
WITHOUT_CLASSIFICATION	//{{{ getDirectory() method
WITHOUT_CLASSIFICATION	//{{{ getSelectedFiles() method
WITHOUT_CLASSIFICATION	//{{{ setDirectory() method
WITHOUT_CLASSIFICATION	//{{{ delete() method
WITHOUT_CLASSIFICATION	//{{{ rename() method
WITHOUT_CLASSIFICATION	//{{{ mkdir() method
WITHOUT_CLASSIFICATION	//{{{ directoryLoaded() method
WITHOUT_CLASSIFICATION	//{{{ filesSelected() method
WITHOUT_CLASSIFICATION	// used by FTP plugin to clear directory cache
WITHOUT_CLASSIFICATION	//{{{ isHorizontalLayout() method
WITHOUT_CLASSIFICATION	//{{{ setShowHiddenFiles() method
WITHOUT_CLASSIFICATION	//{{{ getShowHiddenFiles() method
WITHOUT_CLASSIFICATION	//{{{ locateFile() method
WITHOUT_CLASSIFICATION	//{{{ getFilenameFilter() method
WITHOUT_CLASSIFICATION	// if a directory is selected, create new dir in there. // if a file is selected, create new dir inside its parent.
WITHOUT_CLASSIFICATION	//{{{ setFilenameFilter() method
WITHOUT_CLASSIFICATION	//{{{ getDirectoryField() method
WITHOUT_CLASSIFICATION	// path is the currently viewed directory in the browser
WITHOUT_CLASSIFICATION	//{{{ rootDirectory() method
WITHOUT_CLASSIFICATION	//{{{ addBrowserListener() method
WITHOUT_CLASSIFICATION	//{{{ reloadDirectory() method
WITHOUT_CLASSIFICATION	//{{{ searchInDirectory() method
WITHOUT_CLASSIFICATION	//{{{ searchInDirectory() method
WITHOUT_CLASSIFICATION	//{{{ removeBrowserListener() method
WITHOUT_CLASSIFICATION	//{{{ getBrowserView() method
WITHOUT_CLASSIFICATION	//{{{ pathsEqual() method
WITHOUT_CLASSIFICATION	//{{{ updateFilenameFilter() method
WITHOUT_CLASSIFICATION	//{{{ endRequest() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ maybeReloadDirectory() method
WITHOUT_CLASSIFICATION	/* We do this stuff because the browser is not able to handle	 * more than one request yet */
WITHOUT_CLASSIFICATION	// close if this buffer is currently // visible in the view.
WITHOUT_CLASSIFICATION	// if a file is selected in OPEN_DIALOG or // SAVE_DIALOG mode, just let the listener(s) // handle it
WITHOUT_CLASSIFICATION	//{{{ updatePopupMenu() method
WITHOUT_CLASSIFICATION	//{{{ createMenuBar() method
WITHOUT_CLASSIFICATION	//{{{ startRequest() method
WITHOUT_CLASSIFICATION	//{{{ createToolBar() method
WITHOUT_CLASSIFICATION	//Log.log(Log.WARNING,this,"VFS update: request already in progress");
WITHOUT_CLASSIFICATION	//{{{ CommandsMenuButton class
WITHOUT_CLASSIFICATION	// dump stack trace for debugging purposes
WITHOUT_CLASSIFICATION	// save a file -> sends vfs update. if a VFS file dialog box // is shown from the same event frame as the save, the // VFSUpdate will be delivered before the directory is loaded, // and before the path is set.
WITHOUT_CLASSIFICATION	//{{{ updateFilterEnabled() method
WITHOUT_CLASSIFICATION	//{{{ PluginsMenuButton class
WITHOUT_CLASSIFICATION	//{{{ CommandsMenuButton constructor
WITHOUT_CLASSIFICATION	/* we're in a modal dialog */
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ PluginsMenuButton constructor
WITHOUT_CLASSIFICATION	//{{{ createPopupMenu() method
WITHOUT_CLASSIFICATION	//{{{ createPopupMenu() method
WITHOUT_CLASSIFICATION	//{{{ FavoritesMenuButton class
WITHOUT_CLASSIFICATION	//{{{ old API
WITHOUT_CLASSIFICATION	//{{{ DirectoryLoadedAWTRequest class
WITHOUT_CLASSIFICATION	//{{{ new API
WITHOUT_CLASSIFICATION	//{{{ FavoritesMenuButton constructor
WITHOUT_CLASSIFICATION	// This is the new, canonical path
WITHOUT_CLASSIFICATION	// there was an error
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ load() method
WITHOUT_CLASSIFICATION	//Log.log(Log.DEBUG,BufferHistory.class,fnf);
WITHOUT_CLASSIFICATION	/* to avoid data loss, only do this if the above			 * completed successfully */
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	// if any directories are selected, add // them, otherwise add current directory
WITHOUT_CLASSIFICATION	// ensure consistent history; // eg we don't want both // foo/ and foo
WITHOUT_CLASSIFICATION	// to notify listeners that any existing // selection has been deactivated
WITHOUT_CLASSIFICATION	// turns out under some circumstances this // method can switch the current buffer in // BROWSER mode.
WITHOUT_CLASSIFICATION	// in any case, this is only needed for the // directory chooser (why?), so we add a // check. otherwise poor Rick will go insane.
WITHOUT_CLASSIFICATION	//{{{ BrowserActionContext class
WITHOUT_CLASSIFICATION	// in the future we will want something better, // eg. having an 'evt' object passed to // EditAction.invoke().
WITHOUT_CLASSIFICATION	// for now, since all browser actions are // written in beanshell we set the 'browser' // variable directly.
WITHOUT_CLASSIFICATION	// I guess ideally all browsers // should have views, but since they // don't, we just use the active view // in that case, since some actions // depend on a view being there and // I don't want to add checks to // them all
WITHOUT_CLASSIFICATION	//{{{ getListModel() method
WITHOUT_CLASSIFICATION	//{{{ changed() method
WITHOUT_CLASSIFICATION	// compare existing entries' hashcode with this
WITHOUT_CLASSIFICATION	//{{{ add() method
WITHOUT_CLASSIFICATION	// strings might be equal!
WITHOUT_CLASSIFICATION	// no duplicates, check for all-whitespace string
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ read() method
WITHOUT_CLASSIFICATION	// this will result in a slight speed up, since we // don't need to read the DTD anyway, as AElfred is // non-validating
WITHOUT_CLASSIFICATION	//{{{ load() method
WITHOUT_CLASSIFICATION	//{{{ run() method
WITHOUT_CLASSIFICATION	//{{{ remove() method
WITHOUT_CLASSIFICATION	//{{{ KillRingHandler class
WITHOUT_CLASSIFICATION	// we don't want duplicate // entries in the kill ring
WITHOUT_CLASSIFICATION	//{{{ RingListModel class
WITHOUT_CLASSIFICATION	// we don't want duplicate entries // in the kill ring
WITHOUT_CLASSIFICATION	// True if a \n was read after a \r. Usually // means this is a DOS/Windows file
WITHOUT_CLASSIFICATION	//{{{ BufferIORequest constructor
WITHOUT_CLASSIFICATION	//{{{ Constants
WITHOUT_CLASSIFICATION	// auto-detect encoding within the gzip stream.
WITHOUT_CLASSIFICATION	// do not reset the stream and just treat it // like a normal UTF-8 file.
WITHOUT_CLASSIFICATION	/* we guess an initial size for the array */
WITHOUT_CLASSIFICATION	// only true if the file size is known
WITHOUT_CLASSIFICATION	// if the file size is not known, start with a resonable // default buffer size
WITHOUT_CLASSIFICATION	// Number of characters in 'buf' array. // InputStream.read() doesn't always fill the // array (eg, the file size is not a multiple of // IOBUFSIZE, or it is a GZipped file, etc)
WITHOUT_CLASSIFICATION	// A \r was read, hence a MacOS file
WITHOUT_CLASSIFICATION	// Was the previous read character a \r? // If we read a \n and this is true, we assume // we have a DOS/Windows file
WITHOUT_CLASSIFICATION	// If we read a \r and // lastWasCR is also true, // it is probably a Mac file // (\r\r in stream)
WITHOUT_CLASSIFICATION	// Number of lines read. Every 100 lines, we update the // progress bar
WITHOUT_CLASSIFICATION	// Offset of previous line, relative to // the start of the I/O buffer (NOT // relative to the start of the document)
WITHOUT_CLASSIFICATION	// Look for line endings.
WITHOUT_CLASSIFICATION	// Otherwise set a flag, // so that \n knows that last // was a \r
WITHOUT_CLASSIFICATION	// This is i+1 to take the // trailing \n into account
WITHOUT_CLASSIFICATION	// Insert a line
WITHOUT_CLASSIFICATION	// If lastWasCR is true, // we just read a \r followed // by a \n. We specify that // this is a Windows file, // but take no further // action and just ignore // the \r.
WITHOUT_CLASSIFICATION	// Bump lastLine so // that the next line // doesn't erronously // pick up the \r
WITHOUT_CLASSIFICATION	// Otherwise, we found a \n // that follows some other // character, hence we have // a Unix file
WITHOUT_CLASSIFICATION	// If we find some other // character that follows // a \r, so it is not a // Windows file, and probably // a Mac file
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ write() method
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	// For `reload' command
WITHOUT_CLASSIFICATION	//{{{ autosave() method
WITHOUT_CLASSIFICATION	//{{{ insert() method
WITHOUT_CLASSIFICATION	//{{{ undo() method
WITHOUT_CLASSIFICATION	//{{{ redo() method
WITHOUT_CLASSIFICATION	//{{{ beginCompoundEdit() method
WITHOUT_CLASSIFICATION	//{{{ endCompoundEdit() method
WITHOUT_CLASSIFICATION	//{{{ contentInserted() method
WITHOUT_CLASSIFICATION	// Chop trailing newline and/or ^Z (if any)
WITHOUT_CLASSIFICATION	// Add remaining stuff from buffer
WITHOUT_CLASSIFICATION	// the entire save operation can be aborted...
WITHOUT_CLASSIFICATION	// to avoid having to deal with read/write locks and such, // we insert the loaded data into the buffer in the // post-load cleanup runnable, which runs in the AWT thread.
WITHOUT_CLASSIFICATION	/* DOS ^Z */
WITHOUT_CLASSIFICATION	//{{{ readMarkers() method
WITHOUT_CLASSIFICATION	// add a line marker at the end for proper offset manager // operation
WITHOUT_CLASSIFICATION	// used in insert()
WITHOUT_CLASSIFICATION	// the entire save operation can be aborted...
WITHOUT_CLASSIFICATION	/* if the VFS supports renaming files, we first			 * save to #<filename>#save#, then rename that			 * to <filename>, so that if the save fails,			 * data will not be lost.			 *			 * as of 4.1pre7 we now call vfs.getTwoStageSaveName()			 * instead of constructing the path directly			 * since some VFS's might not allow # in filenames.			 */
WITHOUT_CLASSIFICATION	//buffer.readLock();
WITHOUT_CLASSIFICATION	// Only backup once per session
WITHOUT_CLASSIFICATION	// this must be after the stream is created or // we deadlock with SSHTools.
WITHOUT_CLASSIFICATION	// We only save markers to VFS's that support deletion. // Otherwise, we will accumilate stale marks files.
WITHOUT_CLASSIFICATION	// Can't use buffer.getName() here because // it is not changed until the save is // complete
WITHOUT_CLASSIFICATION	//buffer.readUnlock();
WITHOUT_CLASSIFICATION	//{{{ writeMarkers() method
WITHOUT_CLASSIFICATION	// buffer has been saved while we // were waiting.
WITHOUT_CLASSIFICATION	//{{{ setLimit() method
WITHOUT_CLASSIFICATION	// not supported by Java...
WITHOUT_CLASSIFICATION	//{{{ UndoManager constructor
WITHOUT_CLASSIFICATION	/* we don't do this in Buffer.insert() so that				   we can insert multiple files at once */
WITHOUT_CLASSIFICATION	//{{{ clear() method
WITHOUT_CLASSIFICATION	/* nothing done between begin/end calls */
WITHOUT_CLASSIFICATION	//{{{ contentRemoved() method
WITHOUT_CLASSIFICATION	//{{{ bufferSaved() method
WITHOUT_CLASSIFICATION	//{{{ Remove class
WITHOUT_CLASSIFICATION	//{{{ Remove constructor
WITHOUT_CLASSIFICATION	//{{{ Remove constructor
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ undo() method
WITHOUT_CLASSIFICATION	//{{{ undo() method
WITHOUT_CLASSIFICATION	//{{{ undo() method
WITHOUT_CLASSIFICATION	//{{{ undo() method
WITHOUT_CLASSIFICATION	//{{{ undo() method
WITHOUT_CLASSIFICATION	//{{{ undo() method
WITHOUT_CLASSIFICATION	//{{{ undo() method
WITHOUT_CLASSIFICATION	//{{{ undo() method
WITHOUT_CLASSIFICATION	//{{{ redo() method
WITHOUT_CLASSIFICATION	//{{{ redo() method
WITHOUT_CLASSIFICATION	//{{{ redo() method
WITHOUT_CLASSIFICATION	//{{{ redo() method
WITHOUT_CLASSIFICATION	//{{{ redo() method
WITHOUT_CLASSIFICATION	//{{{ redo() method
WITHOUT_CLASSIFICATION	//{{{ redo() method
WITHOUT_CLASSIFICATION	//{{{ redo() method
WITHOUT_CLASSIFICATION	//{{{ add() method
WITHOUT_CLASSIFICATION	//{{{ add() method
WITHOUT_CLASSIFICATION	// queue of undos. last is most recent, first is oldest
WITHOUT_CLASSIFICATION	//{{{ Insert class
WITHOUT_CLASSIFICATION	// queue of redos. first is most recent, last is oldest
WITHOUT_CLASSIFICATION	//{{{ addEdit() method
WITHOUT_CLASSIFICATION	//{{{ Insert constructor
WITHOUT_CLASSIFICATION	//{{{ getMergeEdit() method
WITHOUT_CLASSIFICATION	//{{{ Insert constructor
WITHOUT_CLASSIFICATION	//{{{ getLastEdit() method
WITHOUT_CLASSIFICATION	//{{{ Edit class
WITHOUT_CLASSIFICATION	//{{{ CompoundEdit class
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ equals() method
WITHOUT_CLASSIFICATION	//{{{ createPosition() method
WITHOUT_CLASSIFICATION	//{{{ getName() method
WITHOUT_CLASSIFICATION	//{{{ finalize() method
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ contentInserted() method
WITHOUT_CLASSIFICATION	//{{{ contentInserted() method
WITHOUT_CLASSIFICATION	//{{{ contentRemoved() method
WITHOUT_CLASSIFICATION	//{{{ contentRemoved() method
WITHOUT_CLASSIFICATION	/* get all positions from offset to the end, inclusive */
WITHOUT_CLASSIFICATION	/* get all positions from offset to the end, inclusive */
WITHOUT_CLASSIFICATION	//{{{ PosTopHalf class
WITHOUT_CLASSIFICATION	//{{{ unref() method
WITHOUT_CLASSIFICATION	//{{{ PosTopHalf constructor
WITHOUT_CLASSIFICATION	//{{{ foldHandlerChanged() method
WITHOUT_CLASSIFICATION	//{{{ getOffset() method
WITHOUT_CLASSIFICATION	//{{{ compareTo() method
WITHOUT_CLASSIFICATION	//{{{ PosBottomHalf class
WITHOUT_CLASSIFICATION	//{{{ getStartOffset() method
WITHOUT_CLASSIFICATION	//{{{ PosBottomHalf constructor
WITHOUT_CLASSIFICATION	//{{{ foldLevelChanged() method
WITHOUT_CLASSIFICATION	//{{{ ref() method
WITHOUT_CLASSIFICATION	//{{{ LineElement constructor
WITHOUT_CLASSIFICATION	//{{{ preContentRemoved() method
WITHOUT_CLASSIFICATION	//{{{ transactionComplete() method
WITHOUT_CLASSIFICATION	//{{{ getDocument() method
WITHOUT_CLASSIFICATION	//{{{ getEndOffset() method
WITHOUT_CLASSIFICATION	//{{{ getParentElement() method
WITHOUT_CLASSIFICATION	//{{{ getAttributes() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ getLength() method
WITHOUT_CLASSIFICATION	//{{{ getLineCount() method
WITHOUT_CLASSIFICATION	//{{{ getLineOfOffset() method
WITHOUT_CLASSIFICATION	//{{{ getLineEndOffset() method
WITHOUT_CLASSIFICATION	//{{{ getText() method
WITHOUT_CLASSIFICATION	//{{{ getText() method
WITHOUT_CLASSIFICATION	//{{{ insert() method
WITHOUT_CLASSIFICATION	//{{{ insert() method
WITHOUT_CLASSIFICATION	//{{{ remove() method
WITHOUT_CLASSIFICATION	//{{{ getFoldLevel() method
WITHOUT_CLASSIFICATION	//{{{ getFoldLevel() method
WITHOUT_CLASSIFICATION	//{{{ getFoldLevel() method
WITHOUT_CLASSIFICATION	// copy text after gap
WITHOUT_CLASSIFICATION	//{{{ getElementIndex() method
WITHOUT_CLASSIFICATION	//{{{ getScreenLineCount() method
WITHOUT_CLASSIFICATION	//{{{ getElementCount() method
WITHOUT_CLASSIFICATION	//{{{ _setContent() method
WITHOUT_CLASSIFICATION	//{{{ getElement() method
WITHOUT_CLASSIFICATION	// limitations...
WITHOUT_CLASSIFICATION	//{{{ isLeaf() method
WITHOUT_CLASSIFICATION	//{{{ moveGapStart() method
WITHOUT_CLASSIFICATION	//{{{ ExplicitFoldHandler constructor
WITHOUT_CLASSIFICATION	// limitations...
WITHOUT_CLASSIFICATION	// copy text before gap
WITHOUT_CLASSIFICATION	//{{{ moveGapEnd() method
WITHOUT_CLASSIFICATION	//{{{ setFirstInvalidFoldLevel() method
WITHOUT_CLASSIFICATION	//{{{ DummyFoldHandler constructor
WITHOUT_CLASSIFICATION	//{{{ setScreenLineCount() method
WITHOUT_CLASSIFICATION	//{{{ LineManager constructor
WITHOUT_CLASSIFICATION	//{{{ getFirstInvalidFoldLevel() method
WITHOUT_CLASSIFICATION	//{{{ isScreenLineCountValid() method
WITHOUT_CLASSIFICATION	//{{{ getLineContext() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ equals() method
WITHOUT_CLASSIFICATION	//{{{ getName() method
WITHOUT_CLASSIFICATION	//{{{ getFoldLevel() method
WITHOUT_CLASSIFICATION	//{{{ getFoldHandler() method
WITHOUT_CLASSIFICATION	//{{{ contentInserted() method
WITHOUT_CLASSIFICATION	//{{{ contentInserted() method
WITHOUT_CLASSIFICATION	//{{{ contentRemoved() method
WITHOUT_CLASSIFICATION	//{{{ contentRemoved() method
WITHOUT_CLASSIFICATION	//{{{ foldLevelChanged() method
WITHOUT_CLASSIFICATION	//{{{ preContentRemoved() method
WITHOUT_CLASSIFICATION	//{{{ transactionComplete() method
WITHOUT_CLASSIFICATION	//{{{ foldHandlerChanged() method
WITHOUT_CLASSIFICATION	//{{{ Update line info and line context arrays
WITHOUT_CLASSIFICATION	//{{{ setLineContext() method
WITHOUT_CLASSIFICATION	//{{{ Update line info and line context arrays
WITHOUT_CLASSIFICATION	//{{{ setFirstInvalidLineContext() method
WITHOUT_CLASSIFICATION	//{{{ getFirstInvalidLineContext() method
WITHOUT_CLASSIFICATION	//moveGap(-1,0,"contentInserted");
WITHOUT_CLASSIFICATION	//{{{ invalidateScreenLineCounts() method
WITHOUT_CLASSIFICATION	//{{{ setLineEndOffset() method
WITHOUT_CLASSIFICATION	//{{{ _contentInserted() method
WITHOUT_CLASSIFICATION	/* Having all the info packed into an int is not very OO and makes the	 * code somewhat more complicated, but it saves a lot of memory.	 *	 * The new document model has just 12 bytes of overhead per line.	 * LineContext instances are now internalized, so only a few should	 * actually be in the heap.	 *	 * In the old document model there were 5 objects per line, for a	 * total of about 100 bytes, plus a cached token list, which used	 * another 100 or so bytes. */
WITHOUT_CLASSIFICATION	//moveGap(-1,0,"contentRemoved");
WITHOUT_CLASSIFICATION	//{{{ registerFoldHandler() method
WITHOUT_CLASSIFICATION	//{{{ moveGap() method
WITHOUT_CLASSIFICATION	//{{{ unregisterFoldHandler() method
WITHOUT_CLASSIFICATION	// Default implementation... subclasses can extend this.
WITHOUT_CLASSIFICATION	//{{{ getFoldHandlers() method
WITHOUT_CLASSIFICATION	//{{{ hashCode() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ start() method
WITHOUT_CLASSIFICATION	//{{{ invoke() method
WITHOUT_CLASSIFICATION	//{{{ stop() method
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ getIcon() method
WITHOUT_CLASSIFICATION	//{{{ getFoldLevel() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	// if 'temp' is true, hide search bar after user is done with it
WITHOUT_CLASSIFICATION	//{{{ getFoldModes() method
WITHOUT_CLASSIFICATION	// empty line. inherit previous line's fold level
WITHOUT_CLASSIFICATION	//{{{ FoldHandler() constructor
WITHOUT_CLASSIFICATION	//{{{ getExpansion() method
WITHOUT_CLASSIFICATION	//{{{ Static initializer
WITHOUT_CLASSIFICATION	//{{{ AnimatedIcon constructor
WITHOUT_CLASSIFICATION	//{{{ getFrames() method
WITHOUT_CLASSIFICATION	//{{{ setExpansion() method
WITHOUT_CLASSIFICATION	//{{{ getRate() method
WITHOUT_CLASSIFICATION	//{{{ getField() method
WITHOUT_CLASSIFICATION	//{{{ setFrames() method
WITHOUT_CLASSIFICATION	//{{{ getAbbrevField() method
WITHOUT_CLASSIFICATION	//{{{ setIcon() method
WITHOUT_CLASSIFICATION	//{{{ setRate() method
WITHOUT_CLASSIFICATION	//{{{ getBeforeCaretTextArea() method
WITHOUT_CLASSIFICATION	//{{{ goToActionBar() method
WITHOUT_CLASSIFICATION	//{{{ getAfterCaretTextArea() method
WITHOUT_CLASSIFICATION	//{{{ ActionBar constructor
WITHOUT_CLASSIFICATION	/* construct a BeanShell snippet instead of				 * invoking directly so that user can record				 * property changes in macros. */
WITHOUT_CLASSIFICATION	//{{{ getCompletions() method
WITHOUT_CLASSIFICATION	//{{{ complete() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	// protected members
WITHOUT_CLASSIFICATION	//{{{ isOK() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ KeyHandler class
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ changedUpdate() method
WITHOUT_CLASSIFICATION	//{{{ DocumentHandler class
WITHOUT_CLASSIFICATION	//{{{ insertUpdate() method
WITHOUT_CLASSIFICATION	//{{{ ActionTextField class
WITHOUT_CLASSIFICATION	//{{{ removeUpdate() method
WITHOUT_CLASSIFICATION	//{{{ setModel() method
WITHOUT_CLASSIFICATION	//{{{ TipOfTheDay constructor
WITHOUT_CLASSIFICATION	//{{{ CompletionPopup class
WITHOUT_CLASSIFICATION	//{{{ CompletionList class
WITHOUT_CLASSIFICATION	//{{{ CompletionPopup constructor
WITHOUT_CLASSIFICATION	// we need this public not protected
WITHOUT_CLASSIFICATION	// Recursively adds our key listener to sub-components
WITHOUT_CLASSIFICATION	//{{{ nextTip() method
WITHOUT_CLASSIFICATION	//{{{ SelectLineRange constructor
WITHOUT_CLASSIFICATION	//{{{ createFieldPanel() method
WITHOUT_CLASSIFICATION	//{{{ CloseDialog constructor
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ dispose() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ getCompletions() method
WITHOUT_CLASSIFICATION	//{{{ getCompletions() method
WITHOUT_CLASSIFICATION	// only set if all buffers saved/closed
WITHOUT_CLASSIFICATION	// so that we don't see the same tip again if the user // clicks 'Next Tip'
WITHOUT_CLASSIFICATION	//{{{ completeWord() method
WITHOUT_CLASSIFICATION	// do nothing //}}}
WITHOUT_CLASSIFICATION	//{{{ completeWord() method
WITHOUT_CLASSIFICATION	//{{{ ListHandler class
WITHOUT_CLASSIFICATION	//{{{ CompleteWord constructor
WITHOUT_CLASSIFICATION	//}}} //{{{ show popup if > 1
WITHOUT_CLASSIFICATION	//{{{ if there is only one competion, insert in buffer
WITHOUT_CLASSIFICATION	// attempting to expand non-word char
WITHOUT_CLASSIFICATION	// figure out what constitutes a word character and what // doesn't
WITHOUT_CLASSIFICATION	//{{{ getNonAlphaNumericWordChars() method
WITHOUT_CLASSIFICATION	//{{{ getWordToComplete() method
WITHOUT_CLASSIFICATION	// build a list of unique words in all visible buffers
WITHOUT_CLASSIFICATION	// only complete current buffer's keyword map
WITHOUT_CLASSIFICATION	// only complete current buffer's keyword map
WITHOUT_CLASSIFICATION	//{{{ try to find matching keywords
WITHOUT_CLASSIFICATION	//{{{ loop through all lines of current buffer
WITHOUT_CLASSIFICATION	// check for match at start of line
WITHOUT_CLASSIFICATION	// check for match inside line
WITHOUT_CLASSIFICATION	// '+ 1' so that findWordEnd() doesn't pick up the space at the start
WITHOUT_CLASSIFICATION	//{{{ insertSelected() method
WITHOUT_CLASSIFICATION	//{{{ Completion class
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ setMessageAndClear() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ removeNotify() method
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ statusUpdate() method
WITHOUT_CLASSIFICATION	//{{{ progressUpdate() method
WITHOUT_CLASSIFICATION	//{{{ addNotify() method
WITHOUT_CLASSIFICATION	//UIManager.getFont("Label.font");
WITHOUT_CLASSIFICATION	//{{{ updateCaption() method
WITHOUT_CLASSIFICATION	//{{{ ThreadProgress constructor
WITHOUT_CLASSIFICATION	//{{{ WorkThreadHandler class
WITHOUT_CLASSIFICATION	//{{{ StatusBar constructor
WITHOUT_CLASSIFICATION	//{{{ ThreadProgress class
WITHOUT_CLASSIFICATION	//System.err.println("value: " + thread.getProgressValue());
WITHOUT_CLASSIFICATION	//{{{ setMessageComponent() method
WITHOUT_CLASSIFICATION	//{{{ TextAreaDialog constructor
WITHOUT_CLASSIFICATION	//{{{ TextAreaDialog constructor
WITHOUT_CLASSIFICATION	//{{{ TextAreaDialog constructor
WITHOUT_CLASSIFICATION	//{{{ TextAreaDialog constructor
WITHOUT_CLASSIFICATION	//{{{ WorkThreadListener implementation
WITHOUT_CLASSIFICATION	// so if view is closed in the meantime...
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	// don't obscure existing message
WITHOUT_CLASSIFICATION	//{{{ updateCaretStatus() method
WITHOUT_CLASSIFICATION	//{{{ setMessage() method
WITHOUT_CLASSIFICATION	/* can happen when switching buffers sometimes */
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ paintComponent() method
WITHOUT_CLASSIFICATION	//{{{ removeNotify() method
WITHOUT_CLASSIFICATION	//{{{ removeNotify() method
WITHOUT_CLASSIFICATION	//{{{ addNotify() method
WITHOUT_CLASSIFICATION	//{{{ addNotify() method
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	// hopefully another caret update will come?
WITHOUT_CLASSIFICATION	//{{{ ToolTipLabel class
WITHOUT_CLASSIFICATION	// see above
WITHOUT_CLASSIFICATION	//{{{ updateMiscStatus() method
WITHOUT_CLASSIFICATION	//{{{ updateBufferStatus() method
WITHOUT_CLASSIFICATION	//{{{ MemoryStatus class
WITHOUT_CLASSIFICATION	//{{{ getToolTipLocation() method
WITHOUT_CLASSIFICATION	/* package-private for speed */
WITHOUT_CLASSIFICATION	//{{{ getToolTipText() method
WITHOUT_CLASSIFICATION	//{{{ getToolTipLocation() method
WITHOUT_CLASSIFICATION	//{{{ getToolTipLocation() method
WITHOUT_CLASSIFICATION	//{{{ MemoryStatus constructor
WITHOUT_CLASSIFICATION	//{{{ getToolTipText() method
WITHOUT_CLASSIFICATION	//Font font = UIManager.getFont("Label.font");
WITHOUT_CLASSIFICATION	//{{{ Clock class
WITHOUT_CLASSIFICATION	//MemoryStatus.this.getBorder().getBorderInsets(this);
WITHOUT_CLASSIFICATION	/* FontRenderContext frc = new FontRenderContext(				null,false,false);			Rectangle2D bounds = getFont()				.getStringBounds(getTime(),frc);			Dimension dim = new Dimension((int)bounds.getWidth(),				(int)bounds.getHeight());			setPreferredSize(dim);			setMaximumSize(dim); */
WITHOUT_CLASSIFICATION	//{{{ Clock constructor
WITHOUT_CLASSIFICATION	//{{{ getTime() method
WITHOUT_CLASSIFICATION	//{{{ HistoryTextField constructor
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ paintComponent() method
WITHOUT_CLASSIFICATION	//{{{ removeNotify() method
WITHOUT_CLASSIFICATION	//{{{ removeNotify() method
WITHOUT_CLASSIFICATION	//{{{ addNotify() method
WITHOUT_CLASSIFICATION	//{{{ addNotify() method
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ getToolTipLocation() method
WITHOUT_CLASSIFICATION	//{{{ getToolTipLocation() method
WITHOUT_CLASSIFICATION	//{{{ getToolTipLocation() method
WITHOUT_CLASSIFICATION	//{{{ MemoryStatus constructor
WITHOUT_CLASSIFICATION	//{{{ setSelectAllOnFocus() method
WITHOUT_CLASSIFICATION	//Font font = UIManager.getFont("Label.font");
WITHOUT_CLASSIFICATION	//{{{ getToolTipText() method
WITHOUT_CLASSIFICATION	//{{{ getToolTipText() method
WITHOUT_CLASSIFICATION	//MemoryStatus.this.getBorder().getBorderInsets(this);
WITHOUT_CLASSIFICATION	//{{{ Clock constructor
WITHOUT_CLASSIFICATION	/* FontRenderContext frc = new FontRenderContext(				null,false,false);			Rectangle2D bounds = getFont()				.getStringBounds(getTime(),frc);			Dimension dim = new Dimension((int)bounds.getWidth(),				(int)bounds.getHeight());			setPreferredSize(dim);			setMaximumSize(dim); */
WITHOUT_CLASSIFICATION	//{{{ getTime() method
WITHOUT_CLASSIFICATION	//{{{ HistoryTextField constructor
WITHOUT_CLASSIFICATION	//{{{ HistoryTextField constructor
WITHOUT_CLASSIFICATION	//{{{ HistoryTextField constructor
WITHOUT_CLASSIFICATION	//{{{ setInstantPopups() method
WITHOUT_CLASSIFICATION	//{{{ getInstantPopups() method
WITHOUT_CLASSIFICATION	//{{{ getSelectAllOnFocus() method
WITHOUT_CLASSIFICATION	//{{{ setEnterAddsToHistory() method
WITHOUT_CLASSIFICATION	//{{{ getEnterAddsToHistory() method
WITHOUT_CLASSIFICATION	//{{{ getModel() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ showPopupMenu() method
WITHOUT_CLASSIFICATION	//{{{ showPopupMenu() method
WITHOUT_CLASSIFICATION	//{{{ Protected members
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ processKeyEvent() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ mousePressed() method
WITHOUT_CLASSIFICATION	//{{{ mouseReleased() method
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ setModel() method
WITHOUT_CLASSIFICATION	//{{{ historyPrevious() method
WITHOUT_CLASSIFICATION	//{{{ addCurrentToHistory() method
WITHOUT_CLASSIFICATION	//{{{ processMouseEvent() method
WITHOUT_CLASSIFICATION	//{{{ setText() method
WITHOUT_CLASSIFICATION	//{{{ mouseMoved() method
WITHOUT_CLASSIFICATION	//{{{ fireActionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ doBackwardSearch() method
WITHOUT_CLASSIFICATION	// have to do this because setText() sets index to -1
WITHOUT_CLASSIFICATION	//{{{ doForwardSearch() method
WITHOUT_CLASSIFICATION	// down arrow
WITHOUT_CLASSIFICATION	// have to do this because setText() sets index to -1
WITHOUT_CLASSIFICATION	//{{{ mouseDragged() method
WITHOUT_CLASSIFICATION	//{{{ historyNext() method
WITHOUT_CLASSIFICATION	//{{{ ColorWellButton constructor
WITHOUT_CLASSIFICATION	//{{{ HistoryBorder class
WITHOUT_CLASSIFICATION	// according to krisk this looks better on OS X...
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ processKeyEvent() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ Renderer class
WITHOUT_CLASSIFICATION	/* we don't handle key pressed A+ */
WITHOUT_CLASSIFICATION	//{{{ getSelectedColor() method
WITHOUT_CLASSIFICATION	//{{{ ColorPickerDialog class
WITHOUT_CLASSIFICATION	//{{{ setSelectedColor() method
WITHOUT_CLASSIFICATION	//}}} //{{{ KEY_TYPED...
WITHOUT_CLASSIFICATION	//{{{ ColorWell class
WITHOUT_CLASSIFICATION	//{{{ KEY_PRESSED...
WITHOUT_CLASSIFICATION	/* they're too troublesome */
WITHOUT_CLASSIFICATION	// get rid of keys we never need to handle
WITHOUT_CLASSIFICATION	// need to let \b through so that backspace will work // in HistoryTextFields
WITHOUT_CLASSIFICATION	/* case KeyEvent.VK_SEPARATOR: */
WITHOUT_CLASSIFICATION	//{{{ updateButtons() method
WITHOUT_CLASSIFICATION	// if the last key was a numeric keypad key // and NumLock is off, filter it out
WITHOUT_CLASSIFICATION	//{{{ PasteFromListDialog constructor
WITHOUT_CLASSIFICATION	//{{{ numericKeypadKey() method
WITHOUT_CLASSIFICATION	//{{{ getSelectedClipText()
WITHOUT_CLASSIFICATION	//{{{ showClipText() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ reload() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ ListHandler class
WITHOUT_CLASSIFICATION	//{{{ Renderer class
WITHOUT_CLASSIFICATION	//{{{ InputHandler constructor
WITHOUT_CLASSIFICATION	//{{{ selectAll() method
WITHOUT_CLASSIFICATION	//{{{ valueChanged() method
WITHOUT_CLASSIFICATION	//{{{ isPrefixActive() method
WITHOUT_CLASSIFICATION	// for ABI compatibility
WITHOUT_CLASSIFICATION	// is it a header?
WITHOUT_CLASSIFICATION	//{{{ FilesChangedDialog constructor
WITHOUT_CLASSIFICATION	//{{{ addKeyBinding() method
WITHOUT_CLASSIFICATION	//{{{ updateEnabled() method
WITHOUT_CLASSIFICATION	// remove empty category branches
WITHOUT_CLASSIFICATION	//{{{ addKeyBinding() method
WITHOUT_CLASSIFICATION	// selected a header; skip to the next row
WITHOUT_CLASSIFICATION	//{{{ getLastAction() method
WITHOUT_CLASSIFICATION	//{{{ TreeHandler class
WITHOUT_CLASSIFICATION	//{{{ handleKey() method
WITHOUT_CLASSIFICATION	//{{{ removeKeyBinding() method
WITHOUT_CLASSIFICATION	//{{{ removeAllKeyBindings() method
WITHOUT_CLASSIFICATION	//{{{ getLastActionCount() method
WITHOUT_CLASSIFICATION	//{{{ getRepeatCount() method
WITHOUT_CLASSIFICATION	//{{{ setRepeatCount() method
WITHOUT_CLASSIFICATION	//{{{ readNextChar() method
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Protected members
WITHOUT_CLASSIFICATION	//{{{ Entry class
WITHOUT_CLASSIFICATION	//{{{ invokeAction() method
WITHOUT_CLASSIFICATION	//{{{ invokeAction() method
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ setModel() method
WITHOUT_CLASSIFICATION	//{{{ setModel() method
WITHOUT_CLASSIFICATION	//{{{ selectAll() method
WITHOUT_CLASSIFICATION	//{{{ readNextChar() method
WITHOUT_CLASSIFICATION	/* value */
WITHOUT_CLASSIFICATION	//{{{ resetLastActionCount() method
WITHOUT_CLASSIFICATION	// If repeat was true originally, clear it // Otherwise it might have been set by the action, etc
WITHOUT_CLASSIFICATION	// remember the last executed action
WITHOUT_CLASSIFICATION	//{{{ invokeReadNextChar() method
WITHOUT_CLASSIFICATION	// remember old values, in case action changes them
WITHOUT_CLASSIFICATION	// first of all, if this action set a // readNextChar, do not clear the repeat
WITHOUT_CLASSIFICATION	// execute the action
WITHOUT_CLASSIFICATION	//{{{ getValues() method
WITHOUT_CLASSIFICATION	// stop people doing dumb stuff like C+ENTER 100 C+n
WITHOUT_CLASSIFICATION	// stop people doing dumb stuff like C+ENTER 100 C+n
WITHOUT_CLASSIFICATION	//{{{ invokeLastAction() method
WITHOUT_CLASSIFICATION	// this might be a bit slow if __char__ occurs a lot
WITHOUT_CLASSIFICATION	//{{{ userInput() method
WITHOUT_CLASSIFICATION	//{{{ JCheckBoxList constructor
WITHOUT_CLASSIFICATION	//{{{ JCheckBoxList constructor
WITHOUT_CLASSIFICATION	//{{{ getSelectedValue() method
WITHOUT_CLASSIFICATION	//{{{ getCheckedValues() method
WITHOUT_CLASSIFICATION	/* hasFocus */
WITHOUT_CLASSIFICATION	//{{{ getCellRenderer() method
WITHOUT_CLASSIFICATION	//{{{ DummyRenderer class
WITHOUT_CLASSIFICATION	//{{{ LabelRenderer class
WITHOUT_CLASSIFICATION	//{{{ AboutDialog constructor
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	// can't happen
WITHOUT_CLASSIFICATION	//{{{ invoke() method
WITHOUT_CLASSIFICATION	//{{{ load() method
WITHOUT_CLASSIFICATION	//{{{ resolveEntity() method
WITHOUT_CLASSIFICATION	//{{{ attribute() method
WITHOUT_CLASSIFICATION	//{{{ doctypeDecl() method
WITHOUT_CLASSIFICATION	//{{{ charData() method
WITHOUT_CLASSIFICATION	//{{{ startElement() method
WITHOUT_CLASSIFICATION	//{{{ endElement() method
WITHOUT_CLASSIFICATION	//{{{ startDocument() method
WITHOUT_CLASSIFICATION	//{{{ pushElement() method
WITHOUT_CLASSIFICATION	//{{{ peekElement() method
WITHOUT_CLASSIFICATION	//{{{ popElement() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ Constants
WITHOUT_CLASSIFICATION	//{{{ createDockableWindow() method
WITHOUT_CLASSIFICATION	//{{{ AboutPanel class
WITHOUT_CLASSIFICATION	//{{{ cacheDockableWindows() method
WITHOUT_CLASSIFICATION	//{{{ Static part of class
WITHOUT_CLASSIFICATION	//{{{ getCachedDockableNames() method
WITHOUT_CLASSIFICATION	//{{{ loadDockableWindows() method
WITHOUT_CLASSIFICATION	//{{{ registerDockableWindow() method
WITHOUT_CLASSIFICATION	//{{{ unloadDockableWindows() method
WITHOUT_CLASSIFICATION	//{{{ getRegisteredDockableWindows() method
WITHOUT_CLASSIFICATION	//{{{ getCachedDockableActionFlags() method
WITHOUT_CLASSIFICATION	//{{{ DockableListHandler class
WITHOUT_CLASSIFICATION	//{{{ OpenAction class
WITHOUT_CLASSIFICATION	//{{{ DockableListHandler constructor
WITHOUT_CLASSIFICATION	//{{{ Factory class
WITHOUT_CLASSIFICATION	//{{{ Factory constructor
WITHOUT_CLASSIFICATION	//{{{ OpenAction constructor
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ invoke() method
WITHOUT_CLASSIFICATION	//{{{ invoke() method
WITHOUT_CLASSIFICATION	//{{{ getCode() method
WITHOUT_CLASSIFICATION	//{{{ getCode() method
WITHOUT_CLASSIFICATION	//{{{ getCode() method
WITHOUT_CLASSIFICATION	//}}} //}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ getView() method
WITHOUT_CLASSIFICATION	//{{{ isSelected() method
WITHOUT_CLASSIFICATION	//{{{ Static initializer
WITHOUT_CLASSIFICATION	//{{{ showDockableWindow() method
WITHOUT_CLASSIFICATION	// make default be true for the next // action
WITHOUT_CLASSIFICATION	//{{{ Instance part of class
WITHOUT_CLASSIFICATION	//{{{ ToggleAction class
WITHOUT_CLASSIFICATION	//{{{ removeDockableWindow() method
WITHOUT_CLASSIFICATION	//{{{ ToggleAction constructor
WITHOUT_CLASSIFICATION	//{{{ DockableWindowManager constructor
WITHOUT_CLASSIFICATION	//{{{ FloatAction class
WITHOUT_CLASSIFICATION	/* an error occurred */
WITHOUT_CLASSIFICATION	//{{{ FloatAction constructor
WITHOUT_CLASSIFICATION	//{{{ floatDockableWindow() method
WITHOUT_CLASSIFICATION	//{{{ closeCurrentArea() method
WITHOUT_CLASSIFICATION	// create a copy of this dockable window and float it
WITHOUT_CLASSIFICATION	//{{{ toggleDockableWindow() method
WITHOUT_CLASSIFICATION	//{{{ addDockableWindow() method
WITHOUT_CLASSIFICATION	//{{{ getDockableTitle() method
WITHOUT_CLASSIFICATION	//{{{ hideDockableWindow() method
WITHOUT_CLASSIFICATION	//{{{ getDockableWindow() method
WITHOUT_CLASSIFICATION	//{{{ isDockableWindowVisible() method
WITHOUT_CLASSIFICATION	//{{{ getDockable() method
WITHOUT_CLASSIFICATION	//System.err.println(comp.getClass());
WITHOUT_CLASSIFICATION	//{{{ isDockableWindowDocked() method
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ handleMessage() method
WITHOUT_CLASSIFICATION	//{{{ addEntry() method
WITHOUT_CLASSIFICATION	//{{{ getTopDockingArea() method
WITHOUT_CLASSIFICATION	// we don't care
WITHOUT_CLASSIFICATION	//{{{ close() method
WITHOUT_CLASSIFICATION	//{{{ createPopupMenu() method
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	//{{{ getLeftDockingArea() method
WITHOUT_CLASSIFICATION	//{{{ getAllPluginEntries() method
WITHOUT_CLASSIFICATION	//{{{ setResizePos() method
WITHOUT_CLASSIFICATION	//{{{ getBottomDockingArea() method
WITHOUT_CLASSIFICATION	//{{{ getRightDockingArea() method
WITHOUT_CLASSIFICATION	//{{{ finishResizing() method
WITHOUT_CLASSIFICATION	//{{{ paintChildren() method
WITHOUT_CLASSIFICATION	//{{{ DockableLayout class
WITHOUT_CLASSIFICATION	// don't show menu items to dock into a plain view
WITHOUT_CLASSIFICATION	//{{{ addLayoutComponent() method
WITHOUT_CLASSIFICATION	/* nothing to do */
WITHOUT_CLASSIFICATION	//{{{ preferredLayoutSize() method
WITHOUT_CLASSIFICATION	//{{{ addLayoutComponent() method
WITHOUT_CLASSIFICATION	//{{{ Lay out dependent buttons
WITHOUT_CLASSIFICATION	//{{{ removeLayoutComponent() method
WITHOUT_CLASSIFICATION	//{{{ maximumLayoutSize() method
WITHOUT_CLASSIFICATION	//{{{ minimumLayoutSize() method
WITHOUT_CLASSIFICATION	//{{{ layoutContainer() method
WITHOUT_CLASSIFICATION	//{{{ Lay out docking areas
WITHOUT_CLASSIFICATION	//{{{ Lay out independent buttons
WITHOUT_CLASSIFICATION	// I'm lazy
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ Entry class
WITHOUT_CLASSIFICATION	//{{{ Lay out independent buttons
WITHOUT_CLASSIFICATION	//{{{ Lay out dependent buttons
WITHOUT_CLASSIFICATION	//{{{ Lay out docking areas
WITHOUT_CLASSIFICATION	//{{{ Position tool bars if they are managed by us
WITHOUT_CLASSIFICATION	//{{{ Position center (edit pane, or split pane)
WITHOUT_CLASSIFICATION	//{{{ adjustDockingAreasToFit() method
WITHOUT_CLASSIFICATION	//{{{ getLayoutAlignmentX() method
WITHOUT_CLASSIFICATION	//{{{ getLayoutAlignmentY() method
WITHOUT_CLASSIFICATION	//{{{ invalidateLayout() method
WITHOUT_CLASSIFICATION	// only set if open
WITHOUT_CLASSIFICATION	// only for docked
WITHOUT_CLASSIFICATION	//{{{ Entry constructor
WITHOUT_CLASSIFICATION	//{{{ Entry constructor
WITHOUT_CLASSIFICATION	// get the title here, not in the factory constructor, // since the factory might be created before a plugin's // props are loaded
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ getShortcut() method
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ processKeyEvent() method
WITHOUT_CLASSIFICATION	//{{{ processKeyEvent() method
WITHOUT_CLASSIFICATION	//{{{ isOK() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ isManagingFocus() method
WITHOUT_CLASSIFICATION	//{{{ getFocusTraversalKeysEnabled() method
WITHOUT_CLASSIFICATION	//{{{ getFocusTraversalKeysEnabled() method
WITHOUT_CLASSIFICATION	// eg, trying to bind C+n C+p if C+n already bound
WITHOUT_CLASSIFICATION	//{{{ GrabKeyDialog constructor
WITHOUT_CLASSIFICATION	//{{{ GrabKeyDialog constructor
WITHOUT_CLASSIFICATION	//{{{ Instance variables // this is a bad hack
WITHOUT_CLASSIFICATION	// show "remove" button
WITHOUT_CLASSIFICATION	// create a panel with a BoxLayout. Can't use Box here // because Box doesn't have setBorder().
WITHOUT_CLASSIFICATION	//{{{ updateAssignedTo() method
WITHOUT_CLASSIFICATION	//{{{ getSymbolicName() method
WITHOUT_CLASSIFICATION	// create a temporary (synthetic) prefix // KeyBinding, that won't be saved
WITHOUT_CLASSIFICATION	//{{{ getKeyBinding() method
WITHOUT_CLASSIFICATION	//{{{ InputPane class
WITHOUT_CLASSIFICATION	// eg, trying to bind C+e if C+e is a prefix
WITHOUT_CLASSIFICATION	// ask whether to remove the old shortcut
WITHOUT_CLASSIFICATION	//{{{ KeyBinding class
WITHOUT_CLASSIFICATION	// we don't need two identical shortcuts
WITHOUT_CLASSIFICATION	//{{{ canClose() method
WITHOUT_CLASSIFICATION	// check whether the other shortcut is the alt. shortcut
WITHOUT_CLASSIFICATION	// check whether this shortcut already exists
WITHOUT_CLASSIFICATION	// check whether shortcut is a prefix to others
WITHOUT_CLASSIFICATION	// can't override prefix shortcuts
WITHOUT_CLASSIFICATION	// ask whether to override that other shortcut
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	// Pass 1: compute preferred row heights / column widths
WITHOUT_CLASSIFICATION	// Pass 2: redistribute free space
WITHOUT_CLASSIFICATION	// Pass 3: layout components
WITHOUT_CLASSIFICATION	// synchronized
WITHOUT_CLASSIFICATION	//{{{ dispose() method
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ Protected members
WITHOUT_CLASSIFICATION	//{{{ addOptionGroup() method
WITHOUT_CLASSIFICATION	//{{{ addOptionPane() method
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ valueChanged() method
WITHOUT_CLASSIFICATION	// in case saved geometry is too small
WITHOUT_CLASSIFICATION	//{{{ OptionsDialog constructor
WITHOUT_CLASSIFICATION	//{{{ OptionsDialog constructor
WITHOUT_CLASSIFICATION	// Save settings to disk
WITHOUT_CLASSIFICATION	/* This will fire the PROPERTIES_CHANGED event */
WITHOUT_CLASSIFICATION	// register the Options dialog as a TreeSelectionListener. // this is done before the initial selection to ensure that the // first selected OptionPane is displayed on startup.
WITHOUT_CLASSIFICATION	// get rid of this dialog if necessary
WITHOUT_CLASSIFICATION	//{{{ updateSize() method
WITHOUT_CLASSIFICATION	//{{{ OptionTreeModel class
WITHOUT_CLASSIFICATION	//{{{ selectPane() method
WITHOUT_CLASSIFICATION	//{{{ selectPane() method
WITHOUT_CLASSIFICATION	//{{{ PaneNameRenderer class
WITHOUT_CLASSIFICATION	// this model may not be changed by the TableCellEditor
WITHOUT_CLASSIFICATION	//{{{ BufferOptions constructor
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ paintComponent() method
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ Line separator
WITHOUT_CLASSIFICATION	// returns false if no such pane exists; calling with null // param selects first option pane found
WITHOUT_CLASSIFICATION	//setFont(new Font("Dialog",Font.BOLD,10));
WITHOUT_CLASSIFICATION	// wait for it to be painted to ensure progress is updated // continuously
WITHOUT_CLASSIFICATION	//{{{ Max line length
WITHOUT_CLASSIFICATION	//{{{ Encoding
WITHOUT_CLASSIFICATION	//{{{ GZipped setting
WITHOUT_CLASSIFICATION	//{{{ Tab size
WITHOUT_CLASSIFICATION	//{{{ Edit mode
WITHOUT_CLASSIFICATION	//{{{ FontSelector constructor
WITHOUT_CLASSIFICATION	//{{{ Fold mode
WITHOUT_CLASSIFICATION	//{{{ Indent size
WITHOUT_CLASSIFICATION	//{{{ Wrap mode
WITHOUT_CLASSIFICATION	//{{{ FontSelector constructor
WITHOUT_CLASSIFICATION	//{{{ Soft tabs
WITHOUT_CLASSIFICATION	//{{{ FontSelectorDialog class
WITHOUT_CLASSIFICATION	//{{{ Buttons
WITHOUT_CLASSIFICATION	//{{{ isAntiAliasEnabled() method
WITHOUT_CLASSIFICATION	//{{{ FontSelectorDialog constructor
WITHOUT_CLASSIFICATION	//{{{ setAntiAliasEnabled() method
WITHOUT_CLASSIFICATION	//{{{ setAntiAliasEnabled() method
WITHOUT_CLASSIFICATION	//{{{ FontSelectorDialog constructor
WITHOUT_CLASSIFICATION	//{{{ updateText() method
WITHOUT_CLASSIFICATION	//{{{ FontSelectorDialog constructor
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ ListHandler class
WITHOUT_CLASSIFICATION	//{{{ updatePreview() method
WITHOUT_CLASSIFICATION	// if the buffer count becomes 0, then it is guaranteed to // become 1 very soon, so don't do anything in that case.
WITHOUT_CLASSIFICATION	//{{{ FontSelectorDialog constructor
WITHOUT_CLASSIFICATION	/* fonts = getToolkit().getFontList(); */
WITHOUT_CLASSIFICATION	//{{{ getSelectedFont() method
WITHOUT_CLASSIFICATION	// for SPACE or S+SPACE we pass the // key typed since international // keyboards sometimes produce a // KEY_PRESSED SPACE but not a // KEY_TYPED SPACE, eg if you have to // do a "<space> to insert ".
WITHOUT_CLASSIFICATION	/* Log.log(Log.ERROR,this,"Using deprecated Toolkit.getFontList()"); */
WITHOUT_CLASSIFICATION	//{{{ getFontList() method
WITHOUT_CLASSIFICATION	//{{{ addTranslation() method
WITHOUT_CLASSIFICATION	//{{{ createTextFieldAndListPanel() method
WITHOUT_CLASSIFICATION	/* on MacOS, A+ can be user input */
WITHOUT_CLASSIFICATION	//{{{ translateKeyEvent() method
WITHOUT_CLASSIFICATION	/* on MacOS, A+ can be user input */
WITHOUT_CLASSIFICATION	//{{{ getSymbolicModifierName() method
WITHOUT_CLASSIFICATION	//{{{ parseKey() method
WITHOUT_CLASSIFICATION	//{{{ setModifierMapping() method
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ remove() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	/* M+ discarded by key event workaround! */
WITHOUT_CLASSIFICATION	/* == C+ */
WITHOUT_CLASSIFICATION	/* == A+ */
WITHOUT_CLASSIFICATION	/* == M+ */
WITHOUT_CLASSIFICATION	//{{{ DockableWindowCompare class
WITHOUT_CLASSIFICATION	//{{{ register() method
WITHOUT_CLASSIFICATION	/* == S+ */
WITHOUT_CLASSIFICATION	// removing last component, so remove border
WITHOUT_CLASSIFICATION	//{{{ Key class
WITHOUT_CLASSIFICATION	//{{{ Create button
WITHOUT_CLASSIFICATION	//{{{ PanelWindowContainer constructor
WITHOUT_CLASSIFICATION	//{{{ setDimension() method
WITHOUT_CLASSIFICATION	//{{{ Button box setup
WITHOUT_CLASSIFICATION	//{{{ isVisible() method
WITHOUT_CLASSIFICATION	//{{{ unregister() method
WITHOUT_CLASSIFICATION	//{{{ showMostRecent() method
WITHOUT_CLASSIFICATION	//{{{ getCurrent() method
WITHOUT_CLASSIFICATION	//{{{ show() method
WITHOUT_CLASSIFICATION	//{{{ sortDockables() method
WITHOUT_CLASSIFICATION	//{{{ getDimension() method
WITHOUT_CLASSIFICATION	//{{{ MenuMouseHandler class
WITHOUT_CLASSIFICATION	//{{{ getDockables() method
WITHOUT_CLASSIFICATION	//{{{ getWrappedDimension() method
WITHOUT_CLASSIFICATION	// remember the most recent dockable
WITHOUT_CLASSIFICATION	//{{{ DockBorder class
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ getMinimumSize() method
WITHOUT_CLASSIFICATION	//{{{ paintBorder() method
WITHOUT_CLASSIFICATION	//{{{ getBorderInsets() method
WITHOUT_CLASSIFICATION	//{{{ isBorderOpaque() method
WITHOUT_CLASSIFICATION	//{{{ getPreferredSize() method
WITHOUT_CLASSIFICATION	//{{{ preferredLayoutSize() method
WITHOUT_CLASSIFICATION	//{{{ minimumLayoutSize() method
WITHOUT_CLASSIFICATION	//{{{ layoutContainer() method
WITHOUT_CLASSIFICATION	//{{{ getWrappedDimension() method
WITHOUT_CLASSIFICATION	//{{{ removeLayoutComponent() method //}}}
WITHOUT_CLASSIFICATION	//{{{ DockBorder constructor
WITHOUT_CLASSIFICATION	//{{{ RotatedTextIcon class
WITHOUT_CLASSIFICATION	//{{{ paintHorizBorder() method
WITHOUT_CLASSIFICATION	//{{{ getIconHeight() method
WITHOUT_CLASSIFICATION	//{{{ paintVertBorder() method
WITHOUT_CLASSIFICATION	//{{{ RotatedTextIcon constructor
WITHOUT_CLASSIFICATION	//{{{ updateColors() method
WITHOUT_CLASSIFICATION	//}}} //{{{ Counterclockwise rotation
WITHOUT_CLASSIFICATION	//height = (int)glyphs.getLogicalBounds().getHeight();
WITHOUT_CLASSIFICATION	//{{{ paintIcon() method
WITHOUT_CLASSIFICATION	//{{{ getIconWidth() method
WITHOUT_CLASSIFICATION	//{{{ DockablePanel constructor
WITHOUT_CLASSIFICATION	//{{{ No rotation
WITHOUT_CLASSIFICATION	//{{{ ButtonLayout class
WITHOUT_CLASSIFICATION	//}}} //{{{ Clockwise rotation
WITHOUT_CLASSIFICATION	// nothing 'cept close box
WITHOUT_CLASSIFICATION	//{{{ addLayoutComponent() method //}}}
WITHOUT_CLASSIFICATION	//{{{ setBounds() method
WITHOUT_CLASSIFICATION	//{{{ getWindowContainer() method
WITHOUT_CLASSIFICATION	//{{{ DockablePanel class
WITHOUT_CLASSIFICATION	//{{{ ResizeMouseHandler class
WITHOUT_CLASSIFICATION	//{{{ showDockable() method
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ handleMessage() method
WITHOUT_CLASSIFICATION	//}}} //}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ mousePressed() method
WITHOUT_CLASSIFICATION	//{{{ mouseReleased() method
WITHOUT_CLASSIFICATION	//{{{ mouseMoved() method
WITHOUT_CLASSIFICATION	//{{{ mouseDragged() method
WITHOUT_CLASSIFICATION	// collapsed
WITHOUT_CLASSIFICATION	//{{{ Top...
WITHOUT_CLASSIFICATION	//{{{ Top...
WITHOUT_CLASSIFICATION	//}}} //{{{ Left...
WITHOUT_CLASSIFICATION	//}}} //{{{ Left...
WITHOUT_CLASSIFICATION	//}}} //{{{ Bottom...
WITHOUT_CLASSIFICATION	//}}} //{{{ Bottom...
WITHOUT_CLASSIFICATION	//}}} //{{{ Right...
WITHOUT_CLASSIFICATION	//}}} //{{{ Right...
WITHOUT_CLASSIFICATION	// can't happen?
WITHOUT_CLASSIFICATION	//{{{ mouseExited() method
WITHOUT_CLASSIFICATION	//{{{ getCursor() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ dispose() method
WITHOUT_CLASSIFICATION	//{{{ getDockableWindowManager() method
WITHOUT_CLASSIFICATION	//{{{ getMinimumSize() method
WITHOUT_CLASSIFICATION	//{{{ remove() method
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ register() method
WITHOUT_CLASSIFICATION	//{{{ unregister() method
WITHOUT_CLASSIFICATION	//{{{ show() method
WITHOUT_CLASSIFICATION	//{{{ isVisible() method
WITHOUT_CLASSIFICATION	//{{{ FloatingWindowContainer constructor
WITHOUT_CLASSIFICATION	//{{{ LogViewer constructor
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ addKeyBinding() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ removeNotify() method
WITHOUT_CLASSIFICATION	//{{{ KeyHandler class
WITHOUT_CLASSIFICATION	//{{{ focusOnDefaultComponent() method
WITHOUT_CLASSIFICATION	//{{{ addNotify() method
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ getAbbrev() method
WITHOUT_CLASSIFICATION	//{{{ getExpansion() method
WITHOUT_CLASSIFICATION	//{{{ ListHandler class
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	//{{{ addKeyBinding() method
WITHOUT_CLASSIFICATION	//{{{ removeKeyBinding() method
WITHOUT_CLASSIFICATION	//{{{ checkForExistingAbbrev() method
WITHOUT_CLASSIFICATION	//{{{ LogList class
WITHOUT_CLASSIFICATION	//{{{ setEnabled() method
WITHOUT_CLASSIFICATION	//{{{ RolloverButton constructor
WITHOUT_CLASSIFICATION	//{{{ RolloverButton constructor
WITHOUT_CLASSIFICATION	//{{{ updateUI() method
WITHOUT_CLASSIFICATION	//{{{ setBorderPainted() method
WITHOUT_CLASSIFICATION	//{{{ DefaultInputHandler constructor
WITHOUT_CLASSIFICATION	//{{{ isOpaque() method
WITHOUT_CLASSIFICATION	//{{{ revalidate() method
WITHOUT_CLASSIFICATION	//{{{ DefaultInputHandler constructor
WITHOUT_CLASSIFICATION	//{{{ paint() method
WITHOUT_CLASSIFICATION	//{{{ EditAbbrevDialog constructor
WITHOUT_CLASSIFICATION	//{{{ EditAbbrevDialog constructor
WITHOUT_CLASSIFICATION	// user asks to remove non-existent
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ getName() method
WITHOUT_CLASSIFICATION	/* to avoid data loss, only do this if the above			 * completed successfully */
WITHOUT_CLASSIFICATION	//{{{ removeAllKeyBindings() method
WITHOUT_CLASSIFICATION	//{{{ addToolBar() method
WITHOUT_CLASSIFICATION	//{{{ removeToolBar() method
WITHOUT_CLASSIFICATION	//{{{ clear() method
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	//{{{ getModel() method
WITHOUT_CLASSIFICATION	/* case KeyEvent.VK_SEPARATOR: */
WITHOUT_CLASSIFICATION	//{{{ isPrefixActive() method
WITHOUT_CLASSIFICATION	//{{{ handleKey() method
WITHOUT_CLASSIFICATION	//{{{ getKeyBinding() method
WITHOUT_CLASSIFICATION	//{{{ getSymbolicModifierName() method
WITHOUT_CLASSIFICATION	//{{{ _addKeyBinding() method
WITHOUT_CLASSIFICATION	// Don't beep if the user presses some // key we don't know about unless a // prefix is active. Otherwise it will // beep when caps lock is pressed, etc.
WITHOUT_CLASSIFICATION	//{{{ saveHistory() method
WITHOUT_CLASSIFICATION	// F10 should be passed on, but C+e F10 // shouldn't
WITHOUT_CLASSIFICATION	//{{{ getSize() method
WITHOUT_CLASSIFICATION	//{{{ parseKeyStroke() method
WITHOUT_CLASSIFICATION	//{{{ HistoryModel constructor
WITHOUT_CLASSIFICATION	// Stores prefix name in bindings hashtable
WITHOUT_CLASSIFICATION	//{{{ setCurrentBindings() method
WITHOUT_CLASSIFICATION	//{{{ loadHistory() method
WITHOUT_CLASSIFICATION	//{{{ addItem() method
WITHOUT_CLASSIFICATION	//{{{ ToolBarManager constructor
WITHOUT_CLASSIFICATION	//{{{ getItem() method
WITHOUT_CLASSIFICATION	//{{{ getElementAt() method
WITHOUT_CLASSIFICATION	//Log.log(Log.DEBUG,HistoryModel.class,fnf);
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ handleMessage() method
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	//{{{ dispose() method
WITHOUT_CLASSIFICATION	//{{{ Entry class
WITHOUT_CLASSIFICATION	//{{{ addToolBar() method
WITHOUT_CLASSIFICATION	//{{{ removeToolBar() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ HelpSearchPanel constructor
WITHOUT_CLASSIFICATION	// See if we should place this toolbar before any others
WITHOUT_CLASSIFICATION	// select the appropriate tree node.
WITHOUT_CLASSIFICATION	// Place the toolbar at the bottom of the group
WITHOUT_CLASSIFICATION	//{{{ ResultIcon class
WITHOUT_CLASSIFICATION	// EnhancedDialog implementation
WITHOUT_CLASSIFICATION	// we later use this to compute a relative ranking
WITHOUT_CLASSIFICATION	// end EnhancedDialog implementation
WITHOUT_CLASSIFICATION	// what to do?
WITHOUT_CLASSIFICATION	//{{{ ResultRenderer class
WITHOUT_CLASSIFICATION	// multiple files w/ word bonus
WITHOUT_CLASSIFICATION	//{{{ Result class
WITHOUT_CLASSIFICATION	//{{{ ResultCompare class
WITHOUT_CLASSIFICATION	// turn the rankings into relative rankings, from 1 to 4
WITHOUT_CLASSIFICATION	//{{{ gotoURL() method
WITHOUT_CLASSIFICATION	//{{{ HelpViewer constructor
WITHOUT_CLASSIFICATION	//{{{ HelpViewer constructor
WITHOUT_CLASSIFICATION	//{{{ HelpViewer constructor
WITHOUT_CLASSIFICATION	//{{{ getBaseURL() method
WITHOUT_CLASSIFICATION	/* don't show loading msg because we won't				   receive a propertyChanged */
WITHOUT_CLASSIFICATION	//{{{ queueTOCReload() method
WITHOUT_CLASSIFICATION	//{{{ getShortURL() method
WITHOUT_CLASSIFICATION	//{{{ Instance members
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ getFile() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ load() method
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	// reset default cursor so that the hand cursor doesn't // stick around
WITHOUT_CLASSIFICATION	// the TOC pane looks up user's guide URLs relative to the // doc directory...
WITHOUT_CLASSIFICATION	//{{{ HelpIndex constructor
WITHOUT_CLASSIFICATION	//{{{ indexJAR() method
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() class
WITHOUT_CLASSIFICATION	/* //{{{ HelpIndex constructor	public HelpIndex(String fileListPath, String wordIndexPath)	{		this();	} //}}} */
WITHOUT_CLASSIFICATION	//{{{ LinkHandler class
WITHOUT_CLASSIFICATION	//{{{ HelpFile class
WITHOUT_CLASSIFICATION	//{{{ hyperlinkUpdate() method
WITHOUT_CLASSIFICATION	//{{{ indexEditorHelp() method
WITHOUT_CLASSIFICATION	//{{{ PropertyChangeHandler class
WITHOUT_CLASSIFICATION	/*  || lname.endsWith(".txt") */
WITHOUT_CLASSIFICATION	//{{{ ignoreWord() method
WITHOUT_CLASSIFICATION	//{{{ indexDirectory() method
WITHOUT_CLASSIFICATION	// how much an occurrence in the title is worth
WITHOUT_CLASSIFICATION	//{{{ indexStream() method
WITHOUT_CLASSIFICATION	//{{{ indexURL() method
WITHOUT_CLASSIFICATION	//{{{ lookupWord() method
WITHOUT_CLASSIFICATION	//{{{ addWord() method
WITHOUT_CLASSIFICATION	// the word
WITHOUT_CLASSIFICATION	//{{{ Word class
WITHOUT_CLASSIFICATION	//{{{ HelpTOCPanel constructor
WITHOUT_CLASSIFICATION	// files it occurs in
WITHOUT_CLASSIFICATION	//{{{ createTOC() method
WITHOUT_CLASSIFICATION	//{{{ HelpNode class
WITHOUT_CLASSIFICATION	//{{{ selectNode() method
WITHOUT_CLASSIFICATION	// so that HelpViewer constructor doesn't try to expand
WITHOUT_CLASSIFICATION	//{{{ createNode() method
WITHOUT_CLASSIFICATION	//{{{ loadTOC() method
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ start() method
WITHOUT_CLASSIFICATION	//{{{ attribute() method
WITHOUT_CLASSIFICATION	//{{{ charData() method
WITHOUT_CLASSIFICATION	//{{{ startElement() method
WITHOUT_CLASSIFICATION	//{{{ endElement() method
WITHOUT_CLASSIFICATION	//{{{ getToolTipLocation() method
WITHOUT_CLASSIFICATION	//{{{ getToolTipText() method
WITHOUT_CLASSIFICATION	//{{{ processMouseEvent() method
WITHOUT_CLASSIFICATION	//{{{ TOCHandler constructor
WITHOUT_CLASSIFICATION	//{{{ Private members // used to mark words to ignore (see constructor for the list)
WITHOUT_CLASSIFICATION	//{{{ TOCHandler class
WITHOUT_CLASSIFICATION	//{{{ HelpNode constructor
WITHOUT_CLASSIFICATION	//ToolTipManager ttm = ToolTipManager.sharedInstance();
WITHOUT_CLASSIFICATION	//{{{ TOCTree constructor
WITHOUT_CLASSIFICATION	//{{{ TOCTree class
WITHOUT_CLASSIFICATION	/* case MouseEvent.MOUSE_ENTERED:				toolTipInitialDelay = ttm.getInitialDelay();				toolTipReshowDelay = ttm.getReshowDelay();				ttm.setInitialDelay(200);				ttm.setReshowDelay(0);				super.processMouseEvent(evt);				break;			case MouseEvent.MOUSE_EXITED:				ttm.setInitialDelay(toolTipInitialDelay);				ttm.setReshowDelay(toolTipReshowDelay);				super.processMouseEvent(evt);				break; */
WITHOUT_CLASSIFICATION	//{{{ cellRectIsVisible() method
WITHOUT_CLASSIFICATION	//{{{ TOCCellRenderer class
WITHOUT_CLASSIFICATION	//{{{ PluginCompare class
WITHOUT_CLASSIFICATION	//{{{ VFS methods
WITHOUT_CLASSIFICATION	//{{{ getFileVFS() method
WITHOUT_CLASSIFICATION	//{{{ getUrlVFS() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ runInAWTThread() method
WITHOUT_CLASSIFICATION	//{{{ runInWorkThread() method
WITHOUT_CLASSIFICATION	//{{{ error() method
WITHOUT_CLASSIFICATION	//{{{ error() method
WITHOUT_CLASSIFICATION	//{{{ Static variables
WITHOUT_CLASSIFICATION	//{{{ Class initializer
WITHOUT_CLASSIFICATION	// in new api, protocol always equals name
WITHOUT_CLASSIFICATION	//{{{ getVFSByName() method
WITHOUT_CLASSIFICATION	//{{{ getFilesystems() method
WITHOUT_CLASSIFICATION	//{{{ waitForRequests() method
WITHOUT_CLASSIFICATION	//{{{ getVFSForProtocol() method
WITHOUT_CLASSIFICATION	//{{{ getVFSs() method
WITHOUT_CLASSIFICATION	//{{{ getVFSForPath() method
WITHOUT_CLASSIFICATION	// we were the first to add an update; // add update sending runnable to AWT // thread
WITHOUT_CLASSIFICATION	//{{{ registerVFS() method
WITHOUT_CLASSIFICATION	//{{{ errorOccurred() method
WITHOUT_CLASSIFICATION	//{{{ I/O request methods
WITHOUT_CLASSIFICATION	//{{{ sendVFSUpdate() method
WITHOUT_CLASSIFICATION	//{{{ getIOThreadPool() method
WITHOUT_CLASSIFICATION	// the vfs browser has what you might call // a design flaw, it doesn't update properly // unless the vfs update for a parent arrives // before any updates for the children. sorting // the list alphanumerically guarantees this.
WITHOUT_CLASSIFICATION	//{{{ getRequestCount() method
WITHOUT_CLASSIFICATION	// don't send two updates // for the same path
WITHOUT_CLASSIFICATION	// if we are already in the AWT thread, take a shortcut
WITHOUT_CLASSIFICATION	//{{{ SendVFSUpdatesSafely class
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ constructPath() method
WITHOUT_CLASSIFICATION	//{{{ constructPath() method
WITHOUT_CLASSIFICATION	//{{{ getParentOfPath() method
WITHOUT_CLASSIFICATION	//{{{ insert() method
WITHOUT_CLASSIFICATION	//{{{ _createOutputStream() method
WITHOUT_CLASSIFICATION	//{{{ UrlVFS constructor
WITHOUT_CLASSIFICATION	//{{{ _canonPath() method
WITHOUT_CLASSIFICATION	//{{{ _createInputStream() method
WITHOUT_CLASSIFICATION	// Check for backup.directory, and create that // directory if it doesn't exist
WITHOUT_CLASSIFICATION	//{{{ FileVFS method
WITHOUT_CLASSIFICATION	//{{{ LocalDirectoryEntry class
WITHOUT_CLASSIFICATION	//{{{ getFileSeparator() method
WITHOUT_CLASSIFICATION	//{{{ _getDirectoryEntry() method
WITHOUT_CLASSIFICATION	//{{{ Check if file is valid
WITHOUT_CLASSIFICATION	//{{{ _rename() method
WITHOUT_CLASSIFICATION	// use system default short format
WITHOUT_CLASSIFICATION	//{{{ _listDirectory() method
WITHOUT_CLASSIFICATION	//{{{ _delete() method
WITHOUT_CLASSIFICATION	//{{{ _backup() method
WITHOUT_CLASSIFICATION	// do some platforms throw exceptions if the file does not exist // when we ask for the canonical path?
WITHOUT_CLASSIFICATION	// this is needed because on OS X renaming to a non-existent // directory causes problems
WITHOUT_CLASSIFICATION	// Fetch properties
WITHOUT_CLASSIFICATION	//{{{ _mkdir() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ getParentOfPath() method
WITHOUT_CLASSIFICATION	//{{{ getParentOfPath() method
WITHOUT_CLASSIFICATION	//{{{ _createInputStream() method
WITHOUT_CLASSIFICATION	//{{{ _createOutputStream() method
WITHOUT_CLASSIFICATION	//{{{ _listDirectory() method
WITHOUT_CLASSIFICATION	//{{{ _listDirectory() method
WITHOUT_CLASSIFICATION	//{{{ _getDirectoryEntry() method
WITHOUT_CLASSIFICATION	//{{{ _getDirectoryEntry() method
WITHOUT_CLASSIFICATION	//{{{ _delete() method
WITHOUT_CLASSIFICATION	//{{{ setPermissions() method
WITHOUT_CLASSIFICATION	//{{{ _saveComplete() method
WITHOUT_CLASSIFICATION	//{{{ addToFavorites() method
WITHOUT_CLASSIFICATION	//{{{ Permission preservation code
WITHOUT_CLASSIFICATION	//{{{ getPermissions() method
WITHOUT_CLASSIFICATION	//{{{ FavoritesVFS constructor
WITHOUT_CLASSIFICATION	//{{{ saveFavorites() method
WITHOUT_CLASSIFICATION	//{{{ loadFavorites() method
WITHOUT_CLASSIFICATION	// don't want it to show "0 bytes" for size, // etc.
WITHOUT_CLASSIFICATION	//{{{ listRoots() method
WITHOUT_CLASSIFICATION	//{{{ getFavorites() method
WITHOUT_CLASSIFICATION	//{{{ FileRootsVFS constructor
WITHOUT_CLASSIFICATION	//{{{ FavoritesEntry class
WITHOUT_CLASSIFICATION	// JDK 1.4 adds methods to obtain a drive letter label and // list the desktop on Windows
WITHOUT_CLASSIFICATION	// Make sure people don't do stupid things like putting files in /Volumes
WITHOUT_CLASSIFICATION	//{{{ getName() method
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ load() method
WITHOUT_CLASSIFICATION	//{{{ constructPath() method
WITHOUT_CLASSIFICATION	//{{{ getFileName() method
WITHOUT_CLASSIFICATION	//{{{ getParentOfPath() method
WITHOUT_CLASSIFICATION	//{{{ insert() method
WITHOUT_CLASSIFICATION	//{{{ reloadDirectory() method
WITHOUT_CLASSIFICATION	//{{{ getFileSeparator() method
WITHOUT_CLASSIFICATION	//{{{ _canonPath() method
WITHOUT_CLASSIFICATION	//{{{ _listDirectory() method
WITHOUT_CLASSIFICATION	//{{{ _listDirectory() method
WITHOUT_CLASSIFICATION	//{{{ _getDirectoryEntry() method
WITHOUT_CLASSIFICATION	// don't want it to show "0 bytes" for size, // etc.
WITHOUT_CLASSIFICATION	//{{{ showBrowseDialog() method
WITHOUT_CLASSIFICATION	//{{{ RootsEntry class
WITHOUT_CLASSIFICATION	// so an empty cd drive is not reported as a file
WITHOUT_CLASSIFICATION	// REMIND: calling isDirectory() on a floppy drive // displays stupid I/O error dialog box on Windows
WITHOUT_CLASSIFICATION	// reasonable defaults (?)
WITHOUT_CLASSIFICATION	// to prevent windows looking for a disk in the floppy drive
WITHOUT_CLASSIFICATION	//{{{ Capabilities
WITHOUT_CLASSIFICATION	// this ensures that getFileParent("protocol:"), for // example, is "protocol:" and not "".
WITHOUT_CLASSIFICATION	//{{{ Extended attributes
WITHOUT_CLASSIFICATION	//{{{ getCapabilities() method
WITHOUT_CLASSIFICATION	//{{{ VFS constructor
WITHOUT_CLASSIFICATION	//{{{ VFS constructor
WITHOUT_CLASSIFICATION	//{{{ VFS constructor
WITHOUT_CLASSIFICATION	// don't want getFileName("roots:") to return ""
WITHOUT_CLASSIFICATION	//{{{ getExtendedAttributes() method
WITHOUT_CLASSIFICATION	// this makes HyperSearch much faster
WITHOUT_CLASSIFICATION	//{{{ getTwoStageSaveName() method
WITHOUT_CLASSIFICATION	// ignore last character of path to properly handle // paths like /foo/bar/
WITHOUT_CLASSIFICATION	/* When doing a 'save as', the path to save to (path)		 * will not be the same as the buffer's previous path		 * (buffer.getPath()). In that case, we want to create		 * a backup of the new path, even if the old path was		 * backed up as well (BACKED_UP property set) */
WITHOUT_CLASSIFICATION	//{{{ createVFSSession() method
WITHOUT_CLASSIFICATION	// A method name that starts with _ requires a session object
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ updateEveryTime() method
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	//{{{ Class initializer
WITHOUT_CLASSIFICATION	//{{{ getExtendedAttribute() method
WITHOUT_CLASSIFICATION	//{{{ _createInputStream() method
WITHOUT_CLASSIFICATION	//{{{ _createOutputStream() method
WITHOUT_CLASSIFICATION	//{{{ _listDirectory() method
WITHOUT_CLASSIFICATION	//{{{ _delete() method
WITHOUT_CLASSIFICATION	//{{{ _rename() method
WITHOUT_CLASSIFICATION	//{{{ _mkdir() method
WITHOUT_CLASSIFICATION	//{{{ _backup() method
WITHOUT_CLASSIFICATION	//{{{ _saveComplete() method
WITHOUT_CLASSIFICATION	//{{{ _endVFSSession() method
WITHOUT_CLASSIFICATION	//{{{ DirectoryEntry class
WITHOUT_CLASSIFICATION	//{{{ File types
WITHOUT_CLASSIFICATION	//{{{ getDefaultColorFor() method
WITHOUT_CLASSIFICATION	//{{{ DirectoryEntry constructor
WITHOUT_CLASSIFICATION	//{{{ DirectoryEntry constructor
WITHOUT_CLASSIFICATION	//{{{ ColorEntry class
WITHOUT_CLASSIFICATION	// maintain backwards compatibility
WITHOUT_CLASSIFICATION	//{{{ DirectoryEntryCompare class
WITHOUT_CLASSIFICATION	//{{{ getColor() method
WITHOUT_CLASSIFICATION	// skip autosave files
WITHOUT_CLASSIFICATION	//{{{ DirectoryProvider constructor
WITHOUT_CLASSIFICATION	// resolve symlinks to avoid loops
WITHOUT_CLASSIFICATION	//{{{ loadColors() method
WITHOUT_CLASSIFICATION	//{{{ ActionListeners
WITHOUT_CLASSIFICATION	// skip backup files
WITHOUT_CLASSIFICATION	// for filtering out backups
WITHOUT_CLASSIFICATION	// skip marker files
WITHOUT_CLASSIFICATION	//current.addSeparator();
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ updateEveryTime() method
WITHOUT_CLASSIFICATION	//{{{ updateEveryTime() method
WITHOUT_CLASSIFICATION	//{{{ updateEveryTime() method
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	//{{{ getShortcut() method
WITHOUT_CLASSIFICATION	//{{{ getShortcut() method
WITHOUT_CLASSIFICATION	//{{{ Class initializer
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ old API
WITHOUT_CLASSIFICATION	//{{{ getPreferredSize() method
WITHOUT_CLASSIFICATION	//{{{ getPreferredSize() method
WITHOUT_CLASSIFICATION	//{{{ getPreferredSize() method
WITHOUT_CLASSIFICATION	//{{{ paint() method
WITHOUT_CLASSIFICATION	//{{{ paint() method
WITHOUT_CLASSIFICATION	//{{{ ActionListeners
WITHOUT_CLASSIFICATION	//current.addSeparator();
WITHOUT_CLASSIFICATION	// We build a set of lists, each list contains plugin menu // items that begin with a given letter.
WITHOUT_CLASSIFICATION	//{{{ addToLetterMap() method
WITHOUT_CLASSIFICATION	// Sort each letter
WITHOUT_CLASSIFICATION	// if less than 20 items, put them directly in the menu
WITHOUT_CLASSIFICATION	//{{{ MarkersMenuItem class
WITHOUT_CLASSIFICATION	// Collect blocks of up to maxItems of consecutive letters
WITHOUT_CLASSIFICATION	//{{{ MarkersMenuItem constructor
WITHOUT_CLASSIFICATION	//{{{ EnhancedMenuItem constructor
WITHOUT_CLASSIFICATION	//{{{ EnhancedCheckBoxMenuItem constructor
WITHOUT_CLASSIFICATION	//{{{ Model class
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ menuSelected() method
WITHOUT_CLASSIFICATION	//{{{ updateEveryTime() method
WITHOUT_CLASSIFICATION	//{{{ updateEveryTime() method
WITHOUT_CLASSIFICATION	//{{{ updateEveryTime() method
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	//{{{ getShortcut() method
WITHOUT_CLASSIFICATION	//{{{ Class initializer
WITHOUT_CLASSIFICATION	//{{{ getView() method
WITHOUT_CLASSIFICATION	//{{{ Protected members
WITHOUT_CLASSIFICATION	//{{{ finalize() method
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ paint() method
WITHOUT_CLASSIFICATION	//{{{ ViewUpdate constructor
WITHOUT_CLASSIFICATION	//{{{ EnhancedMenu constructor
WITHOUT_CLASSIFICATION	//{{{ createMacrosMenu() method
WITHOUT_CLASSIFICATION	//{{{ EnhancedMenu constructor
WITHOUT_CLASSIFICATION	//{{{ ActionListener...
WITHOUT_CLASSIFICATION	//{{{ ActionListener...
WITHOUT_CLASSIFICATION	//{{{ EnhancedMenu constructor
WITHOUT_CLASSIFICATION	//{{{ MouseListener...
WITHOUT_CLASSIFICATION	//{{{ MouseListener...
WITHOUT_CLASSIFICATION	//{{{ EditBusStub class
WITHOUT_CLASSIFICATION	//{{{ getWhat() method
WITHOUT_CLASSIFICATION	/* EnhancedMenu has a reference to EditBusStub, but not the other	 * way around. So when the EnhancedMenu is being garbage collected	 * its finalize() method removes the EditBusStub from the edit bus. */
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	//{{{ getView() method
WITHOUT_CLASSIFICATION	//{{{ Protected members
WITHOUT_CLASSIFICATION	//{{{ getPluginJAR() method
WITHOUT_CLASSIFICATION	//{{{ getBuffer() method
WITHOUT_CLASSIFICATION	//{{{ setSelectedRow() method
WITHOUT_CLASSIFICATION	//{{{ updateEnabled() method
WITHOUT_CLASSIFICATION	//{{{ getDockable() method
WITHOUT_CLASSIFICATION	//{{{ getWhat() method
WITHOUT_CLASSIFICATION	//{{{ getWhat() method
WITHOUT_CLASSIFICATION	//{{{ getWhat() method
WITHOUT_CLASSIFICATION	//{{{ getMenuName() method
WITHOUT_CLASSIFICATION	//{{{ Message types
WITHOUT_CLASSIFICATION	//{{{ Message types
WITHOUT_CLASSIFICATION	//{{{ Message types
WITHOUT_CLASSIFICATION	//{{{ DockableWindowUpdate constructor
WITHOUT_CLASSIFICATION	//{{{ BufferUpdate constructor
WITHOUT_CLASSIFICATION	//{{{ PluginUpdate constructor
WITHOUT_CLASSIFICATION	//{{{ isExiting() method
WITHOUT_CLASSIFICATION	//{{{ BrowserColorsOptionPane constructor
WITHOUT_CLASSIFICATION	//{{{ DynamicMenuChanged constructor
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ Entry class
WITHOUT_CLASSIFICATION	//{{{ remove() method
WITHOUT_CLASSIFICATION	//{{{ remove() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ getTableCellRendererComponent() method
WITHOUT_CLASSIFICATION	//{{{ getColumnCount() method
WITHOUT_CLASSIFICATION	//{{{ getColumnCount() method
WITHOUT_CLASSIFICATION	//{{{ getRowCount() method
WITHOUT_CLASSIFICATION	//{{{ getRowCount() method
WITHOUT_CLASSIFICATION	//{{{ getColumnName() method
WITHOUT_CLASSIFICATION	//{{{ getColumnClass() method
WITHOUT_CLASSIFICATION	//{{{ getValueAt() method
WITHOUT_CLASSIFICATION	//{{{ getValueAt() method
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ add() method
WITHOUT_CLASSIFICATION	//{{{ add() method
WITHOUT_CLASSIFICATION	//{{{ SelectionHandler class
WITHOUT_CLASSIFICATION	//{{{ isCellEditable() method
WITHOUT_CLASSIFICATION	//{{{ BrowserColorsModel class
WITHOUT_CLASSIFICATION	//{{{ BrowserColorsModel constructor
WITHOUT_CLASSIFICATION	//{{{ BrowserColorsModel constructor
WITHOUT_CLASSIFICATION	//{{{ setValueAt() method
WITHOUT_CLASSIFICATION	//{{{ moveUp() method
WITHOUT_CLASSIFICATION	//{{{ moveUp() method
WITHOUT_CLASSIFICATION	//{{{ moveDown() method
WITHOUT_CLASSIFICATION	//{{{ moveDown() method
WITHOUT_CLASSIFICATION	//{{{ ColorRenderer class
WITHOUT_CLASSIFICATION	//{{{ ColorRenderer constructor
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	//}}} //}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ Entry class
WITHOUT_CLASSIFICATION	// protected members
WITHOUT_CLASSIFICATION	//{{{ getTableCellRendererComponent() method
WITHOUT_CLASSIFICATION	//{{{ getTableCellRendererComponent() method
WITHOUT_CLASSIFICATION	//{{{ getColumnName() method
WITHOUT_CLASSIFICATION	//{{{ getColumnClass() method
WITHOUT_CLASSIFICATION	//{{{ updateEnabled() method
WITHOUT_CLASSIFICATION	//{{{ isCellEditable() method
WITHOUT_CLASSIFICATION	//{{{ setValueAt() method
WITHOUT_CLASSIFICATION	//{{{ ColorRenderer class
WITHOUT_CLASSIFICATION	//{{{ ColorRenderer constructor
WITHOUT_CLASSIFICATION	//{{{ ColorRenderer constructor
WITHOUT_CLASSIFICATION	/* Text color */
WITHOUT_CLASSIFICATION	//{{{ TextAreaOptionPane constructor
WITHOUT_CLASSIFICATION	/* Multiple selection color */
WITHOUT_CLASSIFICATION	/* Font */
WITHOUT_CLASSIFICATION	/* Fractional font metrics */
WITHOUT_CLASSIFICATION	/* Background color */
WITHOUT_CLASSIFICATION	/* Line highlight */
WITHOUT_CLASSIFICATION	/* Caret color, caret blink, block caret */
WITHOUT_CLASSIFICATION	/* Wrap guide */
WITHOUT_CLASSIFICATION	/* Selection color */
WITHOUT_CLASSIFICATION	// Skip certain actions this way
WITHOUT_CLASSIFICATION	/* Structure highlight */
WITHOUT_CLASSIFICATION	/* Electric borders */
WITHOUT_CLASSIFICATION	/* EOL markers */
WITHOUT_CLASSIFICATION	//{{{ EditingOptionPane constructor
WITHOUT_CLASSIFICATION	/* Anti-aliasing */
WITHOUT_CLASSIFICATION	// redraw the whole table because a second shortcut // might have changed, too
WITHOUT_CLASSIFICATION	//{{{ selectMode() method
WITHOUT_CLASSIFICATION	//{{{ saveMode() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ load() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ updateButtons() method
WITHOUT_CLASSIFICATION	//{{{ PluginOptions constructor
WITHOUT_CLASSIFICATION	//{{{ ModeProperties class
WITHOUT_CLASSIFICATION	// don't do anything if the user didn't change // any settings
WITHOUT_CLASSIFICATION	//{{{ ModeProperties constructor
WITHOUT_CLASSIFICATION	//{{{ ModeProperties constructor
WITHOUT_CLASSIFICATION	//{{{ PluginOptions constructor
WITHOUT_CLASSIFICATION	// need to call Mode.init() if the file name or first line // globs change
WITHOUT_CLASSIFICATION	// Old API
WITHOUT_CLASSIFICATION	//{{{ PluginOptions constructor
WITHOUT_CLASSIFICATION	//{{{ PluginOptions constructor
WITHOUT_CLASSIFICATION	// initialize the Plugins branch of the options tree
WITHOUT_CLASSIFICATION	//{{{ createOptionTreeModel() method
WITHOUT_CLASSIFICATION	//{{{ Ceate icons list
WITHOUT_CLASSIFICATION	// Query plugins for option panes
WITHOUT_CLASSIFICATION	//{{{ NoPluginsPane class
WITHOUT_CLASSIFICATION	// only add the Plugins branch if there are OptionPanes
WITHOUT_CLASSIFICATION	/* Show toolbar */
WITHOUT_CLASSIFICATION	//{{{ getDefaultGroup() method
WITHOUT_CLASSIFICATION	//{{{ ToolBarOptionPane constructor
WITHOUT_CLASSIFICATION	//{{{ Create buttons
WITHOUT_CLASSIFICATION	//}}} ///}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	// protected members
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ ListHandler class
WITHOUT_CLASSIFICATION	//{{{ updateEnabled() method
WITHOUT_CLASSIFICATION	//{{{ updateEnabled() method
WITHOUT_CLASSIFICATION	//{{{ ToolBarEditDialog constructor
WITHOUT_CLASSIFICATION	//{{{ ButtonCompare class
WITHOUT_CLASSIFICATION	//{{{ IconListEntry class
WITHOUT_CLASSIFICATION	//{{{ Button class
WITHOUT_CLASSIFICATION	//{{{ ToolBarEditDialog constructor
WITHOUT_CLASSIFICATION	//{{{ ButtonCellRenderer class
WITHOUT_CLASSIFICATION	//{{{ IconCellRenderer class
WITHOUT_CLASSIFICATION	// Icon selection
WITHOUT_CLASSIFICATION	//{{{ ToolBarEditDialog class
WITHOUT_CLASSIFICATION	//{{{ updateList() method
WITHOUT_CLASSIFICATION	// Icon selection
WITHOUT_CLASSIFICATION	//{{{ updateList() method
WITHOUT_CLASSIFICATION	//{{{ getSelection() method
WITHOUT_CLASSIFICATION	//{{{ getSelection() method
WITHOUT_CLASSIFICATION	//{{{ StyleOptionPane constructor
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	// start at 1 not 0 to skip Token.NULL
WITHOUT_CLASSIFICATION	// start at 1 not 0 to skip Token.NULL
WITHOUT_CLASSIFICATION	//}}} //}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ Protected members
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ getTableCellRendererComponent() method
WITHOUT_CLASSIFICATION	//{{{ getColumnCount() method
WITHOUT_CLASSIFICATION	//{{{ getColumnCount() method
WITHOUT_CLASSIFICATION	//{{{ getRowCount() method
WITHOUT_CLASSIFICATION	//{{{ getColumnName() method
WITHOUT_CLASSIFICATION	//{{{ getValueAt() method
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ setValueAt() method
WITHOUT_CLASSIFICATION	//{{{ createStyleTableScroller() method
WITHOUT_CLASSIFICATION	//{{{ StyleTableModel class
WITHOUT_CLASSIFICATION	//{{{ createStyleTableModel() method
WITHOUT_CLASSIFICATION	// for sorting
WITHOUT_CLASSIFICATION	//{{{ StyleTableModel constructor
WITHOUT_CLASSIFICATION	//{{{ StyleTableModel constructor
WITHOUT_CLASSIFICATION	//{{{ addStyleChoice() method
WITHOUT_CLASSIFICATION	//{{{ StyleRenderer class
WITHOUT_CLASSIFICATION	//{{{ StyleChoice class
WITHOUT_CLASSIFICATION	//{{{ StyleEditor class
WITHOUT_CLASSIFICATION	//{{{ StyleRenderer constructor
WITHOUT_CLASSIFICATION	//{{{ StyleEditor constructor
WITHOUT_CLASSIFICATION	//{{{ getStyle() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ getTableCellRendererComponent() method
WITHOUT_CLASSIFICATION	//{{{ getTableCellRendererComponent() method
WITHOUT_CLASSIFICATION	//{{{ getRowCount() method
WITHOUT_CLASSIFICATION	//{{{ getColumnName() method
WITHOUT_CLASSIFICATION	//{{{ getValueAt() method
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ setValueAt() method
WITHOUT_CLASSIFICATION	/* Text color */
WITHOUT_CLASSIFICATION	/* Background color */
WITHOUT_CLASSIFICATION	/* Structure highlight */
WITHOUT_CLASSIFICATION	//{{{ addStyleChoice() method
WITHOUT_CLASSIFICATION	//{{{ StyleChoice class
WITHOUT_CLASSIFICATION	// for sorting
WITHOUT_CLASSIFICATION	// for sorting
WITHOUT_CLASSIFICATION	//{{{ StyleRenderer class
WITHOUT_CLASSIFICATION	//{{{ StyleRenderer constructor
WITHOUT_CLASSIFICATION	//{{{ StyleRenderer constructor
WITHOUT_CLASSIFICATION	//{{{ StyleEditor constructor
WITHOUT_CLASSIFICATION	//{{{ getStyle() method
WITHOUT_CLASSIFICATION	/* Text font */
WITHOUT_CLASSIFICATION	//{{{ GutterOptionPane constructor
WITHOUT_CLASSIFICATION	/* Line numbering */
WITHOUT_CLASSIFICATION	/* Number alignment */
WITHOUT_CLASSIFICATION	/* Border width */
WITHOUT_CLASSIFICATION	/* Marker highlight */
WITHOUT_CLASSIFICATION	/* gutterBorderWidth = new JTextField(jEdit.getProperty(			"view.gutter.borderWidth"));		addComponent(jEdit.getProperty("options.gutter.borderWidth"),			gutterBorderWidth); */
WITHOUT_CLASSIFICATION	/* Current line highlight */
WITHOUT_CLASSIFICATION	/* unfocused border color */
WITHOUT_CLASSIFICATION	/* Highlight interval and color */
WITHOUT_CLASSIFICATION	/* Fold marker color */
WITHOUT_CLASSIFICATION	/* Focused border color */
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	/* Background color */
WITHOUT_CLASSIFICATION	/* Status bar visible */
WITHOUT_CLASSIFICATION	//{{{ StatusBarOptionPane constructor
WITHOUT_CLASSIFICATION	/* Edit mode */
WITHOUT_CLASSIFICATION	/* Wrap */
WITHOUT_CLASSIFICATION	/* Foreground color */
WITHOUT_CLASSIFICATION	/* Fold mode */
WITHOUT_CLASSIFICATION	/* Caret status */
WITHOUT_CLASSIFICATION	/* Memory status */
WITHOUT_CLASSIFICATION	/* Multi select */
WITHOUT_CLASSIFICATION	/* Encoding */
WITHOUT_CLASSIFICATION	/* Overwrite */
WITHOUT_CLASSIFICATION	/* Memory background color */
WITHOUT_CLASSIFICATION	/* Rect select */
WITHOUT_CLASSIFICATION	/* Line seperator */
WITHOUT_CLASSIFICATION	//{{{ MouseOptionPane constructor
WITHOUT_CLASSIFICATION	/* Memory foreground color */
WITHOUT_CLASSIFICATION	/* Clock */
WITHOUT_CLASSIFICATION	/* Non word character selection behavior */
WITHOUT_CLASSIFICATION	/* Text drag and drop */
WITHOUT_CLASSIFICATION	/* Middle mouse button click pastes % register */
WITHOUT_CLASSIFICATION	/* Gutter mouse actions */
WITHOUT_CLASSIFICATION	//{{{ FirewallOptionPane constructor
WITHOUT_CLASSIFICATION	// checkbox
WITHOUT_CLASSIFICATION	// checkbox
WITHOUT_CLASSIFICATION	// proxy host
WITHOUT_CLASSIFICATION	// proxy host
WITHOUT_CLASSIFICATION	// proxy port
WITHOUT_CLASSIFICATION	// proxy port
WITHOUT_CLASSIFICATION	// proxy username
WITHOUT_CLASSIFICATION	// proxy password
WITHOUT_CLASSIFICATION	// no proxy for
WITHOUT_CLASSIFICATION	//{{{ DockingOptionPane constructor
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ Entry class
WITHOUT_CLASSIFICATION	//{{{ Entry class
WITHOUT_CLASSIFICATION	//{{{ getColumnCount() method
WITHOUT_CLASSIFICATION	//{{{ getColumnCount() method
WITHOUT_CLASSIFICATION	//{{{ getRowCount() method
WITHOUT_CLASSIFICATION	//{{{ getRowCount() method
WITHOUT_CLASSIFICATION	//{{{ getColumnName() method
WITHOUT_CLASSIFICATION	//{{{ getColumnName() method
WITHOUT_CLASSIFICATION	//{{{ getColumnClass() method
WITHOUT_CLASSIFICATION	//{{{ getColumnClass() method
WITHOUT_CLASSIFICATION	//{{{ getValueAt() method
WITHOUT_CLASSIFICATION	//{{{ getValueAt() method
WITHOUT_CLASSIFICATION	//{{{ isCellEditable() method
WITHOUT_CLASSIFICATION	//{{{ isCellEditable() method
WITHOUT_CLASSIFICATION	//{{{ setValueAt() method
WITHOUT_CLASSIFICATION	//{{{ setValueAt() method
WITHOUT_CLASSIFICATION	//{{{ WindowTableModel constructor
WITHOUT_CLASSIFICATION	//{{{ createWindowTableScroller() method
WITHOUT_CLASSIFICATION	//{{{ WindowTableModel constructor
WITHOUT_CLASSIFICATION	//{{{ createWindowModel() method
WITHOUT_CLASSIFICATION	//{{{ DockPositionCellRenderer class
WITHOUT_CLASSIFICATION	//{{{ sort() method
WITHOUT_CLASSIFICATION	//{{{ WindowTableModel class
WITHOUT_CLASSIFICATION	//{{{ sort() method
WITHOUT_CLASSIFICATION	//{{{ WindowCompare class
WITHOUT_CLASSIFICATION	//{{{ WindowCompare class
WITHOUT_CLASSIFICATION	//{{{ GlobalOptions constructor
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Constructor
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ updateEnabled() method
WITHOUT_CLASSIFICATION	//{{{ createOptionTreeModel() method
WITHOUT_CLASSIFICATION	//{{{ getDefaultGroup() method
WITHOUT_CLASSIFICATION	//{{{ GlobalOptions constructor
WITHOUT_CLASSIFICATION	//{{{ GlobalOptions constructor
WITHOUT_CLASSIFICATION	//{{{ GlobalOptions constructor
WITHOUT_CLASSIFICATION	//{{{ AutosaveBackupOptionPane constructor
WITHOUT_CLASSIFICATION	// initialize the jEdit branch of the options tree
WITHOUT_CLASSIFICATION	/* Backup on every save */
WITHOUT_CLASSIFICATION	/* Autosave interval */
WITHOUT_CLASSIFICATION	/* Install location */
WITHOUT_CLASSIFICATION	/* Backup count */
WITHOUT_CLASSIFICATION	/* Download mirror */
WITHOUT_CLASSIFICATION	/* Backup directory */
WITHOUT_CLASSIFICATION	//{{{ DownloadMirrorsThread class
WITHOUT_CLASSIFICATION	/* Backup filename prefix */
WITHOUT_CLASSIFICATION	/* Update mirror list */
WITHOUT_CLASSIFICATION	/* Backup suffix */
WITHOUT_CLASSIFICATION	// Insert code to update the plugin managers list here later
WITHOUT_CLASSIFICATION	/* Download source */
WITHOUT_CLASSIFICATION	/* Delete downloaded files */
WITHOUT_CLASSIFICATION	//{{{ MirrorModel class
WITHOUT_CLASSIFICATION	//{{{ AbbrevsOptionPane constructor
WITHOUT_CLASSIFICATION	//{{{ SingleSelectionModel class
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ remove() method
WITHOUT_CLASSIFICATION	//{{{ remove() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ getColumnCount() method
WITHOUT_CLASSIFICATION	//{{{ getColumnCount() method
WITHOUT_CLASSIFICATION	//{{{ getRowCount() method
WITHOUT_CLASSIFICATION	//{{{ getRowCount() method
WITHOUT_CLASSIFICATION	//{{{ getColumnName() method
WITHOUT_CLASSIFICATION	//{{{ getValueAt() method
WITHOUT_CLASSIFICATION	//{{{ getValueAt() method
WITHOUT_CLASSIFICATION	//{{{ TableMouseHandler class
WITHOUT_CLASSIFICATION	//{{{ add() method
WITHOUT_CLASSIFICATION	//{{{ add() method
WITHOUT_CLASSIFICATION	//{{{ add() method
WITHOUT_CLASSIFICATION	//{{{ Renderer class
WITHOUT_CLASSIFICATION	//{{{ SelectionHandler class
WITHOUT_CLASSIFICATION	//{{{ isCellEditable() method
WITHOUT_CLASSIFICATION	//{{{ setValueAt() method
WITHOUT_CLASSIFICATION	//{{{ sort() method
WITHOUT_CLASSIFICATION	//{{{ sort() method
WITHOUT_CLASSIFICATION	//{{{ edit() method
WITHOUT_CLASSIFICATION	//{{{ toHashtable() method
WITHOUT_CLASSIFICATION	//{{{ HeaderMouseHandler class
WITHOUT_CLASSIFICATION	//{{{ toHashtable() method
WITHOUT_CLASSIFICATION	//{{{ AbbrevsModel class
WITHOUT_CLASSIFICATION	//{{{ AbbrevsModel constructor
WITHOUT_CLASSIFICATION	//{{{ AbbrevsModel constructor
WITHOUT_CLASSIFICATION	//{{{ AbbrevCompare class
WITHOUT_CLASSIFICATION	//{{{ Abbrev class
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ getColumnName() method
WITHOUT_CLASSIFICATION	//{{{ updateEnabled() method
WITHOUT_CLASSIFICATION	//{{{ isCellEditable() method
WITHOUT_CLASSIFICATION	//{{{ setValueAt() method
WITHOUT_CLASSIFICATION	//{{{ AbbrevCompare class
WITHOUT_CLASSIFICATION	/* Ignore case when sorting */
WITHOUT_CLASSIFICATION	//{{{ BrowserOptionPane constructor
WITHOUT_CLASSIFICATION	/* Show menu bar */
WITHOUT_CLASSIFICATION	/* Default directory */
WITHOUT_CLASSIFICATION	/* split VFSFileDialog horizontally */
WITHOUT_CLASSIFICATION	/* Show tool bar */
WITHOUT_CLASSIFICATION	/* Show icons */
WITHOUT_CLASSIFICATION	/* Mix files and directories */
WITHOUT_CLASSIFICATION	/* Show hidden files */
WITHOUT_CLASSIFICATION	/* Beep on search auto wrap */
WITHOUT_CLASSIFICATION	//{{{ ViewOptionPane constructor
WITHOUT_CLASSIFICATION	/* Double-click close */
WITHOUT_CLASSIFICATION	/* Show full path */
WITHOUT_CLASSIFICATION	//{{{ AppearanceOptionPane constructor
WITHOUT_CLASSIFICATION	/* View dock layout */
WITHOUT_CLASSIFICATION	/* Show search bar */
WITHOUT_CLASSIFICATION	/* Primary Metal L&F font */
WITHOUT_CLASSIFICATION	/* Show buffer switcher */
WITHOUT_CLASSIFICATION	/* Menu spillover count */
WITHOUT_CLASSIFICATION	/* Look and feel */
WITHOUT_CLASSIFICATION	/* History count */
WITHOUT_CLASSIFICATION	/* Secondary Metal L&F font */
WITHOUT_CLASSIFICATION	/* Use jEdit colors in all text components */
WITHOUT_CLASSIFICATION	/* Show tip of the day */
WITHOUT_CLASSIFICATION	/* Show splash screen */
WITHOUT_CLASSIFICATION	/* Decorate frames with look and feel (JDK 1.4 only) */
WITHOUT_CLASSIFICATION	/* Decorate dialogs with look and feel (JDK 1.4 only) */
WITHOUT_CLASSIFICATION	//{{{ PrintOptionPane constructor
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Constructor
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _init() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ _save() method
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	//{{{ getEntry() method
WITHOUT_CLASSIFICATION	//{{{ Entry class
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ getColumnCount() method
WITHOUT_CLASSIFICATION	//{{{ getRowCount() method
WITHOUT_CLASSIFICATION	//{{{ getColumnName() method
WITHOUT_CLASSIFICATION	//{{{ getColumnClass() method
WITHOUT_CLASSIFICATION	//{{{ getValueAt() method
WITHOUT_CLASSIFICATION	//{{{ isCellEditable() method
WITHOUT_CLASSIFICATION	/* Font */
WITHOUT_CLASSIFICATION	/* Line numbering */
WITHOUT_CLASSIFICATION	/* Tab size */
WITHOUT_CLASSIFICATION	/* Header */
WITHOUT_CLASSIFICATION	/* Persistent markers */
WITHOUT_CLASSIFICATION	/* Footer */
WITHOUT_CLASSIFICATION	//{{{ GeneralOptionPane constructor
WITHOUT_CLASSIFICATION	/* Color */
WITHOUT_CLASSIFICATION	/* Auto detect encoding */
WITHOUT_CLASSIFICATION	/* Line separator */
WITHOUT_CLASSIFICATION	/* Sort recent file list */
WITHOUT_CLASSIFICATION	/* Force 1.3 print dialog */
WITHOUT_CLASSIFICATION	/* Default file encoding */
WITHOUT_CLASSIFICATION	/* Check mod status on focus */
WITHOUT_CLASSIFICATION	/* Create the plugin table */
WITHOUT_CLASSIFICATION	/* Recent file list size */
WITHOUT_CLASSIFICATION	/* Save caret positions */
WITHOUT_CLASSIFICATION	/* Sort buffers by names */
WITHOUT_CLASSIFICATION	/* Session management */
WITHOUT_CLASSIFICATION	/* Confirm save all */
WITHOUT_CLASSIFICATION	/* Sort buffers */
WITHOUT_CLASSIFICATION	/* Two-stage save */
WITHOUT_CLASSIFICATION	//{{{ ManagePanel constructor
WITHOUT_CLASSIFICATION	/* Strip trailing EOL */
WITHOUT_CLASSIFICATION	/* Create button panel */
WITHOUT_CLASSIFICATION	//{{{ showListConfirm() method
WITHOUT_CLASSIFICATION	//{{{ PluginTableModel class
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ unloadPluginJAR() method
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ add() method
WITHOUT_CLASSIFICATION	//{{{ setValueAt() method
WITHOUT_CLASSIFICATION	//{{{ sort() method
WITHOUT_CLASSIFICATION	//{{{ HeaderMouseHandler class
WITHOUT_CLASSIFICATION	//{{{ Mirror class
WITHOUT_CLASSIFICATION	//{{{ setSortType() method
WITHOUT_CLASSIFICATION	//{{{ unloadPluginJARWithDialog() method
WITHOUT_CLASSIFICATION	//{{{ loadExtraJARsIfNecessary() method
WITHOUT_CLASSIFICATION	//{{{ HelpButton class
WITHOUT_CLASSIFICATION	//{{{ transitiveClosure() method
WITHOUT_CLASSIFICATION	//{{{ TextRenderer class
WITHOUT_CLASSIFICATION	//{{{ EntryCompare class
WITHOUT_CLASSIFICATION	//{{{ HideLibrariesButton class
WITHOUT_CLASSIFICATION	//{{{ MirrorCompare class
WITHOUT_CLASSIFICATION	//{{{ RemoveButton class
WITHOUT_CLASSIFICATION	//{{{ MirrorList constructor
WITHOUT_CLASSIFICATION	//{{{ finished() method
WITHOUT_CLASSIFICATION	//{{{ PluginList constructor
WITHOUT_CLASSIFICATION	//{{{ addPlugin() method
WITHOUT_CLASSIFICATION	//{{{ addPluginSet() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ handleMessage() method
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	// this will result in a slight speed up, since we // don't need to read the DTD anyway, as AElfred is // non-validating
WITHOUT_CLASSIFICATION	//{{{ dispose() method
WITHOUT_CLASSIFICATION	// end HandlerBase implementation
WITHOUT_CLASSIFICATION	//{{{ dump() method
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ finished() method
WITHOUT_CLASSIFICATION	//{{{ Dependency class
WITHOUT_CLASSIFICATION	// after the entire list is loaded, fill out plugin field // in dependencies
WITHOUT_CLASSIFICATION	//{{{ PluginSet class
WITHOUT_CLASSIFICATION	//branch.satisfyDependencies(roster,installDirectory, //	downloadSource);
WITHOUT_CLASSIFICATION	//{{{ Plugin class
WITHOUT_CLASSIFICATION	//String installed; //String installedVersion;
WITHOUT_CLASSIFICATION	//{{{ Branch class
WITHOUT_CLASSIFICATION	// Force the install tab to refresh for possible // change of mirror
WITHOUT_CLASSIFICATION	// only used if what is "plugin"
WITHOUT_CLASSIFICATION	//{{{ getPluginList() method
WITHOUT_CLASSIFICATION	//{{{ getInstance() method
WITHOUT_CLASSIFICATION	//{{{ showPluginManager() method
WITHOUT_CLASSIFICATION	/* Setup panes */
WITHOUT_CLASSIFICATION	//{{{ PluginManager constructor
WITHOUT_CLASSIFICATION	//{{{ updatePluginList() method
WITHOUT_CLASSIFICATION	/* Create the buttons */
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Variables
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	//{{{ Entry class
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ getColumnCount() method
WITHOUT_CLASSIFICATION	//{{{ getRowCount() method
WITHOUT_CLASSIFICATION	//{{{ getColumnName() method
WITHOUT_CLASSIFICATION	//{{{ getColumnClass() method
WITHOUT_CLASSIFICATION	//{{{ getValueAt() method
WITHOUT_CLASSIFICATION	//{{{ clear() method
WITHOUT_CLASSIFICATION	//{{{ isCellEditable() method
WITHOUT_CLASSIFICATION	//{{{ setValueAt() method
WITHOUT_CLASSIFICATION	//{{{ sort() method
WITHOUT_CLASSIFICATION	//{{{ HeaderMouseHandler class
WITHOUT_CLASSIFICATION	//{{{ PluginTableModel class
WITHOUT_CLASSIFICATION	//{{{ setSortType() method
WITHOUT_CLASSIFICATION	//{{{ EntryCompare class
WITHOUT_CLASSIFICATION	//{{{ PluginInfoBox class
WITHOUT_CLASSIFICATION	//{{{ ListUpdater class
WITHOUT_CLASSIFICATION	/* Create buttons */
WITHOUT_CLASSIFICATION	//{{{ InstallPanel constructor
WITHOUT_CLASSIFICATION	/* Setup the table */
WITHOUT_CLASSIFICATION	//{{{ updateModel() method
WITHOUT_CLASSIFICATION	/* Create description */
WITHOUT_CLASSIFICATION	//{{{ SizeLabel class
WITHOUT_CLASSIFICATION	//{{{ formatSize() method
WITHOUT_CLASSIFICATION	//{{{ setSelectAll() method
WITHOUT_CLASSIFICATION	//{{{ SelectallButton class
WITHOUT_CLASSIFICATION	//{{{ isDownloadingList() method
WITHOUT_CLASSIFICATION	//{{{ InstallButton class
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Constructor
WITHOUT_CLASSIFICATION	//{{{ Variables
WITHOUT_CLASSIFICATION	// this will result in a slight speed up, since we // don't need to read the DTD anyway, as AElfred is // non-validating
WITHOUT_CLASSIFICATION	//{{{ WindowHandler class
WITHOUT_CLASSIFICATION	//{{{ resolveEntity() method
WITHOUT_CLASSIFICATION	//{{{ attribute() method
WITHOUT_CLASSIFICATION	//{{{ doctypeDecl() method
WITHOUT_CLASSIFICATION	//{{{ charData() method
WITHOUT_CLASSIFICATION	//{{{ startElement() method
WITHOUT_CLASSIFICATION	//{{{ endElement() method
WITHOUT_CLASSIFICATION	//{{{ startDocument() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ PluginManagerProgress constructor
WITHOUT_CLASSIFICATION	//{{{ TextRenderer
WITHOUT_CLASSIFICATION	//{{{ RosterThread class
WITHOUT_CLASSIFICATION	//{{{ endDocument() method
WITHOUT_CLASSIFICATION	//{{{ setValue() method
WITHOUT_CLASSIFICATION	//{{{ BufferPrintable constructor
WITHOUT_CLASSIFICATION	//{{{ done() method
WITHOUT_CLASSIFICATION	// progress value as of start of current task
WITHOUT_CLASSIFICATION	// Change any white text to black
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Static variables
WITHOUT_CLASSIFICATION	//buffer.readLock();
WITHOUT_CLASSIFICATION	//buffer.readUnlock();
WITHOUT_CLASSIFICATION	//{{{ printPage() method
WITHOUT_CLASSIFICATION	//{{{ print() method
WITHOUT_CLASSIFICATION	//{{{ print() method
WITHOUT_CLASSIFICATION	//{{{ print() method
WITHOUT_CLASSIFICATION	//{{{ print() method
WITHOUT_CLASSIFICATION	//{{{ calculate tab size
WITHOUT_CLASSIFICATION	//{{{ nextTabStop() method
WITHOUT_CLASSIFICATION	//{{{ determine line number width
WITHOUT_CLASSIFICATION	//{{{ paintHeader() method
WITHOUT_CLASSIFICATION	// the +1's ensure that 99 gets 3 digits, 103 gets 4 digits, // and so on.
WITHOUT_CLASSIFICATION	//no need to always keep the same job name for every printout.
WITHOUT_CLASSIFICATION	// now that we know how many chars there are, get the width.
WITHOUT_CLASSIFICATION	//{{{ getPrintJob() method
WITHOUT_CLASSIFICATION	//{{{ paintFooter() method
WITHOUT_CLASSIFICATION	//{{{ getPrintJob() method
WITHOUT_CLASSIFICATION	//{{{ PrintTabExpander class
WITHOUT_CLASSIFICATION	//{{{ getPageFormat() method
WITHOUT_CLASSIFICATION	//{{{ PrintTabExpander constructor
WITHOUT_CLASSIFICATION	//{{{ getPageFormat() method
WITHOUT_CLASSIFICATION	//format.setOrientation(PageFormat.PORTRAIT);
WITHOUT_CLASSIFICATION	//{{{ pageSetup() method
WITHOUT_CLASSIFICATION	//{{{ pageSetup() method
WITHOUT_CLASSIFICATION	//for backwards compatibility, the color variable is stored also as a property
WITHOUT_CLASSIFICATION	//for backwards compatibility, the color variable is stored also as a property
WITHOUT_CLASSIFICATION	//convert from PrintRequestAttributeSet to the pageFormat
WITHOUT_CLASSIFICATION	//{{{ savePrintSpec() method
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ update() method
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	//{{{ getCode() method
WITHOUT_CLASSIFICATION	//doesnt exist?? //pf.setOrientation(PageFormat.REVERSE_PORTRAIT); //then just do the next best thing
WITHOUT_CLASSIFICATION	//{{{ getBuffer() method
WITHOUT_CLASSIFICATION	// if 'temp' is true, hide search bar after user is done with it
WITHOUT_CLASSIFICATION	//{{{ getField() method
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	//{{{ getSelection() method
WITHOUT_CLASSIFICATION	//{{{ Occur constructor
WITHOUT_CLASSIFICATION	//{{{ bufferClosed() method
WITHOUT_CLASSIFICATION	// cached for speed
WITHOUT_CLASSIFICATION	//{{{ bufferClosed() method
WITHOUT_CLASSIFICATION	//{{{ goTo() method
WITHOUT_CLASSIFICATION	//{{{ Create the timer used by incremental search
WITHOUT_CLASSIFICATION	//{{{ HyperSearchResult constructor
WITHOUT_CLASSIFICATION	//{{{ addOccur() method
WITHOUT_CLASSIFICATION	//{{{ bufferOpened() method
WITHOUT_CLASSIFICATION	//{{{ bufferOpened() method
WITHOUT_CLASSIFICATION	//{{{ getFirstFile() method
WITHOUT_CLASSIFICATION	//{{{ pathEquals() method
WITHOUT_CLASSIFICATION	//{{{ getFileCount() method
WITHOUT_CLASSIFICATION	//{{{ Occur class
WITHOUT_CLASSIFICATION	//{{{ getNextFile() method
WITHOUT_CLASSIFICATION	// not supported for arbitriary filesets
WITHOUT_CLASSIFICATION	// -1 so that the last isn't checked
WITHOUT_CLASSIFICATION	// not found at all.
WITHOUT_CLASSIFICATION	//{{{ getFiles() method
WITHOUT_CLASSIFICATION	//{{{ invalidateCachedList() method
WITHOUT_CLASSIFICATION	//{{{ SearchBar constructor
WITHOUT_CLASSIFICATION	//{{{ setHyperSearch() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ getDirectory() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ setDirectory() method
WITHOUT_CLASSIFICATION	//{{{ KeyHandler class
WITHOUT_CLASSIFICATION	//{{{ DocumentHandler class
WITHOUT_CLASSIFICATION	//{{{ insertUpdate() method
WITHOUT_CLASSIFICATION	//{{{ insertUpdate() method
WITHOUT_CLASSIFICATION	//{{{ removeUpdate() method
WITHOUT_CLASSIFICATION	//{{{ removeUpdate() method
WITHOUT_CLASSIFICATION	//{{{ changedUpdate() method
WITHOUT_CLASSIFICATION	//{{{ changedUpdate() method
WITHOUT_CLASSIFICATION	// not found at all.
WITHOUT_CLASSIFICATION	//{{{ find() method
WITHOUT_CLASSIFICATION	// close button only there if 'temp' is true
WITHOUT_CLASSIFICATION	//{{{ If nothing entered, show search and replace dialog box
WITHOUT_CLASSIFICATION	//}}} //{{{ HyperSearch
WITHOUT_CLASSIFICATION	//}}} //{{{ Incremental search
WITHOUT_CLASSIFICATION	// on enter, start search from end // of current match to find next one
WITHOUT_CLASSIFICATION	// not found. start from // beginning
WITHOUT_CLASSIFICATION	// inform user search restarted
WITHOUT_CLASSIFICATION	// beep if beep property set
WITHOUT_CLASSIFICATION	//{{{ incrementalSearch() method
WITHOUT_CLASSIFICATION	/* For example, if the current fileset is a directory,		 * C+g will find the next match within that fileset.		 * This can be annoying if you have just done an		 * incremental search and want the next occurrence		 * in the current buffer. */
WITHOUT_CLASSIFICATION	//{{{ timerIncrementalSearch() method
WITHOUT_CLASSIFICATION	// on insert, start search from beginning of // current match. This will continue to highlight // the current match until another match is found
WITHOUT_CLASSIFICATION	// on backspace, restart from beginning
WITHOUT_CLASSIFICATION	// on backspace, restart from beginning
WITHOUT_CLASSIFICATION	// don't beep if not found. // subsequent beeps are very // annoying when backspacing an // invalid search string.
WITHOUT_CLASSIFICATION	//{{{ DirectoryListSet constructor
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ handleMessage() method
WITHOUT_CLASSIFICATION	//{{{ getCode() method
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	//{{{ removeNotify() method
WITHOUT_CLASSIFICATION	//{{{ KeyHandler class
WITHOUT_CLASSIFICATION	//{{{ focusOnDefaultComponent() method
WITHOUT_CLASSIFICATION	//{{{ addNotify() method
WITHOUT_CLASSIFICATION	// on insert, start search from beginning of // current match. This will continue to highlight // the current match until another match is found
WITHOUT_CLASSIFICATION	// don't beep if not found. // subsequent beeps are very // annoying when backspacing an // invalid search string.
WITHOUT_CLASSIFICATION	//{{{ setRecursive() method
WITHOUT_CLASSIFICATION	// reverse regexp search // not supported yet, so // 'simulate' with restart
WITHOUT_CLASSIFICATION	// reverse regexp search // not supported yet, so // 'simulate' with restart
WITHOUT_CLASSIFICATION	//{{{ getTreeModel() method
WITHOUT_CLASSIFICATION	//{{{ getFileFilter() method
WITHOUT_CLASSIFICATION	//{{{ _getFiles() method
WITHOUT_CLASSIFICATION	//{{{ setFileFilter() method
WITHOUT_CLASSIFICATION	//{{{ isRecursive() method
WITHOUT_CLASSIFICATION	//{{{ getTree() method
WITHOUT_CLASSIFICATION	//{{{ HyperSearchResults constructor
WITHOUT_CLASSIFICATION	//{{{ searchDone() method
WITHOUT_CLASSIFICATION	//{{{ visitBuffers() method
WITHOUT_CLASSIFICATION	//{{{ searchStarted() method
WITHOUT_CLASSIFICATION	// BufferUpdate.CLOSED
WITHOUT_CLASSIFICATION	//{{{ updateMultiStatus() method
WITHOUT_CLASSIFICATION	//{{{ searchFailed() method
WITHOUT_CLASSIFICATION	// collapse all nodes, as suggested on user mailing list...
WITHOUT_CLASSIFICATION	//{{{ goToSelectedNode() method
WITHOUT_CLASSIFICATION	// do nothing if clicked "foo (showing n occurrences in m files)"
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ mousePressed() method
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ Getters and setters
WITHOUT_CLASSIFICATION	//{{{ showPopupMenu method
WITHOUT_CLASSIFICATION	//{{{ ResultCellRenderer class
WITHOUT_CLASSIFICATION	//{{{ RemoveTreeNodeAction class
WITHOUT_CLASSIFICATION	//{{{ ResultVisitor interface
WITHOUT_CLASSIFICATION	//{{{ RemoveAllTreeNodesAction class
WITHOUT_CLASSIFICATION	//{{{ ResultCellRenderer constructor
WITHOUT_CLASSIFICATION	//{{{ getRegexp() method
WITHOUT_CLASSIFICATION	//{{{ getTreeCellRendererComponent() method
WITHOUT_CLASSIFICATION	//{{{ BufferLoadedVisitor class
WITHOUT_CLASSIFICATION	//{{{ setIgnoreCase() method
WITHOUT_CLASSIFICATION	//{{{ BufferClosedVisitor class
WITHOUT_CLASSIFICATION	//{{{ Match class
WITHOUT_CLASSIFICATION	//{{{ setReverseSearch() method
WITHOUT_CLASSIFICATION	//{{{ getIgnoreCase() method
WITHOUT_CLASSIFICATION	//{{{ getBeanShellReplace() method
WITHOUT_CLASSIFICATION	//{{{ setRegexp() method
WITHOUT_CLASSIFICATION	//{{{ getReverseSearch() method
WITHOUT_CLASSIFICATION	//{{{ setAutoWrap() method
WITHOUT_CLASSIFICATION	//{{{ setBeanShellReplace() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ dispose() method
WITHOUT_CLASSIFICATION	//{{{ find() method
WITHOUT_CLASSIFICATION	//{{{ find() method
WITHOUT_CLASSIFICATION	//{{{ find() method
WITHOUT_CLASSIFICATION	// beep if beep property set
WITHOUT_CLASSIFICATION	//{{{ setSearchFileSet() method
WITHOUT_CLASSIFICATION	//{{{ getAutoWrap() method
WITHOUT_CLASSIFICATION	//{{{ setSearchMatcher() method
WITHOUT_CLASSIFICATION	// start search from beginning
WITHOUT_CLASSIFICATION	//{{{ getSearchMatcher() method
WITHOUT_CLASSIFICATION	//{{{ Actions
WITHOUT_CLASSIFICATION	//{{{ getSearchFileSet() method
WITHOUT_CLASSIFICATION	// component that will parent any dialog boxes
WITHOUT_CLASSIFICATION	//{{{ getSmartCaseReplace() method
WITHOUT_CLASSIFICATION	//{{{ hyperSearch() method
WITHOUT_CLASSIFICATION	//{{{ hyperSearch() method
WITHOUT_CLASSIFICATION	// component that will parent any dialog boxes
WITHOUT_CLASSIFICATION	// component that will parent any dialog boxes
WITHOUT_CLASSIFICATION	// component that will parent any dialog boxes
WITHOUT_CLASSIFICATION	// component that will parent any dialog boxes
WITHOUT_CLASSIFICATION	// Wait for the buffer to load
WITHOUT_CLASSIFICATION	// the start and end flags will be wrong with reverse search enabled, // but they are only used by the regexp matcher, which doesn't // support reverse search yet. // // REMIND: fix flags when adding reverse regexp search.
WITHOUT_CLASSIFICATION	// make sure end of match is visible
WITHOUT_CLASSIFICATION	// make sure start of match is visible
WITHOUT_CLASSIFICATION	//{{{ replace() method
WITHOUT_CLASSIFICATION	//{{{ replace() method
WITHOUT_CLASSIFICATION	// so that Replace and Find continues from // the right location
WITHOUT_CLASSIFICATION	//{{{ replaceAll() method
WITHOUT_CLASSIFICATION	// Wait for buffer to finish loading
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ handleMessage() method
WITHOUT_CLASSIFICATION	//{{{ record() method
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ load() method
WITHOUT_CLASSIFICATION	//{{{ ok() method
WITHOUT_CLASSIFICATION	//{{{ cancel() method
WITHOUT_CLASSIFICATION	//{{{ Constants
WITHOUT_CLASSIFICATION	//{{{ preloadSearchDialog() method
WITHOUT_CLASSIFICATION	/* Don't do this when playing a macro, cos it's annoying */
WITHOUT_CLASSIFICATION	//{{{ handleError() method
WITHOUT_CLASSIFICATION	// Tags plugin likes to call this method at times other than // startup; so we need to fire a SearchSettingsChanged to // notify the search bar and so on.
WITHOUT_CLASSIFICATION	//{{{ regexpBeanShellReplace() method
WITHOUT_CLASSIFICATION	//{{{ initReplace() method
WITHOUT_CLASSIFICATION	// only record this if doing a find next
WITHOUT_CLASSIFICATION	//{{{ regexpReplace() method
WITHOUT_CLASSIFICATION	//{{{ replaceInSelection() method
WITHOUT_CLASSIFICATION	//{{{ showSearchDialog() method
WITHOUT_CLASSIFICATION	//{{{ _replace() method
WITHOUT_CLASSIFICATION	//{{{ literalBeanShellReplace() method
WITHOUT_CLASSIFICATION	//{{{ replaceOne() method
WITHOUT_CLASSIFICATION	//{{{ replaceOne() method
WITHOUT_CLASSIFICATION	//{{{ getColumnOnOtherLine() method
WITHOUT_CLASSIFICATION	//{{{ getSearchDialog() method
WITHOUT_CLASSIFICATION	// might be already selected, see above.
WITHOUT_CLASSIFICATION	/* this property is only loaded and saved if				 * the 'current buffer' file set is selected.				 * otherwise, it defaults to on. */
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	// can't happen
WITHOUT_CLASSIFICATION	//{{{ getCode() method
WITHOUT_CLASSIFICATION	//{{{ save() method
WITHOUT_CLASSIFICATION	//{{{ load() method
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ createFieldPanel() method
WITHOUT_CLASSIFICATION	//{{{ updateEnabled() method
WITHOUT_CLASSIFICATION	//{{{ getFileFilter() method
WITHOUT_CLASSIFICATION	//{{{ SearchDialog constructor
WITHOUT_CLASSIFICATION	// fields
WITHOUT_CLASSIFICATION	// search settings
WITHOUT_CLASSIFICATION	/* replaceBtn = new JButton(jEdit.getProperty("search.replaceBtn"));		replaceBtn.setMnemonic(jEdit.getProperty("search.replaceBtn.mnemonic")			.charAt(0));		grid.add(replaceBtn);		replaceBtn.addActionListener(actionHandler); */
WITHOUT_CLASSIFICATION	// multifile settings
WITHOUT_CLASSIFICATION	//{{{ createSearchSettingsPanel() method
WITHOUT_CLASSIFICATION	// buttons
WITHOUT_CLASSIFICATION	//{{{ closeOrKeepDialog() method
WITHOUT_CLASSIFICATION	/* replaceBtn, */
WITHOUT_CLASSIFICATION	/* replaceBtn, */
WITHOUT_CLASSIFICATION	/* replaceBtn, */
WITHOUT_CLASSIFICATION	/* replaceBtn, */
WITHOUT_CLASSIFICATION	// prevents us from handling SearchSettingsChanged // as a result of below
WITHOUT_CLASSIFICATION	//{{{ createMultiFilePanel() method
WITHOUT_CLASSIFICATION	// source is directory or filter field
WITHOUT_CLASSIFICATION	//{{{ createButtonsPanel() method
WITHOUT_CLASSIFICATION	//{{{ synchronizeMultiFileSettings() method
WITHOUT_CLASSIFICATION	//{{{ ReplaceActionHandler class
WITHOUT_CLASSIFICATION	// source is directory or filter field
WITHOUT_CLASSIFICATION	//{{{ SettingsActionHandler class
WITHOUT_CLASSIFICATION	//{{{ MyJRadioButton class
WITHOUT_CLASSIFICATION	//{{{ MultiFileActionHandler class
WITHOUT_CLASSIFICATION	//{{{ ButtonActionHandler class
WITHOUT_CLASSIFICATION	//{{{ AllBufferSet constructor
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ getCode() method
WITHOUT_CLASSIFICATION	//{{{ run() method
WITHOUT_CLASSIFICATION	//{{{ getFirstFile() method
WITHOUT_CLASSIFICATION	//{{{ getNextFile() method
WITHOUT_CLASSIFICATION	//{{{ getFiles() method
WITHOUT_CLASSIFICATION	//{{{ getFileCount() method
WITHOUT_CLASSIFICATION	//{{{ _getFiles() method
WITHOUT_CLASSIFICATION	//{{{ searchInSelection() method
WITHOUT_CLASSIFICATION	// just as if Enter was pressed in another // text field
WITHOUT_CLASSIFICATION	// just as if Enter was pressed in another // text field
WITHOUT_CLASSIFICATION	// to minimise synchronization and stuff like that, we only // show a status message at most twice a second
WITHOUT_CLASSIFICATION	//{{{ HyperSearchRequest constructor
WITHOUT_CLASSIFICATION	//{{{ match() method
WITHOUT_CLASSIFICATION	// initially zero, so that we always show the first message
WITHOUT_CLASSIFICATION	//{{{ BoyerMooreSearchMatcher constructor
WITHOUT_CLASSIFICATION	//{{{ doHyperSearch() method
WITHOUT_CLASSIFICATION	//{{{ doHyperSearch() method
WITHOUT_CLASSIFICATION	//{{{ doHyperSearch() method
WITHOUT_CLASSIFICATION	//{{{ nextMatch() method
WITHOUT_CLASSIFICATION	// position variable for pattern test position
WITHOUT_CLASSIFICATION	/*	 *  a good introduction to the Boyer-Moore fast string matching	 *  algorithm may be found on Moore's website at:	 *	 *   http://www.cs.utexas.edu/users/moore/best-ideas/string-searching/	 *	 */
WITHOUT_CLASSIFICATION	// pattern test
WITHOUT_CLASSIFICATION	// position variable for pattern start
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ nextMatch() method
WITHOUT_CLASSIFICATION	// heuristic #2
WITHOUT_CLASSIFICATION	// last possible start position of a match with this pattern; // this is negative if the pattern is longer than the text // causing the search loop below to immediately fail //int last_anchor = reverseSearch //	? offset + pattern.length - 1 //	: length - pattern.length;
WITHOUT_CLASSIFICATION	// the search works by starting the anchor (first character // of the pattern) at the initial offset. as long as the // anchor is far enough from the enough of the text for the // pattern to match, and until the pattern matches, we // compare the pattern to the text from the last character // to the first character in reverse order. where a character // in the pattern mismatches, we use the two heuristics // based on the mismatch character and its position in the // pattern to determine the furthest we can move the anchor // without missing any potential pattern matches.
WITHOUT_CLASSIFICATION	// character mismatch, determine how many characters to skip
WITHOUT_CLASSIFICATION	// go back to the while loop
WITHOUT_CLASSIFICATION	// heuristic #1
WITHOUT_CLASSIFICATION	// MISMATCH: return -1 as defined by API
WITHOUT_CLASSIFICATION	// skip the greater of the two distances provided by the // heuristics
WITHOUT_CLASSIFICATION	// Boyer-Moore helper methods
WITHOUT_CLASSIFICATION	// MATCH: return the position of its first character
WITHOUT_CLASSIFICATION	// leave the table cleanly-initialized for an empty pattern
WITHOUT_CLASSIFICATION	// Boyer-Moore member fields
WITHOUT_CLASSIFICATION	/*	 *  the 'skip' array is used to determine for each index in the	 *  hashed alphabet how many characters can be skipped if	 *  a mismatch occurs on a characater hashing to that index.	 */
WITHOUT_CLASSIFICATION	//{{{ generateSkipArray() method
WITHOUT_CLASSIFICATION	// initialize the skip array to all zeros
WITHOUT_CLASSIFICATION	/*	 *  to avoid our skip table having a length of 2 ^ 16, we hash each	 *  character of the input into a character in the alphabet [\x00-\xFF]	 *  using the lower 8 bits of the character's value (resulting in	 *  a more reasonable skip table of length 2 ^ 8).	 *	 *  the result of this is that more than one character can hash to the	 *  same index, but since the skip table encodes the position of	 *  occurence of the character furthest into the string with a particular	 *  index (whether or not it is the only character with that index), an	 *  index collision only means that that this heuristic will give a	 *  sub-optimal skip (i.e. a complete skip table could use the differences	 *  between colliding characters to maximal effect, at the expense of	 *  building a table that is over 2 orders of magnitude larger and very	 *  sparse).	 */
WITHOUT_CLASSIFICATION	//{{{ getSkipIndex() method
WITHOUT_CLASSIFICATION	//{{{ generateSuffixArray() method
WITHOUT_CLASSIFICATION	//{{{ RESearchMatcher constructor
WITHOUT_CLASSIFICATION	// never mind
WITHOUT_CLASSIFICATION	//{{{ stringToToken() method
WITHOUT_CLASSIFICATION	//{{{ createToken() method
WITHOUT_CLASSIFICATION	//{{{ addToken() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Protected members
WITHOUT_CLASSIFICATION	//{{{ add() method
WITHOUT_CLASSIFICATION	//{{{ add() method
WITHOUT_CLASSIFICATION	//{{{ add() method
WITHOUT_CLASSIFICATION	//{{{ getLineContext() method
WITHOUT_CLASSIFICATION	//{{{ setLineContext() method
WITHOUT_CLASSIFICATION	//{{{ setIgnoreCase() method
WITHOUT_CLASSIFICATION	//{{{ getIgnoreCase() method
WITHOUT_CLASSIFICATION	// unless we are matching to the end of the buffer, // $ should not match on the end of the substring
WITHOUT_CLASSIFICATION	// unless we are matching from the start of the buffer, // ^ should not match on the beginning of the substring
WITHOUT_CLASSIFICATION	//{{{ lookup() method
WITHOUT_CLASSIFICATION	//{{{ reset() method
WITHOUT_CLASSIFICATION	//{{{ Token types
WITHOUT_CLASSIFICATION	//{{{ getTokens() method
WITHOUT_CLASSIFICATION	// Special:
WITHOUT_CLASSIFICATION	//{{{ getNonAlphaNumericChars() method
WITHOUT_CLASSIFICATION	//{{{ Token constructor
WITHOUT_CLASSIFICATION	//{{{ handleToken() method
WITHOUT_CLASSIFICATION	//{{{ regionMatches() method
WITHOUT_CLASSIFICATION	//{{{ TokenMarker constructor
WITHOUT_CLASSIFICATION	//{{{ getParserRuleSet() method
WITHOUT_CLASSIFICATION	//{{{ getKeywords() method
WITHOUT_CLASSIFICATION	//{{{ KeywordMap constructor
WITHOUT_CLASSIFICATION	//{{{ KeywordMap constructor
WITHOUT_CLASSIFICATION	//{{{ addRuleSet() method
WITHOUT_CLASSIFICATION	//{{{ getStringMapKey() method
WITHOUT_CLASSIFICATION	//{{{ getSegmentMapKey() method
WITHOUT_CLASSIFICATION	//{{{ Keyword class
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ markTokens() method
WITHOUT_CLASSIFICATION	//{{{ check if we have to stop parsing
WITHOUT_CLASSIFICATION	//{{{ getMainRuleSet() method
WITHOUT_CLASSIFICATION	//{{{ Set up some instance variables // this is to avoid having to pass around lots and lots of // parameters.
WITHOUT_CLASSIFICATION	//{{{ getRuleSet() method
WITHOUT_CLASSIFICATION	//{{{ See if the rule's start or end sequence matches here
WITHOUT_CLASSIFICATION	//{{{ getRuleSets() method
WITHOUT_CLASSIFICATION	//{{{ Main parser loop
WITHOUT_CLASSIFICATION	// stop checking rules if there was a match
WITHOUT_CLASSIFICATION	//{{{ check for end of delegate
WITHOUT_CLASSIFICATION	//{{{ Mark all remaining characters
WITHOUT_CLASSIFICATION	//{{{ check every rule
WITHOUT_CLASSIFICATION	//{{{ check if current character is a word separator
WITHOUT_CLASSIFICATION	//{{{ checkDelegateEnd() method
WITHOUT_CLASSIFICATION	//{{{ Unwind any NO_LINE_BREAK parent delegates
WITHOUT_CLASSIFICATION	//{{{ handleRule() method
WITHOUT_CLASSIFICATION	// move pos to last character of match sequence
WITHOUT_CLASSIFICATION	// check escape rule of parent
WITHOUT_CLASSIFICATION	//{{{ Some rules can only match in certain locations
WITHOUT_CLASSIFICATION	//{{{ SEQ
WITHOUT_CLASSIFICATION	// the end cannot be a regular expression
WITHOUT_CLASSIFICATION	/* substitute result of matching the rule start				 * into the end string.				 *				 * eg, in shell script mode, <<\s*(\w+) is				 * matched into \<$1\> to construct rules for				 * highlighting read-ins like this <<EOF				 * ...				 * EOF				 */
WITHOUT_CLASSIFICATION	//{{{ Check for an escape sequence
WITHOUT_CLASSIFICATION	//{{{ handleNoWordBreak() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ equals() method
WITHOUT_CLASSIFICATION	// this will result in a slight speed up, since we // don't need to read the DTD anyway, as AElfred is // non-validating
WITHOUT_CLASSIFICATION	//{{{ resolveEntity() method
WITHOUT_CLASSIFICATION	//{{{ attribute() method
WITHOUT_CLASSIFICATION	//{{{ hashCode() method
WITHOUT_CLASSIFICATION	//}}} //{{{ MARK_FOLLOWING
WITHOUT_CLASSIFICATION	// Instead of passing these around to each method, we just store them // as instance variables. Note that this is not thread-safe.
WITHOUT_CLASSIFICATION	// move pos to last character of match sequence
WITHOUT_CLASSIFICATION	// note that all regexps start with \A so they only // match the start of the string
WITHOUT_CLASSIFICATION	// a DELEGATE attribute on a SEQ changes the // ruleset from the end of the SEQ onwards
WITHOUT_CLASSIFICATION	//}}} //{{{ Handle start of rule
WITHOUT_CLASSIFICATION	// break out of inner for loop to check next char //}}} //{{{ Handle end of MARK_FOLLOWING
WITHOUT_CLASSIFICATION	//}}} //{{{ SPAN, EOL_SPAN
WITHOUT_CLASSIFICATION	//{{{ markKeyword() method
WITHOUT_CLASSIFICATION	//}}} //{{{ MARK_PREVIOUS
WITHOUT_CLASSIFICATION	//{{{ substitute() method
WITHOUT_CLASSIFICATION	//{{{ handleTokenWithSpaces() method
WITHOUT_CLASSIFICATION	//{{{ Do keywords
WITHOUT_CLASSIFICATION	//{{{ Do digits
WITHOUT_CLASSIFICATION	// used for SPAN_REGEXP rules; otherwise null
WITHOUT_CLASSIFICATION	// only match against regexp if its not all // digits; if all digits, no point matching
WITHOUT_CLASSIFICATION	//{{{ Handle any remaining crud
WITHOUT_CLASSIFICATION	//{{{ clone() method
WITHOUT_CLASSIFICATION	//{{{ LineContext class
WITHOUT_CLASSIFICATION	//{{{ intern() method
WITHOUT_CLASSIFICATION	//{{{ LineContext constructor
WITHOUT_CLASSIFICATION	//{{{ LineContext constructor
WITHOUT_CLASSIFICATION	//{{{ XModeHandler constructor
WITHOUT_CLASSIFICATION	//{{{ charArraysEqual() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	// can't happen
WITHOUT_CLASSIFICATION	//{{{ error() method
WITHOUT_CLASSIFICATION	//{{{ Protected members
WITHOUT_CLASSIFICATION	//{{{ doctypeDecl() method
WITHOUT_CLASSIFICATION	//{{{ charData() method
WITHOUT_CLASSIFICATION	//{{{ startElement() method
WITHOUT_CLASSIFICATION	//{{{ endElement() method
WITHOUT_CLASSIFICATION	//{{{ startDocument() method
WITHOUT_CLASSIFICATION	//{{{ pushElement() method
WITHOUT_CLASSIFICATION	//{{{ peekElement() method
WITHOUT_CLASSIFICATION	//{{{ popElement() method
WITHOUT_CLASSIFICATION	//{{{ getTokenMarker() method
WITHOUT_CLASSIFICATION	//{{{ getTokenMarker() method
WITHOUT_CLASSIFICATION	//{{{ endDocument() method
WITHOUT_CLASSIFICATION	//{{{ reset() method
WITHOUT_CLASSIFICATION	//{{{ handleToken() method
WITHOUT_CLASSIFICATION	//}}} //{{{ MARK_FOLLOWING
WITHOUT_CLASSIFICATION	//}}} //{{{ MARK_PREVIOUS
WITHOUT_CLASSIFICATION	//}}} //{{{ EOL_SPAN
WITHOUT_CLASSIFICATION	// mixed digit/alpha keyword, // and no regexp... don't // highlight as DIGIT
WITHOUT_CLASSIFICATION	//}}} //{{{ RULES
WITHOUT_CLASSIFICATION	//{{{ PROPERTY
WITHOUT_CLASSIFICATION	//}}} //{{{ TERMINATE
WITHOUT_CLASSIFICATION	//}}} //{{{ PROPS
WITHOUT_CLASSIFICATION	//}}} //{{{ IMPORT
WITHOUT_CLASSIFICATION	//}}} //{{{ SEQ_REGEXP
WITHOUT_CLASSIFICATION	//}}} //{{{ SEQ
WITHOUT_CLASSIFICATION	//}}} //{{{ SPAN_REGEXP
WITHOUT_CLASSIFICATION	//}}} //{{{ SPAN
WITHOUT_CLASSIFICATION	//{{{ getModeProperties() method
WITHOUT_CLASSIFICATION	//}}} //{{{ Keywords
WITHOUT_CLASSIFICATION	//}}} //{{{ EOL_SPAN_REGEXP
WITHOUT_CLASSIFICATION	//{{{ addKeyword() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ setLineContext() method
WITHOUT_CLASSIFICATION	//{{{ Major actions
WITHOUT_CLASSIFICATION	//{{{ paintChunkList() method
WITHOUT_CLASSIFICATION	//{{{ paintChunkBackgrounds() method
WITHOUT_CLASSIFICATION	// only paint visible chunks
WITHOUT_CLASSIFICATION	// only paint visible chunks
WITHOUT_CLASSIFICATION	//{{{ Chunk constructor
WITHOUT_CLASSIFICATION	// Useful for debugging purposes
WITHOUT_CLASSIFICATION	//{{{ Paint token background color if necessary
WITHOUT_CLASSIFICATION	//{{{ Chunk constructor
WITHOUT_CLASSIFICATION	//{{{ offsetToX() method
WITHOUT_CLASSIFICATION	//{{{ offsetToX() method
WITHOUT_CLASSIFICATION	//{{{ createSpanRule() method
WITHOUT_CLASSIFICATION	//{{{ xToOffset() method
WITHOUT_CLASSIFICATION	//{{{ xToOffset() method
WITHOUT_CLASSIFICATION	//{{{ getPositions() method
WITHOUT_CLASSIFICATION	// set up after init()
WITHOUT_CLASSIFICATION	//{{{ Action hints
WITHOUT_CLASSIFICATION	//{{{ Position match hints
WITHOUT_CLASSIFICATION	//{{{ createRegexpSpanRule() method
WITHOUT_CLASSIFICATION	//{{{ createSequenceRule() method
WITHOUT_CLASSIFICATION	//{{{ createEOLSpanRule() method
WITHOUT_CLASSIFICATION	//{{{ createRegexpSequenceRule() method
WITHOUT_CLASSIFICATION	//{{{ createRegexpEOLSpanRule() method
WITHOUT_CLASSIFICATION	//{{{ createMarkFollowingRule() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ getName() method
WITHOUT_CLASSIFICATION	//{{{ getProperties() method
WITHOUT_CLASSIFICATION	//{{{ setProperties() method
WITHOUT_CLASSIFICATION	//{{{ setIgnoreCase() method
WITHOUT_CLASSIFICATION	//{{{ getIgnoreCase() method
WITHOUT_CLASSIFICATION	//{{{ getKeywords() method
WITHOUT_CLASSIFICATION	//{{{ addRuleSet() method
WITHOUT_CLASSIFICATION	//{{{ getModeName() method
WITHOUT_CLASSIFICATION	//{{{ createMarkPreviousRule() method
WITHOUT_CLASSIFICATION	//{{{ setEscapeRule() method
WITHOUT_CLASSIFICATION	//{{{ createEscapeRule() method
WITHOUT_CLASSIFICATION	//{{{ getSetName() method
WITHOUT_CLASSIFICATION	//{{{ getStandardRuleSet() method
WITHOUT_CLASSIFICATION	//{{{ setKeywords() method
WITHOUT_CLASSIFICATION	//{{{ ParserRuleSet constructor
WITHOUT_CLASSIFICATION	//{{{ resolveImports() method
WITHOUT_CLASSIFICATION	//{{{ getHighlightDigits() method
WITHOUT_CLASSIFICATION	//{{{ addRule() method
WITHOUT_CLASSIFICATION	//{{{ getDefault() method
WITHOUT_CLASSIFICATION	//{{{ getRules() method
WITHOUT_CLASSIFICATION	//{{{ setHighlightDigits() method
WITHOUT_CLASSIFICATION	//{{{ getRuleCount() method
WITHOUT_CLASSIFICATION	//{{{ getTerminateChar() method
WITHOUT_CLASSIFICATION	//{{{ getDigitRegexp() method
WITHOUT_CLASSIFICATION	//{{{ setTerminateChar() method
WITHOUT_CLASSIFICATION	//{{{ setDefault() method
WITHOUT_CLASSIFICATION	//{{{ setDigitRegexp() method
WITHOUT_CLASSIFICATION	//{{{ getEscapeRule() method
WITHOUT_CLASSIFICATION	//{{{ getNoWordSep() method
WITHOUT_CLASSIFICATION	//{{{ setNoWordSep() method
WITHOUT_CLASSIFICATION	//{{{ isBuiltIn() method
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ bufferClosed() method
WITHOUT_CLASSIFICATION	//{{{ handleToken() method
WITHOUT_CLASSIFICATION	//{{{ setCharWidth() method
WITHOUT_CLASSIFICATION	// SILLY: allow for anti-aliased characters' "fuzz"
WITHOUT_CLASSIFICATION	//{{{ canMerge() method
WITHOUT_CLASSIFICATION	// don't have chunks longer than 100 characters to avoid slowing things down
WITHOUT_CLASSIFICATION	//{{{ getChunkList() method
WITHOUT_CLASSIFICATION	//{{{ textAreaDisposed() method
WITHOUT_CLASSIFICATION	//{{{ SyntaxStyle constructor
WITHOUT_CLASSIFICATION	//{{{ createChunk() method
WITHOUT_CLASSIFICATION	//{{{ Static part
WITHOUT_CLASSIFICATION	//{{{ initChunk() method
WITHOUT_CLASSIFICATION	//{{{ getForegroundColor() method
WITHOUT_CLASSIFICATION	//{{{ merge() method
WITHOUT_CLASSIFICATION	// in case already initialized; un-initialize it
WITHOUT_CLASSIFICATION	//{{{ getBackgroundColor() method
WITHOUT_CLASSIFICATION	//{{{ getDisplayManager() method
WITHOUT_CLASSIFICATION	//{{{ getFont() method
WITHOUT_CLASSIFICATION	//{{{ _notifyScreenLineChanges() method
WITHOUT_CLASSIFICATION	//{{{ getCharWidth() method
WITHOUT_CLASSIFICATION	// if we got here, no unused display manager in list
WITHOUT_CLASSIFICATION	//{{{ isLineVisible() method
WITHOUT_CLASSIFICATION	//{{{ releaseDisplayManager() method
WITHOUT_CLASSIFICATION	//{{{ getFirstVisibleLine() method
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ getScreenLineCount() method
WITHOUT_CLASSIFICATION	//{{{ getNextVisibleLine() method
WITHOUT_CLASSIFICATION	//{{{ getLastVisibleLine() method
WITHOUT_CLASSIFICATION	//{{{ getPrevVisibleLine() method
WITHOUT_CLASSIFICATION	/* start of next expanded range */
WITHOUT_CLASSIFICATION	/* in collapsed range */
WITHOUT_CLASSIFICATION	/* in collapsed range */
WITHOUT_CLASSIFICATION	/* start of next expanded range */
WITHOUT_CLASSIFICATION	/* beyond last visible line */
WITHOUT_CLASSIFICATION	/* equal to last visible line */
WITHOUT_CLASSIFICATION	/* last in expanded range */
WITHOUT_CLASSIFICATION	/* end of prev expanded range */
WITHOUT_CLASSIFICATION	/* next in expanded range */
WITHOUT_CLASSIFICATION	/* end of prev expanded range */
WITHOUT_CLASSIFICATION	/* before first visible line */
WITHOUT_CLASSIFICATION	/* prev in expanded range */
WITHOUT_CLASSIFICATION	/* equal to first visible line */
WITHOUT_CLASSIFICATION	/* first in expanded range */
WITHOUT_CLASSIFICATION	//{{{ Find fold start and end...
WITHOUT_CLASSIFICATION	//{{{ collapseFold() method
WITHOUT_CLASSIFICATION	//{{{ getScrollLineCount() method
WITHOUT_CLASSIFICATION	// scan backwards looking for the start
WITHOUT_CLASSIFICATION	// this line is the start of a fold
WITHOUT_CLASSIFICATION	// this line is the start of a fold
WITHOUT_CLASSIFICATION	// no folds in buffer
WITHOUT_CLASSIFICATION	// Collapse the fold...
WITHOUT_CLASSIFICATION	//{{{ expandFold() method
WITHOUT_CLASSIFICATION	// the first sub-fold. used by JEditTextArea.expandFold().
WITHOUT_CLASSIFICATION	//{{{ Find fold start and fold end...
WITHOUT_CLASSIFICATION	/* isLineVisible(i) && */
WITHOUT_CLASSIFICATION	//XXX
WITHOUT_CLASSIFICATION	//{{{ Expand the fold...
WITHOUT_CLASSIFICATION	// we need a different value of initialFoldLevel here!
WITHOUT_CLASSIFICATION	//{{{ expandAllFolds() method
WITHOUT_CLASSIFICATION	//{{{ expandFolds() method
WITHOUT_CLASSIFICATION	//{{{ expandFolds() method
WITHOUT_CLASSIFICATION	/* this ensures that the first line is always visible */
WITHOUT_CLASSIFICATION	//{{{ narrow() method
WITHOUT_CLASSIFICATION	// if we narrowed to a single collapsed fold
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ dispose() method
WITHOUT_CLASSIFICATION	//{{{ changed() method
WITHOUT_CLASSIFICATION	//{{{ changed() method
WITHOUT_CLASSIFICATION	//{{{ setScreenLineCount() method
WITHOUT_CLASSIFICATION	//{{{ reset() method
WITHOUT_CLASSIFICATION	//{{{ reset() method
WITHOUT_CLASSIFICATION	//{{{ _notifyScreenLineChanges() method
WITHOUT_CLASSIFICATION	//XXX
WITHOUT_CLASSIFICATION	// when the text area switches to us, it will do // a reset anyway
WITHOUT_CLASSIFICATION	// this notifies each display manager editing this // buffer of the screen line count change
WITHOUT_CLASSIFICATION	//{{{ fvmget() method
WITHOUT_CLASSIFICATION	//{{{ updateWrapSettings() method
WITHOUT_CLASSIFICATION	//{{{ DisplayManager constructor
WITHOUT_CLASSIFICATION	//{{{ showLineRange() method
WITHOUT_CLASSIFICATION	//{{{ fvmput() method
WITHOUT_CLASSIFICATION	//{{{ hideLineRange() method
WITHOUT_CLASSIFICATION	//{{{ fvmreset() method
WITHOUT_CLASSIFICATION	// important: not lineMgr.getScreenLineCount()
WITHOUT_CLASSIFICATION	//{{{ fvmput2() method
WITHOUT_CLASSIFICATION	// ScrollLineCount.changed() does the same // thing
WITHOUT_CLASSIFICATION	//{{{ fvmdump() method
WITHOUT_CLASSIFICATION	//{{{ _setScreenLineCount() method
WITHOUT_CLASSIFICATION	/* update fold visibility map. */
WITHOUT_CLASSIFICATION	/* update fold visibility map. */
WITHOUT_CLASSIFICATION	//{{{ FirstLine class
WITHOUT_CLASSIFICATION	//{{{ Anchor class
WITHOUT_CLASSIFICATION	//{{{ Debug code
WITHOUT_CLASSIFICATION	//{{{ ScrollLineCount class
WITHOUT_CLASSIFICATION	//{{{ Debug code
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ contentInserted() method
WITHOUT_CLASSIFICATION	//{{{ contentRemoved() method
WITHOUT_CLASSIFICATION	//{{{ foldLevelChanged() method
WITHOUT_CLASSIFICATION	//{{{ preContentRemoved() method
WITHOUT_CLASSIFICATION	//{{{ transactionComplete() method
WITHOUT_CLASSIFICATION	//{{{ foldHandlerChanged() method
WITHOUT_CLASSIFICATION	/* update fold visibility map. */
WITHOUT_CLASSIFICATION	//{{{ Debug code
WITHOUT_CLASSIFICATION	// JEditTextArea.scrollTo() needs this to simplify // its code
WITHOUT_CLASSIFICATION	// JEditTextArea.scrollTo() needs this to simplify // its code
WITHOUT_CLASSIFICATION	//{{{ physUp() method // scroll up by physical line amount
WITHOUT_CLASSIFICATION	//{{{ scrollDown() method // scroll down by screen line amount
WITHOUT_CLASSIFICATION	//{{{ scrollUp() method // scroll up by screen line amount
WITHOUT_CLASSIFICATION	//{{{ ensurePhysicalLineIsVisible() method
WITHOUT_CLASSIFICATION	//{{{ BufferChangeHandler class
WITHOUT_CLASSIFICATION	//System.err.println("foldLevelChanged " + (start-1) + " to " + textArea.getLastPhysicalLine() + "," + end);
WITHOUT_CLASSIFICATION	//{{{ resize selections if necessary
WITHOUT_CLASSIFICATION	//{{{ resize selections if necessary
WITHOUT_CLASSIFICATION	/* both have same visibility; just remove			 * anything in between. */
WITHOUT_CLASSIFICATION	// we're removing from before // the first visible to after // the last visible
WITHOUT_CLASSIFICATION	/* collapse 2 */
WITHOUT_CLASSIFICATION	// we're removing from // the first visible to after // the last visible
WITHOUT_CLASSIFICATION	/* shift */
WITHOUT_CLASSIFICATION	/* update */
WITHOUT_CLASSIFICATION	// will be handled later. // see comments at the end of // transactionComplete().
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ contentInserted() method
WITHOUT_CLASSIFICATION	//{{{ preContentRemoved() method
WITHOUT_CLASSIFICATION	//XXX
WITHOUT_CLASSIFICATION	//{{{ setBorder() method
WITHOUT_CLASSIFICATION	//{{{ doDelayedUpdate() method
WITHOUT_CLASSIFICATION	// must update screen line counts before we call // _notifyScreenLineChanges() since that calls // updateScrollBars() which needs valid info
WITHOUT_CLASSIFICATION	// must be before the below call // so that the chunk cache is not // updated with an invisible first // line (see above)
WITHOUT_CLASSIFICATION	// update visible lines
WITHOUT_CLASSIFICATION	// force the fold levels to be // updated.
WITHOUT_CLASSIFICATION	// when painting the last line of // a buffer, Buffer.isFoldStart() // doesn't call getFoldLevel(), // hence the foldLevelChanged() // event might not be sent for the // previous line.
WITHOUT_CLASSIFICATION	//{{{ delayedUpdate() method
WITHOUT_CLASSIFICATION	//{{{ caretAutoScroll() method
WITHOUT_CLASSIFICATION	//{{{ updateBorder() method
WITHOUT_CLASSIFICATION	//{{{ Layers
WITHOUT_CLASSIFICATION	//{{{ paintComponent() method
WITHOUT_CLASSIFICATION	//{{{ getToolTipText() method
WITHOUT_CLASSIFICATION	//{{{ getToolTipText() method
WITHOUT_CLASSIFICATION	//{{{ Match class
WITHOUT_CLASSIFICATION	//{{{ paintInvalidLine() method
WITHOUT_CLASSIFICATION	//{{{ paintScreenLineRange() method
WITHOUT_CLASSIFICATION	//{{{ selectMatch() method
WITHOUT_CLASSIFICATION	//{{{ paintValidLine() method
WITHOUT_CLASSIFICATION	// fill the background
WITHOUT_CLASSIFICATION	//{{{ MouseActions constructor
WITHOUT_CLASSIFICATION	//{{{ BracketMatcher class
WITHOUT_CLASSIFICATION	//{{{ getActionForEvent() method
WITHOUT_CLASSIFICATION	//{{{ removeExtension() method
WITHOUT_CLASSIFICATION	//{{{ getMatch() method
WITHOUT_CLASSIFICATION	// if buffer is loading, don't paint anything
WITHOUT_CLASSIFICATION	//{{{ Highlight class
WITHOUT_CLASSIFICATION	//{{{ Gutter constructor
WITHOUT_CLASSIFICATION	//{{{ getExtensions() method
WITHOUT_CLASSIFICATION	//{{{ addExtension() method
WITHOUT_CLASSIFICATION	//{{{ addExtension() method
WITHOUT_CLASSIFICATION	//{{{ setBorder() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ getMinimumSize() method
WITHOUT_CLASSIFICATION	//{{{ toggleExpanded() method
WITHOUT_CLASSIFICATION	//{{{ getPreferredSize() method
WITHOUT_CLASSIFICATION	//{{{ Getters and setters
WITHOUT_CLASSIFICATION	/*	 * Component.getPreferredSize() is overridden here to support the	 * collapsing behavior.	 */
WITHOUT_CLASSIFICATION	/*	 * JComponent.setBorder(Border) is overridden here to cache the left	 * inset of the border (if any) to avoid having to fetch it during every	 * repaint.	 */
WITHOUT_CLASSIFICATION	//{{{ getHighlightedForeground() method
WITHOUT_CLASSIFICATION	//{{{ setFont() method
WITHOUT_CLASSIFICATION	//{{{ setHighlightInterval() method
WITHOUT_CLASSIFICATION	/*	 * JComponent.setFont(Font) is overridden here to cache the baseline for	 * the font. This avoids having to get the font metrics during every	 * repaint.	 */
WITHOUT_CLASSIFICATION	//{{{ setHighlightedForeground() method
WITHOUT_CLASSIFICATION	//{{{ getLineNumberAlignment() method
WITHOUT_CLASSIFICATION	//{{{ getCurrentLineForeground() method
WITHOUT_CLASSIFICATION	//{{{ isStructureHighlightEnabled() method
WITHOUT_CLASSIFICATION	//{{{ setCurrentLineForeground() method
WITHOUT_CLASSIFICATION	//{{{ setLineNumberAlignment() method
WITHOUT_CLASSIFICATION	//{{{ getFoldColor() method
WITHOUT_CLASSIFICATION	//{{{ isCurrentLineHighlightEnabled() method
WITHOUT_CLASSIFICATION	//{{{ setFoldColor() method
WITHOUT_CLASSIFICATION	//{{{ isMarkerHighlightEnabled()
WITHOUT_CLASSIFICATION	//{{{ isExpanded() method
WITHOUT_CLASSIFICATION	//{{{ setCurrentLineHighlightEnabled() method
WITHOUT_CLASSIFICATION	//{{{ setExpanded() method
WITHOUT_CLASSIFICATION	//{{{ setStructureHighlightEnabled() method
WITHOUT_CLASSIFICATION	//{{{ getHighlightInterval() method
WITHOUT_CLASSIFICATION	//{{{ getStructureHighlightColor() method
WITHOUT_CLASSIFICATION	//{{{ getMarkerHighlightColor() method
WITHOUT_CLASSIFICATION	//{{{ setStructureHighlightColor() method
WITHOUT_CLASSIFICATION	//{{{ setMarkerHighlightColor() method
WITHOUT_CLASSIFICATION	//{{{ isMarkerHighlightEnabled() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ Layers
WITHOUT_CLASSIFICATION	//{{{ mousePressed() method
WITHOUT_CLASSIFICATION	//{{{ mouseReleased() method
WITHOUT_CLASSIFICATION	//{{{ isManagingFocus() method
WITHOUT_CLASSIFICATION	//{{{ getFocusTraversalKeysEnabled() method
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ getToolTipText() method
WITHOUT_CLASSIFICATION	//{{{ mouseDragged() method
WITHOUT_CLASSIFICATION	//{{{ setBounds() method
WITHOUT_CLASSIFICATION	//{{{ mouseExited() method
WITHOUT_CLASSIFICATION	//{{{ Getters and setters
WITHOUT_CLASSIFICATION	//{{{ paintValidLine() method
WITHOUT_CLASSIFICATION	//{{{ mouseEntered() method
WITHOUT_CLASSIFICATION	//{{{ paintLine() method
WITHOUT_CLASSIFICATION	// draw |
WITHOUT_CLASSIFICATION	// Skip lines beyond EOF
WITHOUT_CLASSIFICATION	//{{{ Handle actions
WITHOUT_CLASSIFICATION	//{{{ Paint fold triangles
WITHOUT_CLASSIFICATION	// draw |^
WITHOUT_CLASSIFICATION	// draw |_
WITHOUT_CLASSIFICATION	//{{{ Paint line numbers
WITHOUT_CLASSIFICATION	//{{{ MarkerHighlight class
WITHOUT_CLASSIFICATION	//{{{ Determine action
WITHOUT_CLASSIFICATION	//{{{ setStyles() method
WITHOUT_CLASSIFICATION	/* && e.getX() >= getWidth() - borderWidth * 2 */
WITHOUT_CLASSIFICATION	//{{{ getStyles() method
WITHOUT_CLASSIFICATION	//{{{ setCaretColor() method
WITHOUT_CLASSIFICATION	//{{{ getCaretColor() method
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ isAntiAliasEnabled() method
WITHOUT_CLASSIFICATION	//{{{ setAntiAliasEnabled() method
WITHOUT_CLASSIFICATION	//{{{ getStructureHighlightColor() method
WITHOUT_CLASSIFICATION	//{{{ setStructureHighlightColor() method
WITHOUT_CLASSIFICATION	//{{{ isStructureHighlightEnabled() method
WITHOUT_CLASSIFICATION	//{{{ setStructureHighlightEnabled() method
WITHOUT_CLASSIFICATION	//{{{ isBlockCaretEnabled() method
WITHOUT_CLASSIFICATION	// assumed this is called after a font render context is set up. // changing font render context settings without a setStyles() // call will not reset cached monospaced font info.
WITHOUT_CLASSIFICATION	//{{{ getMultipleSelectionColor() method
WITHOUT_CLASSIFICATION	//{{{ getSelectionColor() method
WITHOUT_CLASSIFICATION	//{{{ getWrapGuideColor() method
WITHOUT_CLASSIFICATION	//{{{ setSelectionColor() method
WITHOUT_CLASSIFICATION	//{{{ setMultipleSelectionColor() method
WITHOUT_CLASSIFICATION	//{{{ setBlockCaretEnabled() method
WITHOUT_CLASSIFICATION	//{{{ getLineHighlightColor() method
WITHOUT_CLASSIFICATION	//{{{ setLineHighlightColor() method
WITHOUT_CLASSIFICATION	//{{{ getEOLMarkerColor() method
WITHOUT_CLASSIFICATION	//{{{ isLineHighlightEnabled() method
WITHOUT_CLASSIFICATION	//{{{ setWrapGuideColor() method
WITHOUT_CLASSIFICATION	//{{{ setLineHighlightEnabled() method
WITHOUT_CLASSIFICATION	//{{{ setFractionalFontMetricsEnabled() method
WITHOUT_CLASSIFICATION	//{{{ setEOLMarkerColor() method
WITHOUT_CLASSIFICATION	//{{{ isWrapGuidePainted() method
WITHOUT_CLASSIFICATION	//{{{ getEOLMarkersPainted() method
WITHOUT_CLASSIFICATION	//{{{ setEOLMarkersPainted() method
WITHOUT_CLASSIFICATION	//{{{ isFractionalFontMetricsEnabled() method
WITHOUT_CLASSIFICATION	//{{{ setWrapGuidePainted() method
WITHOUT_CLASSIFICATION	//{{{ getFoldLineStyle() method
WITHOUT_CLASSIFICATION	//{{{ setFoldLineStyle() method
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ setBuffer() method
WITHOUT_CLASSIFICATION	//{{{ getMinimumSize() method
WITHOUT_CLASSIFICATION	//{{{ paintComponent() method
WITHOUT_CLASSIFICATION	//{{{ getToolTipText() method
WITHOUT_CLASSIFICATION	//{{{ getPreferredSize() method
WITHOUT_CLASSIFICATION	//{{{ nextTabStop() method
WITHOUT_CLASSIFICATION	//{{{ getCharWidth() method
WITHOUT_CLASSIFICATION	//{{{ paintValidLine() method
WITHOUT_CLASSIFICATION	//{{{ addExtension() method
WITHOUT_CLASSIFICATION	//{{{ addExtension() method
WITHOUT_CLASSIFICATION	//{{{ removeExtension() method
WITHOUT_CLASSIFICATION	//{{{ getExtensions() method
WITHOUT_CLASSIFICATION	//{{{ setFont() method
WITHOUT_CLASSIFICATION	//{{{ getFontRenderContext() method
WITHOUT_CLASSIFICATION	//{{{ getStringWidth() method
WITHOUT_CLASSIFICATION	//{{{ getFontMetrics() method
WITHOUT_CLASSIFICATION	//{{{ updateRenderingHints() method
WITHOUT_CLASSIFICATION	/* package-private since they are accessed by inner classes and we	 * want this to be fast */
WITHOUT_CLASSIFICATION	//{{{ Paint line highlight and collapsed fold highlight
WITHOUT_CLASSIFICATION	// should try to use this as little as possible.
WITHOUT_CLASSIFICATION	//hints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
WITHOUT_CLASSIFICATION	//{{{ TextAreaPainter constructor
WITHOUT_CLASSIFICATION	//{{{ PaintLineBackground class
WITHOUT_CLASSIFICATION	//{{{ Paint token backgrounds
WITHOUT_CLASSIFICATION	// minimise access$ methods
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ dispose() method
WITHOUT_CLASSIFICATION	//}}} //}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ getView() method
WITHOUT_CLASSIFICATION	//{{{ getBuffer() method
WITHOUT_CLASSIFICATION	//{{{ Getters and setters
WITHOUT_CLASSIFICATION	//{{{ getDisplayManager() method
WITHOUT_CLASSIFICATION	//{{{ paintValidLine() method
WITHOUT_CLASSIFICATION	//horizontal.setBorder(null);
WITHOUT_CLASSIFICATION	// Because the clipRect's height is usually an even multiple // of the font height, we subtract 1 from it, otherwise one // too many lines will always be painted.
WITHOUT_CLASSIFICATION	//{{{ PaintSelection class
WITHOUT_CLASSIFICATION	//{{{ JEditTextArea constructor
WITHOUT_CLASSIFICATION	//{{{ paintSelection() method
WITHOUT_CLASSIFICATION	//{{{ PaintWrapGuide class
WITHOUT_CLASSIFICATION	//{{{ Initialize some misc. stuff
WITHOUT_CLASSIFICATION	//{{{ PaintText class
WITHOUT_CLASSIFICATION	//{{{ Add some event listeners
WITHOUT_CLASSIFICATION	//{{{ PaintCaret class
WITHOUT_CLASSIFICATION	//{{{ Initialize the GUI
WITHOUT_CLASSIFICATION	//{{{ setCaretBlinkEnabled() method
WITHOUT_CLASSIFICATION	// some plugins add stuff in a "right-hand" gutter
WITHOUT_CLASSIFICATION	//{{{ setQuickCopyEnabled() method
WITHOUT_CLASSIFICATION	//{{{ getPainter() method
WITHOUT_CLASSIFICATION	//{{{ getElectricScroll() method
WITHOUT_CLASSIFICATION	//{{{ getGutter() method
WITHOUT_CLASSIFICATION	//{{{ isCaretBlinkEnabled() method
WITHOUT_CLASSIFICATION	//{{{ setElectricScroll() method
WITHOUT_CLASSIFICATION	//{{{ isQuickCopyEnabled() method
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	//{{{ isEditable() method
WITHOUT_CLASSIFICATION	// JEditTextArea.scrollTo() needs this to simplify // its code
WITHOUT_CLASSIFICATION	// dubious? //setFirstLine(0);
WITHOUT_CLASSIFICATION	//{{{ this ensures that the text area's look is slightly // more consistent with the rest of the metal l&f. // while it depends on not-so-well-documented portions // of Swing, it only affects appearance, so future // breakage shouldn't matter
WITHOUT_CLASSIFICATION	//{{{ setDragEnabled() method
WITHOUT_CLASSIFICATION	//{{{ getDragAndDropCallback() method
WITHOUT_CLASSIFICATION	//{{{ scrollUpPage() method
WITHOUT_CLASSIFICATION	//{{{ Scrolling
WITHOUT_CLASSIFICATION	//{{{ setDragAndDropCallback() method
WITHOUT_CLASSIFICATION	// we have to be careful
WITHOUT_CLASSIFICATION	//{{{ isDragInProgress() method
WITHOUT_CLASSIFICATION	//{{{ Debugging code
WITHOUT_CLASSIFICATION	//{{{ setDragInProgress() method
WITHOUT_CLASSIFICATION	// we have to be careful
WITHOUT_CLASSIFICATION	//{{{ isDragEnabled() method
WITHOUT_CLASSIFICATION	//{{{ getVisibleLines() method
WITHOUT_CLASSIFICATION	//{{{ getFirstLine() method
WITHOUT_CLASSIFICATION	//{{{ getFirstPhysicalLine() method
WITHOUT_CLASSIFICATION	//{{{ setFirstLine() method
WITHOUT_CLASSIFICATION	//{{{ ensure we don't have empty space at the bottom or top, etc
WITHOUT_CLASSIFICATION	//{{{ ensure we don't have empty space at the bottom or top, etc
WITHOUT_CLASSIFICATION	//{{{ setFirstPhysicalLine() method
WITHOUT_CLASSIFICATION	//{{{ setFirstPhysicalLine() method
WITHOUT_CLASSIFICATION	//{{{ getHorizontalOffset() method
WITHOUT_CLASSIFICATION	//{{{ getLastPhysicalLine() method
WITHOUT_CLASSIFICATION	//{{{ scrollDownLine() method
WITHOUT_CLASSIFICATION	//{{{ setHorizontalOffset() method
WITHOUT_CLASSIFICATION	//{{{ scrollUpLine() method
WITHOUT_CLASSIFICATION	//{{{ getLineCount() method
WITHOUT_CLASSIFICATION	//{{{ addScrollListener() method
WITHOUT_CLASSIFICATION	//{{{ scrollDownPage() method
WITHOUT_CLASSIFICATION	//{{{ scrollToCaret() method
WITHOUT_CLASSIFICATION	//{{{ removeScrollListener() method
WITHOUT_CLASSIFICATION	//{{{ scrollTo() method
WITHOUT_CLASSIFICATION	//{{{ scrollTo() method
WITHOUT_CLASSIFICATION	//{{{ Offset conversion
WITHOUT_CLASSIFICATION	//{{{ Get ready
WITHOUT_CLASSIFICATION	//{{{ Screen line stuff
WITHOUT_CLASSIFICATION	//{{{ Scroll vertically
WITHOUT_CLASSIFICATION	//{{{ invalidateScreenLineRange() method
WITHOUT_CLASSIFICATION	//{{{ Scroll horizontally
WITHOUT_CLASSIFICATION	//{{{ xyToOffset() method
WITHOUT_CLASSIFICATION	//{{{ getPhysicalLineOfScreenLine() method
WITHOUT_CLASSIFICATION	//{{{ xyToOffset() method
WITHOUT_CLASSIFICATION	//{{{ getScreenLineOfOffset() method
WITHOUT_CLASSIFICATION	//{{{ Convenience methods
WITHOUT_CLASSIFICATION	//{{{ getScreenLineStartOffset() method
WITHOUT_CLASSIFICATION	//{{{ xToScreenLineOffset() method
WITHOUT_CLASSIFICATION	//{{{ getScreenLineEndOffset() method
WITHOUT_CLASSIFICATION	//{{{ invalidateLine() method
WITHOUT_CLASSIFICATION	//{{{ offsetToXY() method
WITHOUT_CLASSIFICATION	//{{{ offsetToXY() method
WITHOUT_CLASSIFICATION	//{{{ Painting
WITHOUT_CLASSIFICATION	//{{{ invalidateLineRange() method
WITHOUT_CLASSIFICATION	//{{{ getBufferLength() method
WITHOUT_CLASSIFICATION	//{{{ invalidateSelectedLines() method
WITHOUT_CLASSIFICATION	// to hide line highlight if selections are being added later on
WITHOUT_CLASSIFICATION	//{{{ getLineOfOffset() method
WITHOUT_CLASSIFICATION	//{{{ getLineStartOffset() method
WITHOUT_CLASSIFICATION	//{{{ getLineEndOffset() method
WITHOUT_CLASSIFICATION	//{{{ getLineLength() method
WITHOUT_CLASSIFICATION	//{{{ getLineText() method
WITHOUT_CLASSIFICATION	//{{{ getLineText() method
WITHOUT_CLASSIFICATION	//{{{ getText() method
WITHOUT_CLASSIFICATION	//{{{ getText() method
WITHOUT_CLASSIFICATION	//{{{ getText() method
WITHOUT_CLASSIFICATION	//{{{ selectNone() method
WITHOUT_CLASSIFICATION	//{{{ setText() method
WITHOUT_CLASSIFICATION	//{{{ selectAll() method
WITHOUT_CLASSIFICATION	//{{{ getSelection() method
WITHOUT_CLASSIFICATION	// Scan backwards, trying to find a bracket
WITHOUT_CLASSIFICATION	//{{{ Selection
WITHOUT_CLASSIFICATION	//{{{ selectLine() method
WITHOUT_CLASSIFICATION	//{{{ getSelectionCount() method
WITHOUT_CLASSIFICATION	//{{{ selectParagraph() method
WITHOUT_CLASSIFICATION	// We can't do the backward scan if start == 0
WITHOUT_CLASSIFICATION	//{{{ selectWord() method
WITHOUT_CLASSIFICATION	// to hide current line highlight
WITHOUT_CLASSIFICATION	//{{{ selectToMatchingBracket() method
WITHOUT_CLASSIFICATION	//{{{ selectToMatchingBracket() method
WITHOUT_CLASSIFICATION	// Reset count
WITHOUT_CLASSIFICATION	//{{{ selectBlock() method
WITHOUT_CLASSIFICATION	//{{{ setSelection() method
WITHOUT_CLASSIFICATION	//{{{ setSelection() method
WITHOUT_CLASSIFICATION	// Scan forward, matching that bracket
WITHOUT_CLASSIFICATION	// to hide current line highlight
WITHOUT_CLASSIFICATION	//{{{ lineInStructureScope() method
WITHOUT_CLASSIFICATION	// invalidate the old selection
WITHOUT_CLASSIFICATION	//{{{ invertSelection() method
WITHOUT_CLASSIFICATION	//{{{ addToSelection() method
WITHOUT_CLASSIFICATION	//{{{ addToSelection() method
WITHOUT_CLASSIFICATION	// to hide current line highlight
WITHOUT_CLASSIFICATION	// to hide current line highlight
WITHOUT_CLASSIFICATION	//{{{ getSelectionAtOffset() method
WITHOUT_CLASSIFICATION	//{{{ setSelectedText() method
WITHOUT_CLASSIFICATION	//{{{ removeFromSelection() method
WITHOUT_CLASSIFICATION	//{{{ removeFromSelection() method
WITHOUT_CLASSIFICATION	//{{{ setSelectedText() method
WITHOUT_CLASSIFICATION	//{{{ resizeSelection() method
WITHOUT_CLASSIFICATION	//{{{ setSelectedText() method
WITHOUT_CLASSIFICATION	//{{{ extendSelection() method
WITHOUT_CLASSIFICATION	//{{{ extendSelection() method
WITHOUT_CLASSIFICATION	//{{{ Caret
WITHOUT_CLASSIFICATION	//{{{ getSelectedText() method
WITHOUT_CLASSIFICATION	//{{{ getSelectedText() method
WITHOUT_CLASSIFICATION	//{{{ getSelectedText() method
WITHOUT_CLASSIFICATION	// no no no!!!! //selectNone(); //}}}
WITHOUT_CLASSIFICATION	//{{{ setCaretPosition() method
WITHOUT_CLASSIFICATION	// for compatibility with older jEdit versions
WITHOUT_CLASSIFICATION	//{{{ addStructureMatcher() method
WITHOUT_CLASSIFICATION	//{{{ getSelectedLines() method
WITHOUT_CLASSIFICATION	//{{{ setCaretPosition() method
WITHOUT_CLASSIFICATION	//{{{ showSelectLineRangeDialog() method
WITHOUT_CLASSIFICATION	//{{{ removeStructureMatcher() method
WITHOUT_CLASSIFICATION	//{{{ getStructureMatch() method
WITHOUT_CLASSIFICATION	//{{{ moveCaretPosition() method
WITHOUT_CLASSIFICATION	//{{{ blinkCaret() method
WITHOUT_CLASSIFICATION	//{{{ moveCaretPosition() method
WITHOUT_CLASSIFICATION	//{{{ centerCaret() method
WITHOUT_CLASSIFICATION	//{{{ moveCaretPosition() method
WITHOUT_CLASSIFICATION	//{{{ getCaretPosition() method
WITHOUT_CLASSIFICATION	//{{{ getCaretLine() method
WITHOUT_CLASSIFICATION	//{{{ goToNextParagraph() method
WITHOUT_CLASSIFICATION	//{{{ getMagicCaretPosition() method
WITHOUT_CLASSIFICATION	//{{{ setMagicCaretPosition() method
WITHOUT_CLASSIFICATION	//{{{ goToNextWord() method
WITHOUT_CLASSIFICATION	//{{{ addCaretListener() method
WITHOUT_CLASSIFICATION	//{{{ goToNextWord() method
WITHOUT_CLASSIFICATION	//{{{ removeCaretListener() method
WITHOUT_CLASSIFICATION	//{{{ smartHome() method
WITHOUT_CLASSIFICATION	//{{{ goToNextBracket() method
WITHOUT_CLASSIFICATION	//{{{ goToPrevBracket() method
WITHOUT_CLASSIFICATION	//{{{ goToNextLine() method
WITHOUT_CLASSIFICATION	//{{{ goToFirstVisibleLine() method
WITHOUT_CLASSIFICATION	//{{{ goToNextMarker() method
WITHOUT_CLASSIFICATION	//{{{ goToPrevLine() method
WITHOUT_CLASSIFICATION	//{{{ goToNextPage() method
WITHOUT_CLASSIFICATION	//case 3:
WITHOUT_CLASSIFICATION	//case 3:
WITHOUT_CLASSIFICATION	//{{{ goToPrevMarker() method
WITHOUT_CLASSIFICATION	//{{{ goToPrevPage() method
WITHOUT_CLASSIFICATION	//{{{ smartEnd() method
WITHOUT_CLASSIFICATION	//{{{ goToPrevParagraph() method
WITHOUT_CLASSIFICATION	//{{{ goToLastVisibleLine() method
WITHOUT_CLASSIFICATION	//{{{ goToPrevWord() method
WITHOUT_CLASSIFICATION	//{{{ goToPrevWord() method
WITHOUT_CLASSIFICATION	//{{{ goToStartOfLine() method
WITHOUT_CLASSIFICATION	//{{{ goToEndOfLine() method
WITHOUT_CLASSIFICATION	//{{{ goToBufferStart() method
WITHOUT_CLASSIFICATION	//{{{ goToStartOfWhiteSpace() method
WITHOUT_CLASSIFICATION	//{{{ goToEndOfWhiteSpace() method
WITHOUT_CLASSIFICATION	//{{{ goToBufferEnd() method
WITHOUT_CLASSIFICATION	//{{{ addMarker() method
WITHOUT_CLASSIFICATION	//{{{ delete() method
WITHOUT_CLASSIFICATION	//{{{ isMultipleSelectionEnabled() method
WITHOUT_CLASSIFICATION	//{{{ userInput() method
WITHOUT_CLASSIFICATION	//{{{ deleteParagraph() method
WITHOUT_CLASSIFICATION	//{{{ goToMatchingBracket() method
WITHOUT_CLASSIFICATION	//{{{ toggleOverwriteEnabled() method
WITHOUT_CLASSIFICATION	//{{{ showGoToLineDialog() method
WITHOUT_CLASSIFICATION	//{{{ User input
WITHOUT_CLASSIFICATION	//{{{ backspace() method
WITHOUT_CLASSIFICATION	// check if the user entered a bracket
WITHOUT_CLASSIFICATION	//{{{ deleteToStartOfLine() method
WITHOUT_CLASSIFICATION	//{{{ isOverwriteEnabled() method
WITHOUT_CLASSIFICATION	//{{{ backspaceWord() method
WITHOUT_CLASSIFICATION	//{{{ setOverwriteEnabled() method
WITHOUT_CLASSIFICATION	//{{{ backspaceWord() method
WITHOUT_CLASSIFICATION	//{{{ toggleRectangularSelectionEnabled() method
WITHOUT_CLASSIFICATION	//{{{ deleteToEndOfLine() method
WITHOUT_CLASSIFICATION	//{{{ deleteWord() method
WITHOUT_CLASSIFICATION	//{{{ deleteLine() method
WITHOUT_CLASSIFICATION	//{{{ deleteWord() method
WITHOUT_CLASSIFICATION	// otherwise a bunch of consecutive C+d's would be merged // into one edit
WITHOUT_CLASSIFICATION	//{{{ swapMarkerAndCaret() method
WITHOUT_CLASSIFICATION	//{{{ setRectangularSelectionEnabled() method
WITHOUT_CLASSIFICATION	//{{{ toggleMultipleSelectionEnabled() method
WITHOUT_CLASSIFICATION	//{{{ setMultipleSelectionEnabled() method
WITHOUT_CLASSIFICATION	//{{{ Markers
WITHOUT_CLASSIFICATION	//{{{ isRectangularSelectionEnabled() method
WITHOUT_CLASSIFICATION	//{{{ Folding
WITHOUT_CLASSIFICATION	//{{{ goToMarker() method
WITHOUT_CLASSIFICATION	// always add markers on selected lines
WITHOUT_CLASSIFICATION	// toggle marker on caret line
WITHOUT_CLASSIFICATION	//{{{ removeTrailingWhiteSpace() method
WITHOUT_CLASSIFICATION	//{{{ shiftIndentLeft() method
WITHOUT_CLASSIFICATION	//{{{ shiftIndentRight() method
WITHOUT_CLASSIFICATION	//{{{ spacesToTabs() method
WITHOUT_CLASSIFICATION	//{{{ tabsToSpaces() method
WITHOUT_CLASSIFICATION	//{{{ formatParagraph() method
WITHOUT_CLASSIFICATION	//{{{ collapseFold() method
WITHOUT_CLASSIFICATION	//{{{ expandFold() method
WITHOUT_CLASSIFICATION	//{{{ toUpperCase() method
WITHOUT_CLASSIFICATION	//{{{ goToParentFold() method
WITHOUT_CLASSIFICATION	//{{{ narrowToFold() method
WITHOUT_CLASSIFICATION	//{{{ goToNextFold() method
WITHOUT_CLASSIFICATION	//{{{ goToPrevFold() method
WITHOUT_CLASSIFICATION	//{{{ narrowToSelection() method
WITHOUT_CLASSIFICATION	//{{{ selectFold() method
WITHOUT_CLASSIFICATION	//{{{ selectFold() method
WITHOUT_CLASSIFICATION	//{{{ toLowerCase() method
WITHOUT_CLASSIFICATION	//{{{ addExplicitFold() method
WITHOUT_CLASSIFICATION	//{{{ showWordCountDialog() method
WITHOUT_CLASSIFICATION	//{{{ insertEnterAndIndent() method
WITHOUT_CLASSIFICATION	//{{{ Text editing
WITHOUT_CLASSIFICATION	//{{{ lineComment() method
WITHOUT_CLASSIFICATION	//{{{ insertTabAndIndent() method
WITHOUT_CLASSIFICATION	//{{{ rangeComment() method
WITHOUT_CLASSIFICATION	//{{{ Right click popup
WITHOUT_CLASSIFICATION	// if caret is inside leading whitespace, indent.
WITHOUT_CLASSIFICATION	//{{{ isRightClickPopupEnabled() method
WITHOUT_CLASSIFICATION	//{{{ indentSelectedLines() method
WITHOUT_CLASSIFICATION	//{{{ joinLines() method
WITHOUT_CLASSIFICATION	//{{{ setRightClickPopupEnabled() method
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Deprecated methods
WITHOUT_CLASSIFICATION	//{{{ AWT stuff
WITHOUT_CLASSIFICATION	//{{{ processKeyEvent() method
WITHOUT_CLASSIFICATION	//{{{ removeNotify() method
WITHOUT_CLASSIFICATION	//{{{ getFocusTraversalKeysEnabled() method
WITHOUT_CLASSIFICATION	//{{{ addNotify() method
WITHOUT_CLASSIFICATION	//{{{ propertiesChanged() method
WITHOUT_CLASSIFICATION	//{{{ getRightClickPopup() method
WITHOUT_CLASSIFICATION	//{{{ addLeftOfScrollBar() method
WITHOUT_CLASSIFICATION	//{{{ setRightClickPopup() method
WITHOUT_CLASSIFICATION	//{{{ getSelectionStartLine() method
WITHOUT_CLASSIFICATION	//{{{ handlePopupTrigger() method
WITHOUT_CLASSIFICATION	//{{{ getMarkLine() method
WITHOUT_CLASSIFICATION	//{{{ removeLeftOfScrollBar() method
WITHOUT_CLASSIFICATION	//{{{ setSelectionStart() method
WITHOUT_CLASSIFICATION	//{{{ getFocusCycleRoot() method
WITHOUT_CLASSIFICATION	//{{{ addTopComponent() method
WITHOUT_CLASSIFICATION	//{{{ getSelectionEnd() method
WITHOUT_CLASSIFICATION	//{{{ removeTopComponent() method
WITHOUT_CLASSIFICATION	//{{{ getSelectionEnd() method
WITHOUT_CLASSIFICATION	//{{{ getSelectionStart() method
WITHOUT_CLASSIFICATION	//{{{ getSelectionStart() method
WITHOUT_CLASSIFICATION	//{{{ select() method
WITHOUT_CLASSIFICATION	//{{{ getSelectionEndLine() method
WITHOUT_CLASSIFICATION	//{{{ select() method
WITHOUT_CLASSIFICATION	//{{{ setSelectionEnd() method
WITHOUT_CLASSIFICATION	//{{{ getMarkPosition() method
WITHOUT_CLASSIFICATION	//{{{ isSelectionRectangular() method
WITHOUT_CLASSIFICATION	// used to store offsetToXY() results
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Static variables
WITHOUT_CLASSIFICATION	// this does the "trick" to eliminate blank space at the end
WITHOUT_CLASSIFICATION	//{{{ isCaretVisible() method
WITHOUT_CLASSIFICATION	/* on JDK 1.4, this is set to a method by Java14. The method must take	* these parameters:	* - a JEditTextArea	* - an InputEvent	* - a boolean (copy text or move, depending on modifier user held down)	*/
WITHOUT_CLASSIFICATION	//{{{ isStructureHighlightVisible() method
WITHOUT_CLASSIFICATION	//{{{ foldStructureChanged() method
WITHOUT_CLASSIFICATION	//{{{ updateMaxHorizontalScrollWidth() method
WITHOUT_CLASSIFICATION	// in case one of the above fails, we still want to // clear these flags.
WITHOUT_CLASSIFICATION	//{{{ recalculateVisibleLines() method
WITHOUT_CLASSIFICATION	//{{{ finishCaretUpdate() method
WITHOUT_CLASSIFICATION	//{{{ updateScrollBars() method
WITHOUT_CLASSIFICATION	//{{{ getSelectionStartEndOnLine() method
WITHOUT_CLASSIFICATION	//{{{ _finishCaretUpdate() method
WITHOUT_CLASSIFICATION	// see finishCaretUpdate() & _finishCaretUpdate()
WITHOUT_CLASSIFICATION	/* called by DisplayManager.BufferChangeHandler.transactionComplete() */
WITHOUT_CLASSIFICATION	//{{{ insideSelection() method
WITHOUT_CLASSIFICATION	// When the user is typing, etc, we don't want the caret // to blink
WITHOUT_CLASSIFICATION	// JDiff, error list add stuff here
WITHOUT_CLASSIFICATION	/* otherwise DisplayManager.BufferChangeHandler calls */
WITHOUT_CLASSIFICATION	//{{{ startDragAndDrop() method // calls dndCallback via reflection
WITHOUT_CLASSIFICATION	//{{{ doWordWrap() method
WITHOUT_CLASSIFICATION	//{{{ _addToSelection() method
WITHOUT_CLASSIFICATION	//{{{ updateStructureHighlightWithDelay() method
WITHOUT_CLASSIFICATION	//{{{ fireCaretEvent() method
WITHOUT_CLASSIFICATION	/* only ever return true if space was pressed		 * with logicalLength == maxLineLen */
WITHOUT_CLASSIFICATION	//{{{ fireScrollEvent() method
WITHOUT_CLASSIFICATION	//{{{ insertTab() method
WITHOUT_CLASSIFICATION	//{{{ doWordCount() method
WITHOUT_CLASSIFICATION	//{{{ updateStructureHighlight() method
WITHOUT_CLASSIFICATION	// Fix bug #922951 Off-by-one error in Word Count
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ actionPerformed() method
WITHOUT_CLASSIFICATION	//{{{ Inner classes
WITHOUT_CLASSIFICATION	//{{{ FocusHandler class
WITHOUT_CLASSIFICATION	//{{{ paintBorder() method
WITHOUT_CLASSIFICATION	//{{{ getBorderInsets() method
WITHOUT_CLASSIFICATION	//{{{ delete() method
WITHOUT_CLASSIFICATION	//{{{ mousePressed() method
WITHOUT_CLASSIFICATION	//{{{ MouseHandler class
WITHOUT_CLASSIFICATION	//{{{ addLayoutComponent() method
WITHOUT_CLASSIFICATION	//{{{ removeLayoutComponent() method
WITHOUT_CLASSIFICATION	//{{{ preferredLayoutSize() method
WITHOUT_CLASSIFICATION	//{{{ minimumLayoutSize() method
WITHOUT_CLASSIFICATION	//{{{ layoutContainer() method
WITHOUT_CLASSIFICATION	//case 3:
WITHOUT_CLASSIFICATION	//{{{ recalculateLastPhysicalLine() method
WITHOUT_CLASSIFICATION	// only wrap if we're at the end of a line, or the rest of the // line text is whitespace
WITHOUT_CLASSIFICATION	//{{{ showStructureStatusMessage() method
WITHOUT_CLASSIFICATION	// last character before wrap // length with tabs expanded
WITHOUT_CLASSIFICATION	//{{{ ScrollLayout class
WITHOUT_CLASSIFICATION	// caretLine would have been incremented // since insertNewLineAt <= caretPos
WITHOUT_CLASSIFICATION	// get rid of embedded tabs not removed by trim()
WITHOUT_CLASSIFICATION	//{{{ shiftTallCaretLeft() method
WITHOUT_CLASSIFICATION	//{{{ getRectParams() method
WITHOUT_CLASSIFICATION	//{{{ focusGained() method
WITHOUT_CLASSIFICATION	//{{{ tallCaretDelete() method
WITHOUT_CLASSIFICATION	//{{{ TextAreaBorder class
WITHOUT_CLASSIFICATION	//{{{ CaretBlinker class
WITHOUT_CLASSIFICATION	//{{{ MutableCaretEvent constructor
WITHOUT_CLASSIFICATION	//{{{ MutableCaretEvent class
WITHOUT_CLASSIFICATION	//{{{ getMark() method
WITHOUT_CLASSIFICATION	//{{{ getDot() method
WITHOUT_CLASSIFICATION	//{{{ adjustmentValueChanged() method
WITHOUT_CLASSIFICATION	//{{{ AdjustHandler class
WITHOUT_CLASSIFICATION	// XXX: getMarkPosition() deprecated!
WITHOUT_CLASSIFICATION	/* with drag and drop on, a mouse down in a selection does not		immediately deselect */
WITHOUT_CLASSIFICATION	//{{{ focusLost() method
WITHOUT_CLASSIFICATION	//{{{ doSingleClick() method
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ Class initializer
WITHOUT_CLASSIFICATION	//{{{ mouseReleased() method
WITHOUT_CLASSIFICATION	//{{{ mouseDragged() method
WITHOUT_CLASSIFICATION	//case 3:
WITHOUT_CLASSIFICATION	// so that Home <mouse click> Home is not the same // as pressing Home twice in a row
WITHOUT_CLASSIFICATION	// control-click in virtual space inserts // whitespace and moves caret
WITHOUT_CLASSIFICATION	// so that shift-click-drag works
WITHOUT_CLASSIFICATION	// so that quick copy works
WITHOUT_CLASSIFICATION	//{{{ doDoubleClick() method
WITHOUT_CLASSIFICATION	// Ignore empty lines
WITHOUT_CLASSIFICATION	//{{{ doTripleClick() method
WITHOUT_CLASSIFICATION	//{{{ doSingleDrag() method
WITHOUT_CLASSIFICATION	// just scroll to the dragged location
WITHOUT_CLASSIFICATION	//{{{ doDoubleDrag() method
WITHOUT_CLASSIFICATION	//{{{ doTripleDrag() method
WITHOUT_CLASSIFICATION	// middle mouse button drag inserts selection // at caret position
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ setBuffer() method
WITHOUT_CLASSIFICATION	//{{{ getScreenLineOfOffset() method
WITHOUT_CLASSIFICATION	//{{{ recalculateVisibleLines() method
WITHOUT_CLASSIFICATION	//{{{ xToSubregionOffset() method
WITHOUT_CLASSIFICATION	//{{{ ChunkCache constructor
WITHOUT_CLASSIFICATION	//return -1;
WITHOUT_CLASSIFICATION	//{{{ getMaxHorizontalScrollWidth() method
WITHOUT_CLASSIFICATION	//{{{ invalidateChunksFromPhys() method
WITHOUT_CLASSIFICATION	// Find the screen line containing this offset
WITHOUT_CLASSIFICATION	//{{{ scrollDown() method
WITHOUT_CLASSIFICATION	// line is invisible?
WITHOUT_CLASSIFICATION	//{{{ xToSubregionOffset() method
WITHOUT_CLASSIFICATION	//{{{ scrollUp() method
WITHOUT_CLASSIFICATION	//{{{ subregionOffsetToX() method
WITHOUT_CLASSIFICATION	//{{{ invalidateAll() method
WITHOUT_CLASSIFICATION	//{{{ getLineInfo() method
WITHOUT_CLASSIFICATION	//{{{ invalidateChunksFrom() method
WITHOUT_CLASSIFICATION	//{{{ subregionOffsetToX() method
WITHOUT_CLASSIFICATION	//{{{ getLineSubregionCount() method
WITHOUT_CLASSIFICATION	//{{{ getBelowPosition() method
WITHOUT_CLASSIFICATION	//{{{ getSubregionOfOffset() method
WITHOUT_CLASSIFICATION	//{{{ updateChunksUpTo() method
WITHOUT_CLASSIFICATION	//{{{ getSubregionStartOffset() method
WITHOUT_CLASSIFICATION	//{{{ getAbovePosition() method
WITHOUT_CLASSIFICATION	//{{{ getSubregionEndOffset() method
WITHOUT_CLASSIFICATION	//{{{ needFullRepaint() method
WITHOUT_CLASSIFICATION	//{{{ getLineInfosForPhysicalLine() method
WITHOUT_CLASSIFICATION	//{{{ getLineInfosForPhysicalLine() method
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ clone() method
WITHOUT_CLASSIFICATION	// Note that we rely on the fact that when a physical line is // invalidated, all screen lines/subregions of that line are // invalidated as well. See below comment for code that tries // to uphold this assumption.
WITHOUT_CLASSIFICATION	// find a valid line closest to the last screen line
WITHOUT_CLASSIFICATION	// otherwise, determine the next visible line
WITHOUT_CLASSIFICATION	// for the first line displayed, take its physical line to be // the text area's first physical line
WITHOUT_CLASSIFICATION	/* if the user changes the syntax token at the				 * end of a line, need to do a full repaint. */
WITHOUT_CLASSIFICATION	// if -1, the empty space at the end of the text area // when the buffer has less lines than are visible
WITHOUT_CLASSIFICATION	// empty space
WITHOUT_CLASSIFICATION	// get another line of chunks
WITHOUT_CLASSIFICATION	// if the line has no text, out.size() == 0
WITHOUT_CLASSIFICATION	// unless this is the first time, increment // the line number
WITHOUT_CLASSIFICATION	// fix the bug where the horiz. // scroll bar was not updated // after creating a new file.
WITHOUT_CLASSIFICATION	/* We only cache entire physical lines at once;				 * don't want to split a physical line into				 * screen lines and only have some valid. */
WITHOUT_CLASSIFICATION	// chunk the line.
WITHOUT_CLASSIFICATION	// otherwise, the number of subregions
WITHOUT_CLASSIFICATION	/* If this line has become longer or shorter				 * (in which case the new physical line number				 * is different from the cached one) we need to:				 * - continue updating past the last line				 * - advise the text area to repaint				 * On the other hand, if the line wraps beyond				 * lastScreenLine, we need to keep updating the				 * chunk list to ensure proper alignment of				 * invalidation flags (see start of method) */
WITHOUT_CLASSIFICATION	//{{{ LineInfo class
WITHOUT_CLASSIFICATION	//{{{ getStartLine() method
WITHOUT_CLASSIFICATION	//{{{ lineToChunkList() method
WITHOUT_CLASSIFICATION	//{{{ getEnd() method
WITHOUT_CLASSIFICATION	//{{{ getStart() method
WITHOUT_CLASSIFICATION	//{{{ getStart() method
WITHOUT_CLASSIFICATION	//{{{ getEnd() method
WITHOUT_CLASSIFICATION	//{{{ Selection constructor
WITHOUT_CLASSIFICATION	//{{{ overlaps() method
WITHOUT_CLASSIFICATION	//{{{ getEndLine() method
WITHOUT_CLASSIFICATION	//{{{ Selection constructor
WITHOUT_CLASSIFICATION	//{{{ Selection constructor
WITHOUT_CLASSIFICATION	//{{{ Range class
WITHOUT_CLASSIFICATION	//{{{ Range constructor
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ getText() method
WITHOUT_CLASSIFICATION	//{{{ getText() method
WITHOUT_CLASSIFICATION	//{{{ contentInserted() method
WITHOUT_CLASSIFICATION	//{{{ contentInserted() method
WITHOUT_CLASSIFICATION	//{{{ contentRemoved() method
WITHOUT_CLASSIFICATION	//{{{ contentRemoved() method
WITHOUT_CLASSIFICATION	//{{{ setText() method
WITHOUT_CLASSIFICATION	//{{{ setText() method
WITHOUT_CLASSIFICATION	//{{{ getColumnOnOtherLine() method
WITHOUT_CLASSIFICATION	//{{{ getStart() method
WITHOUT_CLASSIFICATION	//{{{ getStart() method
WITHOUT_CLASSIFICATION	//{{{ getEnd() method
WITHOUT_CLASSIFICATION	//{{{ getEnd() method
WITHOUT_CLASSIFICATION	//{{{ Range constructor
WITHOUT_CLASSIFICATION	//{{{ Range constructor
WITHOUT_CLASSIFICATION	//{{{ Move the caret down a line
WITHOUT_CLASSIFICATION	//{{{ Rect class
WITHOUT_CLASSIFICATION	//{{{ getStartColumn() method
WITHOUT_CLASSIFICATION	//{{{ Rect constructor
WITHOUT_CLASSIFICATION	//{{{ Rect constructor
WITHOUT_CLASSIFICATION	//{{{ Rect constructor
WITHOUT_CLASSIFICATION	//{{{ Rect constructor
WITHOUT_CLASSIFICATION	//{{{ Rect constructor
WITHOUT_CLASSIFICATION	//{{{ getEndColumn() method
WITHOUT_CLASSIFICATION	//{{{ Split the text into lines
WITHOUT_CLASSIFICATION	//{{{ Insert the lines into the buffer
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ init() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	//{{{ Entry class
WITHOUT_CLASSIFICATION	//{{{ Constants
WITHOUT_CLASSIFICATION	//{{{ getToolTipText() method
WITHOUT_CLASSIFICATION	//{{{ paintScreenLineRange() method
WITHOUT_CLASSIFICATION	//{{{ paintScreenLineRange() method
WITHOUT_CLASSIFICATION	//{{{ addExtension() method
WITHOUT_CLASSIFICATION	//{{{ removeExtension() method
WITHOUT_CLASSIFICATION	//{{{ getExtensions() method
WITHOUT_CLASSIFICATION	// notify a running waitForRequests() method
WITHOUT_CLASSIFICATION	// wait for more requests
WITHOUT_CLASSIFICATION	// status message changed, operation started, operation ends, ...
WITHOUT_CLASSIFICATION	// progress bar value change
WITHOUT_CLASSIFICATION	// Log some stuff
WITHOUT_CLASSIFICATION	//{{{ setLogWriter() method
WITHOUT_CLASSIFICATION	// do nothing, who cares
WITHOUT_CLASSIFICATION	//{{{ flushStream() method
WITHOUT_CLASSIFICATION	//{{{ closeStream() method
WITHOUT_CLASSIFICATION	//{{{ getLogListModel() method
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ start() method
WITHOUT_CLASSIFICATION	//{{{ Class initializer
WITHOUT_CLASSIFICATION	//{{{ waitForRequests() method
WITHOUT_CLASSIFICATION	//{{{ getRequestCount() method
WITHOUT_CLASSIFICATION	//{{{ reset() method
WITHOUT_CLASSIFICATION	//{{{ CharIndexedSegment constructor
WITHOUT_CLASSIFICATION	// remove it so editor can continue // functioning
WITHOUT_CLASSIFICATION	//{{{ log() method
WITHOUT_CLASSIFICATION	// so that jEdit doesn't exit with no views open automatically //setDaemon(true);
WITHOUT_CLASSIFICATION	//{{{ CharIndexedSegment constructor
WITHOUT_CLASSIFICATION	// If multiple threads log stuff, we don't want // the output to get mixed up
WITHOUT_CLASSIFICATION	/* not really needed since threads don't start until after */
WITHOUT_CLASSIFICATION	//{{{ createPrintStream() method
WITHOUT_CLASSIFICATION	//{{{ charAt() method
WITHOUT_CLASSIFICATION	//{{{ _logException() method
WITHOUT_CLASSIFICATION	//{{{ _log() method
WITHOUT_CLASSIFICATION	//{{{ isValid() method
WITHOUT_CLASSIFICATION	//{{{ LogListModel class
WITHOUT_CLASSIFICATION	//{{{ addWorkRequest() method
WITHOUT_CLASSIFICATION	// do any queued AWT runnables
WITHOUT_CLASSIFICATION	//{{{ move() method
WITHOUT_CLASSIFICATION	//{{{ if there are no requests, execute AWT requests immediately
WITHOUT_CLASSIFICATION	//{{{ WorkThreadPool constructor
WITHOUT_CLASSIFICATION	//{{{ fireStatusChanged() method
WITHOUT_CLASSIFICATION	//{{{ getThreadCount() method
WITHOUT_CLASSIFICATION	//				Log.log(Log.DEBUG,this,"AWT immediate: " + run);
WITHOUT_CLASSIFICATION	//{{{ Add to AWT queue...
WITHOUT_CLASSIFICATION	//{{{ getThread() method
WITHOUT_CLASSIFICATION	//{{{ addProgressListener() method
WITHOUT_CLASSIFICATION	//{{{ removeProgressListener() method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//{{{ append() method
WITHOUT_CLASSIFICATION	//{{{ append() method
WITHOUT_CLASSIFICATION	//{{{ readLock() method
WITHOUT_CLASSIFICATION	//{{{ readUnlock() method
WITHOUT_CLASSIFICATION	//{{{ writeLock() method
WITHOUT_CLASSIFICATION	//{{{ writeUnlock() method
WITHOUT_CLASSIFICATION	//{{{ ensureCapacity() method
WITHOUT_CLASSIFICATION	// AWT thread magic
WITHOUT_CLASSIFICATION	//}}} //{{{ Add to work thread queue...
WITHOUT_CLASSIFICATION	//{{{ queueAWTRunner() method
WITHOUT_CLASSIFICATION	//{{{ fireProgressChanged() method
WITHOUT_CLASSIFICATION	//{{{ doAWTRequests() method
WITHOUT_CLASSIFICATION	//{{{ requestDone() method
WITHOUT_CLASSIFICATION	//{{{ RunRequestsInAWTThread class
WITHOUT_CLASSIFICATION	//{{{ getNextRequest() method
WITHOUT_CLASSIFICATION	//{{{ doAWTRequest() method
WITHOUT_CLASSIFICATION	// Request queue
WITHOUT_CLASSIFICATION	//			Log.log(Log.DEBUG,this,"AWT runner queued");
WITHOUT_CLASSIFICATION	//readers.removeElement(Thread.currentThread());
WITHOUT_CLASSIFICATION	//		Log.log(Log.DEBUG,this,"Running in AWT thread: " + request);
WITHOUT_CLASSIFICATION	//{{{ SegmentBuffer constructor
WITHOUT_CLASSIFICATION	//{{{ getNextAWTRequest() method
WITHOUT_CLASSIFICATION	//{{{ allowRead() method
WITHOUT_CLASSIFICATION	//{{{ Request class
WITHOUT_CLASSIFICATION	// Write in progress.
WITHOUT_CLASSIFICATION	//readers.addElement(Thread.currentThread());
WITHOUT_CLASSIFICATION	// Roll back state.
WITHOUT_CLASSIFICATION	//{{{ allowWrite() method
WITHOUT_CLASSIFICATION	// Same thread.
WITHOUT_CLASSIFICATION	//{{{ isWriteLocked() method
WITHOUT_CLASSIFICATION	//{{{ claimWriteLock() method
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	//{{{ add() method
WITHOUT_CLASSIFICATION	//{{{ clear() method
WITHOUT_CLASSIFICATION	//{{{ getSize() method
WITHOUT_CLASSIFICATION	//case ClassWriter.FIELD: //case ClassWriter.METH: //case ClassWriter.IMETH:
WITHOUT_CLASSIFICATION	//{{{ IntegerArray constructor
WITHOUT_CLASSIFICATION	//{{{ IntegerArray constructor
WITHOUT_CLASSIFICATION	//{{{ get() method
WITHOUT_CLASSIFICATION	//{{{ setSize() method
WITHOUT_CLASSIFICATION	//{{{ getArray() method
WITHOUT_CLASSIFICATION	/** * A constant pool item. Constant pool items can be created with the 'newXXX' * methods in the {@link ClassWriter} class. */
WITHOUT_CLASSIFICATION	// ------------------------------------------------------------------------- // Special instructions // -------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// ------------------------------------------------------------------------- // Exceptions table entries, max stack size and max locals // -------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// ------------------------------------------------------------------------- // Debug information // -------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Fields for the control flow graph analysis algorithm (used to compute the // maximum stack size). A control flow graph contains one node per "basic // block", and one edge per "jump" from one basic block to another. Each node // (i.e., each basic block) is represented by the Label object that // corresponds to the first instruction of this basic block. Each node also // stores the list of it successors in the graph, as a linked list of Edge // objects. // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Constructor // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Methods to compute offsets and to manage forward references // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// changes the opcode of the jump instruction, in order to be able to // find it later (see resizeInstructions in CodeWriter). These // temporary opcodes are similar to jump instruction opcodes, except // that the 2 bytes offset is unsigned (and can therefore represent // values from 0 to 65535, which is sufficient since the size of a // method is limited to 65535 bytes).
WITHOUT_CLASSIFICATION	// changes IFEQ ... JSR to opcodes 202 to 217 (inclusive)
WITHOUT_CLASSIFICATION	// changes IFNULL and IFNONNULL to opcodes 218 and 219 (inclusive)
WITHOUT_CLASSIFICATION	// updates maxLocals
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Constructors // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	//case 'L':
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Accessors // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	//case ARRAY: //case OBJECT:
WITHOUT_CLASSIFICATION	//case ARRAY: //case OBJECT:
WITHOUT_CLASSIFICATION	//case ARRAY: //case OBJECT:
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Direct conversion from classes to type descriptors, // without intermediate Type objects // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Corresponding size and opcodes // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Static initializer // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// pushes the first block onto the stack of blocks to be visited
WITHOUT_CLASSIFICATION	// adds the instruction to the bytecode of the method
WITHOUT_CLASSIFICATION	// if opcode == ATHROW or xRETURN, ends current block (no successor)
WITHOUT_CLASSIFICATION	// updates current and max stack sizes
WITHOUT_CLASSIFICATION	// updates current and max stack sizes
WITHOUT_CLASSIFICATION	// adds the instruction to the bytecode of the method
WITHOUT_CLASSIFICATION	// adds the instruction to the bytecode of the method
WITHOUT_CLASSIFICATION	// adds the instruction to the bytecode of the method
WITHOUT_CLASSIFICATION	// BIPUSH or NEWARRAY
WITHOUT_CLASSIFICATION	// no stack change, but end of current block (no successor)
WITHOUT_CLASSIFICATION	// xLOAD or xSTORE
WITHOUT_CLASSIFICATION	// updates max locals
WITHOUT_CLASSIFICATION	/*ILOAD_0*/
WITHOUT_CLASSIFICATION	/*ISTORE_0*/
WITHOUT_CLASSIFICATION	/*WIDE*/
WITHOUT_CLASSIFICATION	// updates current and max stack sizes
WITHOUT_CLASSIFICATION	// updates current and max stack sizes
WITHOUT_CLASSIFICATION	// updates current and max stack sizes
WITHOUT_CLASSIFICATION	// adds the instruction to the bytecode of the method
WITHOUT_CLASSIFICATION	// adds the instruction to the bytecode of the method
WITHOUT_CLASSIFICATION	// computes the stack size variation
WITHOUT_CLASSIFICATION	// updates current and max stack sizes only if opcode == NEWARRAY // (stack size variation = 0 for BIPUSH or SIPUSH)
WITHOUT_CLASSIFICATION	/*WIDE*/
WITHOUT_CLASSIFICATION	// updates current and max stack sizes only if opcode == NEW // (stack size variation = 0 for ANEWARRAY, CHECKCAST, INSTANCEOF)
WITHOUT_CLASSIFICATION	//case Constants.PUTFIELD:
WITHOUT_CLASSIFICATION	// computes the stack size variation
WITHOUT_CLASSIFICATION	// computes the stack size variation. In order not to recompute several // times this variation for the same Item, we use the intVal field of // this item to store this variation, once it has been computed. More // precisely this intVal field stores the sizes of the arguments and of // the return value corresponding to desc.
WITHOUT_CLASSIFICATION	// JSR_W
WITHOUT_CLASSIFICATION	// the above sizes have not been computed yet, so we compute them...
WITHOUT_CLASSIFICATION	// ... and we save them in order not to recompute them in the future
WITHOUT_CLASSIFICATION	// no stack change, but end of current block (with one new successor)
WITHOUT_CLASSIFICATION	// GOTO_W
WITHOUT_CLASSIFICATION	// ends current block (with one new successor)
WITHOUT_CLASSIFICATION	// resolves previous forward references to label, if any
WITHOUT_CLASSIFICATION	/*LDC2_W*/
WITHOUT_CLASSIFICATION	/*LDC_W*/
WITHOUT_CLASSIFICATION	// updates max locals only (no stack change)
WITHOUT_CLASSIFICATION	// updates current stack size (max stack size unchanged)
WITHOUT_CLASSIFICATION	// updates current stack size (max stack size unchanged)
WITHOUT_CLASSIFICATION	// ends current block (with many new successors)
WITHOUT_CLASSIFICATION	// ends current block (with many new successors)
WITHOUT_CLASSIFICATION	// jump offset // GOTO_W
WITHOUT_CLASSIFICATION	// case of a backward jump with an offset >= -32768, or of a forward jump // with, of course, an unknown offset. In these cases we store the offset // in 2 bytes (which will be increased in resizeInstructions, if needed).
WITHOUT_CLASSIFICATION	// begins a new current block, // resets the relative current and max stack sizes
WITHOUT_CLASSIFICATION	// updates current stack size (max stack size unchanged because stack // size variation always negative or null)
WITHOUT_CLASSIFICATION	// pushes handler block onto the stack of blocks to be visited
WITHOUT_CLASSIFICATION	// true (non relative) max stack size
WITHOUT_CLASSIFICATION	// pops a block from the stack
WITHOUT_CLASSIFICATION	// computes the true (non relative) max stack size of this block
WITHOUT_CLASSIFICATION	// updates the global max stack size
WITHOUT_CLASSIFICATION	// analyses the successors of the block
WITHOUT_CLASSIFICATION	// if this successor has not already been pushed onto the stack...
WITHOUT_CLASSIFICATION	// computes the true beginning stack size of this successor block
WITHOUT_CLASSIFICATION	// pushes this successor onto the stack
WITHOUT_CLASSIFICATION	// releases all the Edge objects used by this CodeWriter
WITHOUT_CLASSIFICATION	// appends the [head ... tail] list at the beginning of the pool list
WITHOUT_CLASSIFICATION	// creates a new Edge object or reuses one from the shared pool
WITHOUT_CLASSIFICATION	// removes b from the pool
WITHOUT_CLASSIFICATION	// adds the previous Edge to the list of Edges used by this CodeWriter
WITHOUT_CLASSIFICATION	// initializes the previous Edge object...
WITHOUT_CLASSIFICATION	// ...and adds it to the successor list of the currentBlock block
WITHOUT_CLASSIFICATION	// replaces the temporary jump opcodes introduced by Label.resolve.
WITHOUT_CLASSIFICATION	// replaces old bytecodes with new ones
WITHOUT_CLASSIFICATION	// returns the positions of the resized instructions
WITHOUT_CLASSIFICATION	// forward jump
WITHOUT_CLASSIFICATION	// backward jump
WITHOUT_CLASSIFICATION	// access flags
WITHOUT_CLASSIFICATION	// types for NEWARRAY
WITHOUT_CLASSIFICATION	// JSR_W
WITHOUT_CLASSIFICATION	// over estimation of the number of bytes to be added to this // instruction = 3 - current number of padding bytes = 3 - (3 - // u%4) = u%4 = u & 3
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Utility methods: instruction resizing (used to handle GOTO_W and JSR_W) // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// bytecode of the method // indexes in b // loop indexes
WITHOUT_CLASSIFICATION	// 3 = loop again, 2 = loop ended, 1 = last pass, 0 = done
WITHOUT_CLASSIFICATION	// two additional bytes will be required to replace this // GOTO or JSR instruction with a GOTO_W or a JSR_W
WITHOUT_CLASSIFICATION	// opcode of current instruction // bytes to be added after this instruction
WITHOUT_CLASSIFICATION	// true number of bytes to be added (or removed) from this // instruction = (future number of padding bytes - current number // of padding byte) - previously over estimated variation = // = ((3 - newOffset%4) - (3 - u%4)) - u%4 // = (-newOffset%4 + u%4) - u%4 // = -(newOffset & 3)
WITHOUT_CLASSIFICATION	// converts temporary opcodes 202 to 217 (inclusive), 218 and 219 // to IFEQ ... JSR (inclusive), IFNULL and IFNONNULL
WITHOUT_CLASSIFICATION	// five additional bytes will be required to replace this // IFxxx <l> instruction with IFNOTxxx <l'> GOTO_W <l>, where // IFNOTxxx is the "opposite" opcode of IFxxx (i.e., IFNE for // IFEQ) and where <l'> designates the instruction just after // the GOTO_W.
WITHOUT_CLASSIFICATION	// like TABL_INSN
WITHOUT_CLASSIFICATION	// like TABL_INSN
WITHOUT_CLASSIFICATION	// skips instruction
WITHOUT_CLASSIFICATION	// skips instruction
WITHOUT_CLASSIFICATION	// adds a new (u, insert) entry in the allIndexes and allSizes arrays
WITHOUT_CLASSIFICATION	// replaces GOTO with GOTO_W, JSR with JSR_W and IFxxx <l> with // IFNOTxxx <l'> GOTO_W <l>, where IFNOTxxx is the "opposite" opcode // of IFxxx (i.e., IFNE for IFEQ) and where <l'> designates the // instruction just after the GOTO_W.
WITHOUT_CLASSIFICATION	// case ClassWriter.MANA_INSN:
WITHOUT_CLASSIFICATION	// changes temporary opcodes 202 to 217 (inclusive), 218 and 219 // to IFEQ ... JSR (inclusive), IFNULL and IFNONNULL
WITHOUT_CLASSIFICATION	// 2nd step: // copies the bytecode of the method into a new bytevector, updates the // offsets, and inserts (or removes) bytes as requested.
WITHOUT_CLASSIFICATION	// reads and copies instruction
WITHOUT_CLASSIFICATION	// skips 0 to 3 padding bytes
WITHOUT_CLASSIFICATION	// jump offset // GOTO_W // newOffset now computed from start of GOTO_W
WITHOUT_CLASSIFICATION	// skips 0 to 3 padding bytes
WITHOUT_CLASSIFICATION	// reads and copies instruction
WITHOUT_CLASSIFICATION	// updates the instructions addresses in the // catch, local var and line number tables
WITHOUT_CLASSIFICATION	// case MANA_INSN:
WITHOUT_CLASSIFICATION	// opcodes                  // visit method (- = idem)
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// scan from selection to end failed, so // scan from start to selection
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Constructor // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Static initializer // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Implementation of the ClassVisitor interface // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Other public methods // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// computes the real size of the bytecode of this class
WITHOUT_CLASSIFICATION	// allocates a byte vector of this size, in order to avoid unnecessary // arraycopy operations in the ByteVector.enlarge() method
WITHOUT_CLASSIFICATION	// special case: no current development version
WITHOUT_CLASSIFICATION	// end AbstractOptionPane implementation
WITHOUT_CLASSIFICATION	// begin ActionListener implementation
WITHOUT_CLASSIFICATION	// helper method to get Font from plugin properties
WITHOUT_CLASSIFICATION	// // Constructor //
WITHOUT_CLASSIFICATION	// // Attribute methods //
WITHOUT_CLASSIFICATION	// for toolbar display
WITHOUT_CLASSIFICATION	// // EBComponent implementation //
WITHOUT_CLASSIFICATION	// These JComponent methods provide the appropriate points // to subscribe and unsubscribe this object to the EditBus
WITHOUT_CLASSIFICATION	// // QuickNotepadActions implementation //
WITHOUT_CLASSIFICATION	// // Listener objects //
WITHOUT_CLASSIFICATION	// <Esc> closes a floating window
WITHOUT_CLASSIFICATION	// cwd not implemented in this version
WITHOUT_CLASSIFICATION	// end JcmdProcess.java
WITHOUT_CLASSIFICATION	/* Get full command line */
WITHOUT_CLASSIFICATION	// this will result in a slight speed up, since we // don't need to read the DTD anyway, as AElfred is // non-validating
WITHOUT_CLASSIFICATION	// this will result in a slight speed up, since we // don't need to read the DTD anyway, as AElfred is // non-validating
WITHOUT_CLASSIFICATION	// we remember which classes we don't exist // because BeanShell tries loading all possible // <imported prefix>.<class name> combinations
WITHOUT_CLASSIFICATION	// if it's not in the class hash, and not marked as // non-existent, try loading it from the CLASSPATH
WITHOUT_CLASSIFICATION	// To avoid any problems if components are added or removed // while the message is being sent
WITHOUT_CLASSIFICATION	// Some Java versions return the clipboard // contents using the native line separator, // so have to convert it here
WITHOUT_CLASSIFICATION	// Either class sun.tools.javac.Main or // com.sun.tools.javac.Main must be there:
WITHOUT_CLASSIFICATION	// Stop script kiddies from opening the edit // server port and just leaving it open, as a // DoS
WITHOUT_CLASSIFICATION	// coming out of background mode. // no views open. // no buffers open if args empty.
WITHOUT_CLASSIFICATION	// since recentBuffer will be set to the one that // was closed
WITHOUT_CLASSIFICATION	// - don't do these checks while a save is in progress, // because for a moment newModTime will be greater than // oldModTime, due to the multithreading // - only supported on local file system
WITHOUT_CLASSIFICATION	// this ensures that undo can clear the dirty flag properly // when all edits up to a save are undone
WITHOUT_CLASSIFICATION	// note that if firstLine == lastLine, loop does not // execute
WITHOUT_CLASSIFICATION	// fill in defaults for these from system properties if the // corresponding buffer.XXX properties not set
WITHOUT_CLASSIFICATION	// create a DirectoryEntry manually // instead of using _vfs._getDirectoryEntry() // since so many VFS's have broken // implementations of this method
WITHOUT_CLASSIFICATION	// Java does not support this encoding so // we have to handle it manually.
WITHOUT_CLASSIFICATION	// file begins with UTF-8-Y signature. // discard the signature, and read // the remainder as UTF-8.
WITHOUT_CLASSIFICATION	// fix for "[ 865589 ] 0-byte files should open using // the default line seperator"
WITHOUT_CLASSIFICATION	// // helper methods //
WITHOUT_CLASSIFICATION	/* call sendBreak after fixed number of			 * lines of stdout are read			 */
WITHOUT_CLASSIFICATION	// end JcmdProcessTest.java
WITHOUT_CLASSIFICATION	// Big enough for a \r\n pair // lookBehind[0] = most recent // lookBehind[1] = second most recent
WITHOUT_CLASSIFICATION	// Is this it? // Is the class public or can we use accessibility?
WITHOUT_CLASSIFICATION	// we don't know the right hand side of the assignment yet. // has at least one setter of the right name?
WITHOUT_CLASSIFICATION	// Add the '0-repeats' index // positions.elementAt(z) == position [] in input after <<z>> matches
WITHOUT_CLASSIFICATION	// Order these from longest to shortest // Start by assuming longest (more repeats)
WITHOUT_CLASSIFICATION	// These variables are package scope for fast access within the engine // execution flags this match was made using
WITHOUT_CLASSIFICATION	// These are, respectively, the first and last tokens in our linked list // If there is only one token, firstToken == lastToken
WITHOUT_CLASSIFICATION	// not in settings directory or jEdit home directory. // no need to reload anything.
WITHOUT_CLASSIFICATION	//}}} //{{{ Insert the expansion
WITHOUT_CLASSIFICATION	// $ at end is literal //}}}
WITHOUT_CLASSIFICATION	// later on we need to know if certain code is called from // the main thread
WITHOUT_CLASSIFICATION	// ok, this one seems to confuse newbies // endlessly, so log it as NOTICE, not // ERROR
WITHOUT_CLASSIFICATION	// don't show splash screen if there is a file named // 'nosplash' in the settings directory
WITHOUT_CLASSIFICATION	// This reloads the token marker and sends a message // which causes edit panes to repaint their text areas
WITHOUT_CLASSIFICATION	// If only one new file is open which is clean, just close // it, which will create an 'Untitled-1'
WITHOUT_CLASSIFICATION	// can happen if the user presses C+w twice real // quick and the buffer has unsaved changes
WITHOUT_CLASSIFICATION	// paths on case-insensitive filesystems are stored as lower // case in the hash.
WITHOUT_CLASSIFICATION	// still need to call the status check even if the option is // off, so that the write protection is updated if it changes // on disk
WITHOUT_CLASSIFICATION	// the problem with this is that if we have two edit panes // looking at the same buffer and the file is reloaded both // will jump to the same location
WITHOUT_CLASSIFICATION	// Don't show the welcome message if jEdit was started // with the -nosettings switch
WITHOUT_CLASSIFICATION	//Log.log(Log.DEBUG,jEdit.class,"Adding edit mode " //	+ mode.getName());
WITHOUT_CLASSIFICATION	// if only one, clean, 'untitled' buffer is open, we // replace it
WITHOUT_CLASSIFICATION	// if the user pressed eg C+e n n in the // search bar we want focus to go back there // after the prefix is done
WITHOUT_CLASSIFICATION	// we might have been closed as a result of // the above
WITHOUT_CLASSIFICATION	// we might have been closed as a result of // the above
WITHOUT_CLASSIFICATION	// tool bar and status bar gets added in propertiesChanged() // depending in the 'tool bar alternate layout' setting.
WITHOUT_CLASSIFICATION	// null some variables so that retaining references // to closed views won't hurt as much.
WITHOUT_CLASSIFICATION	// we create a stream tokenizer for parsing a simple // stack-based language
WITHOUT_CLASSIFICATION	// REVIEW // This is horribly inefficient, but it ensures that we // properly skip over bytes via the TarBuffer... //
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Do not evaluate methods this() or super() in class instance space // (i.e. inside a constructor)
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// Check if a plugin with the same name // is already loaded
WITHOUT_CLASSIFICATION	// remove action sets, dockables, etc so that user doesn't // see the broken plugin
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	// endIndex is now position at a ')','\)'  // nextIndex is end of string or position after ')' or '\)'
WITHOUT_CLASSIFICATION	// ONE-OR-MORE REPEAT OPERATOR //  + | \+ depending on RE_BK_PLUS_QM //  not available if RE_LIMITED_OPS is set
WITHOUT_CLASSIFICATION	// ZERO-OR-ONE REPEAT OPERATOR / STINGY MATCHING OPERATOR //  ? | \? depending on RE_BK_PLUS_QM //  not available if RE_LIMITED_OPS is set //  stingy matching if RE_STINGY_OPS is set and it follows a quantifier
WITHOUT_CLASSIFICATION	// WORD BREAK OPERATOR //  \b if ????
WITHOUT_CLASSIFICATION	// DIGIT OPERATOR //  \d if RE_CHAR_CLASS_ESCAPES is set
WITHOUT_CLASSIFICATION	// NON-WHITESPACE OPERATOR //  \S
WITHOUT_CLASSIFICATION	// (?:) // *?,??,+?,{}? // (?=)(?!) // \A,\Z // \d,\D,\w,\W,\s,\S within [] // (?#)
WITHOUT_CLASSIFICATION	// if chain returns false, it "rejected" the token due to // an optimization, and next was combined with lastToken
WITHOUT_CLASSIFICATION	// next succeeds // is a match // try next option
WITHOUT_CLASSIFICATION	// No absolute pathnames // Windows (and Posix?) paths can start with "\\NetworkDrive\", // so we loop on starting /'s.
WITHOUT_CLASSIFICATION	// this will result in a slight speed up, since we // don't need to read the DTD anyway, as AElfred is // non-validating
WITHOUT_CLASSIFICATION	//int totalDraw = (n + 1 + NUM_OVERSHOOT_BYTES) + (n + NUM_OVERSHOOT_BYTES) + n + 65537; //compressOutOfMemory ( totalDraw, n );
WITHOUT_CLASSIFICATION	// ensures that active view is saved last, // ie created last on next load, ie in front // on next load
WITHOUT_CLASSIFICATION	// this will result in a slight speed up, since we // don't need to read the DTD anyway, as AElfred is // non-validating
WITHOUT_CLASSIFICATION	// record \n and \t on lines specially so that auto indent // can take place
WITHOUT_CLASSIFICATION	// since subsequent macros with the same name are ignored, // load user macros first so that they override the system // macros.
WITHOUT_CLASSIFICATION	// in case macro file name has a space in it. // spaces break the view.toolBar property, for instance, // since it uses spaces to delimit action names.
WITHOUT_CLASSIFICATION	//System.err.println("y=" + y + ",offsetY=" + offsetY //	+ ",size.height=" + size.height //	+ ",win.height=" + win.getHeight());
WITHOUT_CLASSIFICATION	// I'm not sure when this can happen, // but it does sometimes, witness the // jEdit bug tracker.
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////// // Constructors. ////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// // Constants for input. //
WITHOUT_CLASSIFICATION	// Read the value, normalizing whitespace // if it is not CDATA.
WITHOUT_CLASSIFICATION	// Check for surrogates: 00000000 0000xxxx yyyyyyyy zzzzzzzz //  (1101|10xx|xxyy|yyyy + 1101|11yy|zzzz|zzzz: 
WITHOUT_CLASSIFICATION	// Search for a matching tuple, and // return the string if we find one.
WITHOUT_CLASSIFICATION	// OK, add it to the end of the // bucket.
WITHOUT_CLASSIFICATION	// // Attributes //
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////// // High-level I/O. //////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// UCS-4 must begin with "<!XML" // 0x00 0x00 0x00 0x3c: UCS-4, big-endian (1234)
WITHOUT_CLASSIFICATION	// Set up a snapshot of the current // input source.
WITHOUT_CLASSIFICATION	// Compare the input, character- // by character.
WITHOUT_CLASSIFICATION	// // Buffers for decoded but unparsed character input. //
WITHOUT_CLASSIFICATION	// // Buffer for undecoded raw byte input. //
WITHOUT_CLASSIFICATION	// This is necessary to have a file opened from the Finder // before jEdit is running set as the currently active // buffer.
WITHOUT_CLASSIFICATION	//super(); //}}}
WITHOUT_CLASSIFICATION	// put forNameSpace it on the top of the stack // Note: it's important that there is only one exit point from this // method so that we can swap back the namespace.
WITHOUT_CLASSIFICATION	// The lock is our declaring namespace's This reference // (the method's 'super').  Or in the case of a class it's the // class instance.
WITHOUT_CLASSIFICATION	// Set untyped variable // untyped param
WITHOUT_CLASSIFICATION	// Check for explicit return of value from void method type. // retControl.returnPoint is the Node of the return statement
WITHOUT_CLASSIFICATION	// remove the bsh:// // get the index of the : between the host and the port is located
WITHOUT_CLASSIFICATION	// Unwrap target exception.  If the interface declares that  // it throws the ex it will be delivered.  If not it will be  // wrapped in an UndeclaredThrowable
WITHOUT_CLASSIFICATION	// Get the type by constructing a prototype array with // arbitrary (zero) length in each dimension. // int array default zeros
WITHOUT_CLASSIFICATION	// If it had a different type throw error. // This allows declaring the same var again, but not with // a different (even if assignable) type.
WITHOUT_CLASSIFICATION	// Careful here: // else fall through to override and install the new typed version
WITHOUT_CLASSIFICATION	// now done in NameSpace automatically when root // The classes which are imported by default //globalNameSpace.loadDefaultImports();
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// this will result in a slight speed up, since we // don't need to read the DTD anyway, as AElfred is // non-validating
WITHOUT_CLASSIFICATION	// --------------------------------------------------------- // The following instance variables mutate during evaluation and should // be reset by the reset() method where necessary
WITHOUT_CLASSIFICATION	// No variable or class found in 'this' type ref. // if autoAllocateThis then create one; a child 'this'.
WITHOUT_CLASSIFICATION	// null 'from' type corresponds to type of Primitive.NULL // assign to any object type
WITHOUT_CLASSIFICATION	// wrapper to primitive // Convert value to Primitive and check/cast it.
WITHOUT_CLASSIFICATION	// For operator-assign operations save the lhs value before evaluating // the rhs.  This is correct Java behavior for postfix operations // e.g. i=1; i+=i++; // should be 2 not 3
WITHOUT_CLASSIFICATION	// number of nodes on stack // current mark
WITHOUT_CLASSIFICATION	// Try to load the module // don't refer to it directly here or we're dependent upon it
WITHOUT_CLASSIFICATION	// NULL return null as type... we currently use null type to indicate  // loose typing throughout bsh.
WITHOUT_CLASSIFICATION	// Trying to cast primitive to an object type // Primitive.NULL can be cast to any object type
WITHOUT_CLASSIFICATION	// Begin BeanShell Modification - super constructor args // null node, null callstack, ParseException knows where the error is.
WITHOUT_CLASSIFICATION	// Push nulls for various args of invokeMethod // interpreter // callstack // callerinfo
WITHOUT_CLASSIFICATION	// Generate code to call ClassGeneratorUtil to get our switch index  // and give us args...
WITHOUT_CLASSIFICATION	// check to see if the instance has already been initialized // (the case if using a this() alternate constuctor)
WITHOUT_CLASSIFICATION	// evaluate the instance portion of the block in it // Evaluate the initializer block
WITHOUT_CLASSIFICATION	// Handle ".class" suffix operation // Prefix must be a BSHType
WITHOUT_CLASSIFICATION	//}}} //{{{ Word character...
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// this will result in a slight speed up, since we // don't need to read the DTD anyway, as AElfred is // non-validating
WITHOUT_CLASSIFICATION	// we didn't have a component previously, so // create a border
WITHOUT_CLASSIFICATION	//{{{ filesActivated() method // canDoubleClickClose set to false when ENTER pressed
WITHOUT_CLASSIFICATION	// we expand those that are non-empty, and // remove those that are empty
WITHOUT_CLASSIFICATION	//{{{ setFoldLevel() method // Also sets 'fold level valid' flag
WITHOUT_CLASSIFICATION	// if auto wrap is on, always restart search. // if auto wrap is off, and we're called from // a macro, stop search. If we're called // interactively, ask the user what to do.
WITHOUT_CLASSIFICATION	// for backwards compatibility with plugins that fiddle with // jEdit's UI layout
WITHOUT_CLASSIFICATION	// we have binding foo // but user asks to remove foo bar?
WITHOUT_CLASSIFICATION	// we keep the first non-null frc we get, since sometimes // we get invalid ones on subsequent pages on Windows
WITHOUT_CLASSIFICATION	// this is handled a little differently from other jEdit settings // as the splash screen flag needs to be known very early in the // startup sequence, before the user properties have been loaded
WITHOUT_CLASSIFICATION	// impl note: since multiple searches now allowed, // extra level in hierarchy
WITHOUT_CLASSIFICATION	// invalid regexp, ignore // return true to avoid annoying beeping while // typing a re
WITHOUT_CLASSIFICATION	// we use a custom JRadioButton subclass that returns // false for isFocusTraversable() so that the user can // tab from the search field to the replace field with // one keystroke
WITHOUT_CLASSIFICATION	// the code above builds a 1-indexed suffix array, // but we shift it to be 0-indexed, ignoring the // original 0-th element
WITHOUT_CLASSIFICATION	// Leave buffer in a consistent state if // an error occurs
WITHOUT_CLASSIFICATION	//{{{ // lazily create skip and suffix arrays for either the // search pattern, or the reversed search pattern
WITHOUT_CLASSIFICATION	// used for the stringReplace and beanShell replace radio buttons, // so that the user can press tab to go from the find field to the // replace field in one go
WITHOUT_CLASSIFICATION	// if the caret is on a collapsed fold, collapse the // parent fold
WITHOUT_CLASSIFICATION	// this is either style.getBackgroundColor() or // styles[defaultID].getBackgroundColor()
WITHOUT_CLASSIFICATION	// complete-word command needs a list of all non-alphanumeric // characters used in a keyword map.
WITHOUT_CLASSIFICATION	//}}} //{{{ Paint bracket scope
WITHOUT_CLASSIFICATION	//{{{ physDown() method // scroll down by physical line amount
WITHOUT_CLASSIFICATION	// still have to call this even if it equals the // old one so that the offset manager sets the // validity flag!
WITHOUT_CLASSIFICATION	// No matter what happends... stops us from leaving buffer // in a bad state
WITHOUT_CLASSIFICATION	// Don't overstrike if we're on the end of // the line
WITHOUT_CLASSIFICATION	// so that end followed by up arrow will always put caret at // the end of the previous line, for example //setMagicCaretPosition(Integer.MAX_VALUE); //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	// this is package-private so that the painter can use it without // having to call getSelection() (which involves an array copy)
WITHOUT_CLASSIFICATION	// try and merge existing selections one by // one with the new selection
WITHOUT_CLASSIFICATION	// if one line's chunks are invalid, remaining lines are also // invalid
WITHOUT_CLASSIFICATION	//case ClassWriter.FIELD: //case ClassWriter.METH: //case ClassWriter.IMETH:
WITHOUT_CLASSIFICATION	// updates current stack size (max stack size unchanged because stack // size variation always negative in this case)
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Utility methods: control flow analysis algorithm // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// copy of indexes // copy of sizes // instructions to be resized // future offset of a jump instruction
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	/*		Perform a cast, cast check, or assignability check.		@param toType the class type of the cast result, which may include			primitive types, e.g. Byte.TYPE.  toType may be null to indicate a			loose type assignment (which matches any fromType).		@param fromType is the class type of the value to be cast including			java primitive TYPE classes for primitives.			fromType should be null to indicate that the fromValue is or would			be Primitive.NULL		@param fromValue an Object or bsh.Primitive primitive value (including			Primitive.NULL or Primitive.VOID )		@param checkOnly If checkOnly is true then fromValue must be null.			FromType is checked for the cast to toType...			If checkOnly is false then fromValue must be non-null			(Primitive.NULL is ok) and the actual cast is performed.		@throws UtilEvalError on invalid assignment (when operation is			assignment ).		@throws UtilTargetError wrapping ClassCastException on cast error 			(when operation is cast)		@param operation is Types.CAST or Types.ASSIGNMENT		@see Primitive.getType()	*/
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// for debugging
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	//}}}
WITHOUT_CLASSIFICATION	// // I/O information. // // current reader // current input stream // current line number // current column number // type of input source // stack of input soruces // current external entity // current character encoding. // how many bytes read from current source.
WITHOUT_CLASSIFICATION	/*          We'll print our banner using eval(String) in order to          exercise the parser and get the basic expression classes loaded...          This ameliorates the delay after typing the first statement.        */
WITHOUT_CLASSIFICATION	/*		Disallowing VOIDs here was an easy way to support the throwing of a 		more descriptive error message on use of an undefined argument to a 		method call (very common).  If it ever turns out that we need to 		support that for some reason we'll have to re-evaluate how we get 		"meta-information" about the arguments in the various invoke() methods 		that take Object [].  We could either pass BSHArguments down to 		overloaded forms of the methods or throw an exception subtype 		including the argument position back up, where the error message would		be compounded.	*/
WITHOUT_CLASSIFICATION	/*				Primitive (number or void) is not normally an instanceof				anything.  But for internal use we'll test true for the				bsh.Primitive class.  				i.e. (5 instanceof bsh.Primitive) will be true			*/
WITHOUT_CLASSIFICATION	// this will be the current parse character (pattern[index])
WITHOUT_CLASSIFICATION	// this will result in a slight speed up, since we // don't need to read the DTD anyway, as AElfred is // non-validating
WITHOUT_CLASSIFICATION	// fixes the hang that can occur if we 'save as' to a // new filename which requires re-sorting
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Conversion to type descriptors // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// each JAR file listed in the plugin's jars property // needs to know that we need them
WITHOUT_CLASSIFICATION	// // Maintain a count of errors. //
WITHOUT_CLASSIFICATION	// number of child nodes 
WITHOUT_CLASSIFICATION	// number of child nodes 
WITHOUT_CLASSIFICATION	// wrap the exception in a TargetException to propogate it up
WITHOUT_CLASSIFICATION	/*		object is a java.lang wrapper for boolean, char, or number type	*/
WITHOUT_CLASSIFICATION	// ALTERNATION OPERATOR //  \| or | (if RE_NO_BK_VBAR) or newline (if RE_NEWLINE_ALT) //  not available if RE_LIMITED_OPS is set
WITHOUT_CLASSIFICATION	//}}} //}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ removeBufferFromList() method
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Fields for the control flow graph analysis algorithm (used to compute the // maximum stack size). A control flow graph contains one node per "basic // block", and one edge per "jump" from one basic block to another. Each node // (i.e., each basic block) is represented by the Label object that // corresponds to the first instruction of this basic block. Each node also // stores the list of its successors in the graph, as a linked list of Edge // objects. // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// default for plugins that don't specify this property (ie, // 4.1-style plugins) is to load them on startup
WITHOUT_CLASSIFICATION	// overflow character from last data chunk.
WITHOUT_CLASSIFICATION	// sanity check during development
WITHOUT_CLASSIFICATION	/* A definite node is constructed from a specified number of     children.  That number of nodes are popped from the stack and     made the children of the definite node.  Then the definite node     is pushed on to the stack. */
WITHOUT_CLASSIFICATION	// while in list // Out of list, index is one past ']'
WITHOUT_CLASSIFICATION	// don't do this in static{} since we need jEdit.initMisc() // run first so we have the jeditresource: protocol
WITHOUT_CLASSIFICATION	/* if value is null:		 * - if default is null, unset user prop		 * - else set user prop to ""		 * else		 * - if default equals value, ignore		 * - if default doesn't equal value, set user		 */
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Fields to optimize the creation of {@link Edge Edge} objects by using a // pool of reusable objects. The (shared) pool is a linked list of Edge // objects, linked to each other by their {@link Edge#poolNext} field. Each // time a CodeWriter needs to allocate an Edge, it removes the first Edge // of the pool and adds it to a private list of Edge objects. After the end // of the control flow analysis algorithm, the Edge objects in the private // list of the CodeWriter are added back to the pool (by appending this // private list to the pool list; in order to do this in constant time, both // head and tail of the private list are stored in this CodeWriter). // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// buffers retain a reference to the fold handler in // question... and the easiest way to handle fold // handler unloading is this...
WITHOUT_CLASSIFICATION	// // Buffer for parsed character data. //
WITHOUT_CLASSIFICATION	/*					We get stuck in infinite loops here when unicode escapes					fail.  Must re-init the char stream reader 					(ASCII_UCodeESC_CharStream.java)				*/
WITHOUT_CLASSIFICATION	// find the java method
WITHOUT_CLASSIFICATION	// SUBEXPRESSIONS //  (...) | \(...\) depending on RE_NO_BK_PARENS
WITHOUT_CLASSIFICATION	// even though this class is called AbstractOptionPane, it is not really // abstract, since BufferOptions uses an instance of it to lay out its // components.
WITHOUT_CLASSIFICATION	//{{{ loadIfNecessary() method
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Implementation of the CodeVisitor interface // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	//{{{ Package-private members
WITHOUT_CLASSIFICATION	// // Buffer for parsed names. //
WITHOUT_CLASSIFICATION	// reinit the callstack
WITHOUT_CLASSIFICATION	// Do we have the necessary jdk1.2 packages and optional package?
WITHOUT_CLASSIFICATION	// I guess this is when we pass it as an argument? // Setting locally
WITHOUT_CLASSIFICATION	// not a comment // create RE subexpression as token.
WITHOUT_CLASSIFICATION	//{{{ addComponent() method
WITHOUT_CLASSIFICATION	//{{{ setProperties() method
WITHOUT_CLASSIFICATION	// adds the instruction to the bytecode of the method
WITHOUT_CLASSIFICATION	// adds the instruction to the bytecode of the method
WITHOUT_CLASSIFICATION	// adds the instruction to the bytecode of the method
WITHOUT_CLASSIFICATION	// adds the instruction to the bytecode of the method
WITHOUT_CLASSIFICATION	// adds the instruction to the bytecode of the method
WITHOUT_CLASSIFICATION	// adds the instruction to the bytecode of the method
WITHOUT_CLASSIFICATION	//{{{ Private members
WITHOUT_CLASSIFICATION	// // Hash table of attributes found in current start tag. //
WITHOUT_CLASSIFICATION	/*ignore*/
WITHOUT_CLASSIFICATION	// UNMATCHED RIGHT PAREN // ) or \) throw exception if // !syntax.get(RESyntax.RE_UNMATCHED_RIGHT_PAREN_ORD)
WITHOUT_CLASSIFICATION	/* private */
WITHOUT_CLASSIFICATION	// need to carry over file name and first line globs because they are // not given to us by the XMode handler, but instead are filled in by // the catalog loader.
WITHOUT_CLASSIFICATION	// case of a backward jump with an offset < -32768. In this case we // automatically replace GOTO with GOTO_W, JSR with JSR_W and IFxxx <l> // with IFNOTxxx <l'> GOTO_W <l>, where IFNOTxxx is the "opposite" opcode // of IFxxx (i.e., IFNE for IFEQ) and where <l'> designates the // instruction just after the GOTO_W.
WITHOUT_CLASSIFICATION	//{{{ Instance variables
WITHOUT_CLASSIFICATION	//dockMenu.addItem(new NSMenuItem().separatorItem()); //dockMenu.addItem(miMac);
WITHOUT_CLASSIFICATION	/* 			Create non-interactive local interpreter for this namespace			with source from the input stream and out/err same as 			this interpreter.		*/
WITHOUT_CLASSIFICATION	// If not found and there are arguments to match - // Look for an overloaded assignable match // (First find the method, then find accessible version of it)
WITHOUT_CLASSIFICATION	// MATCH-ANY-CHARACTER OPERATOR (except possibly newline and null) //  .
WITHOUT_CLASSIFICATION	//{{{ JARClassLoader constructor
WITHOUT_CLASSIFICATION	// no need to do this for macros!
WITHOUT_CLASSIFICATION	// GOTO_W
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//}}} //}}}
WITHOUT_CLASSIFICATION	//{{{ applicationShouldHandleReopen() method
WITHOUT_CLASSIFICATION	/*                throw new EvalError(					"Sourced file: "+sourceFileInfo+" parser Error: " 					+ e.getMessage( DEBUG ), node, callstack );				*/
WITHOUT_CLASSIFICATION	// Try static and then object, if allowed // Note that the Java compiler should not allow both.
WITHOUT_CLASSIFICATION	// search all of its interfaces breadth first
WITHOUT_CLASSIFICATION	// ZERO-OR-MORE REPEAT OPERATOR //  *
WITHOUT_CLASSIFICATION	// see what JARClassLoader this class is in
WITHOUT_CLASSIFICATION	// never called
WITHOUT_CLASSIFICATION	// control flow analysis algorithm: while the block stack is not empty, // pop a block from this stack, update the max stack size, compute // the true (non relative) begin stack size of the successors of this // block, and push these successors onto the stack (unless they have // already been pushed onto the stack). Note: by hypothesis, the {@link // Label#beginStackSize} of the blocks in the block stack are the true // (non relative) beginning stack sizes of these blocks.
WITHOUT_CLASSIFICATION	/*			Note: some interesting things are going on here.			1) We swap instead of push...  The primary mode of operation 			acts like we are in the enclosing namespace...  (super must be 			preserved, etc.)			2) We do *not* call the body block eval with the namespace 			override.  Instead we allow it to create a second subordinate 			BlockNameSpace child of the forNameSpace.  Variable propogation 			still works through the chain, but the block's child cleans the 			state between iteration.  			(which is correct Java behavior... see forscope4.bsh)		*/
WITHOUT_CLASSIFICATION	// WORD BEGIN OPERATOR  //  \< if ????
WITHOUT_CLASSIFICATION	// used to mark non-existent classes in class hash
WITHOUT_CLASSIFICATION	// evaluate a method declaration
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Utility methods: dump bytecode array // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	/*	End methods for interacting with Parser */
WITHOUT_CLASSIFICATION	/*        NULL means "no value".        This ia a placeholder for primitive null value.    */
WITHOUT_CLASSIFICATION	/*                If idealMatch fits targetMatch and this is the first match 				or targetMatch is more specific than the best match, make it 				the new best match.            */
WITHOUT_CLASSIFICATION	// TAB ESCAPE //  \t
WITHOUT_CLASSIFICATION	//{{{ cut() method
WITHOUT_CLASSIFICATION	//{{{ CustomClassManager class
WITHOUT_CLASSIFICATION	// Set the default entities here.
WITHOUT_CLASSIFICATION	// The canonical file name is also absolute. // No need for getAbsolutePath() here...
WITHOUT_CLASSIFICATION	// private to prevent invocation with param that isn't a primitive-wrapper
WITHOUT_CLASSIFICATION	// NON-SPECIAL CHARACTER (or escape to make literal) //  c | \* for example
WITHOUT_CLASSIFICATION	//{{{ getRegister() method
WITHOUT_CLASSIFICATION	// 1st step: // As explained above, resizing an instruction may require to resize another // one, which may require to resize yet another one, and so on. The first // step of the algorithm consists in finding all the instructions that // need to be resized, without modifying the code. This is done by the // following "fix point" algorithm: // - parse the code to find the jump instructions whose offset will need //   more than 2 bytes to be stored (the future offset is computed from the //   current offset and from the number of bytes that will be inserted or //   removed between the source and target instructions). For each such //   instruction, adds an entry in (a copy of) the indexes and sizes arrays //   (if this has not already been done in a previous iteration!) // - if at least one entry has been added during the previous step, go back //   to the beginning, otherwise stop. // In fact the real algorithm is complicated by the fact that the size of // TABLESWITCH and LOOKUPSWITCH instructions depends on their position in // the bytecode (because of padding). In order to ensure the convergence of // the algorithm, the number of bytes to be added or removed from these // instructions is over estimated during the previous loop, and computed // exactly only after the loop is finished (this requires another pass to // parse the bytecode of the method).
WITHOUT_CLASSIFICATION	// // When the class is loaded, populate the hash table of // attribute types. //
WITHOUT_CLASSIFICATION	/*modifiers*/
WITHOUT_CLASSIFICATION	/*		If this type of This implements it directly return this,		else try complain that we don't have the proxy mechanism.	*/
WITHOUT_CLASSIFICATION	// If both original args were Primitives return a Primitive result // else it was mixed (wrapper/primitive) return the wrapper type // Exception is for boolean result, return the primitive
WITHOUT_CLASSIFICATION	/*bcm*/
WITHOUT_CLASSIFICATION	// Overrides REToken.chain
WITHOUT_CLASSIFICATION	//{{{ constructPath() method
WITHOUT_CLASSIFICATION	// clear the static caches in BshClassManager
WITHOUT_CLASSIFICATION	// visitInsn // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // visitIntInsn // - // visitLdcInsn //int LDC_W = 19;           // - //int LDC2_W = 20;          // - // visitVarInsn // - // - // - // - //int ILOAD_0 = 26;         // - //int ILOAD_1 = 27;         // - //int ILOAD_2 = 28;         // - //int ILOAD_3 = 29;         // - //int LLOAD_0 = 30;         // - //int LLOAD_1 = 31;         // - //int LLOAD_2 = 32;         // - //int LLOAD_3 = 33;         // - //int FLOAD_0 = 34;         // - //int FLOAD_1 = 35;         // - //int FLOAD_2 = 36;         // - //int FLOAD_3 = 37;         // - //int DLOAD_0 = 38;         // - //int DLOAD_1 = 39;         // - //int DLOAD_2 = 40;         // - //int DLOAD_3 = 41;         // - //int ALOAD_0 = 42;         // - //int ALOAD_1 = 43;         // - //int ALOAD_2 = 44;         // - //int ALOAD_3 = 45;         // - // visitInsn // - // - // - // - // - // - // - // visitVarInsn // - // - // - // - //int ISTORE_0 = 59;        // - //int ISTORE_1 = 60;        // - //int ISTORE_2 = 61;        // - //int ISTORE_3 = 62;        // - //int LSTORE_0 = 63;        // - //int LSTORE_1 = 64;        // - //int LSTORE_2 = 65;        // - //int LSTORE_3 = 66;        // - //int FSTORE_0 = 67;        // - //int FSTORE_1 = 68;        // - //int FSTORE_2 = 69;        // - //int FSTORE_3 = 70;        // - //int DSTORE_0 = 71;        // - //int DSTORE_1 = 72;        // - //int DSTORE_2 = 73;        // - //int DSTORE_3 = 74;        // - //int ASTORE_0 = 75;        // - //int ASTORE_1 = 76;        // - //int ASTORE_2 = 77;        // - //int ASTORE_3 = 78;        // - // visitInsn // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // visitIincInsn // visitInsn // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // visitJumpInsn // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // visitVarInsn // visiTableSwitchInsn // visitLookupSwitch // visitInsn // - // - // - // - // - // visitFieldInsn // - // - // - // visitMethodInsn // - // - // - //int UNUSED = 186;         // NOT VISITED // visitTypeInsn // visitIntInsn // visitTypeInsn // visitInsn // - // visitTypeInsn // - // visitInsn // - //int WIDE = 196;           // NOT VISITED // visitMultiANewArrayInsn // visitJumpInsn // - //int GOTO_W = 200;         // - //int JSR_W = 201;          // -
WITHOUT_CLASSIFICATION	// // Flags for reading literals. //
WITHOUT_CLASSIFICATION	// If null callstack
WITHOUT_CLASSIFICATION	/*		invokeMethod() here is generally used by outside code to callback		into the bsh interpreter. e.g. when we are acting as an interface		for a scripted listener, etc.  In this case there is no real call stack		so we make a default one starting with the special JAVACODE namespace		and our namespace as the next.	*/
WITHOUT_CLASSIFICATION	// arithmetic
WITHOUT_CLASSIFICATION	/*eof*/
WITHOUT_CLASSIFICATION	// this has been changed since 1.03 to be non-overlapping matches
WITHOUT_CLASSIFICATION	// have to handle this case specially on windows. // insert \ between, eg A: and myfile.txt.
WITHOUT_CLASSIFICATION	//{{{ ToolBar-related constants
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Utility methods: constant pool management // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////// // Error reporting. //////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// Invoke the block, overriding namespace with localNameSpace
WITHOUT_CLASSIFICATION	// a default hashCode()
WITHOUT_CLASSIFICATION	// can't cast void to anything
WITHOUT_CLASSIFICATION	/*	Thanks to Sreenivasa Viswanadha for suggesting how to get rid of expensive	lookahead here.*/
WITHOUT_CLASSIFICATION	// Create a new REMatch to hold results
WITHOUT_CLASSIFICATION	//{{{ saveBackup() method
WITHOUT_CLASSIFICATION	//{{{ saveBackup() method
WITHOUT_CLASSIFICATION	//{{{ Layers
WITHOUT_CLASSIFICATION	// Method body can only use 'return' statment type return control.
WITHOUT_CLASSIFICATION	// These are necessary to let us test synchronization from scripts
WITHOUT_CLASSIFICATION	// Only allow legal Java assignment unless we're a CAST operation
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) ArrayInitializer */
WITHOUT_CLASSIFICATION	// Optimization: check if anchor + minimumLength > length
WITHOUT_CLASSIFICATION	/* if backup file was created less than			 * 'backupTimeDistance' ago, we do not			 * create the backup */
WITHOUT_CLASSIFICATION	//{{{ actionBar() method
WITHOUT_CLASSIFICATION	// Read the attribute name.
WITHOUT_CLASSIFICATION	// retControl.returnPoint is the Node of the return statement
WITHOUT_CLASSIFICATION	// null evalname and we're finished // base object for current eval
WITHOUT_CLASSIFICATION	// Begin BeanShell Modification - constructor
WITHOUT_CLASSIFICATION	/*	Originally called ResultType in the grammar*/
WITHOUT_CLASSIFICATION	// Special handling at end of input for e.g. "$"
WITHOUT_CLASSIFICATION	//{{{ quicksort() method
WITHOUT_CLASSIFICATION	//{{{ quicksort() method
WITHOUT_CLASSIFICATION	// this should never throw an exception.
WITHOUT_CLASSIFICATION	// Inform the handler about the // attribute.
WITHOUT_CLASSIFICATION	// If return type void, return void as the value.
WITHOUT_CLASSIFICATION	// Note: it's ok to cache class resolution here because when the class // space changes the namespace will discard cached names.
WITHOUT_CLASSIFICATION	// EOF, not zero read apparently
WITHOUT_CLASSIFICATION	/* * Expression syntax follows. */
WITHOUT_CLASSIFICATION	// Precondition: pattern[index-1] == ':' // we will return pos of closing ']'.
WITHOUT_CLASSIFICATION	//{{{ isToolsJarAvailable() method
WITHOUT_CLASSIFICATION	// Bind to any port on localhost; accept 2 simultaneous // connection attempts before rejecting connections
WITHOUT_CLASSIFICATION	// Found "<?"
WITHOUT_CLASSIFICATION	/*				If we have type info and the child is an array initializer				pass it along...  Else use the default eval style.				(This allows array initializer to handle the problem... 				allowing for future enhancements in loosening types there).				*/
WITHOUT_CLASSIFICATION	/*			Is it a simple variable name?			Doing this first gives the correct Java precedence for vars 			vs. imported class names (at least in the simple case - see			tests/precedence1.bsh).  It should also speed things up a bit.		*/
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) MethodInvocation */
WITHOUT_CLASSIFICATION	// Check for {} tomfoolery
WITHOUT_CLASSIFICATION	//{{{ parsePermissions() method
WITHOUT_CLASSIFICATION	// we have to deal with a huge range of possible border cases here.
WITHOUT_CLASSIFICATION	// Make a hash of the interface hashcodes in order to cache them
WITHOUT_CLASSIFICATION	/*			Is it a bsh script variable reference?			If we're just starting the eval of name (no base object)			or we're evaluating relative to a This type reference check.		*/
WITHOUT_CLASSIFICATION	// Generate code to push the BSHTHIS or BSHSTATIC field 
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) Arguments */
WITHOUT_CLASSIFICATION	// We could let a String fall through to final input, but since // it's the most likely input type, we check it first.
WITHOUT_CLASSIFICATION	//{{{ Expansion class
WITHOUT_CLASSIFICATION	// no background mode, and opening a new view
WITHOUT_CLASSIFICATION	// Get the string of enumerated values // if necessary.
WITHOUT_CLASSIFICATION	/*leave null*/
WITHOUT_CLASSIFICATION	/*			Is it a class name?			If we're just starting eval of name try to make it, else fail.		*/
WITHOUT_CLASSIFICATION	// Push 'this'
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) Block */
WITHOUT_CLASSIFICATION	// UNDONE When File lets us get the userName, use it!
WITHOUT_CLASSIFICATION	//}}} //{{{ Handle $
WITHOUT_CLASSIFICATION	//{{{ getBufferSwitcher() method
WITHOUT_CLASSIFICATION	// getClassInstance() throws exception if not there
WITHOUT_CLASSIFICATION	// Push the name of the method as a constant
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) IfStatement */
WITHOUT_CLASSIFICATION	/*     * freq table collected to save a pass over the data     * during decompression.     */
WITHOUT_CLASSIFICATION	// if no server running and user runs jedit -quit, // just exit
WITHOUT_CLASSIFICATION	//{{{ loadCaretInfo() method
WITHOUT_CLASSIFICATION	/**    * Parse a conditional section.    * [63] conditionalSect ::= includeSect || ignoreSect    * [64] includeSect ::= '<![' %'INCLUDE' '[' (%markupdecl*)* ']]>'    * [65] ignoreSect ::= '<![' %'IGNORE' '[' ignoreSectContents* ']]>'    * [66] ignoreSectContents ::= ((SkipLit | Comment | PI) -(Char* ']]>'))    *                           | ('<![' ignoreSectContents* ']]>')    *                           | (Char - (']' | [<'"]))    *                           | ('<!' (Char - ('-' | '[')))    * *NOTE: the '<![' has already been read.    * *TODO: verify that I am handling ignoreSectContents right.    */
WITHOUT_CLASSIFICATION	/*			If we've fallen through here we are no longer resolving to			a class type.		*/
WITHOUT_CLASSIFICATION	// generate the default branch of switch
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) WhileStatement */
WITHOUT_CLASSIFICATION	/*     * always: in the range 0 .. 9.     * The current block size is 100000 * this number.     */
WITHOUT_CLASSIFICATION	//{{{ Property methods
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) ReturnStatement */
WITHOUT_CLASSIFICATION	// fall through
WITHOUT_CLASSIFICATION	// // NOTE // We have fit EOF, and the block is not full! // // This is a broken archive. It does not follow the standard // blocking algorithm. However, because we are generous, and // it requires little effort, we will simply ignore the error // and continue as if the entire block were read. This does // not appear to break anything upstream. We used to return // false in this case. // // Thanks to 'Yohann.Roussel@alcatel.fr' for this fix. //
WITHOUT_CLASSIFICATION	// file name
WITHOUT_CLASSIFICATION	//{{{ getColorProperty() method
WITHOUT_CLASSIFICATION	// left == default case
WITHOUT_CLASSIFICATION	// OK, the cheat didn't work; start over // and do it by the book.
WITHOUT_CLASSIFICATION	// don't break jEdit core and plugins! //throw new InterpreterError("null variable value");
WITHOUT_CLASSIFICATION	/*		Generate a branch of the constructor switch.  This method is called by		generateConstructorSwitch.		The code generated by this method assumes that the argument array is 		on the stack.	*/
WITHOUT_CLASSIFICATION	/*@bgen(jjtree) ReturnStatement */
WITHOUT_CLASSIFICATION	/*     * index of the last char in the block, so     * the block size == last + 1.     */
WITHOUT_CLASSIFICATION	// Start with a little cheat.  Most of // the time, the white space will fall // within the current read buffer; if // not, then fall through.
WITHOUT_CLASSIFICATION	// If recurse, set global untyped var, else set it here.	 //NameSpace varScope = recurse ? getGlobal() : this; // This modification makes default allocation local
WITHOUT_CLASSIFICATION	/*bubble up if allowed*/
WITHOUT_CLASSIFICATION	// ok?
WITHOUT_CLASSIFICATION	/*squeltch*/
WITHOUT_CLASSIFICATION	/*squeltch*/
WITHOUT_CLASSIFICATION	/*         * Setting up the unzftab entries here is not strictly         * necessary, but it does save having to do it later         * in a separate pass, and so saves a block's worth of         * cache misses.         */
WITHOUT_CLASSIFICATION	//{{{ getMode() method
WITHOUT_CLASSIFICATION	//{{{ getAutosaveFile() method
WITHOUT_CLASSIFICATION	// Normalise whitespace if necessary.
WITHOUT_CLASSIFICATION	// try parent
WITHOUT_CLASSIFICATION	/*forcclass*/
WITHOUT_CLASSIFICATION	/*		Note: technically I think we could get by passing in only the		current namespace or perhaps BshClassManager here instead of 		CallStack and Interpreter.  However let's just play it safe in case		of future changes - anywhere you eval a node you need these.	*/
WITHOUT_CLASSIFICATION	/*         * Undo the MTF values for the selectors.         */
WITHOUT_CLASSIFICATION	//{{{ newFile() method
WITHOUT_CLASSIFICATION	//{{{ addBufferChangeListener() method
WITHOUT_CLASSIFICATION	// system id
WITHOUT_CLASSIFICATION	// Add the new typed var
WITHOUT_CLASSIFICATION	/*				If this was a literal "super" reference then we allow recursion				in setting the variable to get the normal effect of finding the				nearest definition starting at the super scope.  On any other				resolution qualified by a 'this' type reference we want to set				the variable directly in that scope. e.g. this.x=5;  or 				someThisType.x=5;								In the old scoping rules super didn't do this.			*/
WITHOUT_CLASSIFICATION	// type is correct here
WITHOUT_CLASSIFICATION	// Word boundary means input[index-1] was a word character // and input[index] is not, or input[index] is a word character // and input[index-1] was not //  In the string "one two three", these positions match: //  |o|n|e| |t|w|o| |t|h|r|e|e| //  ^     ^ ^     ^ ^         ^ // is current character a letter or digit? // is previous character a letter or digit?
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	// private members
WITHOUT_CLASSIFICATION	// Wait for pending I/O requests
WITHOUT_CLASSIFICATION	// Wait for pending I/O requests
WITHOUT_CLASSIFICATION	// will be cached from now on...
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////// // Utility routines. //////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	/*declaredOnly*/
WITHOUT_CLASSIFICATION	/*declaredOnly*/
WITHOUT_CLASSIFICATION	/*declaredOnly*/
WITHOUT_CLASSIFICATION	// Note: if we want methods declared inside blocks to be accessible via // this.methodname() inside the block we could handle it here as a // special case.  See also resolveThisFieldReference() special handling // for BlockNameSpace case.  They currently work via the direct name // e.g. methodName().
WITHOUT_CLASSIFICATION	// auto-gen default constructor // use default super constructor
WITHOUT_CLASSIFICATION	// number of times we've matched so far
WITHOUT_CLASSIFICATION	// Create a new file when the last is closed
WITHOUT_CLASSIFICATION	//{{{ Edit modes, syntax highlighting
WITHOUT_CLASSIFICATION	// The new length is <= the old one.
WITHOUT_CLASSIFICATION	// Try object imports
WITHOUT_CLASSIFICATION	// found an object and it's not an undefined variable
WITHOUT_CLASSIFICATION	// Determine if the constructor calls this() or super()
WITHOUT_CLASSIFICATION	// Check for stingy match for each possibility.
WITHOUT_CLASSIFICATION	/*         * Nodes and heap entries run from 1.  Entry 0         * for both the heap and nodes is a sentinel.         */
WITHOUT_CLASSIFICATION	/*         * Nodes and heap entries run from 1.  Entry 0         * for both the heap and nodes is a sentinel.         */
WITHOUT_CLASSIFICATION	/*         * Nodes and heap entries run from 1.  Entry 0         * for both the heap and nodes is a sentinel.         */
WITHOUT_CLASSIFICATION	/*         * Nodes and heap entries run from 1.  Entry 0         * for both the heap and nodes is a sentinel.         */
WITHOUT_CLASSIFICATION	/*         * Nodes and heap entries run from 1.  Entry 0         * for both the heap and nodes is a sentinel.         */
WITHOUT_CLASSIFICATION	/*         * Nodes and heap entries run from 1.  Entry 0         * for both the heap and nodes is a sentinel.         */
WITHOUT_CLASSIFICATION	//{{{ closeAllBuffers() method
WITHOUT_CLASSIFICATION	//{{{ closeAllBuffers() method
WITHOUT_CLASSIFICATION	//{{{ need to convert entries of 'props' to PropValue instances
WITHOUT_CLASSIFICATION	// Insert the content type, if any.
WITHOUT_CLASSIFICATION	// Try static imports
WITHOUT_CLASSIFICATION	// this() constructors come after super constructors in the table
WITHOUT_CLASSIFICATION	// Order these from longest to shortest // Start by assuming longest (more repeats)
WITHOUT_CLASSIFICATION	/*         * A 6-byte block header, the value chosen arbitrarily         * as 0x314159265359 :-).  A 32 bit value does not really         * give a strong enough guarantee that the value will not         * appear by chance in the compressed datastream.  Worst-case         * probability of this event, for a 900k block, is about         * 2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48 bits.         * For a compressed file of size 100Gb -- about 100000 blocks --         * only a 48-bit marker will do.  NB: normal compression/         * decompression do *not* rely on these statistical properties.         * They are only important when trying to recover blocks from         * damaged files.         */
WITHOUT_CLASSIFICATION	// close remaining buffers (the close dialog only deals with // dirty ones)
WITHOUT_CLASSIFICATION	// we do a write lock so that the // autosave, which grabs a read lock, // is not executed between the // deletion of the autosave file // and clearing of the dirty flag
WITHOUT_CLASSIFICATION	/*		If we want to support multiple commands in the command path we need to		change this to not throw the exception.	*/
WITHOUT_CLASSIFICATION	// Check for existing method
WITHOUT_CLASSIFICATION	// Create the instance 'This' namespace, set it on the object // instance and invoke the instance initializer
WITHOUT_CLASSIFICATION	// Find new doablesLast
WITHOUT_CLASSIFICATION	/*         * 20 is just a paranoia constant         */
WITHOUT_CLASSIFICATION	//{{{ saveAllBuffers() method
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// UCS-4 must begin with "<!XML" // 0x3c 0x00 0x00 0x00: UCS-4, little-endian (4321)
WITHOUT_CLASSIFICATION	//return countParts(value) > 1;
WITHOUT_CLASSIFICATION	// The object instance has already been initialzed by another // constructor.  Fall through to invoke the constructor body below.
WITHOUT_CLASSIFICATION	// At this point we've either got too many or just the right amount. // See if this numRepeats works with the rest of the regexp.
WITHOUT_CLASSIFICATION	/*         * Write `magic' bytes h indicating file-format == huffmanised,         * followed by a digit indicating blockSize100k.         */
WITHOUT_CLASSIFICATION	// auto reload changed buffers?
WITHOUT_CLASSIFICATION	//{{{ ActionHandler class
WITHOUT_CLASSIFICATION	// UCS-4 must begin with "<!XML" // 0x00 0x3c 0x00 0x00: UCS-4, unusual (3421)
WITHOUT_CLASSIFICATION	// Test all possible matches for this number of repeats
WITHOUT_CLASSIFICATION	/*                 * Complete the big bucket [ss] by quicksorting                 * any unsorted small buckets [ss, j].  Hopefully                 * previous pointer-scanning phases have already                 * completed many of the small buckets [ss, j], so                 * we don't have to sort them at all.                 */
WITHOUT_CLASSIFICATION	// ... sweet. saveBackup() will create backupDir if it // doesn't exist.
WITHOUT_CLASSIFICATION	//{{{ ParentMouseHandler class
WITHOUT_CLASSIFICATION	// UCS-2 with a byte-order marker. // 0xff 0xfe: UCS-2, little-endian (21)
WITHOUT_CLASSIFICATION	// Can't call it getClass()
WITHOUT_CLASSIFICATION	// handle primitive widening conversions - JLS 5.1.2
WITHOUT_CLASSIFICATION	/*overrideNamespace*/
WITHOUT_CLASSIFICATION	/*                 * Now scan this big bucket so as to synthesise the                 * sorted order for small buckets [t, ss] for all t != ss.                 */
WITHOUT_CLASSIFICATION	// Even if reallyExit is false, we still exit properly // if background mode is off
WITHOUT_CLASSIFICATION	// compare existing entries' hashcode with this
WITHOUT_CLASSIFICATION	// Compare with number of dimensions actually created with the // number specified (syntax uses the undefined ones here)
WITHOUT_CLASSIFICATION	// Some kind of 8-bit encoding without "<?XML" // (otherwise) UTF-8 without encoding/XML declaration
WITHOUT_CLASSIFICATION	/*			Lots of preconditions checked here...			Once things are running smoothly we might comment these out			(That's what assertions are for).		*/
WITHOUT_CLASSIFICATION	/*			dimensionsNode can return either a fully intialized array or VOID.			when VOID the prescribed array dimensions (defined and undefined)			are contained in the node.		*/
WITHOUT_CLASSIFICATION	// so that we don't try to reset() right away
WITHOUT_CLASSIFICATION	// so that we don't try to reset() right away
WITHOUT_CLASSIFICATION	/*                 * Find the coding table which is best for this group,                 * and record its identity in the selector table.                 */
WITHOUT_CLASSIFICATION	// in this case, we can't directly call // view.close(); we have to call closeView() // for all open views
WITHOUT_CLASSIFICATION	// execute nodes, skipping labels, until a break or return
WITHOUT_CLASSIFICATION	// Check for entity recursion.
WITHOUT_CLASSIFICATION	/* --- Instance data --- */
WITHOUT_CLASSIFICATION	// Both primitives, do primitive cast
WITHOUT_CLASSIFICATION	/*filter*/
WITHOUT_CLASSIFICATION	// check if input is at a valid position
WITHOUT_CLASSIFICATION	/*                     * 10                     */
WITHOUT_CLASSIFICATION	// Stop server
WITHOUT_CLASSIFICATION	//{{{ EnhancedButton constructor
WITHOUT_CLASSIFICATION	// Stop all plugins
WITHOUT_CLASSIFICATION	// Delegate to the static method
WITHOUT_CLASSIFICATION	// Test for a match, and push the character // back if the match fails.
WITHOUT_CLASSIFICATION	// Interpreter has no input stream, use eval() only // Interpreter has no input stream, use eval() only // Interpreter has a user, print prompts, etc.
WITHOUT_CLASSIFICATION	//Object r = checkOnly ? VALID_CAST :
WITHOUT_CLASSIFICATION	/*		Perform a suffix operation on the given object and return the 		new value.		<p>		obj will be a Node when suffix evaluation begins, allowing us to		interpret it contextually. (e.g. for .class) Thereafter it will be 		an value object or LHS (as determined by toLHS).		<p>				We must handle the toLHS case at each point here.		<p>	*/
WITHOUT_CLASSIFICATION	/*                 * copy 3                 */
WITHOUT_CLASSIFICATION	//{{{ updatePosition() method
WITHOUT_CLASSIFICATION	// if no requests are running, requestDone() // will not be called, so we must queue the // AWT runner ourselves.
WITHOUT_CLASSIFICATION	// Also cache the class so that no import resolution must occur // this avoids having to load our enclosing class which isn't // finished being generated yet... oy.
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////// // Low-level I/O. //////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// need to set the input stream - reinit the parser?
WITHOUT_CLASSIFICATION	// Primitive to arbitrary object type.  // Allow Primitive.castToType() to handle it as well as cases of  // Primitive.NULL and Primitive.VOID
WITHOUT_CLASSIFICATION	/*			Evaluate our prefix if it needs evaluating first.			If this is the first evaluation our prefix mayb be a Node 			(directly from the PrimaryPrefix) - eval() it to an object.  			If it's an LHS, resolve to a value.			Note: The ambiguous name construct is now necessary where the node 			may be an ambiguous name.  If this becomes common we might want to 			make a static method nodeToObject() or something.  The point is 			that we can't just eval() - we need to direct the evaluation to 			the context sensitive type of result; namely object, class, etc.		*/
WITHOUT_CLASSIFICATION	// a la Perl, $0 is whole thing, $1 - $9 are subexpressions
WITHOUT_CLASSIFICATION	// if started with java -jar jedit.jar
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Constructor // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// Read as many bytes as possible // into the read buffer.
WITHOUT_CLASSIFICATION	// init the static shared sharedObject if it's not there yet
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	/*map*/
WITHOUT_CLASSIFICATION	// index tracks the position in the char array
WITHOUT_CLASSIFICATION	// Pass 3: layout components
WITHOUT_CLASSIFICATION	//Log.log(Log.DEBUG,jEdit.class,fnf);
WITHOUT_CLASSIFICATION	// -------------------------------------------------------------------------- // Fields // --------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	/*strict*/
WITHOUT_CLASSIFICATION	// Dispatch to an encoding-specific // reader method to populate the // readBuffer.
WITHOUT_CLASSIFICATION	// bsh.evalOnly
DEFECT	/* two plugins provide same class! */
DEFECT	// dialogs fuck things up if a menu is visible, etc! //new BeanShellErrorDialog(view,e);
DEFECT	// 2 aug 2003: OS/2 Java has a broken getCanonicalPath()
DEFECT	//{{{ Broken class
DEFECT	// XXX: action bar might not be 'temp'
DEFECT	// Fix for this bug: // -- Put a mode into the user dir with the same name as one //    on the system dir. // -- Reload edit modes. // -- Old mode from system dir still used for highlighting //    until jEdit restart.
DEFECT	// TODO: move(x) shouldn't rely on calling next() x times
DEFECT	// TODO: move(x) shouldn't rely on calling next() x times
DEFECT	// this shouldn't happen, but...
DEFECT	// the view should not be null, but some plugins might do this
DEFECT	// Race condition here...
DEFECT	/*	Note: this method incorrectly caches the method structure.  It needs to	be cleared when the classloader changes.*/
DEFECT	// If it exists, remove it and add it at the end (avoid memory leak)
DEFECT	// If it exists, remove it and add it at the end (avoid memory leak)
DEFECT	// If it exists, remove it and add it at the end (avoid memory leak)
DEFECT	/* 		Apparently in some environments you can't catch the security exception		at all...  e.g. as an applet in IE  ... will probably have to work 		around 	*/
DEFECT	// This is not good... // need a way to update eval without re-installing... // so that we can re-eval params, etc. when classloader changes // look into this
DEFECT	// Warning: Null callstack here.  Don't think we need // a stack trace to indicate how we sourced the method.
DEFECT	// I wonder if the lack of this broke anything in the // past?
DEFECT	//{{{ Set the buffer's path // Caveat: won't work if save() called with a relative path. // But I don't think anyone calls it like that anyway.
DEFECT	// while its broken to have a null // symlinkPath, some older plugins // might...
DEFECT	// looks bad with the OS X L&F, apparently...
DEFECT	// looks bad with the OS X L&F, apparently...
DEFECT	// only works for jEdit plugins
DEFECT	// Jun 9 2004 12:40 PM // waitFor() hangs on some Java // implementations.
DEFECT	// Feb 4 2000 5:30 PM // Catch Throwable here rather than Exception. // Kaffe's implementation of Runtime.exec throws java.lang.InternalError.
DEFECT	// Feb 4 2000 5:30 PM // Catch Throwable here rather than Exception. // Kaffe's implementation of Runtime.exec throws java.lang.InternalError.
DEFECT	// does it matter that this doesn't set the type correctly?
DEFECT	// looks bad with the OS X L&F, apparently...
DEFECT	// ... but if HyperSearch results window is floating, // the workaround causes problems!
DEFECT	// very subtle... if we leave this for // ensurePhysicalLineIsVisible(), an // extra line will be added to the // scroll line count.
DEFECT	// this class is not very fast...
DEFECT	// 18 nov 2003: calling this on a drive letter on Windows causes // drive access
DEFECT	// This really should be Long.decode, but there isn't one. As a result, // hex and octal literals ending in 'l' or 'L' don't work.
DEFECT	// Don't generate private or loosely typed fields // Note: loose types aren't currently parsed anyway...
DEFECT	// BUG: if there are multiple selections in different // contexts, the wrong comment strings will be inserted.
DEFECT	// this seems to make nested readLock() calls work okay. // but I have no idea if it actually fixes things or not.
DEFECT	/*			Original note: Jdk under Win is throwing these to			warn about lower case / upper case possible mismatch.			e.g. bsh.console bsh.Console				Update: Prior to 1.3 we were squeltching NoClassDefFoundErrors 			which was very annoying.  I cannot reproduce the original problem 			and this was never a valid solution.  If there are legacy VMs that			have problems we can include a more specific test for them here.		*/
DEFECT	// // Use special cheats that speed up the code (currently about 50%), // but may cause problems with future maintenance and add to the // class file size (about 500 bytes). //
DEFECT	// Technically incorrect here - we need to wrap null values // as bsh.Primitive.NULL.  However the This.invokeMethod() // will do that much for us. // We need to generate a conditional here to test for null // and return Primitive.NULL
DEFECT	// Warning: Null callstack here.  Don't think we need // a stack trace to indicate how we sourced the method.
DEFECT	// charAt(index-n) may be unknown on a Reader/InputStream. FIXME // Match after a newline if in multiline mode
DEFECT	// caching is not correct and doesn't seem to help... //	enclosingNameSpace.cacheClass( name, genClass );
