// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999999974946804	WITHOUT_CLASSIFICATION	2.5053196218647238E-9	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999890061485655	WITHOUT_CLASSIFICATION	1.0993851434448587E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998575425537479	WITHOUT_CLASSIFICATION	1.4245744625213943E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998575425537479	WITHOUT_CLASSIFICATION	1.4245744625213943E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999877502767831	WITHOUT_CLASSIFICATION	1.2249723216885961E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999877502767831	WITHOUT_CLASSIFICATION	1.2249723216885961E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999189027849188	WITHOUT_CLASSIFICATION	8.109721508123861E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999993371136927	WITHOUT_CLASSIFICATION	6.628863071992903E-7	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999828911360993	WITHOUT_CLASSIFICATION	1.710886390071496E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999821571281843	WITHOUT_CLASSIFICATION	1.784287181571902E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.99988596675981	WITHOUT_CLASSIFICATION	1.1403324019001664E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.99988596675981	WITHOUT_CLASSIFICATION	1.1403324019001664E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.999992982864997	WITHOUT_CLASSIFICATION	7.0171350029087925E-6	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998255339788585	WITHOUT_CLASSIFICATION	1.7446602114150523E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998255339788585	WITHOUT_CLASSIFICATION	1.7446602114150523E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9999458222880084	WITHOUT_CLASSIFICATION	5.417771199150766E-5	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999548000483626	WITHOUT_CLASSIFICATION	4.519995163742835E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999378695858244	WITHOUT_CLASSIFICATION	6.213041417556368E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999378695858244	WITHOUT_CLASSIFICATION	6.213041417556368E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999378695858244	WITHOUT_CLASSIFICATION	6.213041417556368E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999378695858244	WITHOUT_CLASSIFICATION	6.213041417556368E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999378695858244	WITHOUT_CLASSIFICATION	6.213041417556368E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999378695858244	WITHOUT_CLASSIFICATION	6.213041417556368E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999378695858244	WITHOUT_CLASSIFICATION	6.213041417556368E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999951974325291	WITHOUT_CLASSIFICATION	4.802567470845371E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999951974325291	WITHOUT_CLASSIFICATION	4.802567470845371E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999951974325291	WITHOUT_CLASSIFICATION	4.802567470845371E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999951974325291	WITHOUT_CLASSIFICATION	4.802567470845371E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999951974325291	WITHOUT_CLASSIFICATION	4.802567470845371E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999951974325291	WITHOUT_CLASSIFICATION	4.802567470845371E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999951974325291	WITHOUT_CLASSIFICATION	4.802567470845371E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999616469913032	WITHOUT_CLASSIFICATION	3.83530086968466E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999616469913032	WITHOUT_CLASSIFICATION	3.83530086968466E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999616469913032	WITHOUT_CLASSIFICATION	3.83530086968466E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999616469913032	WITHOUT_CLASSIFICATION	3.83530086968466E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999616469913032	WITHOUT_CLASSIFICATION	3.83530086968466E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999616469913032	WITHOUT_CLASSIFICATION	3.83530086968466E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999573432360148	WITHOUT_CLASSIFICATION	4.265676398512948E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999573432360148	WITHOUT_CLASSIFICATION	4.265676398512948E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999573432360148	WITHOUT_CLASSIFICATION	4.265676398512948E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999573432360148	WITHOUT_CLASSIFICATION	4.265676398512948E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999573432360148	WITHOUT_CLASSIFICATION	4.265676398512948E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999573432360148	WITHOUT_CLASSIFICATION	4.265676398512948E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999347344912031	WITHOUT_CLASSIFICATION	6.526550879691902E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999347344912031	WITHOUT_CLASSIFICATION	6.526550879691902E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999347344912031	WITHOUT_CLASSIFICATION	6.526550879691902E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999347344912031	WITHOUT_CLASSIFICATION	6.526550879691902E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999347344912031	WITHOUT_CLASSIFICATION	6.526550879691902E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999347344912031	WITHOUT_CLASSIFICATION	6.526550879691902E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999347344912031	WITHOUT_CLASSIFICATION	6.526550879691902E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999520580541472	WITHOUT_CLASSIFICATION	4.794194585272725E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999520580541472	WITHOUT_CLASSIFICATION	4.794194585272725E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999520580541472	WITHOUT_CLASSIFICATION	4.794194585272725E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999520580541472	WITHOUT_CLASSIFICATION	4.794194585272725E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999953933566993	WITHOUT_CLASSIFICATION	4.6066433007237685E-6	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999953933566993	WITHOUT_CLASSIFICATION	4.6066433007237685E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989710957665	WITHOUT_CLASSIFICATION	1.0289042335260966E-6	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.999999550331415	WITHOUT_CLASSIFICATION	4.4966858496267256E-7	DEFECT
// name	WITHOUT_CLASSIFICATION	0.999998019478412	WITHOUT_CLASSIFICATION	1.9805215880735588E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999999337828628	WITHOUT_CLASSIFICATION	6.621713718585393E-8	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999996201206988	WITHOUT_CLASSIFICATION	3.7987930116918725E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999991050549656	WITHOUT_CLASSIFICATION	8.94945034433775E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999991050549656	WITHOUT_CLASSIFICATION	8.94945034433775E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999991050549656	WITHOUT_CLASSIFICATION	8.94945034433775E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999991050549656	WITHOUT_CLASSIFICATION	8.94945034433775E-7	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9998412271565956	WITHOUT_CLASSIFICATION	1.5877284340428256E-4	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999796589199301	WITHOUT_CLASSIFICATION	2.0341080069913936E-5	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999946968392156	WITHOUT_CLASSIFICATION	5.3031607844042706E-6	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.99999844359918	WITHOUT_CLASSIFICATION	1.5564008200840505E-6	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999997815081924	WITHOUT_CLASSIFICATION	2.1849180775385727E-7	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999923194685538	WITHOUT_CLASSIFICATION	7.680531446174119E-6	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999959015542328	WITHOUT_CLASSIFICATION	4.09844576719546E-6	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999999696246585	WITHOUT_CLASSIFICATION	3.0375341561053923E-8	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999999556625875	WITHOUT_CLASSIFICATION	4.4337412605025504E-8	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9999456033506371	WITHOUT_CLASSIFICATION	5.439664936303714E-5	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999979433871001	WITHOUT_CLASSIFICATION	2.0566128998160746E-6	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999990785982416	WITHOUT_CLASSIFICATION	9.21401758321546E-7	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999153197738974	WITHOUT_CLASSIFICATION	8.468022610261963E-5	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999999851760432	WITHOUT_CLASSIFICATION	1.4823956874534264E-8	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999969368373527	WITHOUT_CLASSIFICATION	3.06316264733586E-6	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999925337970269	WITHOUT_CLASSIFICATION	7.466202973107062E-6	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999864070488851	WITHOUT_CLASSIFICATION	1.3592951114902775E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999991050549656	WITHOUT_CLASSIFICATION	8.94945034433775E-7	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999872333603663	WITHOUT_CLASSIFICATION	1.2766639633734597E-5	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999995695832994	WITHOUT_CLASSIFICATION	4.304167006434934E-7	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999955850814966	WITHOUT_CLASSIFICATION	4.4149185035541075E-6	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.999985146483946	WITHOUT_CLASSIFICATION	1.4853516053988013E-5	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9998016258848414	WITHOUT_CLASSIFICATION	1.9837411515841776E-4	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.999992752834995	WITHOUT_CLASSIFICATION	7.2471650050568815E-6	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999999936303186	WITHOUT_CLASSIFICATION	6.369681335860161E-9	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999999611693416	WITHOUT_CLASSIFICATION	3.88306583162932E-8	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999999586911762	WITHOUT_CLASSIFICATION	4.13088238632773E-8	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9984044618841617	WITHOUT_CLASSIFICATION	0.0015955381158383366	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9994480881869651	WITHOUT_CLASSIFICATION	5.519118130348885E-4	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.99999864333217	WITHOUT_CLASSIFICATION	1.3566678300218006E-6	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999946010849492	WITHOUT_CLASSIFICATION	5.398915050862198E-6	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999998983387836	WITHOUT_CLASSIFICATION	1.016612164390397E-7	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999904160693148	WITHOUT_CLASSIFICATION	9.583930685244577E-6	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999883725184209	WITHOUT_CLASSIFICATION	1.1627481579234013E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999967444747652	WITHOUT_CLASSIFICATION	3.255525234854994E-6	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999988975927003	WITHOUT_CLASSIFICATION	1.1024072997709443E-6	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999982898589899	WITHOUT_CLASSIFICATION	1.710141010154715E-6	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999992978788375	WITHOUT_CLASSIFICATION	7.021211626636965E-7	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9532193980269246	WITHOUT_CLASSIFICATION	0.046780601973075514	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999981220690002	WITHOUT_CLASSIFICATION	1.8779309998126717E-6	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999975554546136	WITHOUT_CLASSIFICATION	2.4445453865611226E-6	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999958681881711	WITHOUT_CLASSIFICATION	4.131811828917623E-6	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999906405181647	WITHOUT_CLASSIFICATION	9.359481835339555E-6	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9998727104430669	WITHOUT_CLASSIFICATION	1.2728955693313413E-4	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999982615345793	WITHOUT_CLASSIFICATION	1.7384654207848288E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999979773736789	WITHOUT_CLASSIFICATION	2.022626321165458E-6	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999998722163177	WITHOUT_CLASSIFICATION	1.277836822741302E-7	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999996341260937	WITHOUT_CLASSIFICATION	3.6587390624322854E-7	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999887428036376	WITHOUT_CLASSIFICATION	1.1257196362402256E-5	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9999992172168892	WITHOUT_CLASSIFICATION	7.827831107123776E-7	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999970394038351	WITHOUT_CLASSIFICATION	2.9605961649117875E-6	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999966886381554	WITHOUT_CLASSIFICATION	3.3113618446496085E-6	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999044693137168	WITHOUT_CLASSIFICATION	9.55306862831203E-5	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999997509434952	WITHOUT_CLASSIFICATION	2.4905650472911146E-7	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999987290300982	WITHOUT_CLASSIFICATION	1.2709699018831923E-6	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999996201732361	WITHOUT_CLASSIFICATION	3.7982676391429863E-7	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999999824444866	WITHOUT_CLASSIFICATION	1.7555513393275864E-8	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.99999824861638	WITHOUT_CLASSIFICATION	1.751383619945713E-6	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999969097407473	WITHOUT_CLASSIFICATION	3.090259252747582E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999960524948166	WITHOUT_CLASSIFICATION	3.947505183316194E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9990913001897367	WITHOUT_CLASSIFICATION	9.08699810263229E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999947201186931	WITHOUT_CLASSIFICATION	5.279881307015564E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999947201186931	WITHOUT_CLASSIFICATION	5.279881307015564E-6	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999999758477249	WITHOUT_CLASSIFICATION	2.4152275068668205E-8	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999998189764273	WITHOUT_CLASSIFICATION	1.810235725894365E-7	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999948015478927	WITHOUT_CLASSIFICATION	5.198452107334538E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9997853580144048	WITHOUT_CLASSIFICATION	2.146419855950815E-4	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.999997387674443	WITHOUT_CLASSIFICATION	2.612325557041393E-6	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9998678282334634	WITHOUT_CLASSIFICATION	1.3217176653659512E-4	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9999738294257053	WITHOUT_CLASSIFICATION	2.6170574294650533E-5	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.999986584521922	WITHOUT_CLASSIFICATION	1.3415478078024015E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999960524948166	WITHOUT_CLASSIFICATION	3.947505183316194E-6	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999998160330652	WITHOUT_CLASSIFICATION	1.8396693473247208E-7	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999932709206898	WITHOUT_CLASSIFICATION	6.7290793102253305E-6	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999996881285608	WITHOUT_CLASSIFICATION	3.1187143926448326E-7	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999999984933984	WITHOUT_CLASSIFICATION	1.5066016161810098E-9	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999999979239895	WITHOUT_CLASSIFICATION	2.076010444605924E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999897303171	WITHOUT_CLASSIFICATION	1.0269682952252943E-8	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999897303171	WITHOUT_CLASSIFICATION	1.0269682952252943E-8	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999897303171	WITHOUT_CLASSIFICATION	1.0269682952252943E-8	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.999999923190255	WITHOUT_CLASSIFICATION	7.680974503711129E-8	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999999971169292	WITHOUT_CLASSIFICATION	2.8830707773703943E-9	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999997104214825	WITHOUT_CLASSIFICATION	2.8957851757316115E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9818333518424144	WITHOUT_CLASSIFICATION	0.018166648157585577	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9998995767547354	WITHOUT_CLASSIFICATION	1.004232452645939E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999999626357293	WITHOUT_CLASSIFICATION	3.736427069541063E-8	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9997265785716704	WITHOUT_CLASSIFICATION	2.7342142832961904E-4	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999997256472322	WITHOUT_CLASSIFICATION	2.7435276785914334E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999993797863761	WITHOUT_CLASSIFICATION	6.202136239720387E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999993797863761	WITHOUT_CLASSIFICATION	6.202136239720387E-7	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999995469498008	WITHOUT_CLASSIFICATION	4.5305019918247253E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999891797829	WITHOUT_CLASSIFICATION	1.0820217133544326E-8	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999932243509365	WITHOUT_CLASSIFICATION	6.775649063424151E-6	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999932243509365	WITHOUT_CLASSIFICATION	6.775649063424151E-6	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999990853511688	WITHOUT_CLASSIFICATION	9.146488312681606E-7	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999999495679471	WITHOUT_CLASSIFICATION	5.043205296041925E-8	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999955272060367	WITHOUT_CLASSIFICATION	4.472793963326841E-6	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999998421197824	WITHOUT_CLASSIFICATION	1.5788021761496273E-7	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999933333776255	WITHOUT_CLASSIFICATION	6.666622374554095E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999989098117239	WITHOUT_CLASSIFICATION	1.090188276107325E-6	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999985931427922	WITHOUT_CLASSIFICATION	1.406857207853581E-6	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.999984814497846	WITHOUT_CLASSIFICATION	1.5185502153891239E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999988372196105	WITHOUT_CLASSIFICATION	1.1627803895851736E-6	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999990295638437	WITHOUT_CLASSIFICATION	9.704361563403841E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999960524948166	WITHOUT_CLASSIFICATION	3.947505183316194E-6	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999984874598519	WITHOUT_CLASSIFICATION	1.5125401480881375E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999677471236	WITHOUT_CLASSIFICATION	3.225287638873074E-8	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999979660445666	WITHOUT_CLASSIFICATION	2.0339554335059543E-6	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.6926066254591269	WITHOUT_CLASSIFICATION	0.30739337454087307	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999716277663232	WITHOUT_CLASSIFICATION	2.8372233676799328E-5	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999715723793037	WITHOUT_CLASSIFICATION	2.8427620696286528E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.999973107656094	WITHOUT_CLASSIFICATION	2.6892343905916392E-5	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999454392359681	WITHOUT_CLASSIFICATION	5.456076403178881E-5	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999997192568413	WITHOUT_CLASSIFICATION	2.8074315866262607E-7	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9999797064164813	WITHOUT_CLASSIFICATION	2.0293583518814577E-5	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9999999018159375	WITHOUT_CLASSIFICATION	9.818406256535001E-8	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999994253544726	WITHOUT_CLASSIFICATION	5.746455273775519E-7	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9999993780265872	WITHOUT_CLASSIFICATION	6.219734127670895E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999997811855674	WITHOUT_CLASSIFICATION	2.1881443248131654E-7	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9999982054742773	WITHOUT_CLASSIFICATION	1.7945257227289566E-6	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9999976795830211	WITHOUT_CLASSIFICATION	2.3204169789425586E-6	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999999667243283	WITHOUT_CLASSIFICATION	3.3275671636436374E-8	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.999999992770751	WITHOUT_CLASSIFICATION	7.229249089476119E-9	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999998590931745	WITHOUT_CLASSIFICATION	1.4090682556899346E-7	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999999976281584	WITHOUT_CLASSIFICATION	2.37184168393659E-9	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999914926130054	WITHOUT_CLASSIFICATION	8.50738699468806E-6	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999998718081969	WITHOUT_CLASSIFICATION	1.2819180297884505E-7	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999999372338871	WITHOUT_CLASSIFICATION	6.276611282157633E-8	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999996068683185	WITHOUT_CLASSIFICATION	3.9313168151720963E-7	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999903443513793	WITHOUT_CLASSIFICATION	9.65564862058893E-6	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999948206357291	WITHOUT_CLASSIFICATION	5.179364270882281E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999975719862662	WITHOUT_CLASSIFICATION	2.428013733862977E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999994453467258	WITHOUT_CLASSIFICATION	5.546532741115473E-7	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999989704007134	WITHOUT_CLASSIFICATION	1.0295992865511582E-6	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999997098265195	WITHOUT_CLASSIFICATION	2.901734804604211E-7	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.999986563150278	WITHOUT_CLASSIFICATION	1.3436849722029784E-5	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.999999841290344	WITHOUT_CLASSIFICATION	1.587096559378209E-7	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999959842256609	WITHOUT_CLASSIFICATION	4.015774338960382E-6	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999906110869139	WITHOUT_CLASSIFICATION	9.388913086087617E-6	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999992876218197	WITHOUT_CLASSIFICATION	7.123781803671768E-7	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999980062640474	WITHOUT_CLASSIFICATION	1.993735952593948E-6	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999994123081762	WITHOUT_CLASSIFICATION	5.876918237916451E-7	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999783115885259	WITHOUT_CLASSIFICATION	2.1688411474073943E-5	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999999942092143	WITHOUT_CLASSIFICATION	5.790785736971772E-9	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999961656021595	WITHOUT_CLASSIFICATION	3.834397840506978E-6	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999999561203479	WITHOUT_CLASSIFICATION	4.387965218334704E-8	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.999999966498141	WITHOUT_CLASSIFICATION	3.350185899250615E-8	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999999876202894	WITHOUT_CLASSIFICATION	1.2379710508112896E-8	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999999750802606	WITHOUT_CLASSIFICATION	2.4919739413327647E-8	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999943700026409	WITHOUT_CLASSIFICATION	5.629997359089297E-6	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999996819298068	WITHOUT_CLASSIFICATION	3.180701931740679E-7	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999995004707785	WITHOUT_CLASSIFICATION	4.995292214664506E-7	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999993928988298	WITHOUT_CLASSIFICATION	6.07101170245465E-7	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999957233034346	WITHOUT_CLASSIFICATION	4.276696565459177E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999998928350214	WITHOUT_CLASSIFICATION	1.0716497846748666E-7	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999985256505257	WITHOUT_CLASSIFICATION	1.4743494743314384E-6	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999931555920285	WITHOUT_CLASSIFICATION	6.844407971534036E-6	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999974422701571	WITHOUT_CLASSIFICATION	2.5577298428844012E-6	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.999999493682369	WITHOUT_CLASSIFICATION	5.063176310348029E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.999997975783672	WITHOUT_CLASSIFICATION	2.024216327981744E-6	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999950198398282	WITHOUT_CLASSIFICATION	4.980160171851667E-6	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9999996459886987	WITHOUT_CLASSIFICATION	3.540113012338457E-7	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999929349326965	WITHOUT_CLASSIFICATION	7.065067303433391E-6	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999999211445282	WITHOUT_CLASSIFICATION	7.885547184452302E-8	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999999700401406	WITHOUT_CLASSIFICATION	2.9959859405789586E-8	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999956844453762	WITHOUT_CLASSIFICATION	4.315554623838429E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999956844453762	WITHOUT_CLASSIFICATION	4.315554623838429E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999978406791152	WITHOUT_CLASSIFICATION	2.159320884751989E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999978406791152	WITHOUT_CLASSIFICATION	2.159320884751989E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999961047464705	WITHOUT_CLASSIFICATION	3.895253529443493E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999961047464705	WITHOUT_CLASSIFICATION	3.895253529443493E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999909541196043	WITHOUT_CLASSIFICATION	9.045880395704583E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999909541196043	WITHOUT_CLASSIFICATION	9.045880395704583E-6	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999988512508431	WITHOUT_CLASSIFICATION	1.1487491568435041E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.999999817058205	WITHOUT_CLASSIFICATION	1.8294179499816487E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999965404645785	WITHOUT_CLASSIFICATION	3.4595354214060178E-6	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999656700305919	WITHOUT_CLASSIFICATION	3.432996940813015E-5	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9998875009463561	WITHOUT_CLASSIFICATION	1.1249905364389722E-4	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9993496196555803	WITHOUT_CLASSIFICATION	6.503803444196548E-4	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999987805982692	WITHOUT_CLASSIFICATION	1.2194017307622382E-6	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999998815613479	WITHOUT_CLASSIFICATION	1.1843865222670584E-7	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999999031467602	WITHOUT_CLASSIFICATION	9.685323965563101E-8	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999999070224223	WITHOUT_CLASSIFICATION	9.297757771468983E-8	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999999862831901	WITHOUT_CLASSIFICATION	1.3716809841768426E-8	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999999551235853	WITHOUT_CLASSIFICATION	4.48764145833646E-8	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999998263438695	WITHOUT_CLASSIFICATION	1.7365613052348846E-7	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999999952705911	WITHOUT_CLASSIFICATION	4.729408873938767E-9	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999997448145739	WITHOUT_CLASSIFICATION	2.5518542614051776E-7	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999991816998636	WITHOUT_CLASSIFICATION	8.183001364563191E-7	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999996442797555	WITHOUT_CLASSIFICATION	3.557202444147975E-7	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999991324409553	WITHOUT_CLASSIFICATION	8.675590446133686E-7	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999875774588266	WITHOUT_CLASSIFICATION	1.2422541173484315E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.99865787938158	WITHOUT_CLASSIFICATION	0.0013421206184199273	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999997177363483	WITHOUT_CLASSIFICATION	2.822636516319218E-7	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999996330116423	WITHOUT_CLASSIFICATION	3.6698835764532095E-7	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999993641865973	WITHOUT_CLASSIFICATION	6.358134026917038E-7	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.999982830714914	WITHOUT_CLASSIFICATION	1.716928508599947E-5	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999963090178647	WITHOUT_CLASSIFICATION	3.690982135297057E-6	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999999567267553	WITHOUT_CLASSIFICATION	4.327324474346993E-8	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999977072568557	WITHOUT_CLASSIFICATION	2.2927431443403775E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996948186307	WITHOUT_CLASSIFICATION	3.051813693218176E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996948186307	WITHOUT_CLASSIFICATION	3.051813693218176E-7	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999999608378753	WITHOUT_CLASSIFICATION	3.9162124695612715E-8	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999994405973414	WITHOUT_CLASSIFICATION	5.59402658591343E-7	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999990304420687	WITHOUT_CLASSIFICATION	9.695579313367864E-7	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9999831659577777	WITHOUT_CLASSIFICATION	1.6834042222211775E-5	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999945846090099	WITHOUT_CLASSIFICATION	5.415390990138417E-6	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999994151381667	WITHOUT_CLASSIFICATION	5.848618332307356E-7	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999919163472943	WITHOUT_CLASSIFICATION	8.083652705765823E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999919163472943	WITHOUT_CLASSIFICATION	8.083652705765823E-6	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999999097798838	WITHOUT_CLASSIFICATION	9.022011623773003E-8	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9996569551746448	WITHOUT_CLASSIFICATION	3.430448253551715E-4	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999992535044183	WITHOUT_CLASSIFICATION	7.464955817460188E-7	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999992535044183	WITHOUT_CLASSIFICATION	7.464955817460188E-7	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.999997030849235	WITHOUT_CLASSIFICATION	2.9691507651283356E-6	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9992400056095581	WITHOUT_CLASSIFICATION	7.599943904418639E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9992400056095581	WITHOUT_CLASSIFICATION	7.599943904418639E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999993657016929	WITHOUT_CLASSIFICATION	6.342983070844179E-7	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999993657016929	WITHOUT_CLASSIFICATION	6.342983070844179E-7	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999870449827124	WITHOUT_CLASSIFICATION	1.2955017287644568E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999870449827124	WITHOUT_CLASSIFICATION	1.2955017287644568E-5	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9999953340745408	WITHOUT_CLASSIFICATION	4.6659254592510875E-6	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999993381320544	WITHOUT_CLASSIFICATION	6.618679455674608E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999997933834331	WITHOUT_CLASSIFICATION	2.0661656691196132E-7	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999964259327037	WITHOUT_CLASSIFICATION	3.574067296425396E-6	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999999863303287	WITHOUT_CLASSIFICATION	1.3669671315729596E-8	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999997020540845	WITHOUT_CLASSIFICATION	2.9794591545212834E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999973727096528	WITHOUT_CLASSIFICATION	2.6272903472534734E-6	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.999996850897441	WITHOUT_CLASSIFICATION	3.149102559026497E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999973727096528	WITHOUT_CLASSIFICATION	2.6272903472534734E-6	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9999964858188304	WITHOUT_CLASSIFICATION	3.514181169610704E-6	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999996651661786	WITHOUT_CLASSIFICATION	3.348338213747857E-7	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999998034763903	WITHOUT_CLASSIFICATION	1.9652360980023274E-7	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999475406466375	WITHOUT_CLASSIFICATION	5.245935336247301E-5	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999999338469654	WITHOUT_CLASSIFICATION	6.615303456367708E-8	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.99994775331584	WITHOUT_CLASSIFICATION	5.2246684160127694E-5	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999978076576614	WITHOUT_CLASSIFICATION	2.1923423386511814E-6	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.999999693317328	WITHOUT_CLASSIFICATION	3.0668267201856087E-7	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999988118017048	WITHOUT_CLASSIFICATION	1.1881982951152068E-6	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999995362610733	WITHOUT_CLASSIFICATION	4.637389266485749E-7	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999997228299357	WITHOUT_CLASSIFICATION	2.7717006442091847E-7	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999998762248448	WITHOUT_CLASSIFICATION	1.2377515527164737E-7	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999960080814164	WITHOUT_CLASSIFICATION	3.991918583617958E-6	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999997494592816	WITHOUT_CLASSIFICATION	2.5054071836408163E-7	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999990951750869	WITHOUT_CLASSIFICATION	9.048249131602064E-7	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999999374497905	WITHOUT_CLASSIFICATION	6.255020949008485E-8	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999942415726113	WITHOUT_CLASSIFICATION	5.758427388623634E-6	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999997619901082	WITHOUT_CLASSIFICATION	2.3800989183099838E-7	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999992429955966	WITHOUT_CLASSIFICATION	7.570044034997186E-7	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999989305763908	WITHOUT_CLASSIFICATION	1.0694236092524144E-6	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.999985380063766	WITHOUT_CLASSIFICATION	1.4619936234054208E-5	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999999424493332	WITHOUT_CLASSIFICATION	5.7550666787424204E-8	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999985846670482	WITHOUT_CLASSIFICATION	1.4153329518329085E-6	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999983133513095	WITHOUT_CLASSIFICATION	1.686648690564372E-6	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9999995824074868	WITHOUT_CLASSIFICATION	4.175925132180306E-7	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999999581611951	WITHOUT_CLASSIFICATION	4.183880491212486E-8	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999999978662293	WITHOUT_CLASSIFICATION	2.133770672050044E-9	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999999918742536	WITHOUT_CLASSIFICATION	8.125746353998332E-9	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.999999680344059	WITHOUT_CLASSIFICATION	3.1965594100366197E-7	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999996348546364	WITHOUT_CLASSIFICATION	3.6514536357142544E-7	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999996149648924	WITHOUT_CLASSIFICATION	3.8503510757149186E-7	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999999800894808	WITHOUT_CLASSIFICATION	1.9910519146167365E-8	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999999535447638	WITHOUT_CLASSIFICATION	4.645523626036688E-8	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999988604179559	WITHOUT_CLASSIFICATION	1.1395820440595705E-6	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999970943967962	WITHOUT_CLASSIFICATION	2.905603203731312E-6	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999989525473472	WITHOUT_CLASSIFICATION	1.0474526528002461E-6	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9999996628203865	WITHOUT_CLASSIFICATION	3.3717961354288907E-7	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.999999420875617	WITHOUT_CLASSIFICATION	5.791243830505021E-7	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999999024813029	WITHOUT_CLASSIFICATION	9.751869703073725E-8	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999992726639296	WITHOUT_CLASSIFICATION	7.273360703283899E-7	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999999648997325	WITHOUT_CLASSIFICATION	3.5100267503869916E-8	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999960231611709	WITHOUT_CLASSIFICATION	3.976838829143606E-6	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999995034621236	WITHOUT_CLASSIFICATION	4.965378763368632E-7	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999997990441464	WITHOUT_CLASSIFICATION	2.0095585373201698E-7	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999999473921901	WITHOUT_CLASSIFICATION	5.260780989294614E-8	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999999579263527	WITHOUT_CLASSIFICATION	4.207364730696128E-8	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999999053525815	WITHOUT_CLASSIFICATION	9.464741845164127E-8	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999995254656815	WITHOUT_CLASSIFICATION	4.7453431846937065E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999995669904862	WITHOUT_CLASSIFICATION	4.33009513723718E-7	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9999984769422422	WITHOUT_CLASSIFICATION	1.5230577577763614E-6	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.999999390609932	WITHOUT_CLASSIFICATION	6.093900679721922E-7	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999999856530161	WITHOUT_CLASSIFICATION	1.4346983954580364E-8	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9997411074404433	WITHOUT_CLASSIFICATION	2.5889255955666585E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999999121936212	WITHOUT_CLASSIFICATION	8.78063788650598E-8	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999874529274	WITHOUT_CLASSIFICATION	1.2547072641343443E-8	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999874529274	WITHOUT_CLASSIFICATION	1.2547072641343443E-8	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999933653393156	WITHOUT_CLASSIFICATION	6.634660684379605E-6	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999677411379264	WITHOUT_CLASSIFICATION	3.22588620735054E-5	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999987701619423	WITHOUT_CLASSIFICATION	1.229838057798057E-6	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999965256645228	WITHOUT_CLASSIFICATION	3.4743354771338085E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999721279526687	WITHOUT_CLASSIFICATION	2.7872047331335442E-5	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999971989691264	WITHOUT_CLASSIFICATION	2.8010308736723722E-6	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9999926232264936	WITHOUT_CLASSIFICATION	7.376773506389813E-6	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999998075229038	WITHOUT_CLASSIFICATION	1.9247709624879776E-7	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999996340966827	WITHOUT_CLASSIFICATION	3.6590331721759496E-7	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999997504661625	WITHOUT_CLASSIFICATION	2.495338375266135E-7	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999975920812132	WITHOUT_CLASSIFICATION	2.4079187868254874E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999975920812132	WITHOUT_CLASSIFICATION	2.4079187868254874E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999979628781472	WITHOUT_CLASSIFICATION	2.0371218527934086E-6	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999957474492608	WITHOUT_CLASSIFICATION	4.252550739179231E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9997299254408732	WITHOUT_CLASSIFICATION	2.7007455912679654E-4	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999980179360584	WITHOUT_CLASSIFICATION	1.9820639416094673E-6	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999973069528354	WITHOUT_CLASSIFICATION	2.6930471645497793E-6	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999999951981645	WITHOUT_CLASSIFICATION	4.801835488664227E-9	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999996139884735	WITHOUT_CLASSIFICATION	3.8601152657101496E-7	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999992805913247	WITHOUT_CLASSIFICATION	7.194086753380864E-7	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999998917477017	WITHOUT_CLASSIFICATION	1.0825229836648695E-7	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.999999492113312	WITHOUT_CLASSIFICATION	5.078866880933852E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999992154460132	WITHOUT_CLASSIFICATION	7.845539867282296E-7	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999996157385138	WITHOUT_CLASSIFICATION	3.842614862763432E-7	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999903313630584	WITHOUT_CLASSIFICATION	9.668636941674464E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999903313630584	WITHOUT_CLASSIFICATION	9.668636941674464E-6	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999956763929382	WITHOUT_CLASSIFICATION	4.323607061824985E-6	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999919036693095	WITHOUT_CLASSIFICATION	8.096330690522827E-6	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999887981792075	WITHOUT_CLASSIFICATION	1.1201820792527119E-5	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9999984180773918	WITHOUT_CLASSIFICATION	1.5819226082460573E-6	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999995581778411	WITHOUT_CLASSIFICATION	4.418221589639853E-7	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999997129367324	WITHOUT_CLASSIFICATION	2.870632676145555E-7	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999875870304907	WITHOUT_CLASSIFICATION	1.2412969509301448E-5	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999992552569379	WITHOUT_CLASSIFICATION	7.447430621274529E-7	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.999982465493341	WITHOUT_CLASSIFICATION	1.753450665892029E-5	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.999999969264631	WITHOUT_CLASSIFICATION	3.07353689829898E-8	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9997299254408732	WITHOUT_CLASSIFICATION	2.7007455912679654E-4	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9999907424536916	WITHOUT_CLASSIFICATION	9.25754630850807E-6	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9999905665981165	WITHOUT_CLASSIFICATION	9.433401883577255E-6	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999999782728459	WITHOUT_CLASSIFICATION	2.172715411514868E-8	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999999882742358	WITHOUT_CLASSIFICATION	1.172576425637753E-8	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999999955314465	WITHOUT_CLASSIFICATION	4.4685535029934625E-9	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999955695526325	WITHOUT_CLASSIFICATION	4.430447367510116E-6	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999997944553555	WITHOUT_CLASSIFICATION	2.055446444835558E-7	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999954661967407	WITHOUT_CLASSIFICATION	4.533803259257651E-6	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999995772733058	WITHOUT_CLASSIFICATION	4.227266942014623E-7	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999981148719426	WITHOUT_CLASSIFICATION	1.8851280575088862E-6	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999972078103945	WITHOUT_CLASSIFICATION	2.792189605483195E-6	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999984810725686	WITHOUT_CLASSIFICATION	1.5189274312874786E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999989518773722	WITHOUT_CLASSIFICATION	1.048122627784523E-6	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9999682074107308	WITHOUT_CLASSIFICATION	3.179258926914437E-5	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999993658413543	WITHOUT_CLASSIFICATION	6.341586457357247E-7	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999998340105756	WITHOUT_CLASSIFICATION	1.6598942445685433E-7	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999989213641516	WITHOUT_CLASSIFICATION	1.0786358484253043E-6	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999996521336749	WITHOUT_CLASSIFICATION	3.478663250305834E-7	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999945047914557	WITHOUT_CLASSIFICATION	5.495208544353358E-6	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999980854068423	WITHOUT_CLASSIFICATION	1.9145931577988655E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9996760508737043	WITHOUT_CLASSIFICATION	3.239491262957775E-4	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.999998337524035	WITHOUT_CLASSIFICATION	1.6624759650765276E-6	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999518687674338	WITHOUT_CLASSIFICATION	4.813123256606636E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9992107180622178	WITHOUT_CLASSIFICATION	7.892819377821857E-4	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999973701650475	WITHOUT_CLASSIFICATION	2.6298349525306475E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.999999999890263	WITHOUT_CLASSIFICATION	1.0973691867585962E-10	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999431677578111	WITHOUT_CLASSIFICATION	5.683224218884449E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999971288296464	WITHOUT_CLASSIFICATION	2.871170353622492E-6	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999993554540588	WITHOUT_CLASSIFICATION	6.445459412055534E-7	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9999093591426707	WITHOUT_CLASSIFICATION	9.06408573294146E-5	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999893842466269	WITHOUT_CLASSIFICATION	1.0615753373142591E-5	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999893842466269	WITHOUT_CLASSIFICATION	1.0615753373142591E-5	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999972530563308	WITHOUT_CLASSIFICATION	2.746943669176357E-6	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999950965069918	WITHOUT_CLASSIFICATION	4.9034930082439825E-6	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999999881777009	WITHOUT_CLASSIFICATION	1.1822299114805212E-8	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999962736446706	WITHOUT_CLASSIFICATION	3.7263553293191917E-6	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999993243916585	WITHOUT_CLASSIFICATION	6.756083414924515E-7	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999996191334252	WITHOUT_CLASSIFICATION	3.808665747537402E-7	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999960524948166	WITHOUT_CLASSIFICATION	3.947505183316194E-6	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999992162688617	WITHOUT_CLASSIFICATION	7.837311383001529E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.999997936635957	WITHOUT_CLASSIFICATION	2.063364042954748E-6	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999978378068344	WITHOUT_CLASSIFICATION	2.162193165546564E-6	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999991486989087	WITHOUT_CLASSIFICATION	8.513010911766774E-7	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999999339883299	WITHOUT_CLASSIFICATION	6.60116701433782E-8	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999847922746223	WITHOUT_CLASSIFICATION	1.5207725377549468E-5	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999961656021595	WITHOUT_CLASSIFICATION	3.834397840506978E-6	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999958352497804	WITHOUT_CLASSIFICATION	4.164750219585076E-6	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999949794290336	WITHOUT_CLASSIFICATION	5.020570966452776E-6	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9999836255890243	WITHOUT_CLASSIFICATION	1.637441097565153E-5	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999999770575747	WITHOUT_CLASSIFICATION	2.294242538116828E-8	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999999417264921	WITHOUT_CLASSIFICATION	5.827350799157774E-8	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999820144784529	WITHOUT_CLASSIFICATION	1.798552154705682E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999999559099768	WITHOUT_CLASSIFICATION	4.40900231282134E-8	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999999559099768	WITHOUT_CLASSIFICATION	4.40900231282134E-8	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999996320634289	WITHOUT_CLASSIFICATION	3.6793657114615246E-7	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999999964682057	WITHOUT_CLASSIFICATION	3.5317942459822733E-9	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999941446810289	WITHOUT_CLASSIFICATION	5.855318971211806E-6	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999998277822827	WITHOUT_CLASSIFICATION	1.7221771722972475E-7	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999999664411698	WITHOUT_CLASSIFICATION	3.355883013842293E-8	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.999999973649393	WITHOUT_CLASSIFICATION	2.6350606954950625E-8	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999998260057646	WITHOUT_CLASSIFICATION	1.7399423549772434E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999917459308	WITHOUT_CLASSIFICATION	8.254069129090317E-9	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999995133215019	WITHOUT_CLASSIFICATION	4.866784980825604E-7	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999999999841948	WITHOUT_CLASSIFICATION	1.5805212347263136E-11	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999997486764268	WITHOUT_CLASSIFICATION	2.5132357320330516E-7	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999189689566008	WITHOUT_CLASSIFICATION	8.103104339916174E-5	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999999943321295	WITHOUT_CLASSIFICATION	5.667870591883671E-9	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999999959647625	WITHOUT_CLASSIFICATION	4.03523744887252E-9	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999999268122484	WITHOUT_CLASSIFICATION	7.31877517176932E-8	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999574958417966	WITHOUT_CLASSIFICATION	4.2504158203471894E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999980542714716	WITHOUT_CLASSIFICATION	1.945728528388113E-6	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999993806695833	WITHOUT_CLASSIFICATION	6.193304167175342E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999692647777375	WITHOUT_CLASSIFICATION	3.07352222624485E-5	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999990500898728	WITHOUT_CLASSIFICATION	9.499101271448492E-7	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9999728855699523	WITHOUT_CLASSIFICATION	2.7114430047698368E-5	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.999996456344386	WITHOUT_CLASSIFICATION	3.5436556139952877E-6	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999999372292611	WITHOUT_CLASSIFICATION	6.277073888678401E-8	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9533008358909213	WITHOUT_CLASSIFICATION	0.046699164109078775	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.999995458355746	WITHOUT_CLASSIFICATION	4.541644254029734E-6	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9999991793104527	WITHOUT_CLASSIFICATION	8.206895473520354E-7	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.999998088634134	WITHOUT_CLASSIFICATION	1.911365866016563E-6	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999986889172947	WITHOUT_CLASSIFICATION	1.3110827052209681E-6	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999992569625368	WITHOUT_CLASSIFICATION	7.430374631905174E-7	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999986351703127	WITHOUT_CLASSIFICATION	1.3648296873093634E-6	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.999999291214092	WITHOUT_CLASSIFICATION	7.087859079508784E-7	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999985204873776	WITHOUT_CLASSIFICATION	1.479512622338838E-6	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999990990012212	WITHOUT_CLASSIFICATION	9.009987787354378E-7	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999868159964664	WITHOUT_CLASSIFICATION	1.3184003533542893E-5	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9994459424335883	WITHOUT_CLASSIFICATION	5.540575664116465E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9999840831068706	WITHOUT_CLASSIFICATION	1.5916893129456732E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9998553767377346	WITHOUT_CLASSIFICATION	1.4462326226547594E-4	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999996351975846	WITHOUT_CLASSIFICATION	3.6480241543868166E-7	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999905650514621	WITHOUT_CLASSIFICATION	9.434948537888839E-6	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999938005546112	WITHOUT_CLASSIFICATION	6.199445388740048E-6	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.999997385395741	WITHOUT_CLASSIFICATION	2.6146042589772777E-6	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9999930621143025	WITHOUT_CLASSIFICATION	6.937885697514183E-6	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.99999812611156	WITHOUT_CLASSIFICATION	1.8738884400181589E-6	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999865109206962	WITHOUT_CLASSIFICATION	1.3489079303739737E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999898539801652	WITHOUT_CLASSIFICATION	1.0146019834809338E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999865109206962	WITHOUT_CLASSIFICATION	1.3489079303739737E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9881363813160144	WITHOUT_CLASSIFICATION	0.011863618683985461	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9998914621266718	WITHOUT_CLASSIFICATION	1.0853787332812398E-4	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999981498430843	WITHOUT_CLASSIFICATION	1.8501569156838901E-6	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9782864151287686	WITHOUT_CLASSIFICATION	0.021713584871231484	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999831804429445	WITHOUT_CLASSIFICATION	1.681955705546528E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999586771829	WITHOUT_CLASSIFICATION	4.13228169271062E-8	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999988393082485	WITHOUT_CLASSIFICATION	1.160691751459283E-6	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9997100486267543	WITHOUT_CLASSIFICATION	2.899513732457541E-4	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999998870536553	WITHOUT_CLASSIFICATION	1.1294634467713472E-7	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.8291523532412339	WITHOUT_CLASSIFICATION	0.1708476467587661	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9990925349717767	WITHOUT_CLASSIFICATION	9.074650282233684E-4	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999999873909409	WITHOUT_CLASSIFICATION	1.2609059060370542E-8	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999994209643824	WITHOUT_CLASSIFICATION	5.79035617525457E-7	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.999997727971061	WITHOUT_CLASSIFICATION	2.272028939024709E-6	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999972232754011	WITHOUT_CLASSIFICATION	2.776724598901507E-6	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9998455693673469	WITHOUT_CLASSIFICATION	1.544306326530061E-4	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999951882215701	WITHOUT_CLASSIFICATION	4.811778429907699E-6	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.999995497321992	WITHOUT_CLASSIFICATION	4.50267800806338E-6	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999991974356408	WITHOUT_CLASSIFICATION	8.025643591782245E-7	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.999997283822512	WITHOUT_CLASSIFICATION	2.7161774881722768E-6	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9999405527016227	WITHOUT_CLASSIFICATION	5.9447298377338166E-5	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999994489370099	WITHOUT_CLASSIFICATION	5.510629901356619E-7	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999798947969324	WITHOUT_CLASSIFICATION	2.0105203067613887E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999999275788538	WITHOUT_CLASSIFICATION	7.242114621662993E-8	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999994997673525	WITHOUT_CLASSIFICATION	5.002326475433151E-7	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999892054959364	WITHOUT_CLASSIFICATION	1.0794504063623525E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.999992431954495	WITHOUT_CLASSIFICATION	7.568045504978656E-6	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.999999085432118	WITHOUT_CLASSIFICATION	9.145678819446091E-7	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999979433871001	WITHOUT_CLASSIFICATION	2.0566128998160746E-6	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9999999891561823	WITHOUT_CLASSIFICATION	1.0843817655674115E-8	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999809562719065	WITHOUT_CLASSIFICATION	1.904372809351139E-5	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999499085655854	WITHOUT_CLASSIFICATION	5.00914344145523E-5	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.999978337667279	WITHOUT_CLASSIFICATION	2.1662332721076517E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999996608266999	WITHOUT_CLASSIFICATION	3.3917330007025386E-7	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999999877804432	WITHOUT_CLASSIFICATION	1.2219556759474826E-8	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.999999770849459	WITHOUT_CLASSIFICATION	2.2915054107452277E-7	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999984873203648	WITHOUT_CLASSIFICATION	1.512679635244892E-6	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999940319122	WITHOUT_CLASSIFICATION	5.968087839270391E-9	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999996990950503	WITHOUT_CLASSIFICATION	3.009049497114872E-7	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999981633595272	WITHOUT_CLASSIFICATION	1.836640472918719E-6	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999741107686733	WITHOUT_CLASSIFICATION	2.5889231326717404E-5	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999998792990453	WITHOUT_CLASSIFICATION	1.2070095476805777E-7	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999999899589339	WITHOUT_CLASSIFICATION	1.0041066103157831E-8	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999916947198038	WITHOUT_CLASSIFICATION	8.305280196297943E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999916947198038	WITHOUT_CLASSIFICATION	8.305280196297943E-6	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999991594159486	WITHOUT_CLASSIFICATION	8.405840514555627E-7	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999993753862779	WITHOUT_CLASSIFICATION	6.246137221037223E-7	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9992064836312674	WITHOUT_CLASSIFICATION	7.935163687326131E-4	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999988946911073	WITHOUT_CLASSIFICATION	1.1053088926999163E-6	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999991830735494	WITHOUT_CLASSIFICATION	8.1692645063399E-7	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999993944288007	WITHOUT_CLASSIFICATION	6.055711992582507E-7	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9999990276315235	WITHOUT_CLASSIFICATION	9.723684764979336E-7	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999998328156057	WITHOUT_CLASSIFICATION	1.671843944046387E-7	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999999848651561	WITHOUT_CLASSIFICATION	1.5134844032344224E-8	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999999809835879	WITHOUT_CLASSIFICATION	1.9016412170145515E-8	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999999780480259	WITHOUT_CLASSIFICATION	2.1951974176312322E-8	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999976488699811	WITHOUT_CLASSIFICATION	2.351130018799803E-6	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9997485768982426	WITHOUT_CLASSIFICATION	2.514231017573698E-4	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.999999736029811	WITHOUT_CLASSIFICATION	2.63970189094864E-7	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999999805760819	WITHOUT_CLASSIFICATION	1.942391817672296E-8	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999999374140839	WITHOUT_CLASSIFICATION	6.258591613041822E-8	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999999547712207	WITHOUT_CLASSIFICATION	4.5228779346689566E-8	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999933437835763	WITHOUT_CLASSIFICATION	6.656216423752034E-6	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999995487130954	WITHOUT_CLASSIFICATION	4.5128690459557534E-7	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999993128607182	WITHOUT_CLASSIFICATION	6.871392817062994E-7	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.5145997841742006	DEFECT	0.48540021582579945	WITHOUT_CLASSIFICATION
// FIXME warning	WITHOUT_CLASSIFICATION	0.7530799544317278	DEFECT	0.24692004556827218	WITHOUT_CLASSIFICATION
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999999959832804	WITHOUT_CLASSIFICATION	4.016719624812443E-9	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999999997189345	WITHOUT_CLASSIFICATION	2.810655747524853E-10	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9969409622412262	WITHOUT_CLASSIFICATION	0.003059037758773798	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999955634672	WITHOUT_CLASSIFICATION	4.436532856844479E-9	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999989502977025	WITHOUT_CLASSIFICATION	1.0497022974869718E-6	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9998471921029748	WITHOUT_CLASSIFICATION	1.5280789702521065E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999982044785578	WITHOUT_CLASSIFICATION	1.795521442191305E-6	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999936742627411	WITHOUT_CLASSIFICATION	6.325737258948021E-6	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999998508903768	WITHOUT_CLASSIFICATION	1.4910962318215716E-7	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9999995043771852	WITHOUT_CLASSIFICATION	4.956228148025677E-7	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999999870973227	WITHOUT_CLASSIFICATION	1.2902677327677972E-8	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999998474741545	WITHOUT_CLASSIFICATION	1.525258455687143E-7	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999999302102006	WITHOUT_CLASSIFICATION	6.978979944217004E-8	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999999898342381	WITHOUT_CLASSIFICATION	1.0165761837898602E-8	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999502252750755	WITHOUT_CLASSIFICATION	4.977472492453795E-5	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999771155194149	WITHOUT_CLASSIFICATION	2.2884480585122926E-5	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9999118989760518	WITHOUT_CLASSIFICATION	8.810102394819331E-5	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999737599659544	WITHOUT_CLASSIFICATION	2.6240034045561637E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999931822322082	WITHOUT_CLASSIFICATION	6.817767791721177E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9993371908703228	WITHOUT_CLASSIFICATION	6.628091296772261E-4	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9999886472548609	WITHOUT_CLASSIFICATION	1.135274513909E-5	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999998525364939	WITHOUT_CLASSIFICATION	1.474635059628365E-7	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999660867889976	WITHOUT_CLASSIFICATION	3.3913211002515636E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999983663231362	WITHOUT_CLASSIFICATION	1.633676863786815E-6	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999922711038052	WITHOUT_CLASSIFICATION	7.72889619482772E-6	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9999967325115425	WITHOUT_CLASSIFICATION	3.267488457405378E-6	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999907680061645	WITHOUT_CLASSIFICATION	9.231993835586964E-6	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999974042867422	WITHOUT_CLASSIFICATION	2.5957132577523098E-6	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999923059090645	WITHOUT_CLASSIFICATION	7.694090935594412E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999987375051801	WITHOUT_CLASSIFICATION	1.2624948198882669E-6	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999999673149684	WITHOUT_CLASSIFICATION	3.26850315381117E-8	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999992968506263	WITHOUT_CLASSIFICATION	7.031493737863473E-7	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999970556399993	WITHOUT_CLASSIFICATION	2.94436000070443E-6	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999997660320779	WITHOUT_CLASSIFICATION	2.3396792211911928E-7	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999998770596981	WITHOUT_CLASSIFICATION	1.229403019250148E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999989828053302	WITHOUT_CLASSIFICATION	1.0171946699269685E-6	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999975336589727	WITHOUT_CLASSIFICATION	2.4663410272879716E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999997905012974	WITHOUT_CLASSIFICATION	2.0949870259919634E-6	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999999487793432	WITHOUT_CLASSIFICATION	5.122065683023437E-8	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999998651200934	WITHOUT_CLASSIFICATION	1.3487990651685196E-7	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999999108009995	WITHOUT_CLASSIFICATION	8.919900056565186E-8	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999992377013068	WITHOUT_CLASSIFICATION	7.622986930338999E-7	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999998680955737	WITHOUT_CLASSIFICATION	1.31904426299012E-7	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999952124216359	WITHOUT_CLASSIFICATION	4.787578364069297E-6	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999758730678637	WITHOUT_CLASSIFICATION	2.412693213626044E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999999871473446	WITHOUT_CLASSIFICATION	1.2852655458380954E-8	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.999971466651817	WITHOUT_CLASSIFICATION	2.853334818299665E-5	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999989384585517	WITHOUT_CLASSIFICATION	1.06154144832147E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9999473667128765	WITHOUT_CLASSIFICATION	5.263328712335587E-5	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999930133208228	WITHOUT_CLASSIFICATION	6.98667917715957E-6	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999989133897732	WITHOUT_CLASSIFICATION	1.0866102268156E-6	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9999869578902632	WITHOUT_CLASSIFICATION	1.3042109736895746E-5	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9997309798651897	WITHOUT_CLASSIFICATION	2.69020134810375E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9997594332300439	WITHOUT_CLASSIFICATION	2.4056676995609522E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9996501131269405	WITHOUT_CLASSIFICATION	3.4988687305942954E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9997192028492038	WITHOUT_CLASSIFICATION	2.8079715079625895E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9996819707250618	WITHOUT_CLASSIFICATION	3.180292749381088E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9995395158250302	WITHOUT_CLASSIFICATION	4.604841749698046E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9995900720369405	WITHOUT_CLASSIFICATION	4.099279630595805E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9997329350485915	WITHOUT_CLASSIFICATION	2.670649514084936E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.999725848709263	WITHOUT_CLASSIFICATION	2.7415129073709514E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9996259090638879	WITHOUT_CLASSIFICATION	3.7409093611210086E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9997029226165733	WITHOUT_CLASSIFICATION	2.9707738342660224E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9993833296924358	WITHOUT_CLASSIFICATION	6.166703075641868E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9995784661204862	WITHOUT_CLASSIFICATION	4.2153387951381565E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9994109112100507	WITHOUT_CLASSIFICATION	5.89088789949308E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9995381013528227	WITHOUT_CLASSIFICATION	4.6189864717729095E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9993232776080804	WITHOUT_CLASSIFICATION	6.767223919195905E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9995171606114311	WITHOUT_CLASSIFICATION	4.828393885688799E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9989136453366555	WITHOUT_CLASSIFICATION	0.001086354663344548	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9995302683441007	WITHOUT_CLASSIFICATION	4.6973165589923714E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999999305766523	WITHOUT_CLASSIFICATION	6.942334777995696E-8	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999999853900037	WITHOUT_CLASSIFICATION	1.460999637006142E-8	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999888493568261	WITHOUT_CLASSIFICATION	1.1150643173987524E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999994992289162	WITHOUT_CLASSIFICATION	5.007710838164113E-7	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9996512561376159	WITHOUT_CLASSIFICATION	3.4874386238410883E-4	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999978009880574	WITHOUT_CLASSIFICATION	2.1990119426971174E-6	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.999998607792911	WITHOUT_CLASSIFICATION	1.3922070888484368E-6	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9995010807442685	WITHOUT_CLASSIFICATION	4.989192557315877E-4	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.999999667458118	WITHOUT_CLASSIFICATION	3.3254188197687477E-7	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999991293249735	WITHOUT_CLASSIFICATION	8.706750266463052E-7	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.9107445857032227	WITHOUT_CLASSIFICATION	0.08925541429677725	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999995443091206	WITHOUT_CLASSIFICATION	4.556908793528013E-7	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999958045011957	WITHOUT_CLASSIFICATION	4.1954988043143816E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999993972352821	WITHOUT_CLASSIFICATION	6.027647179542598E-7	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999993972352821	WITHOUT_CLASSIFICATION	6.027647179542598E-7	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999898067368608	WITHOUT_CLASSIFICATION	1.0193263139162585E-5	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999883208874649	WITHOUT_CLASSIFICATION	1.1679112535104246E-5	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999999169213385	WITHOUT_CLASSIFICATION	8.307866150403515E-8	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.999996322880048	WITHOUT_CLASSIFICATION	3.677119952029608E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999943670320149	WITHOUT_CLASSIFICATION	5.632967985024279E-6	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999968302203973	WITHOUT_CLASSIFICATION	3.1697796026864E-6	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999989094366313	WITHOUT_CLASSIFICATION	1.0905633687879192E-6	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999997982695678	WITHOUT_CLASSIFICATION	2.0173043217390312E-7	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999999113506561	WITHOUT_CLASSIFICATION	8.864934392605362E-8	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999998232511558	WITHOUT_CLASSIFICATION	1.7674884426764707E-7	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.999989196652347	WITHOUT_CLASSIFICATION	1.0803347653015103E-5	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999999475559155	WITHOUT_CLASSIFICATION	5.244408455453867E-8	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.999984015937902	WITHOUT_CLASSIFICATION	1.5984062098016343E-5	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9999877309250391	WITHOUT_CLASSIFICATION	1.2269074961009492E-5	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999999766888795	WITHOUT_CLASSIFICATION	2.3311120402927324E-8	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999997890590584	WITHOUT_CLASSIFICATION	2.109409415272018E-7	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.999992752834995	WITHOUT_CLASSIFICATION	7.2471650050568815E-6	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999998750723553	WITHOUT_CLASSIFICATION	1.2492764461145212E-7	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9969518976314359	WITHOUT_CLASSIFICATION	0.003048102368564135	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999772230936935	WITHOUT_CLASSIFICATION	2.2776906306495133E-5	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999992769764312	WITHOUT_CLASSIFICATION	7.230235688028473E-7	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999993308823236	WITHOUT_CLASSIFICATION	6.69117676324712E-7	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999985217500126	WITHOUT_CLASSIFICATION	1.4782499874177038E-6	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999996298993851	WITHOUT_CLASSIFICATION	3.701006150095425E-7	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999268264020409	WITHOUT_CLASSIFICATION	7.317359795907331E-5	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999997389476942	WITHOUT_CLASSIFICATION	2.610523057716636E-7	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999999752655402	WITHOUT_CLASSIFICATION	2.4734459890262285E-8	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999999914789007	WITHOUT_CLASSIFICATION	8.52109919335356E-9	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.999999762384194	WITHOUT_CLASSIFICATION	2.37615806077706E-7	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9999887531548685	WITHOUT_CLASSIFICATION	1.124684513158733E-5	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999996687001453	WITHOUT_CLASSIFICATION	3.3129985464787815E-7	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.999951103765467	WITHOUT_CLASSIFICATION	4.8896234532923844E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9999818936095971	WITHOUT_CLASSIFICATION	1.810639040293473E-5	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999981153719543	WITHOUT_CLASSIFICATION	1.8846280456727565E-6	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999905046822203	WITHOUT_CLASSIFICATION	9.495317779662347E-6	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999958414558358	WITHOUT_CLASSIFICATION	4.158544164224461E-6	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.999999267626042	WITHOUT_CLASSIFICATION	7.323739579612332E-7	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999998889229246	WITHOUT_CLASSIFICATION	1.1107707536386202E-7	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9998893234773126	WITHOUT_CLASSIFICATION	1.1067652268737909E-4	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999999729154377	WITHOUT_CLASSIFICATION	2.7084562282665922E-8	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999926869294965	WITHOUT_CLASSIFICATION	7.313070503491249E-6	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999935299864723	WITHOUT_CLASSIFICATION	6.470013527756817E-6	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999995051582559	WITHOUT_CLASSIFICATION	4.948417441539677E-7	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999992797178597	WITHOUT_CLASSIFICATION	7.202821403239784E-7	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999992797178597	WITHOUT_CLASSIFICATION	7.202821403239784E-7	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999158998791626	WITHOUT_CLASSIFICATION	8.410012083734193E-5	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999972556417178	WITHOUT_CLASSIFICATION	2.744358282163975E-6	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999983760247309	WITHOUT_CLASSIFICATION	1.623975269069632E-6	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999999541926125	WITHOUT_CLASSIFICATION	4.580738750560459E-8	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999991064807112	WITHOUT_CLASSIFICATION	8.935192886847758E-7	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.999998536529385	WITHOUT_CLASSIFICATION	1.4634706150484264E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999999994705929	WITHOUT_CLASSIFICATION	5.294069874326067E-10	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999762930695825	WITHOUT_CLASSIFICATION	2.3706930417416627E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999523192331758	WITHOUT_CLASSIFICATION	4.768076682419753E-5	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999779868529356	WITHOUT_CLASSIFICATION	2.201314706441705E-5	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999753895186586	WITHOUT_CLASSIFICATION	2.4610481341414348E-5	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999998121322178	WITHOUT_CLASSIFICATION	1.8786778223297348E-7	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.999973744803008	WITHOUT_CLASSIFICATION	2.6255196991980733E-5	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999977113808178	WITHOUT_CLASSIFICATION	2.2886191820792674E-6	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9985641461416713	WITHOUT_CLASSIFICATION	0.0014358538583285974	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999960196093026	WITHOUT_CLASSIFICATION	3.980390697423059E-6	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999891229247853	WITHOUT_CLASSIFICATION	1.087707521482237E-5	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.999999315400341	WITHOUT_CLASSIFICATION	6.845996589066803E-7	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.999996926470477	WITHOUT_CLASSIFICATION	3.073529522998131E-6	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999783115885259	WITHOUT_CLASSIFICATION	2.1688411474073943E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.999986605417693	WITHOUT_CLASSIFICATION	1.3394582307046377E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.999986605417693	WITHOUT_CLASSIFICATION	1.3394582307046377E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999272268648	WITHOUT_CLASSIFICATION	7.277313520051882E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999272268648	WITHOUT_CLASSIFICATION	7.277313520051882E-8	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.999999703390068	WITHOUT_CLASSIFICATION	2.9660993197536E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999995430181585	WITHOUT_CLASSIFICATION	4.569818414545957E-7	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999065923801606	WITHOUT_CLASSIFICATION	9.340761983945892E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999998590578945	WITHOUT_CLASSIFICATION	1.4094210566273706E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999997933834331	WITHOUT_CLASSIFICATION	2.0661656691196132E-7	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999996610924388	WITHOUT_CLASSIFICATION	3.389075612326387E-7	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9696643709055788	WITHOUT_CLASSIFICATION	0.030335629094421286	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999992893631467	WITHOUT_CLASSIFICATION	7.10636853271426E-7	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999999912663204	WITHOUT_CLASSIFICATION	8.733679475811462E-9	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9998950271457961	WITHOUT_CLASSIFICATION	1.0497285420380254E-4	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999993731166303	WITHOUT_CLASSIFICATION	6.268833697198849E-7	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999992585093685	WITHOUT_CLASSIFICATION	7.414906313784018E-7	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.999999516753557	WITHOUT_CLASSIFICATION	4.832464429757888E-7	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9994621693101212	WITHOUT_CLASSIFICATION	5.37830689878899E-4	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999998782465175	WITHOUT_CLASSIFICATION	1.217534824826692E-7	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999999316839466	WITHOUT_CLASSIFICATION	6.831605339290582E-8	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.99999993532025	WITHOUT_CLASSIFICATION	6.467974998384339E-8	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999998198073591	WITHOUT_CLASSIFICATION	1.8019264096107492E-7	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9999956631845904	WITHOUT_CLASSIFICATION	4.336815409573428E-6	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9999064258721745	WITHOUT_CLASSIFICATION	9.357412782550851E-5	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999988187128817	WITHOUT_CLASSIFICATION	1.1812871184332217E-6	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.999999985911924	WITHOUT_CLASSIFICATION	1.4088076106529538E-8	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9999972641095308	WITHOUT_CLASSIFICATION	2.735890469106308E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.999992431954495	WITHOUT_CLASSIFICATION	7.568045504978656E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999993944288007	WITHOUT_CLASSIFICATION	6.055711992582507E-7	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999998985569282	WITHOUT_CLASSIFICATION	1.0144307188534011E-7	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.999996352376853	WITHOUT_CLASSIFICATION	3.6476231468339924E-6	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999992985883621	WITHOUT_CLASSIFICATION	7.014116377839241E-7	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9996182046941486	WITHOUT_CLASSIFICATION	3.8179530585144176E-4	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999993040748452	WITHOUT_CLASSIFICATION	6.959251548178575E-7	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999993040748452	WITHOUT_CLASSIFICATION	6.959251548178575E-7	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999969446496827	WITHOUT_CLASSIFICATION	3.0553503173397963E-6	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999889347557904	WITHOUT_CLASSIFICATION	1.1065244209560897E-5	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.999999786722158	WITHOUT_CLASSIFICATION	2.1327784206575739E-7	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999994061636481	WITHOUT_CLASSIFICATION	5.938363519322332E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999827336978466	WITHOUT_CLASSIFICATION	1.726630215330152E-5	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999998732295409	WITHOUT_CLASSIFICATION	1.2677045905061836E-7	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999998701266086	WITHOUT_CLASSIFICATION	1.2987339143110004E-7	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999999877907473	WITHOUT_CLASSIFICATION	1.2209252796829519E-8	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999999958551055	WITHOUT_CLASSIFICATION	4.1448945639049395E-9	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999943612530545	WITHOUT_CLASSIFICATION	5.6387469454953206E-6	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999999401740481	WITHOUT_CLASSIFICATION	5.982595194203709E-8	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999999663337127	WITHOUT_CLASSIFICATION	3.366628734303857E-8	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999999829420227	WITHOUT_CLASSIFICATION	1.705797720697907E-8	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999978659834161	WITHOUT_CLASSIFICATION	2.1340165838269125E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999997895206879	WITHOUT_CLASSIFICATION	2.1047931218014923E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999965404645785	WITHOUT_CLASSIFICATION	3.4595354214060178E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9996088242623962	WITHOUT_CLASSIFICATION	3.9117573760379164E-4	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999992850258268	WITHOUT_CLASSIFICATION	7.14974173224134E-7	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999982605589928	WITHOUT_CLASSIFICATION	1.739441007234684E-6	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9998703368913823	WITHOUT_CLASSIFICATION	1.2966310861778146E-4	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.999999472752105	WITHOUT_CLASSIFICATION	5.272478949736814E-7	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999947321419485	WITHOUT_CLASSIFICATION	5.267858051547644E-6	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999835783984699	WITHOUT_CLASSIFICATION	1.6421601530101707E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999986475929976	WITHOUT_CLASSIFICATION	1.352407002373838E-6	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.99998660810053	WITHOUT_CLASSIFICATION	1.3391899470060904E-5	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999832773997223	WITHOUT_CLASSIFICATION	1.672260027777675E-5	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999998111035282	WITHOUT_CLASSIFICATION	1.8889647167143554E-7	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9996784012416099	WITHOUT_CLASSIFICATION	3.2159875839000925E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999997872630543	WITHOUT_CLASSIFICATION	2.127369456995862E-7	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9999851162575811	WITHOUT_CLASSIFICATION	1.4883742418882335E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999915008728253	WITHOUT_CLASSIFICATION	8.499127174827133E-6	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999988442101686	WITHOUT_CLASSIFICATION	1.1557898313859826E-6	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999999764483797	WITHOUT_CLASSIFICATION	2.35516203188152E-8	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999930195436434	WITHOUT_CLASSIFICATION	6.980456356624195E-6	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9998843508774758	WITHOUT_CLASSIFICATION	1.1564912252420301E-4	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999902811945942	WITHOUT_CLASSIFICATION	9.718805405785582E-6	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999953062940694	WITHOUT_CLASSIFICATION	4.6937059306295206E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.999412244206439	WITHOUT_CLASSIFICATION	5.877557935609318E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999996920736316	WITHOUT_CLASSIFICATION	3.079263684561583E-7	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999982756745737	WITHOUT_CLASSIFICATION	1.7243254263728487E-6	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999999749343363	WITHOUT_CLASSIFICATION	2.506566355410802E-8	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999999909225488	WITHOUT_CLASSIFICATION	9.077451231155926E-9	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999996422557754	WITHOUT_CLASSIFICATION	3.577442244865987E-7	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999980071742789	WITHOUT_CLASSIFICATION	1.992825721145859E-6	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9999530141757017	WITHOUT_CLASSIFICATION	4.6985824298195305E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999997049311754	WITHOUT_CLASSIFICATION	2.9506882467500636E-7	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.999999782089003	WITHOUT_CLASSIFICATION	2.1791099692337188E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999992074791	WITHOUT_CLASSIFICATION	7.925208568116936E-10	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999997643002122	WITHOUT_CLASSIFICATION	2.3569978785050988E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999995575026183	WITHOUT_CLASSIFICATION	4.424973817718172E-7	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999420499640007	WITHOUT_CLASSIFICATION	5.795003599933201E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999515408389175	WITHOUT_CLASSIFICATION	4.8459161082567876E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999494260740428	WITHOUT_CLASSIFICATION	5.057392595724811E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999465012856805	WITHOUT_CLASSIFICATION	5.3498714319452243E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999939065201644	WITHOUT_CLASSIFICATION	6.093479835495387E-6	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999978882863239	WITHOUT_CLASSIFICATION	2.1117136762048487E-6	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999970619622015	WITHOUT_CLASSIFICATION	2.938037798537335E-6	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9999895598495769	WITHOUT_CLASSIFICATION	1.0440150423007494E-5	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999988798534959	WITHOUT_CLASSIFICATION	1.1201465041618561E-6	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999982295701543	WITHOUT_CLASSIFICATION	1.7704298456656946E-6	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999750868951562	WITHOUT_CLASSIFICATION	2.4913104843816083E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999420499640007	WITHOUT_CLASSIFICATION	5.795003599933201E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999494260740428	WITHOUT_CLASSIFICATION	5.057392595724811E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999515408389175	WITHOUT_CLASSIFICATION	4.8459161082567876E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9998479218910604	WITHOUT_CLASSIFICATION	1.52078108939537E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999909230106342	WITHOUT_CLASSIFICATION	9.076989365716605E-6	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999975707138197	WITHOUT_CLASSIFICATION	2.429286180245028E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999999358462137	WITHOUT_CLASSIFICATION	6.415378631372029E-8	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999993200956078	WITHOUT_CLASSIFICATION	6.799043923629296E-7	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999999342788293	WITHOUT_CLASSIFICATION	6.572117065806256E-8	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999988431718314	WITHOUT_CLASSIFICATION	1.1568281685250374E-6	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999999468391952	WITHOUT_CLASSIFICATION	5.316080475137388E-8	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999973617923348	WITHOUT_CLASSIFICATION	2.638207665296718E-6	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999999642329588	WITHOUT_CLASSIFICATION	3.576704128413852E-8	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999999113310688	WITHOUT_CLASSIFICATION	8.866893121107972E-8	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9986500631988369	WITHOUT_CLASSIFICATION	0.0013499368011632277	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999992575684717	WITHOUT_CLASSIFICATION	7.424315283029746E-7	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999998534705029	WITHOUT_CLASSIFICATION	1.4652949714597938E-7	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999848262212351	WITHOUT_CLASSIFICATION	1.5173778764919554E-5	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999993696248659	WITHOUT_CLASSIFICATION	6.303751340623081E-7	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999878815289113	WITHOUT_CLASSIFICATION	1.2118471088727094E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999964120845708	WITHOUT_CLASSIFICATION	3.5879154292316317E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999964120845708	WITHOUT_CLASSIFICATION	3.5879154292316317E-6	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999995555973125	WITHOUT_CLASSIFICATION	4.4440268758828994E-7	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999999948645605	WITHOUT_CLASSIFICATION	5.135439486088813E-9	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999999222574477	WITHOUT_CLASSIFICATION	7.774255226093813E-8	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9999900074497613	WITHOUT_CLASSIFICATION	9.992550238665526E-6	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999995561002868	WITHOUT_CLASSIFICATION	4.438997132353065E-7	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999999969421728	WITHOUT_CLASSIFICATION	3.0578272571802833E-9	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999999620797819	WITHOUT_CLASSIFICATION	3.792021805134395E-8	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999998032583383	WITHOUT_CLASSIFICATION	1.967416617622983E-7	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999999449119763	WITHOUT_CLASSIFICATION	5.508802366278632E-8	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999999339294208	WITHOUT_CLASSIFICATION	6.607057920730911E-8	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999993222950809	WITHOUT_CLASSIFICATION	6.777049190961816E-7	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999966641322943	WITHOUT_CLASSIFICATION	3.3358677057936967E-6	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999967169771743	WITHOUT_CLASSIFICATION	3.2830228256468277E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999702133430359	WITHOUT_CLASSIFICATION	2.978665696405295E-5	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999985042490073	WITHOUT_CLASSIFICATION	1.4957509927262946E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.999999938116108	WITHOUT_CLASSIFICATION	6.188389199761689E-8	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999999065775214	WITHOUT_CLASSIFICATION	9.342247855244403E-8	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999989948850647	WITHOUT_CLASSIFICATION	1.0051149353010854E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999989948850647	WITHOUT_CLASSIFICATION	1.0051149353010854E-5	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999867116647292	WITHOUT_CLASSIFICATION	1.3288335270799539E-5	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999918681144698	WITHOUT_CLASSIFICATION	8.131885530136825E-6	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999600021931905	WITHOUT_CLASSIFICATION	3.99978068095395E-5	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999982742368954	WITHOUT_CLASSIFICATION	1.7257631046181467E-6	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999993497381653	WITHOUT_CLASSIFICATION	6.502618346895277E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999989948850647	WITHOUT_CLASSIFICATION	1.0051149353010854E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999989948850647	WITHOUT_CLASSIFICATION	1.0051149353010854E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999991606175	WITHOUT_CLASSIFICATION	8.393823811190922E-10	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999991606175	WITHOUT_CLASSIFICATION	8.393823811190922E-10	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999967446496492	WITHOUT_CLASSIFICATION	3.2553503509543256E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999975061729567	WITHOUT_CLASSIFICATION	2.4938270433199782E-6	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999797627481375	WITHOUT_CLASSIFICATION	2.0237251862465802E-5	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9992659273193907	WITHOUT_CLASSIFICATION	7.340726806092351E-4	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999881012837072	WITHOUT_CLASSIFICATION	1.1898716292809797E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999881012837072	WITHOUT_CLASSIFICATION	1.1898716292809797E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999999248924029	WITHOUT_CLASSIFICATION	7.510759719519935E-8	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999787471013671	WITHOUT_CLASSIFICATION	2.125289863280847E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999976755897941	WITHOUT_CLASSIFICATION	2.324410205785236E-6	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.999999627171354	WITHOUT_CLASSIFICATION	3.728286459711815E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999991177664	WITHOUT_CLASSIFICATION	8.822336599132024E-10	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999660962166	WITHOUT_CLASSIFICATION	3.390378338320511E-8	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9999597517655718	WITHOUT_CLASSIFICATION	4.024823442821958E-5	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999994343951677	WITHOUT_CLASSIFICATION	5.656048322100374E-7	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999578104063687	WITHOUT_CLASSIFICATION	4.218959363142873E-5	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.999999999677415	WITHOUT_CLASSIFICATION	3.2258499365470556E-10	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9996609949037887	WITHOUT_CLASSIFICATION	3.3900509621127443E-4	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999998726944819	WITHOUT_CLASSIFICATION	1.2730551809400834E-7	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999983269957906	WITHOUT_CLASSIFICATION	1.6730042094389664E-6	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999999654250177	WITHOUT_CLASSIFICATION	3.457498237540239E-8	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.999999938116108	WITHOUT_CLASSIFICATION	6.188389199761689E-8	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999989948850647	WITHOUT_CLASSIFICATION	1.0051149353010854E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999991606175	WITHOUT_CLASSIFICATION	8.393823811190922E-10	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999660962166	WITHOUT_CLASSIFICATION	3.390378338320511E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999927735410093	WITHOUT_CLASSIFICATION	7.22645899059876E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999927735410093	WITHOUT_CLASSIFICATION	7.22645899059876E-6	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999986895475595	WITHOUT_CLASSIFICATION	1.3104524404185087E-6	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.999999999075406	WITHOUT_CLASSIFICATION	9.245940335769439E-10	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999999966492554	WITHOUT_CLASSIFICATION	3.3507446378068492E-9	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999999204035245	WITHOUT_CLASSIFICATION	7.959647550066349E-8	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999982376050199	WITHOUT_CLASSIFICATION	1.7623949800867252E-6	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999997066920192	WITHOUT_CLASSIFICATION	2.933079807786822E-7	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9999401087831566	WITHOUT_CLASSIFICATION	5.989121684340802E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999910019083144	WITHOUT_CLASSIFICATION	8.998091685586238E-6	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999621999351	WITHOUT_CLASSIFICATION	3.7800064835231245E-8	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999890289853	WITHOUT_CLASSIFICATION	1.0971014732686203E-8	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999996472063712	WITHOUT_CLASSIFICATION	3.5279362873968333E-7	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999999935115449	WITHOUT_CLASSIFICATION	6.488455028457421E-9	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999969806209129	WITHOUT_CLASSIFICATION	3.019379087189381E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999999065775214	WITHOUT_CLASSIFICATION	9.342247855244403E-8	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999991606175	WITHOUT_CLASSIFICATION	8.393823811190922E-10	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999787471013671	WITHOUT_CLASSIFICATION	2.125289863280847E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999976755897941	WITHOUT_CLASSIFICATION	2.324410205785236E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999976755897941	WITHOUT_CLASSIFICATION	2.324410205785236E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999991177664	WITHOUT_CLASSIFICATION	8.822336599132024E-10	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999660962166	WITHOUT_CLASSIFICATION	3.390378338320511E-8	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999660962166	WITHOUT_CLASSIFICATION	3.390378338320511E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999927735410093	WITHOUT_CLASSIFICATION	7.22645899059876E-6	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999998004283749	WITHOUT_CLASSIFICATION	1.9957162512995058E-7	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9999855151225521	WITHOUT_CLASSIFICATION	1.4484877447850993E-5	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999999779863438	WITHOUT_CLASSIFICATION	2.2013656297804523E-8	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999808858789	WITHOUT_CLASSIFICATION	1.911412113196684E-8	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9999926176889532	WITHOUT_CLASSIFICATION	7.382311046801262E-6	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9996571541987354	WITHOUT_CLASSIFICATION	3.4284580126466973E-4	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999997754838078	WITHOUT_CLASSIFICATION	2.2451619214020715E-7	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999999533118256	WITHOUT_CLASSIFICATION	4.66881745656695E-8	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999999958750069	WITHOUT_CLASSIFICATION	4.124993125414394E-9	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999787471013671	WITHOUT_CLASSIFICATION	2.125289863280847E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999976755897941	WITHOUT_CLASSIFICATION	2.324410205785236E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999976755897941	WITHOUT_CLASSIFICATION	2.324410205785236E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999991177664	WITHOUT_CLASSIFICATION	8.822336599132024E-10	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999910019083144	WITHOUT_CLASSIFICATION	8.998091685586238E-6	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999890289853	WITHOUT_CLASSIFICATION	1.0971014732686203E-8	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999970414186715	WITHOUT_CLASSIFICATION	2.958581328577161E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999998166065671	WITHOUT_CLASSIFICATION	1.8339343282106118E-7	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999955940625254	WITHOUT_CLASSIFICATION	4.405937474613058E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999955940625254	WITHOUT_CLASSIFICATION	4.405937474613058E-6	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999984248714283	WITHOUT_CLASSIFICATION	1.5751285717003719E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999982628594942	WITHOUT_CLASSIFICATION	1.7371405057622548E-6	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999987138705442	WITHOUT_CLASSIFICATION	1.2861294558009127E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999995058163808	WITHOUT_CLASSIFICATION	4.94183619272359E-7	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999999657070863	WITHOUT_CLASSIFICATION	3.4292913710131284E-8	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999999657070863	WITHOUT_CLASSIFICATION	3.4292913710131284E-8	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999993804603184	WITHOUT_CLASSIFICATION	6.195396816047517E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999993804603184	WITHOUT_CLASSIFICATION	6.195396816047517E-7	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999554334335	WITHOUT_CLASSIFICATION	4.456656654624535E-8	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999554334335	WITHOUT_CLASSIFICATION	4.456656654624535E-8	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999993730890271	WITHOUT_CLASSIFICATION	6.269109729137138E-7	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.999985140521275	WITHOUT_CLASSIFICATION	1.4859478724996074E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9999984051546443	WITHOUT_CLASSIFICATION	1.5948453556984958E-6	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999986506405818	WITHOUT_CLASSIFICATION	1.349359418241893E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999998620587501	WITHOUT_CLASSIFICATION	1.379412498441176E-7	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999996174382441	WITHOUT_CLASSIFICATION	3.8256175587087896E-7	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999995819968325	WITHOUT_CLASSIFICATION	4.1800316752251775E-7	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999999333345977	WITHOUT_CLASSIFICATION	6.666540234420266E-8	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999997550634386	WITHOUT_CLASSIFICATION	2.4493656145722975E-7	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999979270377043	WITHOUT_CLASSIFICATION	2.0729622957597746E-6	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999997886272146	WITHOUT_CLASSIFICATION	2.1137278550775846E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.999999109730471	WITHOUT_CLASSIFICATION	8.902695290362767E-7	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9997374031600058	WITHOUT_CLASSIFICATION	2.6259683999424834E-4	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999899254761695	WITHOUT_CLASSIFICATION	1.0074523830417457E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999899254761695	WITHOUT_CLASSIFICATION	1.0074523830417457E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9999911078792096	WITHOUT_CLASSIFICATION	8.892120790343235E-6	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999996610924388	WITHOUT_CLASSIFICATION	3.389075612326387E-7	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9998161004818977	WITHOUT_CLASSIFICATION	1.8389951810217055E-4	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999999613476368	WITHOUT_CLASSIFICATION	3.8652363162892874E-8	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999999579187432	WITHOUT_CLASSIFICATION	4.208125672914886E-8	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999998843118403	WITHOUT_CLASSIFICATION	1.1568815961722117E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999998954077043	WITHOUT_CLASSIFICATION	1.045922957155336E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999983811288589	WITHOUT_CLASSIFICATION	1.6188711411937146E-6	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999997604004777	WITHOUT_CLASSIFICATION	2.3959952240385045E-7	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.999992797447037	WITHOUT_CLASSIFICATION	7.202552963056538E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.999999891940587	WITHOUT_CLASSIFICATION	1.0805941302088604E-7	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9999948769887168	WITHOUT_CLASSIFICATION	5.123011283174629E-6	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999998516108025	WITHOUT_CLASSIFICATION	1.4838919753318121E-7	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999992918373581	WITHOUT_CLASSIFICATION	7.081626419680515E-7	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999839660756356	WITHOUT_CLASSIFICATION	1.6033924364420396E-5	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999977591840836	WITHOUT_CLASSIFICATION	2.240815916256599E-6	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999881381989649	WITHOUT_CLASSIFICATION	1.1861801035047149E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999999810274487	WITHOUT_CLASSIFICATION	1.8972551349682008E-8	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997688198573	WITHOUT_CLASSIFICATION	2.3118014281547824E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997688198573	WITHOUT_CLASSIFICATION	2.3118014281547824E-7	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999949519709904	WITHOUT_CLASSIFICATION	5.04802900960708E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999994439308512	WITHOUT_CLASSIFICATION	5.560691489543311E-7	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999532544301613	WITHOUT_CLASSIFICATION	4.674556983884009E-5	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999532544301613	WITHOUT_CLASSIFICATION	4.674556983884009E-5	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999982486865974	WITHOUT_CLASSIFICATION	1.7513134026498968E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9999985964400904	WITHOUT_CLASSIFICATION	1.403559909642901E-6	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999974403939275	WITHOUT_CLASSIFICATION	2.5596060725730843E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999921710195	WITHOUT_CLASSIFICATION	7.828980499984712E-6	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999995628450159	WITHOUT_CLASSIFICATION	4.3715498418788164E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999996736651158	WITHOUT_CLASSIFICATION	3.2633488418220586E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999996736651158	WITHOUT_CLASSIFICATION	3.2633488418220586E-7	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999997873495565	WITHOUT_CLASSIFICATION	2.1265044345095794E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999996275800981	WITHOUT_CLASSIFICATION	3.724199018979814E-7	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999996768759772	WITHOUT_CLASSIFICATION	3.2312402269872354E-7	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999996188198289	WITHOUT_CLASSIFICATION	3.8118017099898903E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999994439308512	WITHOUT_CLASSIFICATION	5.560691489543311E-7	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999984962339855	WITHOUT_CLASSIFICATION	1.5037660144828448E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999960946530597	WITHOUT_CLASSIFICATION	3.905346940247314E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999960946530597	WITHOUT_CLASSIFICATION	3.905346940247314E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994872923009	WITHOUT_CLASSIFICATION	5.127076991066014E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835046276	WITHOUT_CLASSIFICATION	1.6495372441413925E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835046276	WITHOUT_CLASSIFICATION	1.6495372441413925E-8	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999975224123069	WITHOUT_CLASSIFICATION	2.47758769308532E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999975224123069	WITHOUT_CLASSIFICATION	2.47758769308532E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999975224123069	WITHOUT_CLASSIFICATION	2.47758769308532E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835046276	WITHOUT_CLASSIFICATION	1.6495372441413925E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835046276	WITHOUT_CLASSIFICATION	1.6495372441413925E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994872923009	WITHOUT_CLASSIFICATION	5.127076991066014E-7	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999998528581744	WITHOUT_CLASSIFICATION	1.471418256282464E-7	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999953850073795	WITHOUT_CLASSIFICATION	4.614992620504417E-6	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9999841865131207	WITHOUT_CLASSIFICATION	1.581348687929225E-5	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999989129905764	WITHOUT_CLASSIFICATION	1.087009423592857E-6	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999992784190519	WITHOUT_CLASSIFICATION	7.215809481618855E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999999218145386	WITHOUT_CLASSIFICATION	7.818546142790511E-8	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999999884017786	WITHOUT_CLASSIFICATION	1.1598221443577119E-8	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.99997893328497	WITHOUT_CLASSIFICATION	2.1066715030039794E-5	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.999999891940587	WITHOUT_CLASSIFICATION	1.0805941302088604E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835046276	WITHOUT_CLASSIFICATION	1.6495372441413925E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835046276	WITHOUT_CLASSIFICATION	1.6495372441413925E-8	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999996865019536	WITHOUT_CLASSIFICATION	3.1349804635434427E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999983852220182	WITHOUT_CLASSIFICATION	1.614777981736171E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999997449058899	WITHOUT_CLASSIFICATION	2.550941100233787E-7	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9997203744678681	WITHOUT_CLASSIFICATION	2.796255321319113E-4	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999998689629499	WITHOUT_CLASSIFICATION	1.310370501322061E-7	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999992385958716	WITHOUT_CLASSIFICATION	7.614041285296163E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999998902810252	WITHOUT_CLASSIFICATION	1.0971897484469601E-7	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999989772669458	WITHOUT_CLASSIFICATION	1.0227330542772305E-6	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999997512323574	WITHOUT_CLASSIFICATION	2.487676425083221E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999456927415641	WITHOUT_CLASSIFICATION	5.430725843583741E-5	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999843218731505	WITHOUT_CLASSIFICATION	1.567812684953221E-5	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.999999767301443	WITHOUT_CLASSIFICATION	2.3269855703860675E-7	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999981584404681	WITHOUT_CLASSIFICATION	1.841559531782832E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999099595264	WITHOUT_CLASSIFICATION	9.004047353318988E-8	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999999999459972	WITHOUT_CLASSIFICATION	5.400271140055121E-11	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999983538484797	WITHOUT_CLASSIFICATION	1.6461515202598707E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999983538484797	WITHOUT_CLASSIFICATION	1.6461515202598707E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999983538484797	WITHOUT_CLASSIFICATION	1.6461515202598707E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999998422915997	WITHOUT_CLASSIFICATION	1.577084003118067E-7	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999996601823762	WITHOUT_CLASSIFICATION	3.398176239141214E-7	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999999339601598	WITHOUT_CLASSIFICATION	6.603984015635605E-8	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9999380876689682	WITHOUT_CLASSIFICATION	6.191233103188039E-5	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999999913392654	WITHOUT_CLASSIFICATION	8.660734619133125E-9	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999999775954096	WITHOUT_CLASSIFICATION	2.2404590420957395E-8	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999999827739	WITHOUT_CLASSIFICATION	1.722606790878878E-11	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999999114192136	WITHOUT_CLASSIFICATION	8.858078635627013E-8	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999999881339783	WITHOUT_CLASSIFICATION	1.186602171354575E-8	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999993388311768	WITHOUT_CLASSIFICATION	6.611688232919736E-7	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999793610441383	WITHOUT_CLASSIFICATION	2.0638955861688423E-5	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9999314544652708	WITHOUT_CLASSIFICATION	6.854553472924498E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999997873495565	WITHOUT_CLASSIFICATION	2.1265044345095794E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835046276	WITHOUT_CLASSIFICATION	1.6495372441413925E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835046276	WITHOUT_CLASSIFICATION	1.6495372441413925E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994872923009	WITHOUT_CLASSIFICATION	5.127076991066014E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999999218145386	WITHOUT_CLASSIFICATION	7.818546142790511E-8	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999983852220182	WITHOUT_CLASSIFICATION	1.614777981736171E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9997203744678681	WITHOUT_CLASSIFICATION	2.796255321319113E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999992385958716	WITHOUT_CLASSIFICATION	7.614041285296163E-7	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999997449058899	WITHOUT_CLASSIFICATION	2.550941100233787E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999998902810252	WITHOUT_CLASSIFICATION	1.0971897484469601E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999456927415641	WITHOUT_CLASSIFICATION	5.430725843583741E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999997512323574	WITHOUT_CLASSIFICATION	2.487676425083221E-7	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.999999767301443	WITHOUT_CLASSIFICATION	2.3269855703860675E-7	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999997374550399	WITHOUT_CLASSIFICATION	2.6254496007584557E-7	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999877846369972	WITHOUT_CLASSIFICATION	1.2215363002751035E-5	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999957418976245	WITHOUT_CLASSIFICATION	4.2581023754877705E-6	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999999546088439	WITHOUT_CLASSIFICATION	4.539115616523101E-8	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999994900351432	WITHOUT_CLASSIFICATION	5.099648568849533E-7	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999998353540641	WITHOUT_CLASSIFICATION	1.6464593585368134E-7	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.99999043046864	WITHOUT_CLASSIFICATION	9.569531359891907E-6	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9999582682074621	WITHOUT_CLASSIFICATION	4.173179253776022E-5	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999953340162752	WITHOUT_CLASSIFICATION	4.6659837248096616E-6	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999984758778856	WITHOUT_CLASSIFICATION	1.5241221144614787E-6	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999998001878585	WITHOUT_CLASSIFICATION	1.9981214142788422E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999676610115	WITHOUT_CLASSIFICATION	3.2338988450983E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999996878633353	WITHOUT_CLASSIFICATION	3.1213666471862774E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999883957816093	WITHOUT_CLASSIFICATION	1.160421839073146E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999939862524354	WITHOUT_CLASSIFICATION	6.013747564609214E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999810538287	WITHOUT_CLASSIFICATION	1.8946171395894936E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999990596284373	WITHOUT_CLASSIFICATION	9.403715627117012E-7	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999963371546504	WITHOUT_CLASSIFICATION	3.6628453495897467E-6	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999997725841194	WITHOUT_CLASSIFICATION	2.2741588050083263E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999984923288809	WITHOUT_CLASSIFICATION	1.5076711190061301E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999997949624811	WITHOUT_CLASSIFICATION	2.050375187921777E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999996353862625	WITHOUT_CLASSIFICATION	3.6461373751424043E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999996353862625	WITHOUT_CLASSIFICATION	3.6461373751424043E-6	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999257081018168	WITHOUT_CLASSIFICATION	7.429189818313659E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.999999992441079	WITHOUT_CLASSIFICATION	7.558921085747671E-9	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999601943349983	WITHOUT_CLASSIFICATION	3.9805665001691086E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999601943349983	WITHOUT_CLASSIFICATION	3.9805665001691086E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999601943349983	WITHOUT_CLASSIFICATION	3.9805665001691086E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999601943349983	WITHOUT_CLASSIFICATION	3.9805665001691086E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998243418874169	WITHOUT_CLASSIFICATION	1.7565811258317112E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998243418874169	WITHOUT_CLASSIFICATION	1.7565811258317112E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998243418874169	WITHOUT_CLASSIFICATION	1.7565811258317112E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9998713829058086	WITHOUT_CLASSIFICATION	1.2861709419145951E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9998713829058086	WITHOUT_CLASSIFICATION	1.2861709419145951E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9997853689053697	WITHOUT_CLASSIFICATION	2.146310946303576E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999372698296296	WITHOUT_CLASSIFICATION	6.273017037042616E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.999999992441079	WITHOUT_CLASSIFICATION	7.558921085747671E-9	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999968916317065	WITHOUT_CLASSIFICATION	3.108368293461294E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999601943349983	WITHOUT_CLASSIFICATION	3.9805665001691086E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999601943349983	WITHOUT_CLASSIFICATION	3.9805665001691086E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999601943349983	WITHOUT_CLASSIFICATION	3.9805665001691086E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998243418874169	WITHOUT_CLASSIFICATION	1.7565811258317112E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998243418874169	WITHOUT_CLASSIFICATION	1.7565811258317112E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9998713829058086	WITHOUT_CLASSIFICATION	1.2861709419145951E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999372698296296	WITHOUT_CLASSIFICATION	6.273017037042616E-5	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999983165973672	WITHOUT_CLASSIFICATION	1.6834026327739785E-6	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999983165973672	WITHOUT_CLASSIFICATION	1.6834026327739785E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999997084220626	WITHOUT_CLASSIFICATION	2.915779374336131E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999997084220626	WITHOUT_CLASSIFICATION	2.915779374336131E-7	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999975948314412	WITHOUT_CLASSIFICATION	2.40516855874858E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999975948314412	WITHOUT_CLASSIFICATION	2.40516855874858E-6	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999977756505372	WITHOUT_CLASSIFICATION	2.2243494628443035E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999965784929061	WITHOUT_CLASSIFICATION	3.4215070938769556E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999965784929061	WITHOUT_CLASSIFICATION	3.4215070938769556E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999995787665388	WITHOUT_CLASSIFICATION	4.2123346121022937E-7	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999995787665388	WITHOUT_CLASSIFICATION	4.2123346121022937E-7	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.999999858298493	WITHOUT_CLASSIFICATION	1.417015069366429E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999987801232624	WITHOUT_CLASSIFICATION	1.2198767376402398E-6	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999987801232624	WITHOUT_CLASSIFICATION	1.2198767376402398E-6	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999990203934411	WITHOUT_CLASSIFICATION	9.79606558889835E-7	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999957191843942	WITHOUT_CLASSIFICATION	4.280815605745707E-6	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999990285514629	WITHOUT_CLASSIFICATION	9.71448537091716E-7	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999601943349983	WITHOUT_CLASSIFICATION	3.9805665001691086E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999601943349983	WITHOUT_CLASSIFICATION	3.9805665001691086E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999990203934411	WITHOUT_CLASSIFICATION	9.79606558889835E-7	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999985543951271	WITHOUT_CLASSIFICATION	1.4456048728200243E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.999999230968955	WITHOUT_CLASSIFICATION	7.690310450319048E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.999999230968955	WITHOUT_CLASSIFICATION	7.690310450319048E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.999999230968955	WITHOUT_CLASSIFICATION	7.690310450319048E-7	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999998702247439	WITHOUT_CLASSIFICATION	1.2977525617555069E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999992403810566	WITHOUT_CLASSIFICATION	7.596189434701398E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999980812523502	WITHOUT_CLASSIFICATION	1.9187476498274185E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999980812523502	WITHOUT_CLASSIFICATION	1.9187476498274185E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999903434998	WITHOUT_CLASSIFICATION	9.656500214504698E-9	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.999999991356462	WITHOUT_CLASSIFICATION	8.643537986832393E-9	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999857322741	WITHOUT_CLASSIFICATION	1.4267725792754887E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999999289204389	WITHOUT_CLASSIFICATION	7.10795611531967E-8	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.999999709467155	WITHOUT_CLASSIFICATION	2.90532845022462E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999987229569883	WITHOUT_CLASSIFICATION	1.2770430116710626E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999987229569883	WITHOUT_CLASSIFICATION	1.2770430116710626E-6	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999998406049748	WITHOUT_CLASSIFICATION	1.5939502510871598E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998569640875223	WITHOUT_CLASSIFICATION	1.4303591247757686E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998569640875223	WITHOUT_CLASSIFICATION	1.4303591247757686E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999601943349983	WITHOUT_CLASSIFICATION	3.9805665001691086E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.999999230968955	WITHOUT_CLASSIFICATION	7.690310450319048E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999992403810566	WITHOUT_CLASSIFICATION	7.596189434701398E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999980812523502	WITHOUT_CLASSIFICATION	1.9187476498274185E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999903434998	WITHOUT_CLASSIFICATION	9.656500214504698E-9	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.999999991356462	WITHOUT_CLASSIFICATION	8.643537986832393E-9	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999857322741	WITHOUT_CLASSIFICATION	1.4267725792754887E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999999289204389	WITHOUT_CLASSIFICATION	7.10795611531967E-8	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998569640875223	WITHOUT_CLASSIFICATION	1.4303591247757686E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999990711931199	WITHOUT_CLASSIFICATION	9.288068801400434E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.999998753285712	WITHOUT_CLASSIFICATION	1.2467142880804135E-6	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999977713880832	WITHOUT_CLASSIFICATION	2.228611916792031E-6	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999998918951016	WITHOUT_CLASSIFICATION	1.0810489841148196E-7	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999991096501603	WITHOUT_CLASSIFICATION	8.903498396945529E-7	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999994153656817	WITHOUT_CLASSIFICATION	5.846343182577287E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999997887370081	WITHOUT_CLASSIFICATION	2.1126299187113784E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999997887370081	WITHOUT_CLASSIFICATION	2.1126299187113784E-7	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9999906204431919	WITHOUT_CLASSIFICATION	9.379556808163295E-6	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999943932186331	WITHOUT_CLASSIFICATION	5.606781366790602E-6	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999924978830463	WITHOUT_CLASSIFICATION	7.502116953631318E-6	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999982176348325	WITHOUT_CLASSIFICATION	1.7823651675270659E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999788019653131	WITHOUT_CLASSIFICATION	2.1198034686964346E-5	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999788019653131	WITHOUT_CLASSIFICATION	2.1198034686964346E-5	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999996370863729	WITHOUT_CLASSIFICATION	3.629136272325868E-7	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.999999587546716	WITHOUT_CLASSIFICATION	4.124532840133996E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999995850468689	WITHOUT_CLASSIFICATION	4.1495313107750857E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999995850468689	WITHOUT_CLASSIFICATION	4.1495313107750857E-7	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.999997568041874	WITHOUT_CLASSIFICATION	2.431958126086491E-6	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999977860842978	WITHOUT_CLASSIFICATION	2.213915702201967E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.999999709467155	WITHOUT_CLASSIFICATION	2.90532845022462E-7	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.999999410903491	WITHOUT_CLASSIFICATION	5.890965090509433E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999999497008489	WITHOUT_CLASSIFICATION	5.029915110082544E-8	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999975327778915	WITHOUT_CLASSIFICATION	2.4672221084612954E-6	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999991100167086	WITHOUT_CLASSIFICATION	8.899832913902677E-7	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999932216282198	WITHOUT_CLASSIFICATION	6.778371780167284E-6	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999995194661515	WITHOUT_CLASSIFICATION	4.805338484978317E-7	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999980333302422	WITHOUT_CLASSIFICATION	1.9666697578678797E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999999996353589	WITHOUT_CLASSIFICATION	3.64641159393484E-10	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999999951645918	WITHOUT_CLASSIFICATION	4.835408190105423E-9	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999999951645918	WITHOUT_CLASSIFICATION	4.835408190105423E-9	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.999999906967315	WITHOUT_CLASSIFICATION	9.303268503696496E-8	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.999999906967315	WITHOUT_CLASSIFICATION	9.303268503696496E-8	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999998963166459	WITHOUT_CLASSIFICATION	1.0368335418684899E-7	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999653788843843	WITHOUT_CLASSIFICATION	3.462111561576333E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999653788843843	WITHOUT_CLASSIFICATION	3.462111561576333E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999653788843843	WITHOUT_CLASSIFICATION	3.462111561576333E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998079604235	WITHOUT_CLASSIFICATION	1.920395764381611E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999997905489487	WITHOUT_CLASSIFICATION	2.0945105136744288E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999997905489487	WITHOUT_CLASSIFICATION	2.0945105136744288E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999987939018744	WITHOUT_CLASSIFICATION	1.2060981255466849E-6	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999875509053295	WITHOUT_CLASSIFICATION	1.2449094670519935E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999999101659911	WITHOUT_CLASSIFICATION	8.983400888874295E-8	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999999809001637	WITHOUT_CLASSIFICATION	1.9099836271736596E-8	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9998169518646833	WITHOUT_CLASSIFICATION	1.8304813531658183E-4	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999988274507619	WITHOUT_CLASSIFICATION	1.1725492381720973E-6	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.999940421605559	WITHOUT_CLASSIFICATION	5.95783944409299E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999996878633353	WITHOUT_CLASSIFICATION	3.1213666471862774E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999996878633353	WITHOUT_CLASSIFICATION	3.1213666471862774E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998079604235	WITHOUT_CLASSIFICATION	1.920395764381611E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999987939018744	WITHOUT_CLASSIFICATION	1.2060981255466849E-6	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999999384734238	WITHOUT_CLASSIFICATION	6.152657622415311E-8	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999875509053295	WITHOUT_CLASSIFICATION	1.2449094670519935E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999999101659911	WITHOUT_CLASSIFICATION	8.983400888874295E-8	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999998481455339	WITHOUT_CLASSIFICATION	1.518544660499387E-7	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.999999877066041	WITHOUT_CLASSIFICATION	1.2293395896979628E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.999999987842825	WITHOUT_CLASSIFICATION	1.2157175100965865E-8	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999770538696423	WITHOUT_CLASSIFICATION	2.2946130357647383E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999933682482126	WITHOUT_CLASSIFICATION	6.631751787351515E-6	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999996952363136	WITHOUT_CLASSIFICATION	3.047636863570225E-7	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999979748660215	WITHOUT_CLASSIFICATION	2.025133978570314E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999998481455339	WITHOUT_CLASSIFICATION	1.518544660499387E-7	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999971067599763	WITHOUT_CLASSIFICATION	2.8932400236654046E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999971067599763	WITHOUT_CLASSIFICATION	2.8932400236654046E-6	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.999985535848581	WITHOUT_CLASSIFICATION	1.4464151418953438E-5	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999862394537172	WITHOUT_CLASSIFICATION	1.3760546282833284E-5	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.999995223628617	WITHOUT_CLASSIFICATION	4.7763713829571086E-6	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999984357085755	WITHOUT_CLASSIFICATION	1.5642914245728922E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999997973709258	WITHOUT_CLASSIFICATION	2.0262907413749117E-7	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999999993855446	WITHOUT_CLASSIFICATION	6.144553741155643E-10	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999990905131464	WITHOUT_CLASSIFICATION	9.094868536238086E-7	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.999999110624612	WITHOUT_CLASSIFICATION	8.89375387945967E-7	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999993489604362	WITHOUT_CLASSIFICATION	6.510395638059324E-7	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999994063213269	WITHOUT_CLASSIFICATION	5.936786731307059E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999971942111624	WITHOUT_CLASSIFICATION	2.80578883765342E-6	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999984357085755	WITHOUT_CLASSIFICATION	1.5642914245728922E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999997973709258	WITHOUT_CLASSIFICATION	2.0262907413749117E-7	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999862841030257	WITHOUT_CLASSIFICATION	1.3715896974264734E-5	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999998419634322	WITHOUT_CLASSIFICATION	1.580365679174964E-7	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999980999008198	WITHOUT_CLASSIFICATION	1.9000991802853684E-6	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.999998786719323	WITHOUT_CLASSIFICATION	1.213280677010953E-6	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.999999746170874	WITHOUT_CLASSIFICATION	2.538291260245608E-7	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9999778851032985	WITHOUT_CLASSIFICATION	2.211489670149917E-5	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9999671898127472	WITHOUT_CLASSIFICATION	3.281018725278268E-5	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999997738024898	WITHOUT_CLASSIFICATION	2.261975101093113E-7	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999987867968552	WITHOUT_CLASSIFICATION	1.213203144772425E-6	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.999998708485299	WITHOUT_CLASSIFICATION	1.2915147010068876E-6	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9999822214777683	WITHOUT_CLASSIFICATION	1.7778522231736914E-5	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999987666128878	WITHOUT_CLASSIFICATION	1.2333871122264136E-6	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999995440754683	WITHOUT_CLASSIFICATION	4.559245316601988E-7	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999997995619597	WITHOUT_CLASSIFICATION	2.0043804027778506E-7	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9990797079719919	WITHOUT_CLASSIFICATION	9.202920280082312E-4	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999993576718389	WITHOUT_CLASSIFICATION	6.423281610277587E-7	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999665115293398	WITHOUT_CLASSIFICATION	3.348847066032809E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999813801971	WITHOUT_CLASSIFICATION	1.861980286170932E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999720499271	WITHOUT_CLASSIFICATION	2.7950072930446424E-8	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999993628282977	WITHOUT_CLASSIFICATION	6.37171702306751E-7	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999665115293398	WITHOUT_CLASSIFICATION	3.348847066032809E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999813801971	WITHOUT_CLASSIFICATION	1.861980286170932E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999720499271	WITHOUT_CLASSIFICATION	2.7950072930446424E-8	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999991641810625	WITHOUT_CLASSIFICATION	8.358189376026326E-7	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999978036603187	WITHOUT_CLASSIFICATION	2.1963396814236405E-6	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999854374712381	WITHOUT_CLASSIFICATION	1.45625287618254E-5	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9999753348206605	WITHOUT_CLASSIFICATION	2.4665179339524105E-5	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9994120468105334	WITHOUT_CLASSIFICATION	5.87953189466597E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999906008634314	WITHOUT_CLASSIFICATION	9.399136568661742E-6	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9997032560646789	WITHOUT_CLASSIFICATION	2.967439353210563E-4	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999999971749034	WITHOUT_CLASSIFICATION	2.8250965050619903E-9	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999996703193325	WITHOUT_CLASSIFICATION	3.296806675010519E-7	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999994314411551	WITHOUT_CLASSIFICATION	5.685588448784723E-7	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9907486465122148	WITHOUT_CLASSIFICATION	0.009251353487785122	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999999218849012	WITHOUT_CLASSIFICATION	7.811509887676216E-8	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999997196452575	WITHOUT_CLASSIFICATION	2.803547425468571E-7	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999999292728867	WITHOUT_CLASSIFICATION	7.072711324841499E-8	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999996641184925	WITHOUT_CLASSIFICATION	3.35881507436873E-7	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999996548151229	WITHOUT_CLASSIFICATION	3.451848771597753E-7	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9999935468213513	WITHOUT_CLASSIFICATION	6.453178648682541E-6	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999976770791897	WITHOUT_CLASSIFICATION	2.32292081032768E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999773760785	WITHOUT_CLASSIFICATION	2.2623921503174962E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.999999981991884	WITHOUT_CLASSIFICATION	1.800811604158937E-8	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999992797264674	WITHOUT_CLASSIFICATION	7.202735326293445E-7	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999985320117266	WITHOUT_CLASSIFICATION	1.4679882733318157E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999985320117266	WITHOUT_CLASSIFICATION	1.4679882733318157E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999991420438407	WITHOUT_CLASSIFICATION	8.579561592523353E-7	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999991420438407	WITHOUT_CLASSIFICATION	8.579561592523353E-7	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999611943636	WITHOUT_CLASSIFICATION	3.880563629962069E-8	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999611943636	WITHOUT_CLASSIFICATION	3.880563629962069E-8	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999840879736	WITHOUT_CLASSIFICATION	1.591202634918592E-8	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999951001842	WITHOUT_CLASSIFICATION	4.899815735786114E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999628581545	WITHOUT_CLASSIFICATION	3.714184541183507E-8	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999999958684058	WITHOUT_CLASSIFICATION	4.131594184216722E-9	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999962192555	WITHOUT_CLASSIFICATION	3.780744534333112E-9	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.999999997848196	WITHOUT_CLASSIFICATION	2.1518039491817996E-9	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999999475540163	WITHOUT_CLASSIFICATION	5.2445983707377903E-8	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999998535558131	WITHOUT_CLASSIFICATION	1.4644418700606272E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999996878633353	WITHOUT_CLASSIFICATION	3.1213666471862774E-7	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999840879736	WITHOUT_CLASSIFICATION	1.591202634918592E-8	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999951001842	WITHOUT_CLASSIFICATION	4.899815735786114E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999628581545	WITHOUT_CLASSIFICATION	3.714184541183507E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999962192555	WITHOUT_CLASSIFICATION	3.780744534333112E-9	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.999999997848196	WITHOUT_CLASSIFICATION	2.1518039491817996E-9	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999975043961109	WITHOUT_CLASSIFICATION	2.495603889123449E-6	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999997077607634	WITHOUT_CLASSIFICATION	2.922392366211755E-7	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999253861958616	WITHOUT_CLASSIFICATION	7.461380413840056E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999253861958616	WITHOUT_CLASSIFICATION	7.461380413840056E-5	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999993597719699	WITHOUT_CLASSIFICATION	6.402280300566245E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999896582108807	WITHOUT_CLASSIFICATION	1.0341789119352002E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999937394181616	WITHOUT_CLASSIFICATION	6.260581838480888E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999972106571505	WITHOUT_CLASSIFICATION	2.789342849431292E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999972106571505	WITHOUT_CLASSIFICATION	2.789342849431292E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999756476135265	WITHOUT_CLASSIFICATION	2.4352386473494297E-5	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999997753354347	WITHOUT_CLASSIFICATION	2.2466456530029474E-7	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999990001961498	WITHOUT_CLASSIFICATION	9.99803850105603E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999987305834503	WITHOUT_CLASSIFICATION	1.2694165496339748E-6	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999927814753062	WITHOUT_CLASSIFICATION	7.218524693682505E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999883957816093	WITHOUT_CLASSIFICATION	1.160421839073146E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999939862524354	WITHOUT_CLASSIFICATION	6.013747564609214E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999810538287	WITHOUT_CLASSIFICATION	1.8946171395894936E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999990596284373	WITHOUT_CLASSIFICATION	9.403715627117012E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999984923288809	WITHOUT_CLASSIFICATION	1.5076711190061301E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999997949624811	WITHOUT_CLASSIFICATION	2.050375187921777E-7	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999756476135265	WITHOUT_CLASSIFICATION	2.4352386473494297E-5	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999997753354347	WITHOUT_CLASSIFICATION	2.2466456530029474E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999987305834503	WITHOUT_CLASSIFICATION	1.2694165496339748E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999997776061224	WITHOUT_CLASSIFICATION	2.223938776860696E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999937394181616	WITHOUT_CLASSIFICATION	6.260581838480888E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999937394181616	WITHOUT_CLASSIFICATION	6.260581838480888E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999971942111624	WITHOUT_CLASSIFICATION	2.80578883765342E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999971942111624	WITHOUT_CLASSIFICATION	2.80578883765342E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999115723903799	WITHOUT_CLASSIFICATION	8.842760962016054E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999115723903799	WITHOUT_CLASSIFICATION	8.842760962016054E-5	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999997466259999	WITHOUT_CLASSIFICATION	2.5337400015372087E-7	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999997414091978	WITHOUT_CLASSIFICATION	2.585908022948331E-7	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.999994739862799	WITHOUT_CLASSIFICATION	5.260137201082594E-6	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999931980983948	WITHOUT_CLASSIFICATION	6.80190160521123E-6	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9999991766547278	WITHOUT_CLASSIFICATION	8.233452720344882E-7	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999991343873549	WITHOUT_CLASSIFICATION	8.656126451593968E-7	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9998830603170175	WITHOUT_CLASSIFICATION	1.1693968298247285E-4	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999999992271074	WITHOUT_CLASSIFICATION	7.728926218585652E-10	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999995576171695	WITHOUT_CLASSIFICATION	4.4238283047579706E-7	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.999999961772464	WITHOUT_CLASSIFICATION	3.822753605983099E-8	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999999254099426	WITHOUT_CLASSIFICATION	7.459005732462899E-8	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.999996985532362	WITHOUT_CLASSIFICATION	3.0144676378676196E-6	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999999458431067	WITHOUT_CLASSIFICATION	5.415689335747816E-8	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999999178466313	WITHOUT_CLASSIFICATION	8.215336874165239E-8	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999997855169593	WITHOUT_CLASSIFICATION	2.1448304067823039E-7	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999954183425529	WITHOUT_CLASSIFICATION	4.581657447116199E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999987936243129	WITHOUT_CLASSIFICATION	1.2063756871810378E-6	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999999356102289	WITHOUT_CLASSIFICATION	6.438977104766518E-8	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999998174073328	WITHOUT_CLASSIFICATION	1.8259266721093112E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999939862524354	WITHOUT_CLASSIFICATION	6.013747564609214E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999990596284373	WITHOUT_CLASSIFICATION	9.403715627117012E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999996353862625	WITHOUT_CLASSIFICATION	3.6461373751424043E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999980812523502	WITHOUT_CLASSIFICATION	1.9187476498274185E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999980812523502	WITHOUT_CLASSIFICATION	1.9187476498274185E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999997776061224	WITHOUT_CLASSIFICATION	2.223938776860696E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999937394181616	WITHOUT_CLASSIFICATION	6.260581838480888E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999971942111624	WITHOUT_CLASSIFICATION	2.80578883765342E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999115723903799	WITHOUT_CLASSIFICATION	8.842760962016054E-5	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999986959463961	WITHOUT_CLASSIFICATION	1.3040536039477395E-6	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999082658527079	WITHOUT_CLASSIFICATION	9.17341472921675E-5	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999999935865789	WITHOUT_CLASSIFICATION	6.4134210158352415E-9	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9904101165084757	WITHOUT_CLASSIFICATION	0.009589883491524398	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.999999929461516	WITHOUT_CLASSIFICATION	7.05384840471368E-8	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.999999929461516	WITHOUT_CLASSIFICATION	7.05384840471368E-8	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.999999673372223	WITHOUT_CLASSIFICATION	3.2662777709616623E-7	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999999852834371	WITHOUT_CLASSIFICATION	1.4716562817330736E-8	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999733443895	WITHOUT_CLASSIFICATION	2.665561047583041E-8	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999999477627299	WITHOUT_CLASSIFICATION	5.223726994761215E-8	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999355063331	WITHOUT_CLASSIFICATION	6.44936668644019E-8	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999355063331	WITHOUT_CLASSIFICATION	6.44936668644019E-8	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999999961548107	WITHOUT_CLASSIFICATION	3.8451892547580825E-9	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999999956465488	WITHOUT_CLASSIFICATION	4.353451071198099E-9	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999999383295943	WITHOUT_CLASSIFICATION	6.167040565470457E-8	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999961461177578	WITHOUT_CLASSIFICATION	3.853882242211581E-6	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999996206906971	WITHOUT_CLASSIFICATION	3.7930930282327805E-7	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999999537548314	WITHOUT_CLASSIFICATION	4.62451686455601E-8	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999715109416114	WITHOUT_CLASSIFICATION	2.848905838858909E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999999409885704	WITHOUT_CLASSIFICATION	5.901142951564121E-8	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9993450419086436	WITHOUT_CLASSIFICATION	6.549580913564664E-4	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9993662038599459	WITHOUT_CLASSIFICATION	6.337961400540787E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9996518021552062	WITHOUT_CLASSIFICATION	3.48197844793839E-4	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999984045570404	WITHOUT_CLASSIFICATION	1.5954429596732507E-6	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.99999999987808	WITHOUT_CLASSIFICATION	1.219200157979791E-10	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999998639884571	WITHOUT_CLASSIFICATION	1.360115429533544E-7	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9999998101684122	WITHOUT_CLASSIFICATION	1.8983158776801913E-7	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999995453242996	WITHOUT_CLASSIFICATION	4.546757004037212E-7	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999995491934172	WITHOUT_CLASSIFICATION	4.5080658278838226E-7	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999834431461467	WITHOUT_CLASSIFICATION	1.655685385330047E-5	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999999208300281	WITHOUT_CLASSIFICATION	7.916997193241028E-8	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999998481516355	WITHOUT_CLASSIFICATION	1.5184836454443566E-7	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999986638045276	WITHOUT_CLASSIFICATION	1.3361954723749524E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999995535249199	WITHOUT_CLASSIFICATION	4.464750801277737E-7	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999995535249199	WITHOUT_CLASSIFICATION	4.464750801277737E-7	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999961324080816	WITHOUT_CLASSIFICATION	3.867591918427453E-6	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9997467167441193	WITHOUT_CLASSIFICATION	2.532832558807048E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999983811288589	WITHOUT_CLASSIFICATION	1.6188711411937146E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999983811288589	WITHOUT_CLASSIFICATION	1.6188711411937146E-6	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9956266214362606	DEFECT	0.004373378563739435	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.999951050881015	WITHOUT_CLASSIFICATION	4.894911898496417E-5	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.999984891336495	WITHOUT_CLASSIFICATION	1.5108663504873728E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999972965290176	WITHOUT_CLASSIFICATION	2.7034709825160015E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999972965290176	WITHOUT_CLASSIFICATION	2.7034709825160015E-6	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9999728899445588	WITHOUT_CLASSIFICATION	2.7110055441227536E-5	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999999439509094	WITHOUT_CLASSIFICATION	5.604909066393763E-8	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999997405734614	WITHOUT_CLASSIFICATION	2.594265385460946E-7	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999990529840463	WITHOUT_CLASSIFICATION	9.470159535552801E-7	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999998157633853	WITHOUT_CLASSIFICATION	1.8423661474719475E-7	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999996972100058	WITHOUT_CLASSIFICATION	3.0278999422521246E-7	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999997648713363	WITHOUT_CLASSIFICATION	2.351286636469535E-7	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999866390128789	WITHOUT_CLASSIFICATION	1.3360987121141818E-5	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999997553250216	WITHOUT_CLASSIFICATION	2.446749783274039E-7	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9998675744078045	WITHOUT_CLASSIFICATION	1.3242559219558216E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999982505272922	WITHOUT_CLASSIFICATION	1.749472707820127E-6	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999997852693896	WITHOUT_CLASSIFICATION	2.1473061034475187E-7	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999997711531408	WITHOUT_CLASSIFICATION	2.2884685929193997E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9995809739625041	WITHOUT_CLASSIFICATION	4.1902603749592663E-4	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999957297017769	WITHOUT_CLASSIFICATION	4.270298223134459E-6	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9970811986953835	WITHOUT_CLASSIFICATION	0.0029188013046164947	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999999102316811	WITHOUT_CLASSIFICATION	8.97683188485458E-8	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999685233224043	WITHOUT_CLASSIFICATION	3.147667759577108E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.999863299866366	WITHOUT_CLASSIFICATION	1.3670013363396177E-4	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999967603895104	WITHOUT_CLASSIFICATION	3.2396104896611775E-6	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999932104535245	WITHOUT_CLASSIFICATION	6.7895464754145075E-6	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999993013098478	WITHOUT_CLASSIFICATION	6.986901522226917E-7	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999870103850523	WITHOUT_CLASSIFICATION	1.2989614947634583E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999190268756956	WITHOUT_CLASSIFICATION	8.097312430436751E-5	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999997825886414	WITHOUT_CLASSIFICATION	2.1741135868281548E-7	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9968387790059056	WITHOUT_CLASSIFICATION	0.0031612209940944753	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.996682141391319	WITHOUT_CLASSIFICATION	0.0033178586086809276	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999998230639006	WITHOUT_CLASSIFICATION	1.7693609942822148E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999874507263784	WITHOUT_CLASSIFICATION	1.2549273621639728E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999996439515845	WITHOUT_CLASSIFICATION	3.5604841553054553E-7	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.999999999766113	WITHOUT_CLASSIFICATION	2.3388704424856563E-10	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9995809739625041	WITHOUT_CLASSIFICATION	4.1902603749592663E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999998230639006	WITHOUT_CLASSIFICATION	1.7693609942822148E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999874507263784	WITHOUT_CLASSIFICATION	1.2549273621639728E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.999999999766113	WITHOUT_CLASSIFICATION	2.3388704424856563E-10	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999999638333595	WITHOUT_CLASSIFICATION	3.616664040050849E-8	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999825286862138	WITHOUT_CLASSIFICATION	1.74713137861541E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999650359879645	WITHOUT_CLASSIFICATION	3.496401203540745E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999994035734939	WITHOUT_CLASSIFICATION	5.964265060152892E-7	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999759776236	WITHOUT_CLASSIFICATION	2.4022376423112713E-8	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999992474346021	WITHOUT_CLASSIFICATION	7.525653979051834E-7	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999992877894475	WITHOUT_CLASSIFICATION	7.122105525194887E-7	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999997601248192	WITHOUT_CLASSIFICATION	2.398751807585733E-7	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999998960078652	WITHOUT_CLASSIFICATION	1.0399213481456136E-7	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9993952133518811	WITHOUT_CLASSIFICATION	6.047866481189629E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999895440878583	WITHOUT_CLASSIFICATION	1.0455912141583321E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999895440878583	WITHOUT_CLASSIFICATION	1.0455912141583321E-5	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999975874816524	WITHOUT_CLASSIFICATION	2.412518347637242E-6	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999992414787198	WITHOUT_CLASSIFICATION	7.585212801435152E-7	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999995556383765	WITHOUT_CLASSIFICATION	4.443616234817908E-7	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999999518866313	WITHOUT_CLASSIFICATION	4.811336874659511E-8	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999979144737245	WITHOUT_CLASSIFICATION	2.0855262755304704E-6	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999820754943192	WITHOUT_CLASSIFICATION	1.792450568084286E-5	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999964599787909	WITHOUT_CLASSIFICATION	3.5400212091343095E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9987250638462918	WITHOUT_CLASSIFICATION	0.0012749361537082603	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999999946769035	WITHOUT_CLASSIFICATION	5.323096567344031E-9	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999786366227	WITHOUT_CLASSIFICATION	2.1363377260249846E-8	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999997549167465	WITHOUT_CLASSIFICATION	2.4508325344389706E-7	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999995225030917	WITHOUT_CLASSIFICATION	4.774969083704496E-7	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999999933531013	WITHOUT_CLASSIFICATION	6.6468987092704454E-9	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999995620453429	WITHOUT_CLASSIFICATION	4.3795465698871755E-7	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999999758723139	WITHOUT_CLASSIFICATION	2.412768599505981E-8	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999998935752182	WITHOUT_CLASSIFICATION	1.0642478175079706E-7	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999999933197209	WITHOUT_CLASSIFICATION	6.680279135278134E-9	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999999662865046	WITHOUT_CLASSIFICATION	3.371349551861138E-8	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999999214023757	WITHOUT_CLASSIFICATION	7.859762430094145E-8	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999998878983102	WITHOUT_CLASSIFICATION	1.1210168979749995E-7	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999966114176001	WITHOUT_CLASSIFICATION	3.38858239978165E-6	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999964915344591	WITHOUT_CLASSIFICATION	3.5084655409420763E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999999965625618	WITHOUT_CLASSIFICATION	3.437438186642017E-9	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999994490405358	WITHOUT_CLASSIFICATION	5.509594641931765E-7	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999998445786985	WITHOUT_CLASSIFICATION	1.5542130145035165E-7	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999992701761615	WITHOUT_CLASSIFICATION	7.298238385703953E-7	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.9967130558596725	WITHOUT_CLASSIFICATION	0.0032869441403274597	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.999684758234363	WITHOUT_CLASSIFICATION	3.152417656370723E-4	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999966502370491	WITHOUT_CLASSIFICATION	3.3497629509802193E-6	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999997871883094	WITHOUT_CLASSIFICATION	2.1281169062205652E-7	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999983303260694	WITHOUT_CLASSIFICATION	1.6696739305550691E-6	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999999154753552	WITHOUT_CLASSIFICATION	8.452464489203687E-8	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999999573199571	WITHOUT_CLASSIFICATION	4.268004288366155E-8	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999986620806747	WITHOUT_CLASSIFICATION	1.337919325281554E-6	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999999496278991	WITHOUT_CLASSIFICATION	5.037210097675617E-8	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9998983001656024	WITHOUT_CLASSIFICATION	1.0169983439756436E-4	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999999476666297	WITHOUT_CLASSIFICATION	5.233337030125416E-8	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999992433285412	WITHOUT_CLASSIFICATION	7.566714588617398E-7	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999997206430102	WITHOUT_CLASSIFICATION	2.793569898260641E-7	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999993314428539	WITHOUT_CLASSIFICATION	6.685571462187811E-7	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9999178408867063	WITHOUT_CLASSIFICATION	8.215911329364501E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999604307613219	WITHOUT_CLASSIFICATION	3.9569238678005474E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999961833742528	WITHOUT_CLASSIFICATION	3.816625747192545E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999951563855979	WITHOUT_CLASSIFICATION	4.8436144021407684E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999434936140031	WITHOUT_CLASSIFICATION	5.65063859967387E-5	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999990219679364	WITHOUT_CLASSIFICATION	9.780320635904005E-7	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9999996769362028	WITHOUT_CLASSIFICATION	3.230637971609252E-7	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999948623537542	WITHOUT_CLASSIFICATION	5.1376462457952814E-6	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9999823582107475	WITHOUT_CLASSIFICATION	1.7641789252465798E-5	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999992862447777	WITHOUT_CLASSIFICATION	7.137552223033806E-7	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999885218239184	WITHOUT_CLASSIFICATION	1.1478176081639288E-5	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999999988006922	WITHOUT_CLASSIFICATION	1.1993078033076217E-9	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999910541273519	WITHOUT_CLASSIFICATION	8.945872648137311E-6	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999947488697952	WITHOUT_CLASSIFICATION	5.25113020473894E-6	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9999984425827022	WITHOUT_CLASSIFICATION	1.5574172977869375E-6	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999969207340377	WITHOUT_CLASSIFICATION	3.079265962357995E-6	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999992381707525	WITHOUT_CLASSIFICATION	7.618292474183491E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.99999869525829	WITHOUT_CLASSIFICATION	1.3047417100691423E-6	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9990373679003658	WITHOUT_CLASSIFICATION	9.626320996343131E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999195617134092	WITHOUT_CLASSIFICATION	8.043828659078233E-5	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999195617134092	WITHOUT_CLASSIFICATION	8.043828659078233E-5	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.999996768323592	WITHOUT_CLASSIFICATION	3.2316764081363997E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999983632973435	WITHOUT_CLASSIFICATION	1.6367026564924061E-6	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.999992907401458	WITHOUT_CLASSIFICATION	7.0925985420596104E-6	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999836688293501	WITHOUT_CLASSIFICATION	1.6331170649931055E-5	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999964108157163	WITHOUT_CLASSIFICATION	3.589184283676759E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9998439327965419	WITHOUT_CLASSIFICATION	1.5606720345805994E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9998697164162532	WITHOUT_CLASSIFICATION	1.3028358374668418E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999998976984965	WITHOUT_CLASSIFICATION	1.0230150349929462E-7	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999999778468179	WITHOUT_CLASSIFICATION	2.2153182091467827E-8	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999999999491918	WITHOUT_CLASSIFICATION	5.0808241193321023E-11	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.999998229553778	WITHOUT_CLASSIFICATION	1.7704462220120662E-6	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999990243067605	WITHOUT_CLASSIFICATION	9.756932394604755E-7	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999998938547381	WITHOUT_CLASSIFICATION	1.0614526198074718E-7	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.999999989090307	WITHOUT_CLASSIFICATION	1.0909693043713373E-8	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999970071165426	WITHOUT_CLASSIFICATION	2.992883457405479E-6	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999817268757937	WITHOUT_CLASSIFICATION	1.8273124206284834E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999992510530024	WITHOUT_CLASSIFICATION	7.489469976034797E-7	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999949629339933	WITHOUT_CLASSIFICATION	5.037066006669847E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9996406214564517	WITHOUT_CLASSIFICATION	3.5937854354830916E-4	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999999765551967	WITHOUT_CLASSIFICATION	2.3444803259317703E-8	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999761537342406	WITHOUT_CLASSIFICATION	2.3846265759362652E-5	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999998335872493	WITHOUT_CLASSIFICATION	1.6641275065461556E-7	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999991528946739	WITHOUT_CLASSIFICATION	8.471053259933039E-7	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999999910732044	WITHOUT_CLASSIFICATION	8.9267955861309E-9	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999982486623521	WITHOUT_CLASSIFICATION	1.7513376477950357E-6	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999982750736046	WITHOUT_CLASSIFICATION	1.7249263953571793E-6	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999999914405664	WITHOUT_CLASSIFICATION	8.559433650930415E-9	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999999033490061	WITHOUT_CLASSIFICATION	9.665099394718228E-8	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999995999021437	WITHOUT_CLASSIFICATION	4.0009785627888766E-7	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9999838178138081	WITHOUT_CLASSIFICATION	1.6182186191920594E-5	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.999994354934523	WITHOUT_CLASSIFICATION	5.645065476906786E-6	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999966529305296	WITHOUT_CLASSIFICATION	3.3470694703816837E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998311413044	WITHOUT_CLASSIFICATION	1.688586955254486E-7	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999997499936647	WITHOUT_CLASSIFICATION	2.500063353154339E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998311413044	WITHOUT_CLASSIFICATION	1.688586955254486E-7	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999927481198654	WITHOUT_CLASSIFICATION	7.251880134613894E-6	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9998566257811315	WITHOUT_CLASSIFICATION	1.4337421886845373E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9998566257811315	WITHOUT_CLASSIFICATION	1.4337421886845373E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9998566257811315	WITHOUT_CLASSIFICATION	1.4337421886845373E-4	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999999383954455	WITHOUT_CLASSIFICATION	6.160455438836138E-8	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999999383954455	WITHOUT_CLASSIFICATION	6.160455438836138E-8	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999999766983295	WITHOUT_CLASSIFICATION	2.3301670430629357E-8	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999444254748974	WITHOUT_CLASSIFICATION	5.557452510252834E-5	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999999928642349	WITHOUT_CLASSIFICATION	7.135765161358965E-9	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999999555311071	WITHOUT_CLASSIFICATION	4.446889281233091E-8	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999991455948125	WITHOUT_CLASSIFICATION	8.544051875478777E-7	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999996240543416	WITHOUT_CLASSIFICATION	3.7594565837439735E-7	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.999999193934663	WITHOUT_CLASSIFICATION	8.06065337012109E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999998751883604	WITHOUT_CLASSIFICATION	1.248116396395352E-7	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999999969423696	WITHOUT_CLASSIFICATION	3.0576303980947955E-9	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.999999867200201	WITHOUT_CLASSIFICATION	1.3279979899963925E-7	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999996571339815	WITHOUT_CLASSIFICATION	3.428660185624981E-7	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9999037933456308	WITHOUT_CLASSIFICATION	9.620665436919326E-5	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999859598183916	WITHOUT_CLASSIFICATION	1.4040181608357487E-5	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999998735984619	WITHOUT_CLASSIFICATION	1.264015381534227E-7	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999998144861326	WITHOUT_CLASSIFICATION	1.855138672900962E-7	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999998281673655	WITHOUT_CLASSIFICATION	1.7183263445568726E-7	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9999921088083962	WITHOUT_CLASSIFICATION	7.891191603878095E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999992861130181	WITHOUT_CLASSIFICATION	7.138869818549393E-7	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999992861130181	WITHOUT_CLASSIFICATION	7.138869818549393E-7	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999997130947819	WITHOUT_CLASSIFICATION	2.8690521817695803E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999998680967241	WITHOUT_CLASSIFICATION	1.3190327574485423E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999998680967241	WITHOUT_CLASSIFICATION	1.3190327574485423E-7	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9999503245096486	WITHOUT_CLASSIFICATION	4.9675490351398945E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999999207408868	WITHOUT_CLASSIFICATION	7.925911316025543E-8	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999996722797015	WITHOUT_CLASSIFICATION	3.277202984114653E-7	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999994530604794	WITHOUT_CLASSIFICATION	5.469395205903838E-7	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999998435789024	WITHOUT_CLASSIFICATION	1.564210976235831E-7	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9999999217204968	WITHOUT_CLASSIFICATION	7.827950311864097E-8	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999996384416414	WITHOUT_CLASSIFICATION	3.615583586107073E-7	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999915569274691	WITHOUT_CLASSIFICATION	8.443072530847358E-6	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.999999923842906	WITHOUT_CLASSIFICATION	7.615709397576163E-8	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999987763398874	WITHOUT_CLASSIFICATION	1.2236601126002014E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.999999849256262	WITHOUT_CLASSIFICATION	1.5074373795385872E-7	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999940267313319	WITHOUT_CLASSIFICATION	5.973268668135988E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999998985569282	WITHOUT_CLASSIFICATION	1.0144307188534011E-7	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.999997958155174	WITHOUT_CLASSIFICATION	2.041844826073166E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999998751883604	WITHOUT_CLASSIFICATION	1.248116396395352E-7	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9999869076835319	WITHOUT_CLASSIFICATION	1.3092316468038987E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999992217990495	WITHOUT_CLASSIFICATION	7.782009505199199E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999819737383	WITHOUT_CLASSIFICATION	1.8026261753969238E-8	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999819737383	WITHOUT_CLASSIFICATION	1.8026261753969238E-8	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999675193285377	WITHOUT_CLASSIFICATION	3.248067146229401E-5	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9999481633316183	WITHOUT_CLASSIFICATION	5.183666838169151E-5	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999998061262256	WITHOUT_CLASSIFICATION	1.938737743248796E-7	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.999997729545319	WITHOUT_CLASSIFICATION	2.2704546810113074E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999998150854524	WITHOUT_CLASSIFICATION	1.8491454761008798E-7	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.999999993587222	WITHOUT_CLASSIFICATION	6.4127780046202236E-9	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.999906183625027	WITHOUT_CLASSIFICATION	9.381637497301569E-5	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9983964333758738	WITHOUT_CLASSIFICATION	0.0016035666241261941	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999976638468349	WITHOUT_CLASSIFICATION	2.3361531651855498E-6	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9999985200013192	WITHOUT_CLASSIFICATION	1.4799986807902128E-6	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9999978152136868	WITHOUT_CLASSIFICATION	2.1847863130939216E-6	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9999961744946965	WITHOUT_CLASSIFICATION	3.825505303502709E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9675709039795354	DEFECT	0.03242909602046461	WITHOUT_CLASSIFICATION
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999987822433076	WITHOUT_CLASSIFICATION	1.217756692321259E-6	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999997955025587	WITHOUT_CLASSIFICATION	2.0449744140517074E-7	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9999942070259366	WITHOUT_CLASSIFICATION	5.792974063398844E-6	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999994071666064	WITHOUT_CLASSIFICATION	5.928333936519279E-7	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999999927635046	WITHOUT_CLASSIFICATION	7.236495454964625E-9	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999999894371208	WITHOUT_CLASSIFICATION	1.0562879133269093E-8	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999968450143585	WITHOUT_CLASSIFICATION	3.154985641480532E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999995685982327	WITHOUT_CLASSIFICATION	4.31401767350408E-7	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.999999715610387	WITHOUT_CLASSIFICATION	2.843896129747273E-7	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999994890524411	WITHOUT_CLASSIFICATION	5.10947559007537E-7	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999999981901956	WITHOUT_CLASSIFICATION	1.809804438881652E-9	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999996206686566	WITHOUT_CLASSIFICATION	3.7933134337075325E-7	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999994604437588	WITHOUT_CLASSIFICATION	5.395562412396019E-7	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.999230294266871	WITHOUT_CLASSIFICATION	7.697057331288976E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9857369694826964	WITHOUT_CLASSIFICATION	0.014263030517303692	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.999999992524957	WITHOUT_CLASSIFICATION	7.475043005471442E-9	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9997674531348926	WITHOUT_CLASSIFICATION	2.3254686510740916E-4	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999919401026073	WITHOUT_CLASSIFICATION	8.059897392797427E-6	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999999858100205	WITHOUT_CLASSIFICATION	1.4189979575689438E-8	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999230308841155	WITHOUT_CLASSIFICATION	7.696911588453496E-5	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9976200168210033	WITHOUT_CLASSIFICATION	0.002379983178996684	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999923035223	WITHOUT_CLASSIFICATION	7.696477706939344E-9	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999973843372811	WITHOUT_CLASSIFICATION	2.615662718745051E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9857369694826964	WITHOUT_CLASSIFICATION	0.014263030517303692	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999995387246442	WITHOUT_CLASSIFICATION	4.6127535581129726E-7	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999923035223	WITHOUT_CLASSIFICATION	7.696477706939344E-9	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9999979229462845	WITHOUT_CLASSIFICATION	2.0770537155402845E-6	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999999829053681	WITHOUT_CLASSIFICATION	1.709463193071021E-8	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999999370141863	WITHOUT_CLASSIFICATION	6.298581362469903E-8	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999993796611609	WITHOUT_CLASSIFICATION	6.203388390850207E-7	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999996346491801	WITHOUT_CLASSIFICATION	3.653508198684776E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999896644384335	WITHOUT_CLASSIFICATION	1.0335561566387823E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999896644384335	WITHOUT_CLASSIFICATION	1.0335561566387823E-5	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999999881601775	WITHOUT_CLASSIFICATION	1.1839822394509901E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999026737669	WITHOUT_CLASSIFICATION	9.73262330749923E-8	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999997418940343	WITHOUT_CLASSIFICATION	2.581059656525554E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999997418940343	WITHOUT_CLASSIFICATION	2.581059656525554E-7	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999968330770064	WITHOUT_CLASSIFICATION	3.166922993690068E-6	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9992568659034788	WITHOUT_CLASSIFICATION	7.431340965211746E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999590789412215	WITHOUT_CLASSIFICATION	4.0921058778500855E-5	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999590789412215	WITHOUT_CLASSIFICATION	4.0921058778500855E-5	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999877228882919	WITHOUT_CLASSIFICATION	1.2277111708220945E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999919469641558	WITHOUT_CLASSIFICATION	8.053035844061679E-6	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999989400264587	WITHOUT_CLASSIFICATION	1.0599735412521927E-6	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999987127375075	WITHOUT_CLASSIFICATION	1.287262492466319E-6	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.999994942327773	WITHOUT_CLASSIFICATION	5.057672226977924E-6	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.999996469373447	WITHOUT_CLASSIFICATION	3.5306265530241296E-6	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.999996674598474	WITHOUT_CLASSIFICATION	3.3254015260659066E-6	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999978497122468	WITHOUT_CLASSIFICATION	2.1502877530639636E-6	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999865666452316	WITHOUT_CLASSIFICATION	1.3433354768419799E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999995020101542	WITHOUT_CLASSIFICATION	4.979898457803085E-7	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999992426235186	WITHOUT_CLASSIFICATION	7.573764815285857E-7	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999889208492	WITHOUT_CLASSIFICATION	1.1079150799972922E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999830408248468	WITHOUT_CLASSIFICATION	1.6959175153223303E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999983484219451	WITHOUT_CLASSIFICATION	1.6515780549120669E-6	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999994918397355	WITHOUT_CLASSIFICATION	5.081602644453007E-7	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999997891271484	WITHOUT_CLASSIFICATION	2.108728516213053E-7	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999141241741468	WITHOUT_CLASSIFICATION	8.587582585314955E-5	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999969354797723	WITHOUT_CLASSIFICATION	3.06452022779367E-6	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.999995031267995	WITHOUT_CLASSIFICATION	4.968732004923323E-6	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999889573081536	WITHOUT_CLASSIFICATION	1.1042691846426723E-5	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999998001262751	WITHOUT_CLASSIFICATION	1.9987372501685997E-7	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999997293080097	WITHOUT_CLASSIFICATION	2.7069199022123856E-7	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999954452319183	WITHOUT_CLASSIFICATION	4.554768081695301E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999933994448778	WITHOUT_CLASSIFICATION	6.60055512226463E-6	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999868568153555	WITHOUT_CLASSIFICATION	1.314318464456511E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999907620440363	WITHOUT_CLASSIFICATION	9.237955963677262E-6	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999964929617453	WITHOUT_CLASSIFICATION	3.5070382547431716E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999899545680837	WITHOUT_CLASSIFICATION	1.004543191627564E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999997905012974	WITHOUT_CLASSIFICATION	2.0949870259919634E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999997905012974	WITHOUT_CLASSIFICATION	2.0949870259919634E-6	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999967305575941	WITHOUT_CLASSIFICATION	3.269442405840836E-6	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999997773361292	WITHOUT_CLASSIFICATION	2.2266387069404998E-7	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999953890066321	WITHOUT_CLASSIFICATION	4.6109933679344296E-6	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9998834112999593	WITHOUT_CLASSIFICATION	1.1658870004077845E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999737386508932	WITHOUT_CLASSIFICATION	2.6261349106818027E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999882373907718	WITHOUT_CLASSIFICATION	1.1762609228193227E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999993259821062	WITHOUT_CLASSIFICATION	6.740178938288467E-7	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999997860166955	WITHOUT_CLASSIFICATION	2.139833044855476E-7	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999965742892631	WITHOUT_CLASSIFICATION	3.425710736779998E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999984870716	WITHOUT_CLASSIFICATION	1.5129284059432153E-9	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999996225924935	WITHOUT_CLASSIFICATION	3.77407506405546E-7	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999999827268501	WITHOUT_CLASSIFICATION	1.7273149875815944E-8	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.999996925214298	WITHOUT_CLASSIFICATION	3.0747857020302596E-6	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.999997083482285	WITHOUT_CLASSIFICATION	2.91651771505665E-6	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999993354917804	WITHOUT_CLASSIFICATION	6.645082195753664E-7	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999986255592255	WITHOUT_CLASSIFICATION	1.374440774528584E-6	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999927532998679	WITHOUT_CLASSIFICATION	7.2467001320817044E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999904880254408	WITHOUT_CLASSIFICATION	9.511974559343808E-6	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999971086172824	WITHOUT_CLASSIFICATION	2.891382717570628E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.999941636025424	WITHOUT_CLASSIFICATION	5.836397457606486E-5	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.999999456014268	WITHOUT_CLASSIFICATION	5.439857320339875E-7	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999811473209519	WITHOUT_CLASSIFICATION	1.8852679048141242E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999999843097642	WITHOUT_CLASSIFICATION	1.5690235727457176E-8	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999999954552032	WITHOUT_CLASSIFICATION	4.544796725122226E-9	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999997511394517	WITHOUT_CLASSIFICATION	2.4886054823270525E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999990663056797	WITHOUT_CLASSIFICATION	9.336943203427274E-7	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999868935092349	WITHOUT_CLASSIFICATION	1.3106490765095859E-5	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999996572708183	WITHOUT_CLASSIFICATION	3.4272918167770677E-7	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999945742418604	WITHOUT_CLASSIFICATION	5.425758139528958E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.999999929160042	WITHOUT_CLASSIFICATION	7.08399580241624E-8	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999972395818453	WITHOUT_CLASSIFICATION	2.760418154748588E-6	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999992831577525	WITHOUT_CLASSIFICATION	7.168422475022293E-7	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.999999972753886	WITHOUT_CLASSIFICATION	2.7246113952301005E-8	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999981299969678	WITHOUT_CLASSIFICATION	1.8700030322599045E-6	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.999999919747272	WITHOUT_CLASSIFICATION	8.02527280105811E-8	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.999998156133941	WITHOUT_CLASSIFICATION	1.8438660588574406E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.999999539262677	WITHOUT_CLASSIFICATION	4.6073732296496916E-7	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999991209462095	WITHOUT_CLASSIFICATION	8.790537905656557E-7	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.999999999498453	WITHOUT_CLASSIFICATION	5.015470342608613E-10	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999997007511021	WITHOUT_CLASSIFICATION	2.99248897883734E-7	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9995269180731816	WITHOUT_CLASSIFICATION	4.7308192681846473E-4	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999999689091796	WITHOUT_CLASSIFICATION	3.109082032833854E-8	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999009384136593	WITHOUT_CLASSIFICATION	9.906158634069112E-5	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999009384136593	WITHOUT_CLASSIFICATION	9.906158634069112E-5	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999997324587216	WITHOUT_CLASSIFICATION	2.6754127827848045E-7	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999354628161727	WITHOUT_CLASSIFICATION	6.453718382731366E-5	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999990132288622	WITHOUT_CLASSIFICATION	9.867711377317448E-7	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999992586442542	WITHOUT_CLASSIFICATION	7.413557456619821E-7	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999773760785	WITHOUT_CLASSIFICATION	2.2623921503174962E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.999999981991884	WITHOUT_CLASSIFICATION	1.800811604158937E-8	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999988731232994	WITHOUT_CLASSIFICATION	1.126876700661448E-6	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999984279675241	WITHOUT_CLASSIFICATION	1.5720324757865937E-6	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9857501374512321	WITHOUT_CLASSIFICATION	0.014249862548767919	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999680581122312	WITHOUT_CLASSIFICATION	3.194188776866564E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.999999878929021	WITHOUT_CLASSIFICATION	1.2107097900764541E-7	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999998275241637	WITHOUT_CLASSIFICATION	1.7247583633958033E-7	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999998745326453	WITHOUT_CLASSIFICATION	1.2546735485803255E-7	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999998062245532	WITHOUT_CLASSIFICATION	1.9377544679066947E-7	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999999920062261	WITHOUT_CLASSIFICATION	7.993773892259744E-9	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.999999873039241	WITHOUT_CLASSIFICATION	1.2696075908926072E-7	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999999260038517	WITHOUT_CLASSIFICATION	7.399614836406496E-8	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999979839438132	WITHOUT_CLASSIFICATION	2.0160561868962042E-6	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999995458340093	WITHOUT_CLASSIFICATION	4.541659907503001E-7	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999940902430478	WITHOUT_CLASSIFICATION	5.909756952198138E-6	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999995204876312	WITHOUT_CLASSIFICATION	4.795123687875843E-7	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999927027802211	WITHOUT_CLASSIFICATION	7.297219778802702E-6	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.999999912542077	WITHOUT_CLASSIFICATION	8.745792302630234E-8	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999999535133814	WITHOUT_CLASSIFICATION	4.648661849381889E-8	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999750421265	WITHOUT_CLASSIFICATION	2.495787357353128E-8	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999998626254135	WITHOUT_CLASSIFICATION	1.373745865707357E-7	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999997641267411	WITHOUT_CLASSIFICATION	2.358732589385109E-7	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999999613724744	WITHOUT_CLASSIFICATION	3.862752558068188E-8	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999999202372981	WITHOUT_CLASSIFICATION	7.976270180544692E-8	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999999600490446	WITHOUT_CLASSIFICATION	3.995095538146353E-8	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999998716531144	WITHOUT_CLASSIFICATION	1.2834688547602766E-7	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999997633991168	WITHOUT_CLASSIFICATION	2.36600883329897E-7	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999995857035048	WITHOUT_CLASSIFICATION	4.1429649512351746E-7	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999988857361046	WITHOUT_CLASSIFICATION	1.1142638953980941E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999991209462095	WITHOUT_CLASSIFICATION	8.790537905656557E-7	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999995867486773	WITHOUT_CLASSIFICATION	4.1325132271750774E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999932541206	WITHOUT_CLASSIFICATION	6.745879468613417E-9	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999932541206	WITHOUT_CLASSIFICATION	6.745879468613417E-9	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999979519396937	WITHOUT_CLASSIFICATION	2.048060306428021E-6	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.999999353207035	WITHOUT_CLASSIFICATION	6.467929650753245E-7	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999960397813189	WITHOUT_CLASSIFICATION	3.960218681031731E-6	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.999999901607499	WITHOUT_CLASSIFICATION	9.839250096327731E-8	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999991833781058	WITHOUT_CLASSIFICATION	8.166218943251489E-7	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999998418310956	WITHOUT_CLASSIFICATION	1.5816890429917904E-7	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999998213953453	WITHOUT_CLASSIFICATION	1.7860465468044263E-7	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999981589139323	WITHOUT_CLASSIFICATION	1.8410860676644779E-6	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999985733348544	WITHOUT_CLASSIFICATION	1.426665145613077E-6	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999984341139783	WITHOUT_CLASSIFICATION	1.5658860217043673E-6	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.99998339384164	WITHOUT_CLASSIFICATION	1.660615835992774E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999930979272929	WITHOUT_CLASSIFICATION	6.902072707206258E-6	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999983363046123	WITHOUT_CLASSIFICATION	1.663695387762639E-6	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999992184763858	WITHOUT_CLASSIFICATION	7.81523614142496E-7	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999999944373613	WITHOUT_CLASSIFICATION	5.562638690718347E-9	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999933620876009	WITHOUT_CLASSIFICATION	6.637912399119086E-6	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999868750111691	WITHOUT_CLASSIFICATION	1.312498883074649E-5	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.999987327452028	WITHOUT_CLASSIFICATION	1.2672547972107072E-5	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.99999748287722	WITHOUT_CLASSIFICATION	2.5171227800579676E-6	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999972372445146	WITHOUT_CLASSIFICATION	2.762755485335541E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999665205180778	WITHOUT_CLASSIFICATION	3.347948192222863E-5	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999960233159105	WITHOUT_CLASSIFICATION	3.976684089487602E-6	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999999573676064	WITHOUT_CLASSIFICATION	4.26323937323556E-8	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999947443759658	WITHOUT_CLASSIFICATION	5.2556240340875526E-6	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999968071009548	WITHOUT_CLASSIFICATION	3.192899045257493E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999937418009096	WITHOUT_CLASSIFICATION	6.258199090313699E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999998316763041	WITHOUT_CLASSIFICATION	1.6832369586785841E-7	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999883223519	WITHOUT_CLASSIFICATION	1.1677647961506167E-8	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999997052616397	WITHOUT_CLASSIFICATION	2.9473836026959734E-7	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999931355665	WITHOUT_CLASSIFICATION	6.864433546551421E-9	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999999006247318	WITHOUT_CLASSIFICATION	9.937526817786687E-8	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999994586623626	WITHOUT_CLASSIFICATION	5.413376374718016E-7	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999996577423693	WITHOUT_CLASSIFICATION	3.4225763077305576E-7	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999975300964332	WITHOUT_CLASSIFICATION	2.4699035667759854E-6	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999985547961838	WITHOUT_CLASSIFICATION	1.4452038161945777E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999976514068211	WITHOUT_CLASSIFICATION	2.3485931790277566E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.999999019986716	WITHOUT_CLASSIFICATION	9.800132840538546E-7	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999937418009096	WITHOUT_CLASSIFICATION	6.258199090313699E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999998316763041	WITHOUT_CLASSIFICATION	1.6832369586785841E-7	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999883223519	WITHOUT_CLASSIFICATION	1.1677647961506167E-8	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999931355665	WITHOUT_CLASSIFICATION	6.864433546551421E-9	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9998841052914992	WITHOUT_CLASSIFICATION	1.1589470850085008E-4	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999996682683243	WITHOUT_CLASSIFICATION	3.317316756603385E-7	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.999997491376381	WITHOUT_CLASSIFICATION	2.508623618875961E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999971403255886	WITHOUT_CLASSIFICATION	2.8596744113035397E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999867321693571	WITHOUT_CLASSIFICATION	1.3267830642973671E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.99999776606069	WITHOUT_CLASSIFICATION	2.233939310004726E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999995407137042	WITHOUT_CLASSIFICATION	4.592862957943264E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999951068639703	WITHOUT_CLASSIFICATION	4.893136029693371E-6	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999994709851483	WITHOUT_CLASSIFICATION	5.290148517720798E-7	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999996820921384	WITHOUT_CLASSIFICATION	3.1790786161482325E-7	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999995275299729	WITHOUT_CLASSIFICATION	4.724700269931606E-7	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999999668928516	WITHOUT_CLASSIFICATION	3.310714833464511E-8	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999964516972877	WITHOUT_CLASSIFICATION	3.5483027123226324E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999999007777007	WITHOUT_CLASSIFICATION	9.92222992691687E-8	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999996713365551	WITHOUT_CLASSIFICATION	3.286634448328858E-7	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999995946757152	WITHOUT_CLASSIFICATION	4.053242848225833E-7	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999999715500583	WITHOUT_CLASSIFICATION	2.844994172633854E-8	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.999999632680489	WITHOUT_CLASSIFICATION	3.6731951101388044E-7	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999991615588905	WITHOUT_CLASSIFICATION	8.384411095469405E-7	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.999999019986716	WITHOUT_CLASSIFICATION	9.800132840538546E-7	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999996682683243	WITHOUT_CLASSIFICATION	3.317316756603385E-7	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.999997491376381	WITHOUT_CLASSIFICATION	2.508623618875961E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999867321693571	WITHOUT_CLASSIFICATION	1.3267830642973671E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.99999776606069	WITHOUT_CLASSIFICATION	2.233939310004726E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999995407137042	WITHOUT_CLASSIFICATION	4.592862957943264E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999951068639703	WITHOUT_CLASSIFICATION	4.893136029693371E-6	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999987056163726	WITHOUT_CLASSIFICATION	1.2943836273981566E-6	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999796800137936	WITHOUT_CLASSIFICATION	2.0319986206520365E-5	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999999177930512	WITHOUT_CLASSIFICATION	8.220694879577557E-8	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999998979907398	WITHOUT_CLASSIFICATION	1.0200926011164739E-7	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999624216710946	WITHOUT_CLASSIFICATION	3.7578328905414404E-5	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999624216710946	WITHOUT_CLASSIFICATION	3.7578328905414404E-5	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999987607799972	WITHOUT_CLASSIFICATION	1.2392200028347023E-6	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999999930263381	WITHOUT_CLASSIFICATION	6.973661897904962E-9	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.99999916729626	WITHOUT_CLASSIFICATION	8.327037398823437E-7	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999988035583787	WITHOUT_CLASSIFICATION	1.196441621371486E-6	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999999895221907	WITHOUT_CLASSIFICATION	1.0477809333643432E-8	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999986220441207	WITHOUT_CLASSIFICATION	1.3779558793788367E-6	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999999559423723	WITHOUT_CLASSIFICATION	4.40576277126655E-8	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999996621324431	WITHOUT_CLASSIFICATION	3.3786755688529594E-7	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999982978606121	WITHOUT_CLASSIFICATION	1.7021393878997667E-6	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999998777321256	WITHOUT_CLASSIFICATION	1.2226787445051005E-7	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999999118966026	WITHOUT_CLASSIFICATION	8.810339733887499E-8	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999991803413246	WITHOUT_CLASSIFICATION	8.196586752895834E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999904771418319	WITHOUT_CLASSIFICATION	9.52285816807593E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999996567499754	WITHOUT_CLASSIFICATION	3.432500246619153E-7	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.999999969694499	WITHOUT_CLASSIFICATION	3.030550091000837E-8	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999996424332727	WITHOUT_CLASSIFICATION	3.5756672730993325E-7	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999999860097187	WITHOUT_CLASSIFICATION	1.399028128509926E-8	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999998869027593	WITHOUT_CLASSIFICATION	1.1309724065699669E-7	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999980804973746	WITHOUT_CLASSIFICATION	1.9195026255045984E-6	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999999754340892	WITHOUT_CLASSIFICATION	2.4565910856833176E-8	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.999996653506817	WITHOUT_CLASSIFICATION	3.346493182979518E-6	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999995998714822	WITHOUT_CLASSIFICATION	4.001285176840018E-7	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.999999965254366	WITHOUT_CLASSIFICATION	3.474563403090099E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9954049979708167	WITHOUT_CLASSIFICATION	0.004595002029183291	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998559655708	WITHOUT_CLASSIFICATION	1.4403442914763909E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999981042414001	WITHOUT_CLASSIFICATION	1.8957585998966064E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999985555221391	WITHOUT_CLASSIFICATION	1.4444778608780488E-6	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999603554708313	WITHOUT_CLASSIFICATION	3.964452916867592E-5	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999868738572752	WITHOUT_CLASSIFICATION	1.3126142724859295E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998559655708	WITHOUT_CLASSIFICATION	1.4403442914763909E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999981042414001	WITHOUT_CLASSIFICATION	1.8957585998966064E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999996567499754	WITHOUT_CLASSIFICATION	3.432500246619153E-7	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999998580487374	WITHOUT_CLASSIFICATION	1.419512626586247E-7	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999996459231948	WITHOUT_CLASSIFICATION	3.5407680526199625E-7	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9998212098399212	WITHOUT_CLASSIFICATION	1.7879016007887758E-4	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999939844148618	WITHOUT_CLASSIFICATION	6.015585138297548E-6	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999999963146615	WITHOUT_CLASSIFICATION	3.685338568273677E-9	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999921939319211	WITHOUT_CLASSIFICATION	7.80606807896889E-6	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9999980900377404	WITHOUT_CLASSIFICATION	1.9099622595051174E-6	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999999719018451	WITHOUT_CLASSIFICATION	2.8098154919382042E-8	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9990746043049371	WITHOUT_CLASSIFICATION	9.253956950628217E-4	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999853395459848	WITHOUT_CLASSIFICATION	1.4660454015343584E-5	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9997596261856583	WITHOUT_CLASSIFICATION	2.403738143417506E-4	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999990144900969	WITHOUT_CLASSIFICATION	9.855099031427165E-7	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999994992150978	WITHOUT_CLASSIFICATION	5.007849021300487E-7	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999998612793207	WITHOUT_CLASSIFICATION	1.3872067923982964E-7	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.999998173109539	WITHOUT_CLASSIFICATION	1.82689046093724E-6	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9999710443335997	WITHOUT_CLASSIFICATION	2.895566640027027E-5	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9997921523878898	WITHOUT_CLASSIFICATION	2.078476121103027E-4	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999920263194142	WITHOUT_CLASSIFICATION	7.973680585799948E-6	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999911978072	WITHOUT_CLASSIFICATION	8.802192750239124E-9	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999952796402458	WITHOUT_CLASSIFICATION	4.7203597542048075E-6	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999942874089	WITHOUT_CLASSIFICATION	5.712590991898834E-9	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999994487508803	WITHOUT_CLASSIFICATION	5.512491196247002E-7	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.999998417438825	WITHOUT_CLASSIFICATION	1.5825611749186448E-6	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999999780137304	WITHOUT_CLASSIFICATION	2.1986269577330575E-8	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999999990514894	WITHOUT_CLASSIFICATION	9.485106014182591E-10	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999980948103658	WITHOUT_CLASSIFICATION	1.905189634156482E-6	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999989147195559	WITHOUT_CLASSIFICATION	1.0852804441011495E-6	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999986852979567	WITHOUT_CLASSIFICATION	1.3147020432800708E-6	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.999986151420284	WITHOUT_CLASSIFICATION	1.3848579716035176E-5	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9978270669442781	WITHOUT_CLASSIFICATION	0.002172933055721916	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999981600494185	WITHOUT_CLASSIFICATION	1.839950581411597E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999486848845	WITHOUT_CLASSIFICATION	5.131511556003311E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999486848845	WITHOUT_CLASSIFICATION	5.131511556003311E-8	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999904771418319	WITHOUT_CLASSIFICATION	9.52285816807593E-6	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999999453474935	WITHOUT_CLASSIFICATION	5.4652506418792645E-8	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999690490388	WITHOUT_CLASSIFICATION	3.09509611931691E-8	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999988817101241	WITHOUT_CLASSIFICATION	1.1182898759500565E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999984718748717	WITHOUT_CLASSIFICATION	1.5281251282927385E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999984718748717	WITHOUT_CLASSIFICATION	1.5281251282927385E-6	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999998587542801	WITHOUT_CLASSIFICATION	1.4124571985203675E-7	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999999997496022	WITHOUT_CLASSIFICATION	2.5039786918814043E-10	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999999640440629	WITHOUT_CLASSIFICATION	3.595593706070401E-8	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999998697303271	WITHOUT_CLASSIFICATION	1.3026967297365928E-7	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999946413684414	WITHOUT_CLASSIFICATION	5.3586315586837345E-6	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.999999992319559	WITHOUT_CLASSIFICATION	7.68044090373306E-9	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999990595161491	WITHOUT_CLASSIFICATION	9.404838509189719E-7	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999999800176008	WITHOUT_CLASSIFICATION	1.99823992179446E-8	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999917330058603	WITHOUT_CLASSIFICATION	8.266994139677079E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999996646143436	WITHOUT_CLASSIFICATION	3.3538565629316536E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999980072910621	WITHOUT_CLASSIFICATION	1.992708937830954E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999997647103099	WITHOUT_CLASSIFICATION	2.3528969000151333E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999938768204942	WITHOUT_CLASSIFICATION	6.123179505799891E-6	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999908931166803	WITHOUT_CLASSIFICATION	9.106883319751103E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999956638753913	WITHOUT_CLASSIFICATION	4.336124608722729E-6	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.999998269714922	WITHOUT_CLASSIFICATION	1.730285077993679E-6	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999628306715	WITHOUT_CLASSIFICATION	3.716932843863383E-8	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999628306715	WITHOUT_CLASSIFICATION	3.716932843863383E-8	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999978893073116	WITHOUT_CLASSIFICATION	2.1106926883023663E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999978893073116	WITHOUT_CLASSIFICATION	2.1106926883023663E-6	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999999963291625	WITHOUT_CLASSIFICATION	3.67083757450662E-9	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999138231532447	WITHOUT_CLASSIFICATION	8.61768467551952E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9975593804310258	WITHOUT_CLASSIFICATION	0.0024406195689741965	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999999908375363	WITHOUT_CLASSIFICATION	9.162463684306792E-9	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999927973918666	WITHOUT_CLASSIFICATION	7.20260813327412E-6	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999977587920957	WITHOUT_CLASSIFICATION	2.241207904153937E-6	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999999582432741	WITHOUT_CLASSIFICATION	4.175672584586866E-8	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999997647103099	WITHOUT_CLASSIFICATION	2.3528969000151333E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999938768204942	WITHOUT_CLASSIFICATION	6.123179505799891E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999956638753913	WITHOUT_CLASSIFICATION	4.336124608722729E-6	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.999992870167751	WITHOUT_CLASSIFICATION	7.12983224902881E-6	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999913353019457	WITHOUT_CLASSIFICATION	8.664698054234044E-6	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9809014525896543	WITHOUT_CLASSIFICATION	0.019098547410345647	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9999621457143707	WITHOUT_CLASSIFICATION	3.785428562927098E-5	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999900650326417	WITHOUT_CLASSIFICATION	9.934967358287055E-6	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9999417294436516	WITHOUT_CLASSIFICATION	5.827055634841248E-5	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999990813778719	WITHOUT_CLASSIFICATION	9.186221281084565E-7	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.999999636770521	WITHOUT_CLASSIFICATION	3.632294791336904E-7	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999999320795336	WITHOUT_CLASSIFICATION	6.792046641063491E-8	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999998726938345	WITHOUT_CLASSIFICATION	1.2730616559254174E-7	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999862782281373	WITHOUT_CLASSIFICATION	1.3721771862757233E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9997328046111646	WITHOUT_CLASSIFICATION	2.6719538883532393E-4	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999765978093773	WITHOUT_CLASSIFICATION	2.34021906227602E-5	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9987366407443155	WITHOUT_CLASSIFICATION	0.0012633592556845227	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999974824032161	WITHOUT_CLASSIFICATION	2.5175967839436368E-6	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999999415644383	WITHOUT_CLASSIFICATION	5.843556161034625E-8	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.999968811797006	WITHOUT_CLASSIFICATION	3.118820299398032E-5	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999997404674252	WITHOUT_CLASSIFICATION	2.595325746687326E-7	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999999590662226	WITHOUT_CLASSIFICATION	4.0933777324275135E-8	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999994727353544	WITHOUT_CLASSIFICATION	5.272646456811871E-7	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999999373519061	WITHOUT_CLASSIFICATION	6.264809398292129E-8	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999925389770912	WITHOUT_CLASSIFICATION	7.4610229087941865E-6	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999811478635894	WITHOUT_CLASSIFICATION	1.8852136410661275E-5	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999986659732507	WITHOUT_CLASSIFICATION	1.3340267493767116E-6	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.999999504847637	WITHOUT_CLASSIFICATION	4.95152362976032E-7	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999949159837556	WITHOUT_CLASSIFICATION	5.08401624440148E-6	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999414395988208	WITHOUT_CLASSIFICATION	5.856040117919797E-5	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999581149086296	WITHOUT_CLASSIFICATION	4.18850913703708E-5	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999999437137221	WITHOUT_CLASSIFICATION	5.628627784304096E-8	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9997802158963289	WITHOUT_CLASSIFICATION	2.19784103671199E-4	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999931623505907	WITHOUT_CLASSIFICATION	6.837649409396834E-6	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.999973122390707	WITHOUT_CLASSIFICATION	2.6877609292988716E-5	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999958029099026	WITHOUT_CLASSIFICATION	4.197090097341954E-6	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999966123850517	WITHOUT_CLASSIFICATION	3.387614948461646E-6	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9989796988114561	WITHOUT_CLASSIFICATION	0.001020301188543893	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999999617173213	WITHOUT_CLASSIFICATION	3.828267881305985E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999993027639926	WITHOUT_CLASSIFICATION	6.972360073391958E-7	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9999880784524552	WITHOUT_CLASSIFICATION	1.1921547544869056E-5	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999941468333906	WITHOUT_CLASSIFICATION	5.85316660935123E-6	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999969543971218	WITHOUT_CLASSIFICATION	3.0456028782140035E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9998868847934508	WITHOUT_CLASSIFICATION	1.1311520654912392E-4	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999690490388	WITHOUT_CLASSIFICATION	3.09509611931691E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999993027639926	WITHOUT_CLASSIFICATION	6.972360073391958E-7	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999879620994119	WITHOUT_CLASSIFICATION	1.20379005882109E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999250373426449	WITHOUT_CLASSIFICATION	7.4962657355077E-5	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9998423082873533	WITHOUT_CLASSIFICATION	1.576917126467062E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9995671518105377	WITHOUT_CLASSIFICATION	4.3284818946231633E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9995671518105377	WITHOUT_CLASSIFICATION	4.3284818946231633E-4	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.999999997014347	WITHOUT_CLASSIFICATION	2.9856529461834003E-9	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999999763622199	WITHOUT_CLASSIFICATION	2.3637780030809846E-8	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999996179428807	WITHOUT_CLASSIFICATION	3.820571192737661E-7	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999999997141036	WITHOUT_CLASSIFICATION	2.858963804970317E-10	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999476304238066	WITHOUT_CLASSIFICATION	5.23695761933859E-5	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999996810865792	WITHOUT_CLASSIFICATION	3.18913420768372E-7	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999998732831947	WITHOUT_CLASSIFICATION	1.2671680536707127E-7	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999959089276678	WITHOUT_CLASSIFICATION	4.091072332198168E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.999999871566904	WITHOUT_CLASSIFICATION	1.2843309603855443E-7	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.999999871566904	WITHOUT_CLASSIFICATION	1.2843309603855443E-7	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999999556510654	WITHOUT_CLASSIFICATION	4.4348934546090434E-8	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999881998592137	WITHOUT_CLASSIFICATION	1.1800140786176068E-5	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999999851382153	WITHOUT_CLASSIFICATION	1.486178482792801E-8	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999998486827542	WITHOUT_CLASSIFICATION	1.5131724584868206E-7	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.99999911418456	WITHOUT_CLASSIFICATION	8.858154398972162E-7	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999972196980117	WITHOUT_CLASSIFICATION	2.780301988351471E-6	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9967188489443656	WITHOUT_CLASSIFICATION	0.0032811510556343343	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999994060182894	WITHOUT_CLASSIFICATION	5.939817106635529E-7	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999999067783891	WITHOUT_CLASSIFICATION	9.322161087832584E-8	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.999943575027361	WITHOUT_CLASSIFICATION	5.6424972638918076E-5	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999984804515523	WITHOUT_CLASSIFICATION	1.519548447767676E-6	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999968100450892	WITHOUT_CLASSIFICATION	3.189954910814005E-6	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.999999620218586	WITHOUT_CLASSIFICATION	3.7978141397052873E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999993397200073	WITHOUT_CLASSIFICATION	6.602799926822487E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999993397200073	WITHOUT_CLASSIFICATION	6.602799926822487E-7	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999982628594942	WITHOUT_CLASSIFICATION	1.7371405057622548E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999951068639703	WITHOUT_CLASSIFICATION	4.893136029693371E-6	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999960600279699	WITHOUT_CLASSIFICATION	3.93997203006125E-6	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999980976229197	WITHOUT_CLASSIFICATION	1.9023770803601591E-6	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9999990209786691	WITHOUT_CLASSIFICATION	9.790213309281037E-7	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999881998474432	WITHOUT_CLASSIFICATION	1.1800152556644603E-5	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999997737850943	WITHOUT_CLASSIFICATION	2.262149057201294E-7	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999781146380985	WITHOUT_CLASSIFICATION	2.188536190146496E-5	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999978729358482	WITHOUT_CLASSIFICATION	2.127064151734969E-6	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999994838782348	WITHOUT_CLASSIFICATION	5.161217652252464E-7	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999999190936887	WITHOUT_CLASSIFICATION	8.090631122302712E-8	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999988603380747	WITHOUT_CLASSIFICATION	1.1396619252154084E-6	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999859089750897	WITHOUT_CLASSIFICATION	1.4091024910435545E-5	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999996061625285	WITHOUT_CLASSIFICATION	3.9383747154774574E-7	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999991754729207	WITHOUT_CLASSIFICATION	8.245270793907657E-7	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999997974548996	WITHOUT_CLASSIFICATION	2.0254510041161623E-7	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999989562935515	WITHOUT_CLASSIFICATION	1.0437064484489926E-6	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999996361551365	WITHOUT_CLASSIFICATION	3.638448634493766E-7	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999999358787389	WITHOUT_CLASSIFICATION	6.412126109608322E-8	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.999975479441962	WITHOUT_CLASSIFICATION	2.452055803807856E-5	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9999394580271044	WITHOUT_CLASSIFICATION	6.054197289557698E-5	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999989687275332	WITHOUT_CLASSIFICATION	1.0312724668072068E-6	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999979387672276	WITHOUT_CLASSIFICATION	2.06123277226118E-6	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.999828800444529	WITHOUT_CLASSIFICATION	1.7119955547089955E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.7263512133377177	WITHOUT_CLASSIFICATION	0.2736487866622823	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9998730115634821	WITHOUT_CLASSIFICATION	1.2698843651788927E-4	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999999107462577	WITHOUT_CLASSIFICATION	8.925374218548078E-8	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999999594256097	WITHOUT_CLASSIFICATION	4.0574390315061814E-8	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999999894618544	WITHOUT_CLASSIFICATION	1.053814572293389E-8	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9998723645925133	WITHOUT_CLASSIFICATION	1.2763540748674988E-4	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999999340577441	WITHOUT_CLASSIFICATION	6.594225578739378E-8	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999997034080692	WITHOUT_CLASSIFICATION	2.965919308309914E-7	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999996017007591	WITHOUT_CLASSIFICATION	3.982992409176034E-7	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999999978238547	WITHOUT_CLASSIFICATION	2.176145189135695E-9	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999979822248304	WITHOUT_CLASSIFICATION	2.017775169664004E-6	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999999693243306	WITHOUT_CLASSIFICATION	3.067566939873632E-8	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999998652733699	WITHOUT_CLASSIFICATION	1.3472663002436394E-7	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9998128349186783	WITHOUT_CLASSIFICATION	1.8716508132175075E-4	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999881843642496	WITHOUT_CLASSIFICATION	1.1815635750245565E-5	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999639002697255	WITHOUT_CLASSIFICATION	3.609973027446702E-5	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999999803114249	WITHOUT_CLASSIFICATION	1.968857509341633E-8	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9998968663087122	WITHOUT_CLASSIFICATION	1.0313369128776164E-4	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999999788058681	WITHOUT_CLASSIFICATION	2.1194131791087854E-8	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999974707804696	WITHOUT_CLASSIFICATION	2.5292195303163573E-6	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999760001027379	WITHOUT_CLASSIFICATION	2.3999897262164092E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999065923801606	WITHOUT_CLASSIFICATION	9.340761983945892E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999998590578945	WITHOUT_CLASSIFICATION	1.4094210566273706E-7	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999621999351	WITHOUT_CLASSIFICATION	3.7800064835231245E-8	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999808858789	WITHOUT_CLASSIFICATION	1.911412113196684E-8	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998559655708	WITHOUT_CLASSIFICATION	1.4403442914763909E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998559655708	WITHOUT_CLASSIFICATION	1.4403442914763909E-7	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999999349290338	WITHOUT_CLASSIFICATION	6.507096621701514E-8	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9999979050739315	WITHOUT_CLASSIFICATION	2.0949260685411695E-6	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999996016782322	WITHOUT_CLASSIFICATION	3.9832176778926576E-7	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.6332391502899268	WITHOUT_CLASSIFICATION	0.3667608497100731	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999999910254994	WITHOUT_CLASSIFICATION	8.974500614159582E-9	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999999896316598	WITHOUT_CLASSIFICATION	1.0368340203193412E-8	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999788743796152	WITHOUT_CLASSIFICATION	2.1125620384845843E-5	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9999994127925699	WITHOUT_CLASSIFICATION	5.87207430107108E-7	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9994138940635299	WITHOUT_CLASSIFICATION	5.861059364701871E-4	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999999008730797	WITHOUT_CLASSIFICATION	9.912692031389597E-8	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999987370194419	WITHOUT_CLASSIFICATION	1.2629805582356014E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999987370194419	WITHOUT_CLASSIFICATION	1.2629805582356014E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999987370194419	WITHOUT_CLASSIFICATION	1.2629805582356014E-6	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999993334218833	WITHOUT_CLASSIFICATION	6.665781166004276E-7	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999986598467475	WITHOUT_CLASSIFICATION	1.34015325249053E-6	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999990704000986	WITHOUT_CLASSIFICATION	9.295999013908832E-7	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999981254384663	WITHOUT_CLASSIFICATION	1.8745615337015168E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999981254384663	WITHOUT_CLASSIFICATION	1.8745615337015168E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999886242974287	WITHOUT_CLASSIFICATION	1.1375702571200267E-5	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999930294790222	WITHOUT_CLASSIFICATION	6.970520977725446E-6	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999995715804784	WITHOUT_CLASSIFICATION	4.2841952161165803E-7	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999998253987452	WITHOUT_CLASSIFICATION	1.7460125471415106E-7	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999961751418214	WITHOUT_CLASSIFICATION	3.824858178608017E-6	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999951340258871	WITHOUT_CLASSIFICATION	4.865974112913745E-6	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.999999710514737	WITHOUT_CLASSIFICATION	2.8948526303472227E-7	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999716691745744	WITHOUT_CLASSIFICATION	2.8330825425616893E-5	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9987398489573841	WITHOUT_CLASSIFICATION	0.0012601510426159018	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999995533708621	WITHOUT_CLASSIFICATION	4.466291378867103E-7	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999995533708621	WITHOUT_CLASSIFICATION	4.466291378867103E-7	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999992672828716	WITHOUT_CLASSIFICATION	7.327171284340236E-7	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999695288367624	WITHOUT_CLASSIFICATION	3.0471163237597508E-5	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999982342306712	WITHOUT_CLASSIFICATION	1.7657693287973439E-6	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999611443191581	WITHOUT_CLASSIFICATION	3.885568084197826E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999891008201593	WITHOUT_CLASSIFICATION	1.0899179840577272E-5	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999999849164467	WITHOUT_CLASSIFICATION	1.5083553335527533E-8	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999984914934759	WITHOUT_CLASSIFICATION	1.5085065241779512E-6	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999955761308951	WITHOUT_CLASSIFICATION	4.42386910488824E-6	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999926207623242	WITHOUT_CLASSIFICATION	7.3792376757964795E-6	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999922726215191	WITHOUT_CLASSIFICATION	7.727378480888136E-6	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999993274089771	WITHOUT_CLASSIFICATION	6.725910228080642E-7	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999882198191522	WITHOUT_CLASSIFICATION	1.1780180847865135E-5	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.999995890157653	WITHOUT_CLASSIFICATION	4.109842347004278E-6	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999990066862129	WITHOUT_CLASSIFICATION	9.933137871739886E-7	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9999775951739752	WITHOUT_CLASSIFICATION	2.2404826024740163E-5	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.999999301174873	WITHOUT_CLASSIFICATION	6.988251268662514E-7	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999771423001313	WITHOUT_CLASSIFICATION	2.28576998685813E-5	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9999042105760918	WITHOUT_CLASSIFICATION	9.578942390819032E-5	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999957232220316	WITHOUT_CLASSIFICATION	4.276777968450296E-6	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999904548547925	WITHOUT_CLASSIFICATION	9.545145207473152E-6	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9946303971995644	WITHOUT_CLASSIFICATION	0.005369602800435668	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999997360518513	WITHOUT_CLASSIFICATION	2.6394814867533533E-7	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999987807358423	WITHOUT_CLASSIFICATION	1.219264157689507E-6	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999991139765777	WITHOUT_CLASSIFICATION	8.860234222563492E-7	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.999993077628948	WITHOUT_CLASSIFICATION	6.922371052099007E-6	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999940288267007	WITHOUT_CLASSIFICATION	5.97117329923427E-6	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999995001898573	WITHOUT_CLASSIFICATION	4.998101427001397E-7	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9999996664415589	WITHOUT_CLASSIFICATION	3.335584411509193E-7	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.999840092670635	WITHOUT_CLASSIFICATION	1.599073293648823E-4	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999868659336864	WITHOUT_CLASSIFICATION	1.313406631368685E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999565293483771	WITHOUT_CLASSIFICATION	4.347065162291738E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999992671974568	WITHOUT_CLASSIFICATION	7.328025431927087E-7	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999978429815065	WITHOUT_CLASSIFICATION	2.1570184935786577E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999565293483771	WITHOUT_CLASSIFICATION	4.347065162291738E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999941651192803	WITHOUT_CLASSIFICATION	5.834880719658073E-6	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999983890772416	WITHOUT_CLASSIFICATION	1.6109227584726311E-6	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.999998343741189	WITHOUT_CLASSIFICATION	1.6562588110419736E-6	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999996482126061	WITHOUT_CLASSIFICATION	3.5178739388653933E-7	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999984822198769	WITHOUT_CLASSIFICATION	1.5177801230944898E-6	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9995757435697603	WITHOUT_CLASSIFICATION	4.2425643023966044E-4	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999989973591364	WITHOUT_CLASSIFICATION	1.002640863505845E-6	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.999947227357879	WITHOUT_CLASSIFICATION	5.277264212093174E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9998564176695088	WITHOUT_CLASSIFICATION	1.435823304911017E-4	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999484329135843	WITHOUT_CLASSIFICATION	5.156708641566662E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999393204316896	WITHOUT_CLASSIFICATION	6.067956831041751E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9998000473582653	WITHOUT_CLASSIFICATION	1.999526417347291E-4	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9999657372471544	WITHOUT_CLASSIFICATION	3.426275284554345E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9999023850334986	WITHOUT_CLASSIFICATION	9.761496650138347E-5	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.999997854641623	WITHOUT_CLASSIFICATION	2.145358376941608E-6	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999982095287647	WITHOUT_CLASSIFICATION	1.7904712353143153E-6	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.999997919188275	WITHOUT_CLASSIFICATION	2.0808117251047667E-6	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999802585470132	WITHOUT_CLASSIFICATION	1.9741452986827237E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999996510976943	WITHOUT_CLASSIFICATION	3.489023056855463E-7	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999007569713535	WITHOUT_CLASSIFICATION	9.924302864639031E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.999985547700065	WITHOUT_CLASSIFICATION	1.4452299935122725E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999816557639167	WITHOUT_CLASSIFICATION	1.834423608334049E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999384621265764	WITHOUT_CLASSIFICATION	6.153787342357242E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999461271080134	WITHOUT_CLASSIFICATION	5.387289198648187E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.999959548408407	WITHOUT_CLASSIFICATION	4.045159159315461E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.999998274776288	WITHOUT_CLASSIFICATION	1.725223712030184E-6	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9999396587139854	WITHOUT_CLASSIFICATION	6.034128601452708E-5	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999998772496697	WITHOUT_CLASSIFICATION	1.227503303885789E-7	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999999348281526	WITHOUT_CLASSIFICATION	6.517184733967781E-8	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999997865963861	WITHOUT_CLASSIFICATION	2.1340361393480157E-7	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9999963146756342	WITHOUT_CLASSIFICATION	3.685324365814973E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9987904099560309	WITHOUT_CLASSIFICATION	0.0012095900439691187	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.6512473017068162	WITHOUT_CLASSIFICATION	0.34875269829318367	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999621825470446	WITHOUT_CLASSIFICATION	3.7817452955287516E-5	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.999997980672693	WITHOUT_CLASSIFICATION	2.019327306986773E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999994721522419	WITHOUT_CLASSIFICATION	5.278477581707286E-7	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999982715696855	WITHOUT_CLASSIFICATION	1.7284303145922839E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.999983125573962	WITHOUT_CLASSIFICATION	1.687442603809977E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.999999995173091	WITHOUT_CLASSIFICATION	4.8269089566604235E-9	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999993584676452	WITHOUT_CLASSIFICATION	6.41532354769583E-7	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999976357519129	WITHOUT_CLASSIFICATION	2.3642480870625295E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.999998565903701	WITHOUT_CLASSIFICATION	1.4340962991412124E-6	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999994415156663	WITHOUT_CLASSIFICATION	5.584843336791963E-7	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999970096805519	WITHOUT_CLASSIFICATION	2.990319448151459E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999997868884165	WITHOUT_CLASSIFICATION	2.1311158352338516E-7	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999993663700717	WITHOUT_CLASSIFICATION	6.336299283363875E-7	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999990292215496	WITHOUT_CLASSIFICATION	9.70778450345611E-7	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999995583587091	WITHOUT_CLASSIFICATION	4.4164129094310427E-7	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999979139068665	WITHOUT_CLASSIFICATION	2.086093133462999E-6	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999997929463905	WITHOUT_CLASSIFICATION	2.070536095028519E-7	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999984589130329	WITHOUT_CLASSIFICATION	1.5410869671322646E-6	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.999999516399864	WITHOUT_CLASSIFICATION	4.836001359610872E-7	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999947344491119	WITHOUT_CLASSIFICATION	5.265550888074574E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999979139068665	WITHOUT_CLASSIFICATION	2.086093133462999E-6	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9616278858335601	DEFECT	0.03837211416643992	WITHOUT_CLASSIFICATION
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9616278858335601	DEFECT	0.03837211416643992	WITHOUT_CLASSIFICATION
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999999806871839	WITHOUT_CLASSIFICATION	1.931281605120604E-8	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999990527106114	WITHOUT_CLASSIFICATION	9.472893885594044E-7	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999998664566361	WITHOUT_CLASSIFICATION	1.3354336385379755E-7	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999999754122061	WITHOUT_CLASSIFICATION	2.4587794024050804E-8	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.999998755042781	WITHOUT_CLASSIFICATION	1.2449572189620644E-6	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999993366498332	WITHOUT_CLASSIFICATION	6.633501668557636E-7	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999918217222834	WITHOUT_CLASSIFICATION	8.17827771653166E-6	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.802472068813822	WITHOUT_CLASSIFICATION	0.19752793118617806	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999991442921489	WITHOUT_CLASSIFICATION	8.557078510439809E-7	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9999404812852399	WITHOUT_CLASSIFICATION	5.9518714760114446E-5	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999999689626677	WITHOUT_CLASSIFICATION	3.103733219770015E-8	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999995096629347	WITHOUT_CLASSIFICATION	4.903370653728694E-7	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999411568826264	WITHOUT_CLASSIFICATION	5.884311737366011E-5	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999998032471215	WITHOUT_CLASSIFICATION	1.967528786958705E-7	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999928843851796	WITHOUT_CLASSIFICATION	7.115614820307886E-6	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.999996844090537	WITHOUT_CLASSIFICATION	3.155909462915539E-6	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.99999982852526	WITHOUT_CLASSIFICATION	1.7147473996259362E-7	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999809928962803	WITHOUT_CLASSIFICATION	1.900710371965248E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999809928962803	WITHOUT_CLASSIFICATION	1.900710371965248E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999809928962803	WITHOUT_CLASSIFICATION	1.900710371965248E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999809928962803	WITHOUT_CLASSIFICATION	1.900710371965248E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999809928962803	WITHOUT_CLASSIFICATION	1.900710371965248E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999891663386359	WITHOUT_CLASSIFICATION	1.0833661364141876E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999977891244344	WITHOUT_CLASSIFICATION	2.2108755656174977E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998981848387504	WITHOUT_CLASSIFICATION	1.018151612495825E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999950866363538	WITHOUT_CLASSIFICATION	4.913363646124179E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9990534800554731	WITHOUT_CLASSIFICATION	9.46519944526807E-4	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999999717908133	WITHOUT_CLASSIFICATION	2.8209186616074046E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999993951712205	WITHOUT_CLASSIFICATION	6.048287794335904E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999990009190861	WITHOUT_CLASSIFICATION	9.990809138937248E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.999998728350864	WITHOUT_CLASSIFICATION	1.2716491360089446E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999939016284723	WITHOUT_CLASSIFICATION	6.09837152775322E-6	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999903162624032	WITHOUT_CLASSIFICATION	9.683737596769197E-6	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999887666872173	WITHOUT_CLASSIFICATION	1.1233312782691385E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999951667436144	WITHOUT_CLASSIFICATION	4.8332563855052505E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999915073701523	WITHOUT_CLASSIFICATION	8.492629847669535E-6	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.999990687932122	WITHOUT_CLASSIFICATION	9.312067878012496E-6	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999883135798822	WITHOUT_CLASSIFICATION	1.1686420117763989E-5	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999937128407645	WITHOUT_CLASSIFICATION	6.2871592354211805E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999924299681993	WITHOUT_CLASSIFICATION	7.570031800672264E-6	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999908627697409	WITHOUT_CLASSIFICATION	9.137230259113748E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.999991523694977	WITHOUT_CLASSIFICATION	8.476305023012102E-6	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999883793804585	WITHOUT_CLASSIFICATION	1.1620619541472956E-5	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999905381097286	WITHOUT_CLASSIFICATION	9.46189027142871E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999821571281843	WITHOUT_CLASSIFICATION	1.784287181571902E-5	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.999991600142102	WITHOUT_CLASSIFICATION	8.39985789790795E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999877005815488	WITHOUT_CLASSIFICATION	1.2299418451117129E-5	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999902485254202	WITHOUT_CLASSIFICATION	9.75147457971291E-6	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999937716859862	WITHOUT_CLASSIFICATION	6.228314013781578E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999912754441859	WITHOUT_CLASSIFICATION	8.724555814124723E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999865178922693	WITHOUT_CLASSIFICATION	1.3482107730723001E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999862171719498	WITHOUT_CLASSIFICATION	1.3782828050153432E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999837700596541	WITHOUT_CLASSIFICATION	1.622994034586482E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999911630654921	WITHOUT_CLASSIFICATION	8.836934507875217E-6	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.999990039368552	WITHOUT_CLASSIFICATION	9.960631447947717E-6	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.999989211360887	WITHOUT_CLASSIFICATION	1.0788639112858182E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999769168343786	WITHOUT_CLASSIFICATION	2.308316562138215E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999855641966463	WITHOUT_CLASSIFICATION	1.4435803353715361E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999898358921089	WITHOUT_CLASSIFICATION	1.0164107891072512E-5	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999890560952757	WITHOUT_CLASSIFICATION	1.0943904724307593E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.999991306862328	WITHOUT_CLASSIFICATION	8.693137671974298E-6	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999896990405656	WITHOUT_CLASSIFICATION	1.0300959434437579E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999918677078795	WITHOUT_CLASSIFICATION	8.132292120576797E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999897565776827	WITHOUT_CLASSIFICATION	1.0243422317137305E-5	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999841782222589	WITHOUT_CLASSIFICATION	1.5821777741023723E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999909306172781	WITHOUT_CLASSIFICATION	9.069382721925135E-6	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999859708770872	WITHOUT_CLASSIFICATION	1.402912291282755E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999749986448306	WITHOUT_CLASSIFICATION	2.5001355169245614E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999835385903609	WITHOUT_CLASSIFICATION	1.6461409639007167E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999932364823799	WITHOUT_CLASSIFICATION	6.763517620131903E-6	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.999987879813175	WITHOUT_CLASSIFICATION	1.2120186824840609E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999762657469814	WITHOUT_CLASSIFICATION	2.3734253018637953E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998981848387504	WITHOUT_CLASSIFICATION	1.018151612495825E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999861785945082	WITHOUT_CLASSIFICATION	1.3821405491723976E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999851194569692	WITHOUT_CLASSIFICATION	1.4880543030709522E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999829391259417	WITHOUT_CLASSIFICATION	1.7060874058290947E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999815240300429	WITHOUT_CLASSIFICATION	1.8475969957111898E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999859048433726	WITHOUT_CLASSIFICATION	1.4095156627399232E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999857423623083	WITHOUT_CLASSIFICATION	1.4257637691673086E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999826687460851	WITHOUT_CLASSIFICATION	1.7331253914932897E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999846623191243	WITHOUT_CLASSIFICATION	1.533768087567631E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999823156663208	WITHOUT_CLASSIFICATION	1.7684333679233965E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.999982482317057	WITHOUT_CLASSIFICATION	1.751768294304355E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999856196159896	WITHOUT_CLASSIFICATION	1.438038401032621E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999864081481306	WITHOUT_CLASSIFICATION	1.3591851869495223E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999817581138314	WITHOUT_CLASSIFICATION	1.824188616853618E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999811121577279	WITHOUT_CLASSIFICATION	1.888784227214877E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999873609511047	WITHOUT_CLASSIFICATION	1.2639048895155859E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999916670709705	WITHOUT_CLASSIFICATION	8.33292902941683E-6	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999857737434731	WITHOUT_CLASSIFICATION	1.4226256526774495E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999881652285662	WITHOUT_CLASSIFICATION	1.1834771433844434E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.999984233396799	WITHOUT_CLASSIFICATION	1.5766603201003237E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999875829087103	WITHOUT_CLASSIFICATION	1.2417091289788573E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999835029254871	WITHOUT_CLASSIFICATION	1.6497074512953585E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999857850760628	WITHOUT_CLASSIFICATION	1.4214923937230633E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999819702954487	WITHOUT_CLASSIFICATION	1.802970455140436E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999887340267305	WITHOUT_CLASSIFICATION	1.126597326944929E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999872258785352	WITHOUT_CLASSIFICATION	1.2774121464801106E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999878002810061	WITHOUT_CLASSIFICATION	1.219971899387364E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999741123751251	WITHOUT_CLASSIFICATION	2.5887624874883782E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999863695171265	WITHOUT_CLASSIFICATION	1.3630482873490985E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999943507761461	WITHOUT_CLASSIFICATION	5.649223853994879E-6	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999928173530586	WITHOUT_CLASSIFICATION	7.182646941412946E-6	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999868700724529	WITHOUT_CLASSIFICATION	1.3129927547248104E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999845911637442	WITHOUT_CLASSIFICATION	1.5408836255743017E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999872823125527	WITHOUT_CLASSIFICATION	1.2717687447282029E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999873443791062	WITHOUT_CLASSIFICATION	1.2655620893814193E-5	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999880799602752	WITHOUT_CLASSIFICATION	1.1920039724931545E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999928019195629	WITHOUT_CLASSIFICATION	7.198080437127108E-6	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999909218421862	WITHOUT_CLASSIFICATION	9.078157813900547E-6	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999862043156531	WITHOUT_CLASSIFICATION	1.3795684346913752E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999867975512718	WITHOUT_CLASSIFICATION	1.3202448728030441E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.999992563524737	WITHOUT_CLASSIFICATION	7.436475263022647E-6	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999904124534796	WITHOUT_CLASSIFICATION	9.587546520392166E-6	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999903633083456	WITHOUT_CLASSIFICATION	9.636691654388567E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999850593631662	WITHOUT_CLASSIFICATION	1.4940636833952969E-5	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999874591119166	WITHOUT_CLASSIFICATION	1.254088808356899E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999883989235712	WITHOUT_CLASSIFICATION	1.1601076428769673E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.999993491078525	WITHOUT_CLASSIFICATION	6.508921475061936E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999934007836963	WITHOUT_CLASSIFICATION	6.599216303735027E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999898709686702	WITHOUT_CLASSIFICATION	1.012903132968934E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999922097959266	WITHOUT_CLASSIFICATION	7.790204073328602E-6	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999868683461018	WITHOUT_CLASSIFICATION	1.3131653898254254E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999892405242979	WITHOUT_CLASSIFICATION	1.0759475702100603E-5	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999888465270119	WITHOUT_CLASSIFICATION	1.1153472988137783E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999904359613635	WITHOUT_CLASSIFICATION	9.564038636556032E-6	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999946005248281	WITHOUT_CLASSIFICATION	5.399475171847885E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999919571169029	WITHOUT_CLASSIFICATION	8.042883097197311E-6	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999880790983834	WITHOUT_CLASSIFICATION	1.192090161672089E-5	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999938166626019	WITHOUT_CLASSIFICATION	6.183337398201539E-6	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999923704605881	WITHOUT_CLASSIFICATION	7.629539411911132E-6	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999906570639194	WITHOUT_CLASSIFICATION	9.34293608056034E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999912338147243	WITHOUT_CLASSIFICATION	8.766185275729282E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999849190086157	WITHOUT_CLASSIFICATION	1.5080991384105529E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999916279511026	WITHOUT_CLASSIFICATION	8.372048897372995E-6	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999807191131699	WITHOUT_CLASSIFICATION	1.9280886830106463E-5	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999892892548409	WITHOUT_CLASSIFICATION	1.0710745159052385E-5	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999923160552758	WITHOUT_CLASSIFICATION	7.683944724197711E-6	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999915685315385	WITHOUT_CLASSIFICATION	8.43146846156005E-6	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.999994470668898	WITHOUT_CLASSIFICATION	5.5293311020242346E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.999991266171303	WITHOUT_CLASSIFICATION	8.733828697018953E-6	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999913865379613	WITHOUT_CLASSIFICATION	8.613462038684663E-6	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999922035624726	WITHOUT_CLASSIFICATION	7.7964375273533E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999882738144996	WITHOUT_CLASSIFICATION	1.1726185500286189E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999906417277297	WITHOUT_CLASSIFICATION	9.358272270464898E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999924619794107	WITHOUT_CLASSIFICATION	7.538020589231904E-6	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999825760324527	WITHOUT_CLASSIFICATION	1.7423967547373407E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.999989548688983	WITHOUT_CLASSIFICATION	1.0451311016921954E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999871373997244	WITHOUT_CLASSIFICATION	1.28626002755727E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999858050327723	WITHOUT_CLASSIFICATION	1.4194967227511684E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.999985516509552	WITHOUT_CLASSIFICATION	1.448349044790989E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999833803585606	WITHOUT_CLASSIFICATION	1.6619641439345105E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999802604852353	WITHOUT_CLASSIFICATION	1.973951476477661E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999854013065811	WITHOUT_CLASSIFICATION	1.45986934188797E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.999988071199094	WITHOUT_CLASSIFICATION	1.192880090595284E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999879672796486	WITHOUT_CLASSIFICATION	1.2032720351525059E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999880856498858	WITHOUT_CLASSIFICATION	1.191435011416922E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999839212078825	WITHOUT_CLASSIFICATION	1.6078792117471995E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999895878002755	WITHOUT_CLASSIFICATION	1.0412199724522953E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.999986315971561	WITHOUT_CLASSIFICATION	1.3684028439107212E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999881939433002	WITHOUT_CLASSIFICATION	1.1806056699899979E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999793661670038	WITHOUT_CLASSIFICATION	2.063383299619873E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999902802404478	WITHOUT_CLASSIFICATION	9.719759552158346E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999914490795857	WITHOUT_CLASSIFICATION	8.550920414386398E-6	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999890960812018	WITHOUT_CLASSIFICATION	1.090391879826243E-5	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999889946896467	WITHOUT_CLASSIFICATION	1.1005310353256961E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999888110733323	WITHOUT_CLASSIFICATION	1.1188926667694946E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999930422307252	WITHOUT_CLASSIFICATION	6.957769274919809E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999876517435091	WITHOUT_CLASSIFICATION	1.2348256490848513E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999898198630045	WITHOUT_CLASSIFICATION	1.018013699537492E-5	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.999992943496478	WITHOUT_CLASSIFICATION	7.05650352193968E-6	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999908252050379	WITHOUT_CLASSIFICATION	9.174794962180736E-6	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999853219633595	WITHOUT_CLASSIFICATION	1.4678036640388566E-5	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.999988689254142	WITHOUT_CLASSIFICATION	1.1310745857926036E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999867990559517	WITHOUT_CLASSIFICATION	1.320094404823218E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999914095549144	WITHOUT_CLASSIFICATION	8.59044508570984E-6	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.999992198880921	WITHOUT_CLASSIFICATION	7.801119079103164E-6	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999906446778077	WITHOUT_CLASSIFICATION	9.355322192363691E-6	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999958074944854	WITHOUT_CLASSIFICATION	4.19250551459802E-6	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.999993363276306	WITHOUT_CLASSIFICATION	6.636723694149E-6	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999929855703473	WITHOUT_CLASSIFICATION	7.0144296527356885E-6	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999933365474528	WITHOUT_CLASSIFICATION	6.663452547246872E-6	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999880730762802	WITHOUT_CLASSIFICATION	1.1926923719803219E-5	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999927123075344	WITHOUT_CLASSIFICATION	7.287692465608647E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999914363161501	WITHOUT_CLASSIFICATION	8.563683849930343E-6	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.999995417909796	WITHOUT_CLASSIFICATION	4.582090204055911E-6	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999933449007667	WITHOUT_CLASSIFICATION	6.6550992332484205E-6	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999960216732466	WITHOUT_CLASSIFICATION	3.978326753361768E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999954404092032	WITHOUT_CLASSIFICATION	4.559590796765193E-6	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999943291825862	WITHOUT_CLASSIFICATION	5.670817413673457E-6	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999920346952674	WITHOUT_CLASSIFICATION	7.9653047326038E-6	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999940382345027	WITHOUT_CLASSIFICATION	5.961765497323622E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999954478514396	WITHOUT_CLASSIFICATION	4.552148560416598E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999943825909245	WITHOUT_CLASSIFICATION	5.617409075418307E-6	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999912224699028	WITHOUT_CLASSIFICATION	8.777530097247965E-6	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999940234563091	WITHOUT_CLASSIFICATION	5.9765436910151E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999932093636411	WITHOUT_CLASSIFICATION	6.790636358976078E-6	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999931614718203	WITHOUT_CLASSIFICATION	6.838528179737055E-6	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.999990896953748	WITHOUT_CLASSIFICATION	9.103046252122618E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999917990424113	WITHOUT_CLASSIFICATION	8.200957588714086E-6	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.999992666364739	WITHOUT_CLASSIFICATION	7.333635261013719E-6	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999849289826578	WITHOUT_CLASSIFICATION	1.5071017342293737E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999926624740069	WITHOUT_CLASSIFICATION	7.337525993147769E-6	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.999995062330709	WITHOUT_CLASSIFICATION	4.9376692909463005E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999948443979215	WITHOUT_CLASSIFICATION	5.155602078560805E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999905814077429	WITHOUT_CLASSIFICATION	9.418592257062814E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999809228433876	WITHOUT_CLASSIFICATION	1.9077156612387864E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999871786263352	WITHOUT_CLASSIFICATION	1.2821373664769028E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999932228090473	WITHOUT_CLASSIFICATION	6.77719095269435E-6	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999867953072967	WITHOUT_CLASSIFICATION	1.3204692703390461E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999874306417018	WITHOUT_CLASSIFICATION	1.2569358298159515E-5	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999873477927534	WITHOUT_CLASSIFICATION	1.2652207246555295E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.999985773642776	WITHOUT_CLASSIFICATION	1.4226357224038855E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999871962548342	WITHOUT_CLASSIFICATION	1.2803745165818235E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999843111392414	WITHOUT_CLASSIFICATION	1.568886075874435E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999836640261209	WITHOUT_CLASSIFICATION	1.6335973879067957E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999835802895594	WITHOUT_CLASSIFICATION	1.6419710440643228E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999899495455248	WITHOUT_CLASSIFICATION	1.0050454475213758E-5	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999876527226197	WITHOUT_CLASSIFICATION	1.2347277380292457E-5	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999893847623785	WITHOUT_CLASSIFICATION	1.0615237621407486E-5	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.999986019707352	WITHOUT_CLASSIFICATION	1.398029264799773E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999887389653218	WITHOUT_CLASSIFICATION	1.1261034678310038E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.999986457506151	WITHOUT_CLASSIFICATION	1.3542493849014778E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999889931933023	WITHOUT_CLASSIFICATION	1.10068066978323E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999924387645883	WITHOUT_CLASSIFICATION	7.561235411770341E-6	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999882198206743	WITHOUT_CLASSIFICATION	1.1780179325720628E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.999988798700988	WITHOUT_CLASSIFICATION	1.1201299011912806E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999897407501942	WITHOUT_CLASSIFICATION	1.0259249805930237E-5	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999891375260522	WITHOUT_CLASSIFICATION	1.0862473947678103E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999909356582469	WITHOUT_CLASSIFICATION	9.064341753122714E-6	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999799842368579	WITHOUT_CLASSIFICATION	2.001576314216765E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999885391989708	WITHOUT_CLASSIFICATION	1.1460801029137483E-5	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999905898777048	WITHOUT_CLASSIFICATION	9.41012229508536E-6	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999934329311421	WITHOUT_CLASSIFICATION	6.5670688579546605E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999926236271698	WITHOUT_CLASSIFICATION	7.376372830319397E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.999985838616032	WITHOUT_CLASSIFICATION	1.4161383968053508E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999850132795638	WITHOUT_CLASSIFICATION	1.4986720436268053E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999898120469208	WITHOUT_CLASSIFICATION	1.0187953079213606E-5	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999901680413035	WITHOUT_CLASSIFICATION	9.831958696454986E-6	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999897991281779	WITHOUT_CLASSIFICATION	1.0200871822152752E-5	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999883009560947	WITHOUT_CLASSIFICATION	1.1699043905293468E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.999984657968748	WITHOUT_CLASSIFICATION	1.5342031251961153E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999840377714008	WITHOUT_CLASSIFICATION	1.5962228599267727E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999779810352092	WITHOUT_CLASSIFICATION	2.2018964790836494E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999812293162965	WITHOUT_CLASSIFICATION	1.8770683703575524E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999903195657639	WITHOUT_CLASSIFICATION	9.680434235993932E-6	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999901967029928	WITHOUT_CLASSIFICATION	9.803297007094155E-6	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999908208521646	WITHOUT_CLASSIFICATION	9.17914783539746E-6	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999849946036447	WITHOUT_CLASSIFICATION	1.5005396355324537E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999907397999168	WITHOUT_CLASSIFICATION	9.260200083090452E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999867523313013	WITHOUT_CLASSIFICATION	1.3247668698809028E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999783052307977	WITHOUT_CLASSIFICATION	2.1694769202409686E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999936245344001	WITHOUT_CLASSIFICATION	6.3754655999487926E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999891327509652	WITHOUT_CLASSIFICATION	1.0867249034763746E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999886514045975	WITHOUT_CLASSIFICATION	1.1348595402614456E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999892997982953	WITHOUT_CLASSIFICATION	1.0700201704627555E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999901647247065	WITHOUT_CLASSIFICATION	9.835275293539109E-6	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999889296616383	WITHOUT_CLASSIFICATION	1.1070338361623878E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999882949040784	WITHOUT_CLASSIFICATION	1.1705095921633702E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999872755212771	WITHOUT_CLASSIFICATION	1.2724478722948458E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999876789610415	WITHOUT_CLASSIFICATION	1.2321038958577354E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999896977298087	WITHOUT_CLASSIFICATION	1.0302270191372193E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999856527557579	WITHOUT_CLASSIFICATION	1.4347244242040484E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999879800454313	WITHOUT_CLASSIFICATION	1.201995456871554E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.999988721601545	WITHOUT_CLASSIFICATION	1.1278398455023194E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999873879511826	WITHOUT_CLASSIFICATION	1.2612048817365913E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999882711437605	WITHOUT_CLASSIFICATION	1.1728856239338024E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999898518519048	WITHOUT_CLASSIFICATION	1.0148148095192881E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999876029460927	WITHOUT_CLASSIFICATION	1.2397053907388846E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999861092088064	WITHOUT_CLASSIFICATION	1.3890791193689673E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999863009082032	WITHOUT_CLASSIFICATION	1.3699091796801069E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999868079086172	WITHOUT_CLASSIFICATION	1.319209138278741E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999853105475425	WITHOUT_CLASSIFICATION	1.4689452457611651E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999916451390263	WITHOUT_CLASSIFICATION	8.354860973806463E-6	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999908376902872	WITHOUT_CLASSIFICATION	9.16230971280935E-6	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999903074271971	WITHOUT_CLASSIFICATION	9.69257280293008E-6	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999889744181241	WITHOUT_CLASSIFICATION	1.1025581876013186E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999880243150722	WITHOUT_CLASSIFICATION	1.1975684927857767E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999875022897615	WITHOUT_CLASSIFICATION	1.2497710238501906E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999914792685267	WITHOUT_CLASSIFICATION	8.520731473254507E-6	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999826572334256	WITHOUT_CLASSIFICATION	1.7342766574428352E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.999991735524184	WITHOUT_CLASSIFICATION	8.264475815976925E-6	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999916158351595	WITHOUT_CLASSIFICATION	8.38416484046277E-6	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999881551651014	WITHOUT_CLASSIFICATION	1.1844834898661791E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999706416667757	WITHOUT_CLASSIFICATION	2.9358333224212904E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999750165799136	WITHOUT_CLASSIFICATION	2.4983420086341938E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.999945136974714	WITHOUT_CLASSIFICATION	5.486302528605754E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.999986121115089	WITHOUT_CLASSIFICATION	1.3878884910991368E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999732210707096	WITHOUT_CLASSIFICATION	2.6778929290306016E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999764353227362	WITHOUT_CLASSIFICATION	2.3564677263779713E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999827016987034	WITHOUT_CLASSIFICATION	1.7298301296617778E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999701990346059	WITHOUT_CLASSIFICATION	2.980096539405794E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999824676591785	WITHOUT_CLASSIFICATION	1.7532340821480783E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999728267481505	WITHOUT_CLASSIFICATION	2.7173251849557304E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999771876290409	WITHOUT_CLASSIFICATION	2.2812370959198443E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999853695485724	WITHOUT_CLASSIFICATION	1.4630451427680361E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999905797136069	WITHOUT_CLASSIFICATION	9.420286393040865E-6	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.999991511586951	WITHOUT_CLASSIFICATION	8.488413048949782E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999935604593727	WITHOUT_CLASSIFICATION	6.4395406273222325E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999893249902837	WITHOUT_CLASSIFICATION	1.0675009716320771E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.999997837253101	WITHOUT_CLASSIFICATION	2.1627468989197894E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9993206035705551	WITHOUT_CLASSIFICATION	6.793964294449356E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9999391777574143	WITHOUT_CLASSIFICATION	6.0822242585730476E-5	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.999969586999963	WITHOUT_CLASSIFICATION	3.0413000036954796E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9998305871084091	WITHOUT_CLASSIFICATION	1.694128915909462E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9997513371640064	WITHOUT_CLASSIFICATION	2.486628359935565E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999287478409218	WITHOUT_CLASSIFICATION	7.125215907814793E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999008964840347	WITHOUT_CLASSIFICATION	9.910351596527829E-5	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9999994222285168	WITHOUT_CLASSIFICATION	5.777714832932261E-7	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999657904013087	WITHOUT_CLASSIFICATION	3.42095986912309E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9999643467012851	WITHOUT_CLASSIFICATION	3.565329871494304E-5	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999808541594328	WITHOUT_CLASSIFICATION	1.9145840567189543E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999842500142443	WITHOUT_CLASSIFICATION	1.5749985755673917E-5	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9985827842256533	WITHOUT_CLASSIFICATION	0.00141721577434674	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.999997312730062	WITHOUT_CLASSIFICATION	2.6872699379349916E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9990682861109487	WITHOUT_CLASSIFICATION	9.317138890512743E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9997474412990653	WITHOUT_CLASSIFICATION	2.525587009346603E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9995721902748579	WITHOUT_CLASSIFICATION	4.2780972514209337E-4	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999992651038392	WITHOUT_CLASSIFICATION	7.348961606897659E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999947822894	WITHOUT_CLASSIFICATION	5.217710593280647E-9	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998638162195287	WITHOUT_CLASSIFICATION	1.3618378047132373E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999961578620892	WITHOUT_CLASSIFICATION	3.842137910876818E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999995138093605	WITHOUT_CLASSIFICATION	4.861906394949969E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999926431336	WITHOUT_CLASSIFICATION	7.356866442677419E-9	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999926431336	WITHOUT_CLASSIFICATION	7.356866442677419E-9	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9999907363734748	WITHOUT_CLASSIFICATION	9.263626525194153E-6	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.999988079701965	WITHOUT_CLASSIFICATION	1.19202980348766E-5	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9997764419832376	WITHOUT_CLASSIFICATION	2.2355801676242633E-4	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999790859866026	WITHOUT_CLASSIFICATION	2.0914013397489864E-5	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9999163817098496	WITHOUT_CLASSIFICATION	8.361829015039342E-5	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999969710993962	WITHOUT_CLASSIFICATION	3.028900603869723E-6	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9998670205764518	WITHOUT_CLASSIFICATION	1.329794235481334E-4	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999807936680448	WITHOUT_CLASSIFICATION	1.9206331955118076E-5	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.994468929018159	WITHOUT_CLASSIFICATION	0.005531070981840994	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999997482930385	WITHOUT_CLASSIFICATION	2.517069615333302E-7	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.999999689344577	WITHOUT_CLASSIFICATION	3.1065542309255775E-7	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9997506506518582	WITHOUT_CLASSIFICATION	2.493493481418186E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9998157606306174	WITHOUT_CLASSIFICATION	1.8423936938253126E-4	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999974866524252	WITHOUT_CLASSIFICATION	2.513347574849968E-6	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.999999603723369	WITHOUT_CLASSIFICATION	3.962766309812547E-7	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999957640694563	WITHOUT_CLASSIFICATION	4.235930543644331E-6	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999998975272895	WITHOUT_CLASSIFICATION	1.0247271051599782E-7	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.999876591503933	WITHOUT_CLASSIFICATION	1.2340849606694073E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9998718570881829	WITHOUT_CLASSIFICATION	1.2814291181704885E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9998853361066987	WITHOUT_CLASSIFICATION	1.1466389330125242E-4	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999999905217312	WITHOUT_CLASSIFICATION	9.478268905516613E-9	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999979832001294	WITHOUT_CLASSIFICATION	2.016799870591611E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9600427783961007	DEFECT	0.039957221603899314	WITHOUT_CLASSIFICATION
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999995637303309	WITHOUT_CLASSIFICATION	4.3626966911481176E-7	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9600427783961007	DEFECT	0.039957221603899314	WITHOUT_CLASSIFICATION
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9999933299357697	WITHOUT_CLASSIFICATION	6.670064230191757E-6	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999984670048607	WITHOUT_CLASSIFICATION	1.5329951392779928E-6	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.9846295901291328	DEFECT	0.015370409870867194	WITHOUT_CLASSIFICATION
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.999983250348094	WITHOUT_CLASSIFICATION	1.674965190604569E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9997216997436166	WITHOUT_CLASSIFICATION	2.783002563835243E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999992430712328	WITHOUT_CLASSIFICATION	7.569287671979981E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999992430712328	WITHOUT_CLASSIFICATION	7.569287671979981E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999992430712328	WITHOUT_CLASSIFICATION	7.569287671979981E-6	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9999975141875543	WITHOUT_CLASSIFICATION	2.4858124456554867E-6	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999938789534993	WITHOUT_CLASSIFICATION	6.121046500686768E-6	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999999865140365	WITHOUT_CLASSIFICATION	1.348596346831689E-8	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999574046325004	WITHOUT_CLASSIFICATION	4.259536749956374E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999574046325004	WITHOUT_CLASSIFICATION	4.259536749956374E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999574046325004	WITHOUT_CLASSIFICATION	4.259536749956374E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999574046325004	WITHOUT_CLASSIFICATION	4.259536749956374E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999574046325004	WITHOUT_CLASSIFICATION	4.259536749956374E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999574046325004	WITHOUT_CLASSIFICATION	4.259536749956374E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998575425537479	WITHOUT_CLASSIFICATION	1.4245744625213943E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998575425537479	WITHOUT_CLASSIFICATION	1.4245744625213943E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998575425537479	WITHOUT_CLASSIFICATION	1.4245744625213943E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998575425537479	WITHOUT_CLASSIFICATION	1.4245744625213943E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998575425537479	WITHOUT_CLASSIFICATION	1.4245744625213943E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999877502767831	WITHOUT_CLASSIFICATION	1.2249723216885961E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999877502767831	WITHOUT_CLASSIFICATION	1.2249723216885961E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999877502767831	WITHOUT_CLASSIFICATION	1.2249723216885961E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999877502767831	WITHOUT_CLASSIFICATION	1.2249723216885961E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999877502767831	WITHOUT_CLASSIFICATION	1.2249723216885961E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999189027849188	WITHOUT_CLASSIFICATION	8.109721508123861E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999189027849188	WITHOUT_CLASSIFICATION	8.109721508123861E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999189027849188	WITHOUT_CLASSIFICATION	8.109721508123861E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999189027849188	WITHOUT_CLASSIFICATION	8.109721508123861E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999189027849188	WITHOUT_CLASSIFICATION	8.109721508123861E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999189027849188	WITHOUT_CLASSIFICATION	8.109721508123861E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.99988596675981	WITHOUT_CLASSIFICATION	1.1403324019001664E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.99988596675981	WITHOUT_CLASSIFICATION	1.1403324019001664E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.99988596675981	WITHOUT_CLASSIFICATION	1.1403324019001664E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.99988596675981	WITHOUT_CLASSIFICATION	1.1403324019001664E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.99988596675981	WITHOUT_CLASSIFICATION	1.1403324019001664E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998255339788585	WITHOUT_CLASSIFICATION	1.7446602114150523E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998255339788585	WITHOUT_CLASSIFICATION	1.7446602114150523E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998255339788585	WITHOUT_CLASSIFICATION	1.7446602114150523E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998255339788585	WITHOUT_CLASSIFICATION	1.7446602114150523E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998255339788585	WITHOUT_CLASSIFICATION	1.7446602114150523E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998981848387504	WITHOUT_CLASSIFICATION	1.018151612495825E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998981848387504	WITHOUT_CLASSIFICATION	1.018151612495825E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998981848387504	WITHOUT_CLASSIFICATION	1.018151612495825E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998981848387504	WITHOUT_CLASSIFICATION	1.018151612495825E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998981848387504	WITHOUT_CLASSIFICATION	1.018151612495825E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999950866363538	WITHOUT_CLASSIFICATION	4.913363646124179E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999999717908133	WITHOUT_CLASSIFICATION	2.8209186616074046E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999993951712205	WITHOUT_CLASSIFICATION	6.048287794335904E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999990009190861	WITHOUT_CLASSIFICATION	9.990809138937248E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.999998728350864	WITHOUT_CLASSIFICATION	1.2716491360089446E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999919469641558	WITHOUT_CLASSIFICATION	8.053035844061679E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.999991523694977	WITHOUT_CLASSIFICATION	8.476305023012102E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999877005815488	WITHOUT_CLASSIFICATION	1.2299418451117129E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999865178922693	WITHOUT_CLASSIFICATION	1.3482107730723001E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999862171719498	WITHOUT_CLASSIFICATION	1.3782828050153432E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999858951451744	WITHOUT_CLASSIFICATION	1.4104854825548385E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999837700596541	WITHOUT_CLASSIFICATION	1.622994034586482E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999923971308188	WITHOUT_CLASSIFICATION	7.602869181160385E-6	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999906478512043	WITHOUT_CLASSIFICATION	9.352148795772125E-6	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999895730996485	WITHOUT_CLASSIFICATION	1.042690035154788E-5	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999880348700876	WITHOUT_CLASSIFICATION	1.1965129912382208E-5	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999899633831913	WITHOUT_CLASSIFICATION	1.0036616808725601E-5	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999938542504141	WITHOUT_CLASSIFICATION	6.145749585912363E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999927371084931	WITHOUT_CLASSIFICATION	7.262891506880592E-6	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999913571276356	WITHOUT_CLASSIFICATION	8.642872364322655E-6	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999839280750786	WITHOUT_CLASSIFICATION	1.607192492135427E-5	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999860496010818	WITHOUT_CLASSIFICATION	1.3950398918047069E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.999990809257559	WITHOUT_CLASSIFICATION	9.190742441057426E-6	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999871125319871	WITHOUT_CLASSIFICATION	1.2887468012969009E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999906448743022	WITHOUT_CLASSIFICATION	9.355125697799372E-6	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999909445647832	WITHOUT_CLASSIFICATION	9.055435216721234E-6	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999930660117041	WITHOUT_CLASSIFICATION	6.9339882957869305E-6	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999857131572842	WITHOUT_CLASSIFICATION	1.42868427156961E-5	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999910657710191	WITHOUT_CLASSIFICATION	8.934228980810115E-6	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999866046121341	WITHOUT_CLASSIFICATION	1.3395387865857421E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999847664503423	WITHOUT_CLASSIFICATION	1.5233549657636663E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999887062398529	WITHOUT_CLASSIFICATION	1.129376014713826E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999864269809553	WITHOUT_CLASSIFICATION	1.3573019044696747E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999911838164832	WITHOUT_CLASSIFICATION	8.816183516738445E-6	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999882442074658	WITHOUT_CLASSIFICATION	1.1755792534262249E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.999985300909636	WITHOUT_CLASSIFICATION	1.4699090364000494E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999889893742177	WITHOUT_CLASSIFICATION	1.1010625782430401E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999874925024783	WITHOUT_CLASSIFICATION	1.2507497521576387E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999913460172866	WITHOUT_CLASSIFICATION	8.653982713359814E-6	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999931035891126	WITHOUT_CLASSIFICATION	6.896410887307919E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999917470706474	WITHOUT_CLASSIFICATION	8.252929352520093E-6	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999907446133303	WITHOUT_CLASSIFICATION	9.255386669724487E-6	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999901153041464	WITHOUT_CLASSIFICATION	9.884695853582916E-6	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999719880643994	WITHOUT_CLASSIFICATION	2.801193560061105E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.999976427742063	WITHOUT_CLASSIFICATION	2.3572257937020474E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999755634329854	WITHOUT_CLASSIFICATION	2.443656701458632E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999826729670035	WITHOUT_CLASSIFICATION	1.73270329965308E-5	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999854120648828	WITHOUT_CLASSIFICATION	1.458793511714248E-5	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999762557283093	WITHOUT_CLASSIFICATION	2.3744271690698736E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999851194569692	WITHOUT_CLASSIFICATION	1.4880543030709522E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999829391259417	WITHOUT_CLASSIFICATION	1.7060874058290947E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999815240300429	WITHOUT_CLASSIFICATION	1.8475969957111898E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999846623191243	WITHOUT_CLASSIFICATION	1.533768087567631E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999916670709705	WITHOUT_CLASSIFICATION	8.33292902941683E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999741123751251	WITHOUT_CLASSIFICATION	2.5887624874883782E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999884806066515	WITHOUT_CLASSIFICATION	1.1519393348577217E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999863695171265	WITHOUT_CLASSIFICATION	1.3630482873490985E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999850593631662	WITHOUT_CLASSIFICATION	1.4940636833952969E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999883989235712	WITHOUT_CLASSIFICATION	1.1601076428769673E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999894036664965	WITHOUT_CLASSIFICATION	1.0596333503637914E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.999993491078525	WITHOUT_CLASSIFICATION	6.508921475061936E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999934007836963	WITHOUT_CLASSIFICATION	6.599216303735027E-6	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999844334503721	WITHOUT_CLASSIFICATION	1.5566549627882168E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999829429363518	WITHOUT_CLASSIFICATION	1.705706364817374E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999761705143971	WITHOUT_CLASSIFICATION	2.3829485602934195E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999872169135267	WITHOUT_CLASSIFICATION	1.2783086473263311E-5	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999866781950705	WITHOUT_CLASSIFICATION	1.3321804929543302E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.999989062725918	WITHOUT_CLASSIFICATION	1.0937274082037575E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999826325125589	WITHOUT_CLASSIFICATION	1.736748744117985E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999829622228796	WITHOUT_CLASSIFICATION	1.7037777120366538E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999842378113633	WITHOUT_CLASSIFICATION	1.5762188636722913E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999857454118761	WITHOUT_CLASSIFICATION	1.4254588123819228E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999750571261603	WITHOUT_CLASSIFICATION	2.494287383967345E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999844604432985	WITHOUT_CLASSIFICATION	1.553955670143752E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999854398020738	WITHOUT_CLASSIFICATION	1.4560197926270667E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999759903325548	WITHOUT_CLASSIFICATION	2.4009667445241694E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999788718595141	WITHOUT_CLASSIFICATION	2.1128140485954628E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999893347745449	WITHOUT_CLASSIFICATION	1.0665225455178598E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999868403311337	WITHOUT_CLASSIFICATION	1.315966886638154E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999848798211559	WITHOUT_CLASSIFICATION	1.5120178844180523E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999854008542459	WITHOUT_CLASSIFICATION	1.4599145753994203E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999794208540148	WITHOUT_CLASSIFICATION	2.057914598512745E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999888199976336	WITHOUT_CLASSIFICATION	1.1180002366486736E-5	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999879781366029	WITHOUT_CLASSIFICATION	1.2021863397171299E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999880138833737	WITHOUT_CLASSIFICATION	1.1986116626377062E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999792077650748	WITHOUT_CLASSIFICATION	2.0792234925220783E-5	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999883213298737	WITHOUT_CLASSIFICATION	1.1678670126308618E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.999986218437478	WITHOUT_CLASSIFICATION	1.3781562521937294E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999887877841893	WITHOUT_CLASSIFICATION	1.121221581079384E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.999989375222702	WITHOUT_CLASSIFICATION	1.0624777297899484E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999890741470887	WITHOUT_CLASSIFICATION	1.0925852911193887E-5	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999924748514918	WITHOUT_CLASSIFICATION	7.525148508271801E-6	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999870674584781	WITHOUT_CLASSIFICATION	1.2932541521903598E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999919201659542	WITHOUT_CLASSIFICATION	8.079834045774573E-6	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999937921641256	WITHOUT_CLASSIFICATION	6.207835874370422E-6	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999902351032408	WITHOUT_CLASSIFICATION	9.764896759196633E-6	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.999995548485932	WITHOUT_CLASSIFICATION	4.4515140680508375E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.999991422967331	WITHOUT_CLASSIFICATION	8.57703266890246E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999849190086157	WITHOUT_CLASSIFICATION	1.5080991384105529E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999867305837081	WITHOUT_CLASSIFICATION	1.3269416291929494E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999916279511026	WITHOUT_CLASSIFICATION	8.372048897372995E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999882738144996	WITHOUT_CLASSIFICATION	1.1726185500286189E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999924619794107	WITHOUT_CLASSIFICATION	7.538020589231904E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999802604852353	WITHOUT_CLASSIFICATION	1.973951476477661E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999879672796486	WITHOUT_CLASSIFICATION	1.2032720351525059E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999895878002755	WITHOUT_CLASSIFICATION	1.0412199724522953E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999914490795857	WITHOUT_CLASSIFICATION	8.550920414386398E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999876517435091	WITHOUT_CLASSIFICATION	1.2348256490848513E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999916490092913	WITHOUT_CLASSIFICATION	8.350990708694274E-6	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.999988700435847	WITHOUT_CLASSIFICATION	1.1299564152961185E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999869223771203	WITHOUT_CLASSIFICATION	1.3077622879772792E-5	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.999989215019476	WITHOUT_CLASSIFICATION	1.0784980523940149E-5	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999873427354048	WITHOUT_CLASSIFICATION	1.2657264595258267E-5	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999919360239683	WITHOUT_CLASSIFICATION	8.063976031818217E-6	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999879420917017	WITHOUT_CLASSIFICATION	1.2057908298222718E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999922572871549	WITHOUT_CLASSIFICATION	7.742712845161954E-6	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999900176346461	WITHOUT_CLASSIFICATION	9.982365353963966E-6	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999911672612075	WITHOUT_CLASSIFICATION	8.832738792525903E-6	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999899749047526	WITHOUT_CLASSIFICATION	1.0025095247371774E-5	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.999986630860114	WITHOUT_CLASSIFICATION	1.3369139885939976E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999918973238096	WITHOUT_CLASSIFICATION	8.102676190393388E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999929480400216	WITHOUT_CLASSIFICATION	7.051959978383467E-6	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999929790688457	WITHOUT_CLASSIFICATION	7.02093115442693E-6	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999813061601871	WITHOUT_CLASSIFICATION	1.8693839812908172E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999873671226551	WITHOUT_CLASSIFICATION	1.2632877344860179E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.999986216857604	WITHOUT_CLASSIFICATION	1.3783142395940801E-5	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999904369774181	WITHOUT_CLASSIFICATION	9.563022581991063E-6	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999861902703717	WITHOUT_CLASSIFICATION	1.3809729628251927E-5	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999870296370361	WITHOUT_CLASSIFICATION	1.2970362963941261E-5	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999900311015085	WITHOUT_CLASSIFICATION	9.96889849154713E-6	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.999987691000239	WITHOUT_CLASSIFICATION	1.2308999761091766E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999896278938505	WITHOUT_CLASSIFICATION	1.0372106149481037E-5	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999857245421314	WITHOUT_CLASSIFICATION	1.4275457868489893E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999818043904056	WITHOUT_CLASSIFICATION	1.8195609594360675E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999887932852971	WITHOUT_CLASSIFICATION	1.1206714702788353E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999901654022185	WITHOUT_CLASSIFICATION	9.834597781456177E-6	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999894118295101	WITHOUT_CLASSIFICATION	1.0588170489976174E-5	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999938061294279	WITHOUT_CLASSIFICATION	6.193870572062819E-6	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999903392733962	WITHOUT_CLASSIFICATION	9.66072660380096E-6	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999861707483583	WITHOUT_CLASSIFICATION	1.3829251641841365E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999919371192602	WITHOUT_CLASSIFICATION	8.062880739790862E-6	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999902927660447	WITHOUT_CLASSIFICATION	9.707233955340392E-6	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999896029538605	WITHOUT_CLASSIFICATION	1.039704613952235E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999897697332678	WITHOUT_CLASSIFICATION	1.0230266732298773E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.999994098773197	WITHOUT_CLASSIFICATION	5.9012268029984985E-6	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999906548646736	WITHOUT_CLASSIFICATION	9.345135326436075E-6	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999897643219964	WITHOUT_CLASSIFICATION	1.0235678003683552E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999933241254093	WITHOUT_CLASSIFICATION	6.6758745906884144E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999954404092032	WITHOUT_CLASSIFICATION	4.559590796765193E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999925402965941	WITHOUT_CLASSIFICATION	7.459703405809981E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999954478514396	WITHOUT_CLASSIFICATION	4.552148560416598E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999932093636411	WITHOUT_CLASSIFICATION	6.790636358976078E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999917990424113	WITHOUT_CLASSIFICATION	8.200957588714086E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999809228433876	WITHOUT_CLASSIFICATION	1.9077156612387864E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999871786263352	WITHOUT_CLASSIFICATION	1.2821373664769028E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999871962548342	WITHOUT_CLASSIFICATION	1.2803745165818235E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999843111392414	WITHOUT_CLASSIFICATION	1.568886075874435E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999856629110766	WITHOUT_CLASSIFICATION	1.4337088923409941E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999944905661109	WITHOUT_CLASSIFICATION	5.509433889022627E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999918653407824	WITHOUT_CLASSIFICATION	8.134659217548998E-6	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999929202043708	WITHOUT_CLASSIFICATION	7.0797956292361304E-6	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999937951468277	WITHOUT_CLASSIFICATION	6.204853172252552E-6	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999838325811335	WITHOUT_CLASSIFICATION	1.6167418866452973E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999935184733244	WITHOUT_CLASSIFICATION	6.481526675561254E-6	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999940780019823	WITHOUT_CLASSIFICATION	5.9219980177841375E-6	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999953704737656	WITHOUT_CLASSIFICATION	4.629526234274542E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999922808674001	WITHOUT_CLASSIFICATION	7.719132599986843E-6	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999912589018087	WITHOUT_CLASSIFICATION	8.741098191332015E-6	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.999994699573954	WITHOUT_CLASSIFICATION	5.300426045916115E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.999992772478639	WITHOUT_CLASSIFICATION	7.227521360990052E-6	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999922144713131	WITHOUT_CLASSIFICATION	7.785528686860898E-6	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.999991985047443	WITHOUT_CLASSIFICATION	8.014952556927416E-6	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999885475967479	WITHOUT_CLASSIFICATION	1.1452403252114072E-5	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999912510488685	WITHOUT_CLASSIFICATION	8.748951131450397E-6	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999913452391038	WITHOUT_CLASSIFICATION	8.65476089615706E-6	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999917966773106	WITHOUT_CLASSIFICATION	8.203322689321584E-6	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999942873237344	WITHOUT_CLASSIFICATION	5.712676265538595E-6	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999924850130103	WITHOUT_CLASSIFICATION	7.514986989609312E-6	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.999988401430571	WITHOUT_CLASSIFICATION	1.1598569428908336E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.999985168418737	WITHOUT_CLASSIFICATION	1.4831581263137533E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999890383011287	WITHOUT_CLASSIFICATION	1.0961698871152981E-5	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999865021212473	WITHOUT_CLASSIFICATION	1.3497878752830603E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999874836388224	WITHOUT_CLASSIFICATION	1.2516361177479907E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999790034806691	WITHOUT_CLASSIFICATION	2.0996519330912462E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999811004972836	WITHOUT_CLASSIFICATION	1.8899502716340544E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999833476123952	WITHOUT_CLASSIFICATION	1.6652387604848228E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999889604923702	WITHOUT_CLASSIFICATION	1.1039507629884338E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999869058539133	WITHOUT_CLASSIFICATION	1.3094146086803745E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999874029456863	WITHOUT_CLASSIFICATION	1.2597054313594466E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999869282838244	WITHOUT_CLASSIFICATION	1.307171617551378E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999873841296194	WITHOUT_CLASSIFICATION	1.2615870380620704E-5	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999882866832404	WITHOUT_CLASSIFICATION	1.1713316759639797E-5	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999869611432826	WITHOUT_CLASSIFICATION	1.3038856717479828E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999825436383901	WITHOUT_CLASSIFICATION	1.745636160996733E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999890075040119	WITHOUT_CLASSIFICATION	1.0992495988073538E-5	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999873603144305	WITHOUT_CLASSIFICATION	1.2639685569665836E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999909356582469	WITHOUT_CLASSIFICATION	9.064341753122714E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999926236271698	WITHOUT_CLASSIFICATION	7.376372830319397E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.999985838616032	WITHOUT_CLASSIFICATION	1.4161383968053508E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999896451405536	WITHOUT_CLASSIFICATION	1.0354859446398873E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999779810352092	WITHOUT_CLASSIFICATION	2.2018964790836494E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999903195657639	WITHOUT_CLASSIFICATION	9.680434235993932E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999867523313013	WITHOUT_CLASSIFICATION	1.3247668698809028E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999783052307977	WITHOUT_CLASSIFICATION	2.1694769202409686E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999873879511826	WITHOUT_CLASSIFICATION	1.2612048817365913E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999882711437605	WITHOUT_CLASSIFICATION	1.1728856239338024E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999900700812546	WITHOUT_CLASSIFICATION	9.929918745423888E-6	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999945167038152	WITHOUT_CLASSIFICATION	5.483296184876133E-6	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999894355292915	WITHOUT_CLASSIFICATION	1.0564470708471786E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.999989930062097	WITHOUT_CLASSIFICATION	1.006993790299916E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999868454673468	WITHOUT_CLASSIFICATION	1.3154532653202656E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999891429069557	WITHOUT_CLASSIFICATION	1.0857093044178935E-5	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999925948704188	WITHOUT_CLASSIFICATION	7.405129581212756E-6	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.999984149111474	WITHOUT_CLASSIFICATION	1.5850888526034536E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999862414606356	WITHOUT_CLASSIFICATION	1.375853936437422E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999872897732593	WITHOUT_CLASSIFICATION	1.271022674069118E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999872739758631	WITHOUT_CLASSIFICATION	1.2726024136792349E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999905784006987	WITHOUT_CLASSIFICATION	9.421599301273368E-6	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.999989297551502	WITHOUT_CLASSIFICATION	1.0702448497958316E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999918143329932	WITHOUT_CLASSIFICATION	8.18566700676617E-6	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999918641482377	WITHOUT_CLASSIFICATION	8.135851762234633E-6	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999928301377295	WITHOUT_CLASSIFICATION	7.1698622704373116E-6	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999916813248464	WITHOUT_CLASSIFICATION	8.318675153597248E-6	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.999989718488236	WITHOUT_CLASSIFICATION	1.0281511763978556E-5	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999843705572388	WITHOUT_CLASSIFICATION	1.562944276121506E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999856750512294	WITHOUT_CLASSIFICATION	1.432494877069985E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999867821414787	WITHOUT_CLASSIFICATION	1.321785852126189E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999861605450682	WITHOUT_CLASSIFICATION	1.3839454931890146E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999916998929684	WITHOUT_CLASSIFICATION	8.300107031459715E-6	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999900516058	WITHOUT_CLASSIFICATION	9.948394199924673E-6	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999874345846428	WITHOUT_CLASSIFICATION	1.2565415357291597E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999818816936473	WITHOUT_CLASSIFICATION	1.8118306352643718E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999840581145435	WITHOUT_CLASSIFICATION	1.5941885456553763E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999852714506666	WITHOUT_CLASSIFICATION	1.4728549333472088E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999886902869296	WITHOUT_CLASSIFICATION	1.130971307027725E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.999989605252169	WITHOUT_CLASSIFICATION	1.0394747830977476E-5	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999834310475255	WITHOUT_CLASSIFICATION	1.6568952474377667E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999882096216449	WITHOUT_CLASSIFICATION	1.179037835517164E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999885751967755	WITHOUT_CLASSIFICATION	1.1424803224469333E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999822485994462	WITHOUT_CLASSIFICATION	1.775140055381762E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.999989905192519	WITHOUT_CLASSIFICATION	1.0094807481055604E-5	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.999978229537008	WITHOUT_CLASSIFICATION	2.1770462992061017E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999883720506155	WITHOUT_CLASSIFICATION	1.1627949384389335E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.999985835289116	WITHOUT_CLASSIFICATION	1.4164710884045742E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999886341251348	WITHOUT_CLASSIFICATION	1.1365874865280246E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999862646568388	WITHOUT_CLASSIFICATION	1.3735343161245239E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999868079086172	WITHOUT_CLASSIFICATION	1.319209138278741E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999853105475425	WITHOUT_CLASSIFICATION	1.4689452457611651E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999706416667757	WITHOUT_CLASSIFICATION	2.9358333224212904E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999864375507551	WITHOUT_CLASSIFICATION	1.3562449244898887E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.999945136974714	WITHOUT_CLASSIFICATION	5.486302528605754E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999732210707096	WITHOUT_CLASSIFICATION	2.6778929290306016E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999827016987034	WITHOUT_CLASSIFICATION	1.7298301296617778E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999935604593727	WITHOUT_CLASSIFICATION	6.4395406273222325E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999893249902837	WITHOUT_CLASSIFICATION	1.0675009716320771E-5	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999915121332307	WITHOUT_CLASSIFICATION	8.487866769202846E-6	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999942721748486	WITHOUT_CLASSIFICATION	5.727825151446483E-6	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999863594675577	WITHOUT_CLASSIFICATION	1.364053244245807E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999758813870007	WITHOUT_CLASSIFICATION	2.4118612999307173E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999913451991272	WITHOUT_CLASSIFICATION	8.654800872763124E-6	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999898263529753	WITHOUT_CLASSIFICATION	1.0173647024716398E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.999990107611748	WITHOUT_CLASSIFICATION	9.892388251930027E-6	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999895785335149	WITHOUT_CLASSIFICATION	1.0421466485059679E-5	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.999986333461416	WITHOUT_CLASSIFICATION	1.3666538583981257E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999924697258186	WITHOUT_CLASSIFICATION	7.530274181477698E-6	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999902915225946	WITHOUT_CLASSIFICATION	9.70847740546426E-6	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999919702379056	WITHOUT_CLASSIFICATION	8.029762094375767E-6	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999664446065993	WITHOUT_CLASSIFICATION	3.3555393400667924E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999923042664287	WITHOUT_CLASSIFICATION	7.695733571283753E-6	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999863485131637	WITHOUT_CLASSIFICATION	1.3651486836154896E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999745117476623	WITHOUT_CLASSIFICATION	2.548825233769196E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999861935296345	WITHOUT_CLASSIFICATION	1.3806470365467205E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999834488201822	WITHOUT_CLASSIFICATION	1.6551179817780587E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999869042762637	WITHOUT_CLASSIFICATION	1.3095723736231765E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999812693609964	WITHOUT_CLASSIFICATION	1.873063900351656E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999705968978027	WITHOUT_CLASSIFICATION	2.940310219733785E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999697087036218	WITHOUT_CLASSIFICATION	3.0291296378239105E-5	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999846904113953	WITHOUT_CLASSIFICATION	1.5309588604797012E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999857766646629	WITHOUT_CLASSIFICATION	1.4223335337064814E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.999985097022383	WITHOUT_CLASSIFICATION	1.4902977616875139E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999788938252071	WITHOUT_CLASSIFICATION	2.1106174792956335E-5	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999807217672793	WITHOUT_CLASSIFICATION	1.927823272074542E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999881580809864	WITHOUT_CLASSIFICATION	1.1841919013489436E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999864327996781	WITHOUT_CLASSIFICATION	1.3567200321916584E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999859539684411	WITHOUT_CLASSIFICATION	1.4046031558847545E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999912522040001	WITHOUT_CLASSIFICATION	8.747795999875495E-6	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999873317702908	WITHOUT_CLASSIFICATION	1.2668229709383388E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999896202337197	WITHOUT_CLASSIFICATION	1.037976628016186E-5	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999892401407239	WITHOUT_CLASSIFICATION	1.0759859276052548E-5	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999895683889072	WITHOUT_CLASSIFICATION	1.0431611092931224E-5	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999811015332483	WITHOUT_CLASSIFICATION	1.8898466751804224E-5	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999905122172288	WITHOUT_CLASSIFICATION	9.487782771160959E-6	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999927404456402	WITHOUT_CLASSIFICATION	7.259554359728793E-6	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999916056258384	WITHOUT_CLASSIFICATION	8.394374161649322E-6	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999287478409218	WITHOUT_CLASSIFICATION	7.125215907814793E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999008964840347	WITHOUT_CLASSIFICATION	9.910351596527829E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999842500142443	WITHOUT_CLASSIFICATION	1.5749985755673917E-5	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.999997312730062	WITHOUT_CLASSIFICATION	2.6872699379349916E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9990682861109487	WITHOUT_CLASSIFICATION	9.317138890512743E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9997474412990653	WITHOUT_CLASSIFICATION	2.525587009346603E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9995721902748579	WITHOUT_CLASSIFICATION	4.2780972514209337E-4	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999630448022889	WITHOUT_CLASSIFICATION	3.695519771110469E-5	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999882786231145	WITHOUT_CLASSIFICATION	1.1721376885411204E-5	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999904120529273	WITHOUT_CLASSIFICATION	9.587947072652508E-6	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999852353543094	WITHOUT_CLASSIFICATION	1.4764645690610874E-5	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999929641045423	WITHOUT_CLASSIFICATION	7.0358954576449925E-6	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999921896041354	WITHOUT_CLASSIFICATION	7.810395864680586E-6	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999936532205713	WITHOUT_CLASSIFICATION	6.346779428746959E-6	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999833400814424	WITHOUT_CLASSIFICATION	1.665991855754847E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999844471663005	WITHOUT_CLASSIFICATION	1.5552833699466995E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999937619470198	WITHOUT_CLASSIFICATION	6.238052980102776E-6	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999922112025862	WITHOUT_CLASSIFICATION	7.788797413727774E-6	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999830088993977	WITHOUT_CLASSIFICATION	1.6991100602305065E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999897398363685	WITHOUT_CLASSIFICATION	1.0260163631518312E-5	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999784156191841	WITHOUT_CLASSIFICATION	2.15843808159044E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999885016136992	WITHOUT_CLASSIFICATION	1.1498386300779024E-5	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999904878349059	WITHOUT_CLASSIFICATION	9.512165094142338E-6	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999877363579697	WITHOUT_CLASSIFICATION	1.2263642030274581E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999893361621531	WITHOUT_CLASSIFICATION	1.0663837846822838E-5	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999813167188053	WITHOUT_CLASSIFICATION	1.8683281194689828E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999855871139086	WITHOUT_CLASSIFICATION	1.4412886091269925E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999864383286415	WITHOUT_CLASSIFICATION	1.3561671358566699E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999632662813877	WITHOUT_CLASSIFICATION	3.673371861225456E-5	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999451900603622	WITHOUT_CLASSIFICATION	5.4809939637654485E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999927748676991	WITHOUT_CLASSIFICATION	7.225132300927682E-6	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999996764324621	WITHOUT_CLASSIFICATION	3.235675379018938E-7	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999954820903116	WITHOUT_CLASSIFICATION	4.517909688261889E-6	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9999117109801297	WITHOUT_CLASSIFICATION	8.828901987038833E-5	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999997801132366	WITHOUT_CLASSIFICATION	2.1988676335921847E-7	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999995127299262	WITHOUT_CLASSIFICATION	4.87270073715278E-7	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9999710428286029	WITHOUT_CLASSIFICATION	2.8957171396969755E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999947822894	WITHOUT_CLASSIFICATION	5.217710593280647E-9	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998638162195287	WITHOUT_CLASSIFICATION	1.3618378047132373E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999926431336	WITHOUT_CLASSIFICATION	7.356866442677419E-9	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999926431336	WITHOUT_CLASSIFICATION	7.356866442677419E-9	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9909551686883934	WITHOUT_CLASSIFICATION	0.009044831311606544	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.99998039018329	WITHOUT_CLASSIFICATION	1.9609816710118657E-5	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999979135216823	WITHOUT_CLASSIFICATION	2.0864783176931777E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999943582585544	WITHOUT_CLASSIFICATION	5.641741445516715E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999959254218084	WITHOUT_CLASSIFICATION	4.074578191594223E-6	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999998265280171	WITHOUT_CLASSIFICATION	1.734719829032006E-7	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.999999132828622	WITHOUT_CLASSIFICATION	8.671713779773847E-7	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999992598996266	WITHOUT_CLASSIFICATION	7.401003733053175E-7	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999999644143197	WITHOUT_CLASSIFICATION	3.558568038295611E-8	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999999697596076	WITHOUT_CLASSIFICATION	3.024039234970695E-8	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9999986296070821	WITHOUT_CLASSIFICATION	1.3703929179915597E-6	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999999277474123	WITHOUT_CLASSIFICATION	7.225258775723752E-8	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999999360622253	WITHOUT_CLASSIFICATION	6.393777480449882E-8	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.999999991674071	WITHOUT_CLASSIFICATION	8.325928811294617E-9	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999994981935365	WITHOUT_CLASSIFICATION	5.018064635313496E-7	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999994981935365	WITHOUT_CLASSIFICATION	5.018064635313496E-7	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999985079646639	WITHOUT_CLASSIFICATION	1.4920353360522784E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999997667427556	WITHOUT_CLASSIFICATION	2.3325724425600104E-7	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.999999997359971	WITHOUT_CLASSIFICATION	2.640029031301595E-9	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999991575954689	WITHOUT_CLASSIFICATION	8.424045312316542E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999803667542652	WITHOUT_CLASSIFICATION	1.963324573483426E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999338371814	WITHOUT_CLASSIFICATION	6.616281848011356E-8	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999995546160205	WITHOUT_CLASSIFICATION	4.453839795766857E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999338371814	WITHOUT_CLASSIFICATION	6.616281848011356E-8	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999958782473566	WITHOUT_CLASSIFICATION	4.1217526434411715E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9997550395857401	WITHOUT_CLASSIFICATION	2.4496041425987186E-4	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9847954497181219	WITHOUT_CLASSIFICATION	0.015204550281878086	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9969601606666094	WITHOUT_CLASSIFICATION	0.003039839333390532	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.999986743768864	WITHOUT_CLASSIFICATION	1.3256231136106245E-5	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999981454964246	WITHOUT_CLASSIFICATION	1.854503575367617E-6	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999999961074195	WITHOUT_CLASSIFICATION	3.892580503974685E-9	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999843399970445	WITHOUT_CLASSIFICATION	1.5660002955534274E-5	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999961133487696	WITHOUT_CLASSIFICATION	3.886651230351929E-6	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.9499746589445807	WITHOUT_CLASSIFICATION	0.0500253410554193	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999997574816427	WITHOUT_CLASSIFICATION	2.425183572710646E-7	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999942071403484	WITHOUT_CLASSIFICATION	5.79285965160539E-6	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999587354755465	WITHOUT_CLASSIFICATION	4.1264524453457554E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999426236037902	WITHOUT_CLASSIFICATION	5.737639620978256E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999999903776633	WITHOUT_CLASSIFICATION	9.622336670479257E-9	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999999903776633	WITHOUT_CLASSIFICATION	9.622336670479257E-9	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999987186867977	WITHOUT_CLASSIFICATION	1.281313202376281E-6	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999998991964394	WITHOUT_CLASSIFICATION	1.0080356057083956E-7	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999997971705455	WITHOUT_CLASSIFICATION	2.0282945439052428E-7	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9999463151550307	WITHOUT_CLASSIFICATION	5.368484496932358E-5	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999994597257739	WITHOUT_CLASSIFICATION	5.402742262170201E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999338371814	WITHOUT_CLASSIFICATION	6.616281848011356E-8	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999959200730545	WITHOUT_CLASSIFICATION	4.079926945539061E-6	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999999063978309	WITHOUT_CLASSIFICATION	9.360216908658582E-8	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.999997977835527	WITHOUT_CLASSIFICATION	2.0221644729891856E-6	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999960359540936	WITHOUT_CLASSIFICATION	3.964045906400949E-6	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999999959216419	WITHOUT_CLASSIFICATION	4.07835816052748E-9	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999999569744449	WITHOUT_CLASSIFICATION	4.302555514694626E-8	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.999999552948968	WITHOUT_CLASSIFICATION	4.470510318546089E-7	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.999996700168005	WITHOUT_CLASSIFICATION	3.2998319950372507E-6	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999999930694369	WITHOUT_CLASSIFICATION	6.930563060940373E-9	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999999890465121	WITHOUT_CLASSIFICATION	1.0953487985793448E-8	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999999985120186	WITHOUT_CLASSIFICATION	1.4879814418171089E-9	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999999977828813	WITHOUT_CLASSIFICATION	2.2171186034394698E-9	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9998907922236444	WITHOUT_CLASSIFICATION	1.0920777635561627E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999214294162	WITHOUT_CLASSIFICATION	7.85705838067107E-8	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9999584158544643	WITHOUT_CLASSIFICATION	4.158414553564397E-5	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.999999472718248	WITHOUT_CLASSIFICATION	5.272817521072893E-7	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999994473601465	WITHOUT_CLASSIFICATION	5.526398535153479E-7	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9999885609179238	WITHOUT_CLASSIFICATION	1.1439082076113646E-5	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.99999921946872	WITHOUT_CLASSIFICATION	7.805312800105534E-7	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999997951529251	WITHOUT_CLASSIFICATION	2.0484707476391727E-7	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999999782729291	WITHOUT_CLASSIFICATION	2.1727070986891073E-8	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9988109287951821	WITHOUT_CLASSIFICATION	0.0011890712048178535	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999999996585262	WITHOUT_CLASSIFICATION	3.41473854779566E-10	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999998832569349	WITHOUT_CLASSIFICATION	1.1674306509899312E-7	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999985784112279	WITHOUT_CLASSIFICATION	1.4215887721140185E-6	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999999849007478	WITHOUT_CLASSIFICATION	1.5099252219638038E-8	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999999402871382	WITHOUT_CLASSIFICATION	5.971286179244274E-8	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.999987236175754	WITHOUT_CLASSIFICATION	1.2763824246088613E-5	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9999598575204379	WITHOUT_CLASSIFICATION	4.0142479562082146E-5	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999998950400489	WITHOUT_CLASSIFICATION	1.0495995108008321E-7	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999750097200428	WITHOUT_CLASSIFICATION	2.499027995716558E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.999999850537873	WITHOUT_CLASSIFICATION	1.49462127022889E-7	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999999964356278	WITHOUT_CLASSIFICATION	3.5643722827245915E-9	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9989273403578599	WITHOUT_CLASSIFICATION	0.0010726596421401686	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.999996639532043	WITHOUT_CLASSIFICATION	3.360467957028483E-6	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999995422860063	WITHOUT_CLASSIFICATION	4.5771399369285116E-7	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999922319946942	WITHOUT_CLASSIFICATION	7.768005305892032E-6	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999999041389362	WITHOUT_CLASSIFICATION	9.58610637413744E-8	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.999999971508837	WITHOUT_CLASSIFICATION	2.8491163049953188E-8	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999999963129661	WITHOUT_CLASSIFICATION	3.687033819266823E-9	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999630448022889	WITHOUT_CLASSIFICATION	3.695519771110469E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.999999516614529	WITHOUT_CLASSIFICATION	4.83385470954671E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999995430181585	WITHOUT_CLASSIFICATION	4.569818414545957E-7	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999065923801606	WITHOUT_CLASSIFICATION	9.340761983945892E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999998590578945	WITHOUT_CLASSIFICATION	1.4094210566273706E-7	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9997550395857401	WITHOUT_CLASSIFICATION	2.4496041425987186E-4	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999940450282125	WITHOUT_CLASSIFICATION	5.954971787394917E-6	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999996207549942	WITHOUT_CLASSIFICATION	3.792450058739796E-7	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9999650472270472	WITHOUT_CLASSIFICATION	3.4952772952838325E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998201921552	WITHOUT_CLASSIFICATION	1.7980784480116787E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998201921552	WITHOUT_CLASSIFICATION	1.7980784480116787E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999916405188545	WITHOUT_CLASSIFICATION	8.359481145624333E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999916405188545	WITHOUT_CLASSIFICATION	8.359481145624333E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999916405188545	WITHOUT_CLASSIFICATION	8.359481145624333E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999983231287142	WITHOUT_CLASSIFICATION	1.6768712857885323E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999983231287142	WITHOUT_CLASSIFICATION	1.6768712857885323E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.999988964530192	WITHOUT_CLASSIFICATION	1.1035469808042035E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.999988964530192	WITHOUT_CLASSIFICATION	1.1035469808042035E-5	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999979739806785	WITHOUT_CLASSIFICATION	2.0260193214810735E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9999835225707531	WITHOUT_CLASSIFICATION	1.6477429246872823E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999996469193169	WITHOUT_CLASSIFICATION	3.5308068305535485E-7	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999996469193169	WITHOUT_CLASSIFICATION	3.5308068305535485E-7	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999996609502987	WITHOUT_CLASSIFICATION	3.390497013282496E-7	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999994994080905	WITHOUT_CLASSIFICATION	5.005919094382124E-7	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9999094096492148	WITHOUT_CLASSIFICATION	9.059035078512367E-5	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999999674312324	WITHOUT_CLASSIFICATION	3.256876759157427E-8	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999866374050613	WITHOUT_CLASSIFICATION	1.3362594938647143E-5	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999998816440864	WITHOUT_CLASSIFICATION	1.1835591356828849E-7	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999999222161947	WITHOUT_CLASSIFICATION	7.77838052706852E-8	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.999983694721676	WITHOUT_CLASSIFICATION	1.630527832403979E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999937782910638	WITHOUT_CLASSIFICATION	6.221708936135112E-6	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999919096369569	WITHOUT_CLASSIFICATION	8.090363043062283E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999999539200838	WITHOUT_CLASSIFICATION	4.6079916192966254E-8	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999992039954785	WITHOUT_CLASSIFICATION	7.960045214677626E-7	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.999938251540339	WITHOUT_CLASSIFICATION	6.174845966106169E-5	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999930315892656	WITHOUT_CLASSIFICATION	6.968410734373655E-6	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999994533275121	WITHOUT_CLASSIFICATION	5.466724878618454E-7	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999897470595357	WITHOUT_CLASSIFICATION	1.0252940464187339E-5	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999805265681928	WITHOUT_CLASSIFICATION	1.947343180714991E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999871371399887	WITHOUT_CLASSIFICATION	1.286286001128099E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999879461156443	WITHOUT_CLASSIFICATION	1.2053884355670735E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999682794963046	WITHOUT_CLASSIFICATION	3.1720503695417096E-5	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999931438933084	WITHOUT_CLASSIFICATION	6.8561066916729E-6	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999814344234642	WITHOUT_CLASSIFICATION	1.8565576535723204E-5	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999932681960534	WITHOUT_CLASSIFICATION	6.731803946550174E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999924340228742	WITHOUT_CLASSIFICATION	7.565977125730054E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999997751543661	WITHOUT_CLASSIFICATION	2.2484563390353016E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999946688262822	WITHOUT_CLASSIFICATION	5.331173717817234E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999743419620777	WITHOUT_CLASSIFICATION	2.5658037922323024E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999844648680282	WITHOUT_CLASSIFICATION	1.553513197193346E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999946315593168	WITHOUT_CLASSIFICATION	5.368440683193464E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999984046097891	WITHOUT_CLASSIFICATION	1.595390210846012E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999962172670069	WITHOUT_CLASSIFICATION	3.7827329930981694E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977444652355	WITHOUT_CLASSIFICATION	2.2555347645029277E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999329702902	WITHOUT_CLASSIFICATION	6.702970979996515E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993402900352	WITHOUT_CLASSIFICATION	6.597099648089641E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999329702902	WITHOUT_CLASSIFICATION	6.702970979996515E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999329702902	WITHOUT_CLASSIFICATION	6.702970979996515E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999329702902	WITHOUT_CLASSIFICATION	6.702970979996515E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999329702902	WITHOUT_CLASSIFICATION	6.702970979996515E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999329702902	WITHOUT_CLASSIFICATION	6.702970979996515E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999329702902	WITHOUT_CLASSIFICATION	6.702970979996515E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993402900352	WITHOUT_CLASSIFICATION	6.597099648089641E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993402900352	WITHOUT_CLASSIFICATION	6.597099648089641E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993402900352	WITHOUT_CLASSIFICATION	6.597099648089641E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993402900352	WITHOUT_CLASSIFICATION	6.597099648089641E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993402900352	WITHOUT_CLASSIFICATION	6.597099648089641E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993402900352	WITHOUT_CLASSIFICATION	6.597099648089641E-7	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9978231114495586	WITHOUT_CLASSIFICATION	0.0021768885504414776	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9997971290638599	WITHOUT_CLASSIFICATION	2.028709361402316E-4	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999980037229698	WITHOUT_CLASSIFICATION	1.99627703018244E-6	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9996749388067658	WITHOUT_CLASSIFICATION	3.250611932342129E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.999987738640212	WITHOUT_CLASSIFICATION	1.226135978800612E-5	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999895006570754	WITHOUT_CLASSIFICATION	1.0499342924604036E-5	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999999787539964	WITHOUT_CLASSIFICATION	2.1246003638235188E-8	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999999190441702	WITHOUT_CLASSIFICATION	8.095582980633284E-8	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999988622925643	WITHOUT_CLASSIFICATION	1.1377074356203888E-6	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999985827475737	WITHOUT_CLASSIFICATION	1.4172524263687772E-6	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999879683666459	WITHOUT_CLASSIFICATION	1.2031633354012018E-5	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999973287420052	WITHOUT_CLASSIFICATION	2.671257994773341E-6	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999993235165491	WITHOUT_CLASSIFICATION	6.76483450940887E-7	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999999402006932	WITHOUT_CLASSIFICATION	5.979930686929374E-8	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.999999653883008	WITHOUT_CLASSIFICATION	3.461169919179566E-7	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999992052456397	WITHOUT_CLASSIFICATION	7.947543601833637E-7	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999929135729557	WITHOUT_CLASSIFICATION	7.086427044355744E-6	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.999981092550637	WITHOUT_CLASSIFICATION	1.8907449362897573E-5	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999977768401539	WITHOUT_CLASSIFICATION	2.2231598461362435E-6	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999042648333663	WITHOUT_CLASSIFICATION	9.573516663376815E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999996135022023	WITHOUT_CLASSIFICATION	3.864977976717334E-7	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999996984619273	WITHOUT_CLASSIFICATION	3.0153807277682623E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999995546160205	WITHOUT_CLASSIFICATION	4.453839795766857E-7	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9935932233827726	WITHOUT_CLASSIFICATION	0.0064067766172275055	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9998366715696605	WITHOUT_CLASSIFICATION	1.6332843033954828E-4	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.999999494439361	WITHOUT_CLASSIFICATION	5.055606390417565E-7	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999995646969865	WITHOUT_CLASSIFICATION	4.3530301356962024E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999907310823191	WITHOUT_CLASSIFICATION	9.268917680909818E-6	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999941618446515	WITHOUT_CLASSIFICATION	5.8381553485269744E-6	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999826010821392	WITHOUT_CLASSIFICATION	1.7398917860800685E-5	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999914698185385	WITHOUT_CLASSIFICATION	8.530181461498501E-6	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999984010168452	WITHOUT_CLASSIFICATION	1.5989831547578098E-6	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999836837749095	WITHOUT_CLASSIFICATION	1.6316225090382345E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.999999299014581	WITHOUT_CLASSIFICATION	7.009854190925233E-7	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999994082602502	WITHOUT_CLASSIFICATION	5.917397497656569E-7	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999999044171622	WITHOUT_CLASSIFICATION	9.5582837720156E-8	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.999999616489102	WITHOUT_CLASSIFICATION	3.835108980438407E-7	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999626122466708	WITHOUT_CLASSIFICATION	3.738775332926438E-5	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999997855895103	WITHOUT_CLASSIFICATION	2.144104895800956E-7	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999986903460255	WITHOUT_CLASSIFICATION	1.3096539744974784E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999996976045903	WITHOUT_CLASSIFICATION	3.02395409734288E-7	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999999868255144	WITHOUT_CLASSIFICATION	1.317448559782786E-8	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999999750414675	WITHOUT_CLASSIFICATION	2.495853251263676E-8	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999997591569304	WITHOUT_CLASSIFICATION	2.408430695768537E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999997591569304	WITHOUT_CLASSIFICATION	2.408430695768537E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999998063291299	WITHOUT_CLASSIFICATION	1.9367087012423807E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999998063291299	WITHOUT_CLASSIFICATION	1.9367087012423807E-7	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999999711186827	WITHOUT_CLASSIFICATION	2.8881317342920115E-8	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999999711186827	WITHOUT_CLASSIFICATION	2.8881317342920115E-8	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999848817179149	WITHOUT_CLASSIFICATION	1.5118282085074168E-5	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999998117712611	WITHOUT_CLASSIFICATION	1.8822873893433855E-7	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999999651028586	WITHOUT_CLASSIFICATION	3.4897141372669066E-8	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999997096357188	WITHOUT_CLASSIFICATION	2.903642812307591E-7	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999900090104619	WITHOUT_CLASSIFICATION	9.990989538052118E-6	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9999902692542093	WITHOUT_CLASSIFICATION	9.730745790700919E-6	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999999560751522	WITHOUT_CLASSIFICATION	4.392484783709007E-8	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999651983950829	WITHOUT_CLASSIFICATION	3.4801604917114265E-5	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999996966890806	WITHOUT_CLASSIFICATION	3.0331091935781137E-7	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999939246665609	WITHOUT_CLASSIFICATION	6.075333439105871E-6	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999946400016084	WITHOUT_CLASSIFICATION	5.3599983915263955E-6	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999979662965757	WITHOUT_CLASSIFICATION	2.0337034243299217E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.999998775280281	WITHOUT_CLASSIFICATION	1.2247197188876914E-6	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9998136497594972	WITHOUT_CLASSIFICATION	1.863502405028816E-4	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999871059537805	WITHOUT_CLASSIFICATION	1.2894046219592822E-5	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999995190628023	WITHOUT_CLASSIFICATION	4.809371977117775E-7	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.999998285600933	WITHOUT_CLASSIFICATION	1.7143990671396731E-6	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999905181201497	WITHOUT_CLASSIFICATION	9.481879850334865E-6	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999996118413608	WITHOUT_CLASSIFICATION	3.881586392911798E-7	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999984681224903	WITHOUT_CLASSIFICATION	1.531877509774983E-6	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999989476171713	WITHOUT_CLASSIFICATION	1.0523828285601095E-6	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9998018672429173	WITHOUT_CLASSIFICATION	1.981327570827281E-4	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.999998057507431	WITHOUT_CLASSIFICATION	1.942492569051096E-6	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999986320856814	WITHOUT_CLASSIFICATION	1.3679143186082297E-6	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999996770514926	WITHOUT_CLASSIFICATION	3.22948507417287E-7	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999939672872487	WITHOUT_CLASSIFICATION	6.032712751315627E-6	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999978723434044	WITHOUT_CLASSIFICATION	2.1276565956371676E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997418331888	WITHOUT_CLASSIFICATION	2.5816681118273186E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997418331888	WITHOUT_CLASSIFICATION	2.5816681118273186E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997418331888	WITHOUT_CLASSIFICATION	2.5816681118273186E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999913987282	WITHOUT_CLASSIFICATION	8.601271852197149E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999913987282	WITHOUT_CLASSIFICATION	8.601271852197149E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999214294162	WITHOUT_CLASSIFICATION	7.85705838067107E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999214294162	WITHOUT_CLASSIFICATION	7.85705838067107E-8	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999999994997275	WITHOUT_CLASSIFICATION	5.002725113645671E-10	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.8726646054060695	WITHOUT_CLASSIFICATION	0.12733539459393048	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999999461655807	WITHOUT_CLASSIFICATION	5.3834419211133234E-8	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999985902071532	WITHOUT_CLASSIFICATION	1.4097928467704107E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997418331888	WITHOUT_CLASSIFICATION	2.5816681118273186E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997418331888	WITHOUT_CLASSIFICATION	2.5816681118273186E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997418331888	WITHOUT_CLASSIFICATION	2.5816681118273186E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999913987282	WITHOUT_CLASSIFICATION	8.601271852197149E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999913987282	WITHOUT_CLASSIFICATION	8.601271852197149E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999913987282	WITHOUT_CLASSIFICATION	8.601271852197149E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999214294162	WITHOUT_CLASSIFICATION	7.85705838067107E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999214294162	WITHOUT_CLASSIFICATION	7.85705838067107E-8	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.999999662503182	WITHOUT_CLASSIFICATION	3.3749681810754173E-7	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999999637802388	WITHOUT_CLASSIFICATION	3.6219761197721236E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999334638702	WITHOUT_CLASSIFICATION	6.653612983936711E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999334638702	WITHOUT_CLASSIFICATION	6.653612983936711E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999334638702	WITHOUT_CLASSIFICATION	6.653612983936711E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999334638702	WITHOUT_CLASSIFICATION	6.653612983936711E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999334638702	WITHOUT_CLASSIFICATION	6.653612983936711E-8	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999994022704874	WITHOUT_CLASSIFICATION	5.97729512524073E-7	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999991080596443	WITHOUT_CLASSIFICATION	8.919403557332256E-7	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9991919696324384	WITHOUT_CLASSIFICATION	8.080303675615242E-4	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.999997945320252	WITHOUT_CLASSIFICATION	2.0546797480483726E-6	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999993210550443	WITHOUT_CLASSIFICATION	6.789449557404725E-7	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999984860632704	WITHOUT_CLASSIFICATION	1.51393672960116E-6	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999899850044734	WITHOUT_CLASSIFICATION	1.0014995526616012E-5	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999994334638975	WITHOUT_CLASSIFICATION	5.665361024845436E-7	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999999199273767	WITHOUT_CLASSIFICATION	8.007262336006083E-8	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999971279469853	WITHOUT_CLASSIFICATION	2.87205301487984E-6	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.999937674826325	WITHOUT_CLASSIFICATION	6.232517367492821E-5	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999978851938438	WITHOUT_CLASSIFICATION	2.1148061560988957E-6	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9998452927848852	WITHOUT_CLASSIFICATION	1.5470721511474405E-4	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999970876151377	WITHOUT_CLASSIFICATION	2.9123848623923408E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.999997937851832	WITHOUT_CLASSIFICATION	2.0621481680253804E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999994986656812	WITHOUT_CLASSIFICATION	5.0133431871761E-7	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999994986656812	WITHOUT_CLASSIFICATION	5.0133431871761E-7	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999994986656812	WITHOUT_CLASSIFICATION	5.0133431871761E-7	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.999981814732688	WITHOUT_CLASSIFICATION	1.818526731191249E-5	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999818181484667	WITHOUT_CLASSIFICATION	1.8181851533361003E-5	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999995491563971	WITHOUT_CLASSIFICATION	4.5084360294200056E-7	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999975705187109	WITHOUT_CLASSIFICATION	2.4294812891218533E-6	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999989518840412	WITHOUT_CLASSIFICATION	1.048115958757904E-6	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999967411689231	WITHOUT_CLASSIFICATION	3.2588310768338583E-6	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.999999348362567	WITHOUT_CLASSIFICATION	6.516374330273219E-7	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.999999971100224	WITHOUT_CLASSIFICATION	2.889977599057619E-8	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.999999808872453	WITHOUT_CLASSIFICATION	1.911275471491974E-7	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.999996391291406	WITHOUT_CLASSIFICATION	3.6087085939926536E-6	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999985830568922	WITHOUT_CLASSIFICATION	1.4169431078516016E-6	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999999591713733	WITHOUT_CLASSIFICATION	4.0828626760112095E-8	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999990854918946	WITHOUT_CLASSIFICATION	9.145081053847704E-7	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999999968552163	WITHOUT_CLASSIFICATION	3.1447836394344505E-9	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.999999995450149	WITHOUT_CLASSIFICATION	4.549851021731222E-9	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999850678084559	WITHOUT_CLASSIFICATION	1.4932191544178243E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.999996280682035	WITHOUT_CLASSIFICATION	3.719317964903957E-6	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999999557245288	WITHOUT_CLASSIFICATION	4.427547114449096E-8	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999997583430008	WITHOUT_CLASSIFICATION	2.416569991882443E-7	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999879763358236	WITHOUT_CLASSIFICATION	1.2023664176468899E-5	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9997030124683564	WITHOUT_CLASSIFICATION	2.9698753164366493E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999984043505843	WITHOUT_CLASSIFICATION	1.5956494157827806E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9992939718009247	WITHOUT_CLASSIFICATION	7.060281990752795E-4	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999997368670172	WITHOUT_CLASSIFICATION	2.6313298279211765E-7	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999961683015676	WITHOUT_CLASSIFICATION	3.831698432481307E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999963648249897	WITHOUT_CLASSIFICATION	3.635175010239314E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999981283388506	WITHOUT_CLASSIFICATION	1.8716611494482346E-6	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999962245853988	WITHOUT_CLASSIFICATION	3.7754146012300417E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999857099285233	WITHOUT_CLASSIFICATION	1.429007147681674E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999603346123161	WITHOUT_CLASSIFICATION	3.966538768383581E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.999911992804663	WITHOUT_CLASSIFICATION	8.800719533694998E-5	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999552282407665	WITHOUT_CLASSIFICATION	4.477175923339166E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.999935811422067	WITHOUT_CLASSIFICATION	6.418857793303623E-5	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9999087959386064	WITHOUT_CLASSIFICATION	9.120406139372518E-5	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.999897139967756	WITHOUT_CLASSIFICATION	1.0286003224407696E-4	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9999496992082682	WITHOUT_CLASSIFICATION	5.030079173176043E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999984469373404	WITHOUT_CLASSIFICATION	1.5530626595982113E-6	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999982384090308	WITHOUT_CLASSIFICATION	1.7615909691795449E-6	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999893263372	WITHOUT_CLASSIFICATION	1.067366288243863E-8	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.995873710494415	WITHOUT_CLASSIFICATION	0.004126289505584986	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999305979613357	WITHOUT_CLASSIFICATION	6.940203866429994E-5	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9987672760070192	WITHOUT_CLASSIFICATION	0.00123272399298081	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999825438347621	WITHOUT_CLASSIFICATION	1.74561652378064E-5	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999914458624074	WITHOUT_CLASSIFICATION	8.554137592571478E-6	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999995502728719	WITHOUT_CLASSIFICATION	4.4972712806069044E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9999941343453589	WITHOUT_CLASSIFICATION	5.865654641102121E-6	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999912224910588	WITHOUT_CLASSIFICATION	8.777508941262238E-6	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999912224910588	WITHOUT_CLASSIFICATION	8.777508941262238E-6	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999985639886896	WITHOUT_CLASSIFICATION	1.4360113104632112E-6	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.999999019965785	WITHOUT_CLASSIFICATION	9.800342149177464E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.999994098070991	WITHOUT_CLASSIFICATION	5.901929008941376E-6	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999840037145297	WITHOUT_CLASSIFICATION	1.5996285470355973E-5	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999972905380935	WITHOUT_CLASSIFICATION	2.709461906423234E-6	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999997528244361	WITHOUT_CLASSIFICATION	2.4717556385098035E-7	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999999518033886	WITHOUT_CLASSIFICATION	4.819661126835177E-8	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999716941571	WITHOUT_CLASSIFICATION	2.8305842958302863E-8	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.999999914430161	WITHOUT_CLASSIFICATION	8.556983890378933E-8	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999986762274239	WITHOUT_CLASSIFICATION	1.323772576097367E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999757657398	WITHOUT_CLASSIFICATION	2.4234260218597016E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999757657398	WITHOUT_CLASSIFICATION	2.4234260218597016E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999757657398	WITHOUT_CLASSIFICATION	2.4234260218597016E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999757657398	WITHOUT_CLASSIFICATION	2.4234260218597016E-8	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999963339009749	WITHOUT_CLASSIFICATION	3.666099025088525E-6	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999997955137055	WITHOUT_CLASSIFICATION	2.044862945113546E-7	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999998013439363	WITHOUT_CLASSIFICATION	1.9865606363697817E-7	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999993945053118	WITHOUT_CLASSIFICATION	6.054946882113972E-7	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9999743360220819	WITHOUT_CLASSIFICATION	2.5663977918075705E-5	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9999837317569126	WITHOUT_CLASSIFICATION	1.6268243087461107E-5	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9999837245760772	WITHOUT_CLASSIFICATION	1.627542392284448E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999977016941527	WITHOUT_CLASSIFICATION	2.298305847394206E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999977016941527	WITHOUT_CLASSIFICATION	2.298305847394206E-6	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999792694406339	WITHOUT_CLASSIFICATION	2.0730559366193494E-5	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999995732180028	WITHOUT_CLASSIFICATION	4.2678199714699707E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999867902152	WITHOUT_CLASSIFICATION	1.3209784752346004E-8	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9995414289725971	WITHOUT_CLASSIFICATION	4.585710274028152E-4	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9995414289725971	WITHOUT_CLASSIFICATION	4.585710274028152E-4	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9995599710479204	WITHOUT_CLASSIFICATION	4.400289520797123E-4	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999998358537519	WITHOUT_CLASSIFICATION	1.6414624803987073E-7	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999998358537519	WITHOUT_CLASSIFICATION	1.6414624803987073E-7	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9987223433514646	WITHOUT_CLASSIFICATION	0.0012776566485353741	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999999392552824	WITHOUT_CLASSIFICATION	6.074471763286581E-8	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999895717076371	WITHOUT_CLASSIFICATION	1.0428292362900351E-5	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9939128770453843	WITHOUT_CLASSIFICATION	0.006087122954615726	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9999976560731824	WITHOUT_CLASSIFICATION	2.343926817539535E-6	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999999994617137	WITHOUT_CLASSIFICATION	5.382863561998541E-10	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9998988291690177	WITHOUT_CLASSIFICATION	1.0117083098222881E-4	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999993160619333	WITHOUT_CLASSIFICATION	6.839380667233284E-7	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999999760594208	WITHOUT_CLASSIFICATION	2.3940579256507256E-8	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999992786418759	WITHOUT_CLASSIFICATION	7.213581242129062E-7	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999980182054852	WITHOUT_CLASSIFICATION	1.9817945148017277E-6	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999995591594179	WITHOUT_CLASSIFICATION	4.4084058210887535E-7	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9999154829209241	WITHOUT_CLASSIFICATION	8.451707907581442E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9999622379808886	WITHOUT_CLASSIFICATION	3.7762019111415245E-5	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999997737251304	WITHOUT_CLASSIFICATION	2.262748695685677E-7	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9999828926113673	WITHOUT_CLASSIFICATION	1.7107388632664787E-5	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999975857063662	WITHOUT_CLASSIFICATION	2.414293633810281E-6	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999997758606308	WITHOUT_CLASSIFICATION	2.241393690939969E-7	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999998564685426	WITHOUT_CLASSIFICATION	1.4353145734250027E-7	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9992284589277834	WITHOUT_CLASSIFICATION	7.715410722165279E-4	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9989433486752517	WITHOUT_CLASSIFICATION	0.001056651324748274	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9999857611739239	WITHOUT_CLASSIFICATION	1.4238826076180713E-5	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.99999255563846	WITHOUT_CLASSIFICATION	7.444361540015032E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9998439244598828	WITHOUT_CLASSIFICATION	1.56075540117296E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9989615754616357	WITHOUT_CLASSIFICATION	0.0010384245383643128	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9985787475190612	WITHOUT_CLASSIFICATION	0.0014212524809388515	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999997919893461	WITHOUT_CLASSIFICATION	2.080106539600367E-7	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999644121161676	WITHOUT_CLASSIFICATION	3.558788383243257E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999997127679668	WITHOUT_CLASSIFICATION	2.8723203311155744E-7	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999953901544607	WITHOUT_CLASSIFICATION	4.609845539349336E-6	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999552664850959	WITHOUT_CLASSIFICATION	4.473351490403483E-5	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999949566455848	WITHOUT_CLASSIFICATION	5.043354415187984E-6	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.9999255196432018	DEFECT	7.448035679816209E-5	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999447842321908	WITHOUT_CLASSIFICATION	5.5215767809272636E-5	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999999715121136	WITHOUT_CLASSIFICATION	2.8487886367620938E-8	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999351267328771	WITHOUT_CLASSIFICATION	6.487326712286156E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999942165499355	WITHOUT_CLASSIFICATION	5.783450064457707E-6	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.999999986498636	WITHOUT_CLASSIFICATION	1.3501364058012969E-8	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999999684325831	WITHOUT_CLASSIFICATION	3.156741696016348E-8	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999351267328771	WITHOUT_CLASSIFICATION	6.487326712286156E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999942165499355	WITHOUT_CLASSIFICATION	5.783450064457707E-6	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999929438165064	WITHOUT_CLASSIFICATION	7.0561834936132125E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999957871172744	WITHOUT_CLASSIFICATION	4.212882725615992E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999957871172744	WITHOUT_CLASSIFICATION	4.212882725615992E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999987558914706	WITHOUT_CLASSIFICATION	1.2441085295220287E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9995802569016543	WITHOUT_CLASSIFICATION	4.1974309834562806E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999906373320239	WITHOUT_CLASSIFICATION	9.362667976173495E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999945954364812	WITHOUT_CLASSIFICATION	5.404563518772841E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999370031810438	WITHOUT_CLASSIFICATION	6.299681895614668E-5	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9733571931667088	WITHOUT_CLASSIFICATION	0.026642806833291243	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999990660055631	WITHOUT_CLASSIFICATION	9.339944369572238E-7	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999999419345306	WITHOUT_CLASSIFICATION	5.806546955592117E-8	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999976219704612	WITHOUT_CLASSIFICATION	2.378029538842126E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999875819362655	WITHOUT_CLASSIFICATION	1.2418063734477357E-5	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9999978213802294	WITHOUT_CLASSIFICATION	2.1786197706206834E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999996351937102	WITHOUT_CLASSIFICATION	3.648062898627655E-7	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9999835067131239	WITHOUT_CLASSIFICATION	1.64932868761188E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999996237323533	WITHOUT_CLASSIFICATION	3.762676467405808E-7	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999996237323533	WITHOUT_CLASSIFICATION	3.762676467405808E-7	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999938358756316	WITHOUT_CLASSIFICATION	6.164124368395954E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999938358756316	WITHOUT_CLASSIFICATION	6.164124368395954E-6	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.999999698233998	WITHOUT_CLASSIFICATION	3.0176600198104E-7	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999997672385045	WITHOUT_CLASSIFICATION	2.327614955825395E-7	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999982926120498	WITHOUT_CLASSIFICATION	1.7073879502487554E-6	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999938362068698	WITHOUT_CLASSIFICATION	6.1637931302905785E-6	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999990108367909	WITHOUT_CLASSIFICATION	9.891632090961476E-7	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999998150999774	WITHOUT_CLASSIFICATION	1.849000226731732E-7	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999906373320239	WITHOUT_CLASSIFICATION	9.362667976173495E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999945954364812	WITHOUT_CLASSIFICATION	5.404563518772841E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999976219704612	WITHOUT_CLASSIFICATION	2.378029538842126E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999875819362655	WITHOUT_CLASSIFICATION	1.2418063734477357E-5	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999984860173717	WITHOUT_CLASSIFICATION	1.513982628266012E-6	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999994215094572	WITHOUT_CLASSIFICATION	5.784905427358097E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.999988437349925	WITHOUT_CLASSIFICATION	1.1562650074990012E-5	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999995937456235	WITHOUT_CLASSIFICATION	4.062543765023452E-7	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999997521603996	WITHOUT_CLASSIFICATION	2.478396003254292E-7	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999979688155366	WITHOUT_CLASSIFICATION	2.0311844633262396E-6	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9998710807393579	WITHOUT_CLASSIFICATION	1.2891926064210807E-4	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999968707186538	WITHOUT_CLASSIFICATION	3.1292813460082447E-6	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999521611784818	WITHOUT_CLASSIFICATION	4.7838821518133893E-5	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999982666110948	WITHOUT_CLASSIFICATION	1.7333889051807908E-6	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9999948633279271	WITHOUT_CLASSIFICATION	5.136672072948352E-6	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.999999641146223	WITHOUT_CLASSIFICATION	3.5885377701210723E-7	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999995546539004	WITHOUT_CLASSIFICATION	4.453460996239404E-7	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9995885161825834	WITHOUT_CLASSIFICATION	4.114838174166905E-4	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999957705226113	WITHOUT_CLASSIFICATION	4.2294773886212475E-6	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999742145017344	WITHOUT_CLASSIFICATION	2.5785498265577847E-5	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999994409319142	WITHOUT_CLASSIFICATION	5.590680858510172E-7	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9999985849240453	WITHOUT_CLASSIFICATION	1.4150759546550839E-6	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999999188260359	WITHOUT_CLASSIFICATION	8.117396407856347E-8	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999999132245933	WITHOUT_CLASSIFICATION	8.677540680920672E-8	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.999999902988032	WITHOUT_CLASSIFICATION	9.70119679678554E-8	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.999999902988032	WITHOUT_CLASSIFICATION	9.70119679678554E-8	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999905123007468	WITHOUT_CLASSIFICATION	9.48769925318101E-6	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999984414843656	WITHOUT_CLASSIFICATION	1.55851563440755E-6	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.998557981762396	WITHOUT_CLASSIFICATION	0.001442018237604033	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.999999924213063	WITHOUT_CLASSIFICATION	7.578693686465773E-8	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.999999924213063	WITHOUT_CLASSIFICATION	7.578693686465773E-8	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.999988437349925	WITHOUT_CLASSIFICATION	1.1562650074990012E-5	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999992611610549	WITHOUT_CLASSIFICATION	7.388389452198725E-7	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999998802725653	WITHOUT_CLASSIFICATION	1.1972743476663788E-7	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999998564971191	WITHOUT_CLASSIFICATION	1.4350288094682253E-7	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999997985206068	WITHOUT_CLASSIFICATION	2.014793930782391E-7	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999999101516303	WITHOUT_CLASSIFICATION	8.984836967676282E-8	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999923668442524	WITHOUT_CLASSIFICATION	7.633155747534615E-6	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999998979414524	WITHOUT_CLASSIFICATION	1.0205854767667655E-7	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999999602083001	WITHOUT_CLASSIFICATION	3.979169996786933E-8	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999994222844815	WITHOUT_CLASSIFICATION	5.777155185726187E-7	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999998254745797	WITHOUT_CLASSIFICATION	1.7452542032853046E-7	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999829057009532	WITHOUT_CLASSIFICATION	1.7094299046859052E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999972012157005	WITHOUT_CLASSIFICATION	2.7987842994808446E-6	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9999999041315989	WITHOUT_CLASSIFICATION	9.586840105987624E-8	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999960225237785	WITHOUT_CLASSIFICATION	3.977476221533645E-6	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999995132090477	WITHOUT_CLASSIFICATION	4.86790952274786E-7	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999996979846746	WITHOUT_CLASSIFICATION	3.020153253627694E-7	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999994377852727	WITHOUT_CLASSIFICATION	5.622147272350996E-7	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999526724090262	WITHOUT_CLASSIFICATION	4.732759097376426E-5	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999996793990846	WITHOUT_CLASSIFICATION	3.206009153168331E-7	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999999998626427	WITHOUT_CLASSIFICATION	1.373573762717315E-10	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999991843150066	WITHOUT_CLASSIFICATION	8.15684993487986E-7	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999961981868603	WITHOUT_CLASSIFICATION	3.8018131396789474E-6	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999985095675089	WITHOUT_CLASSIFICATION	1.4904324911398934E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999986181568	WITHOUT_CLASSIFICATION	1.381843139497472E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999997970415321	WITHOUT_CLASSIFICATION	2.029584679458569E-7	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999982917699234	WITHOUT_CLASSIFICATION	1.7082300765516106E-6	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999999163089623	WITHOUT_CLASSIFICATION	8.369103771473751E-8	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.999999997526057	WITHOUT_CLASSIFICATION	2.4739430893345954E-9	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9999996091411171	WITHOUT_CLASSIFICATION	3.908588828765243E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999896836343	WITHOUT_CLASSIFICATION	1.031636554503937E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999896836343	WITHOUT_CLASSIFICATION	1.031636554503937E-8	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999993330530221	WITHOUT_CLASSIFICATION	6.669469779060632E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999787925727	WITHOUT_CLASSIFICATION	2.120742723629728E-8	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999787925727	WITHOUT_CLASSIFICATION	2.120742723629728E-8	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999991037881296	WITHOUT_CLASSIFICATION	8.962118704615498E-7	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999991037881296	WITHOUT_CLASSIFICATION	8.962118704615498E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999998208777557	WITHOUT_CLASSIFICATION	1.7912224417296947E-7	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999999787397661	WITHOUT_CLASSIFICATION	2.126023390539263E-8	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999998838282089	WITHOUT_CLASSIFICATION	1.1617179103444177E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.99999974164422	WITHOUT_CLASSIFICATION	2.5835577996896957E-7	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999999246655416	WITHOUT_CLASSIFICATION	7.533445839608691E-8	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999980812523502	WITHOUT_CLASSIFICATION	1.9187476498274185E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999980812523502	WITHOUT_CLASSIFICATION	1.9187476498274185E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999986181568	WITHOUT_CLASSIFICATION	1.381843139497472E-9	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999986181568	WITHOUT_CLASSIFICATION	1.381843139497472E-9	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999986181568	WITHOUT_CLASSIFICATION	1.381843139497472E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999997970415321	WITHOUT_CLASSIFICATION	2.029584679458569E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999896836343	WITHOUT_CLASSIFICATION	1.031636554503937E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999896836343	WITHOUT_CLASSIFICATION	1.031636554503937E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999896836343	WITHOUT_CLASSIFICATION	1.031636554503937E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999998208777557	WITHOUT_CLASSIFICATION	1.7912224417296947E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999998208777557	WITHOUT_CLASSIFICATION	1.7912224417296947E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999998208777557	WITHOUT_CLASSIFICATION	1.7912224417296947E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.99999974164422	WITHOUT_CLASSIFICATION	2.5835577996896957E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.99999974164422	WITHOUT_CLASSIFICATION	2.5835577996896957E-7	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999986872775528	WITHOUT_CLASSIFICATION	1.3127224472638823E-6	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999999681266932	WITHOUT_CLASSIFICATION	3.1873306759313006E-8	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999801821298	WITHOUT_CLASSIFICATION	1.9817870242243814E-8	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.8809055599032924	WITHOUT_CLASSIFICATION	0.11909444009670753	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999998261712859	WITHOUT_CLASSIFICATION	1.7382871411119548E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999994383952229	WITHOUT_CLASSIFICATION	5.616047770522677E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999994383952229	WITHOUT_CLASSIFICATION	5.616047770522677E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999996029976549	WITHOUT_CLASSIFICATION	3.970023451066996E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999923668442524	WITHOUT_CLASSIFICATION	7.633155747534615E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999923668442524	WITHOUT_CLASSIFICATION	7.633155747534615E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999923668442524	WITHOUT_CLASSIFICATION	7.633155747534615E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999923668442524	WITHOUT_CLASSIFICATION	7.633155747534615E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999923668442524	WITHOUT_CLASSIFICATION	7.633155747534615E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998226153332	WITHOUT_CLASSIFICATION	1.773846668850535E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998226153332	WITHOUT_CLASSIFICATION	1.773846668850535E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998226153332	WITHOUT_CLASSIFICATION	1.773846668850535E-7	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999999972976189	WITHOUT_CLASSIFICATION	2.702381022566446E-9	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999999910134351	WITHOUT_CLASSIFICATION	8.98656504880811E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999997970415321	WITHOUT_CLASSIFICATION	2.029584679458569E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999998208777557	WITHOUT_CLASSIFICATION	1.7912224417296947E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999998208777557	WITHOUT_CLASSIFICATION	1.7912224417296947E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999923668442524	WITHOUT_CLASSIFICATION	7.633155747534615E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999923668442524	WITHOUT_CLASSIFICATION	7.633155747534615E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998226153332	WITHOUT_CLASSIFICATION	1.773846668850535E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999996029976549	WITHOUT_CLASSIFICATION	3.970023451066996E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999519613276115	WITHOUT_CLASSIFICATION	4.803867238839691E-5	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999998851527879	WITHOUT_CLASSIFICATION	1.148472120375395E-7	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999837400744016	WITHOUT_CLASSIFICATION	1.6259925598354396E-5	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999998975319127	WITHOUT_CLASSIFICATION	1.0246808744790227E-7	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999997847906962	WITHOUT_CLASSIFICATION	2.1520930374092113E-7	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999999724524538	WITHOUT_CLASSIFICATION	2.754754626285969E-8	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999760898497333	WITHOUT_CLASSIFICATION	2.3910150266653334E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999992414622461	WITHOUT_CLASSIFICATION	7.585377539505079E-7	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999999642345192	WITHOUT_CLASSIFICATION	3.576548081475013E-8	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999999968155091	WITHOUT_CLASSIFICATION	3.1844909788689284E-9	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999997340053318	WITHOUT_CLASSIFICATION	2.659946682019178E-7	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999999756589958	WITHOUT_CLASSIFICATION	2.4341004191198508E-8	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999995089657383	WITHOUT_CLASSIFICATION	4.910342617015194E-7	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999987968410741	WITHOUT_CLASSIFICATION	1.2031589259614804E-6	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999998323806033	WITHOUT_CLASSIFICATION	1.6761939660469877E-7	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999947369564319	WITHOUT_CLASSIFICATION	5.263043568137413E-6	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999999788919195	WITHOUT_CLASSIFICATION	2.110808056839971E-8	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999450842355596	WITHOUT_CLASSIFICATION	5.49157644403138E-5	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999804986546946	WITHOUT_CLASSIFICATION	1.950134530540465E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999998333600533	WITHOUT_CLASSIFICATION	1.6663994678843879E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9998126114836493	WITHOUT_CLASSIFICATION	1.8738851635070365E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999909222407	WITHOUT_CLASSIFICATION	9.07775921747889E-9	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999995408744	WITHOUT_CLASSIFICATION	4.5912560818350536E-10	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.999999887415943	WITHOUT_CLASSIFICATION	1.1258405696689388E-7	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999806862031881	WITHOUT_CLASSIFICATION	1.9313796811878905E-5	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999958847936157	WITHOUT_CLASSIFICATION	4.1152063843050185E-6	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999984840403352	WITHOUT_CLASSIFICATION	1.5159596647748225E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999988701740478	WITHOUT_CLASSIFICATION	1.1298259522332507E-6	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999994308213663	WITHOUT_CLASSIFICATION	5.691786337427674E-7	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999992011402826	WITHOUT_CLASSIFICATION	7.988597174467759E-7	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999999954795386	WITHOUT_CLASSIFICATION	4.520461440128275E-9	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999999637959422	WITHOUT_CLASSIFICATION	3.6204057790535115E-8	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999882774978741	WITHOUT_CLASSIFICATION	1.1722502125883755E-5	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999982548465404	WITHOUT_CLASSIFICATION	1.7451534596052818E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999519613276115	WITHOUT_CLASSIFICATION	4.803867238839691E-5	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999999808295258	WITHOUT_CLASSIFICATION	1.9170474191825538E-8	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9999999904028523	WITHOUT_CLASSIFICATION	9.597147848757606E-9	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9996980118686041	WITHOUT_CLASSIFICATION	3.0198813139595504E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999995584979894	WITHOUT_CLASSIFICATION	4.4150201058793596E-7	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999995584979894	WITHOUT_CLASSIFICATION	4.4150201058793596E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999994332913074	WITHOUT_CLASSIFICATION	5.667086926727786E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999994332913074	WITHOUT_CLASSIFICATION	5.667086926727786E-7	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999982684876372	WITHOUT_CLASSIFICATION	1.731512362778599E-6	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.998298199939113	WITHOUT_CLASSIFICATION	0.0017018000608870426	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999998827950448	WITHOUT_CLASSIFICATION	1.1720495518104798E-7	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999999151315445	WITHOUT_CLASSIFICATION	8.486845554517326E-8	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999998438250268	WITHOUT_CLASSIFICATION	1.561749731501836E-7	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999991899255363	WITHOUT_CLASSIFICATION	8.100744638015077E-7	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999456223408053	WITHOUT_CLASSIFICATION	5.4377659194844806E-5	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999965891142216	WITHOUT_CLASSIFICATION	3.4108857784033995E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999994636503545	WITHOUT_CLASSIFICATION	5.363496454417832E-7	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999930331891654	WITHOUT_CLASSIFICATION	6.966810834524017E-6	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999943823855411	WITHOUT_CLASSIFICATION	5.617614458989838E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999996029674635	WITHOUT_CLASSIFICATION	3.9703253658331383E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999996029674635	WITHOUT_CLASSIFICATION	3.9703253658331383E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999918464682206	WITHOUT_CLASSIFICATION	8.153531779314204E-6	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999972552607264	WITHOUT_CLASSIFICATION	2.7447392735579675E-6	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999994988348788	WITHOUT_CLASSIFICATION	5.011651211722179E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999994988348788	WITHOUT_CLASSIFICATION	5.011651211722179E-7	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999939013715122	WITHOUT_CLASSIFICATION	6.098628487800024E-6	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999895000397239	WITHOUT_CLASSIFICATION	1.0499960276157052E-5	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999876186100505	WITHOUT_CLASSIFICATION	1.238138994952286E-5	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9999992206283892	WITHOUT_CLASSIFICATION	7.793716108588955E-7	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999998839612305	WITHOUT_CLASSIFICATION	1.1603876952433112E-7	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999996709301205	WITHOUT_CLASSIFICATION	3.2906987937344434E-7	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999991524592345	WITHOUT_CLASSIFICATION	8.475407653966001E-7	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999998789266991	WITHOUT_CLASSIFICATION	1.2107330088905493E-7	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9997990770653893	WITHOUT_CLASSIFICATION	2.0092293461077503E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999999298079709	WITHOUT_CLASSIFICATION	7.01920290323375E-8	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999997725416465	WITHOUT_CLASSIFICATION	2.274583534573831E-7	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999976081039288	WITHOUT_CLASSIFICATION	2.3918960711881647E-6	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999999190680304	WITHOUT_CLASSIFICATION	8.093196957158514E-8	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999988955114063	WITHOUT_CLASSIFICATION	1.104488593678809E-6	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999998003112519	WITHOUT_CLASSIFICATION	1.996887481660475E-7	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.999955513456388	WITHOUT_CLASSIFICATION	4.448654361199471E-5	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999953642302919	WITHOUT_CLASSIFICATION	4.635769708102486E-6	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.999999751987689	WITHOUT_CLASSIFICATION	2.48012311123297E-7	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999990864759922	WITHOUT_CLASSIFICATION	9.135240077437142E-7	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999998526158118	WITHOUT_CLASSIFICATION	1.4738418816765872E-7	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.8026587243856617	WITHOUT_CLASSIFICATION	0.19734127561433829	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999986662988453	WITHOUT_CLASSIFICATION	1.3337011546898204E-6	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999981056926533	WITHOUT_CLASSIFICATION	1.8943073466017087E-6	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999993728428599	WITHOUT_CLASSIFICATION	6.271571400927487E-7	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999945443016441	WITHOUT_CLASSIFICATION	5.455698355822557E-6	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999636650822085	WITHOUT_CLASSIFICATION	3.633491779159909E-5	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999983082753962	WITHOUT_CLASSIFICATION	1.6917246039357324E-6	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999997324576073	WITHOUT_CLASSIFICATION	2.6754239262885973E-7	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999921501946671	WITHOUT_CLASSIFICATION	7.849805332852375E-6	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999999098947941	WITHOUT_CLASSIFICATION	9.010520592009724E-8	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.999998694590017	WITHOUT_CLASSIFICATION	1.3054099829355937E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999998801834428	WITHOUT_CLASSIFICATION	1.1981655724698782E-7	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999991955968696	WITHOUT_CLASSIFICATION	8.044031304361614E-7	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999951142248081	WITHOUT_CLASSIFICATION	4.8857751918189515E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999951142248081	WITHOUT_CLASSIFICATION	4.8857751918189515E-6	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999977274505402	WITHOUT_CLASSIFICATION	2.272549459808685E-6	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999998647373661	WITHOUT_CLASSIFICATION	1.3526263384942754E-7	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999999221783026	WITHOUT_CLASSIFICATION	7.782169740933285E-8	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999821251989393	WITHOUT_CLASSIFICATION	1.7874801060783223E-5	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9998508477680436	WITHOUT_CLASSIFICATION	1.491522319565051E-4	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999999893128296	WITHOUT_CLASSIFICATION	1.0687170308141975E-8	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9998591403464236	WITHOUT_CLASSIFICATION	1.408596535763534E-4	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9982687763690954	WITHOUT_CLASSIFICATION	0.0017312236309045563	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9999335012981689	WITHOUT_CLASSIFICATION	6.649870183110498E-5	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.999945402741139	WITHOUT_CLASSIFICATION	5.4597258860890344E-5	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999993479417381	WITHOUT_CLASSIFICATION	6.520582619462835E-7	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9954749193107228	WITHOUT_CLASSIFICATION	0.00452508068927714	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999999141464838	WITHOUT_CLASSIFICATION	8.585351611935408E-8	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9997994847812633	WITHOUT_CLASSIFICATION	2.0051521873662364E-4	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999999935518428	WITHOUT_CLASSIFICATION	6.44815724585325E-9	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999995937475142	WITHOUT_CLASSIFICATION	4.06252485842176E-7	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999987941855636	WITHOUT_CLASSIFICATION	1.2058144363665988E-6	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999978907202207	WITHOUT_CLASSIFICATION	2.1092797793178503E-6	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999998653498768	WITHOUT_CLASSIFICATION	1.3465012320141496E-7	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999755730615469	WITHOUT_CLASSIFICATION	2.4426938453104783E-5	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999994102213561	WITHOUT_CLASSIFICATION	5.897786439119467E-7	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999999567267553	WITHOUT_CLASSIFICATION	4.327324474346993E-8	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999967994887484	WITHOUT_CLASSIFICATION	3.2005112515040366E-6	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999966573110035	WITHOUT_CLASSIFICATION	3.3426889965884182E-6	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999932598181964	WITHOUT_CLASSIFICATION	6.740181803637153E-6	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999986661375365	WITHOUT_CLASSIFICATION	1.3338624634525995E-6	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999999917890897	WITHOUT_CLASSIFICATION	8.210910358644982E-9	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999997346831492	WITHOUT_CLASSIFICATION	2.65316850823208E-7	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.998604672673663	WITHOUT_CLASSIFICATION	0.0013953273263369438	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.996653222597178	WITHOUT_CLASSIFICATION	0.003346777402821927	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999977228362076	WITHOUT_CLASSIFICATION	2.2771637923597734E-6	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999999997345441	WITHOUT_CLASSIFICATION	2.6545587593849566E-10	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999966316263207	WITHOUT_CLASSIFICATION	3.368373679374476E-6	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999995542037392	WITHOUT_CLASSIFICATION	4.4579626074654754E-7	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999959872872266	WITHOUT_CLASSIFICATION	4.012712773457337E-6	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999996366493514	WITHOUT_CLASSIFICATION	3.633506486263625E-7	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.99999822052448	WITHOUT_CLASSIFICATION	1.7794755200708753E-6	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999984306510629	WITHOUT_CLASSIFICATION	1.5693489371114523E-6	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.999999353864866	WITHOUT_CLASSIFICATION	6.461351339154992E-7	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999999590816357	WITHOUT_CLASSIFICATION	4.091836428086546E-8	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999997664669185	WITHOUT_CLASSIFICATION	2.335330814121142E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999994390501483	WITHOUT_CLASSIFICATION	5.609498516906281E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999994390501483	WITHOUT_CLASSIFICATION	5.609498516906281E-7	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999992263091095	WITHOUT_CLASSIFICATION	7.736908905326647E-7	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999999388753515	WITHOUT_CLASSIFICATION	6.112464836769889E-8	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999993453681273	WITHOUT_CLASSIFICATION	6.546318726539544E-7	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999991561998558	WITHOUT_CLASSIFICATION	8.438001443127974E-7	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999998962249318	WITHOUT_CLASSIFICATION	1.0377506824470286E-7	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999999126358837	WITHOUT_CLASSIFICATION	8.736411635952787E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999996353862625	WITHOUT_CLASSIFICATION	3.6461373751424043E-6	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9924362091085248	WITHOUT_CLASSIFICATION	0.007563790891475243	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.999999123234843	WITHOUT_CLASSIFICATION	8.767651570846402E-7	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999969501913	WITHOUT_CLASSIFICATION	3.0498087200728766E-9	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999996188198289	WITHOUT_CLASSIFICATION	3.8118017099898903E-7	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999968916317065	WITHOUT_CLASSIFICATION	3.108368293461294E-6	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9997057879938772	WITHOUT_CLASSIFICATION	2.9421200612280514E-4	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999999122067807	WITHOUT_CLASSIFICATION	8.779321920496278E-8	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999997680152466	WITHOUT_CLASSIFICATION	2.3198475344238636E-7	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9996886346579346	WITHOUT_CLASSIFICATION	3.1136534206547927E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999250373426449	WITHOUT_CLASSIFICATION	7.4962657355077E-5	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999993590765285	WITHOUT_CLASSIFICATION	6.409234716138372E-7	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999999998734307	WITHOUT_CLASSIFICATION	1.2656936501193994E-10	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.5048690002106182	WITHOUT_CLASSIFICATION	0.49513099978938185	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999999125329639	WITHOUT_CLASSIFICATION	8.74670360927724E-8	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999852117444678	WITHOUT_CLASSIFICATION	1.478825553221754E-5	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999999996974598	WITHOUT_CLASSIFICATION	3.025402291069244E-10	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999946131211555	WITHOUT_CLASSIFICATION	5.386878844541744E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999917330058603	WITHOUT_CLASSIFICATION	8.266994139677079E-6	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999997548489953	WITHOUT_CLASSIFICATION	2.451510046880851E-7	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999999246206609	WITHOUT_CLASSIFICATION	7.537933921520212E-8	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999995008156607	WITHOUT_CLASSIFICATION	4.991843393189333E-7	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.999760569197038	WITHOUT_CLASSIFICATION	2.3943080296185687E-4	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999987646220779	WITHOUT_CLASSIFICATION	1.2353779220822448E-6	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9995865951755865	WITHOUT_CLASSIFICATION	4.1340482441351307E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999901701590925	WITHOUT_CLASSIFICATION	9.82984090747147E-6	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999987646220779	WITHOUT_CLASSIFICATION	1.2353779220822448E-6	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999988251069872	WITHOUT_CLASSIFICATION	1.1748930127134699E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9989615754616357	WITHOUT_CLASSIFICATION	0.0010384245383643128	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.998600676166489	WITHOUT_CLASSIFICATION	0.0013993238335110953	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.5915638799461496	WITHOUT_CLASSIFICATION	0.4084361200538503	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999998542647365	WITHOUT_CLASSIFICATION	1.4573526345787668E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999334638702	WITHOUT_CLASSIFICATION	6.653612983936711E-8	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999997535803274	WITHOUT_CLASSIFICATION	2.4641967247353026E-7	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999988356945093	WITHOUT_CLASSIFICATION	1.1643054906814124E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9995802569016543	WITHOUT_CLASSIFICATION	4.1974309834562806E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999998526158118	WITHOUT_CLASSIFICATION	1.4738418816765872E-7	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999801821298	WITHOUT_CLASSIFICATION	1.9817870242243814E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999927735410093	WITHOUT_CLASSIFICATION	7.22645899059876E-6	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.999999875991553	WITHOUT_CLASSIFICATION	1.2400844699336073E-7	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999999231408003	WITHOUT_CLASSIFICATION	7.68591997376812E-8	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9999589085487602	WITHOUT_CLASSIFICATION	4.109145123966165E-5	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999998427849012	WITHOUT_CLASSIFICATION	1.5721509880009258E-7	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9999986827795742	WITHOUT_CLASSIFICATION	1.3172204259009383E-6	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999999787391064	WITHOUT_CLASSIFICATION	2.126089362830562E-8	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9937974897379043	WITHOUT_CLASSIFICATION	0.006202510262095679	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999929021639119	WITHOUT_CLASSIFICATION	7.097836088088737E-6	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999991223971039	WITHOUT_CLASSIFICATION	8.776028960877205E-7	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999993594003476	WITHOUT_CLASSIFICATION	6.405996525522481E-7	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.999999950119118	WITHOUT_CLASSIFICATION	4.988088191577145E-8	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999953891292969	WITHOUT_CLASSIFICATION	4.610870703108365E-6	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.999999296133482	WITHOUT_CLASSIFICATION	7.03866517943211E-7	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999858951451744	WITHOUT_CLASSIFICATION	1.4104854825548385E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999897565776827	WITHOUT_CLASSIFICATION	1.0243422317137305E-5	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999501689050183	WITHOUT_CLASSIFICATION	4.983109498165393E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999917459308	WITHOUT_CLASSIFICATION	8.254069129090317E-9	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999989828053302	WITHOUT_CLASSIFICATION	1.0171946699269685E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999989828053302	WITHOUT_CLASSIFICATION	1.0171946699269685E-6	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997688198573	WITHOUT_CLASSIFICATION	2.3118014281547824E-7	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999999664836446	WITHOUT_CLASSIFICATION	3.351635538372084E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999026737669	WITHOUT_CLASSIFICATION	9.73262330749923E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9954049979708167	WITHOUT_CLASSIFICATION	0.004595002029183291	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9954049979708167	WITHOUT_CLASSIFICATION	0.004595002029183291	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9954049979708167	WITHOUT_CLASSIFICATION	0.004595002029183291	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9954049979708167	WITHOUT_CLASSIFICATION	0.004595002029183291	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999977636327873	WITHOUT_CLASSIFICATION	2.2363672128396794E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999099595264	WITHOUT_CLASSIFICATION	9.004047353318988E-8	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999990349325615	WITHOUT_CLASSIFICATION	9.650674384800438E-7	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9950109646000445	WITHOUT_CLASSIFICATION	0.004989035399955572	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998559655708	WITHOUT_CLASSIFICATION	1.4403442914763909E-7	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9997015262808863	WITHOUT_CLASSIFICATION	2.9847371911371064E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999959842256609	WITHOUT_CLASSIFICATION	4.015774338960382E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999959842256609	WITHOUT_CLASSIFICATION	4.015774338960382E-6	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9997455716168163	WITHOUT_CLASSIFICATION	2.5442838318373714E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9996371356549653	WITHOUT_CLASSIFICATION	3.628643450347885E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999972080469703	WITHOUT_CLASSIFICATION	2.791953029596469E-6	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9985197651321895	WITHOUT_CLASSIFICATION	0.0014802348678104663	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999981584404681	WITHOUT_CLASSIFICATION	1.841559531782832E-6	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999996530117048	WITHOUT_CLASSIFICATION	3.469882952000042E-7	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999998475318422	WITHOUT_CLASSIFICATION	1.5246815773533453E-7	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999981680883648	WITHOUT_CLASSIFICATION	1.8319116351961063E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999809928962803	WITHOUT_CLASSIFICATION	1.900710371965248E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999809928962803	WITHOUT_CLASSIFICATION	1.900710371965248E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999901701590925	WITHOUT_CLASSIFICATION	9.82984090747147E-6	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999900436067777	WITHOUT_CLASSIFICATION	9.956393222242822E-6	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999851670329348	WITHOUT_CLASSIFICATION	1.4832967065122398E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999976088241959	WITHOUT_CLASSIFICATION	2.391175804103351E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999999978608655	WITHOUT_CLASSIFICATION	2.139134580329728E-9	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.999453354892316	WITHOUT_CLASSIFICATION	5.46645107683975E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999999712120343	WITHOUT_CLASSIFICATION	2.878796568372567E-8	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999981988382328	WITHOUT_CLASSIFICATION	1.8011617672302324E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999992797264674	WITHOUT_CLASSIFICATION	7.202735326293445E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999992797264674	WITHOUT_CLASSIFICATION	7.202735326293445E-7	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999987861147499	WITHOUT_CLASSIFICATION	1.2138852501893885E-6	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.999999974254611	WITHOUT_CLASSIFICATION	2.5745389074206665E-8	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999814646380649	WITHOUT_CLASSIFICATION	1.8535361934995444E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999985320117266	WITHOUT_CLASSIFICATION	1.4679882733318157E-6	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999993780109255	WITHOUT_CLASSIFICATION	6.219890745119196E-7	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9996105952912974	WITHOUT_CLASSIFICATION	3.894047087026691E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999985042490073	WITHOUT_CLASSIFICATION	1.4957509927262946E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999676610115	WITHOUT_CLASSIFICATION	3.2338988450983E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999676610115	WITHOUT_CLASSIFICATION	3.2338988450983E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999676610115	WITHOUT_CLASSIFICATION	3.2338988450983E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999676610115	WITHOUT_CLASSIFICATION	3.2338988450983E-8	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999972965290176	WITHOUT_CLASSIFICATION	2.7034709825160015E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9999821506131042	WITHOUT_CLASSIFICATION	1.784938689579002E-5	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999141241741468	WITHOUT_CLASSIFICATION	8.587582585314955E-5	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999994617757962	WITHOUT_CLASSIFICATION	5.382242038178718E-7	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999989103938907	WITHOUT_CLASSIFICATION	1.089606109289234E-6	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9994943417119533	WITHOUT_CLASSIFICATION	5.056582880467362E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.999999938116108	WITHOUT_CLASSIFICATION	6.188389199761689E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999996878633353	WITHOUT_CLASSIFICATION	3.1213666471862774E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999996878633353	WITHOUT_CLASSIFICATION	3.1213666471862774E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999996878633353	WITHOUT_CLASSIFICATION	3.1213666471862774E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999896582108807	WITHOUT_CLASSIFICATION	1.0341789119352002E-5	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9992552214665008	WITHOUT_CLASSIFICATION	7.447785334992154E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998311413044	WITHOUT_CLASSIFICATION	1.688586955254486E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998311413044	WITHOUT_CLASSIFICATION	1.688586955254486E-7	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999933994448778	WITHOUT_CLASSIFICATION	6.60055512226463E-6	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999999989050591	WITHOUT_CLASSIFICATION	1.0949408542937992E-9	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999997965766846	WITHOUT_CLASSIFICATION	2.034233154168197E-7	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9994606751979722	WITHOUT_CLASSIFICATION	5.393248020277786E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999999664072738	WITHOUT_CLASSIFICATION	3.3592726151833297E-8	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999999065775214	WITHOUT_CLASSIFICATION	9.342247855244403E-8	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999883957816093	WITHOUT_CLASSIFICATION	1.160421839073146E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999883957816093	WITHOUT_CLASSIFICATION	1.160421839073146E-5	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999972106571505	WITHOUT_CLASSIFICATION	2.789342849431292E-6	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9981418874230925	WITHOUT_CLASSIFICATION	0.0018581125769073913	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999997516675743	WITHOUT_CLASSIFICATION	2.483324257729717E-7	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9999987745946409	WITHOUT_CLASSIFICATION	1.2254053590626855E-6	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999966966129828	WITHOUT_CLASSIFICATION	3.3033870172205553E-6	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999995931860147	WITHOUT_CLASSIFICATION	4.068139853008127E-7	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999995705592886	WITHOUT_CLASSIFICATION	4.2944071150149946E-7	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999616469913032	WITHOUT_CLASSIFICATION	3.83530086968466E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9990534800554731	WITHOUT_CLASSIFICATION	9.46519944526807E-4	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999999560990213	WITHOUT_CLASSIFICATION	4.3900978689701775E-8	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999999266605413	WITHOUT_CLASSIFICATION	7.333945865700815E-8	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999939862524354	WITHOUT_CLASSIFICATION	6.013747564609214E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999115723903799	WITHOUT_CLASSIFICATION	8.842760962016054E-5	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.999998169817572	WITHOUT_CLASSIFICATION	1.8301824280674118E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999984870716	WITHOUT_CLASSIFICATION	1.5129284059432153E-9	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999999881259539	WITHOUT_CLASSIFICATION	1.1874046084778868E-8	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999803495629478	WITHOUT_CLASSIFICATION	1.9650437052125427E-5	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999999808878639	WITHOUT_CLASSIFICATION	1.911213609674302E-8	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999997725841194	WITHOUT_CLASSIFICATION	2.2741588050083263E-7	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999977596807849	WITHOUT_CLASSIFICATION	2.240319215085287E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999996439515845	WITHOUT_CLASSIFICATION	3.5604841553054553E-7	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9998841052914992	WITHOUT_CLASSIFICATION	1.1589470850085008E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999486848845	WITHOUT_CLASSIFICATION	5.131511556003311E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999486848845	WITHOUT_CLASSIFICATION	5.131511556003311E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999486848845	WITHOUT_CLASSIFICATION	5.131511556003311E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999486848845	WITHOUT_CLASSIFICATION	5.131511556003311E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999486848845	WITHOUT_CLASSIFICATION	5.131511556003311E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999486848845	WITHOUT_CLASSIFICATION	5.131511556003311E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999486848845	WITHOUT_CLASSIFICATION	5.131511556003311E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999486848845	WITHOUT_CLASSIFICATION	5.131511556003311E-8	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9975593804310258	WITHOUT_CLASSIFICATION	0.0024406195689741965	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9998859058447179	WITHOUT_CLASSIFICATION	1.1409415528218478E-4	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999519529178559	WITHOUT_CLASSIFICATION	4.804708214409578E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9881363813160144	WITHOUT_CLASSIFICATION	0.011863618683985461	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999996353862625	WITHOUT_CLASSIFICATION	3.6461373751424043E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999996353862625	WITHOUT_CLASSIFICATION	3.6461373751424043E-6	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999999593059502	WITHOUT_CLASSIFICATION	4.0694049834341376E-8	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999996958602732	WITHOUT_CLASSIFICATION	3.0413972690256737E-7	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999999867573834	WITHOUT_CLASSIFICATION	1.3242616607100669E-8	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9999698620645493	WITHOUT_CLASSIFICATION	3.013793545062509E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999976514068211	WITHOUT_CLASSIFICATION	2.3485931790277566E-6	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999991903583372	WITHOUT_CLASSIFICATION	8.096416628865283E-7	DEFECT
// read	WITHOUT_CLASSIFICATION	0.99999850621367	WITHOUT_CLASSIFICATION	1.4937863299727194E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.99865787938158	WITHOUT_CLASSIFICATION	0.0013421206184199273	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999991293249735	WITHOUT_CLASSIFICATION	8.706750266463052E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999989948850647	WITHOUT_CLASSIFICATION	1.0051149353010854E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999989948850647	WITHOUT_CLASSIFICATION	1.0051149353010854E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999989948850647	WITHOUT_CLASSIFICATION	1.0051149353010854E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.999999929461516	WITHOUT_CLASSIFICATION	7.05384840471368E-8	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999940267313319	WITHOUT_CLASSIFICATION	5.973268668135988E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999963090178647	WITHOUT_CLASSIFICATION	3.690982135297057E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999586771829	WITHOUT_CLASSIFICATION	4.13228169271062E-8	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999812642137026	WITHOUT_CLASSIFICATION	1.873578629742643E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999733443895	WITHOUT_CLASSIFICATION	2.665561047583041E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999759776236	WITHOUT_CLASSIFICATION	2.4022376423112713E-8	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999954048548908	WITHOUT_CLASSIFICATION	4.595145109258045E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999990663056797	WITHOUT_CLASSIFICATION	9.336943203427274E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999990663056797	WITHOUT_CLASSIFICATION	9.336943203427274E-7	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999971403255886	WITHOUT_CLASSIFICATION	2.8596744113035397E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999690490388	WITHOUT_CLASSIFICATION	3.09509611931691E-8	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999883992766476	WITHOUT_CLASSIFICATION	1.160072335242889E-5	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9990220892766672	WITHOUT_CLASSIFICATION	9.77910723332804E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996948186307	WITHOUT_CLASSIFICATION	3.051813693218176E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996948186307	WITHOUT_CLASSIFICATION	3.051813693218176E-7	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999998142138946	WITHOUT_CLASSIFICATION	1.857861053514987E-7	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9999990796963474	WITHOUT_CLASSIFICATION	9.203036526702886E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999787471013671	WITHOUT_CLASSIFICATION	2.125289863280847E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999601943349983	WITHOUT_CLASSIFICATION	3.9805665001691086E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999601943349983	WITHOUT_CLASSIFICATION	3.9805665001691086E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999601943349983	WITHOUT_CLASSIFICATION	3.9805665001691086E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999355063331	WITHOUT_CLASSIFICATION	6.44936668644019E-8	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999992217990495	WITHOUT_CLASSIFICATION	7.782009505199199E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999992217990495	WITHOUT_CLASSIFICATION	7.782009505199199E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999998426587408	WITHOUT_CLASSIFICATION	1.5734125933654842E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999998426587408	WITHOUT_CLASSIFICATION	1.5734125933654842E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999987056163726	WITHOUT_CLASSIFICATION	1.2943836273981566E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999984718748717	WITHOUT_CLASSIFICATION	1.5281251282927385E-6	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999971544441788	WITHOUT_CLASSIFICATION	2.845555821163227E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999870449827124	WITHOUT_CLASSIFICATION	1.2955017287644568E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999798947969324	WITHOUT_CLASSIFICATION	2.0105203067613887E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999981083277669	WITHOUT_CLASSIFICATION	1.8916722330637348E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999991177664	WITHOUT_CLASSIFICATION	8.822336599132024E-10	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999980812523502	WITHOUT_CLASSIFICATION	1.9187476498274185E-6	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999999684246165	WITHOUT_CLASSIFICATION	3.1575383487496634E-8	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999931251430094	WITHOUT_CLASSIFICATION	6.874856990609566E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9675709039795354	DEFECT	0.03242909602046461	WITHOUT_CLASSIFICATION
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999996572708183	WITHOUT_CLASSIFICATION	3.4272918167770677E-7	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999987600432207	WITHOUT_CLASSIFICATION	1.2399567792954699E-6	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999990595161491	WITHOUT_CLASSIFICATION	9.404838509189719E-7	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999986173197036	WITHOUT_CLASSIFICATION	1.382680296316069E-6	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999997964357077	WITHOUT_CLASSIFICATION	2.035642923403997E-7	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999999005494672	WITHOUT_CLASSIFICATION	9.945053285493954E-8	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999988118017048	WITHOUT_CLASSIFICATION	1.1881982951152068E-6	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999893877841128	WITHOUT_CLASSIFICATION	1.0612215887113992E-5	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999999674815421	WITHOUT_CLASSIFICATION	3.2518457905782667E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999927735410093	WITHOUT_CLASSIFICATION	7.22645899059876E-6	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998569640875223	WITHOUT_CLASSIFICATION	1.4303591247757686E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999996802501583	WITHOUT_CLASSIFICATION	3.197498417299514E-7	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999997291089805	WITHOUT_CLASSIFICATION	2.7089101950429536E-7	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.99999991198546	WITHOUT_CLASSIFICATION	8.80145399439336E-8	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999935423528528	WITHOUT_CLASSIFICATION	6.457647147175798E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999941468333906	WITHOUT_CLASSIFICATION	5.85316660935123E-6	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999999928650604	WITHOUT_CLASSIFICATION	7.134939536285485E-9	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999991113466206	WITHOUT_CLASSIFICATION	8.886533795446358E-7	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9997967226066745	WITHOUT_CLASSIFICATION	2.0327739332555499E-4	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999998968792682	WITHOUT_CLASSIFICATION	1.031207318630581E-7	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999994955193213	WITHOUT_CLASSIFICATION	5.044806785855197E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.999998753285712	WITHOUT_CLASSIFICATION	1.2467142880804135E-6	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999995565679676	WITHOUT_CLASSIFICATION	4.434320325073029E-7	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999999424493332	WITHOUT_CLASSIFICATION	5.7550666787424204E-8	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9999864898324091	WITHOUT_CLASSIFICATION	1.3510167590929377E-5	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999999751225298	WITHOUT_CLASSIFICATION	2.487747030344216E-8	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999999256314721	WITHOUT_CLASSIFICATION	7.436852782840278E-8	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999994153656817	WITHOUT_CLASSIFICATION	5.846343182577287E-7	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9987250638462918	WITHOUT_CLASSIFICATION	0.0012749361537082603	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999368150646895	WITHOUT_CLASSIFICATION	6.31849353105697E-5	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999972395818453	WITHOUT_CLASSIFICATION	2.760418154748588E-6	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999999949152798	WITHOUT_CLASSIFICATION	5.084720268045264E-9	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999990045327615	WITHOUT_CLASSIFICATION	9.954672385166496E-7	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9924883785683514	WITHOUT_CLASSIFICATION	0.007511621431648725	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999808858789	WITHOUT_CLASSIFICATION	1.911412113196684E-8	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999999886653375	WITHOUT_CLASSIFICATION	1.1334662541904692E-8	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999995189664389	WITHOUT_CLASSIFICATION	4.810335612063928E-7	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999956311118067	WITHOUT_CLASSIFICATION	4.368888193291022E-6	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999809562719065	WITHOUT_CLASSIFICATION	1.904372809351139E-5	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999989995189317	WITHOUT_CLASSIFICATION	1.00048106825993E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999995058163808	WITHOUT_CLASSIFICATION	4.94183619272359E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999995058163808	WITHOUT_CLASSIFICATION	4.94183619272359E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999999497008489	WITHOUT_CLASSIFICATION	5.029915110082544E-8	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999999497008489	WITHOUT_CLASSIFICATION	5.029915110082544E-8	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999604307613219	WITHOUT_CLASSIFICATION	3.9569238678005474E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999604307613219	WITHOUT_CLASSIFICATION	3.9569238678005474E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.99999824861638	WITHOUT_CLASSIFICATION	1.751383619945713E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.99999824861638	WITHOUT_CLASSIFICATION	1.751383619945713E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999272268648	WITHOUT_CLASSIFICATION	7.277313520051882E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999272268648	WITHOUT_CLASSIFICATION	7.277313520051882E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999272268648	WITHOUT_CLASSIFICATION	7.277313520051882E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999272268648	WITHOUT_CLASSIFICATION	7.277313520051882E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999272268648	WITHOUT_CLASSIFICATION	7.277313520051882E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999272268648	WITHOUT_CLASSIFICATION	7.277313520051882E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999272268648	WITHOUT_CLASSIFICATION	7.277313520051882E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999272268648	WITHOUT_CLASSIFICATION	7.277313520051882E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999272268648	WITHOUT_CLASSIFICATION	7.277313520051882E-8	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999975327778915	WITHOUT_CLASSIFICATION	2.4672221084612954E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999975327778915	WITHOUT_CLASSIFICATION	2.4672221084612954E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999975327778915	WITHOUT_CLASSIFICATION	2.4672221084612954E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999996646143436	WITHOUT_CLASSIFICATION	3.3538565629316536E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999960524948166	WITHOUT_CLASSIFICATION	3.947505183316194E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999960524948166	WITHOUT_CLASSIFICATION	3.947505183316194E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999960524948166	WITHOUT_CLASSIFICATION	3.947505183316194E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999995669904862	WITHOUT_CLASSIFICATION	4.33009513723718E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999995669904862	WITHOUT_CLASSIFICATION	4.33009513723718E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999995669904862	WITHOUT_CLASSIFICATION	4.33009513723718E-7	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999499085655854	WITHOUT_CLASSIFICATION	5.00914344145523E-5	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999998564400182	WITHOUT_CLASSIFICATION	1.4355998177188745E-7	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999573432360148	WITHOUT_CLASSIFICATION	4.265676398512948E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999520580541472	WITHOUT_CLASSIFICATION	4.794194585272725E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999520580541472	WITHOUT_CLASSIFICATION	4.794194585272725E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999520580541472	WITHOUT_CLASSIFICATION	4.794194585272725E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999978119970683	WITHOUT_CLASSIFICATION	2.1880029316513364E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999773056768262	WITHOUT_CLASSIFICATION	2.2694323173815938E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999773056768262	WITHOUT_CLASSIFICATION	2.2694323173815938E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9990913001897367	WITHOUT_CLASSIFICATION	9.08699810263229E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.99999999657849	WITHOUT_CLASSIFICATION	3.421510023580924E-9	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.99999999657849	WITHOUT_CLASSIFICATION	3.421510023580924E-9	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.8929129960756951	WITHOUT_CLASSIFICATION	0.10708700392430491	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.999999516614529	WITHOUT_CLASSIFICATION	4.83385470954671E-7	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999995978164621	WITHOUT_CLASSIFICATION	4.0218353785318726E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998079604235	WITHOUT_CLASSIFICATION	1.920395764381611E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998079604235	WITHOUT_CLASSIFICATION	1.920395764381611E-7	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.999997387674443	WITHOUT_CLASSIFICATION	2.612325557041393E-6	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999992086221464	WITHOUT_CLASSIFICATION	7.913778534873788E-7	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999996827243208	WITHOUT_CLASSIFICATION	3.172756791403869E-7	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9999977008529506	WITHOUT_CLASSIFICATION	2.2991470493663236E-6	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9995563652156169	WITHOUT_CLASSIFICATION	4.4363478438304326E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998079604235	WITHOUT_CLASSIFICATION	1.920395764381611E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998079604235	WITHOUT_CLASSIFICATION	1.920395764381611E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998079604235	WITHOUT_CLASSIFICATION	1.920395764381611E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998079604235	WITHOUT_CLASSIFICATION	1.920395764381611E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998079604235	WITHOUT_CLASSIFICATION	1.920395764381611E-7	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999999894371208	WITHOUT_CLASSIFICATION	1.0562879133269093E-8	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.999999539262677	WITHOUT_CLASSIFICATION	4.6073732296496916E-7	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999999784375819	WITHOUT_CLASSIFICATION	2.1562418020313093E-8	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999980072910621	WITHOUT_CLASSIFICATION	1.992708937830954E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9999908624533714	WITHOUT_CLASSIFICATION	9.137546628582064E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993125416551	WITHOUT_CLASSIFICATION	6.87458344831302E-7	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9830329030684976	WITHOUT_CLASSIFICATION	0.016967096931502494	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9996182046941486	WITHOUT_CLASSIFICATION	3.8179530585144176E-4	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999999384734238	WITHOUT_CLASSIFICATION	6.152657622415311E-8	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999998481516355	WITHOUT_CLASSIFICATION	1.5184836454443566E-7	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999968450143585	WITHOUT_CLASSIFICATION	3.154985641480532E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999852117444678	WITHOUT_CLASSIFICATION	1.478825553221754E-5	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999993488244217	WITHOUT_CLASSIFICATION	6.51175578289708E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999891797829	WITHOUT_CLASSIFICATION	1.0820217133544326E-8	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999433162790766	WITHOUT_CLASSIFICATION	5.6683720923455955E-5	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9998581429365515	WITHOUT_CLASSIFICATION	1.4185706344850625E-4	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999999457038236	WITHOUT_CLASSIFICATION	5.4296176485124894E-8	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.999999999940564	WITHOUT_CLASSIFICATION	5.943607807446162E-11	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.999996701155972	WITHOUT_CLASSIFICATION	3.2988440281356232E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999996139884735	WITHOUT_CLASSIFICATION	3.8601152657101496E-7	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.999996681760806	WITHOUT_CLASSIFICATION	3.3182391938670988E-6	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999943612530545	WITHOUT_CLASSIFICATION	5.6387469454953206E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999969501913	WITHOUT_CLASSIFICATION	3.0498087200728766E-9	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.999999987842825	WITHOUT_CLASSIFICATION	1.2157175100965865E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.999999987842825	WITHOUT_CLASSIFICATION	1.2157175100965865E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.999999987842825	WITHOUT_CLASSIFICATION	1.2157175100965865E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.999999987842825	WITHOUT_CLASSIFICATION	1.2157175100965865E-8	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999911613073138	WITHOUT_CLASSIFICATION	8.838692686250817E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.99994873014736	WITHOUT_CLASSIFICATION	5.126985263996518E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999993790799098	WITHOUT_CLASSIFICATION	6.209200902870866E-7	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999993790799098	WITHOUT_CLASSIFICATION	6.209200902870866E-7	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999993576718389	WITHOUT_CLASSIFICATION	6.423281610277587E-7	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999945667970301	WITHOUT_CLASSIFICATION	5.433202969958373E-6	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999995387246442	WITHOUT_CLASSIFICATION	4.6127535581129726E-7	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999973038112	WITHOUT_CLASSIFICATION	2.6961888404005355E-9	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999138231532447	WITHOUT_CLASSIFICATION	8.61768467551952E-5	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999992366103719	WITHOUT_CLASSIFICATION	7.633896280540349E-7	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999916621478294	WITHOUT_CLASSIFICATION	8.337852170600554E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999977533770548	WITHOUT_CLASSIFICATION	2.2466229452636508E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999977533770548	WITHOUT_CLASSIFICATION	2.2466229452636508E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999977533770548	WITHOUT_CLASSIFICATION	2.2466229452636508E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999977533770548	WITHOUT_CLASSIFICATION	2.2466229452636508E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9986521990476502	WITHOUT_CLASSIFICATION	0.001347800952349772	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999989502977025	WITHOUT_CLASSIFICATION	1.0497022974869718E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999989502977025	WITHOUT_CLASSIFICATION	1.0497022974869718E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999989502977025	WITHOUT_CLASSIFICATION	1.0497022974869718E-6	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999998954077043	WITHOUT_CLASSIFICATION	1.045922957155336E-7	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999998706059183	WITHOUT_CLASSIFICATION	1.2939408163212693E-7	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.999999505403616	WITHOUT_CLASSIFICATION	4.94596383916039E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9954049979708167	WITHOUT_CLASSIFICATION	0.004595002029183291	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9954049979708167	WITHOUT_CLASSIFICATION	0.004595002029183291	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999989723566295	WITHOUT_CLASSIFICATION	1.0276433705783138E-6	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9999075989744473	WITHOUT_CLASSIFICATION	9.240102555285178E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999165897143814	WITHOUT_CLASSIFICATION	8.341028561870684E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999165897143814	WITHOUT_CLASSIFICATION	8.341028561870684E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9996088242623962	WITHOUT_CLASSIFICATION	3.9117573760379164E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9996088242623962	WITHOUT_CLASSIFICATION	3.9117573760379164E-4	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.999999935245309	WITHOUT_CLASSIFICATION	6.475469098032946E-8	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.999999935650268	WITHOUT_CLASSIFICATION	6.434973203263677E-8	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999999894530337	WITHOUT_CLASSIFICATION	1.0546966292368433E-8	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.98687354648299	WITHOUT_CLASSIFICATION	0.013126453517010035	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999940312061029	WITHOUT_CLASSIFICATION	5.968793897037261E-6	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999998796245257	WITHOUT_CLASSIFICATION	1.2037547425148884E-7	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999677471236	WITHOUT_CLASSIFICATION	3.225287638873074E-8	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.999958706712759	WITHOUT_CLASSIFICATION	4.129328724094939E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.999999855537315	WITHOUT_CLASSIFICATION	1.4446268515404052E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999992074791	WITHOUT_CLASSIFICATION	7.925208568116936E-10	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999992074791	WITHOUT_CLASSIFICATION	7.925208568116936E-10	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999997811855674	WITHOUT_CLASSIFICATION	2.1881443248131654E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999997811855674	WITHOUT_CLASSIFICATION	2.1881443248131654E-7	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9999909614021875	WITHOUT_CLASSIFICATION	9.038597812560751E-6	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999983663231362	WITHOUT_CLASSIFICATION	1.633676863786815E-6	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999465012856805	WITHOUT_CLASSIFICATION	5.3498714319452243E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999977891244344	WITHOUT_CLASSIFICATION	2.2108755656174977E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999977891244344	WITHOUT_CLASSIFICATION	2.2108755656174977E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999977891244344	WITHOUT_CLASSIFICATION	2.2108755656174977E-6	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999901901277437	WITHOUT_CLASSIFICATION	9.809872256339337E-6	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999895550926456	WITHOUT_CLASSIFICATION	1.0444907354289136E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999884713031414	WITHOUT_CLASSIFICATION	1.152869685853272E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999911224572772	WITHOUT_CLASSIFICATION	8.877542722807994E-6	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999870073072108	WITHOUT_CLASSIFICATION	1.2992692789138548E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999861785945082	WITHOUT_CLASSIFICATION	1.3821405491723976E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.999990635693933	WITHOUT_CLASSIFICATION	9.364306067052693E-6	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999988655205637	WITHOUT_CLASSIFICATION	1.1344794363087529E-6	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9999890299593837	WITHOUT_CLASSIFICATION	1.0970040616374411E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999978036603187	WITHOUT_CLASSIFICATION	2.1963396814236405E-6	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9999999724296169	WITHOUT_CLASSIFICATION	2.7570383173747125E-8	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999997857932611	WITHOUT_CLASSIFICATION	2.142067388561052E-7	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999953831904286	WITHOUT_CLASSIFICATION	4.616809571406108E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9954049979708167	WITHOUT_CLASSIFICATION	0.004595002029183291	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.999954790155997	WITHOUT_CLASSIFICATION	4.5209844002949026E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999820144784529	WITHOUT_CLASSIFICATION	1.798552154705682E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999989828053302	WITHOUT_CLASSIFICATION	1.0171946699269685E-6	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998314112642873	WITHOUT_CLASSIFICATION	1.685887357126897E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998314112642873	WITHOUT_CLASSIFICATION	1.685887357126897E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998314112642873	WITHOUT_CLASSIFICATION	1.685887357126897E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998314112642873	WITHOUT_CLASSIFICATION	1.685887357126897E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998314112642873	WITHOUT_CLASSIFICATION	1.685887357126897E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999574046325004	WITHOUT_CLASSIFICATION	4.259536749956374E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998314112642873	WITHOUT_CLASSIFICATION	1.685887357126897E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998314112642873	WITHOUT_CLASSIFICATION	1.685887357126897E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998314112642873	WITHOUT_CLASSIFICATION	1.685887357126897E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999985779220846	WITHOUT_CLASSIFICATION	1.4220779154647987E-6	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999888131514232	WITHOUT_CLASSIFICATION	1.118684857677828E-5	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.8081919861426513	DEFECT	0.19180801385734864	WITHOUT_CLASSIFICATION
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9998077913464912	WITHOUT_CLASSIFICATION	1.922086535088425E-4	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999920134408107	WITHOUT_CLASSIFICATION	7.986559189375862E-6	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.999999516399864	WITHOUT_CLASSIFICATION	4.836001359610872E-7	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999999995089677	WITHOUT_CLASSIFICATION	4.910323811072422E-10	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.999969151341474	WITHOUT_CLASSIFICATION	3.084865852604701E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999897179299653	WITHOUT_CLASSIFICATION	1.0282070034639386E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999897179299653	WITHOUT_CLASSIFICATION	1.0282070034639386E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999583122692733	WITHOUT_CLASSIFICATION	4.1687730726551E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999835007667814	WITHOUT_CLASSIFICATION	1.6499233218546955E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999884806066515	WITHOUT_CLASSIFICATION	1.1519393348577217E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999866087385154	WITHOUT_CLASSIFICATION	1.3391261484597254E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999873443791062	WITHOUT_CLASSIFICATION	1.2655620893814193E-5	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999870462209516	WITHOUT_CLASSIFICATION	1.2953779048476965E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999915166108209	WITHOUT_CLASSIFICATION	8.483389179057343E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999894036664965	WITHOUT_CLASSIFICATION	1.0596333503637914E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999898709686702	WITHOUT_CLASSIFICATION	1.012903132968934E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999910010399258	WITHOUT_CLASSIFICATION	8.998960074233905E-6	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999897588627412	WITHOUT_CLASSIFICATION	1.024113725884553E-5	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999900451194345	WITHOUT_CLASSIFICATION	9.954880565531834E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999912338147243	WITHOUT_CLASSIFICATION	8.766185275729282E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999867305837081	WITHOUT_CLASSIFICATION	1.3269416291929494E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999898242835856	WITHOUT_CLASSIFICATION	1.0175716414293053E-5	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999918322084715	WITHOUT_CLASSIFICATION	8.167791528483446E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999906417277297	WITHOUT_CLASSIFICATION	9.358272270464898E-6	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999940128680661	WITHOUT_CLASSIFICATION	5.987131933780048E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999888022307633	WITHOUT_CLASSIFICATION	1.1197769236718319E-5	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999744591351646	WITHOUT_CLASSIFICATION	2.55408648354231E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999903210148605	WITHOUT_CLASSIFICATION	9.678985139434512E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999793661670038	WITHOUT_CLASSIFICATION	2.063383299619873E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999924675590726	WITHOUT_CLASSIFICATION	7.532440927398619E-6	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999964664939848	WITHOUT_CLASSIFICATION	3.533506015293708E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999888837479435	WITHOUT_CLASSIFICATION	1.1116252056593823E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999916490092913	WITHOUT_CLASSIFICATION	8.350990708694274E-6	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999918231260858	WITHOUT_CLASSIFICATION	8.17687391419358E-6	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.99998928111153	WITHOUT_CLASSIFICATION	1.0718888469981918E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999914363161501	WITHOUT_CLASSIFICATION	8.563683849930343E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999933241254093	WITHOUT_CLASSIFICATION	6.6758745906884144E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999925402965941	WITHOUT_CLASSIFICATION	7.459703405809981E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999943825909245	WITHOUT_CLASSIFICATION	5.617409075418307E-6	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999893925779867	WITHOUT_CLASSIFICATION	1.0607422013449072E-5	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999927597798891	WITHOUT_CLASSIFICATION	7.24022011089793E-6	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999881705114083	WITHOUT_CLASSIFICATION	1.1829488591680521E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999932228090473	WITHOUT_CLASSIFICATION	6.77719095269435E-6	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999898376447752	WITHOUT_CLASSIFICATION	1.0162355224764089E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999856629110766	WITHOUT_CLASSIFICATION	1.4337088923409941E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999888317525202	WITHOUT_CLASSIFICATION	1.1168247479779022E-5	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999824823099313	WITHOUT_CLASSIFICATION	1.7517690068837327E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999924723246335	WITHOUT_CLASSIFICATION	7.52767536646813E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.999988798700988	WITHOUT_CLASSIFICATION	1.1201299011912806E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999801503397551	WITHOUT_CLASSIFICATION	1.9849660244992186E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999906182825196	WITHOUT_CLASSIFICATION	9.381717480544385E-6	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999918796984959	WITHOUT_CLASSIFICATION	8.120301504080063E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999896451405536	WITHOUT_CLASSIFICATION	1.0354859446398873E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999840377714008	WITHOUT_CLASSIFICATION	1.5962228599267727E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999884474669228	WITHOUT_CLASSIFICATION	1.1552533077033025E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999818282581528	WITHOUT_CLASSIFICATION	1.8171741847095512E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999891327509652	WITHOUT_CLASSIFICATION	1.0867249034763746E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.999982674050244	WITHOUT_CLASSIFICATION	1.7325949755983767E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999774670627339	WITHOUT_CLASSIFICATION	2.253293726608116E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999812624239293	WITHOUT_CLASSIFICATION	1.873757607077741E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999857934524344	WITHOUT_CLASSIFICATION	1.4206547565544645E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999857934524344	WITHOUT_CLASSIFICATION	1.4206547565544645E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999862646568388	WITHOUT_CLASSIFICATION	1.3735343161245239E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999863802910626	WITHOUT_CLASSIFICATION	1.3619708937419707E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999861643392292	WITHOUT_CLASSIFICATION	1.3835660770850542E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999781468955176	WITHOUT_CLASSIFICATION	2.1853104482421113E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999925357089211	WITHOUT_CLASSIFICATION	7.464291078868025E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999750165799136	WITHOUT_CLASSIFICATION	2.4983420086341938E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999864375507551	WITHOUT_CLASSIFICATION	1.3562449244898887E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999738945953881	WITHOUT_CLASSIFICATION	2.6105404611858532E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999728267481505	WITHOUT_CLASSIFICATION	2.7173251849557304E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999868082041281	WITHOUT_CLASSIFICATION	1.3191795871765463E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999993126462627	WITHOUT_CLASSIFICATION	6.873537372087898E-7	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999993126462627	WITHOUT_CLASSIFICATION	6.873537372087898E-7	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.999997837253101	WITHOUT_CLASSIFICATION	2.1627468989197894E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9998305871084091	WITHOUT_CLASSIFICATION	1.694128915909462E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9997513371640064	WITHOUT_CLASSIFICATION	2.486628359935565E-4	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999999995529939	WITHOUT_CLASSIFICATION	4.470060582885575E-10	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999947822894	WITHOUT_CLASSIFICATION	5.217710593280647E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999947822894	WITHOUT_CLASSIFICATION	5.217710593280647E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999947822894	WITHOUT_CLASSIFICATION	5.217710593280647E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999947822894	WITHOUT_CLASSIFICATION	5.217710593280647E-9	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9600427783961007	DEFECT	0.039957221603899314	WITHOUT_CLASSIFICATION
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9732158689981999	WITHOUT_CLASSIFICATION	0.026784131001800094	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999934865146967	WITHOUT_CLASSIFICATION	6.513485303358051E-6	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999919062059093	WITHOUT_CLASSIFICATION	8.093794090781528E-6	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999917185479107	WITHOUT_CLASSIFICATION	8.281452089220602E-6	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999904736996201	WITHOUT_CLASSIFICATION	9.526300379847501E-6	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999903457497724	WITHOUT_CLASSIFICATION	9.654250227673859E-6	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999815397036189	WITHOUT_CLASSIFICATION	1.8460296381065892E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9999752025142367	WITHOUT_CLASSIFICATION	2.479748576329289E-5	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999892730947589	WITHOUT_CLASSIFICATION	1.0726905241046797E-5	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999874573984624	WITHOUT_CLASSIFICATION	1.2542601537480762E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999774189598204	WITHOUT_CLASSIFICATION	2.258104017958027E-5	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999850987925777	WITHOUT_CLASSIFICATION	1.4901207422212136E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999871371364291	WITHOUT_CLASSIFICATION	1.2862863570848243E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999854008002804	WITHOUT_CLASSIFICATION	1.4599199719571454E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999865755299429	WITHOUT_CLASSIFICATION	1.3424470057266491E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999918072562849	WITHOUT_CLASSIFICATION	8.192743715063242E-6	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999922175494735	WITHOUT_CLASSIFICATION	7.782450526545804E-6	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999886347150935	WITHOUT_CLASSIFICATION	1.1365284906473336E-5	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999877455174466	WITHOUT_CLASSIFICATION	1.2254482553380831E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999845638383829	WITHOUT_CLASSIFICATION	1.5436161617152867E-5	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999825484008156	WITHOUT_CLASSIFICATION	1.7451599184422937E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999748522928844	WITHOUT_CLASSIFICATION	2.5147707115697676E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999853932500912	WITHOUT_CLASSIFICATION	1.4606749908742578E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999846538103536	WITHOUT_CLASSIFICATION	1.5346189646336485E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999912634772413	WITHOUT_CLASSIFICATION	8.73652275872789E-6	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999869633589701	WITHOUT_CLASSIFICATION	1.3036641029909959E-5	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999937020563316	WITHOUT_CLASSIFICATION	6.297943668350759E-6	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999947552226686	WITHOUT_CLASSIFICATION	5.244777331528769E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999931078534642	WITHOUT_CLASSIFICATION	6.892146535814004E-6	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999937363848478	WITHOUT_CLASSIFICATION	6.263615152267731E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999897307180549	WITHOUT_CLASSIFICATION	1.0269281945143384E-5	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999889031665261	WITHOUT_CLASSIFICATION	1.1096833473773488E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999856411070482	WITHOUT_CLASSIFICATION	1.435889295184323E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999870484100816	WITHOUT_CLASSIFICATION	1.295158991834991E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999930096331409	WITHOUT_CLASSIFICATION	6.9903668591705714E-6	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999903651744889	WITHOUT_CLASSIFICATION	9.634825511037626E-6	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999928197005407	WITHOUT_CLASSIFICATION	7.180299459362129E-6	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999830672215888	WITHOUT_CLASSIFICATION	1.6932778411240403E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999867192463798	WITHOUT_CLASSIFICATION	1.3280753620148647E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999846064727443	WITHOUT_CLASSIFICATION	1.5393527255651116E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999882328575938	WITHOUT_CLASSIFICATION	1.1767142406380344E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999883603261057	WITHOUT_CLASSIFICATION	1.1639673894254698E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999889555119391	WITHOUT_CLASSIFICATION	1.1044488060915218E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999894622286574	WITHOUT_CLASSIFICATION	1.0537771342692368E-5	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999920168421305	WITHOUT_CLASSIFICATION	7.983157869539112E-6	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999889758606829	WITHOUT_CLASSIFICATION	1.102413931712492E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999902417575828	WITHOUT_CLASSIFICATION	9.758242417188843E-6	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999764555035623	WITHOUT_CLASSIFICATION	2.3544496437666868E-5	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999721717879674	WITHOUT_CLASSIFICATION	2.7828212032661938E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999853024089053	WITHOUT_CLASSIFICATION	1.4697591094736215E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999817370090481	WITHOUT_CLASSIFICATION	1.826299095181521E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999888298700443	WITHOUT_CLASSIFICATION	1.1170129955718986E-5	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.999992252565032	WITHOUT_CLASSIFICATION	7.747434968009841E-6	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.999988541808308	WITHOUT_CLASSIFICATION	1.1458191691998547E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.999976875028895	WITHOUT_CLASSIFICATION	2.3124971105045106E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999873998155363	WITHOUT_CLASSIFICATION	1.2600184463660273E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.999985828657591	WITHOUT_CLASSIFICATION	1.4171342409037883E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999829232898756	WITHOUT_CLASSIFICATION	1.7076710124393767E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999999701701955	WITHOUT_CLASSIFICATION	2.982980460743291E-8	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999997667427556	WITHOUT_CLASSIFICATION	2.3325724425600104E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999803667542652	WITHOUT_CLASSIFICATION	1.963324573483426E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999803667542652	WITHOUT_CLASSIFICATION	1.963324573483426E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999803667542652	WITHOUT_CLASSIFICATION	1.963324573483426E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999803667542652	WITHOUT_CLASSIFICATION	1.963324573483426E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999803667542652	WITHOUT_CLASSIFICATION	1.963324573483426E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999803667542652	WITHOUT_CLASSIFICATION	1.963324573483426E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999803667542652	WITHOUT_CLASSIFICATION	1.963324573483426E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9997550395857401	WITHOUT_CLASSIFICATION	2.4496041425987186E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9997550395857401	WITHOUT_CLASSIFICATION	2.4496041425987186E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9997550395857401	WITHOUT_CLASSIFICATION	2.4496041425987186E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9997550395857401	WITHOUT_CLASSIFICATION	2.4496041425987186E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999426236037902	WITHOUT_CLASSIFICATION	5.737639620978256E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999426236037902	WITHOUT_CLASSIFICATION	5.737639620978256E-5	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9999978470493905	WITHOUT_CLASSIFICATION	2.1529506095714917E-6	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998201921552	WITHOUT_CLASSIFICATION	1.7980784480116787E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998201921552	WITHOUT_CLASSIFICATION	1.7980784480116787E-7	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.999999749265606	WITHOUT_CLASSIFICATION	2.507343940975073E-7	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999998054082823	WITHOUT_CLASSIFICATION	1.9459171770507867E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977444652355	WITHOUT_CLASSIFICATION	2.2555347645029277E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977444652355	WITHOUT_CLASSIFICATION	2.2555347645029277E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977444652355	WITHOUT_CLASSIFICATION	2.2555347645029277E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977444652355	WITHOUT_CLASSIFICATION	2.2555347645029277E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977444652355	WITHOUT_CLASSIFICATION	2.2555347645029277E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977444652355	WITHOUT_CLASSIFICATION	2.2555347645029277E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977444652355	WITHOUT_CLASSIFICATION	2.2555347645029277E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999329702902	WITHOUT_CLASSIFICATION	6.702970979996515E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993402900352	WITHOUT_CLASSIFICATION	6.597099648089641E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999907310823191	WITHOUT_CLASSIFICATION	9.268917680909818E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999907310823191	WITHOUT_CLASSIFICATION	9.268917680909818E-6	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999999291267712	WITHOUT_CLASSIFICATION	7.087322881434863E-8	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999996976045903	WITHOUT_CLASSIFICATION	3.02395409734288E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999996976045903	WITHOUT_CLASSIFICATION	3.02395409734288E-7	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.999999997586378	WITHOUT_CLASSIFICATION	2.413622045346732E-9	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.7830684616244062	DEFECT	0.21693153837559379	WITHOUT_CLASSIFICATION
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9999972941361148	WITHOUT_CLASSIFICATION	2.7058638851013123E-6	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9991795351131393	WITHOUT_CLASSIFICATION	8.20464886860827E-4	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999997299814791	WITHOUT_CLASSIFICATION	2.70018520771147E-7	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999987399631776	WITHOUT_CLASSIFICATION	1.260036822483885E-6	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999977475022935	WITHOUT_CLASSIFICATION	2.25249770640555E-6	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999989479449366	WITHOUT_CLASSIFICATION	1.0520550634297782E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999867902152	WITHOUT_CLASSIFICATION	1.3209784752346004E-8	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9999507727390448	WITHOUT_CLASSIFICATION	4.922726095532279E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999840037145297	WITHOUT_CLASSIFICATION	1.5996285470355973E-5	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999997309228674	WITHOUT_CLASSIFICATION	2.690771325384096E-7	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999716941571	WITHOUT_CLASSIFICATION	2.8305842958302863E-8	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999945380389177	WITHOUT_CLASSIFICATION	5.461961082262476E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999987558914706	WITHOUT_CLASSIFICATION	1.2441085295220287E-6	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999995561130149	WITHOUT_CLASSIFICATION	4.438869850260316E-7	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.999999996314134	WITHOUT_CLASSIFICATION	3.6858660170609572E-9	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999370031810438	WITHOUT_CLASSIFICATION	6.299681895614668E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999976219704612	WITHOUT_CLASSIFICATION	2.378029538842126E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999976219704612	WITHOUT_CLASSIFICATION	2.378029538842126E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999979023965663	WITHOUT_CLASSIFICATION	2.097603433657257E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999896836343	WITHOUT_CLASSIFICATION	1.031636554503937E-8	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999925934657263	WITHOUT_CLASSIFICATION	7.406534273630597E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999923668442524	WITHOUT_CLASSIFICATION	7.633155747534615E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999760898497333	WITHOUT_CLASSIFICATION	2.3910150266653334E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999760898497333	WITHOUT_CLASSIFICATION	2.3910150266653334E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999760898497333	WITHOUT_CLASSIFICATION	2.3910150266653334E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999997340053318	WITHOUT_CLASSIFICATION	2.659946682019178E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9998126114836493	WITHOUT_CLASSIFICATION	1.8738851635070365E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999995009661818	WITHOUT_CLASSIFICATION	4.990338181275642E-7	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999982476784343	WITHOUT_CLASSIFICATION	1.7523215657399675E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999922148648126	WITHOUT_CLASSIFICATION	7.78513518741622E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999999591720202	WITHOUT_CLASSIFICATION	4.082797981717387E-8	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9997416486291806	WITHOUT_CLASSIFICATION	2.583513708194784E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999930331891654	WITHOUT_CLASSIFICATION	6.966810834524017E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999994636503545	WITHOUT_CLASSIFICATION	5.363496454417832E-7	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999997575152635	WITHOUT_CLASSIFICATION	2.4248473651394075E-7	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.999999581282712	WITHOUT_CLASSIFICATION	4.187172880543772E-7	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999991414543837	WITHOUT_CLASSIFICATION	8.585456162599755E-7	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.8026587243856617	WITHOUT_CLASSIFICATION	0.19734127561433829	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9997642851510807	WITHOUT_CLASSIFICATION	2.3571484891921754E-4	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999999998571713	WITHOUT_CLASSIFICATION	1.428288080999981E-10	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999996001753949	WITHOUT_CLASSIFICATION	3.9982460501685073E-7	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999970914333871	WITHOUT_CLASSIFICATION	2.908566612874108E-6	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999977228362076	WITHOUT_CLASSIFICATION	2.2771637923597734E-6	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999930984246176	WITHOUT_CLASSIFICATION	6.901575382468087E-6	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9422205745173673	DEFECT	0.05777942548263274	WITHOUT_CLASSIFICATION
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9905504654311658	DEFECT	0.00944953456883413	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9980106581791354	WITHOUT_CLASSIFICATION	0.001989341820864603	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9046829468943659	DEFECT	0.09531705310563415	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.999969154143694	DEFECT	3.084585630604326E-5	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.703782937117166	WITHOUT_CLASSIFICATION	0.29621706288283395	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.8938267724345531	DEFECT	0.1061732275654469	WITHOUT_CLASSIFICATION
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9697822660947931	WITHOUT_CLASSIFICATION	0.03021773390520686	DEFECT
// FIXME: not correct exception	DEFECT	0.9995178481666296	DEFECT	4.821518333704271E-4	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9930102088411542	WITHOUT_CLASSIFICATION	0.006989791158845708	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9998122539650842	WITHOUT_CLASSIFICATION	1.8774603491577763E-4	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.7521009523269265	WITHOUT_CLASSIFICATION	0.24789904767307347	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9993988550807245	WITHOUT_CLASSIFICATION	6.011449192755636E-4	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.8089604065890232	DEFECT	0.19103959341097665	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.9273977563186017	WITHOUT_CLASSIFICATION	0.07260224368139827	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9514494462317882	WITHOUT_CLASSIFICATION	0.0485505537682119	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9514494462317882	WITHOUT_CLASSIFICATION	0.0485505537682119	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9739468922948012	WITHOUT_CLASSIFICATION	0.02605310770519873	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.7050581439633188	WITHOUT_CLASSIFICATION	0.29494185603668127	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9632439782545876	DEFECT	0.03675602174541247	WITHOUT_CLASSIFICATION
// ENEBO: Very wrong	DEFECT	0.9998835974010148	WITHOUT_CLASSIFICATION	1.1640259898521439E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9998835974010148	WITHOUT_CLASSIFICATION	1.1640259898521439E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.9941487054509831	DEFECT	0.005851294549016926	WITHOUT_CLASSIFICATION
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9996288135166502	DEFECT	3.7118648334971905E-4	WITHOUT_CLASSIFICATION
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.8270966217377689	DEFECT	0.17290337826223112	WITHOUT_CLASSIFICATION
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.9156754220363362	WITHOUT_CLASSIFICATION	0.08432457796366376	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.5289993319019166	WITHOUT_CLASSIFICATION	0.47100066809808344	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.6669915067130316	WITHOUT_CLASSIFICATION	0.33300849328696847	DEFECT
// TODO: proper sign	DEFECT	0.9994142344454088	WITHOUT_CLASSIFICATION	5.85765554591135E-4	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.999820413004352	DEFECT	1.7958699564796557E-4	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.9886693452617342	DEFECT	0.011330654738265658	WITHOUT_CLASSIFICATION
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.9999534086210414	DEFECT	4.659137895850923E-5	WITHOUT_CLASSIFICATION
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.9952522474094596	DEFECT	0.004747752590540377	WITHOUT_CLASSIFICATION
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9990875052356387	DEFECT	9.124947643612484E-4	WITHOUT_CLASSIFICATION
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.8967293376814441	WITHOUT_CLASSIFICATION	0.10327066231855592	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.9514424090827861	WITHOUT_CLASSIFICATION	0.048557590917213976	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.9800081312242162	DEFECT	0.019991868775783753	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.5507476262426289	DEFECT	0.4492523737573712	WITHOUT_CLASSIFICATION
// SSS FIXME: Incorect!	DEFECT	0.918811720456425	DEFECT	0.08118827954357505	WITHOUT_CLASSIFICATION
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9999713211303903	DEFECT	2.8678869609690557E-5	WITHOUT_CLASSIFICATION
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.94539942350804	WITHOUT_CLASSIFICATION	0.05460057649196001	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9999964460796429	WITHOUT_CLASSIFICATION	3.553920357136122E-6	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.8183725848417714	DEFECT	0.18162741515822867	WITHOUT_CLASSIFICATION
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.8183725848417714	DEFECT	0.18162741515822867	WITHOUT_CLASSIFICATION
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9210901153935822	DEFECT	0.07890988460641774	WITHOUT_CLASSIFICATION
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9960121424929186	WITHOUT_CLASSIFICATION	0.003987857507081352	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.999993491027433	DEFECT	6.508972567080914E-6	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.8579487606180087	WITHOUT_CLASSIFICATION	0.1420512393819913	DEFECT
// FIXME: This is wrong	DEFECT	0.9969224697125876	DEFECT	0.003077530287412515	WITHOUT_CLASSIFICATION
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9978225432078994	DEFECT	0.002177456792100516	WITHOUT_CLASSIFICATION
// XXX Wrong, but will have to do for now	DEFECT	0.9998642787360957	WITHOUT_CLASSIFICATION	1.357212639042625E-4	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.9930403710554507	DEFECT	0.006959628944549272	WITHOUT_CLASSIFICATION
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.7489845168054959	WITHOUT_CLASSIFICATION	0.25101548319450406	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.999726235417951	WITHOUT_CLASSIFICATION	2.7376458204907605E-4	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9999817746181049	DEFECT	1.822538189503886E-5	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8822334834544908	WITHOUT_CLASSIFICATION	0.11776651654550921	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8822334834544908	WITHOUT_CLASSIFICATION	0.11776651654550921	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9999710199873668	DEFECT	2.8980012633154512E-5	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9280229614647432	DEFECT	0.07197703853525676	WITHOUT_CLASSIFICATION
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9995980365377146	DEFECT	4.019634622854343E-4	WITHOUT_CLASSIFICATION
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9998822344960082	WITHOUT_CLASSIFICATION	1.1776550399182406E-4	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9997484917767255	DEFECT	2.515082232745059E-4	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9968137941791375	DEFECT	0.0031862058208624137	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9986699292292752	WITHOUT_CLASSIFICATION	0.001330070770724768	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9999698400948235	DEFECT	3.0159905176547686E-5	WITHOUT_CLASSIFICATION
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9210901153935822	DEFECT	0.07890988460641774	WITHOUT_CLASSIFICATION
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9999482040966776	WITHOUT_CLASSIFICATION	5.179590332242419E-5	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9990184893252481	DEFECT	9.81510674751921E-4	WITHOUT_CLASSIFICATION
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9967956615188514	WITHOUT_CLASSIFICATION	0.0032043384811486757	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.9156754220363362	WITHOUT_CLASSIFICATION	0.08432457796366376	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.8828572005506024	WITHOUT_CLASSIFICATION	0.11714279944939757	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.9993828250068281	DEFECT	6.171749931719267E-4	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.5507476262426289	DEFECT	0.4492523737573712	WITHOUT_CLASSIFICATION
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9743434201412857	WITHOUT_CLASSIFICATION	0.025656579858714248	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9999817746181049	DEFECT	1.822538189503886E-5	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.9226389642151896	DEFECT	0.07736103578481038	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// TODO: don't require pop	DEFECT	0.8423523460593835	WITHOUT_CLASSIFICATION	0.15764765394061653	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.9930403710554507	DEFECT	0.006959628944549272	WITHOUT_CLASSIFICATION
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.898291440127033	DEFECT	0.10170855987296692	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8822334834544908	WITHOUT_CLASSIFICATION	0.11776651654550921	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8822334834544908	WITHOUT_CLASSIFICATION	0.11776651654550921	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9280229614647432	DEFECT	0.07197703853525676	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9280229614647432	DEFECT	0.07197703853525676	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9280229614647432	DEFECT	0.07197703853525676	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9280229614647432	DEFECT	0.07197703853525676	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9280229614647432	DEFECT	0.07197703853525676	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9280229614647432	DEFECT	0.07197703853525676	WITHOUT_CLASSIFICATION
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9990349902286662	WITHOUT_CLASSIFICATION	9.650097713339806E-4	DEFECT
