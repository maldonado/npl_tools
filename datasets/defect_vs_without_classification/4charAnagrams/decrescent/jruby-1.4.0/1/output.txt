// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999999898775604	WITHOUT_CLASSIFICATION	1.0122439641805371E-8	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999967480714268	WITHOUT_CLASSIFICATION	3.251928573091797E-6	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999203901670134	WITHOUT_CLASSIFICATION	7.96098329866159E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999203901670134	WITHOUT_CLASSIFICATION	7.96098329866159E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999359875930347	WITHOUT_CLASSIFICATION	6.401240696527258E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999359875930347	WITHOUT_CLASSIFICATION	6.401240696527258E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.99949080258636	WITHOUT_CLASSIFICATION	5.091974136400535E-4	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999997947240555	WITHOUT_CLASSIFICATION	2.0527594446786272E-7	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.999995032175701	WITHOUT_CLASSIFICATION	4.9678242990549405E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999940953571241	WITHOUT_CLASSIFICATION	5.9046428757783496E-6	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9997614370505508	WITHOUT_CLASSIFICATION	2.385629494492014E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9997614370505508	WITHOUT_CLASSIFICATION	2.385629494492014E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999974513167472	WITHOUT_CLASSIFICATION	2.548683252797479E-6	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999685298978555	WITHOUT_CLASSIFICATION	3.147010214450342E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999685298978555	WITHOUT_CLASSIFICATION	3.147010214450342E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9999711128782807	WITHOUT_CLASSIFICATION	2.8887121719384395E-5	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999743479516806	WITHOUT_CLASSIFICATION	2.5652048319408548E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999585662334372	WITHOUT_CLASSIFICATION	4.143376656287925E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999585662334372	WITHOUT_CLASSIFICATION	4.143376656287925E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999585662334372	WITHOUT_CLASSIFICATION	4.143376656287925E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999585662334372	WITHOUT_CLASSIFICATION	4.143376656287925E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999585662334372	WITHOUT_CLASSIFICATION	4.143376656287925E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999585662334372	WITHOUT_CLASSIFICATION	4.143376656287925E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999585662334372	WITHOUT_CLASSIFICATION	4.143376656287925E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999943687931886	WITHOUT_CLASSIFICATION	5.6312068113997006E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999943687931886	WITHOUT_CLASSIFICATION	5.6312068113997006E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999943687931886	WITHOUT_CLASSIFICATION	5.6312068113997006E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999943687931886	WITHOUT_CLASSIFICATION	5.6312068113997006E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999943687931886	WITHOUT_CLASSIFICATION	5.6312068113997006E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999943687931886	WITHOUT_CLASSIFICATION	5.6312068113997006E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999943687931886	WITHOUT_CLASSIFICATION	5.6312068113997006E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9997069221635055	WITHOUT_CLASSIFICATION	2.930778364945167E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9997069221635055	WITHOUT_CLASSIFICATION	2.930778364945167E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9997069221635055	WITHOUT_CLASSIFICATION	2.930778364945167E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9997069221635055	WITHOUT_CLASSIFICATION	2.930778364945167E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9997069221635055	WITHOUT_CLASSIFICATION	2.930778364945167E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9997069221635055	WITHOUT_CLASSIFICATION	2.930778364945167E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9997901304481566	WITHOUT_CLASSIFICATION	2.098695518435769E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9997901304481566	WITHOUT_CLASSIFICATION	2.098695518435769E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9997901304481566	WITHOUT_CLASSIFICATION	2.098695518435769E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9997901304481566	WITHOUT_CLASSIFICATION	2.098695518435769E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9997901304481566	WITHOUT_CLASSIFICATION	2.098695518435769E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9997901304481566	WITHOUT_CLASSIFICATION	2.098695518435769E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9997231474230976	WITHOUT_CLASSIFICATION	2.7685257690241696E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9997231474230976	WITHOUT_CLASSIFICATION	2.7685257690241696E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9997231474230976	WITHOUT_CLASSIFICATION	2.7685257690241696E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9997231474230976	WITHOUT_CLASSIFICATION	2.7685257690241696E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9997231474230976	WITHOUT_CLASSIFICATION	2.7685257690241696E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9997231474230976	WITHOUT_CLASSIFICATION	2.7685257690241696E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9997231474230976	WITHOUT_CLASSIFICATION	2.7685257690241696E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998248524734301	WITHOUT_CLASSIFICATION	1.751475265699148E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998248524734301	WITHOUT_CLASSIFICATION	1.751475265699148E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998248524734301	WITHOUT_CLASSIFICATION	1.751475265699148E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998248524734301	WITHOUT_CLASSIFICATION	1.751475265699148E-4	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999528973855287	WITHOUT_CLASSIFICATION	4.710261447123593E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999528973855287	WITHOUT_CLASSIFICATION	4.710261447123593E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999983302405003	WITHOUT_CLASSIFICATION	1.6697594996312742E-6	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999990820653674	WITHOUT_CLASSIFICATION	9.179346325345938E-7	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999972025047852	WITHOUT_CLASSIFICATION	2.7974952147850574E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999988745198415	WITHOUT_CLASSIFICATION	1.1254801585100001E-6	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999993058328889	WITHOUT_CLASSIFICATION	6.941671112019395E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999868384951285	WITHOUT_CLASSIFICATION	1.3161504871503548E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999868384951285	WITHOUT_CLASSIFICATION	1.3161504871503548E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999868384951285	WITHOUT_CLASSIFICATION	1.3161504871503548E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999868384951285	WITHOUT_CLASSIFICATION	1.3161504871503548E-5	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9987695064993957	WITHOUT_CLASSIFICATION	0.0012304935006043638	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999835489085105	WITHOUT_CLASSIFICATION	1.6451091489451718E-5	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999987859132111	WITHOUT_CLASSIFICATION	1.2140867888569844E-6	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999998502986494	WITHOUT_CLASSIFICATION	1.497013506553159E-7	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999824963603	WITHOUT_CLASSIFICATION	1.7503639699947505E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999987792488122	WITHOUT_CLASSIFICATION	1.220751187789238E-6	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999782177148105	WITHOUT_CLASSIFICATION	2.178228518948703E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999999203334822	WITHOUT_CLASSIFICATION	7.966651784815575E-8	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.999998012264818	WITHOUT_CLASSIFICATION	1.987735182022797E-6	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9998720580736236	WITHOUT_CLASSIFICATION	1.2794192637644895E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999992705029801	WITHOUT_CLASSIFICATION	7.294970199731021E-7	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999795012856076	WITHOUT_CLASSIFICATION	2.049871439238193E-5	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999974685373078	WITHOUT_CLASSIFICATION	2.5314626923356737E-6	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999998511449493	WITHOUT_CLASSIFICATION	1.488550508094814E-7	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999970318117329	WITHOUT_CLASSIFICATION	2.9681882670508975E-6	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999585240476943	WITHOUT_CLASSIFICATION	4.147595230563483E-5	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999909340570067	WITHOUT_CLASSIFICATION	9.065942993305687E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999868384951285	WITHOUT_CLASSIFICATION	1.3161504871503548E-5	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999934392406642	WITHOUT_CLASSIFICATION	6.560759335768781E-6	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.999999702511499	WITHOUT_CLASSIFICATION	2.9748850105293137E-7	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999852091793034	WITHOUT_CLASSIFICATION	1.4790820696590352E-5	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999980667444547	WITHOUT_CLASSIFICATION	1.9332555453872776E-6	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9999973585670143	WITHOUT_CLASSIFICATION	2.6414329856709983E-6	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999997279035673	WITHOUT_CLASSIFICATION	2.720964326538772E-7	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.999998938394551	WITHOUT_CLASSIFICATION	1.0616054489508E-6	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999999712127662	WITHOUT_CLASSIFICATION	2.878723387005652E-8	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999997225418967	WITHOUT_CLASSIFICATION	2.774581031890002E-7	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9999648994155702	WITHOUT_CLASSIFICATION	3.510058442983408E-5	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9999403676329809	WITHOUT_CLASSIFICATION	5.963236701923786E-5	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999968347373693	WITHOUT_CLASSIFICATION	3.1652626305380724E-6	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999741659054772	WITHOUT_CLASSIFICATION	2.583409452285073E-5	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999897567824251	WITHOUT_CLASSIFICATION	1.0243217574962575E-5	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999963572918749	WITHOUT_CLASSIFICATION	3.642708125251825E-6	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999946262544626	WITHOUT_CLASSIFICATION	5.373745537499262E-6	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999972014166704	WITHOUT_CLASSIFICATION	2.7985833296086014E-6	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999991338273534	WITHOUT_CLASSIFICATION	8.661726465140407E-7	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.999979878841577	WITHOUT_CLASSIFICATION	2.0121158423003685E-5	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999989064630762	WITHOUT_CLASSIFICATION	1.0935369237221547E-6	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9682676810817509	WITHOUT_CLASSIFICATION	0.03173231891824909	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999928302043196	WITHOUT_CLASSIFICATION	7.169795680326307E-6	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999990308766596	WITHOUT_CLASSIFICATION	9.69123340395537E-7	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999677829604112	WITHOUT_CLASSIFICATION	3.221703958872326E-5	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999923958253257	WITHOUT_CLASSIFICATION	7.6041746742736E-6	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9999943914564736	WITHOUT_CLASSIFICATION	5.60854352635521E-6	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999250701574779	WITHOUT_CLASSIFICATION	7.492984252202076E-5	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.999998642451505	WITHOUT_CLASSIFICATION	1.357548495044178E-6	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999978526016541	WITHOUT_CLASSIFICATION	2.147398345979582E-6	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999919954970378	WITHOUT_CLASSIFICATION	8.004502962167493E-6	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999672803704869	WITHOUT_CLASSIFICATION	3.2719629513205096E-5	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9999946028957625	WITHOUT_CLASSIFICATION	5.397104237574718E-6	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999998793966735	WITHOUT_CLASSIFICATION	1.206033265289034E-7	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9998724118937471	WITHOUT_CLASSIFICATION	1.275881062527867E-4	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9974829240373355	WITHOUT_CLASSIFICATION	0.0025170759626645953	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999957746342535	WITHOUT_CLASSIFICATION	4.225365746506378E-6	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999999662851112	WITHOUT_CLASSIFICATION	3.3714888855716106E-8	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9995273101872544	WITHOUT_CLASSIFICATION	4.7268981274552094E-4	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999972728157681	WITHOUT_CLASSIFICATION	2.7271842319653207E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999976859099908	WITHOUT_CLASSIFICATION	2.314090009093701E-6	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999874022162237	WITHOUT_CLASSIFICATION	1.2597783776394064E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999976925615992	WITHOUT_CLASSIFICATION	2.3074384007643618E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9997392194741785	WITHOUT_CLASSIFICATION	2.607805258214522E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999862353558719	WITHOUT_CLASSIFICATION	1.3764644127934041E-5	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999862353558719	WITHOUT_CLASSIFICATION	1.3764644127934041E-5	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999997652717278	WITHOUT_CLASSIFICATION	2.3472827216290478E-7	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.999998848743168	WITHOUT_CLASSIFICATION	1.1512568319406831E-6	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999982348735476	WITHOUT_CLASSIFICATION	1.7651264523621664E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9999532183945092	WITHOUT_CLASSIFICATION	4.678160549071608E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9993404542773524	WITHOUT_CLASSIFICATION	6.595457226476143E-4	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.999993480615088	WITHOUT_CLASSIFICATION	6.519384912054914E-6	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9999896160762741	WITHOUT_CLASSIFICATION	1.0383923725768631E-5	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999883852125317	WITHOUT_CLASSIFICATION	1.1614787468184697E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999976925615992	WITHOUT_CLASSIFICATION	2.3074384007643618E-6	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999997086323402	WITHOUT_CLASSIFICATION	2.913676597943601E-7	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999894312761138	WITHOUT_CLASSIFICATION	1.0568723886241315E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999993153980825	WITHOUT_CLASSIFICATION	6.846019174501749E-7	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999998820899713	WITHOUT_CLASSIFICATION	1.1791002886124736E-7	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999994402071728	WITHOUT_CLASSIFICATION	5.59792827228529E-7	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999997084881537	WITHOUT_CLASSIFICATION	2.915118462595629E-7	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999997084881537	WITHOUT_CLASSIFICATION	2.915118462595629E-7	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999997084881537	WITHOUT_CLASSIFICATION	2.915118462595629E-7	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999727674122346	WITHOUT_CLASSIFICATION	2.723258776533276E-5	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999995727683919	WITHOUT_CLASSIFICATION	4.2723160802060376E-7	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999983168494397	WITHOUT_CLASSIFICATION	1.6831505603403785E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9051117937946801	WITHOUT_CLASSIFICATION	0.09488820620531992	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9998772036974212	WITHOUT_CLASSIFICATION	1.227963025788734E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999982925523153	WITHOUT_CLASSIFICATION	1.7074476846992066E-6	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9988814645872693	WITHOUT_CLASSIFICATION	0.0011185354127306029	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999993953026641	WITHOUT_CLASSIFICATION	6.046973358780962E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999986946027076	WITHOUT_CLASSIFICATION	1.3053972922919726E-6	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999986946027076	WITHOUT_CLASSIFICATION	1.3053972922919726E-6	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999933850059072	WITHOUT_CLASSIFICATION	6.6149940928504824E-6	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999998985596078	WITHOUT_CLASSIFICATION	1.0144039217024984E-7	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999932454101632	WITHOUT_CLASSIFICATION	6.754589836773316E-6	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999932454101632	WITHOUT_CLASSIFICATION	6.754589836773316E-6	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999966895567293	WITHOUT_CLASSIFICATION	3.31044327081512E-6	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999997398516235	WITHOUT_CLASSIFICATION	2.601483764876924E-7	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999729718937629	WITHOUT_CLASSIFICATION	2.7028106237118596E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999896425873095	WITHOUT_CLASSIFICATION	1.0357412690474565E-5	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999932982670189	WITHOUT_CLASSIFICATION	6.701732981186547E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999983273847327	WITHOUT_CLASSIFICATION	1.6726152672541417E-6	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999947186126642	WITHOUT_CLASSIFICATION	5.2813873357668175E-6	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999893364563923	WITHOUT_CLASSIFICATION	1.0663543607555642E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.999999668592174	WITHOUT_CLASSIFICATION	3.314078258926031E-7	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999985124448958	WITHOUT_CLASSIFICATION	1.4875551042972219E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999976925615992	WITHOUT_CLASSIFICATION	2.3074384007643618E-6	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999926434688599	WITHOUT_CLASSIFICATION	7.3565311401544654E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999991951003114	WITHOUT_CLASSIFICATION	8.048996885975983E-7	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999988178145863	WITHOUT_CLASSIFICATION	1.1821854137424017E-6	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9914744765481388	WITHOUT_CLASSIFICATION	0.00852552345186123	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999917441908243	WITHOUT_CLASSIFICATION	8.255809175759351E-6	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999770401926673	WITHOUT_CLASSIFICATION	2.2959807332723984E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999244221114333	WITHOUT_CLASSIFICATION	7.55778885667596E-5	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9998167935024757	WITHOUT_CLASSIFICATION	1.8320649752431325E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999998574646809	WITHOUT_CLASSIFICATION	1.4253531900851426E-7	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9998716367220881	WITHOUT_CLASSIFICATION	1.2836327791190892E-4	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.999999054625181	WITHOUT_CLASSIFICATION	9.453748188851615E-7	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999978722838943	WITHOUT_CLASSIFICATION	2.1277161056776584E-6	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9999922560233915	WITHOUT_CLASSIFICATION	7.743976608461293E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999995892397131	WITHOUT_CLASSIFICATION	4.107602868492567E-7	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9999996563280973	WITHOUT_CLASSIFICATION	3.436719028029466E-7	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.999999542194461	WITHOUT_CLASSIFICATION	4.5780553911878124E-7	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999997132051128	WITHOUT_CLASSIFICATION	2.86794887146633E-7	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999999179166862	WITHOUT_CLASSIFICATION	8.208331375311304E-8	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999989933668768	WITHOUT_CLASSIFICATION	1.006633123181491E-6	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999997308556557	WITHOUT_CLASSIFICATION	2.6914434416635724E-7	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999998755504645	WITHOUT_CLASSIFICATION	1.2444953542763047E-7	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999999233476716	WITHOUT_CLASSIFICATION	7.66523283539827E-8	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.999998701856559	WITHOUT_CLASSIFICATION	1.2981434408929488E-6	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999975579230722	WITHOUT_CLASSIFICATION	2.4420769276540294E-6	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999994921469472	WITHOUT_CLASSIFICATION	5.078530528590792E-7	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999911447663821	WITHOUT_CLASSIFICATION	8.855233617968241E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999908552455524	WITHOUT_CLASSIFICATION	9.144754447560337E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999981437141432	WITHOUT_CLASSIFICATION	1.8562858567825198E-6	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999976212263326	WITHOUT_CLASSIFICATION	2.378773667391797E-6	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999992451258449	WITHOUT_CLASSIFICATION	7.548741550619277E-7	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999996600032153	WITHOUT_CLASSIFICATION	3.399967846923048E-7	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999996578747374	WITHOUT_CLASSIFICATION	3.4212526253843055E-7	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999960565135065	WITHOUT_CLASSIFICATION	3.943486493405948E-6	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999678831248108	WITHOUT_CLASSIFICATION	3.2116875189233234E-5	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999987972484595	WITHOUT_CLASSIFICATION	1.202751540528449E-6	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999994296410389	WITHOUT_CLASSIFICATION	5.703589611179694E-7	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999992252309587	WITHOUT_CLASSIFICATION	7.747690413688991E-7	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9997225430410684	WITHOUT_CLASSIFICATION	2.774569589315056E-4	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.999998983373628	WITHOUT_CLASSIFICATION	1.0166263719728925E-6	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999989078222603	WITHOUT_CLASSIFICATION	1.0921777397524604E-6	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999948757411787	WITHOUT_CLASSIFICATION	5.12425882121684E-6	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999997668147234	WITHOUT_CLASSIFICATION	2.3318527667158924E-7	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999999183078543	WITHOUT_CLASSIFICATION	8.169214568607245E-8	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999988538892965	WITHOUT_CLASSIFICATION	1.1461107033996995E-6	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999888186493601	WITHOUT_CLASSIFICATION	1.1181350639873919E-5	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999970400365176	WITHOUT_CLASSIFICATION	2.9599634823709123E-6	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999976372447772	WITHOUT_CLASSIFICATION	2.362755222798224E-6	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.999981497959207	WITHOUT_CLASSIFICATION	1.8502040793017784E-5	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999985884417713	WITHOUT_CLASSIFICATION	1.4115582287663025E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999940711559135	WITHOUT_CLASSIFICATION	5.928844086472449E-6	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.999966228254976	WITHOUT_CLASSIFICATION	3.377174502392971E-5	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9998541386807996	WITHOUT_CLASSIFICATION	1.4586131920039168E-4	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999740431847529	WITHOUT_CLASSIFICATION	2.59568152471399E-5	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999991393599902	WITHOUT_CLASSIFICATION	8.606400098035285E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9997945116413278	WITHOUT_CLASSIFICATION	2.0548835867207783E-4	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999433556625026	WITHOUT_CLASSIFICATION	5.664433749744494E-5	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.999982668619667	WITHOUT_CLASSIFICATION	1.7331380333080873E-5	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999992390308193	WITHOUT_CLASSIFICATION	7.609691806665628E-7	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999996889788146	WITHOUT_CLASSIFICATION	3.1102118535180703E-7	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999997190241969	WITHOUT_CLASSIFICATION	2.809758030760353E-7	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999904308238412	WITHOUT_CLASSIFICATION	9.569176158851274E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999904308238412	WITHOUT_CLASSIFICATION	9.569176158851274E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999925869694261	WITHOUT_CLASSIFICATION	7.413030573984015E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999925869694261	WITHOUT_CLASSIFICATION	7.413030573984015E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999919973370204	WITHOUT_CLASSIFICATION	8.00266297963576E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999919973370204	WITHOUT_CLASSIFICATION	8.00266297963576E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999836072585074	WITHOUT_CLASSIFICATION	1.6392741492512703E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999836072585074	WITHOUT_CLASSIFICATION	1.6392741492512703E-5	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999968432655388	WITHOUT_CLASSIFICATION	3.1567344611880186E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.99999694683427	WITHOUT_CLASSIFICATION	3.0531657300968983E-6	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999818868134612	WITHOUT_CLASSIFICATION	1.8113186538670874E-5	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999980288406309	WITHOUT_CLASSIFICATION	1.971159369112691E-6	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999690474566271	WITHOUT_CLASSIFICATION	3.0952543372834125E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9999658874205499	WITHOUT_CLASSIFICATION	3.41125794501506E-5	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.999980381629545	WITHOUT_CLASSIFICATION	1.961837045502179E-5	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999998239332443	WITHOUT_CLASSIFICATION	1.760667557079151E-7	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.999999860177378	WITHOUT_CLASSIFICATION	1.3982262198501453E-7	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999998398516179	WITHOUT_CLASSIFICATION	1.6014838206405946E-7	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999999411713894	WITHOUT_CLASSIFICATION	5.882861062309319E-8	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999996185577763	WITHOUT_CLASSIFICATION	3.814422236710286E-7	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999979301416815	WITHOUT_CLASSIFICATION	2.069858318502955E-6	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999999005539278	WITHOUT_CLASSIFICATION	9.944607218554671E-8	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.999998060380608	WITHOUT_CLASSIFICATION	1.939619392008741E-6	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999979490440847	WITHOUT_CLASSIFICATION	2.0509559153057393E-6	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999851842049331	WITHOUT_CLASSIFICATION	1.4815795066910124E-5	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.999998418069513	WITHOUT_CLASSIFICATION	1.5819304869481175E-6	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999390820391565	WITHOUT_CLASSIFICATION	6.091796084359467E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9997616167032857	WITHOUT_CLASSIFICATION	2.38383296714415E-4	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999965905482682	WITHOUT_CLASSIFICATION	3.4094517318342597E-6	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999993856260128	WITHOUT_CLASSIFICATION	6.143739872080997E-7	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999989383612808	WITHOUT_CLASSIFICATION	1.0616387190843015E-6	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999873602812083	WITHOUT_CLASSIFICATION	1.2639718791730076E-5	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999978384497512	WITHOUT_CLASSIFICATION	2.1615502488353364E-6	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999991613099267	WITHOUT_CLASSIFICATION	8.386900732916855E-7	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999971932591811	WITHOUT_CLASSIFICATION	2.8067408188641237E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999983995337891	WITHOUT_CLASSIFICATION	1.600466210891435E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999983995337891	WITHOUT_CLASSIFICATION	1.600466210891435E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999998912924872	WITHOUT_CLASSIFICATION	1.0870751271033112E-7	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999962257884677	WITHOUT_CLASSIFICATION	3.77421153246381E-6	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999987402332334	WITHOUT_CLASSIFICATION	1.259766766620012E-6	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9972895294472324	WITHOUT_CLASSIFICATION	0.0027104705527674984	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999944419686747	WITHOUT_CLASSIFICATION	5.558031325259006E-6	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.999995181047592	WITHOUT_CLASSIFICATION	4.818952407998144E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.999982264040535	WITHOUT_CLASSIFICATION	1.7735959464931196E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.999982264040535	WITHOUT_CLASSIFICATION	1.7735959464931196E-5	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999998612133064	WITHOUT_CLASSIFICATION	1.387866935283418E-7	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9993880551151638	WITHOUT_CLASSIFICATION	6.119448848361526E-4	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999996159415621	WITHOUT_CLASSIFICATION	3.8405843797063407E-7	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999996159415621	WITHOUT_CLASSIFICATION	3.8405843797063407E-7	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9998695721079021	WITHOUT_CLASSIFICATION	1.3042789209786044E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9999989485401272	WITHOUT_CLASSIFICATION	1.0514598728664348E-6	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9999989485401272	WITHOUT_CLASSIFICATION	1.0514598728664348E-6	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.999995008275055	WITHOUT_CLASSIFICATION	4.9917249449567346E-6	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.999995008275055	WITHOUT_CLASSIFICATION	4.9917249449567346E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.999992170620357	WITHOUT_CLASSIFICATION	7.829379643103842E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.999992170620357	WITHOUT_CLASSIFICATION	7.829379643103842E-6	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.999985437873503	WITHOUT_CLASSIFICATION	1.456212649701084E-5	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999996047458466	WITHOUT_CLASSIFICATION	3.952541533885545E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999999793127972	WITHOUT_CLASSIFICATION	2.0687202907205953E-8	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999987809927436	WITHOUT_CLASSIFICATION	1.2190072563451932E-6	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999996720180458	WITHOUT_CLASSIFICATION	3.2798195422608574E-7	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999997214217548	WITHOUT_CLASSIFICATION	2.7857824525419314E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999995861339833	WITHOUT_CLASSIFICATION	4.138660166951532E-7	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999891749528791	WITHOUT_CLASSIFICATION	1.0825047120845626E-5	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999995861339833	WITHOUT_CLASSIFICATION	4.138660166951532E-7	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9999958621881045	WITHOUT_CLASSIFICATION	4.137811895478158E-6	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999966188800952	WITHOUT_CLASSIFICATION	3.381119904877086E-6	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999996945927101	WITHOUT_CLASSIFICATION	3.0540728981432196E-7	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999173231720724	WITHOUT_CLASSIFICATION	8.26768279276095E-5	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999999295740493	WITHOUT_CLASSIFICATION	7.042595073956738E-8	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9999926693066397	WITHOUT_CLASSIFICATION	7.330693360370693E-6	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.999995662868639	WITHOUT_CLASSIFICATION	4.3371313610630354E-6	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999980348298841	WITHOUT_CLASSIFICATION	1.9651701158899436E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999763363645904	WITHOUT_CLASSIFICATION	2.366363540966021E-5	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999991044408838	WITHOUT_CLASSIFICATION	8.955591162111436E-7	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999982237952213	WITHOUT_CLASSIFICATION	1.7762047787453837E-6	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.999999446395398	WITHOUT_CLASSIFICATION	5.536046021217622E-7	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999724967409849	WITHOUT_CLASSIFICATION	2.7503259015066727E-5	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999981266587776	WITHOUT_CLASSIFICATION	1.873341222464442E-6	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999916558657829	WITHOUT_CLASSIFICATION	8.34413421703622E-6	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999993590081453	WITHOUT_CLASSIFICATION	6.409918547429606E-7	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9998781271913442	WITHOUT_CLASSIFICATION	1.2187280865579124E-4	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9987083526655636	WITHOUT_CLASSIFICATION	0.0012916473344364294	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999919227855822	WITHOUT_CLASSIFICATION	8.077214417705942E-6	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999992961346471	WITHOUT_CLASSIFICATION	7.038653530241247E-7	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.999793126170044	WITHOUT_CLASSIFICATION	2.0687382995592248E-4	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.99997515775965	WITHOUT_CLASSIFICATION	2.4842240350017656E-5	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999297002144402	WITHOUT_CLASSIFICATION	7.029978555983509E-5	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9997106303702619	WITHOUT_CLASSIFICATION	2.8936962973815234E-4	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9999996401303327	WITHOUT_CLASSIFICATION	3.598696672842398E-7	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999979686540975	WITHOUT_CLASSIFICATION	2.0313459025360865E-6	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999994211486918	WITHOUT_CLASSIFICATION	5.788513082091259E-7	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999999869106359	WITHOUT_CLASSIFICATION	1.30893640045592E-8	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999698917476989	WITHOUT_CLASSIFICATION	3.0108252301033104E-5	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999924127870472	WITHOUT_CLASSIFICATION	7.587212952817984E-6	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999625064157663	WITHOUT_CLASSIFICATION	3.749358423368529E-5	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999946733037963	WITHOUT_CLASSIFICATION	5.326696203626815E-6	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999991733686169	WITHOUT_CLASSIFICATION	8.266313830445987E-7	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999988239105828	WITHOUT_CLASSIFICATION	1.1760894172041634E-6	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999092518845472	WITHOUT_CLASSIFICATION	9.074811545287871E-5	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999819926041535	WITHOUT_CLASSIFICATION	1.8007395846445394E-5	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9999584393639821	WITHOUT_CLASSIFICATION	4.156063601787062E-5	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999846339424061	WITHOUT_CLASSIFICATION	1.5366057593938392E-5	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999997389277271	WITHOUT_CLASSIFICATION	2.610722728851092E-7	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999873214590684	WITHOUT_CLASSIFICATION	1.2678540931553757E-5	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999994855402317	WITHOUT_CLASSIFICATION	5.144597684459485E-7	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999539031903666	WITHOUT_CLASSIFICATION	4.6096809633366894E-5	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999899470979955	WITHOUT_CLASSIFICATION	1.005290200438993E-5	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999959048823032	WITHOUT_CLASSIFICATION	4.0951176967353125E-6	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999911973011493	WITHOUT_CLASSIFICATION	8.802698850691024E-6	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999924337674704	WITHOUT_CLASSIFICATION	7.566232529647983E-6	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999989488359132	WITHOUT_CLASSIFICATION	1.0511640867601832E-6	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999910870978471	WITHOUT_CLASSIFICATION	8.91290215286086E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999998930609838	WITHOUT_CLASSIFICATION	1.069390162054401E-7	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9999956323687433	WITHOUT_CLASSIFICATION	4.3676312566683295E-6	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999577694507821	WITHOUT_CLASSIFICATION	4.223054921801253E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999982293669085	WITHOUT_CLASSIFICATION	1.7706330914602842E-6	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999744598424939	WITHOUT_CLASSIFICATION	2.5540157506094138E-5	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999787814532157	WITHOUT_CLASSIFICATION	2.1218546784330716E-5	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999998541333709	WITHOUT_CLASSIFICATION	1.458666289981737E-7	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999998541333709	WITHOUT_CLASSIFICATION	1.458666289981737E-7	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999997844561813	WITHOUT_CLASSIFICATION	2.1554381880086578E-7	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999998666102892	WITHOUT_CLASSIFICATION	1.3338971093766257E-7	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999980546303241	WITHOUT_CLASSIFICATION	1.9453696757875156E-6	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999988514854478	WITHOUT_CLASSIFICATION	1.1485145523191126E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9996400596096802	WITHOUT_CLASSIFICATION	3.599403903198155E-4	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999964413883844	WITHOUT_CLASSIFICATION	3.5586116156508974E-6	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9999987167075374	WITHOUT_CLASSIFICATION	1.2832924626104457E-6	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999991385973271	WITHOUT_CLASSIFICATION	8.614026729378293E-7	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999966112673462	WITHOUT_CLASSIFICATION	3.388732653965844E-6	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999998985431136	WITHOUT_CLASSIFICATION	1.0145688647486115E-7	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999997245189501	WITHOUT_CLASSIFICATION	2.754810498313454E-7	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999997245189501	WITHOUT_CLASSIFICATION	2.754810498313454E-7	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999993861224546	WITHOUT_CLASSIFICATION	6.138775454191613E-7	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999981350032876	WITHOUT_CLASSIFICATION	1.8649967124003733E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999810223516125	WITHOUT_CLASSIFICATION	1.897764838756184E-5	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999999193734296	WITHOUT_CLASSIFICATION	8.062657047171731E-8	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.999999211908382	WITHOUT_CLASSIFICATION	7.880916178799064E-7	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999999141734814	WITHOUT_CLASSIFICATION	8.58265185113877E-8	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999996252895065	WITHOUT_CLASSIFICATION	3.747104934719345E-7	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999981018106942	WITHOUT_CLASSIFICATION	1.898189305814975E-6	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999943028865276	WITHOUT_CLASSIFICATION	5.697113472488447E-6	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999977777652156	WITHOUT_CLASSIFICATION	2.222234784455896E-6	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999853218752642	WITHOUT_CLASSIFICATION	1.4678124735706179E-5	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999984914253093	WITHOUT_CLASSIFICATION	1.5085746908377786E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999989402092511	WITHOUT_CLASSIFICATION	1.0597907489433214E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999989402092511	WITHOUT_CLASSIFICATION	1.0597907489433214E-6	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999945022200816	WITHOUT_CLASSIFICATION	5.4977799184623516E-6	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999984008041264	WITHOUT_CLASSIFICATION	1.5991958736720989E-6	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999999242533724	WITHOUT_CLASSIFICATION	7.57466276466827E-8	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9999992752921633	WITHOUT_CLASSIFICATION	7.247078367398359E-7	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999976602154129	WITHOUT_CLASSIFICATION	2.3397845870605448E-6	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999995988043807	WITHOUT_CLASSIFICATION	4.011956193012785E-7	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999813561312091	WITHOUT_CLASSIFICATION	1.864386879089749E-5	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999997195439168	WITHOUT_CLASSIFICATION	2.804560832390618E-7	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9994620698600077	WITHOUT_CLASSIFICATION	5.379301399923481E-4	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.999999769735446	WITHOUT_CLASSIFICATION	2.302645540788335E-7	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999810223516125	WITHOUT_CLASSIFICATION	1.897764838756184E-5	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.999994274770032	WITHOUT_CLASSIFICATION	5.725229968006933E-6	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9976967477345902	WITHOUT_CLASSIFICATION	0.0023032522654099085	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999914230437101	WITHOUT_CLASSIFICATION	8.576956289921586E-6	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.999991681997027	WITHOUT_CLASSIFICATION	8.318002972848868E-6	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999998879672778	WITHOUT_CLASSIFICATION	1.1203272219742065E-7	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999753396435036	WITHOUT_CLASSIFICATION	2.4660356496315098E-5	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999953605009063	WITHOUT_CLASSIFICATION	4.6394990937024014E-6	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999217677599657	WITHOUT_CLASSIFICATION	7.823224003427188E-5	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.999843760773561	WITHOUT_CLASSIFICATION	1.562392264390327E-4	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999560213666224	WITHOUT_CLASSIFICATION	4.397863337756687E-5	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999879918789334	WITHOUT_CLASSIFICATION	1.2008121066651874E-5	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999727625258522	WITHOUT_CLASSIFICATION	2.7237474147744884E-5	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999989268570411	WITHOUT_CLASSIFICATION	1.073142958927352E-6	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9999214388407538	WITHOUT_CLASSIFICATION	7.856115924619274E-5	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.999999967426438	WITHOUT_CLASSIFICATION	3.2573561992076963E-8	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999982149114076	WITHOUT_CLASSIFICATION	1.7850885924124716E-6	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999779206417861	WITHOUT_CLASSIFICATION	2.207935821395449E-5	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999996971174223	WITHOUT_CLASSIFICATION	3.0288257767385246E-7	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999976305034131	WITHOUT_CLASSIFICATION	2.3694965870783115E-6	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999991543010072	WITHOUT_CLASSIFICATION	8.456989929661349E-7	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9999995120580453	WITHOUT_CLASSIFICATION	4.879419546829721E-7	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999998249214389	WITHOUT_CLASSIFICATION	1.7507856105261318E-7	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.999993582720362	WITHOUT_CLASSIFICATION	6.417279638088071E-6	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9999849011645155	WITHOUT_CLASSIFICATION	1.509883548446166E-5	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999902657599993	WITHOUT_CLASSIFICATION	9.734240000737774E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999999705272232	WITHOUT_CLASSIFICATION	2.9472776737961315E-8	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999919860508232	WITHOUT_CLASSIFICATION	8.013949176884737E-6	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999608351210391	WITHOUT_CLASSIFICATION	3.916487896085359E-5	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999988825885207	WITHOUT_CLASSIFICATION	1.1174114793748853E-6	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9996975681585445	WITHOUT_CLASSIFICATION	3.024318414555522E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.99995926355521	WITHOUT_CLASSIFICATION	4.073644478993678E-5	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.99995926355521	WITHOUT_CLASSIFICATION	4.073644478993678E-5	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999959223430148	WITHOUT_CLASSIFICATION	4.077656985127759E-6	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999925578048717	WITHOUT_CLASSIFICATION	7.442195128197915E-6	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999999431306771	WITHOUT_CLASSIFICATION	5.686932296642453E-8	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999985780469132	WITHOUT_CLASSIFICATION	1.4219530868875071E-6	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999992076367362	WITHOUT_CLASSIFICATION	7.923632637921366E-7	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999938548780941	WITHOUT_CLASSIFICATION	6.14512190580383E-6	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999976925615992	WITHOUT_CLASSIFICATION	2.3074384007643618E-6	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.999999827913245	WITHOUT_CLASSIFICATION	1.7208675509018734E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999929156770512	WITHOUT_CLASSIFICATION	7.084322948903851E-6	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999953046775973	WITHOUT_CLASSIFICATION	4.695322402618505E-6	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999959260075072	WITHOUT_CLASSIFICATION	4.073992492782593E-6	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999998656400818	WITHOUT_CLASSIFICATION	1.343599182392154E-7	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.999998722238957	WITHOUT_CLASSIFICATION	1.2777610429454518E-6	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999989078222603	WITHOUT_CLASSIFICATION	1.0921777397524604E-6	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999985400310175	WITHOUT_CLASSIFICATION	1.4599689824261452E-6	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999838424055578	WITHOUT_CLASSIFICATION	1.6157594442147383E-5	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9998184728216531	WITHOUT_CLASSIFICATION	1.8152717834693283E-4	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999999216325226	WITHOUT_CLASSIFICATION	7.836747744797554E-8	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.999999128964551	WITHOUT_CLASSIFICATION	8.710354488802868E-7	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9998488258531886	WITHOUT_CLASSIFICATION	1.5117414681147277E-4	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999995329234245	WITHOUT_CLASSIFICATION	4.670765756229113E-7	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999995329234245	WITHOUT_CLASSIFICATION	4.670765756229113E-7	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999986978670583	WITHOUT_CLASSIFICATION	1.3021329416451517E-6	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999999938952642	WITHOUT_CLASSIFICATION	6.104735788102877E-9	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9997903474820011	WITHOUT_CLASSIFICATION	2.0965251799885687E-4	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999987739807996	WITHOUT_CLASSIFICATION	1.2260192003229785E-6	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999991358024859	WITHOUT_CLASSIFICATION	8.641975141374313E-7	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999979843325146	WITHOUT_CLASSIFICATION	2.0156674853476424E-6	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999977810430162	WITHOUT_CLASSIFICATION	2.2189569838735597E-6	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999974292632	WITHOUT_CLASSIFICATION	2.5707369391385623E-9	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999991488812223	WITHOUT_CLASSIFICATION	8.511187777753951E-7	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999995699453614	WITHOUT_CLASSIFICATION	4.300546386306905E-7	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999992813219987	WITHOUT_CLASSIFICATION	7.186780012900408E-7	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.999890691716179	WITHOUT_CLASSIFICATION	1.0930828382105362E-4	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999999494101187	WITHOUT_CLASSIFICATION	5.0589881164787246E-8	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999999367955655	WITHOUT_CLASSIFICATION	6.32044345413461E-8	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999974080045271	WITHOUT_CLASSIFICATION	2.59199547283042E-6	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999986952153188	WITHOUT_CLASSIFICATION	1.3047846811313939E-6	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999999721552381	WITHOUT_CLASSIFICATION	2.784476198911524E-8	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999983767146116	WITHOUT_CLASSIFICATION	1.623285388435967E-6	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999978342236802	WITHOUT_CLASSIFICATION	2.165776319878135E-6	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999995889398924	WITHOUT_CLASSIFICATION	4.11060107644447E-7	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9986860420367413	WITHOUT_CLASSIFICATION	0.0013139579632586232	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999890885286099	WITHOUT_CLASSIFICATION	1.0911471390137536E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999995255456954	WITHOUT_CLASSIFICATION	4.7445430457714846E-7	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9270027977507467	WITHOUT_CLASSIFICATION	0.07299720224925334	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999021169805428	WITHOUT_CLASSIFICATION	9.78830194572762E-5	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9998395196035946	WITHOUT_CLASSIFICATION	1.6048039640537533E-4	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.99997022678717	WITHOUT_CLASSIFICATION	2.977321283001702E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.999998574607546	WITHOUT_CLASSIFICATION	1.425392453952612E-6	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999904105389988	WITHOUT_CLASSIFICATION	9.589461001262838E-6	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999935994214098	WITHOUT_CLASSIFICATION	6.4005785902283506E-6	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.999999302160521	WITHOUT_CLASSIFICATION	6.978394790650463E-7	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.999997521818079	WITHOUT_CLASSIFICATION	2.4781819210129416E-6	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999808097555154	WITHOUT_CLASSIFICATION	1.9190244484532528E-5	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.999991912502146	WITHOUT_CLASSIFICATION	8.087497853891853E-6	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.999980018023617	WITHOUT_CLASSIFICATION	1.9981976382902152E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9998622741509606	WITHOUT_CLASSIFICATION	1.377258490393668E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9999664763777426	WITHOUT_CLASSIFICATION	3.352362225737098E-5	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999986553172366	WITHOUT_CLASSIFICATION	1.344682763415247E-6	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9998473032383123	WITHOUT_CLASSIFICATION	1.5269676168779198E-4	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999998363287831	WITHOUT_CLASSIFICATION	1.6367121702125815E-7	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999984148501666	WITHOUT_CLASSIFICATION	1.585149833381467E-6	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9999752553117424	WITHOUT_CLASSIFICATION	2.4744688257641972E-5	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.999984199908096	WITHOUT_CLASSIFICATION	1.58000919040048E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.999975578645631	WITHOUT_CLASSIFICATION	2.442135436900277E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999965974325599	WITHOUT_CLASSIFICATION	3.402567440153113E-6	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.999975578645631	WITHOUT_CLASSIFICATION	2.442135436900277E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9636791076451972	WITHOUT_CLASSIFICATION	0.0363208923548028	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9883506294120205	WITHOUT_CLASSIFICATION	0.01164937058797945	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.999996530953866	WITHOUT_CLASSIFICATION	3.469046133897128E-6	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9254253388686586	WITHOUT_CLASSIFICATION	0.07457466113134138	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999996371537823	WITHOUT_CLASSIFICATION	3.628462177901534E-7	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999995745450705	WITHOUT_CLASSIFICATION	4.254549295106351E-7	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999956693761102	WITHOUT_CLASSIFICATION	4.330623889850932E-6	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9999997414964817	WITHOUT_CLASSIFICATION	2.5850351824555956E-7	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999996242265398	WITHOUT_CLASSIFICATION	3.757734603390533E-7	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9988093299777688	WITHOUT_CLASSIFICATION	0.0011906700222310733	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9999885385611265	WITHOUT_CLASSIFICATION	1.1461438873587704E-5	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999997162639654	WITHOUT_CLASSIFICATION	2.837360345361097E-7	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999955018276422	WITHOUT_CLASSIFICATION	4.498172357763855E-6	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999998839324907	WITHOUT_CLASSIFICATION	1.1606750928575362E-7	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999890954866016	WITHOUT_CLASSIFICATION	1.0904513398302125E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9997511186319367	WITHOUT_CLASSIFICATION	2.4888136806332044E-4	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999970004005263	WITHOUT_CLASSIFICATION	2.9995994737138033E-6	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999962287724546	WITHOUT_CLASSIFICATION	3.7712275453036235E-6	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999856837949741	WITHOUT_CLASSIFICATION	1.4316205025959675E-5	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999923887347807	WITHOUT_CLASSIFICATION	7.611265219252484E-6	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9999571298922522	WITHOUT_CLASSIFICATION	4.2870107747944364E-5	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999995032233921	WITHOUT_CLASSIFICATION	4.967766078304917E-7	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.999994726901763	WITHOUT_CLASSIFICATION	5.273098236919103E-6	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.999998967107705	WITHOUT_CLASSIFICATION	1.032892294938642E-6	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999996120787864	WITHOUT_CLASSIFICATION	3.8792121359316923E-7	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999799267705586	WITHOUT_CLASSIFICATION	2.0073229441402424E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999981807882584	WITHOUT_CLASSIFICATION	1.8192117415386187E-6	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999988423417892	WITHOUT_CLASSIFICATION	1.1576582108374742E-6	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999992705029801	WITHOUT_CLASSIFICATION	7.294970199731021E-7	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9999897968941789	WITHOUT_CLASSIFICATION	1.0203105821095387E-5	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998690391040002	WITHOUT_CLASSIFICATION	1.3096089599981396E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998429473454623	WITHOUT_CLASSIFICATION	1.570526545377058E-4	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9998980344471011	WITHOUT_CLASSIFICATION	1.0196555289887344E-4	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.999999911364632	WITHOUT_CLASSIFICATION	8.863536812151094E-8	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999692162083393	WITHOUT_CLASSIFICATION	3.0783791660595944E-5	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999999808019144	WITHOUT_CLASSIFICATION	1.9198085502766807E-8	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999831581922956	WITHOUT_CLASSIFICATION	1.6841807704456937E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999627593703	WITHOUT_CLASSIFICATION	3.7240629646401295E-8	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999991906134315	WITHOUT_CLASSIFICATION	8.093865685211943E-7	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999895078790351	WITHOUT_CLASSIFICATION	1.0492120964917613E-5	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999500835509231	WITHOUT_CLASSIFICATION	4.991644907699668E-5	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999998624782711	WITHOUT_CLASSIFICATION	1.3752172890608165E-7	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999961743554816	WITHOUT_CLASSIFICATION	3.825644518388016E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999869537905152	WITHOUT_CLASSIFICATION	1.3046209484816487E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999869537905152	WITHOUT_CLASSIFICATION	1.3046209484816487E-5	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999957285174463	WITHOUT_CLASSIFICATION	4.27148255363794E-6	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.999999191639396	WITHOUT_CLASSIFICATION	8.083606039778214E-7	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9982379119357754	WITHOUT_CLASSIFICATION	0.0017620880642246854	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999989790520001	WITHOUT_CLASSIFICATION	1.0209479999423286E-6	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.999998654074637	WITHOUT_CLASSIFICATION	1.3459253630492163E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999999413384238	WITHOUT_CLASSIFICATION	5.8661576252673194E-8	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9999428123349614	WITHOUT_CLASSIFICATION	5.718766503861378E-5	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999999144859658	WITHOUT_CLASSIFICATION	8.551403417866709E-8	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999997571015458	WITHOUT_CLASSIFICATION	2.4289845422729064E-7	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999998914704192	WITHOUT_CLASSIFICATION	1.085295807094511E-7	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999999749098363	WITHOUT_CLASSIFICATION	2.509016371678308E-8	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999961248951089	WITHOUT_CLASSIFICATION	3.875104891149765E-6	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9995866816592779	WITHOUT_CLASSIFICATION	4.1331834072204756E-4	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999998511227031	WITHOUT_CLASSIFICATION	1.4887729690890643E-7	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999955177683295	WITHOUT_CLASSIFICATION	4.4822316705137085E-6	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.99999544060767	WITHOUT_CLASSIFICATION	4.559392330020535E-6	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999991367188399	WITHOUT_CLASSIFICATION	8.632811600091269E-7	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999999259338558	WITHOUT_CLASSIFICATION	7.406614412380264E-8	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999743020373795	WITHOUT_CLASSIFICATION	2.5697962620528144E-5	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999996913262891	WITHOUT_CLASSIFICATION	3.0867371090017297E-7	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.996799630542367	WITHOUT_CLASSIFICATION	0.0032003694576330367	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9986143843215866	WITHOUT_CLASSIFICATION	0.0013856156784134385	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.999999838257218	WITHOUT_CLASSIFICATION	1.617427818460882E-7	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.999999986802016	WITHOUT_CLASSIFICATION	1.3197984105975657E-8	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.999984908989238	WITHOUT_CLASSIFICATION	1.5091010762114317E-5	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999872612115	WITHOUT_CLASSIFICATION	1.2738788410223429E-8	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995292401419	WITHOUT_CLASSIFICATION	4.707598581157796E-7	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9999630542844683	WITHOUT_CLASSIFICATION	3.694571553176802E-5	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999993820650871	WITHOUT_CLASSIFICATION	6.179349129545554E-7	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999997658048924	WITHOUT_CLASSIFICATION	2.3419510749406074E-7	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.999999971962931	WITHOUT_CLASSIFICATION	2.803706899523248E-8	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9993050925360605	WITHOUT_CLASSIFICATION	6.949074639394152E-4	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999981936540406	WITHOUT_CLASSIFICATION	1.806345959303556E-6	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.999983335724681	WITHOUT_CLASSIFICATION	1.6664275318950782E-5	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999957568760214	WITHOUT_CLASSIFICATION	4.24312397866255E-6	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.999991723921368	WITHOUT_CLASSIFICATION	8.276078631969109E-6	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998510633490241	WITHOUT_CLASSIFICATION	1.4893665097583372E-4	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998939907502037	WITHOUT_CLASSIFICATION	1.0600924979640423E-4	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9997313002121919	WITHOUT_CLASSIFICATION	2.6869978780809335E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998959858826018	WITHOUT_CLASSIFICATION	1.040141173981686E-4	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999956434295083	WITHOUT_CLASSIFICATION	4.356570491790362E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9999792484713449	WITHOUT_CLASSIFICATION	2.0751528655105293E-5	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9997764079371938	WITHOUT_CLASSIFICATION	2.235920628061837E-4	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999996271045514	WITHOUT_CLASSIFICATION	3.7289544858108235E-7	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999230886645334	WITHOUT_CLASSIFICATION	7.691133546661577E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999778804368852	WITHOUT_CLASSIFICATION	2.2119563114837108E-5	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9998063420680351	WITHOUT_CLASSIFICATION	1.936579319648912E-4	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.99999963431765	WITHOUT_CLASSIFICATION	3.656823499643028E-7	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999724536460619	WITHOUT_CLASSIFICATION	2.7546353938063855E-5	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999975432254913	WITHOUT_CLASSIFICATION	2.456774508750109E-6	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999952453014521	WITHOUT_CLASSIFICATION	4.754698547938246E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999992962312032	WITHOUT_CLASSIFICATION	7.037687967697481E-7	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999995723251831	WITHOUT_CLASSIFICATION	4.2767481694996986E-7	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999988428717198	WITHOUT_CLASSIFICATION	1.1571282801437938E-6	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999798566622824	WITHOUT_CLASSIFICATION	2.014333771765747E-5	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9996073590357337	WITHOUT_CLASSIFICATION	3.926409642662839E-4	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999994060166387	WITHOUT_CLASSIFICATION	5.939833612442994E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.999999234924275	WITHOUT_CLASSIFICATION	7.650757249003137E-7	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999991028598777	WITHOUT_CLASSIFICATION	8.971401222254982E-7	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999995077503813	WITHOUT_CLASSIFICATION	4.922496186596778E-7	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999918720070816	WITHOUT_CLASSIFICATION	8.127992918365748E-6	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999971411427125	WITHOUT_CLASSIFICATION	2.8588572874921325E-6	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.999998087799922	WITHOUT_CLASSIFICATION	1.9122000779931727E-6	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999966062990897	WITHOUT_CLASSIFICATION	3.3937009103509926E-6	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999980189982691	WITHOUT_CLASSIFICATION	1.9810017307969037E-6	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999509389944813	WITHOUT_CLASSIFICATION	4.9061005518705694E-5	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999087385632915	WITHOUT_CLASSIFICATION	9.126143670844053E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.99999978493306	WITHOUT_CLASSIFICATION	2.150669399389617E-7	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999926461854071	WITHOUT_CLASSIFICATION	7.353814592965596E-6	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999964941245504	WITHOUT_CLASSIFICATION	3.5058754495114656E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9997605627224345	WITHOUT_CLASSIFICATION	2.3943727756552908E-4	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999893541154136	WITHOUT_CLASSIFICATION	1.0645884586533086E-5	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999891146998796	WITHOUT_CLASSIFICATION	1.0885300120422893E-5	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9999699783518153	WITHOUT_CLASSIFICATION	3.0021648184727053E-5	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9999182917904724	WITHOUT_CLASSIFICATION	8.170820952748194E-5	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9999364253843038	WITHOUT_CLASSIFICATION	6.357461569611703E-5	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9998818952857152	WITHOUT_CLASSIFICATION	1.1810471428479856E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9999190230762288	WITHOUT_CLASSIFICATION	8.097692377112134E-5	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9999233370418902	WITHOUT_CLASSIFICATION	7.666295810991177E-5	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9998975654640881	WITHOUT_CLASSIFICATION	1.0243453591182557E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9999082717641091	WITHOUT_CLASSIFICATION	9.172823589092882E-5	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9999169169312214	WITHOUT_CLASSIFICATION	8.308306877854408E-5	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.999902085040295	WITHOUT_CLASSIFICATION	9.79149597049668E-5	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9999126399647104	WITHOUT_CLASSIFICATION	8.736003528965739E-5	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9999284572555829	WITHOUT_CLASSIFICATION	7.154274441709532E-5	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9998882399330111	WITHOUT_CLASSIFICATION	1.1176006698889787E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9999174280190433	WITHOUT_CLASSIFICATION	8.257198095671002E-5	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.999902560261773	WITHOUT_CLASSIFICATION	9.743973822704213E-5	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9999091191887198	WITHOUT_CLASSIFICATION	9.088081128010298E-5	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9998961867765453	WITHOUT_CLASSIFICATION	1.0381322345464803E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9999016719445307	WITHOUT_CLASSIFICATION	9.832805546924246E-5	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.999832278884945	WITHOUT_CLASSIFICATION	1.6772111505514804E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9998659657226922	WITHOUT_CLASSIFICATION	1.3403427730779375E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999996999273464	WITHOUT_CLASSIFICATION	3.00072653677165E-7	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999965252641612	WITHOUT_CLASSIFICATION	3.4747358387781583E-6	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.999965615227925	WITHOUT_CLASSIFICATION	3.4384772074967674E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999994366699692	WITHOUT_CLASSIFICATION	5.633300309189694E-7	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9999685134869897	WITHOUT_CLASSIFICATION	3.148651301033073E-5	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.999998526949728	WITHOUT_CLASSIFICATION	1.4730502719807598E-6	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999998077170773	WITHOUT_CLASSIFICATION	1.9228292274592885E-7	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9996365133593031	WITHOUT_CLASSIFICATION	3.6348664069691517E-4	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.999999760308701	WITHOUT_CLASSIFICATION	2.396912989457705E-7	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999999280778603	WITHOUT_CLASSIFICATION	7.192213967378991E-8	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.9945574770788799	WITHOUT_CLASSIFICATION	0.005442522921120151	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999943612421165	WITHOUT_CLASSIFICATION	5.638757883542284E-6	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999932243042995	WITHOUT_CLASSIFICATION	6.775695700507536E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999974530716266	WITHOUT_CLASSIFICATION	2.5469283734486878E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999974530716266	WITHOUT_CLASSIFICATION	2.5469283734486878E-6	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999957040763594	WITHOUT_CLASSIFICATION	4.295923640656504E-6	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.999992118660662	WITHOUT_CLASSIFICATION	7.881339338062352E-6	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999677846475193	WITHOUT_CLASSIFICATION	3.221535248069767E-5	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999983002429833	WITHOUT_CLASSIFICATION	1.6997570167162254E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999986281271452	WITHOUT_CLASSIFICATION	1.371872854753047E-6	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.999997503535741	WITHOUT_CLASSIFICATION	2.496464258890545E-6	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999977188141779	WITHOUT_CLASSIFICATION	2.2811858221152984E-6	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999792763208999	WITHOUT_CLASSIFICATION	2.072367910017801E-5	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999997127657408	WITHOUT_CLASSIFICATION	2.8723425914202154E-7	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999994978422295	WITHOUT_CLASSIFICATION	5.021577704948474E-7	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9999795213952523	WITHOUT_CLASSIFICATION	2.0478604747735006E-5	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999977003124716	WITHOUT_CLASSIFICATION	2.299687528373036E-6	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999776807282135	WITHOUT_CLASSIFICATION	2.2319271786534682E-5	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9999974866373659	WITHOUT_CLASSIFICATION	2.5133626340967097E-6	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999996670587086	WITHOUT_CLASSIFICATION	3.3294129141050265E-7	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999999125548154	WITHOUT_CLASSIFICATION	8.744518464728832E-8	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999997279035673	WITHOUT_CLASSIFICATION	2.720964326538772E-7	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999843241155909	WITHOUT_CLASSIFICATION	1.567588440907182E-5	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9877216919375966	WITHOUT_CLASSIFICATION	0.012278308062403303	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999989560966354	WITHOUT_CLASSIFICATION	1.0439033646913457E-6	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999996518806508	WITHOUT_CLASSIFICATION	3.4811934921540036E-7	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.999999056003979	WITHOUT_CLASSIFICATION	9.439960210710738E-7	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999967627328645	WITHOUT_CLASSIFICATION	3.2372671355700055E-6	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999917377560712	WITHOUT_CLASSIFICATION	8.262243928787654E-6	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999983878502232	WITHOUT_CLASSIFICATION	1.6121497767513364E-6	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999989960060028	WITHOUT_CLASSIFICATION	1.003993997096329E-6	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999997780482136	WITHOUT_CLASSIFICATION	2.219517863877554E-7	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999768139294312	WITHOUT_CLASSIFICATION	2.3186070568829275E-5	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999919706181221	WITHOUT_CLASSIFICATION	8.029381877939302E-6	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9992429987082356	WITHOUT_CLASSIFICATION	7.570012917643783E-4	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999977388612793	WITHOUT_CLASSIFICATION	2.261138720779246E-6	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999389012549167	WITHOUT_CLASSIFICATION	6.109874508324063E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9995879906272517	WITHOUT_CLASSIFICATION	4.120093727484007E-4	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999956076507017	WITHOUT_CLASSIFICATION	4.3923492982896465E-6	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999961825424958	WITHOUT_CLASSIFICATION	3.817457504218298E-6	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999982700946626	WITHOUT_CLASSIFICATION	1.7299053373551704E-6	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999979795191563	WITHOUT_CLASSIFICATION	2.0204808437067813E-6	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999959853608273	WITHOUT_CLASSIFICATION	4.014639172635081E-6	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9998710823195534	WITHOUT_CLASSIFICATION	1.289176804466472E-4	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999975255836917	WITHOUT_CLASSIFICATION	2.4744163081910384E-6	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9997143781195803	WITHOUT_CLASSIFICATION	2.856218804196519E-4	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999906898114888	WITHOUT_CLASSIFICATION	9.310188511236103E-6	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999997602115417	WITHOUT_CLASSIFICATION	2.397884582839852E-7	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999880365556273	WITHOUT_CLASSIFICATION	1.19634443726505E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999880365556273	WITHOUT_CLASSIFICATION	1.19634443726505E-5	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999987476642446	WITHOUT_CLASSIFICATION	1.2523357554309692E-6	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999990805939587	WITHOUT_CLASSIFICATION	9.194060412792914E-7	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999982247453048	WITHOUT_CLASSIFICATION	1.7752546952537567E-6	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999995760651291	WITHOUT_CLASSIFICATION	4.2393487083684197E-7	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999999183249998	WITHOUT_CLASSIFICATION	8.167500021813987E-8	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.999998947002564	WITHOUT_CLASSIFICATION	1.0529974360018289E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999997672859766	WITHOUT_CLASSIFICATION	2.327140234039623E-7	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9986439110852542	WITHOUT_CLASSIFICATION	0.0013560889147458152	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.999991762455244	WITHOUT_CLASSIFICATION	8.237544756002708E-6	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999962529490535	WITHOUT_CLASSIFICATION	3.7470509465333252E-6	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999968379569785	WITHOUT_CLASSIFICATION	3.1620430214783755E-6	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999990752097244	WITHOUT_CLASSIFICATION	9.247902756038604E-7	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9995745065911481	WITHOUT_CLASSIFICATION	4.2549340885190035E-4	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999998886896532	WITHOUT_CLASSIFICATION	1.1131034677079083E-7	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.999291172846958	WITHOUT_CLASSIFICATION	7.088271530419723E-4	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999261270199731	WITHOUT_CLASSIFICATION	7.387298002682808E-5	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999985699411817	WITHOUT_CLASSIFICATION	1.4300588182493142E-6	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.999991363815113	WITHOUT_CLASSIFICATION	8.636184887015283E-6	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9994589007013165	WITHOUT_CLASSIFICATION	5.410992986834997E-4	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9997225430410684	WITHOUT_CLASSIFICATION	2.774569589315056E-4	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999999134941361	WITHOUT_CLASSIFICATION	8.650586387683596E-8	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999999134941361	WITHOUT_CLASSIFICATION	8.650586387683596E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999994457941016	WITHOUT_CLASSIFICATION	5.542058984092151E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999994457941016	WITHOUT_CLASSIFICATION	5.542058984092151E-7	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999998092120764	WITHOUT_CLASSIFICATION	1.9078792349300958E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999973910985079	WITHOUT_CLASSIFICATION	2.608901492142597E-6	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999946087104749	WITHOUT_CLASSIFICATION	5.391289525124376E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999996461936882	WITHOUT_CLASSIFICATION	3.538063117560213E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999999793127972	WITHOUT_CLASSIFICATION	2.0687202907205953E-8	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999974052618618	WITHOUT_CLASSIFICATION	2.5947381381978753E-6	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9999454146854134	WITHOUT_CLASSIFICATION	5.458531458663123E-5	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999991166688462	WITHOUT_CLASSIFICATION	8.833311536708459E-7	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999994030298213	WITHOUT_CLASSIFICATION	5.969701786752008E-7	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999971127509656	WITHOUT_CLASSIFICATION	2.8872490343338443E-6	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999979516451556	WITHOUT_CLASSIFICATION	2.048354844395502E-6	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999991605880374	WITHOUT_CLASSIFICATION	8.394119626221534E-7	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999997620176576	WITHOUT_CLASSIFICATION	2.3798234242147276E-7	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9999902385470539	WITHOUT_CLASSIFICATION	9.761452946129012E-6	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999986213043175	WITHOUT_CLASSIFICATION	1.3786956825432713E-6	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999999041130748	WITHOUT_CLASSIFICATION	9.588692514445918E-8	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999584079086935	WITHOUT_CLASSIFICATION	4.159209130641033E-5	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999993655349032	WITHOUT_CLASSIFICATION	6.344650967064373E-7	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9999863744587422	WITHOUT_CLASSIFICATION	1.362554125797436E-5	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9999598763978385	WITHOUT_CLASSIFICATION	4.0123602161559956E-5	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999926889082461	WITHOUT_CLASSIFICATION	7.311091753948555E-6	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.999999047240536	WITHOUT_CLASSIFICATION	9.527594640027433E-7	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9999998446152669	WITHOUT_CLASSIFICATION	1.5538473299804764E-7	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999981807882584	WITHOUT_CLASSIFICATION	1.8192117415386187E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999999413384238	WITHOUT_CLASSIFICATION	5.8661576252673194E-8	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.999999880016912	WITHOUT_CLASSIFICATION	1.1998308809640373E-7	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9997877675640813	WITHOUT_CLASSIFICATION	2.1223243591872128E-4	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999997047944296	WITHOUT_CLASSIFICATION	2.9520557034937195E-7	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999996491530834	WITHOUT_CLASSIFICATION	3.5084691662653966E-7	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999956215823006	WITHOUT_CLASSIFICATION	4.378417699450247E-6	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999956215823006	WITHOUT_CLASSIFICATION	4.378417699450247E-6	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999871827839841	WITHOUT_CLASSIFICATION	1.2817216015940268E-5	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999978212855802	WITHOUT_CLASSIFICATION	2.178714419796278E-6	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999989324634109	WITHOUT_CLASSIFICATION	1.0675365891950878E-6	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999997206790538	WITHOUT_CLASSIFICATION	2.7932094613253734E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999982136223223	WITHOUT_CLASSIFICATION	1.7863776777603188E-6	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999999759323898	WITHOUT_CLASSIFICATION	2.406761027944588E-8	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999999314618981	WITHOUT_CLASSIFICATION	6.853810192945196E-8	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999998462306203	WITHOUT_CLASSIFICATION	1.537693795818056E-7	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999994904428822	WITHOUT_CLASSIFICATION	5.095571177971838E-7	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999991853576268	WITHOUT_CLASSIFICATION	8.14642373172407E-7	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999995601053991	WITHOUT_CLASSIFICATION	4.398946009457701E-7	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999998941431094	WITHOUT_CLASSIFICATION	1.0585689056650001E-7	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999955926665547	WITHOUT_CLASSIFICATION	4.40733344530785E-6	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999978007863639	WITHOUT_CLASSIFICATION	2.19921363604212E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999998733192813	WITHOUT_CLASSIFICATION	1.2668071867643562E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999818868134612	WITHOUT_CLASSIFICATION	1.8113186538670874E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999971499677146	WITHOUT_CLASSIFICATION	2.850032285388545E-6	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999992469907042	WITHOUT_CLASSIFICATION	7.530092958525507E-7	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999353897246188	WITHOUT_CLASSIFICATION	6.461027538117451E-5	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9999707367046967	WITHOUT_CLASSIFICATION	2.92632953034149E-5	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999122653702837	WITHOUT_CLASSIFICATION	8.773462971637217E-5	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9995263238239704	WITHOUT_CLASSIFICATION	4.7367617602954995E-4	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999528239709299	WITHOUT_CLASSIFICATION	4.717602907006767E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999962125254185	WITHOUT_CLASSIFICATION	3.787474581430118E-6	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999992578323124	WITHOUT_CLASSIFICATION	7.42167687670919E-7	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9996374577297229	WITHOUT_CLASSIFICATION	3.625422702770005E-4	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999989756826283	WITHOUT_CLASSIFICATION	1.0243173717726729E-6	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9999890674093747	WITHOUT_CLASSIFICATION	1.0932590625419608E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999998929719515	WITHOUT_CLASSIFICATION	1.0702804849343478E-7	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9999634916368882	WITHOUT_CLASSIFICATION	3.650836311178097E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999970492491762	WITHOUT_CLASSIFICATION	2.9507508238123196E-6	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999834381781905	WITHOUT_CLASSIFICATION	1.6561821809467983E-5	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999996599046456	WITHOUT_CLASSIFICATION	3.400953543796981E-7	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999957261951962	WITHOUT_CLASSIFICATION	4.273804803892056E-6	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9999668975219961	WITHOUT_CLASSIFICATION	3.310247800396095E-5	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999885011484562	WITHOUT_CLASSIFICATION	1.1498851543903878E-5	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999936638417335	WITHOUT_CLASSIFICATION	6.3361582666113295E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9999925714311058	WITHOUT_CLASSIFICATION	7.42856889422218E-6	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999961823156688	WITHOUT_CLASSIFICATION	3.817684331221999E-6	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999988820810467	WITHOUT_CLASSIFICATION	1.1179189533349208E-6	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999999641428581	WITHOUT_CLASSIFICATION	3.585714185043252E-8	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.999999784492983	WITHOUT_CLASSIFICATION	2.155070170087866E-7	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999983691209663	WITHOUT_CLASSIFICATION	1.6308790336586952E-6	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999969491678226	WITHOUT_CLASSIFICATION	3.0508321773891386E-6	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.999970675881523	WITHOUT_CLASSIFICATION	2.9324118476978634E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999674355759751	WITHOUT_CLASSIFICATION	3.2564424024900866E-5	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999997464468209	WITHOUT_CLASSIFICATION	2.535531791679604E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999217633009	WITHOUT_CLASSIFICATION	7.823669914560332E-8	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999942521076882	WITHOUT_CLASSIFICATION	5.747892311813986E-6	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999990298533074	WITHOUT_CLASSIFICATION	9.701466926476973E-7	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999423051705818	WITHOUT_CLASSIFICATION	5.7694829418253405E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999799614202259	WITHOUT_CLASSIFICATION	2.0038579774065176E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999707291112948	WITHOUT_CLASSIFICATION	2.9270888705089106E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999812069311016	WITHOUT_CLASSIFICATION	1.879306889835621E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999940980404062	WITHOUT_CLASSIFICATION	5.901959593879179E-6	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999842376677763	WITHOUT_CLASSIFICATION	1.576233222374975E-5	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999813247098153	WITHOUT_CLASSIFICATION	1.8675290184778045E-5	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9994114791130987	WITHOUT_CLASSIFICATION	5.885208869013958E-4	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999971681451357	WITHOUT_CLASSIFICATION	2.831854864294039E-6	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999982989561261	WITHOUT_CLASSIFICATION	1.7010438737704789E-6	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999757993938004	WITHOUT_CLASSIFICATION	2.420060619952933E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999423051705818	WITHOUT_CLASSIFICATION	5.7694829418253405E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999707291112948	WITHOUT_CLASSIFICATION	2.9270888705089106E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999799614202259	WITHOUT_CLASSIFICATION	2.0038579774065176E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9998134302704241	WITHOUT_CLASSIFICATION	1.8656972957583988E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999724890946331	WITHOUT_CLASSIFICATION	2.7510905366859563E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999920166930534	WITHOUT_CLASSIFICATION	7.983306946580474E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999995580420697	WITHOUT_CLASSIFICATION	4.4195793023350976E-7	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999994122007161	WITHOUT_CLASSIFICATION	5.87799283832091E-7	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999997106555368	WITHOUT_CLASSIFICATION	2.893444632318997E-7	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999981673944053	WITHOUT_CLASSIFICATION	1.8326055946486606E-6	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999998823856386	WITHOUT_CLASSIFICATION	1.1761436136709036E-7	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999976528327214	WITHOUT_CLASSIFICATION	2.347167278616436E-6	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999999126819509	WITHOUT_CLASSIFICATION	8.731804907259467E-8	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999997784785558	WITHOUT_CLASSIFICATION	2.2152144406387413E-7	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9998849768635286	WITHOUT_CLASSIFICATION	1.1502313647141606E-4	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.999997007631783	WITHOUT_CLASSIFICATION	2.992368217025451E-6	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999979035853718	WITHOUT_CLASSIFICATION	2.0964146281959823E-6	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999998839386687	WITHOUT_CLASSIFICATION	1.1606133126937637E-7	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999981866477387	WITHOUT_CLASSIFICATION	1.8133522613565249E-6	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999906191132325	WITHOUT_CLASSIFICATION	9.380886767482215E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999649499329866	WITHOUT_CLASSIFICATION	3.505006701335481E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999649499329866	WITHOUT_CLASSIFICATION	3.505006701335481E-5	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999975444179754	WITHOUT_CLASSIFICATION	2.455582024713372E-6	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.999999758983675	WITHOUT_CLASSIFICATION	2.410163250327594E-7	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999993221013105	WITHOUT_CLASSIFICATION	6.778986894907051E-7	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.999992891066805	WITHOUT_CLASSIFICATION	7.108933195027301E-6	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999995016511072	WITHOUT_CLASSIFICATION	4.983488928868822E-7	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999997013197127	WITHOUT_CLASSIFICATION	2.9868028727563776E-7	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999994253709401	WITHOUT_CLASSIFICATION	5.746290599357701E-7	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999997573509056	WITHOUT_CLASSIFICATION	2.4264909443104433E-7	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999997871952279	WITHOUT_CLASSIFICATION	2.128047720593898E-7	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999997633792322	WITHOUT_CLASSIFICATION	2.3662076770790203E-7	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999807486113064	WITHOUT_CLASSIFICATION	1.9251388693596802E-5	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.999991021594656	WITHOUT_CLASSIFICATION	8.978405343907066E-6	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999994506974601	WITHOUT_CLASSIFICATION	5.493025399960564E-7	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999967160689549	WITHOUT_CLASSIFICATION	3.283931045024657E-6	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.999575476906626	WITHOUT_CLASSIFICATION	4.245230933741163E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999998921793685	WITHOUT_CLASSIFICATION	1.0782063161893991E-7	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999991107040485	WITHOUT_CLASSIFICATION	8.892959515557525E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999990944068805	WITHOUT_CLASSIFICATION	9.055931194501167E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999990944068805	WITHOUT_CLASSIFICATION	9.055931194501167E-7	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999939955815722	WITHOUT_CLASSIFICATION	6.004418427763931E-6	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999897894472504	WITHOUT_CLASSIFICATION	1.0210552749625616E-5	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9998935786234355	WITHOUT_CLASSIFICATION	1.0642137656453424E-4	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999955654460223	WITHOUT_CLASSIFICATION	4.4345539777348994E-6	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999992182105528	WITHOUT_CLASSIFICATION	7.817894471894448E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999990944068805	WITHOUT_CLASSIFICATION	9.055931194501167E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999990944068805	WITHOUT_CLASSIFICATION	9.055931194501167E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999995227825956	WITHOUT_CLASSIFICATION	4.772174043780303E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999995227825956	WITHOUT_CLASSIFICATION	4.772174043780303E-7	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999637545212701	WITHOUT_CLASSIFICATION	3.6245478729943304E-5	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999946938307961	WITHOUT_CLASSIFICATION	5.306169203878532E-6	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999975851685402	WITHOUT_CLASSIFICATION	2.414831459847845E-6	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9999988555060049	WITHOUT_CLASSIFICATION	1.144493995134602E-6	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999928213022777	WITHOUT_CLASSIFICATION	7.178697722269779E-6	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999928213022777	WITHOUT_CLASSIFICATION	7.178697722269779E-6	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999960395893278	WITHOUT_CLASSIFICATION	3.9604106722275825E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999174855844671	WITHOUT_CLASSIFICATION	8.251441553287404E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999993320288285	WITHOUT_CLASSIFICATION	6.679711714978586E-6	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999835469123679	WITHOUT_CLASSIFICATION	1.645308763211312E-5	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999995298149277	WITHOUT_CLASSIFICATION	4.701850722368791E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.999999182199324	WITHOUT_CLASSIFICATION	8.178006759773121E-7	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9998324298549721	WITHOUT_CLASSIFICATION	1.6757014502801623E-4	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999994477133923	WITHOUT_CLASSIFICATION	5.522866077823293E-7	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999961732372629	WITHOUT_CLASSIFICATION	3.826762737238935E-6	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999999759493042	WITHOUT_CLASSIFICATION	2.4050695793421572E-8	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999333472228268	WITHOUT_CLASSIFICATION	6.665277717314895E-5	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999997857167389	WITHOUT_CLASSIFICATION	2.1428326125489946E-7	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999903138425684	WITHOUT_CLASSIFICATION	9.686157431568977E-6	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999995958420368	WITHOUT_CLASSIFICATION	4.041579633106717E-7	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999998921793685	WITHOUT_CLASSIFICATION	1.0782063161893991E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999990944068805	WITHOUT_CLASSIFICATION	9.055931194501167E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999995227825956	WITHOUT_CLASSIFICATION	4.772174043780303E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.999999182199324	WITHOUT_CLASSIFICATION	8.178006759773121E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9978308190277314	WITHOUT_CLASSIFICATION	0.002169180972268681	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9978308190277314	WITHOUT_CLASSIFICATION	0.002169180972268681	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9998028345354558	WITHOUT_CLASSIFICATION	1.97165464544191E-4	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.999999415059621	WITHOUT_CLASSIFICATION	5.849403789929944E-7	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999988602942915	WITHOUT_CLASSIFICATION	1.1397057084906701E-6	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999971569749443	WITHOUT_CLASSIFICATION	2.8430250555790517E-6	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999999411744891	WITHOUT_CLASSIFICATION	5.882551103785782E-8	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999820527746563	WITHOUT_CLASSIFICATION	1.7947225343600977E-5	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9993659520334812	WITHOUT_CLASSIFICATION	6.340479665188244E-4	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999767902582459	WITHOUT_CLASSIFICATION	2.3209741754164168E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999994573612944	WITHOUT_CLASSIFICATION	5.426387055745264E-7	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999901106993794	WITHOUT_CLASSIFICATION	9.889300620532877E-6	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999977861853927	WITHOUT_CLASSIFICATION	2.2138146071886775E-6	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999988881191457	WITHOUT_CLASSIFICATION	1.1118808542403135E-6	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999996206752046	WITHOUT_CLASSIFICATION	3.7932479543307393E-7	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999991107040485	WITHOUT_CLASSIFICATION	8.892959515557525E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999995227825956	WITHOUT_CLASSIFICATION	4.772174043780303E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999174855844671	WITHOUT_CLASSIFICATION	8.251441553287404E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999993320288285	WITHOUT_CLASSIFICATION	6.679711714978586E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999993320288285	WITHOUT_CLASSIFICATION	6.679711714978586E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999995298149277	WITHOUT_CLASSIFICATION	4.701850722368791E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.999999182199324	WITHOUT_CLASSIFICATION	8.178006759773121E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.999999182199324	WITHOUT_CLASSIFICATION	8.178006759773121E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9978308190277314	WITHOUT_CLASSIFICATION	0.002169180972268681	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999999710441476	WITHOUT_CLASSIFICATION	2.8955852356704993E-8	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.999876827615915	WITHOUT_CLASSIFICATION	1.2317238408502987E-4	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999975839327129	WITHOUT_CLASSIFICATION	2.4160672870640705E-6	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999996283748711	WITHOUT_CLASSIFICATION	3.716251288434033E-7	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.999991364493285	WITHOUT_CLASSIFICATION	8.635506715128459E-6	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9994614378062125	WITHOUT_CLASSIFICATION	5.385621937874229E-4	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999984064449429	WITHOUT_CLASSIFICATION	1.593555057162752E-6	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999736836723955	WITHOUT_CLASSIFICATION	2.6316327604613196E-5	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999999645446082	WITHOUT_CLASSIFICATION	3.5455391821847916E-8	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999174855844671	WITHOUT_CLASSIFICATION	8.251441553287404E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999993320288285	WITHOUT_CLASSIFICATION	6.679711714978586E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999993320288285	WITHOUT_CLASSIFICATION	6.679711714978586E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999995298149277	WITHOUT_CLASSIFICATION	4.701850722368791E-7	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999767902582459	WITHOUT_CLASSIFICATION	2.3209741754164168E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999901106993794	WITHOUT_CLASSIFICATION	9.889300620532877E-6	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999310257218071	WITHOUT_CLASSIFICATION	6.89742781928208E-5	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999601812458504	WITHOUT_CLASSIFICATION	3.981875414958453E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999926601982182	WITHOUT_CLASSIFICATION	7.339801781791005E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999926601982182	WITHOUT_CLASSIFICATION	7.339801781791005E-6	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999985473631917	WITHOUT_CLASSIFICATION	1.4526368083330675E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999998722718758	WITHOUT_CLASSIFICATION	1.2772812424746326E-7	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999789852555052	WITHOUT_CLASSIFICATION	2.1014744494692673E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999963547981193	WITHOUT_CLASSIFICATION	3.6452018808046626E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999982574435109	WITHOUT_CLASSIFICATION	1.7425564890786746E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999982574435109	WITHOUT_CLASSIFICATION	1.7425564890786746E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999750935181483	WITHOUT_CLASSIFICATION	2.4906481851694614E-5	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999750935181483	WITHOUT_CLASSIFICATION	2.4906481851694614E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999998698999987	WITHOUT_CLASSIFICATION	1.3010000144556E-7	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999998698999987	WITHOUT_CLASSIFICATION	1.3010000144556E-7	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999963100499726	WITHOUT_CLASSIFICATION	3.6899500272815422E-6	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9992515430245595	WITHOUT_CLASSIFICATION	7.484569754404943E-4	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9999962299492813	WITHOUT_CLASSIFICATION	3.7700507187591053E-6	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999955861354114	WITHOUT_CLASSIFICATION	4.413864588634791E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999993425522877	WITHOUT_CLASSIFICATION	6.574477122901107E-7	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999992238516935	WITHOUT_CLASSIFICATION	7.761483065136364E-7	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999997232709397	WITHOUT_CLASSIFICATION	2.7672906032054823E-7	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999983722518188	WITHOUT_CLASSIFICATION	1.6277481812683865E-6	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999997747701603	WITHOUT_CLASSIFICATION	2.2522983977911394E-7	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999999657823848	WITHOUT_CLASSIFICATION	3.421761520135458E-8	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999996481380976	WITHOUT_CLASSIFICATION	3.518619023343692E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999992455838536	WITHOUT_CLASSIFICATION	7.544161464390546E-7	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9999396145611981	WITHOUT_CLASSIFICATION	6.038543880198318E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999979871000358	WITHOUT_CLASSIFICATION	2.0128999641434955E-6	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999979871000358	WITHOUT_CLASSIFICATION	2.0128999641434955E-6	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9999867198553135	WITHOUT_CLASSIFICATION	1.3280144686616571E-5	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999974052618618	WITHOUT_CLASSIFICATION	2.5947381381978753E-6	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9998137934096871	WITHOUT_CLASSIFICATION	1.862065903129049E-4	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999993198025299	WITHOUT_CLASSIFICATION	6.801974701142802E-7	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999992375178616	WITHOUT_CLASSIFICATION	7.624821383686184E-7	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.99999909533224	WITHOUT_CLASSIFICATION	9.04667760062127E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999992328377161	WITHOUT_CLASSIFICATION	7.671622840088151E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999990942824655	WITHOUT_CLASSIFICATION	9.057175346116742E-7	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999990221838975	WITHOUT_CLASSIFICATION	9.77816102426352E-7	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999935577849154	WITHOUT_CLASSIFICATION	6.44221508453549E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999990679375601	WITHOUT_CLASSIFICATION	9.320624398647362E-7	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.999997845960659	WITHOUT_CLASSIFICATION	2.1540393410511006E-6	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999999461294017	WITHOUT_CLASSIFICATION	5.387059824859607E-8	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999936755926289	WITHOUT_CLASSIFICATION	6.3244073711376426E-6	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999885671508483	WITHOUT_CLASSIFICATION	1.1432849151826515E-5	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.999998252876742	WITHOUT_CLASSIFICATION	1.7471232578469698E-6	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999982415376866	WITHOUT_CLASSIFICATION	1.7584623134485837E-6	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999995060527371	WITHOUT_CLASSIFICATION	4.939472628185732E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999989586693749	WITHOUT_CLASSIFICATION	1.041330625038751E-6	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999989586693749	WITHOUT_CLASSIFICATION	1.041330625038751E-6	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999998289854293	WITHOUT_CLASSIFICATION	1.7101457062630654E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999955088310296	WITHOUT_CLASSIFICATION	4.4911689704041035E-6	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9998043437751372	WITHOUT_CLASSIFICATION	1.9565622486272607E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9998043437751372	WITHOUT_CLASSIFICATION	1.9565622486272607E-4	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.999995895263183	WITHOUT_CLASSIFICATION	4.1047368169770106E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9999862672551861	WITHOUT_CLASSIFICATION	1.3732744813889865E-5	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.999977385894436	WITHOUT_CLASSIFICATION	2.261410556396456E-5	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.999962581950427	WITHOUT_CLASSIFICATION	3.741804957294988E-5	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999956165939857	WITHOUT_CLASSIFICATION	4.3834060143776355E-6	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.999999517570384	WITHOUT_CLASSIFICATION	4.82429616109684E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.999999517570384	WITHOUT_CLASSIFICATION	4.82429616109684E-7	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999997823561313	WITHOUT_CLASSIFICATION	2.1764386876019207E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999971459897286	WITHOUT_CLASSIFICATION	2.8540102714670076E-6	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999980216657415	WITHOUT_CLASSIFICATION	1.9783342585752003E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999963155453213	WITHOUT_CLASSIFICATION	3.6844546788036663E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999955088310296	WITHOUT_CLASSIFICATION	4.4911689704041035E-6	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999893780472552	WITHOUT_CLASSIFICATION	1.0621952744751894E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999615045620989	WITHOUT_CLASSIFICATION	3.849543790109825E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999615045620989	WITHOUT_CLASSIFICATION	3.849543790109825E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999957573108141	WITHOUT_CLASSIFICATION	4.242689185817417E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999694285732	WITHOUT_CLASSIFICATION	3.057142682525066E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999694285732	WITHOUT_CLASSIFICATION	3.057142682525066E-8	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999830718072464	WITHOUT_CLASSIFICATION	1.692819275360962E-5	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999830718072464	WITHOUT_CLASSIFICATION	1.692819275360962E-5	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999830718072464	WITHOUT_CLASSIFICATION	1.692819275360962E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999694285732	WITHOUT_CLASSIFICATION	3.057142682525066E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999694285732	WITHOUT_CLASSIFICATION	3.057142682525066E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999957573108141	WITHOUT_CLASSIFICATION	4.242689185817417E-6	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.99998926543701	WITHOUT_CLASSIFICATION	1.0734562989923106E-5	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999984268101088	WITHOUT_CLASSIFICATION	1.5731898912157909E-6	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9999964690773834	WITHOUT_CLASSIFICATION	3.530922616609295E-6	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999966350526325	WITHOUT_CLASSIFICATION	3.3649473676627607E-6	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999988378245154	WITHOUT_CLASSIFICATION	1.162175484564153E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999988438859347	WITHOUT_CLASSIFICATION	1.1561140651892614E-6	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999992557810219	WITHOUT_CLASSIFICATION	7.442189780363195E-7	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.999984925787008	WITHOUT_CLASSIFICATION	1.5074212991963429E-5	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999990679375601	WITHOUT_CLASSIFICATION	9.320624398647362E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999694285732	WITHOUT_CLASSIFICATION	3.057142682525066E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999694285732	WITHOUT_CLASSIFICATION	3.057142682525066E-8	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999994821025364	WITHOUT_CLASSIFICATION	5.178974636092373E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999942655954128	WITHOUT_CLASSIFICATION	5.73440458717571E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999991864066092	WITHOUT_CLASSIFICATION	8.135933907111243E-7	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9873716848380386	WITHOUT_CLASSIFICATION	0.012628315161961477	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999994758030326	WITHOUT_CLASSIFICATION	5.241969673599296E-7	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999999445446793	WITHOUT_CLASSIFICATION	5.5455320740455376E-8	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999969361899278	WITHOUT_CLASSIFICATION	3.0638100722327214E-6	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9998631728735493	WITHOUT_CLASSIFICATION	1.368271264506786E-4	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999966002598066	WITHOUT_CLASSIFICATION	3.3997401934793874E-6	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999681301201047	WITHOUT_CLASSIFICATION	3.1869879895249905E-5	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999364668965327	WITHOUT_CLASSIFICATION	6.353310346722055E-5	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999992085326437	WITHOUT_CLASSIFICATION	7.914673562002491E-7	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999999040644477	WITHOUT_CLASSIFICATION	9.593555227446313E-8	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999995671269999	WITHOUT_CLASSIFICATION	4.328730000909882E-7	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.999999841000654	WITHOUT_CLASSIFICATION	1.589993460952933E-7	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999977207367283	WITHOUT_CLASSIFICATION	2.2792632717050433E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999977207367283	WITHOUT_CLASSIFICATION	2.2792632717050433E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999977207367283	WITHOUT_CLASSIFICATION	2.2792632717050433E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999994712549313	WITHOUT_CLASSIFICATION	5.287450688275295E-7	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.999996195266341	WITHOUT_CLASSIFICATION	3.8047336590311937E-6	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999999183330734	WITHOUT_CLASSIFICATION	8.166692663424677E-8	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9999713072016592	WITHOUT_CLASSIFICATION	2.8692798340822424E-5	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999995176649517	WITHOUT_CLASSIFICATION	4.823350483125702E-7	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999996078928597	WITHOUT_CLASSIFICATION	3.9210714034479226E-7	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999931342366	WITHOUT_CLASSIFICATION	6.865763409043385E-9	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999999200539265	WITHOUT_CLASSIFICATION	7.994607357510721E-8	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999998246615138	WITHOUT_CLASSIFICATION	1.7533848616862996E-7	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999979948567456	WITHOUT_CLASSIFICATION	2.0051432545047733E-6	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999992849882983	WITHOUT_CLASSIFICATION	7.150117017289959E-7	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9999972854292667	WITHOUT_CLASSIFICATION	2.7145707332277306E-6	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999997823561313	WITHOUT_CLASSIFICATION	2.1764386876019207E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999694285732	WITHOUT_CLASSIFICATION	3.057142682525066E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999694285732	WITHOUT_CLASSIFICATION	3.057142682525066E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999957573108141	WITHOUT_CLASSIFICATION	4.242689185817417E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999988438859347	WITHOUT_CLASSIFICATION	1.1561140651892614E-6	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999942655954128	WITHOUT_CLASSIFICATION	5.73440458717571E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9873716848380386	WITHOUT_CLASSIFICATION	0.012628315161961477	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999999445446793	WITHOUT_CLASSIFICATION	5.5455320740455376E-8	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999991864066092	WITHOUT_CLASSIFICATION	8.135933907111243E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999969361899278	WITHOUT_CLASSIFICATION	3.0638100722327214E-6	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999681301201047	WITHOUT_CLASSIFICATION	3.1869879895249905E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999966002598066	WITHOUT_CLASSIFICATION	3.3997401934793874E-6	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999992085326437	WITHOUT_CLASSIFICATION	7.914673562002491E-7	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999996855093772	WITHOUT_CLASSIFICATION	3.1449062284510413E-7	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999942913600337	WITHOUT_CLASSIFICATION	5.708639966319248E-6	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999936199846702	WITHOUT_CLASSIFICATION	6.380015329914136E-6	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999994292205021	WITHOUT_CLASSIFICATION	5.707794979475358E-7	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999994383417561	WITHOUT_CLASSIFICATION	5.616582439826788E-7	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999998039278611	WITHOUT_CLASSIFICATION	1.9607213898808824E-7	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999932659492198	WITHOUT_CLASSIFICATION	6.734050780285393E-6	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9990169528545505	WITHOUT_CLASSIFICATION	9.830471454495442E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999347056469383	WITHOUT_CLASSIFICATION	6.529435306167075E-5	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9998249516397635	WITHOUT_CLASSIFICATION	1.7504836023655946E-4	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999992475206481	WITHOUT_CLASSIFICATION	7.524793520040648E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999998129084224	WITHOUT_CLASSIFICATION	1.8709157759923858E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999962956505435	WITHOUT_CLASSIFICATION	3.7043494565033236E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999959297269351	WITHOUT_CLASSIFICATION	4.070273064976848E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999552244072053	WITHOUT_CLASSIFICATION	4.477559279484104E-5	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999998219151619	WITHOUT_CLASSIFICATION	1.7808483803511885E-7	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999998012650541	WITHOUT_CLASSIFICATION	1.9873494596312143E-7	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999998148798087	WITHOUT_CLASSIFICATION	1.8512019122311892E-7	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999995576995432	WITHOUT_CLASSIFICATION	4.4230045679905234E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999908274747308	WITHOUT_CLASSIFICATION	9.172525269111431E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999986050865808	WITHOUT_CLASSIFICATION	1.394913419209276E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999158783463072	WITHOUT_CLASSIFICATION	8.412165369277896E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999158783463072	WITHOUT_CLASSIFICATION	8.412165369277896E-5	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.999977629907682	WITHOUT_CLASSIFICATION	2.2370092317897983E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999999784183292	WITHOUT_CLASSIFICATION	2.158167086103157E-8	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999640515199806	WITHOUT_CLASSIFICATION	3.594848001940582E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999640515199806	WITHOUT_CLASSIFICATION	3.594848001940582E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999640515199806	WITHOUT_CLASSIFICATION	3.594848001940582E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999640515199806	WITHOUT_CLASSIFICATION	3.594848001940582E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998913693919375	WITHOUT_CLASSIFICATION	1.0863060806253736E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998913693919375	WITHOUT_CLASSIFICATION	1.0863060806253736E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998913693919375	WITHOUT_CLASSIFICATION	1.0863060806253736E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999087755653422	WITHOUT_CLASSIFICATION	9.122443465786927E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999087755653422	WITHOUT_CLASSIFICATION	9.122443465786927E-5	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9998526511399407	WITHOUT_CLASSIFICATION	1.4734886005931817E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999473763166797	WITHOUT_CLASSIFICATION	5.262368332028399E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999999784183292	WITHOUT_CLASSIFICATION	2.158167086103157E-8	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.999998735553645	WITHOUT_CLASSIFICATION	1.2644463550193016E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999640515199806	WITHOUT_CLASSIFICATION	3.594848001940582E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999640515199806	WITHOUT_CLASSIFICATION	3.594848001940582E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999640515199806	WITHOUT_CLASSIFICATION	3.594848001940582E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998913693919375	WITHOUT_CLASSIFICATION	1.0863060806253736E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998913693919375	WITHOUT_CLASSIFICATION	1.0863060806253736E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999087755653422	WITHOUT_CLASSIFICATION	9.122443465786927E-5	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999473763166797	WITHOUT_CLASSIFICATION	5.262368332028399E-5	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.999997597659558	WITHOUT_CLASSIFICATION	2.402340441920252E-6	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.999997597659558	WITHOUT_CLASSIFICATION	2.402340441920252E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999985107808932	WITHOUT_CLASSIFICATION	1.489219106749429E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999985107808932	WITHOUT_CLASSIFICATION	1.489219106749429E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999969627362836	WITHOUT_CLASSIFICATION	3.0372637163404922E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999969627362836	WITHOUT_CLASSIFICATION	3.0372637163404922E-6	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999987320432787	WITHOUT_CLASSIFICATION	1.2679567212216228E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999950525075828	WITHOUT_CLASSIFICATION	4.947492417255834E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999950525075828	WITHOUT_CLASSIFICATION	4.947492417255834E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999977237185678	WITHOUT_CLASSIFICATION	2.276281432174675E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999977237185678	WITHOUT_CLASSIFICATION	2.276281432174675E-6	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9999977528293668	WITHOUT_CLASSIFICATION	2.247170633176402E-6	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999996583560898	WITHOUT_CLASSIFICATION	3.416439101562443E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999996583560898	WITHOUT_CLASSIFICATION	3.416439101562443E-7	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999997075660529	WITHOUT_CLASSIFICATION	2.9243394706730064E-7	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999909064747371	WITHOUT_CLASSIFICATION	9.093525262979583E-6	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999933714959819	WITHOUT_CLASSIFICATION	6.628504018171095E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999640515199806	WITHOUT_CLASSIFICATION	3.594848001940582E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999640515199806	WITHOUT_CLASSIFICATION	3.594848001940582E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999997075660529	WITHOUT_CLASSIFICATION	2.9243394706730064E-7	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999994149452253	WITHOUT_CLASSIFICATION	5.850547746718204E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999993265524777	WITHOUT_CLASSIFICATION	6.734475222542737E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999993265524777	WITHOUT_CLASSIFICATION	6.734475222542737E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999993265524777	WITHOUT_CLASSIFICATION	6.734475222542737E-7	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999826861049083	WITHOUT_CLASSIFICATION	1.7313895091688084E-5	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999988606815066	WITHOUT_CLASSIFICATION	1.1393184935065457E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978487386029	WITHOUT_CLASSIFICATION	2.151261397147041E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978487386029	WITHOUT_CLASSIFICATION	2.151261397147041E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999163076572	WITHOUT_CLASSIFICATION	8.369234277347977E-8	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999640928646	WITHOUT_CLASSIFICATION	3.5907135422722604E-8	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999305761718	WITHOUT_CLASSIFICATION	6.942382829581977E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999998723005429	WITHOUT_CLASSIFICATION	1.2769945710830505E-7	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999997872781804	WITHOUT_CLASSIFICATION	2.1272181965924966E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999960222506267	WITHOUT_CLASSIFICATION	3.97774937335612E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999960222506267	WITHOUT_CLASSIFICATION	3.97774937335612E-6	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999975704749513	WITHOUT_CLASSIFICATION	2.4295250487404656E-6	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999004405832006	WITHOUT_CLASSIFICATION	9.955941679932399E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999004405832006	WITHOUT_CLASSIFICATION	9.955941679932399E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999640515199806	WITHOUT_CLASSIFICATION	3.594848001940582E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999993265524777	WITHOUT_CLASSIFICATION	6.734475222542737E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999988606815066	WITHOUT_CLASSIFICATION	1.1393184935065457E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978487386029	WITHOUT_CLASSIFICATION	2.151261397147041E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999163076572	WITHOUT_CLASSIFICATION	8.369234277347977E-8	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999640928646	WITHOUT_CLASSIFICATION	3.5907135422722604E-8	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999305761718	WITHOUT_CLASSIFICATION	6.942382829581977E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999998723005429	WITHOUT_CLASSIFICATION	1.2769945710830505E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999004405832006	WITHOUT_CLASSIFICATION	9.955941679932399E-5	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999962753877396	WITHOUT_CLASSIFICATION	3.7246122604480168E-6	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999997668627026	WITHOUT_CLASSIFICATION	2.331372973387743E-7	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999977520397358	WITHOUT_CLASSIFICATION	2.2479602640933597E-6	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.99999993959041	WITHOUT_CLASSIFICATION	6.040959008021802E-8	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999952320689287	WITHOUT_CLASSIFICATION	4.767931071371196E-6	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999994833253498	WITHOUT_CLASSIFICATION	5.16674650238719E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999982466794722	WITHOUT_CLASSIFICATION	1.7533205278163645E-6	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999982466794722	WITHOUT_CLASSIFICATION	1.7533205278163645E-6	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9999998843233189	WITHOUT_CLASSIFICATION	1.1567668099993521E-7	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999998532886324	WITHOUT_CLASSIFICATION	1.4671136750180342E-7	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999994432764238	WITHOUT_CLASSIFICATION	5.567235763370034E-7	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999999302335947	WITHOUT_CLASSIFICATION	6.976640534582462E-8	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999995336247934	WITHOUT_CLASSIFICATION	4.6637520657975705E-7	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999995336247934	WITHOUT_CLASSIFICATION	4.6637520657975705E-7	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999999552713623	WITHOUT_CLASSIFICATION	4.472863768158326E-8	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999999402673738	WITHOUT_CLASSIFICATION	5.973262627713084E-8	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999999619035503	WITHOUT_CLASSIFICATION	3.809644962006568E-8	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999999619035503	WITHOUT_CLASSIFICATION	3.809644962006568E-8	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9999999359502285	WITHOUT_CLASSIFICATION	6.404977139979902E-8	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999999505737267	WITHOUT_CLASSIFICATION	4.942627318438406E-8	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999997872781804	WITHOUT_CLASSIFICATION	2.1272181965924966E-7	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999957275252461	WITHOUT_CLASSIFICATION	4.272474753904324E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999987276237002	WITHOUT_CLASSIFICATION	1.2723762997035112E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999944796575087	WITHOUT_CLASSIFICATION	5.520342491361689E-6	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999143460242237	WITHOUT_CLASSIFICATION	8.565397577620489E-5	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999971658510842	WITHOUT_CLASSIFICATION	2.8341489157986443E-6	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999975859120649	WITHOUT_CLASSIFICATION	2.414087934985798E-6	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999776778405892	WITHOUT_CLASSIFICATION	2.2322159410770287E-5	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.999998750831024	WITHOUT_CLASSIFICATION	1.24916897603395E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999998032454426	WITHOUT_CLASSIFICATION	1.9675455745603695E-7	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999998032454426	WITHOUT_CLASSIFICATION	1.9675455745603695E-7	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999997886115187	WITHOUT_CLASSIFICATION	2.113884812290684E-7	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999997886115187	WITHOUT_CLASSIFICATION	2.113884812290684E-7	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999998570567371	WITHOUT_CLASSIFICATION	1.4294326284467426E-7	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.999999435611234	WITHOUT_CLASSIFICATION	5.643887659166166E-7	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.999999435611234	WITHOUT_CLASSIFICATION	5.643887659166166E-7	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.999999435611234	WITHOUT_CLASSIFICATION	5.643887659166166E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999597048258	WITHOUT_CLASSIFICATION	4.0295174197796387E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999995561846339	WITHOUT_CLASSIFICATION	4.4381536612126906E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999995561846339	WITHOUT_CLASSIFICATION	4.4381536612126906E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999901148627254	WITHOUT_CLASSIFICATION	9.88513727462003E-6	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.999999640302435	WITHOUT_CLASSIFICATION	3.596975649721396E-7	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999988736839742	WITHOUT_CLASSIFICATION	1.1263160258007072E-6	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999999043575941	WITHOUT_CLASSIFICATION	9.564240587005234E-8	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9998145406448518	WITHOUT_CLASSIFICATION	1.8545935514825872E-4	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999583188882207	WITHOUT_CLASSIFICATION	4.1681111779326575E-5	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999908824722603	WITHOUT_CLASSIFICATION	9.117527739648832E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999962956505435	WITHOUT_CLASSIFICATION	3.7043494565033236E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999962956505435	WITHOUT_CLASSIFICATION	3.7043494565033236E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999597048258	WITHOUT_CLASSIFICATION	4.0295174197796387E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999901148627254	WITHOUT_CLASSIFICATION	9.88513727462003E-6	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999998942229184	WITHOUT_CLASSIFICATION	1.0577708174767181E-7	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.999999640302435	WITHOUT_CLASSIFICATION	3.596975649721396E-7	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999988736839742	WITHOUT_CLASSIFICATION	1.1263160258007072E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999894201019546	WITHOUT_CLASSIFICATION	1.0579898045449474E-5	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999983411134866	WITHOUT_CLASSIFICATION	1.6588865132757389E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999617195799	WITHOUT_CLASSIFICATION	3.828042007981231E-8	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999186316827765	WITHOUT_CLASSIFICATION	8.136831722346413E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.999975299822354	WITHOUT_CLASSIFICATION	2.470017764601992E-5	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999961861406503	WITHOUT_CLASSIFICATION	3.8138593495142746E-6	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999939651112375	WITHOUT_CLASSIFICATION	6.034888762482376E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999894201019546	WITHOUT_CLASSIFICATION	1.0579898045449474E-5	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.999935190994753	WITHOUT_CLASSIFICATION	6.480900524698433E-5	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.999935190994753	WITHOUT_CLASSIFICATION	6.480900524698433E-5	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999238388626894	WITHOUT_CLASSIFICATION	7.616113731056506E-5	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.999998452693093	WITHOUT_CLASSIFICATION	1.5473069069993043E-6	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9993112880960605	WITHOUT_CLASSIFICATION	6.887119039394351E-4	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9998375281106835	WITHOUT_CLASSIFICATION	1.624718893165317E-4	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999971646577116	WITHOUT_CLASSIFICATION	2.8353422884024244E-6	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.999998463053551	WITHOUT_CLASSIFICATION	1.5369464490892492E-6	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999880083968332	WITHOUT_CLASSIFICATION	1.199160316677564E-5	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999881614847577	WITHOUT_CLASSIFICATION	1.1838515242417377E-5	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9998844856250733	WITHOUT_CLASSIFICATION	1.1551437492673651E-4	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999990806624819	WITHOUT_CLASSIFICATION	9.193375179637091E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999983102266026	WITHOUT_CLASSIFICATION	1.6897733974323513E-6	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9998375281106835	WITHOUT_CLASSIFICATION	1.624718893165317E-4	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999971646577116	WITHOUT_CLASSIFICATION	2.8353422884024244E-6	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999989275495557	WITHOUT_CLASSIFICATION	1.0724504442687785E-6	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999996861611375	WITHOUT_CLASSIFICATION	3.138388624815868E-7	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.999998252885253	WITHOUT_CLASSIFICATION	1.7471147470294573E-6	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9999963954921678	WITHOUT_CLASSIFICATION	3.6045078321542633E-6	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999971763520651	WITHOUT_CLASSIFICATION	2.823647934905463E-6	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9997826883408268	WITHOUT_CLASSIFICATION	2.1731165917309345E-4	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9998178567826207	WITHOUT_CLASSIFICATION	1.8214321737919142E-4	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999995543836515	WITHOUT_CLASSIFICATION	4.456163484717759E-7	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999970608541322	WITHOUT_CLASSIFICATION	2.9391458678540214E-6	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999923062920278	WITHOUT_CLASSIFICATION	7.693707972121009E-6	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9999319811128258	WITHOUT_CLASSIFICATION	6.801888717414915E-5	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999763423355182	WITHOUT_CLASSIFICATION	2.365766448179286E-5	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999970033478218	WITHOUT_CLASSIFICATION	2.9966521781432024E-6	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.99999991325048	WITHOUT_CLASSIFICATION	8.674952001253614E-8	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9999791692452573	WITHOUT_CLASSIFICATION	2.083075474266994E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999998026423894	WITHOUT_CLASSIFICATION	1.9735761057518127E-7	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999800854371858	WITHOUT_CLASSIFICATION	1.991456281419997E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999157023571	WITHOUT_CLASSIFICATION	8.429764284471097E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999533935274	WITHOUT_CLASSIFICATION	4.660647267698697E-8	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.999999797803777	WITHOUT_CLASSIFICATION	2.0219622308791229E-7	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999800854371858	WITHOUT_CLASSIFICATION	1.991456281419997E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999157023571	WITHOUT_CLASSIFICATION	8.429764284471097E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999533935274	WITHOUT_CLASSIFICATION	4.660647267698697E-8	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999881015652264	WITHOUT_CLASSIFICATION	1.1898434773630913E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999999452458522	WITHOUT_CLASSIFICATION	5.475414781798153E-8	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999992894633898	WITHOUT_CLASSIFICATION	7.105366101562143E-7	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9998061807487804	WITHOUT_CLASSIFICATION	1.9381925121955354E-4	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9998190340988982	WITHOUT_CLASSIFICATION	1.809659011018255E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999820310870884	WITHOUT_CLASSIFICATION	1.7968912911676912E-5	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999910295488054	WITHOUT_CLASSIFICATION	8.970451194624547E-6	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999999793364676	WITHOUT_CLASSIFICATION	2.0663532433367538E-8	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999958384108979	WITHOUT_CLASSIFICATION	4.161589102108603E-6	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999986627246734	WITHOUT_CLASSIFICATION	1.3372753266629997E-6	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.989036891996261	WITHOUT_CLASSIFICATION	0.010963108003739022	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999948872009908	WITHOUT_CLASSIFICATION	5.1127990090808735E-6	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999991735665763	WITHOUT_CLASSIFICATION	8.264334237685334E-7	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999995147512444	WITHOUT_CLASSIFICATION	4.85248755589969E-7	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999886198209953	WITHOUT_CLASSIFICATION	1.138017900473513E-5	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.999999679323909	WITHOUT_CLASSIFICATION	3.2067609098078807E-7	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9999995410446777	WITHOUT_CLASSIFICATION	4.5895532234186064E-7	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.999998142171036	WITHOUT_CLASSIFICATION	1.857828964104458E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999987834776315	WITHOUT_CLASSIFICATION	1.2165223685152452E-6	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999994572287508	WITHOUT_CLASSIFICATION	5.42771249044608E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999952053830257	WITHOUT_CLASSIFICATION	4.794616974321968E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999977073542903	WITHOUT_CLASSIFICATION	2.2926457096888127E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999977073542903	WITHOUT_CLASSIFICATION	2.2926457096888127E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999922333007266	WITHOUT_CLASSIFICATION	7.766699273322164E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999922333007266	WITHOUT_CLASSIFICATION	7.766699273322164E-6	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999996311498411	WITHOUT_CLASSIFICATION	3.6885015892655374E-7	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999996311498411	WITHOUT_CLASSIFICATION	3.6885015892655374E-7	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999930344445731	WITHOUT_CLASSIFICATION	6.965555426905331E-6	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999951661702	WITHOUT_CLASSIFICATION	4.83382985235524E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999978368946068	WITHOUT_CLASSIFICATION	2.1631053931706454E-6	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999985867294073	WITHOUT_CLASSIFICATION	1.413270592623898E-6	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.999999958049581	WITHOUT_CLASSIFICATION	4.19504191054822E-8	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999370598937	WITHOUT_CLASSIFICATION	6.294010639116709E-8	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999999736734984	WITHOUT_CLASSIFICATION	2.6326501627477615E-8	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999998470368053	WITHOUT_CLASSIFICATION	1.5296319472437337E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999962956505435	WITHOUT_CLASSIFICATION	3.7043494565033236E-6	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999930344445731	WITHOUT_CLASSIFICATION	6.965555426905331E-6	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999951661702	WITHOUT_CLASSIFICATION	4.83382985235524E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999978368946068	WITHOUT_CLASSIFICATION	2.1631053931706454E-6	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.999999958049581	WITHOUT_CLASSIFICATION	4.19504191054822E-8	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999370598937	WITHOUT_CLASSIFICATION	6.294010639116709E-8	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.999970158218867	WITHOUT_CLASSIFICATION	2.9841781132946257E-5	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.999997706837309	WITHOUT_CLASSIFICATION	2.293162691043532E-6	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9994966309628125	WITHOUT_CLASSIFICATION	5.033690371874129E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9994966309628125	WITHOUT_CLASSIFICATION	5.033690371874129E-4	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999975272443448	WITHOUT_CLASSIFICATION	2.4727556552874754E-6	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999924760883298	WITHOUT_CLASSIFICATION	7.523911670345884E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999883796412898	WITHOUT_CLASSIFICATION	1.1620358710175208E-5	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999995804455155	WITHOUT_CLASSIFICATION	4.195544843955885E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999995804455155	WITHOUT_CLASSIFICATION	4.195544843955885E-7	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999958687395357	WITHOUT_CLASSIFICATION	4.131260464248015E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999999926323406	WITHOUT_CLASSIFICATION	7.367659386656533E-9	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999971353419507	WITHOUT_CLASSIFICATION	2.864658049348539E-6	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999980032766151	WITHOUT_CLASSIFICATION	1.9967233847967615E-6	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999959355812488	WITHOUT_CLASSIFICATION	4.064418751217835E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999959297269351	WITHOUT_CLASSIFICATION	4.070273064976848E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999552244072053	WITHOUT_CLASSIFICATION	4.477559279484104E-5	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999998219151619	WITHOUT_CLASSIFICATION	1.7808483803511885E-7	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999998012650541	WITHOUT_CLASSIFICATION	1.9873494596312143E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999908274747308	WITHOUT_CLASSIFICATION	9.172525269111431E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999986050865808	WITHOUT_CLASSIFICATION	1.394913419209276E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999958687395357	WITHOUT_CLASSIFICATION	4.131260464248015E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999999926323406	WITHOUT_CLASSIFICATION	7.367659386656533E-9	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999980032766151	WITHOUT_CLASSIFICATION	1.9967233847967615E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999747985006305	WITHOUT_CLASSIFICATION	2.5201499369446108E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999883796412898	WITHOUT_CLASSIFICATION	1.1620358710175208E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999883796412898	WITHOUT_CLASSIFICATION	1.1620358710175208E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999983102266026	WITHOUT_CLASSIFICATION	1.6897733974323513E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999983102266026	WITHOUT_CLASSIFICATION	1.6897733974323513E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9986843576437466	WITHOUT_CLASSIFICATION	0.0013156423562534414	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9986843576437466	WITHOUT_CLASSIFICATION	0.0013156423562534414	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999983193993843	WITHOUT_CLASSIFICATION	1.6806006156254767E-6	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999983014387281	WITHOUT_CLASSIFICATION	1.6985612717865687E-6	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.99995325044686	WITHOUT_CLASSIFICATION	4.674955314007081E-5	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999930765048041	WITHOUT_CLASSIFICATION	6.92349519597077E-6	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.999997511960612	WITHOUT_CLASSIFICATION	2.4880393879785585E-6	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999973654020391	WITHOUT_CLASSIFICATION	2.6345979609924367E-6	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999776286393998	WITHOUT_CLASSIFICATION	2.237136060028693E-5	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.999999935108938	WITHOUT_CLASSIFICATION	6.489106201020678E-8	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999825490372338	WITHOUT_CLASSIFICATION	1.745096276623006E-5	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999983490030305	WITHOUT_CLASSIFICATION	1.6509969694277778E-6	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999994999887337	WITHOUT_CLASSIFICATION	5.000112663606343E-7	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.999999772548226	WITHOUT_CLASSIFICATION	2.2745177392850554E-7	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999994868504333	WITHOUT_CLASSIFICATION	5.131495667292487E-7	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999999903001887	WITHOUT_CLASSIFICATION	9.699811166704007E-9	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999973843931111	WITHOUT_CLASSIFICATION	2.615606888808383E-6	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999975174842879	WITHOUT_CLASSIFICATION	2.482515712063368E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999960623797669	WITHOUT_CLASSIFICATION	3.937620233010769E-6	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999997683412979	WITHOUT_CLASSIFICATION	2.3165870223108033E-7	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999858479073382	WITHOUT_CLASSIFICATION	1.4152092661756456E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999552244072053	WITHOUT_CLASSIFICATION	4.477559279484104E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999998012650541	WITHOUT_CLASSIFICATION	1.9873494596312143E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999158783463072	WITHOUT_CLASSIFICATION	8.412165369277896E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978487386029	WITHOUT_CLASSIFICATION	2.151261397147041E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978487386029	WITHOUT_CLASSIFICATION	2.151261397147041E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999747985006305	WITHOUT_CLASSIFICATION	2.5201499369446108E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999883796412898	WITHOUT_CLASSIFICATION	1.1620358710175208E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999983102266026	WITHOUT_CLASSIFICATION	1.6897733974323513E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9986843576437466	WITHOUT_CLASSIFICATION	0.0013156423562534414	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999623565922046	WITHOUT_CLASSIFICATION	3.764340779555548E-5	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9981696468310977	WITHOUT_CLASSIFICATION	0.0018303531689023555	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999998446324233	WITHOUT_CLASSIFICATION	1.5536757670415748E-7	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9999886133078706	WITHOUT_CLASSIFICATION	1.1386692129387897E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.999999162253837	WITHOUT_CLASSIFICATION	8.377461629519722E-7	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.999999162253837	WITHOUT_CLASSIFICATION	8.377461629519722E-7	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999982833211407	WITHOUT_CLASSIFICATION	1.7166788592573696E-6	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999997491679702	WITHOUT_CLASSIFICATION	2.508320297321969E-7	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999007217605	WITHOUT_CLASSIFICATION	9.927823954642942E-8	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999995202600397	WITHOUT_CLASSIFICATION	4.797399602385049E-7	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999298342473	WITHOUT_CLASSIFICATION	7.016575274561558E-8	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999298342473	WITHOUT_CLASSIFICATION	7.016575274561558E-8	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999957528613738	WITHOUT_CLASSIFICATION	4.247138626264219E-6	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999998422111335	WITHOUT_CLASSIFICATION	1.577888665247192E-7	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999879932457111	WITHOUT_CLASSIFICATION	1.2006754288931635E-5	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999969670135153	WITHOUT_CLASSIFICATION	3.032986484661508E-6	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.999999846811439	WITHOUT_CLASSIFICATION	1.5318856102281995E-7	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999991426438208	WITHOUT_CLASSIFICATION	8.573561790673544E-7	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.999995165870311	WITHOUT_CLASSIFICATION	4.834129688977796E-6	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999999185395856	WITHOUT_CLASSIFICATION	8.146041436081369E-8	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.999715019893653	WITHOUT_CLASSIFICATION	2.84980106347114E-4	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9998652601273135	WITHOUT_CLASSIFICATION	1.3473987268654942E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9999820240805577	WITHOUT_CLASSIFICATION	1.797591944238679E-5	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999983870341506	WITHOUT_CLASSIFICATION	1.612965849363064E-6	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999642455557648	WITHOUT_CLASSIFICATION	3.575444423521775E-5	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999940114144191	WITHOUT_CLASSIFICATION	5.988585580823996E-6	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9999993236002823	WITHOUT_CLASSIFICATION	6.763997177231851E-7	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.999990649134952	WITHOUT_CLASSIFICATION	9.350865048034666E-6	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999998467239035	WITHOUT_CLASSIFICATION	1.5327609651631638E-7	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999904086322385	WITHOUT_CLASSIFICATION	9.591367761451451E-6	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999680438346531	WITHOUT_CLASSIFICATION	3.195616534687542E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999974344896976	WITHOUT_CLASSIFICATION	2.565510302398919E-6	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999970625213784	WITHOUT_CLASSIFICATION	2.937478621511426E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999984149599879	WITHOUT_CLASSIFICATION	1.5850400121361126E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999984149599879	WITHOUT_CLASSIFICATION	1.5850400121361126E-6	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999958975400238	WITHOUT_CLASSIFICATION	4.102459976251065E-6	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9999997878010921	WITHOUT_CLASSIFICATION	2.121989078665299E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999990942824655	WITHOUT_CLASSIFICATION	9.057175346116742E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999990942824655	WITHOUT_CLASSIFICATION	9.057175346116742E-7	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9970163269977834	WITHOUT_CLASSIFICATION	0.0029836730022165634	DEFECT
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999885510778201	WITHOUT_CLASSIFICATION	1.1448922179950064E-5	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999886842775751	WITHOUT_CLASSIFICATION	1.1315722424928392E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999799605648504	WITHOUT_CLASSIFICATION	2.0039435149675322E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999799605648504	WITHOUT_CLASSIFICATION	2.0039435149675322E-5	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9999685583838175	WITHOUT_CLASSIFICATION	3.144161618246839E-5	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.999999942118265	WITHOUT_CLASSIFICATION	5.7881734979922474E-8	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999966502772751	WITHOUT_CLASSIFICATION	3.34972272487629E-6	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999707809142888	WITHOUT_CLASSIFICATION	2.9219085711172954E-5	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9998178879218761	WITHOUT_CLASSIFICATION	1.8211207812380588E-4	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999998630964673	WITHOUT_CLASSIFICATION	1.3690353278610088E-7	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999999641459636	WITHOUT_CLASSIFICATION	3.5854036386331273E-8	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999843017519018	WITHOUT_CLASSIFICATION	1.569824809814115E-5	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999984940196124	WITHOUT_CLASSIFICATION	1.5059803876467801E-6	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9999870404910962	WITHOUT_CLASSIFICATION	1.295950890386028E-5	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999929391316473	WITHOUT_CLASSIFICATION	7.060868352717262E-6	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999990714716972	WITHOUT_CLASSIFICATION	9.285283028854464E-7	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999993329728617	WITHOUT_CLASSIFICATION	6.67027138340278E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999998543608183	WITHOUT_CLASSIFICATION	1.4563918184584357E-7	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999985564250635	WITHOUT_CLASSIFICATION	1.4435749364522042E-6	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9999385356750329	WITHOUT_CLASSIFICATION	6.146432496715019E-5	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999972094446595	WITHOUT_CLASSIFICATION	2.790555340508051E-6	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999966436962625	WITHOUT_CLASSIFICATION	3.356303737524204E-6	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999894641352972	WITHOUT_CLASSIFICATION	1.0535864702846698E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.999991837785995	WITHOUT_CLASSIFICATION	8.162214004994892E-6	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999998637043633	WITHOUT_CLASSIFICATION	1.362956367322715E-7	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999999102591521	WITHOUT_CLASSIFICATION	8.974084782452646E-8	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999717190613712	WITHOUT_CLASSIFICATION	2.8280938628772932E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999963563986535	WITHOUT_CLASSIFICATION	3.6436013465053705E-6	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999995497771634	WITHOUT_CLASSIFICATION	4.5022283651336357E-7	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9994257151152947	WITHOUT_CLASSIFICATION	5.742848847054709E-4	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9870699044248464	WITHOUT_CLASSIFICATION	0.01293009557515357	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999971973859678	WITHOUT_CLASSIFICATION	2.8026140322698348E-6	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999988139798971	WITHOUT_CLASSIFICATION	1.186020102945567E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999993666460989	WITHOUT_CLASSIFICATION	6.333539012069467E-7	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999997274502548	WITHOUT_CLASSIFICATION	2.7254974529556306E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999998543608183	WITHOUT_CLASSIFICATION	1.4563918184584357E-7	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999971973859678	WITHOUT_CLASSIFICATION	2.8026140322698348E-6	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999988139798971	WITHOUT_CLASSIFICATION	1.186020102945567E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999997274502548	WITHOUT_CLASSIFICATION	2.7254974529556306E-7	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999999195867748	WITHOUT_CLASSIFICATION	8.041322511406519E-8	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999995765508582	WITHOUT_CLASSIFICATION	4.234491417535233E-7	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999994894835637	WITHOUT_CLASSIFICATION	5.105164364126488E-7	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999997124911674	WITHOUT_CLASSIFICATION	2.87508832562323E-7	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999993940480759	WITHOUT_CLASSIFICATION	6.059519240292383E-7	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9998406722091834	WITHOUT_CLASSIFICATION	1.593277908166888E-4	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999974630880375	WITHOUT_CLASSIFICATION	2.5369119624101137E-6	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999996483112844	WITHOUT_CLASSIFICATION	3.516887156092604E-7	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999995640124527	WITHOUT_CLASSIFICATION	4.359875473705388E-7	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999764208835014	WITHOUT_CLASSIFICATION	2.3579116498680646E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.99998884361983	WITHOUT_CLASSIFICATION	1.1156380170024772E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.99998884361983	WITHOUT_CLASSIFICATION	1.1156380170024772E-5	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999958678598035	WITHOUT_CLASSIFICATION	4.13214019640068E-6	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999958717306284	WITHOUT_CLASSIFICATION	4.128269371601827E-6	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999944734672174	WITHOUT_CLASSIFICATION	5.5265327826317825E-6	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999975531439097	WITHOUT_CLASSIFICATION	2.4468560902934063E-6	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999954095337623	WITHOUT_CLASSIFICATION	4.590466237652289E-6	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999943968220704	WITHOUT_CLASSIFICATION	5.603177929652496E-6	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999975490737454	WITHOUT_CLASSIFICATION	2.4509262545535964E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9974715726111554	WITHOUT_CLASSIFICATION	0.002528427388844749	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999793854736589	WITHOUT_CLASSIFICATION	2.061452634111945E-5	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.999988535993329	WITHOUT_CLASSIFICATION	1.1464006670973055E-5	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999999010266485	WITHOUT_CLASSIFICATION	9.897335146779227E-8	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999985528803772	WITHOUT_CLASSIFICATION	1.4471196227794422E-6	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999999289180789	WITHOUT_CLASSIFICATION	7.108192111321113E-8	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999988576158274	WITHOUT_CLASSIFICATION	1.1423841725781146E-6	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999998683634375	WITHOUT_CLASSIFICATION	1.3163656254689463E-7	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.999999995639853	WITHOUT_CLASSIFICATION	4.360146993212351E-9	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999999746967324	WITHOUT_CLASSIFICATION	2.5303267548379464E-8	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999999062830393	WITHOUT_CLASSIFICATION	9.371696077247313E-8	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.999999840552466	WITHOUT_CLASSIFICATION	1.594475338773596E-7	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999983089849571	WITHOUT_CLASSIFICATION	1.6910150429096737E-6	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999978114455857	WITHOUT_CLASSIFICATION	2.1885544142223674E-6	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999938106568332	WITHOUT_CLASSIFICATION	6.189343166739853E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999998996111845	WITHOUT_CLASSIFICATION	1.0038881550466553E-7	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999982465293268	WITHOUT_CLASSIFICATION	1.7534706731974142E-6	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999995552879527	WITHOUT_CLASSIFICATION	4.447120471963073E-7	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999956827355262	WITHOUT_CLASSIFICATION	4.317264473879396E-6	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.9999948193330516	WITHOUT_CLASSIFICATION	5.180666948349735E-6	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9999555539253043	WITHOUT_CLASSIFICATION	4.444607469567151E-5	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999966168258401	WITHOUT_CLASSIFICATION	3.38317415988223E-6	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999992824771823	WITHOUT_CLASSIFICATION	7.175228177450729E-7	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999994444320781	WITHOUT_CLASSIFICATION	5.555679219789833E-7	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999997184821053	WITHOUT_CLASSIFICATION	2.815178946032999E-7	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999993779590202	WITHOUT_CLASSIFICATION	6.220409797820825E-7	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999997269154225	WITHOUT_CLASSIFICATION	2.7308457744630345E-7	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999975482457986	WITHOUT_CLASSIFICATION	2.451754201337558E-6	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999965044192867	WITHOUT_CLASSIFICATION	3.4955807134183575E-6	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999997873933585	WITHOUT_CLASSIFICATION	2.1260664151496063E-7	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.999999144912326	WITHOUT_CLASSIFICATION	8.550876739352938E-7	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.999990956537557	WITHOUT_CLASSIFICATION	9.043462442994977E-6	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999993882780494	WITHOUT_CLASSIFICATION	6.11721950685788E-7	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9999941075567383	WITHOUT_CLASSIFICATION	5.89244326169641E-6	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999876201199852	WITHOUT_CLASSIFICATION	1.237988001474436E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999969652047954	WITHOUT_CLASSIFICATION	3.0347952045096933E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999968081286031	WITHOUT_CLASSIFICATION	3.1918713969188523E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999998097012205	WITHOUT_CLASSIFICATION	1.9029877954588356E-7	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9990107756479021	WITHOUT_CLASSIFICATION	9.892243520979766E-4	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9999996554741032	WITHOUT_CLASSIFICATION	3.445258968588617E-7	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999631579586049	WITHOUT_CLASSIFICATION	3.6842041395151776E-5	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9998567588859884	WITHOUT_CLASSIFICATION	1.432411140116371E-4	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999998940030176	WITHOUT_CLASSIFICATION	1.0599698247154106E-7	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999995127487373	WITHOUT_CLASSIFICATION	4.872512626305388E-7	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999913230243701	WITHOUT_CLASSIFICATION	8.676975629946275E-6	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.999959039381508	WITHOUT_CLASSIFICATION	4.096061849196035E-5	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999890239333198	WITHOUT_CLASSIFICATION	1.0976066680318728E-5	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9999999154416838	WITHOUT_CLASSIFICATION	8.455831627238281E-8	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999982624035559	WITHOUT_CLASSIFICATION	1.7375964440719878E-6	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999997328916095	WITHOUT_CLASSIFICATION	2.6710839052707297E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999960777977049	WITHOUT_CLASSIFICATION	3.92220229500237E-6	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9684647077614748	WITHOUT_CLASSIFICATION	0.031535292238525255	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999719648530722	WITHOUT_CLASSIFICATION	2.8035146927823615E-5	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999719648530722	WITHOUT_CLASSIFICATION	2.8035146927823615E-5	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999969818366105	WITHOUT_CLASSIFICATION	3.018163389554478E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.999881585174602	WITHOUT_CLASSIFICATION	1.1841482539795792E-4	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999914539669886	WITHOUT_CLASSIFICATION	8.546033011394402E-6	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999969831311801	WITHOUT_CLASSIFICATION	3.0168688198379027E-6	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999962665967045	WITHOUT_CLASSIFICATION	3.7334032954555368E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9994422711893542	WITHOUT_CLASSIFICATION	5.577288106457018E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9998621557474409	WITHOUT_CLASSIFICATION	1.3784425255912154E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999996414749561	WITHOUT_CLASSIFICATION	3.5852504387591453E-7	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999994621656101	WITHOUT_CLASSIFICATION	5.378343899199222E-7	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999999834068065	WITHOUT_CLASSIFICATION	1.6593193532480536E-8	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999977337352981	WITHOUT_CLASSIFICATION	2.266264701839095E-6	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.999999844231859	WITHOUT_CLASSIFICATION	1.557681411502168E-7	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999966964666983	WITHOUT_CLASSIFICATION	3.303533301653617E-6	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999998862157486	WITHOUT_CLASSIFICATION	1.137842513069548E-7	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.999840060105151	WITHOUT_CLASSIFICATION	1.5993989484902588E-4	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999977936217551	WITHOUT_CLASSIFICATION	2.206378244870812E-6	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999994844875854	WITHOUT_CLASSIFICATION	5.155124147123645E-7	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999993380582247	WITHOUT_CLASSIFICATION	6.619417753734042E-7	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.999989306206067	WITHOUT_CLASSIFICATION	1.069379393307082E-5	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999983577309565	WITHOUT_CLASSIFICATION	1.6422690435071972E-6	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999991328000315	WITHOUT_CLASSIFICATION	8.671999684208726E-7	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.999977847761785	WITHOUT_CLASSIFICATION	2.2152238214927226E-5	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999637286629924	WITHOUT_CLASSIFICATION	3.627133700752572E-5	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999880373510869	WITHOUT_CLASSIFICATION	1.1962648913047025E-5	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999991284533383	WITHOUT_CLASSIFICATION	8.715466616131984E-7	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999985417776813	WITHOUT_CLASSIFICATION	1.4582223187267436E-6	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999990017648909	WITHOUT_CLASSIFICATION	9.982351091487627E-7	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999887427639075	WITHOUT_CLASSIFICATION	1.1257236092465304E-5	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999993867430083	WITHOUT_CLASSIFICATION	6.132569918279577E-7	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9999999827361274	WITHOUT_CLASSIFICATION	1.7263872585627082E-8	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999988997584687	WITHOUT_CLASSIFICATION	1.1002415313269031E-6	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999957061386991	WITHOUT_CLASSIFICATION	4.293861300789247E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999977937966078	WITHOUT_CLASSIFICATION	2.2062033921465005E-6	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999997052893449	WITHOUT_CLASSIFICATION	2.94710655145085E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999977937966078	WITHOUT_CLASSIFICATION	2.2062033921465005E-6	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.999998775635218	WITHOUT_CLASSIFICATION	1.2243647820228587E-6	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999095286163453	WITHOUT_CLASSIFICATION	9.047138365470376E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999095286163453	WITHOUT_CLASSIFICATION	9.047138365470376E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999095286163453	WITHOUT_CLASSIFICATION	9.047138365470376E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999996120978285	WITHOUT_CLASSIFICATION	3.8790217152005193E-7	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999996120978285	WITHOUT_CLASSIFICATION	3.8790217152005193E-7	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999998453136195	WITHOUT_CLASSIFICATION	1.546863804486282E-7	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999844010591995	WITHOUT_CLASSIFICATION	1.559894080047552E-5	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999999902256473	WITHOUT_CLASSIFICATION	9.774352542571572E-9	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999983787473963	WITHOUT_CLASSIFICATION	1.6212526036787734E-6	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999918870348015	WITHOUT_CLASSIFICATION	8.112965198576276E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999997539210902	WITHOUT_CLASSIFICATION	2.460789097731876E-7	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9999952898840543	WITHOUT_CLASSIFICATION	4.710115945751188E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999993501600817	WITHOUT_CLASSIFICATION	6.498399183891158E-7	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999996413517821	WITHOUT_CLASSIFICATION	3.586482178662772E-7	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.999999650296338	WITHOUT_CLASSIFICATION	3.4970366199314916E-7	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999855045572497	WITHOUT_CLASSIFICATION	1.4495442750469848E-5	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9999746034101664	WITHOUT_CLASSIFICATION	2.5396589833593946E-5	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999934114883192	WITHOUT_CLASSIFICATION	6.5885116808085545E-6	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999981952227806	WITHOUT_CLASSIFICATION	1.804777219384882E-6	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999996137190755	WITHOUT_CLASSIFICATION	3.8628092444178677E-7	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999997798300714	WITHOUT_CLASSIFICATION	2.2016992862177975E-7	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.999998679831452	WITHOUT_CLASSIFICATION	1.3201685479366397E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999985795548569	WITHOUT_CLASSIFICATION	1.420445143061935E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999985795548569	WITHOUT_CLASSIFICATION	1.420445143061935E-6	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999984711735859	WITHOUT_CLASSIFICATION	1.5288264141377915E-6	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999997850720542	WITHOUT_CLASSIFICATION	2.1492794577799125E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999997850720542	WITHOUT_CLASSIFICATION	2.1492794577799125E-7	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9999942894675136	WITHOUT_CLASSIFICATION	5.710532486477072E-6	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999993128015664	WITHOUT_CLASSIFICATION	6.871984336106437E-7	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999997283574256	WITHOUT_CLASSIFICATION	2.7164257441243695E-7	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999979774384343	WITHOUT_CLASSIFICATION	2.0225615656759015E-6	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999991043098393	WITHOUT_CLASSIFICATION	8.956901606788689E-7	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9999982226646884	WITHOUT_CLASSIFICATION	1.7773353115756866E-6	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999985500185687	WITHOUT_CLASSIFICATION	1.4499814312579982E-6	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999945733003359	WITHOUT_CLASSIFICATION	5.4266996640979396E-6	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999996572746193	WITHOUT_CLASSIFICATION	3.4272538074539923E-7	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.99999766644522	WITHOUT_CLASSIFICATION	2.3335547798333165E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999999307585211	WITHOUT_CLASSIFICATION	6.924147892814982E-8	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999957851247221	WITHOUT_CLASSIFICATION	4.21487527786768E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.999999880016912	WITHOUT_CLASSIFICATION	1.1998308809640373E-7	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.999999646794479	WITHOUT_CLASSIFICATION	3.532055209785473E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999993501600817	WITHOUT_CLASSIFICATION	6.498399183891158E-7	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9998561518805925	WITHOUT_CLASSIFICATION	1.4384811940746227E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999981720289887	WITHOUT_CLASSIFICATION	1.8279710113401704E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999998794376437	WITHOUT_CLASSIFICATION	1.2056235639925707E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999998794376437	WITHOUT_CLASSIFICATION	1.2056235639925707E-7	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999906710513573	WITHOUT_CLASSIFICATION	9.328948642753835E-6	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9999962331188073	WITHOUT_CLASSIFICATION	3.7668811926306146E-6	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999976632148212	WITHOUT_CLASSIFICATION	2.3367851788087073E-6	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999954277347396	WITHOUT_CLASSIFICATION	4.572265260472452E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.999999863363699	WITHOUT_CLASSIFICATION	1.3663630105672573E-7	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999985020388782	WITHOUT_CLASSIFICATION	1.497961121866576E-6	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.999983971449745	WITHOUT_CLASSIFICATION	1.6028550254878093E-5	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9999983954310765	WITHOUT_CLASSIFICATION	1.6045689235341719E-6	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999999596390589	WITHOUT_CLASSIFICATION	4.0360941181809293E-8	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.999988449810912	WITHOUT_CLASSIFICATION	1.1550189088013142E-5	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9999793944072649	WITHOUT_CLASSIFICATION	2.0605592735112816E-5	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.999996993065196	WITHOUT_CLASSIFICATION	3.0069348039700947E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9927699307008071	WITHOUT_CLASSIFICATION	0.0072300692991929035	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.999977976108347	WITHOUT_CLASSIFICATION	2.2023891652949967E-5	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999965810720935	WITHOUT_CLASSIFICATION	3.418927906469371E-6	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.999947108248737	WITHOUT_CLASSIFICATION	5.289175126303797E-5	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999994606895665	WITHOUT_CLASSIFICATION	5.393104335123357E-7	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999996660842438	WITHOUT_CLASSIFICATION	3.339157560965562E-7	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999996468356609	WITHOUT_CLASSIFICATION	3.5316433913649193E-7	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999943099494543	WITHOUT_CLASSIFICATION	5.690050545645611E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999226933890828	WITHOUT_CLASSIFICATION	7.730661091716876E-5	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999751902591312	WITHOUT_CLASSIFICATION	2.4809740868826187E-5	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999979335238692	WITHOUT_CLASSIFICATION	2.066476130728287E-6	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999995734888749	WITHOUT_CLASSIFICATION	4.265111251446779E-7	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9994978307613689	WITHOUT_CLASSIFICATION	5.021692386310198E-4	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999906900620114	WITHOUT_CLASSIFICATION	9.309937988618851E-6	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.999925479945377	WITHOUT_CLASSIFICATION	7.452005462306409E-5	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.999954915173022	WITHOUT_CLASSIFICATION	4.508482697800488E-5	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.999991195945395	WITHOUT_CLASSIFICATION	8.804054605009732E-6	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9999997061789518	WITHOUT_CLASSIFICATION	2.938210481449141E-7	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9998052229229459	WITHOUT_CLASSIFICATION	1.9477707705396467E-4	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999969428784026	WITHOUT_CLASSIFICATION	3.057121597365431E-6	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999802866735455	WITHOUT_CLASSIFICATION	1.971332645444153E-5	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9975526196823595	WITHOUT_CLASSIFICATION	0.0024473803176405106	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999992067144444	WITHOUT_CLASSIFICATION	7.932855555208992E-7	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999976685760983	WITHOUT_CLASSIFICATION	2.331423901756944E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.999954915173022	WITHOUT_CLASSIFICATION	4.508482697800488E-5	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9998981391967967	WITHOUT_CLASSIFICATION	1.0186080320330911E-4	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999992067144444	WITHOUT_CLASSIFICATION	7.932855555208992E-7	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9999982023823334	WITHOUT_CLASSIFICATION	1.797617666694328E-6	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999967425417456	WITHOUT_CLASSIFICATION	3.2574582542850585E-6	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.999998638014054	WITHOUT_CLASSIFICATION	1.36198594600806E-6	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999934012774213	WITHOUT_CLASSIFICATION	6.598722578646835E-6	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.999999618970225	WITHOUT_CLASSIFICATION	3.8102977505013746E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999995462839074	WITHOUT_CLASSIFICATION	4.537160925630156E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999995462839074	WITHOUT_CLASSIFICATION	4.537160925630156E-7	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999986769786406	WITHOUT_CLASSIFICATION	1.3230213593102535E-6	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999994494108201	WITHOUT_CLASSIFICATION	5.505891798329769E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999996117960721	WITHOUT_CLASSIFICATION	3.8820392791395146E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999996117960721	WITHOUT_CLASSIFICATION	3.8820392791395146E-7	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9987425538824914	WITHOUT_CLASSIFICATION	0.0012574461175085519	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9991409087881202	WITHOUT_CLASSIFICATION	8.59091211879788E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9996872284186337	WITHOUT_CLASSIFICATION	3.127715813663352E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9996872284186337	WITHOUT_CLASSIFICATION	3.127715813663352E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999736020682987	WITHOUT_CLASSIFICATION	2.6397931701317305E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999965726884171	WITHOUT_CLASSIFICATION	3.427311582851807E-6	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999937124737394	WITHOUT_CLASSIFICATION	6.287526260614406E-6	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999992462314724	WITHOUT_CLASSIFICATION	7.537685274492044E-7	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999456554381471	WITHOUT_CLASSIFICATION	5.434456185290935E-5	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999953977862307	WITHOUT_CLASSIFICATION	4.602213769245995E-6	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999999846668802	WITHOUT_CLASSIFICATION	1.5333119765501818E-8	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999945623913937	WITHOUT_CLASSIFICATION	5.437608606385798E-6	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999946168303292	WITHOUT_CLASSIFICATION	5.38316967073604E-6	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999888896655701	WITHOUT_CLASSIFICATION	1.1110334429838112E-5	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999967029647856	WITHOUT_CLASSIFICATION	3.2970352143958198E-6	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999946124726625	WITHOUT_CLASSIFICATION	5.387527337532784E-6	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999843910768235	WITHOUT_CLASSIFICATION	1.5608923176583878E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999009399279531	WITHOUT_CLASSIFICATION	9.906007204676057E-5	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999981900274049	WITHOUT_CLASSIFICATION	1.8099725951260254E-6	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999989964330059	WITHOUT_CLASSIFICATION	1.0035669941302008E-6	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.999995605959828	WITHOUT_CLASSIFICATION	4.394040172106338E-6	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999991193226047	WITHOUT_CLASSIFICATION	8.806773952876299E-7	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999922630629966	WITHOUT_CLASSIFICATION	7.736937003376195E-6	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9998828215152877	WITHOUT_CLASSIFICATION	1.1717848471223596E-4	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999986368020305	WITHOUT_CLASSIFICATION	1.3631979695009824E-6	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999938921886123	WITHOUT_CLASSIFICATION	6.1078113876251435E-6	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999820850302603	WITHOUT_CLASSIFICATION	1.791496973970838E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999568251052205	WITHOUT_CLASSIFICATION	4.31748947795192E-5	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999811949341879	WITHOUT_CLASSIFICATION	1.880506581213223E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999910766852703	WITHOUT_CLASSIFICATION	8.923314729694955E-6	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.999976202100348	WITHOUT_CLASSIFICATION	2.3797899652115737E-5	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999962103328264	WITHOUT_CLASSIFICATION	3.789667173651167E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999995077503813	WITHOUT_CLASSIFICATION	4.922496186596778E-7	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999995077503813	WITHOUT_CLASSIFICATION	4.922496186596778E-7	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999992081909646	WITHOUT_CLASSIFICATION	7.918090354796472E-7	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999917165339244	WITHOUT_CLASSIFICATION	8.283466075673752E-6	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9998928281910301	WITHOUT_CLASSIFICATION	1.0717180896988913E-4	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9999589074577871	WITHOUT_CLASSIFICATION	4.109254221283888E-5	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999189400234898	WITHOUT_CLASSIFICATION	8.105997651027086E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.999995172796924	WITHOUT_CLASSIFICATION	4.827203076094005E-6	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999965574623535	WITHOUT_CLASSIFICATION	3.442537646434796E-6	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999985189140161	WITHOUT_CLASSIFICATION	1.481085983826461E-6	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999707099281667	WITHOUT_CLASSIFICATION	2.92900718333014E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999989637391	WITHOUT_CLASSIFICATION	1.036260887671155E-9	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999999669775363	WITHOUT_CLASSIFICATION	3.3022463580604704E-8	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999981414380237	WITHOUT_CLASSIFICATION	1.8585619764332046E-6	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999555615679364	WITHOUT_CLASSIFICATION	4.4438432063468144E-5	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999987949653851	WITHOUT_CLASSIFICATION	1.2050346148971213E-6	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999985213854219	WITHOUT_CLASSIFICATION	1.4786145781725201E-6	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999998981864263	WITHOUT_CLASSIFICATION	1.0181357372178421E-7	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999993937387378	WITHOUT_CLASSIFICATION	6.062612622750604E-7	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999776321739068	WITHOUT_CLASSIFICATION	2.236782609326101E-5	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999956698892518	WITHOUT_CLASSIFICATION	4.330110748165935E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.999881274034156	WITHOUT_CLASSIFICATION	1.1872596584397325E-4	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999995651998674	WITHOUT_CLASSIFICATION	4.3480013259055365E-7	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999901154746051	WITHOUT_CLASSIFICATION	9.884525394756107E-6	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999999150386673	WITHOUT_CLASSIFICATION	8.496133281944337E-8	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999999783069805	WITHOUT_CLASSIFICATION	2.1693019536362733E-8	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999990550275358	WITHOUT_CLASSIFICATION	9.449724642478437E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999981431085737	WITHOUT_CLASSIFICATION	1.8568914263558383E-6	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999979226430985	WITHOUT_CLASSIFICATION	2.077356901531671E-6	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999996747513064	WITHOUT_CLASSIFICATION	3.2524869359191054E-7	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999955309289206	WITHOUT_CLASSIFICATION	4.469071079380472E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999996978738532	WITHOUT_CLASSIFICATION	3.0212614675263866E-7	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999909289218959	WITHOUT_CLASSIFICATION	9.071078104096387E-6	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999930771532582	WITHOUT_CLASSIFICATION	6.9228467417620654E-6	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999999289960472	WITHOUT_CLASSIFICATION	7.100395273630542E-8	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999996784491199	WITHOUT_CLASSIFICATION	3.21550880074097E-7	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999978281512437	WITHOUT_CLASSIFICATION	2.1718487561611107E-6	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9999907916955267	WITHOUT_CLASSIFICATION	9.20830447332652E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.999976711279242	WITHOUT_CLASSIFICATION	2.328872075796158E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999766344558493	WITHOUT_CLASSIFICATION	2.3365544150652662E-5	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.999999912638531	WITHOUT_CLASSIFICATION	8.736146900324566E-8	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999997441796471	WITHOUT_CLASSIFICATION	2.5582035291400597E-7	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9999804810289734	WITHOUT_CLASSIFICATION	1.951897102655759E-5	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999999725165869	WITHOUT_CLASSIFICATION	2.748341314879689E-8	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999979763662518	WITHOUT_CLASSIFICATION	2.0236337482013046E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999979763662518	WITHOUT_CLASSIFICATION	2.0236337482013046E-6	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999997976846946	WITHOUT_CLASSIFICATION	2.023153054190016E-7	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999990583193578	WITHOUT_CLASSIFICATION	9.416806421746133E-7	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999953713182385	WITHOUT_CLASSIFICATION	4.6286817615129806E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999979655195685	WITHOUT_CLASSIFICATION	2.034480431500408E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999987834776315	WITHOUT_CLASSIFICATION	1.2165223685152452E-6	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999994572287508	WITHOUT_CLASSIFICATION	5.42771249044608E-7	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999971779907298	WITHOUT_CLASSIFICATION	2.822009270196142E-6	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999661834445308	WITHOUT_CLASSIFICATION	3.381655546918981E-5	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9996834247767531	WITHOUT_CLASSIFICATION	3.1657522324686797E-4	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999948475364636	WITHOUT_CLASSIFICATION	5.152463536452421E-6	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999989269979005	WITHOUT_CLASSIFICATION	1.0730020995067055E-6	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999995302712141	WITHOUT_CLASSIFICATION	4.6972878593121415E-7	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999999588544874	WITHOUT_CLASSIFICATION	4.1145512476341213E-8	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999998084543785	WITHOUT_CLASSIFICATION	1.9154562146490935E-7	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999997811509064	WITHOUT_CLASSIFICATION	2.1884909356334954E-7	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.999999967137907	WITHOUT_CLASSIFICATION	3.286209303601604E-8	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999998309387511	WITHOUT_CLASSIFICATION	1.6906124878185411E-7	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999998638047091	WITHOUT_CLASSIFICATION	1.3619529095469798E-7	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999993897182197	WITHOUT_CLASSIFICATION	6.102817802830185E-7	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.999999902492264	WITHOUT_CLASSIFICATION	9.75077359755835E-8	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999998658568777	WITHOUT_CLASSIFICATION	1.341431222612816E-7	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999981510387118	WITHOUT_CLASSIFICATION	1.8489612882799113E-6	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999997220780045	WITHOUT_CLASSIFICATION	2.77921995559006E-7	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999993996994412	WITHOUT_CLASSIFICATION	6.003005587073857E-7	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999529345945	WITHOUT_CLASSIFICATION	4.7065405443356267E-8	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.999999869044029	WITHOUT_CLASSIFICATION	1.3095597091510983E-7	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999509786527	WITHOUT_CLASSIFICATION	4.9021347376850074E-8	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999993303072372	WITHOUT_CLASSIFICATION	6.69692762843808E-7	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.99999865233428	WITHOUT_CLASSIFICATION	1.3476657200070515E-6	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999990853307107	WITHOUT_CLASSIFICATION	9.146692891718886E-7	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999972889909643	WITHOUT_CLASSIFICATION	2.7110090356991514E-6	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999971757496676	WITHOUT_CLASSIFICATION	2.824250332399705E-6	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999585388327802	WITHOUT_CLASSIFICATION	4.146116721971759E-5	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999981710946656	WITHOUT_CLASSIFICATION	1.828905334398556E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999766344558493	WITHOUT_CLASSIFICATION	2.3365544150652662E-5	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999953337025217	WITHOUT_CLASSIFICATION	4.666297478368854E-6	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999908587126028	WITHOUT_CLASSIFICATION	9.141287397259743E-6	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999908587126028	WITHOUT_CLASSIFICATION	9.141287397259743E-6	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999995558849875	WITHOUT_CLASSIFICATION	4.441150125826059E-7	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999960940501432	WITHOUT_CLASSIFICATION	3.905949856797618E-6	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999985505964836	WITHOUT_CLASSIFICATION	1.4494035164878864E-6	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999953977952402	WITHOUT_CLASSIFICATION	4.602204759863227E-6	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.999999492438107	WITHOUT_CLASSIFICATION	5.075618929017399E-7	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999995110719424	WITHOUT_CLASSIFICATION	4.889280575248909E-7	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.999999806813054	WITHOUT_CLASSIFICATION	1.9318694598064012E-7	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999995206991613	WITHOUT_CLASSIFICATION	4.793008386745439E-7	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999989901920873	WITHOUT_CLASSIFICATION	1.0098079127545337E-6	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999995784193477	WITHOUT_CLASSIFICATION	4.215806523090819E-7	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999990100756604	WITHOUT_CLASSIFICATION	9.899243395801618E-7	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.999999398439645	WITHOUT_CLASSIFICATION	6.015603549225081E-7	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999986696307265	WITHOUT_CLASSIFICATION	1.330369273520196E-6	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999866972458742	WITHOUT_CLASSIFICATION	1.3302754125926574E-5	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999841263559468	WITHOUT_CLASSIFICATION	1.58736440531315E-5	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9995572264141176	WITHOUT_CLASSIFICATION	4.427735858822862E-4	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999933550314581	WITHOUT_CLASSIFICATION	6.644968541927109E-6	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999972376940635	WITHOUT_CLASSIFICATION	2.7623059366011682E-6	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999967799190034	WITHOUT_CLASSIFICATION	3.220080996675196E-6	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999986556595787	WITHOUT_CLASSIFICATION	1.3443404213379252E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999953772259236	WITHOUT_CLASSIFICATION	4.622774076343152E-6	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999994688983893	WITHOUT_CLASSIFICATION	5.311016106998489E-7	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999995972701374	WITHOUT_CLASSIFICATION	4.0272986255492345E-7	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999976261678956	WITHOUT_CLASSIFICATION	2.373832104491007E-6	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999997180324589	WITHOUT_CLASSIFICATION	2.8196754115166406E-7	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999999478924175	WITHOUT_CLASSIFICATION	5.210758246649695E-8	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999981243682704	WITHOUT_CLASSIFICATION	1.875631729659495E-6	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999601284697	WITHOUT_CLASSIFICATION	3.9871530270488296E-8	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999966129642893	WITHOUT_CLASSIFICATION	3.3870357107483054E-6	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.999999764197551	WITHOUT_CLASSIFICATION	2.3580244900329456E-7	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.99999992644617	WITHOUT_CLASSIFICATION	7.355383004625577E-8	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999994150486511	WITHOUT_CLASSIFICATION	5.849513488920993E-7	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999972741179881	WITHOUT_CLASSIFICATION	2.7258820117791954E-6	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9998085317151062	WITHOUT_CLASSIFICATION	1.9146828489385246E-4	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999998579400133	WITHOUT_CLASSIFICATION	1.4205998666847802E-7	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999767801962485	WITHOUT_CLASSIFICATION	2.3219803751529578E-5	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999997201484957	WITHOUT_CLASSIFICATION	2.7985150428566505E-7	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999999478924175	WITHOUT_CLASSIFICATION	5.210758246649695E-8	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999981243682704	WITHOUT_CLASSIFICATION	1.875631729659495E-6	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999601284697	WITHOUT_CLASSIFICATION	3.9871530270488296E-8	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.999999764197551	WITHOUT_CLASSIFICATION	2.3580244900329456E-7	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9996080079343921	WITHOUT_CLASSIFICATION	3.919920656079481E-4	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999983905615055	WITHOUT_CLASSIFICATION	1.6094384944641832E-6	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999361513000871	WITHOUT_CLASSIFICATION	6.384869991285745E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999982743787938	WITHOUT_CLASSIFICATION	1.7256212061437731E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999991877465543	WITHOUT_CLASSIFICATION	8.122534457064995E-7	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999597236099326	WITHOUT_CLASSIFICATION	4.0276390067421416E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.99999957170091	WITHOUT_CLASSIFICATION	4.2829908989053595E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999997153723955	WITHOUT_CLASSIFICATION	2.8462760448597294E-7	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999968832784212	WITHOUT_CLASSIFICATION	3.116721578859061E-6	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999990581571041	WITHOUT_CLASSIFICATION	9.418428957684249E-7	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999998569506406	WITHOUT_CLASSIFICATION	1.4304935935017925E-7	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999990134014252	WITHOUT_CLASSIFICATION	9.865985748699174E-7	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999981270972698	WITHOUT_CLASSIFICATION	1.8729027302331558E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999984151966277	WITHOUT_CLASSIFICATION	1.5848033723571686E-6	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999984067262686	WITHOUT_CLASSIFICATION	1.593273731423536E-6	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999979852263823	WITHOUT_CLASSIFICATION	2.0147736177583195E-6	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999968536951919	WITHOUT_CLASSIFICATION	3.1463048080768017E-6	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999905210587146	WITHOUT_CLASSIFICATION	9.478941285355146E-6	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999989772840596	WITHOUT_CLASSIFICATION	1.0227159403743447E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999997201484957	WITHOUT_CLASSIFICATION	2.7985150428566505E-7	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999983905615055	WITHOUT_CLASSIFICATION	1.6094384944641832E-6	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999361513000871	WITHOUT_CLASSIFICATION	6.384869991285745E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999991877465543	WITHOUT_CLASSIFICATION	8.122534457064995E-7	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999597236099326	WITHOUT_CLASSIFICATION	4.0276390067421416E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.99999957170091	WITHOUT_CLASSIFICATION	4.2829908989053595E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999997153723955	WITHOUT_CLASSIFICATION	2.8462760448597294E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999999786136673	WITHOUT_CLASSIFICATION	2.138633270059869E-8	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999971256500017	WITHOUT_CLASSIFICATION	2.8743499983704084E-6	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999999236335028	WITHOUT_CLASSIFICATION	7.636649729945534E-8	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999999924271873	WITHOUT_CLASSIFICATION	7.572812634946089E-9	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999338482452382	WITHOUT_CLASSIFICATION	6.615175476186746E-5	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999338482452382	WITHOUT_CLASSIFICATION	6.615175476186746E-5	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999999516078788	WITHOUT_CLASSIFICATION	4.839212119916762E-8	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.999999998529806	WITHOUT_CLASSIFICATION	1.4701939713814013E-9	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999991842204307	WITHOUT_CLASSIFICATION	8.157795693875218E-7	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999967184932279	WITHOUT_CLASSIFICATION	3.2815067721638867E-6	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.999999944348059	WITHOUT_CLASSIFICATION	5.565194099743149E-8	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999999155226378	WITHOUT_CLASSIFICATION	8.447736224597902E-8	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999998009766989	WITHOUT_CLASSIFICATION	1.9902330109608123E-7	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999993147660061	WITHOUT_CLASSIFICATION	6.85233993778777E-7	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999967565157108	WITHOUT_CLASSIFICATION	3.243484289086672E-6	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.999999893818316	WITHOUT_CLASSIFICATION	1.0618168405436489E-7	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999991834167682	WITHOUT_CLASSIFICATION	8.1658323181996E-7	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999999346666291	WITHOUT_CLASSIFICATION	6.533337099920664E-8	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999844186864827	WITHOUT_CLASSIFICATION	1.5581313517373167E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999975689877295	WITHOUT_CLASSIFICATION	2.431012270443326E-6	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999996941408864	WITHOUT_CLASSIFICATION	3.058591136162693E-7	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999999749675085	WITHOUT_CLASSIFICATION	2.5032491606523993E-8	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999999548281056	WITHOUT_CLASSIFICATION	4.517189443602026E-8	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999999475162028	WITHOUT_CLASSIFICATION	5.2483797081478614E-8	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999995625202164	WITHOUT_CLASSIFICATION	4.374797836643309E-7	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9998209778075602	WITHOUT_CLASSIFICATION	1.7902219243988416E-4	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9945735453339133	WITHOUT_CLASSIFICATION	0.0054264546660868175	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.999989527670024	WITHOUT_CLASSIFICATION	1.0472329975926832E-5	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999990162597203	WITHOUT_CLASSIFICATION	9.837402797173468E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9975978513136877	WITHOUT_CLASSIFICATION	0.002402148686312295	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999996353683249	WITHOUT_CLASSIFICATION	3.646316751061929E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999980127977348	WITHOUT_CLASSIFICATION	1.9872022651687686E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999931832148511	WITHOUT_CLASSIFICATION	6.8167851488750515E-6	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999996478523059	WITHOUT_CLASSIFICATION	3.521476941882713E-7	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999955979084338	WITHOUT_CLASSIFICATION	4.40209156615934E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999996353683249	WITHOUT_CLASSIFICATION	3.646316751061929E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999980127977348	WITHOUT_CLASSIFICATION	1.9872022651687686E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999975689877295	WITHOUT_CLASSIFICATION	2.431012270443326E-6	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.999999595387337	WITHOUT_CLASSIFICATION	4.04612663024212E-7	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999958537277601	WITHOUT_CLASSIFICATION	4.146272239932756E-6	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999186239884843	WITHOUT_CLASSIFICATION	8.137601151575192E-5	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999960209542325	WITHOUT_CLASSIFICATION	3.97904576752074E-6	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999993756432445	WITHOUT_CLASSIFICATION	6.243567554707667E-7	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999828502711784	WITHOUT_CLASSIFICATION	1.7149728821605655E-5	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9999998751194396	WITHOUT_CLASSIFICATION	1.248805603995728E-7	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.99999847548068	WITHOUT_CLASSIFICATION	1.5245193199743802E-6	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9999932463026664	WITHOUT_CLASSIFICATION	6.7536973335196486E-6	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999978125774028	WITHOUT_CLASSIFICATION	2.1874225972453733E-6	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9979063284177192	WITHOUT_CLASSIFICATION	0.0020936715822807137	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999947108782848	WITHOUT_CLASSIFICATION	5.289121715133592E-6	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999995929562365	WITHOUT_CLASSIFICATION	4.0704376343309654E-7	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999997215659713	WITHOUT_CLASSIFICATION	2.7843402863121624E-7	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999998245457523	WITHOUT_CLASSIFICATION	1.7545424773483075E-7	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9998837479281842	WITHOUT_CLASSIFICATION	1.1625207181577774E-4	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9999982429245737	WITHOUT_CLASSIFICATION	1.7570754262525586E-6	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999981070835814	WITHOUT_CLASSIFICATION	1.8929164185863143E-6	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999940511743722	WITHOUT_CLASSIFICATION	5.948825627756442E-6	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999921997629028	WITHOUT_CLASSIFICATION	7.800237097240358E-6	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999225775481	WITHOUT_CLASSIFICATION	7.742245188900835E-8	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9994361627876409	WITHOUT_CLASSIFICATION	5.638372123590545E-4	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999777614946713	WITHOUT_CLASSIFICATION	2.2238505328691956E-5	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999996408515828	WITHOUT_CLASSIFICATION	3.5914841727516645E-7	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999997947266508	WITHOUT_CLASSIFICATION	2.0527334911014254E-7	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999985962461255	WITHOUT_CLASSIFICATION	1.4037538745042622E-6	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.999998699260763	WITHOUT_CLASSIFICATION	1.300739237083252E-6	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999959297644435	WITHOUT_CLASSIFICATION	4.070235556514977E-6	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999943598795843	WITHOUT_CLASSIFICATION	5.640120415755077E-6	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9999979591310687	WITHOUT_CLASSIFICATION	2.0408689312515547E-6	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.999999864552021	WITHOUT_CLASSIFICATION	1.3544797909054863E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997471139725	WITHOUT_CLASSIFICATION	2.528860274590946E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997471139725	WITHOUT_CLASSIFICATION	2.528860274590946E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999844186864827	WITHOUT_CLASSIFICATION	1.5581313517373167E-5	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999999890466792	WITHOUT_CLASSIFICATION	1.0953320680960721E-8	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999256505793866	WITHOUT_CLASSIFICATION	7.434942061328892E-5	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999759369952345	WITHOUT_CLASSIFICATION	2.4063004765535294E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999942989312537	WITHOUT_CLASSIFICATION	5.701068746228421E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999942989312537	WITHOUT_CLASSIFICATION	5.701068746228421E-6	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999950845698512	WITHOUT_CLASSIFICATION	4.91543014887532E-6	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999997031316525	WITHOUT_CLASSIFICATION	2.9686834743540175E-7	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999995129882963	WITHOUT_CLASSIFICATION	4.870117038648219E-7	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999984813687793	WITHOUT_CLASSIFICATION	1.5186312206638167E-6	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.99998223595934	WITHOUT_CLASSIFICATION	1.7764040659972898E-5	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999995732300022	WITHOUT_CLASSIFICATION	4.2676999784926095E-7	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999539485576466	WITHOUT_CLASSIFICATION	4.6051442353383575E-5	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999999886310587	WITHOUT_CLASSIFICATION	1.1368941353076206E-8	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999984628137883	WITHOUT_CLASSIFICATION	1.5371862116276863E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.999999433809174	WITHOUT_CLASSIFICATION	5.661908260715862E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999796116825047	WITHOUT_CLASSIFICATION	2.038831749526637E-5	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999992750299843	WITHOUT_CLASSIFICATION	7.249700155993716E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999941383385591	WITHOUT_CLASSIFICATION	5.861661440909291E-6	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9998414899885057	WITHOUT_CLASSIFICATION	1.5851001149425187E-4	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999983495691093	WITHOUT_CLASSIFICATION	1.650430890803666E-6	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999993475929455	WITHOUT_CLASSIFICATION	6.524070544963372E-7	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999998415355156	WITHOUT_CLASSIFICATION	1.584644843548368E-7	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999998415355156	WITHOUT_CLASSIFICATION	1.584644843548368E-7	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999975011158878	WITHOUT_CLASSIFICATION	2.4988841122145885E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999975011158878	WITHOUT_CLASSIFICATION	2.4988841122145885E-6	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999999783395773	WITHOUT_CLASSIFICATION	2.166042274517507E-8	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999979826043193	WITHOUT_CLASSIFICATION	2.0173956807298992E-6	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999996476512136	WITHOUT_CLASSIFICATION	3.523487864124405E-7	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999999524836424	WITHOUT_CLASSIFICATION	4.751635760530862E-8	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999999378150327	WITHOUT_CLASSIFICATION	6.218496722759181E-8	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999838197964778	WITHOUT_CLASSIFICATION	1.6180203522276757E-5	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999998632479006	WITHOUT_CLASSIFICATION	1.3675209950462961E-7	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999992750299843	WITHOUT_CLASSIFICATION	7.249700155993716E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999941383385591	WITHOUT_CLASSIFICATION	5.861661440909291E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999983495691093	WITHOUT_CLASSIFICATION	1.650430890803666E-6	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999998557490114	WITHOUT_CLASSIFICATION	1.4425098861745403E-7	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999985259194241	WITHOUT_CLASSIFICATION	1.4740805759807949E-6	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9998221284584523	WITHOUT_CLASSIFICATION	1.778715415476711E-4	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9999933348927126	WITHOUT_CLASSIFICATION	6.665107287461041E-6	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999996634584275	WITHOUT_CLASSIFICATION	3.3654157258782414E-7	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9999989818439237	WITHOUT_CLASSIFICATION	1.0181560763460409E-6	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999998807899022	WITHOUT_CLASSIFICATION	1.1921009778592249E-7	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999997249322756	WITHOUT_CLASSIFICATION	2.75067724424412E-7	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999989150168629	WITHOUT_CLASSIFICATION	1.0849831371673874E-6	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999999688571038	WITHOUT_CLASSIFICATION	3.114289609175137E-8	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.999999392748858	WITHOUT_CLASSIFICATION	6.072511419615885E-7	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9999052877445642	WITHOUT_CLASSIFICATION	9.471225543576767E-5	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999940438830824	WITHOUT_CLASSIFICATION	5.956116917521373E-6	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9997907165987824	WITHOUT_CLASSIFICATION	2.0928340121760072E-4	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9998144101096526	WITHOUT_CLASSIFICATION	1.855898903473558E-4	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.999997534561888	WITHOUT_CLASSIFICATION	2.4654381120541177E-6	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9999410055585138	WITHOUT_CLASSIFICATION	5.899444148616348E-5	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999950107190516	WITHOUT_CLASSIFICATION	4.989280948322051E-6	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999983015031251	WITHOUT_CLASSIFICATION	1.6984968749090137E-6	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999995861357415	WITHOUT_CLASSIFICATION	4.138642584791015E-7	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999994543614316	WITHOUT_CLASSIFICATION	5.456385684072285E-7	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.999997610565584	WITHOUT_CLASSIFICATION	2.389434416028983E-6	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9997649775105195	WITHOUT_CLASSIFICATION	2.3502248948053977E-4	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999999742019633	WITHOUT_CLASSIFICATION	2.5798036749021182E-8	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999996503050044	WITHOUT_CLASSIFICATION	3.496949955286123E-7	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999915971907628	WITHOUT_CLASSIFICATION	8.402809237119174E-6	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999930998242854	WITHOUT_CLASSIFICATION	6.900175714528758E-6	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999993205881131	WITHOUT_CLASSIFICATION	6.79411886918246E-7	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999966162348354	WITHOUT_CLASSIFICATION	3.383765164539735E-6	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9999556836804893	WITHOUT_CLASSIFICATION	4.431631951076663E-5	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999534082307743	WITHOUT_CLASSIFICATION	4.659176922569264E-5	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9998289379438459	WITHOUT_CLASSIFICATION	1.7106205615421085E-4	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999995703698111	WITHOUT_CLASSIFICATION	4.2963018890207226E-7	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.999999335085471	WITHOUT_CLASSIFICATION	6.649145289830763E-7	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9999781111156744	WITHOUT_CLASSIFICATION	2.1888884325674982E-5	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.999999655777822	WITHOUT_CLASSIFICATION	3.442221779164942E-7	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999992669816801	WITHOUT_CLASSIFICATION	7.330183200615712E-7	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9990895020627555	WITHOUT_CLASSIFICATION	9.104979372446372E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999439230114556	WITHOUT_CLASSIFICATION	5.607698854436344E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999945699238755	WITHOUT_CLASSIFICATION	5.4300761245481355E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999987407831391	WITHOUT_CLASSIFICATION	1.2592168609182457E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999256505793866	WITHOUT_CLASSIFICATION	7.434942061328892E-5	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999992669816801	WITHOUT_CLASSIFICATION	7.330183200615712E-7	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.99999970275348	WITHOUT_CLASSIFICATION	2.972465199263523E-7	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999982584181853	WITHOUT_CLASSIFICATION	1.7415818146677623E-6	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9999988478764765	WITHOUT_CLASSIFICATION	1.1521235234307758E-6	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9999860771841524	WITHOUT_CLASSIFICATION	1.3922815847542926E-5	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9999860771841524	WITHOUT_CLASSIFICATION	1.3922815847542926E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999999513375981	WITHOUT_CLASSIFICATION	4.8662402007909076E-8	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999839626171141	WITHOUT_CLASSIFICATION	1.6037382885889883E-5	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999717070868283	WITHOUT_CLASSIFICATION	2.8292913171799983E-5	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999955292909427	WITHOUT_CLASSIFICATION	4.470709057367181E-6	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999983873086661	WITHOUT_CLASSIFICATION	1.6126913338947478E-6	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.999999952922289	WITHOUT_CLASSIFICATION	4.707771101128018E-8	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999986272861203	WITHOUT_CLASSIFICATION	1.3727138796220602E-6	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999940785160062	WITHOUT_CLASSIFICATION	5.921483993828675E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999965804482593	WITHOUT_CLASSIFICATION	3.419551740632291E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999965804482593	WITHOUT_CLASSIFICATION	3.419551740632291E-6	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999975053226107	WITHOUT_CLASSIFICATION	2.494677389388349E-6	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999876418022547	WITHOUT_CLASSIFICATION	1.2358197745245438E-5	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999999985459932	WITHOUT_CLASSIFICATION	1.4540068003135708E-9	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999999094941198	WITHOUT_CLASSIFICATION	9.050588028720674E-8	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999998325891934	WITHOUT_CLASSIFICATION	1.6741080668521776E-7	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999949511735446	WITHOUT_CLASSIFICATION	5.048826455337843E-6	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999999502347006	WITHOUT_CLASSIFICATION	4.976529944355562E-8	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999622424876605	WITHOUT_CLASSIFICATION	3.775751233954637E-5	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999994979338687	WITHOUT_CLASSIFICATION	5.020661313609266E-7	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9999996351634138	WITHOUT_CLASSIFICATION	3.6483658616109977E-7	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999959128687165	WITHOUT_CLASSIFICATION	4.087131283443624E-6	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.999999408800681	WITHOUT_CLASSIFICATION	5.911993190234603E-7	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999996879180925	WITHOUT_CLASSIFICATION	3.12081907593685E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999946430768879	WITHOUT_CLASSIFICATION	5.356923112105355E-6	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999946430768879	WITHOUT_CLASSIFICATION	5.356923112105355E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999998722718758	WITHOUT_CLASSIFICATION	1.2772812424746326E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999997153723955	WITHOUT_CLASSIFICATION	2.8462760448597294E-7	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999997475257091	WITHOUT_CLASSIFICATION	2.524742909079707E-7	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999927142401611	WITHOUT_CLASSIFICATION	7.285759838855222E-6	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9999988832770204	WITHOUT_CLASSIFICATION	1.1167229796421167E-6	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999898646323578	WITHOUT_CLASSIFICATION	1.0135367642069381E-5	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999994418534817	WITHOUT_CLASSIFICATION	5.581465182559823E-7	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999902261803069	WITHOUT_CLASSIFICATION	9.773819693059969E-6	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999963023224775	WITHOUT_CLASSIFICATION	3.697677522494096E-6	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999996562367837	WITHOUT_CLASSIFICATION	3.437632163532116E-7	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9997214451131095	WITHOUT_CLASSIFICATION	2.785548868905887E-4	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999992733810429	WITHOUT_CLASSIFICATION	7.266189572472745E-7	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999950983280126	WITHOUT_CLASSIFICATION	4.901671987425106E-6	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999959432476977	WITHOUT_CLASSIFICATION	4.056752302260525E-6	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999920224176394	WITHOUT_CLASSIFICATION	7.977582360513759E-6	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999966454829757	WITHOUT_CLASSIFICATION	3.3545170242251182E-6	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999999351393033	WITHOUT_CLASSIFICATION	6.486069669508544E-8	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999900209617811	WITHOUT_CLASSIFICATION	9.97903821879663E-6	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999999482341877	WITHOUT_CLASSIFICATION	5.17658122704828E-8	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9999997701593358	WITHOUT_CLASSIFICATION	2.2984066420493332E-7	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9998873390681152	WITHOUT_CLASSIFICATION	1.1266093188477014E-4	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.999999771710996	WITHOUT_CLASSIFICATION	2.282890040585636E-7	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999955249390041	WITHOUT_CLASSIFICATION	4.475060995854916E-6	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9999888559059624	WITHOUT_CLASSIFICATION	1.1144094037524734E-5	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.9637434177986449	WITHOUT_CLASSIFICATION	0.03625658220135509	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9999984139344995	WITHOUT_CLASSIFICATION	1.5860655004054249E-6	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999999695876657	WITHOUT_CLASSIFICATION	3.041233426220767E-8	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999998953927582	WITHOUT_CLASSIFICATION	1.0460724177155142E-7	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999999001209271	WITHOUT_CLASSIFICATION	9.987907294704256E-8	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9999939776225357	WITHOUT_CLASSIFICATION	6.022377464280803E-6	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999999544677391	WITHOUT_CLASSIFICATION	4.5532260808315274E-8	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999994944898241	WITHOUT_CLASSIFICATION	5.055101759846252E-7	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999997903407645	WITHOUT_CLASSIFICATION	2.0965923563942455E-7	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999999470402516	WITHOUT_CLASSIFICATION	5.295974825728516E-8	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999966773910458	WITHOUT_CLASSIFICATION	3.3226089541514265E-6	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.999999957135377	WITHOUT_CLASSIFICATION	4.2864622873482007E-8	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999992646216277	WITHOUT_CLASSIFICATION	7.35378372325363E-7	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999883557020575	WITHOUT_CLASSIFICATION	1.1644297942561892E-5	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999993486608654	WITHOUT_CLASSIFICATION	6.513391347207205E-7	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999957441517926	WITHOUT_CLASSIFICATION	4.2558482073995565E-6	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999997224327929	WITHOUT_CLASSIFICATION	2.7756720712908745E-7	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9999110033737902	WITHOUT_CLASSIFICATION	8.899662620975084E-5	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999998807956132	WITHOUT_CLASSIFICATION	1.192043868020046E-7	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999987023362454	WITHOUT_CLASSIFICATION	1.2976637545685602E-6	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999816321114123	WITHOUT_CLASSIFICATION	1.8367888587637755E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999946087104749	WITHOUT_CLASSIFICATION	5.391289525124376E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999996461936882	WITHOUT_CLASSIFICATION	3.538063117560213E-7	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999994573612944	WITHOUT_CLASSIFICATION	5.426387055745264E-7	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999996283748711	WITHOUT_CLASSIFICATION	3.716251288434033E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999996353683249	WITHOUT_CLASSIFICATION	3.646316751061929E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999996353683249	WITHOUT_CLASSIFICATION	3.646316751061929E-7	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999999713743392	WITHOUT_CLASSIFICATION	2.8625660828026744E-8	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9997520729738851	WITHOUT_CLASSIFICATION	2.479270261148786E-4	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999991710137244	WITHOUT_CLASSIFICATION	8.289862756538497E-7	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9891621419738326	WITHOUT_CLASSIFICATION	0.010837858026167465	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.999999832243859	WITHOUT_CLASSIFICATION	1.6775614104830125E-7	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999995801631518	WITHOUT_CLASSIFICATION	4.198368481602025E-7	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.999997404877069	WITHOUT_CLASSIFICATION	2.595122930929311E-6	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9999993017991972	WITHOUT_CLASSIFICATION	6.982008028627507E-7	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.999992411996341	WITHOUT_CLASSIFICATION	7.588003658903223E-6	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999983247735659	WITHOUT_CLASSIFICATION	1.675226434158546E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999994548685683	WITHOUT_CLASSIFICATION	5.451314316502484E-7	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999994548685683	WITHOUT_CLASSIFICATION	5.451314316502484E-7	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999994548685683	WITHOUT_CLASSIFICATION	5.451314316502484E-7	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999910028694096	WITHOUT_CLASSIFICATION	8.997130590469452E-6	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999992450457258	WITHOUT_CLASSIFICATION	7.549542742573975E-7	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.999997157085534	WITHOUT_CLASSIFICATION	2.8429144659533455E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999985894231053	WITHOUT_CLASSIFICATION	1.4105768946895104E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999985894231053	WITHOUT_CLASSIFICATION	1.4105768946895104E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999998780741631	WITHOUT_CLASSIFICATION	1.219258368570523E-7	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.999969731738041	WITHOUT_CLASSIFICATION	3.026826195889482E-5	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999970292024063	WITHOUT_CLASSIFICATION	2.9707975937061947E-6	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999962654400782	WITHOUT_CLASSIFICATION	3.7345599218986532E-6	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999968217545228	WITHOUT_CLASSIFICATION	3.1782454771958662E-6	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9997783261346486	WITHOUT_CLASSIFICATION	2.2167386535138962E-4	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999998235280674	WITHOUT_CLASSIFICATION	1.7647193269290772E-7	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999261734082966	WITHOUT_CLASSIFICATION	7.382659170339037E-5	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999987803943308	WITHOUT_CLASSIFICATION	1.2196056692192368E-6	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9998499974357598	WITHOUT_CLASSIFICATION	1.5000256424027545E-4	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9998499974357598	WITHOUT_CLASSIFICATION	1.5000256424027545E-4	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999844369734844	WITHOUT_CLASSIFICATION	1.556302651565213E-5	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.999929585832935	WITHOUT_CLASSIFICATION	7.041416706493942E-5	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999990587956049	WITHOUT_CLASSIFICATION	9.412043951262402E-7	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999737088920703	WITHOUT_CLASSIFICATION	2.6291107929640353E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9998917569140308	WITHOUT_CLASSIFICATION	1.082430859692419E-4	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999989916494496	WITHOUT_CLASSIFICATION	1.0083505503905545E-6	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999933325453827	WITHOUT_CLASSIFICATION	6.6674546172034845E-6	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999866743620348	WITHOUT_CLASSIFICATION	1.3325637965254507E-5	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999932772727004	WITHOUT_CLASSIFICATION	6.722727299595136E-6	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999913405827124	WITHOUT_CLASSIFICATION	8.659417287511433E-6	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999908625095261	WITHOUT_CLASSIFICATION	9.137490474032686E-6	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999906627123265	WITHOUT_CLASSIFICATION	9.337287673408072E-6	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999906958940094	WITHOUT_CLASSIFICATION	9.304105990553066E-6	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999938019891844	WITHOUT_CLASSIFICATION	6.198010815501077E-6	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9999959301140781	WITHOUT_CLASSIFICATION	4.069885921926363E-6	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999980649856864	WITHOUT_CLASSIFICATION	1.935014313617819E-6	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999989243537017	WITHOUT_CLASSIFICATION	1.075646298146173E-6	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9999998850683262	WITHOUT_CLASSIFICATION	1.149316738802524E-7	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999819219687937	WITHOUT_CLASSIFICATION	1.8078031206302E-5	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9990454237215489	WITHOUT_CLASSIFICATION	9.545762784510454E-4	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9922166934118472	WITHOUT_CLASSIFICATION	0.007783306588152891	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999997652012423	WITHOUT_CLASSIFICATION	2.3479875761553143E-7	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999292530352628	WITHOUT_CLASSIFICATION	7.074696473724077E-5	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999187905710106	WITHOUT_CLASSIFICATION	8.120942898942013E-5	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999945403956807	WITHOUT_CLASSIFICATION	5.4596043193726355E-6	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999685113868025	WITHOUT_CLASSIFICATION	3.14886131975005E-5	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999989072479124	WITHOUT_CLASSIFICATION	1.0927520876620275E-6	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9999990558427977	WITHOUT_CLASSIFICATION	9.441572024277691E-7	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9990633627183705	WITHOUT_CLASSIFICATION	9.366372816295468E-4	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999849042416388	WITHOUT_CLASSIFICATION	1.5095758361123893E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999680018577184	WITHOUT_CLASSIFICATION	3.199814228165982E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999938687812706	WITHOUT_CLASSIFICATION	6.13121872935824E-6	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999991093290709	WITHOUT_CLASSIFICATION	8.906709292039116E-7	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999680018577184	WITHOUT_CLASSIFICATION	3.199814228165982E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.999991105396001	WITHOUT_CLASSIFICATION	8.894603999027458E-6	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999989794317953	WITHOUT_CLASSIFICATION	1.0205682047314897E-6	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999828354644548	WITHOUT_CLASSIFICATION	1.7164535545180536E-5	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999985972862667	WITHOUT_CLASSIFICATION	1.4027137332576916E-6	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999951246087674	WITHOUT_CLASSIFICATION	4.8753912326158195E-6	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9999811285180576	WITHOUT_CLASSIFICATION	1.8871481942335574E-5	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.999999076124618	WITHOUT_CLASSIFICATION	9.238753819756762E-7	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999912954118829	WITHOUT_CLASSIFICATION	8.704588117118732E-6	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9998971967845738	WITHOUT_CLASSIFICATION	1.0280321542621285E-4	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999757835036863	WITHOUT_CLASSIFICATION	2.421649631376985E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999536337835581	WITHOUT_CLASSIFICATION	4.6366216442007115E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9999694801088475	WITHOUT_CLASSIFICATION	3.0519891152512234E-5	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9999512965764653	WITHOUT_CLASSIFICATION	4.870342353477829E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9998527269797656	WITHOUT_CLASSIFICATION	1.4727302023441577E-4	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999877757682485	WITHOUT_CLASSIFICATION	1.222423175160107E-5	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999971339291911	WITHOUT_CLASSIFICATION	2.8660708088977507E-6	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999800108324366	WITHOUT_CLASSIFICATION	1.9989167563453562E-5	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.999984768249073	WITHOUT_CLASSIFICATION	1.5231750926902684E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999996898743937	WITHOUT_CLASSIFICATION	3.1012560636674974E-7	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.999973762049859	WITHOUT_CLASSIFICATION	2.6237950141007515E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999968522649332	WITHOUT_CLASSIFICATION	3.147735066854128E-6	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999755490283851	WITHOUT_CLASSIFICATION	2.4450971614808982E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999930232304137	WITHOUT_CLASSIFICATION	6.97676958620707E-6	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999884002600877	WITHOUT_CLASSIFICATION	1.1599739912223649E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.999995309984403	WITHOUT_CLASSIFICATION	4.690015596949748E-6	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.999986641640675	WITHOUT_CLASSIFICATION	1.335835932500226E-5	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9952028428094409	WITHOUT_CLASSIFICATION	0.00479715719055908	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.999998652711984	WITHOUT_CLASSIFICATION	1.347288016016339E-6	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999996002315111	WITHOUT_CLASSIFICATION	3.9976848889156476E-7	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999990351245015	WITHOUT_CLASSIFICATION	9.648754984794716E-7	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9999989912781521	WITHOUT_CLASSIFICATION	1.0087218480094862E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9988265763343617	WITHOUT_CLASSIFICATION	0.001173423665638341	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9966375193172994	WITHOUT_CLASSIFICATION	0.0033624806827006262	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9996653097400452	WITHOUT_CLASSIFICATION	3.3469025995478763E-4	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999971341816393	WITHOUT_CLASSIFICATION	2.8658183606588564E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999973957877588	WITHOUT_CLASSIFICATION	2.604212241248978E-6	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999988045847911	WITHOUT_CLASSIFICATION	1.1954152089443667E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9999331025959021	WITHOUT_CLASSIFICATION	6.689740409790532E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999976020453545	WITHOUT_CLASSIFICATION	2.3979546455768704E-6	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999993839090894	WITHOUT_CLASSIFICATION	6.160909106926403E-7	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.999997082338271	WITHOUT_CLASSIFICATION	2.917661728983355E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999975410244116	WITHOUT_CLASSIFICATION	2.458975588373912E-6	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999959998147335	WITHOUT_CLASSIFICATION	4.000185266443615E-6	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999966167719371	WITHOUT_CLASSIFICATION	3.3832280630121256E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999993187690477	WITHOUT_CLASSIFICATION	6.812309523668765E-7	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999983412838918	WITHOUT_CLASSIFICATION	1.6587161082093587E-6	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999962869528323	WITHOUT_CLASSIFICATION	3.7130471678279526E-6	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.999988032008864	WITHOUT_CLASSIFICATION	1.1967991136008858E-5	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999382961173415	WITHOUT_CLASSIFICATION	6.170388265852246E-5	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999998326016803	WITHOUT_CLASSIFICATION	1.6739831962363938E-7	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.999999398873689	WITHOUT_CLASSIFICATION	6.011263109025983E-7	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999940235383651	WITHOUT_CLASSIFICATION	5.976461634907179E-6	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999844046859344	WITHOUT_CLASSIFICATION	1.5595314065519087E-5	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999382961173415	WITHOUT_CLASSIFICATION	6.170388265852246E-5	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9966686504139262	WITHOUT_CLASSIFICATION	0.003331349586073966	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9966686504139262	WITHOUT_CLASSIFICATION	0.003331349586073966	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999981602461718	WITHOUT_CLASSIFICATION	1.839753828225562E-6	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999974085951938	WITHOUT_CLASSIFICATION	2.5914048062511357E-6	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999962020309416	WITHOUT_CLASSIFICATION	3.7979690584181803E-6	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999993517120735	WITHOUT_CLASSIFICATION	6.482879265017305E-7	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999976073961208	WITHOUT_CLASSIFICATION	2.392603879161566E-6	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999886711054454	WITHOUT_CLASSIFICATION	1.1328894554603517E-5	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999990720574344	WITHOUT_CLASSIFICATION	9.279425654688984E-7	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.9282687769421458	WITHOUT_CLASSIFICATION	0.07173122305785419	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999952837957496	WITHOUT_CLASSIFICATION	4.7162042504178505E-6	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9999984182569801	WITHOUT_CLASSIFICATION	1.5817430198699855E-6	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999960670753006	WITHOUT_CLASSIFICATION	3.93292469934295E-6	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999702733008848	WITHOUT_CLASSIFICATION	2.97266991151561E-5	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999608983852675	WITHOUT_CLASSIFICATION	3.9101614732545064E-5	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999993849098426	WITHOUT_CLASSIFICATION	6.150901573963545E-7	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9634440976429464	WITHOUT_CLASSIFICATION	0.036555902357053666	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9837923033503387	WITHOUT_CLASSIFICATION	0.016207696649661242	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999277909737619	WITHOUT_CLASSIFICATION	7.220902623806165E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999588575444798	WITHOUT_CLASSIFICATION	4.114245552014844E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999588575444798	WITHOUT_CLASSIFICATION	4.114245552014844E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999588575444798	WITHOUT_CLASSIFICATION	4.114245552014844E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999588575444798	WITHOUT_CLASSIFICATION	4.114245552014844E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999588575444798	WITHOUT_CLASSIFICATION	4.114245552014844E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999960242072239	WITHOUT_CLASSIFICATION	3.975792776171907E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999794288959551	WITHOUT_CLASSIFICATION	2.0571104044842823E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9996956698351765	WITHOUT_CLASSIFICATION	3.043301648235548E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.999995439231963	WITHOUT_CLASSIFICATION	4.5607680369975195E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9999056171949594	WITHOUT_CLASSIFICATION	9.438280504061364E-5	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999999080744597	WITHOUT_CLASSIFICATION	9.192554029395354E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999865938821377	WITHOUT_CLASSIFICATION	1.3406117862235342E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.999999649481616	WITHOUT_CLASSIFICATION	3.505183840321487E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999989157799791	WITHOUT_CLASSIFICATION	1.084220020855616E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999968312351207	WITHOUT_CLASSIFICATION	3.168764879137055E-6	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999965666720183	WITHOUT_CLASSIFICATION	3.4333279817218033E-6	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999972417794594	WITHOUT_CLASSIFICATION	2.7582205406859384E-6	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999978025463472	WITHOUT_CLASSIFICATION	2.1974536527818107E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999976068233003	WITHOUT_CLASSIFICATION	2.3931766997394425E-6	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999969806834232	WITHOUT_CLASSIFICATION	3.0193165767752927E-6	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999957978207248	WITHOUT_CLASSIFICATION	4.202179275226849E-6	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999966520432246	WITHOUT_CLASSIFICATION	3.3479567754035214E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999974328104174	WITHOUT_CLASSIFICATION	2.5671895826102295E-6	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.999997461658315	WITHOUT_CLASSIFICATION	2.538341684915187E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999971328359692	WITHOUT_CLASSIFICATION	2.867164030641443E-6	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999956594284892	WITHOUT_CLASSIFICATION	4.340571510836903E-6	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999969502464684	WITHOUT_CLASSIFICATION	3.0497535315502382E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999940953571241	WITHOUT_CLASSIFICATION	5.9046428757783496E-6	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999959371307418	WITHOUT_CLASSIFICATION	4.062869258201847E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999946243242765	WITHOUT_CLASSIFICATION	5.375675723479635E-6	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999975049110474	WITHOUT_CLASSIFICATION	2.495088952465572E-6	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999976938260114	WITHOUT_CLASSIFICATION	2.306173988516403E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999974782610292	WITHOUT_CLASSIFICATION	2.521738970776664E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.999996496299488	WITHOUT_CLASSIFICATION	3.5037005121529116E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999963351744081	WITHOUT_CLASSIFICATION	3.6648255919275166E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.99999552281008	WITHOUT_CLASSIFICATION	4.477189920004749E-6	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999974900536379	WITHOUT_CLASSIFICATION	2.5099463621189774E-6	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999973887194055	WITHOUT_CLASSIFICATION	2.611280594568552E-6	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999971126046399	WITHOUT_CLASSIFICATION	2.8873953601862483E-6	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999950270107861	WITHOUT_CLASSIFICATION	4.972989213904281E-6	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999968059286324	WITHOUT_CLASSIFICATION	3.19407136763421E-6	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999974064302984	WITHOUT_CLASSIFICATION	2.5935697015119464E-6	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.999997005370076	WITHOUT_CLASSIFICATION	2.9946299238928823E-6	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999976806206327	WITHOUT_CLASSIFICATION	2.3193793673040344E-6	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999970859103942	WITHOUT_CLASSIFICATION	2.914089605839976E-6	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999971921928392	WITHOUT_CLASSIFICATION	2.8078071607524644E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999965723312476	WITHOUT_CLASSIFICATION	3.4276687524410585E-6	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999955544315187	WITHOUT_CLASSIFICATION	4.445568481332631E-6	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999965131455242	WITHOUT_CLASSIFICATION	3.486854475784266E-6	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.999995907304779	WITHOUT_CLASSIFICATION	4.092695220968861E-6	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999959883075176	WITHOUT_CLASSIFICATION	4.011692482401859E-6	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999955667539965	WITHOUT_CLASSIFICATION	4.433246003451441E-6	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999976404258806	WITHOUT_CLASSIFICATION	2.3595741193755474E-6	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999965196493552	WITHOUT_CLASSIFICATION	3.4803506447745293E-6	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999944205596313	WITHOUT_CLASSIFICATION	5.579440368637676E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9996956698351765	WITHOUT_CLASSIFICATION	3.043301648235548E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999962072642061	WITHOUT_CLASSIFICATION	3.792735793743749E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999969688300836	WITHOUT_CLASSIFICATION	3.0311699163932524E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999966003036649	WITHOUT_CLASSIFICATION	3.3996963351364208E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999962408227495	WITHOUT_CLASSIFICATION	3.7591772504966847E-6	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999961926365147	WITHOUT_CLASSIFICATION	3.8073634852977856E-6	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.999996274440296	WITHOUT_CLASSIFICATION	3.7255597038243507E-6	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999959610064034	WITHOUT_CLASSIFICATION	4.0389935965649005E-6	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999959868206038	WITHOUT_CLASSIFICATION	4.01317939617811E-6	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999956062788684	WITHOUT_CLASSIFICATION	4.393721131613263E-6	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999960853444277	WITHOUT_CLASSIFICATION	3.9146555722936606E-6	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999953232082346	WITHOUT_CLASSIFICATION	4.676791765485675E-6	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999953703043101	WITHOUT_CLASSIFICATION	4.629695689950772E-6	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999958654356051	WITHOUT_CLASSIFICATION	4.134564394888988E-6	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999970329226243	WITHOUT_CLASSIFICATION	2.9670773756136065E-6	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999968799405196	WITHOUT_CLASSIFICATION	3.1200594805868104E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999974991126555	WITHOUT_CLASSIFICATION	2.5008873445609093E-6	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999967281107872	WITHOUT_CLASSIFICATION	3.2718892127753738E-6	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999968242556827	WITHOUT_CLASSIFICATION	3.17574431729338E-6	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999969441438108	WITHOUT_CLASSIFICATION	3.0558561893323127E-6	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999958339383266	WITHOUT_CLASSIFICATION	4.166061673364383E-6	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.999996924194314	WITHOUT_CLASSIFICATION	3.075805686136275E-6	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999969992816872	WITHOUT_CLASSIFICATION	3.0007183127458234E-6	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999961093824559	WITHOUT_CLASSIFICATION	3.890617544144976E-6	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999970620944643	WITHOUT_CLASSIFICATION	2.937905535761731E-6	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999966914116398	WITHOUT_CLASSIFICATION	3.3085883600935684E-6	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999971482680134	WITHOUT_CLASSIFICATION	2.8517319866662625E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999938506726863	WITHOUT_CLASSIFICATION	6.149327313703508E-6	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999967037751816	WITHOUT_CLASSIFICATION	3.2962248184451085E-6	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.999997930573587	WITHOUT_CLASSIFICATION	2.069426413092511E-6	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999976006969858	WITHOUT_CLASSIFICATION	2.3993030142672967E-6	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.999995880973011	WITHOUT_CLASSIFICATION	4.119026988992851E-6	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999949679285424	WITHOUT_CLASSIFICATION	5.03207145770924E-6	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999954552343424	WITHOUT_CLASSIFICATION	4.544765657553604E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999956216743734	WITHOUT_CLASSIFICATION	4.378325626580429E-6	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999966117574141	WITHOUT_CLASSIFICATION	3.38824258604378E-6	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999965117039251	WITHOUT_CLASSIFICATION	3.4882960747840222E-6	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999969800655142	WITHOUT_CLASSIFICATION	3.0199344859345456E-6	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999969921447219	WITHOUT_CLASSIFICATION	3.0078552781390475E-6	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999967279687408	WITHOUT_CLASSIFICATION	3.272031259158267E-6	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.99999732692373	WITHOUT_CLASSIFICATION	2.6730762700416016E-6	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.99999705217788	WITHOUT_CLASSIFICATION	2.9478221199508375E-6	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999968719397354	WITHOUT_CLASSIFICATION	3.128060264547563E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999947825530526	WITHOUT_CLASSIFICATION	5.217446947353796E-6	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999964302823996	WITHOUT_CLASSIFICATION	3.5697176005497987E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999946929325082	WITHOUT_CLASSIFICATION	5.307067491876399E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999967227542808	WITHOUT_CLASSIFICATION	3.2772457191055497E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999974164502423	WITHOUT_CLASSIFICATION	2.5835497576442082E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999972134274608	WITHOUT_CLASSIFICATION	2.7865725392764306E-6	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999972015256221	WITHOUT_CLASSIFICATION	2.7984743778852105E-6	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999962600772005	WITHOUT_CLASSIFICATION	3.739922799530252E-6	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.999996074382745	WITHOUT_CLASSIFICATION	3.925617254998254E-6	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999964184123863	WITHOUT_CLASSIFICATION	3.581587613786055E-6	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999966164448121	WITHOUT_CLASSIFICATION	3.3835551880378172E-6	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999970740050391	WITHOUT_CLASSIFICATION	2.925994960872654E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999959397566605	WITHOUT_CLASSIFICATION	4.0602433395815045E-6	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999959425964007	WITHOUT_CLASSIFICATION	4.057403599331672E-6	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999973179651191	WITHOUT_CLASSIFICATION	2.6820348809086764E-6	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999969087532857	WITHOUT_CLASSIFICATION	3.091246714178917E-6	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999964769648272	WITHOUT_CLASSIFICATION	3.5230351728740106E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999965807920077	WITHOUT_CLASSIFICATION	3.419207992197467E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999948480181099	WITHOUT_CLASSIFICATION	5.151981890099085E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999969395926028	WITHOUT_CLASSIFICATION	3.0604073972410893E-6	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999939460452074	WITHOUT_CLASSIFICATION	6.05395479257869E-6	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999959792344882	WITHOUT_CLASSIFICATION	4.02076551181856E-6	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999966390958821	WITHOUT_CLASSIFICATION	3.3609041178636143E-6	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999964859652236	WITHOUT_CLASSIFICATION	3.514034776374324E-6	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999973353418222	WITHOUT_CLASSIFICATION	2.6646581777821446E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999964406820363	WITHOUT_CLASSIFICATION	3.559317963683272E-6	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999964524808176	WITHOUT_CLASSIFICATION	3.547519182496823E-6	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999969349236796	WITHOUT_CLASSIFICATION	3.065076320343419E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999966163807326	WITHOUT_CLASSIFICATION	3.3836192675344454E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999963466153626	WITHOUT_CLASSIFICATION	3.6533846372715724E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999967912523193	WITHOUT_CLASSIFICATION	3.208747680714721E-6	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999965969409912	WITHOUT_CLASSIFICATION	3.4030590088473574E-6	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999971287480834	WITHOUT_CLASSIFICATION	2.871251916596286E-6	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999969735580274	WITHOUT_CLASSIFICATION	3.026441972691944E-6	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999962081692724	WITHOUT_CLASSIFICATION	3.7918307277497745E-6	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999957905525351	WITHOUT_CLASSIFICATION	4.2094474649699545E-6	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999953676524548	WITHOUT_CLASSIFICATION	4.63234754529615E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999953901342516	WITHOUT_CLASSIFICATION	4.6098657483909146E-6	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999968791098305	WITHOUT_CLASSIFICATION	3.120890169559355E-6	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999973817957057	WITHOUT_CLASSIFICATION	2.61820429425414E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999973154822579	WITHOUT_CLASSIFICATION	2.684517741993122E-6	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999962916921395	WITHOUT_CLASSIFICATION	3.7083078604883575E-6	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999962936964071	WITHOUT_CLASSIFICATION	3.7063035928021786E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999971854810339	WITHOUT_CLASSIFICATION	2.8145189660358103E-6	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999972817121613	WITHOUT_CLASSIFICATION	2.7182878386687173E-6	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999968303661496	WITHOUT_CLASSIFICATION	3.169633850342687E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.999994580081781	WITHOUT_CLASSIFICATION	5.419918219046915E-6	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999962706608599	WITHOUT_CLASSIFICATION	3.7293391400631325E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999968132087188	WITHOUT_CLASSIFICATION	3.186791281324579E-6	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999969868750921	WITHOUT_CLASSIFICATION	3.013124907892236E-6	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999962853567734	WITHOUT_CLASSIFICATION	3.7146432266162574E-6	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999970565865707	WITHOUT_CLASSIFICATION	2.9434134293608644E-6	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999980850374723	WITHOUT_CLASSIFICATION	1.9149625277246524E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999981649696184	WITHOUT_CLASSIFICATION	1.8350303817061273E-6	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999967335757259	WITHOUT_CLASSIFICATION	3.266424274026733E-6	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999981383997094	WITHOUT_CLASSIFICATION	1.861600290598159E-6	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999968542969654	WITHOUT_CLASSIFICATION	3.1457030346334947E-6	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999961293065017	WITHOUT_CLASSIFICATION	3.870693498252693E-6	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999975794574472	WITHOUT_CLASSIFICATION	2.420542552804789E-6	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999974243469767	WITHOUT_CLASSIFICATION	2.5756530232714712E-6	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999973573950856	WITHOUT_CLASSIFICATION	2.642604914412693E-6	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999975522202238	WITHOUT_CLASSIFICATION	2.447779776227312E-6	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999966045904717	WITHOUT_CLASSIFICATION	3.3954095283840976E-6	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.999998489922553	WITHOUT_CLASSIFICATION	1.5100774470209295E-6	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999979637296944	WITHOUT_CLASSIFICATION	2.0362703056834925E-6	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999978014476376	WITHOUT_CLASSIFICATION	2.1985523624369587E-6	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999977500491369	WITHOUT_CLASSIFICATION	2.2499508630866724E-6	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999951997814163	WITHOUT_CLASSIFICATION	4.8002185837845325E-6	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999969377772947	WITHOUT_CLASSIFICATION	3.0622227052328457E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999976400178711	WITHOUT_CLASSIFICATION	2.359982128881439E-6	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999985266536975	WITHOUT_CLASSIFICATION	1.4733463025075809E-6	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999980554874607	WITHOUT_CLASSIFICATION	1.944512539270173E-6	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999983593631294	WITHOUT_CLASSIFICATION	1.6406368705685623E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999981135719015	WITHOUT_CLASSIFICATION	1.886428098498944E-6	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999980622777108	WITHOUT_CLASSIFICATION	1.937722289163253E-6	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999976183019839	WITHOUT_CLASSIFICATION	2.381698016164826E-6	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999978153770298	WITHOUT_CLASSIFICATION	2.184622970263642E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999983134692767	WITHOUT_CLASSIFICATION	1.6865307233218277E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999980561463291	WITHOUT_CLASSIFICATION	1.9438536708880937E-6	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999974676527389	WITHOUT_CLASSIFICATION	2.532347261036466E-6	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999978162912405	WITHOUT_CLASSIFICATION	2.18370875942947E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.999998153034454	WITHOUT_CLASSIFICATION	1.8469655459637027E-6	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999976867954214	WITHOUT_CLASSIFICATION	2.313204578632162E-6	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.999997888948845	WITHOUT_CLASSIFICATION	2.1110511550305113E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999967912647401	WITHOUT_CLASSIFICATION	3.2087352599578176E-6	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999980402024503	WITHOUT_CLASSIFICATION	1.9597975497413742E-6	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999966335904046	WITHOUT_CLASSIFICATION	3.366409595360725E-6	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999968987810057	WITHOUT_CLASSIFICATION	3.1012189942000625E-6	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999973698911778	WITHOUT_CLASSIFICATION	2.6301088221150517E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.999997300770606	WITHOUT_CLASSIFICATION	2.6992293939779365E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999977066801848	WITHOUT_CLASSIFICATION	2.2933198152148733E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999972838747742	WITHOUT_CLASSIFICATION	2.7161252257085016E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999971439908598	WITHOUT_CLASSIFICATION	2.8560091402169704E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999977043277128	WITHOUT_CLASSIFICATION	2.295672287159755E-6	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999971602422424	WITHOUT_CLASSIFICATION	2.8397577575952137E-6	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999968637275191	WITHOUT_CLASSIFICATION	3.1362724809141053E-6	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999964348394773	WITHOUT_CLASSIFICATION	3.565160522633366E-6	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999969454858725	WITHOUT_CLASSIFICATION	3.0545141275732044E-6	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999968807000463	WITHOUT_CLASSIFICATION	3.1192999536834307E-6	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999961128676363	WITHOUT_CLASSIFICATION	3.887132363710351E-6	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999963545326422	WITHOUT_CLASSIFICATION	3.6454673576794154E-6	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999961316386686	WITHOUT_CLASSIFICATION	3.868361331461315E-6	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999964263010089	WITHOUT_CLASSIFICATION	3.5736989910466474E-6	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999961068108568	WITHOUT_CLASSIFICATION	3.89318914319506E-6	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999969501926785	WITHOUT_CLASSIFICATION	3.049807321462779E-6	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999964454225274	WITHOUT_CLASSIFICATION	3.5545774726202177E-6	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999968780341474	WITHOUT_CLASSIFICATION	3.121965852615551E-6	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999963180694883	WITHOUT_CLASSIFICATION	3.681930511644494E-6	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999975581107156	WITHOUT_CLASSIFICATION	2.4418892843530738E-6	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999977241331971	WITHOUT_CLASSIFICATION	2.275866802864475E-6	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999970933001768	WITHOUT_CLASSIFICATION	2.9066998230958286E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999968972638997	WITHOUT_CLASSIFICATION	3.102736100304367E-6	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999957374716233	WITHOUT_CLASSIFICATION	4.262528376795162E-6	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999971998650948	WITHOUT_CLASSIFICATION	2.8001349051590753E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999969712068485	WITHOUT_CLASSIFICATION	3.028793151554153E-6	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999955358730004	WITHOUT_CLASSIFICATION	4.464126999629569E-6	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.999996262467837	WITHOUT_CLASSIFICATION	3.737532163124673E-6	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999977803224496	WITHOUT_CLASSIFICATION	2.219677550370007E-6	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.999997268109082	WITHOUT_CLASSIFICATION	2.7318909180633313E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999970797137926	WITHOUT_CLASSIFICATION	2.920286207419286E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999959698531883	WITHOUT_CLASSIFICATION	4.03014681164177E-6	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999970687139749	WITHOUT_CLASSIFICATION	2.9312860250947557E-6	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999973732839676	WITHOUT_CLASSIFICATION	2.6267160323127634E-6	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999977036712197	WITHOUT_CLASSIFICATION	2.296328780280734E-6	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999977983088212	WITHOUT_CLASSIFICATION	2.201691178810025E-6	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999975306292972	WITHOUT_CLASSIFICATION	2.469370702735294E-6	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999971860768647	WITHOUT_CLASSIFICATION	2.813923135212133E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999968718080942	WITHOUT_CLASSIFICATION	3.128191905826754E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999955371285716	WITHOUT_CLASSIFICATION	4.462871428402888E-6	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999966874123809	WITHOUT_CLASSIFICATION	3.3125876191938066E-6	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999978780193922	WITHOUT_CLASSIFICATION	2.121980607844691E-6	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999975400687425	WITHOUT_CLASSIFICATION	2.459931257480796E-6	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999973096735344	WITHOUT_CLASSIFICATION	2.6903264655506956E-6	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999964137818699	WITHOUT_CLASSIFICATION	3.586218130149201E-6	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999970967651586	WITHOUT_CLASSIFICATION	2.903234841517563E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999972631020828	WITHOUT_CLASSIFICATION	2.7368979171462474E-6	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.999994995514753	WITHOUT_CLASSIFICATION	5.004485246999247E-6	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999979920743921	WITHOUT_CLASSIFICATION	2.0079256078920236E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999973730479506	WITHOUT_CLASSIFICATION	2.6269520493377506E-6	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999971100823895	WITHOUT_CLASSIFICATION	2.889917610585107E-6	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.999997367545332	WITHOUT_CLASSIFICATION	2.6324546680075412E-6	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.999997322095441	WITHOUT_CLASSIFICATION	2.677904558909413E-6	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999973295613924	WITHOUT_CLASSIFICATION	2.6704386075971555E-6	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999970313174278	WITHOUT_CLASSIFICATION	2.9686825722513044E-6	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999969362206921	WITHOUT_CLASSIFICATION	3.0637793080299436E-6	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999960959667084	WITHOUT_CLASSIFICATION	3.904033291622693E-6	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.999997468652314	WITHOUT_CLASSIFICATION	2.5313476859495712E-6	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.99999748694255	WITHOUT_CLASSIFICATION	2.5130574501237703E-6	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999971508793158	WITHOUT_CLASSIFICATION	2.8491206841482918E-6	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999963901268023	WITHOUT_CLASSIFICATION	3.6098731976348834E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999970019399478	WITHOUT_CLASSIFICATION	2.998060052249604E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999962055022182	WITHOUT_CLASSIFICATION	3.7944977816355654E-6	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999977369426621	WITHOUT_CLASSIFICATION	2.2630573379240063E-6	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999971401135417	WITHOUT_CLASSIFICATION	2.8598864583021016E-6	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999960278360219	WITHOUT_CLASSIFICATION	3.972163978092191E-6	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999959773030713	WITHOUT_CLASSIFICATION	4.022696928672668E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999960520841461	WITHOUT_CLASSIFICATION	3.947915853927429E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999957772507403	WITHOUT_CLASSIFICATION	4.222749259712792E-6	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999966356547096	WITHOUT_CLASSIFICATION	3.364345290394301E-6	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999974936074606	WITHOUT_CLASSIFICATION	2.5063925393386133E-6	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999977292645739	WITHOUT_CLASSIFICATION	2.27073542624829E-6	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999974050430833	WITHOUT_CLASSIFICATION	2.594956916751023E-6	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999968580925719	WITHOUT_CLASSIFICATION	3.1419074281189753E-6	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999958659318556	WITHOUT_CLASSIFICATION	4.134068144380446E-6	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.999997246819694	WITHOUT_CLASSIFICATION	2.7531803059543933E-6	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999950340465636	WITHOUT_CLASSIFICATION	4.965953436360221E-6	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999973302843211	WITHOUT_CLASSIFICATION	2.6697156788500335E-6	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999967707905931	WITHOUT_CLASSIFICATION	3.229209406862579E-6	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999973498400855	WITHOUT_CLASSIFICATION	2.6501599144427286E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999964313434095	WITHOUT_CLASSIFICATION	3.56865659057841E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999953560698138	WITHOUT_CLASSIFICATION	4.643930186275309E-6	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.999991618024739	WITHOUT_CLASSIFICATION	8.38197526092373E-6	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999969985025642	WITHOUT_CLASSIFICATION	3.0014974358105293E-6	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999949719450723	WITHOUT_CLASSIFICATION	5.028054927700192E-6	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999963302279208	WITHOUT_CLASSIFICATION	3.6697720792216673E-6	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999968949684302	WITHOUT_CLASSIFICATION	3.1050315696983155E-6	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999958567579279	WITHOUT_CLASSIFICATION	4.143242072060991E-6	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999963900751501	WITHOUT_CLASSIFICATION	3.6099248499152426E-6	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999939788291359	WITHOUT_CLASSIFICATION	6.021170864158082E-6	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999958803826312	WITHOUT_CLASSIFICATION	4.119617368859316E-6	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999966862601392	WITHOUT_CLASSIFICATION	3.3137398607577246E-6	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999962255207495	WITHOUT_CLASSIFICATION	3.7744792505807257E-6	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999973336581756	WITHOUT_CLASSIFICATION	2.6663418244616163E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.99999710297597	WITHOUT_CLASSIFICATION	2.8970240299194752E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999953422862952	WITHOUT_CLASSIFICATION	4.65771370480585E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.99999872492704	WITHOUT_CLASSIFICATION	1.2750729599624432E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9998360425490956	WITHOUT_CLASSIFICATION	1.639574509042883E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9998666355395568	WITHOUT_CLASSIFICATION	1.333644604432666E-4	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9999722320325422	WITHOUT_CLASSIFICATION	2.7767967457763797E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9966309035536274	WITHOUT_CLASSIFICATION	0.0033690964463727307	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9998815446341809	WITHOUT_CLASSIFICATION	1.1845536581903474E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.999962367106576	WITHOUT_CLASSIFICATION	3.76328934240347E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999660079229324	WITHOUT_CLASSIFICATION	3.399207706755055E-5	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9999709980843114	WITHOUT_CLASSIFICATION	2.9001915688646408E-5	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999846571120647	WITHOUT_CLASSIFICATION	1.5342887935249527E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9999956762807932	WITHOUT_CLASSIFICATION	4.323719206836864E-6	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999950675439889	WITHOUT_CLASSIFICATION	4.932456011158212E-6	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.999991683459948	WITHOUT_CLASSIFICATION	8.316540051865777E-6	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9999065757160857	WITHOUT_CLASSIFICATION	9.34242839143086E-5	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.999997614723579	WITHOUT_CLASSIFICATION	2.385276421020834E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.999588493090412	WITHOUT_CLASSIFICATION	4.1150690958803956E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9999905269007583	WITHOUT_CLASSIFICATION	9.473099241618093E-6	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9995986232497527	WITHOUT_CLASSIFICATION	4.0137675024737936E-4	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999870536064345	WITHOUT_CLASSIFICATION	1.2946393565679764E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999997968045642	WITHOUT_CLASSIFICATION	2.031954357996803E-7	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.999768930750685	WITHOUT_CLASSIFICATION	2.310692493149682E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999981177111683	WITHOUT_CLASSIFICATION	1.8822888317099136E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999992681331052	WITHOUT_CLASSIFICATION	7.318668947359184E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999993672710745	WITHOUT_CLASSIFICATION	6.327289255338362E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999993672710745	WITHOUT_CLASSIFICATION	6.327289255338362E-7	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9999667603746156	WITHOUT_CLASSIFICATION	3.323962538439446E-5	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9998517300086062	WITHOUT_CLASSIFICATION	1.4826999139386468E-4	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.999897157366484	WITHOUT_CLASSIFICATION	1.0284263351597185E-4	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999998745699658	WITHOUT_CLASSIFICATION	1.2543003421212328E-7	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9999997216953982	WITHOUT_CLASSIFICATION	2.7830460185938873E-7	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999807767604207	WITHOUT_CLASSIFICATION	1.9223239579212336E-5	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9939560493544815	WITHOUT_CLASSIFICATION	0.0060439506455185164	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.999848982395613	WITHOUT_CLASSIFICATION	1.5101760438696125E-4	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9988405230997391	WITHOUT_CLASSIFICATION	0.0011594769002609695	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999923022416367	WITHOUT_CLASSIFICATION	7.697758363286239E-6	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999962157250554	WITHOUT_CLASSIFICATION	3.7842749445608227E-6	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.976664774339517	WITHOUT_CLASSIFICATION	0.023335225660482933	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9999953318764786	WITHOUT_CLASSIFICATION	4.668123521473603E-6	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999916720097525	WITHOUT_CLASSIFICATION	8.327990247595122E-6	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999921048871641	WITHOUT_CLASSIFICATION	7.895112835865864E-6	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999896932120854	WITHOUT_CLASSIFICATION	1.0306787914659721E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999775109011242	WITHOUT_CLASSIFICATION	2.2489098875813896E-5	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9999680542130083	WITHOUT_CLASSIFICATION	3.194578699169786E-5	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9991156824435433	WITHOUT_CLASSIFICATION	8.84317556456636E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9975235029532273	WITHOUT_CLASSIFICATION	0.0024764970467726155	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999999113492948	WITHOUT_CLASSIFICATION	8.86507051316065E-8	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.999997892649057	WITHOUT_CLASSIFICATION	2.1073509429563244E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9975545412912712	WITHOUT_CLASSIFICATION	0.0024454587087287304	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999951862260661	WITHOUT_CLASSIFICATION	4.813773933969332E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9975545412912712	WITHOUT_CLASSIFICATION	0.0024454587087287304	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9999961991069256	WITHOUT_CLASSIFICATION	3.800893074259461E-6	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999979625970389	WITHOUT_CLASSIFICATION	2.037402961065313E-6	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.9983456390244261	WITHOUT_CLASSIFICATION	0.001654360975573881	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999771797081564	WITHOUT_CLASSIFICATION	2.2820291843728093E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9999996175843282	WITHOUT_CLASSIFICATION	3.824156716893143E-7	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999938790393322	WITHOUT_CLASSIFICATION	6.12096066780947E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999938790393322	WITHOUT_CLASSIFICATION	6.12096066780947E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999938790393322	WITHOUT_CLASSIFICATION	6.12096066780947E-6	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9999997807848884	WITHOUT_CLASSIFICATION	2.192151115409931E-7	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999691225991806	WITHOUT_CLASSIFICATION	3.087740081942987E-5	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999998240303721	WITHOUT_CLASSIFICATION	1.759696278049457E-7	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999220554928895	WITHOUT_CLASSIFICATION	7.794450711050205E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999220554928895	WITHOUT_CLASSIFICATION	7.794450711050205E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999220554928895	WITHOUT_CLASSIFICATION	7.794450711050205E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999220554928895	WITHOUT_CLASSIFICATION	7.794450711050205E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999220554928895	WITHOUT_CLASSIFICATION	7.794450711050205E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999220554928895	WITHOUT_CLASSIFICATION	7.794450711050205E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999203901670134	WITHOUT_CLASSIFICATION	7.96098329866159E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999203901670134	WITHOUT_CLASSIFICATION	7.96098329866159E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999203901670134	WITHOUT_CLASSIFICATION	7.96098329866159E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999203901670134	WITHOUT_CLASSIFICATION	7.96098329866159E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999203901670134	WITHOUT_CLASSIFICATION	7.96098329866159E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999359875930347	WITHOUT_CLASSIFICATION	6.401240696527258E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999359875930347	WITHOUT_CLASSIFICATION	6.401240696527258E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999359875930347	WITHOUT_CLASSIFICATION	6.401240696527258E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999359875930347	WITHOUT_CLASSIFICATION	6.401240696527258E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999359875930347	WITHOUT_CLASSIFICATION	6.401240696527258E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.99949080258636	WITHOUT_CLASSIFICATION	5.091974136400535E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.99949080258636	WITHOUT_CLASSIFICATION	5.091974136400535E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.99949080258636	WITHOUT_CLASSIFICATION	5.091974136400535E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.99949080258636	WITHOUT_CLASSIFICATION	5.091974136400535E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.99949080258636	WITHOUT_CLASSIFICATION	5.091974136400535E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.99949080258636	WITHOUT_CLASSIFICATION	5.091974136400535E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9997614370505508	WITHOUT_CLASSIFICATION	2.385629494492014E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9997614370505508	WITHOUT_CLASSIFICATION	2.385629494492014E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9997614370505508	WITHOUT_CLASSIFICATION	2.385629494492014E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9997614370505508	WITHOUT_CLASSIFICATION	2.385629494492014E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9997614370505508	WITHOUT_CLASSIFICATION	2.385629494492014E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999685298978555	WITHOUT_CLASSIFICATION	3.147010214450342E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999685298978555	WITHOUT_CLASSIFICATION	3.147010214450342E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999685298978555	WITHOUT_CLASSIFICATION	3.147010214450342E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999685298978555	WITHOUT_CLASSIFICATION	3.147010214450342E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999685298978555	WITHOUT_CLASSIFICATION	3.147010214450342E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9996956698351765	WITHOUT_CLASSIFICATION	3.043301648235548E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9996956698351765	WITHOUT_CLASSIFICATION	3.043301648235548E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9996956698351765	WITHOUT_CLASSIFICATION	3.043301648235548E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9996956698351765	WITHOUT_CLASSIFICATION	3.043301648235548E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9996956698351765	WITHOUT_CLASSIFICATION	3.043301648235548E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.999995439231963	WITHOUT_CLASSIFICATION	4.5607680369975195E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999999080744597	WITHOUT_CLASSIFICATION	9.192554029395354E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999865938821377	WITHOUT_CLASSIFICATION	1.3406117862235342E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.999999649481616	WITHOUT_CLASSIFICATION	3.505183840321487E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999989157799791	WITHOUT_CLASSIFICATION	1.084220020855616E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999965726884171	WITHOUT_CLASSIFICATION	3.427311582851807E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999971328359692	WITHOUT_CLASSIFICATION	2.867164030641443E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999946243242765	WITHOUT_CLASSIFICATION	5.375675723479635E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.999996496299488	WITHOUT_CLASSIFICATION	3.5037005121529116E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999963351744081	WITHOUT_CLASSIFICATION	3.6648255919275166E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999959315454405	WITHOUT_CLASSIFICATION	4.068454559531658E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.99999552281008	WITHOUT_CLASSIFICATION	4.477189920004749E-6	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999958724287622	WITHOUT_CLASSIFICATION	4.1275712377839254E-6	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999954857445387	WITHOUT_CLASSIFICATION	4.514255461264255E-6	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999958531013322	WITHOUT_CLASSIFICATION	4.146898667796763E-6	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999965750854855	WITHOUT_CLASSIFICATION	3.4249145145008827E-6	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999959484165436	WITHOUT_CLASSIFICATION	4.051583456462047E-6	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999974006799393	WITHOUT_CLASSIFICATION	2.5993200607887357E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999975037885014	WITHOUT_CLASSIFICATION	2.4962114985580447E-6	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999971551149254	WITHOUT_CLASSIFICATION	2.844885074669659E-6	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999953027061457	WITHOUT_CLASSIFICATION	4.6972938542435125E-6	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999965716372351	WITHOUT_CLASSIFICATION	3.4283627648890006E-6	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999964825199636	WITHOUT_CLASSIFICATION	3.5174800364074218E-6	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.999997144304124	WITHOUT_CLASSIFICATION	2.855695876103336E-6	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999962047867526	WITHOUT_CLASSIFICATION	3.795213247420711E-6	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.999996552121294	WITHOUT_CLASSIFICATION	3.4478787060702534E-6	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999966803869101	WITHOUT_CLASSIFICATION	3.319613089778964E-6	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999953196015858	WITHOUT_CLASSIFICATION	4.680398414171835E-6	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999970408054873	WITHOUT_CLASSIFICATION	2.959194512620633E-6	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999959563813693	WITHOUT_CLASSIFICATION	4.0436186306976525E-6	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999957471152514	WITHOUT_CLASSIFICATION	4.2528847485157775E-6	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999971207871556	WITHOUT_CLASSIFICATION	2.8792128443507118E-6	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999967757914829	WITHOUT_CLASSIFICATION	3.2242085170627197E-6	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999966919810038	WITHOUT_CLASSIFICATION	3.3080189962147442E-6	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.99999723369927	WITHOUT_CLASSIFICATION	2.766300730096771E-6	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999966542698535	WITHOUT_CLASSIFICATION	3.345730146432128E-6	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999970863085175	WITHOUT_CLASSIFICATION	2.9136914824687908E-6	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999968882693565	WITHOUT_CLASSIFICATION	3.1117306436057968E-6	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999965586404561	WITHOUT_CLASSIFICATION	3.4413595439840825E-6	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999972210817449	WITHOUT_CLASSIFICATION	2.778918255032076E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999968266898973	WITHOUT_CLASSIFICATION	3.173310102635184E-6	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999973797773855	WITHOUT_CLASSIFICATION	2.6202226146208006E-6	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999971892775882	WITHOUT_CLASSIFICATION	2.8107224119070547E-6	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.999995000397426	WITHOUT_CLASSIFICATION	4.999602574097308E-6	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.999994752157743	WITHOUT_CLASSIFICATION	5.247842257043045E-6	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999952120627703	WITHOUT_CLASSIFICATION	4.787937229734901E-6	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999952339202578	WITHOUT_CLASSIFICATION	4.766079742267881E-6	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999956249625811	WITHOUT_CLASSIFICATION	4.375037418883784E-6	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999943806363483	WITHOUT_CLASSIFICATION	5.619363651773E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999969688300836	WITHOUT_CLASSIFICATION	3.0311699163932524E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999966003036649	WITHOUT_CLASSIFICATION	3.3996963351364208E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999962408227495	WITHOUT_CLASSIFICATION	3.7591772504966847E-6	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999959868206038	WITHOUT_CLASSIFICATION	4.01317939617811E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999974991126555	WITHOUT_CLASSIFICATION	2.5008873445609093E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999938506726863	WITHOUT_CLASSIFICATION	6.149327313703508E-6	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999969574075706	WITHOUT_CLASSIFICATION	3.0425924293435263E-6	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999967037751816	WITHOUT_CLASSIFICATION	3.2962248184451085E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999947825530526	WITHOUT_CLASSIFICATION	5.217446947353796E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999946929325082	WITHOUT_CLASSIFICATION	5.307067491876399E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999959517856383	WITHOUT_CLASSIFICATION	4.048214361665277E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999967227542808	WITHOUT_CLASSIFICATION	3.2772457191055497E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999974164502423	WITHOUT_CLASSIFICATION	2.5835497576442082E-6	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999966785546451	WITHOUT_CLASSIFICATION	3.3214453547504492E-6	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999964482974298	WITHOUT_CLASSIFICATION	3.5517025701376827E-6	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999943014887225	WITHOUT_CLASSIFICATION	5.6985112774306865E-6	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999953637533954	WITHOUT_CLASSIFICATION	4.636246604571781E-6	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999961056890186	WITHOUT_CLASSIFICATION	3.89431098135646E-6	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999970253370365	WITHOUT_CLASSIFICATION	2.9746629635641588E-6	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999967769796296	WITHOUT_CLASSIFICATION	3.2230203704123783E-6	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999960397649016	WITHOUT_CLASSIFICATION	3.960235098374157E-6	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999951051570988	WITHOUT_CLASSIFICATION	4.89484290116126E-6	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999952486338475	WITHOUT_CLASSIFICATION	4.751366152499487E-6	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999938164615233	WITHOUT_CLASSIFICATION	6.183538476656035E-6	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999961809192977	WITHOUT_CLASSIFICATION	3.819080702365935E-6	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999951827222733	WITHOUT_CLASSIFICATION	4.817277726769606E-6	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999946487776186	WITHOUT_CLASSIFICATION	5.351222381390729E-6	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999945800564954	WITHOUT_CLASSIFICATION	5.419943504584561E-6	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999973050042964	WITHOUT_CLASSIFICATION	2.6949957036964163E-6	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.99999689381497	WITHOUT_CLASSIFICATION	3.1061850301070503E-6	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999965642688387	WITHOUT_CLASSIFICATION	3.4357311613592113E-6	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999961035124304	WITHOUT_CLASSIFICATION	3.89648756953067E-6	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999960728142251	WITHOUT_CLASSIFICATION	3.927185774998027E-6	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999968761858283	WITHOUT_CLASSIFICATION	3.123814171669991E-6	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.99999691366738	WITHOUT_CLASSIFICATION	3.0863326200432823E-6	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999957687678436	WITHOUT_CLASSIFICATION	4.231232156441594E-6	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999936617872484	WITHOUT_CLASSIFICATION	6.338212751647432E-6	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.999996085994981	WITHOUT_CLASSIFICATION	3.914005018992021E-6	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999967187196316	WITHOUT_CLASSIFICATION	3.2812803683836002E-6	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999969301854266	WITHOUT_CLASSIFICATION	3.0698145733203826E-6	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999959759562607	WITHOUT_CLASSIFICATION	4.0240437394011416E-6	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.999995679246945	WITHOUT_CLASSIFICATION	4.320753054941448E-6	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999972742070686	WITHOUT_CLASSIFICATION	2.7257929313369773E-6	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999966227085537	WITHOUT_CLASSIFICATION	3.3772914461859516E-6	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999970830960818	WITHOUT_CLASSIFICATION	2.9169039181266217E-6	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999971304399242	WITHOUT_CLASSIFICATION	2.8695600757150374E-6	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999959780667972	WITHOUT_CLASSIFICATION	4.021933202837345E-6	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999975961605047	WITHOUT_CLASSIFICATION	2.4038394954066546E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999966971080974	WITHOUT_CLASSIFICATION	3.3028919026163772E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999948480181099	WITHOUT_CLASSIFICATION	5.151981890099085E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999962397785629	WITHOUT_CLASSIFICATION	3.760221437068164E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999969395926028	WITHOUT_CLASSIFICATION	3.0604073972410893E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999966163807326	WITHOUT_CLASSIFICATION	3.3836192675344454E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999967912523193	WITHOUT_CLASSIFICATION	3.208747680714721E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999953901342516	WITHOUT_CLASSIFICATION	4.6098657483909146E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999973154822579	WITHOUT_CLASSIFICATION	2.684517741993122E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999971854810339	WITHOUT_CLASSIFICATION	2.8145189660358103E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999968132087188	WITHOUT_CLASSIFICATION	3.186791281324579E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999981649696184	WITHOUT_CLASSIFICATION	1.8350303817061273E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999969161445048	WITHOUT_CLASSIFICATION	3.083855495206039E-6	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999956673867633	WITHOUT_CLASSIFICATION	4.332613236675769E-6	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999947849621161	WITHOUT_CLASSIFICATION	5.215037883811328E-6	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999952899863016	WITHOUT_CLASSIFICATION	4.710013698399682E-6	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.99999479612701	WITHOUT_CLASSIFICATION	5.203872989896125E-6	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999966519385941	WITHOUT_CLASSIFICATION	3.3480614058887267E-6	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.999996111640241	WITHOUT_CLASSIFICATION	3.888359758958888E-6	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999968391144897	WITHOUT_CLASSIFICATION	3.1608855103824128E-6	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999965142304904	WITHOUT_CLASSIFICATION	3.485769509605445E-6	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.999996536508912	WITHOUT_CLASSIFICATION	3.463491088029813E-6	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999963011008495	WITHOUT_CLASSIFICATION	3.6988991506410167E-6	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999956585337632	WITHOUT_CLASSIFICATION	4.34146623688071E-6	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999973293235248	WITHOUT_CLASSIFICATION	2.670676475241296E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999968858829054	WITHOUT_CLASSIFICATION	3.1141170944959746E-6	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999968654166473	WITHOUT_CLASSIFICATION	3.1345833526016308E-6	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999950860373158	WITHOUT_CLASSIFICATION	4.913962684255456E-6	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.999997037893535	WITHOUT_CLASSIFICATION	2.962106464914533E-6	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999961984510104	WITHOUT_CLASSIFICATION	3.801548989529075E-6	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999972912397562	WITHOUT_CLASSIFICATION	2.7087602437760915E-6	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999955922156524	WITHOUT_CLASSIFICATION	4.407784347550697E-6	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999947907970929	WITHOUT_CLASSIFICATION	5.209202907140374E-6	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999972849730945	WITHOUT_CLASSIFICATION	2.7150269055910815E-6	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999970011938046	WITHOUT_CLASSIFICATION	2.9988061954119296E-6	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999970188156172	WITHOUT_CLASSIFICATION	2.9811843828729723E-6	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999965699616054	WITHOUT_CLASSIFICATION	3.4300383946740594E-6	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999961676635887	WITHOUT_CLASSIFICATION	3.832336411322868E-6	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999970064523195	WITHOUT_CLASSIFICATION	2.993547680420491E-6	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999970862304953	WITHOUT_CLASSIFICATION	2.913769504741998E-6	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999965241703809	WITHOUT_CLASSIFICATION	3.4758296190927783E-6	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999980311186373	WITHOUT_CLASSIFICATION	1.9688813627341483E-6	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999968349760218	WITHOUT_CLASSIFICATION	3.1650239781789824E-6	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999970045976108	WITHOUT_CLASSIFICATION	2.9954023892589903E-6	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999978952091843	WITHOUT_CLASSIFICATION	2.1047908157500646E-6	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999979139835736	WITHOUT_CLASSIFICATION	2.086016426414803E-6	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999977661342916	WITHOUT_CLASSIFICATION	2.233865708364045E-6	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999973952217881	WITHOUT_CLASSIFICATION	2.604778211910623E-6	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999978945834472	WITHOUT_CLASSIFICATION	2.1054165528613466E-6	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.999997311563716	WITHOUT_CLASSIFICATION	2.6884362839064404E-6	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999973183222731	WITHOUT_CLASSIFICATION	2.681677726772038E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999978486980072	WITHOUT_CLASSIFICATION	2.1513019928444996E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999981135719015	WITHOUT_CLASSIFICATION	1.886428098498944E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999972576771718	WITHOUT_CLASSIFICATION	2.7423228282281905E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999983134692767	WITHOUT_CLASSIFICATION	1.6865307233218277E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.999998153034454	WITHOUT_CLASSIFICATION	1.8469655459637027E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999967912647401	WITHOUT_CLASSIFICATION	3.2087352599578176E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999972838747742	WITHOUT_CLASSIFICATION	2.7161252257085016E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999971439908598	WITHOUT_CLASSIFICATION	2.8560091402169704E-6	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999968807000463	WITHOUT_CLASSIFICATION	3.1192999536834307E-6	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999961128676363	WITHOUT_CLASSIFICATION	3.887132363710351E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999961639406626	WITHOUT_CLASSIFICATION	3.836059337415481E-6	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999974122520005	WITHOUT_CLASSIFICATION	2.5877479995484703E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999974410780827	WITHOUT_CLASSIFICATION	2.558921917303276E-6	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999970161931976	WITHOUT_CLASSIFICATION	2.9838068024701524E-6	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999980379039914	WITHOUT_CLASSIFICATION	1.962096008606062E-6	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999976884857755	WITHOUT_CLASSIFICATION	2.311514224483116E-6	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.99999816786098	WITHOUT_CLASSIFICATION	1.8321390200327021E-6	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999978683059115	WITHOUT_CLASSIFICATION	2.1316940884570035E-6	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999974036328565	WITHOUT_CLASSIFICATION	2.5963671434001597E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.999997757719551	WITHOUT_CLASSIFICATION	2.242280448959953E-6	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999971179639253	WITHOUT_CLASSIFICATION	2.882036074814236E-6	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999973928734412	WITHOUT_CLASSIFICATION	2.6071265588574023E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999980425770527	WITHOUT_CLASSIFICATION	1.957422947276945E-6	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.999997835860809	WITHOUT_CLASSIFICATION	2.1641391909751008E-6	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999975613496059	WITHOUT_CLASSIFICATION	2.438650394031372E-6	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999962775693748	WITHOUT_CLASSIFICATION	3.7224306250830386E-6	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999975596847755	WITHOUT_CLASSIFICATION	2.440315224447496E-6	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999973739362453	WITHOUT_CLASSIFICATION	2.626063754731686E-6	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999958311187653	WITHOUT_CLASSIFICATION	4.168881234669683E-6	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999978754697353	WITHOUT_CLASSIFICATION	2.1245302647007934E-6	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999975238407613	WITHOUT_CLASSIFICATION	2.4761592387031435E-6	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999969965916762	WITHOUT_CLASSIFICATION	3.0034083238356278E-6	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999963466025947	WITHOUT_CLASSIFICATION	3.653397405199231E-6	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999963369718247	WITHOUT_CLASSIFICATION	3.6630281753059184E-6	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999963265803393	WITHOUT_CLASSIFICATION	3.6734196606859294E-6	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999972076167554	WITHOUT_CLASSIFICATION	2.792383244645967E-6	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999964525678054	WITHOUT_CLASSIFICATION	3.5474321945731197E-6	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999946080121098	WITHOUT_CLASSIFICATION	5.391987890196918E-6	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999968073259007	WITHOUT_CLASSIFICATION	3.192674099403344E-6	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999970210942228	WITHOUT_CLASSIFICATION	2.9789057771041284E-6	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999965220086003	WITHOUT_CLASSIFICATION	3.477991399659145E-6	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999962448279542	WITHOUT_CLASSIFICATION	3.7551720458385107E-6	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999962572759695	WITHOUT_CLASSIFICATION	3.742724030491321E-6	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999957758418241	WITHOUT_CLASSIFICATION	4.224158175902559E-6	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999959405686163	WITHOUT_CLASSIFICATION	4.059431383675911E-6	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999964182865174	WITHOUT_CLASSIFICATION	3.581713482449717E-6	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999959350411615	WITHOUT_CLASSIFICATION	4.064958838566086E-6	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999958303268273	WITHOUT_CLASSIFICATION	4.169673172788821E-6	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999971789963213	WITHOUT_CLASSIFICATION	2.821003678640548E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999969712068485	WITHOUT_CLASSIFICATION	3.028793151554153E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999970797137926	WITHOUT_CLASSIFICATION	2.920286207419286E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999959698531883	WITHOUT_CLASSIFICATION	4.03014681164177E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.999996871754985	WITHOUT_CLASSIFICATION	3.128245014970254E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999955371285716	WITHOUT_CLASSIFICATION	4.462871428402888E-6	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999978780193922	WITHOUT_CLASSIFICATION	2.121980607844691E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999972631020828	WITHOUT_CLASSIFICATION	2.7368979171462474E-6	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.999994995514753	WITHOUT_CLASSIFICATION	5.004485246999247E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999970019399478	WITHOUT_CLASSIFICATION	2.998060052249604E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999962055022182	WITHOUT_CLASSIFICATION	3.7944977816355654E-6	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999965432785399	WITHOUT_CLASSIFICATION	3.456721460044679E-6	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999979349416567	WITHOUT_CLASSIFICATION	2.0650583433629567E-6	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999971625953572	WITHOUT_CLASSIFICATION	2.837404642856387E-6	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999967368348086	WITHOUT_CLASSIFICATION	3.2631651914068773E-6	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999962094947836	WITHOUT_CLASSIFICATION	3.790505216441592E-6	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999965765677206	WITHOUT_CLASSIFICATION	3.42343227952492E-6	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999975853709168	WITHOUT_CLASSIFICATION	2.414629083260232E-6	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999959553050362	WITHOUT_CLASSIFICATION	4.0446949638175385E-6	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999970479430083	WITHOUT_CLASSIFICATION	2.9520569917379584E-6	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999975410489249	WITHOUT_CLASSIFICATION	2.458951075115902E-6	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999969966229262	WITHOUT_CLASSIFICATION	3.0033770737812444E-6	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999974449283211	WITHOUT_CLASSIFICATION	2.555071678833138E-6	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999972712639339	WITHOUT_CLASSIFICATION	2.7287360660076546E-6	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999975989202261	WITHOUT_CLASSIFICATION	2.4010797738394228E-6	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999973773143402	WITHOUT_CLASSIFICATION	2.6226856597471725E-6	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999972769865084	WITHOUT_CLASSIFICATION	2.723013491574904E-6	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999976332446423	WITHOUT_CLASSIFICATION	2.3667553577338533E-6	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999977344107752	WITHOUT_CLASSIFICATION	2.265589224879776E-6	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999971601249723	WITHOUT_CLASSIFICATION	2.839875027771274E-6	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999969911378159	WITHOUT_CLASSIFICATION	3.0088621841200882E-6	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999967816425385	WITHOUT_CLASSIFICATION	3.2183574615309246E-6	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999962300036913	WITHOUT_CLASSIFICATION	3.7699963086857486E-6	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999979946473165	WITHOUT_CLASSIFICATION	2.0053526835051386E-6	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999976886801221	WITHOUT_CLASSIFICATION	2.311319877978539E-6	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999973658323434	WITHOUT_CLASSIFICATION	2.634167656572226E-6	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.999995822495693	WITHOUT_CLASSIFICATION	4.177504306980021E-6	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999969510108054	WITHOUT_CLASSIFICATION	3.0489891945385418E-6	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999961907836479	WITHOUT_CLASSIFICATION	3.8092163520145392E-6	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999976271649142	WITHOUT_CLASSIFICATION	2.3728350858482324E-6	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999969559749154	WITHOUT_CLASSIFICATION	3.044025084508563E-6	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999974652677487	WITHOUT_CLASSIFICATION	2.5347322513192377E-6	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999970070113002	WITHOUT_CLASSIFICATION	2.992988699772892E-6	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999970383272584	WITHOUT_CLASSIFICATION	2.961672741685758E-6	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999955684662837	WITHOUT_CLASSIFICATION	4.431533716296587E-6	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999964693119805	WITHOUT_CLASSIFICATION	3.5306880194533614E-6	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999955155408621	WITHOUT_CLASSIFICATION	4.4844591379802E-6	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999972267779815	WITHOUT_CLASSIFICATION	2.7732220184093825E-6	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999971305339974	WITHOUT_CLASSIFICATION	2.869466002534672E-6	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999971151280904	WITHOUT_CLASSIFICATION	2.8848719096192003E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999966824542557	WITHOUT_CLASSIFICATION	3.3175457444105598E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999960520841461	WITHOUT_CLASSIFICATION	3.947915853927429E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999957772507403	WITHOUT_CLASSIFICATION	4.222749259712792E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999964313434095	WITHOUT_CLASSIFICATION	3.56865659057841E-6	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999969687005112	WITHOUT_CLASSIFICATION	3.03129948870868E-6	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.999991618024739	WITHOUT_CLASSIFICATION	8.38197526092373E-6	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999949719450723	WITHOUT_CLASSIFICATION	5.028054927700192E-6	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999968949684302	WITHOUT_CLASSIFICATION	3.1050315696983155E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.99999710297597	WITHOUT_CLASSIFICATION	2.8970240299194752E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999953422862952	WITHOUT_CLASSIFICATION	4.65771370480585E-6	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999974803648795	WITHOUT_CLASSIFICATION	2.5196351204800647E-6	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.999997936914076	WITHOUT_CLASSIFICATION	2.0630859240107725E-6	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999958406791983	WITHOUT_CLASSIFICATION	4.159320801598709E-6	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999946266426768	WITHOUT_CLASSIFICATION	5.373357323222956E-6	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999974776865163	WITHOUT_CLASSIFICATION	2.522313483845958E-6	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999972254409	WITHOUT_CLASSIFICATION	2.774559100053898E-6	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999974634193369	WITHOUT_CLASSIFICATION	2.536580663160238E-6	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999970197142941	WITHOUT_CLASSIFICATION	2.98028570600969E-6	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999968285615061	WITHOUT_CLASSIFICATION	3.171438493991654E-6	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999976274651957	WITHOUT_CLASSIFICATION	2.372534804266504E-6	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999973836097119	WITHOUT_CLASSIFICATION	2.6163902881468115E-6	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999965830255833	WITHOUT_CLASSIFICATION	3.4169744167817E-6	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999951561390493	WITHOUT_CLASSIFICATION	4.843860950696822E-6	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999977942790607	WITHOUT_CLASSIFICATION	2.2057209392754227E-6	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999968934349535	WITHOUT_CLASSIFICATION	3.1065650464204685E-6	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999941895215139	WITHOUT_CLASSIFICATION	5.810478486159763E-6	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999965889270592	WITHOUT_CLASSIFICATION	3.411072940696839E-6	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999970471351796	WITHOUT_CLASSIFICATION	2.952864820358903E-6	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999959743467451	WITHOUT_CLASSIFICATION	4.025653254877836E-6	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.999996713586199	WITHOUT_CLASSIFICATION	3.2864138009715295E-6	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999952458543943	WITHOUT_CLASSIFICATION	4.754145605676507E-6	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999936479440298	WITHOUT_CLASSIFICATION	6.352055970278417E-6	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999964202191286	WITHOUT_CLASSIFICATION	3.5797808713929583E-6	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999967589464575	WITHOUT_CLASSIFICATION	3.241053542591562E-6	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999966225632728	WITHOUT_CLASSIFICATION	3.3774367272211666E-6	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999938754030395	WITHOUT_CLASSIFICATION	6.124596960445453E-6	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999953281758296	WITHOUT_CLASSIFICATION	4.671824170442531E-6	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999962179083879	WITHOUT_CLASSIFICATION	3.7820916121332648E-6	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999967460222323	WITHOUT_CLASSIFICATION	3.2539777676294463E-6	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999967704321986	WITHOUT_CLASSIFICATION	3.2295678014847895E-6	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999973402270299	WITHOUT_CLASSIFICATION	2.6597729700458295E-6	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999964901802072	WITHOUT_CLASSIFICATION	3.5098197928075583E-6	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999963159107724	WITHOUT_CLASSIFICATION	3.6840892276513836E-6	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999966387736733	WITHOUT_CLASSIFICATION	3.3612263268263883E-6	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999965338768646	WITHOUT_CLASSIFICATION	3.46612313545896E-6	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999939827780548	WITHOUT_CLASSIFICATION	6.017221945163729E-6	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999956333859441	WITHOUT_CLASSIFICATION	4.366614055981694E-6	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999967025155166	WITHOUT_CLASSIFICATION	3.2974844833787067E-6	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999970808598632	WITHOUT_CLASSIFICATION	2.9191401368310143E-6	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.999962367106576	WITHOUT_CLASSIFICATION	3.76328934240347E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999660079229324	WITHOUT_CLASSIFICATION	3.399207706755055E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.999991683459948	WITHOUT_CLASSIFICATION	8.316540051865777E-6	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.999997614723579	WITHOUT_CLASSIFICATION	2.385276421020834E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.999588493090412	WITHOUT_CLASSIFICATION	4.1150690958803956E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9999905269007583	WITHOUT_CLASSIFICATION	9.473099241618093E-6	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9995986232497527	WITHOUT_CLASSIFICATION	4.0137675024737936E-4	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998676306190262	WITHOUT_CLASSIFICATION	1.323693809738514E-4	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999968699671605	WITHOUT_CLASSIFICATION	3.130032839488412E-6	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999965280891573	WITHOUT_CLASSIFICATION	3.4719108427257064E-6	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.999994285098482	WITHOUT_CLASSIFICATION	5.714901517985399E-6	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999969276458861	WITHOUT_CLASSIFICATION	3.0723541138514806E-6	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999969095811012	WITHOUT_CLASSIFICATION	3.090418898785704E-6	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.999996809002381	WITHOUT_CLASSIFICATION	3.190997619047296E-6	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999949441210503	WITHOUT_CLASSIFICATION	5.05587894971696E-6	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999961263099201	WITHOUT_CLASSIFICATION	3.873690079943338E-6	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999975330723783	WITHOUT_CLASSIFICATION	2.4669276217364598E-6	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999962146716131	WITHOUT_CLASSIFICATION	3.785328386737364E-6	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999962496490223	WITHOUT_CLASSIFICATION	3.750350977614191E-6	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999961389026547	WITHOUT_CLASSIFICATION	3.86109734535286E-6	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.999993387916164	WITHOUT_CLASSIFICATION	6.612083835995042E-6	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999956134638738	WITHOUT_CLASSIFICATION	4.386536126214329E-6	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999970411607557	WITHOUT_CLASSIFICATION	2.9588392442057816E-6	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999967370435273	WITHOUT_CLASSIFICATION	3.2629564726674023E-6	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999958533470453	WITHOUT_CLASSIFICATION	4.146652954677047E-6	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999943051931365	WITHOUT_CLASSIFICATION	5.6948068634010406E-6	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999941454505544	WITHOUT_CLASSIFICATION	5.8545494454986366E-6	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999964931190691	WITHOUT_CLASSIFICATION	3.506880930846423E-6	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999963762392643	WITHOUT_CLASSIFICATION	3.6237607356543214E-6	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999944813479467	WITHOUT_CLASSIFICATION	5.5186520533394415E-6	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999973120398012	WITHOUT_CLASSIFICATION	2.6879601986994656E-6	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999943274013199	WITHOUT_CLASSIFICATION	5.672598680064153E-6	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999956109330811	WITHOUT_CLASSIFICATION	4.389066918992658E-6	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.999977312016351	WITHOUT_CLASSIFICATION	2.268798364903692E-5	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999992188602644	WITHOUT_CLASSIFICATION	7.811397355159314E-7	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999973811226149	WITHOUT_CLASSIFICATION	2.6188773850539023E-6	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9998396745718843	WITHOUT_CLASSIFICATION	1.603254281156867E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999997968045642	WITHOUT_CLASSIFICATION	2.031954357996803E-7	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.999768930750685	WITHOUT_CLASSIFICATION	2.310692493149682E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999993672710745	WITHOUT_CLASSIFICATION	6.327289255338362E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999993672710745	WITHOUT_CLASSIFICATION	6.327289255338362E-7	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.8564123152196641	WITHOUT_CLASSIFICATION	0.143587684780336	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999843094176192	WITHOUT_CLASSIFICATION	1.569058238079455E-5	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999928839631453	WITHOUT_CLASSIFICATION	7.116036854641178E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999975141241482	WITHOUT_CLASSIFICATION	2.485875851847023E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999989264840995	WITHOUT_CLASSIFICATION	1.07351590053526E-6	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999998649314868	WITHOUT_CLASSIFICATION	1.3506851312374882E-7	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999938639006024	WITHOUT_CLASSIFICATION	6.1360993976132E-6	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.999999888076528	WITHOUT_CLASSIFICATION	1.1192347202468275E-7	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999996559098439	WITHOUT_CLASSIFICATION	3.440901561856516E-7	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.999999911528153	WITHOUT_CLASSIFICATION	8.84718468696436E-8	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9999986333151775	WITHOUT_CLASSIFICATION	1.3666848225764292E-6	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999992000407075	WITHOUT_CLASSIFICATION	7.99959292600924E-7	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999996047304173	WITHOUT_CLASSIFICATION	3.9526958275202193E-7	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999999356973706	WITHOUT_CLASSIFICATION	6.430262944505736E-8	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999878310516448	WITHOUT_CLASSIFICATION	1.216894835521951E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999878310516448	WITHOUT_CLASSIFICATION	1.216894835521951E-5	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999671262421526	WITHOUT_CLASSIFICATION	3.2873757847391045E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999945384004532	WITHOUT_CLASSIFICATION	5.4615995468405195E-6	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999997126993475	WITHOUT_CLASSIFICATION	2.873006524724609E-7	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999991053387773	WITHOUT_CLASSIFICATION	8.946612225524564E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999978082817395	WITHOUT_CLASSIFICATION	2.1917182605449707E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999963245648806	WITHOUT_CLASSIFICATION	3.6754351192457154E-6	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999993653650375	WITHOUT_CLASSIFICATION	6.346349624984497E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999963245648806	WITHOUT_CLASSIFICATION	3.6754351192457154E-6	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999518594311968	WITHOUT_CLASSIFICATION	4.814056880324864E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999870775127563	WITHOUT_CLASSIFICATION	1.2922487243709205E-5	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9999978265094144	WITHOUT_CLASSIFICATION	2.1734905855883093E-6	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9999984738415583	WITHOUT_CLASSIFICATION	1.526158441825318E-6	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999886177567884	WITHOUT_CLASSIFICATION	1.138224321165722E-5	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999957092677849	WITHOUT_CLASSIFICATION	4.290732215059927E-6	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999984009917268	WITHOUT_CLASSIFICATION	1.5990082732282948E-6	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999611230289979	WITHOUT_CLASSIFICATION	3.8876971002097594E-5	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999859621857253	WITHOUT_CLASSIFICATION	1.4037814274785243E-5	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.9999309942305865	WITHOUT_CLASSIFICATION	6.900576941360098E-5	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9983976492677086	WITHOUT_CLASSIFICATION	0.0016023507322914241	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999135222717727	WITHOUT_CLASSIFICATION	8.647772822737248E-5	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9998911364732737	WITHOUT_CLASSIFICATION	1.0886352672633535E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999472663982018	WITHOUT_CLASSIFICATION	5.273360179818742E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999995812758717	WITHOUT_CLASSIFICATION	4.187241282761655E-7	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999995812758717	WITHOUT_CLASSIFICATION	4.187241282761655E-7	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999840511539685	WITHOUT_CLASSIFICATION	1.5948846031520954E-5	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999991386648217	WITHOUT_CLASSIFICATION	8.613351783378734E-7	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999997011430076	WITHOUT_CLASSIFICATION	2.988569923702989E-7	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9995071825469124	WITHOUT_CLASSIFICATION	4.928174530875337E-4	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999946715594115	WITHOUT_CLASSIFICATION	5.328440588560029E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999963245648806	WITHOUT_CLASSIFICATION	3.6754351192457154E-6	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999979912400082	WITHOUT_CLASSIFICATION	2.0087599918583272E-6	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999999896141788	WITHOUT_CLASSIFICATION	1.0385821228397038E-8	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999987877497374	WITHOUT_CLASSIFICATION	1.2122502625292025E-6	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999977465426868	WITHOUT_CLASSIFICATION	2.2534573132000774E-6	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.999999941255811	WITHOUT_CLASSIFICATION	5.874418882586835E-8	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999915485910206	WITHOUT_CLASSIFICATION	8.45140897939874E-6	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999921905648791	WITHOUT_CLASSIFICATION	7.80943512100639E-6	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9999750206327658	WITHOUT_CLASSIFICATION	2.4979367234163054E-5	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999737494277562	WITHOUT_CLASSIFICATION	2.6250572243723108E-5	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999995531040689	WITHOUT_CLASSIFICATION	4.468959311932096E-7	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999999627619703	WITHOUT_CLASSIFICATION	3.723802978097464E-8	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.999999976303662	WITHOUT_CLASSIFICATION	2.3696338041151605E-8	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9999987340245176	WITHOUT_CLASSIFICATION	1.2659754824620758E-6	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999997833746008	WITHOUT_CLASSIFICATION	2.1662539917248E-7	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9999739700250081	WITHOUT_CLASSIFICATION	2.602997499185045E-5	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999865961740974	WITHOUT_CLASSIFICATION	1.340382590271828E-5	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999998913608155	WITHOUT_CLASSIFICATION	1.0863918445576101E-7	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9999494375506861	WITHOUT_CLASSIFICATION	5.056244931378818E-5	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999997550322535	WITHOUT_CLASSIFICATION	2.449677465247933E-7	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999987646811856	WITHOUT_CLASSIFICATION	1.2353188143237996E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.999999949900541	WITHOUT_CLASSIFICATION	5.0099459115056107E-8	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9999936765599109	WITHOUT_CLASSIFICATION	6.323440089055023E-6	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999999986075183	WITHOUT_CLASSIFICATION	1.392481607594422E-9	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.999994575812408	WITHOUT_CLASSIFICATION	5.424187592041569E-6	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999893314242496	WITHOUT_CLASSIFICATION	1.066857575033753E-5	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999970798308615	WITHOUT_CLASSIFICATION	2.9201691385173136E-6	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.99999995855567	WITHOUT_CLASSIFICATION	4.1444329986602794E-8	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999992160617835	WITHOUT_CLASSIFICATION	7.839382165125896E-7	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9999960175513274	WITHOUT_CLASSIFICATION	3.982448672587317E-6	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999998436250338	WITHOUT_CLASSIFICATION	1.5637496627223044E-7	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999974056676926	WITHOUT_CLASSIFICATION	2.5943323074722906E-6	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999998511405571	WITHOUT_CLASSIFICATION	1.4885944277634298E-7	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999999103615524	WITHOUT_CLASSIFICATION	8.963844750037473E-8	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9991998297278106	WITHOUT_CLASSIFICATION	8.001702721893954E-4	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999690500916304	WITHOUT_CLASSIFICATION	3.094990836965867E-5	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999951779760877	WITHOUT_CLASSIFICATION	4.822023912312578E-6	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999982503047055	WITHOUT_CLASSIFICATION	1.749695294666104E-6	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999997749028575	WITHOUT_CLASSIFICATION	2.250971424616924E-7	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999985142945114	WITHOUT_CLASSIFICATION	1.4857054886363896E-6	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999996142113935	WITHOUT_CLASSIFICATION	3.857886064982247E-7	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998676306190262	WITHOUT_CLASSIFICATION	1.323693809738514E-4	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9998907412180382	WITHOUT_CLASSIFICATION	1.0925878196169349E-4	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999973910985079	WITHOUT_CLASSIFICATION	2.608901492142597E-6	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999946087104749	WITHOUT_CLASSIFICATION	5.391289525124376E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999996461936882	WITHOUT_CLASSIFICATION	3.538063117560213E-7	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999870775127563	WITHOUT_CLASSIFICATION	1.2922487243709205E-5	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9998994140554718	WITHOUT_CLASSIFICATION	1.0058594452818785E-4	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.999997580941918	WITHOUT_CLASSIFICATION	2.419058081965841E-6	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.999985232108462	WITHOUT_CLASSIFICATION	1.4767891538062477E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999959768885266	WITHOUT_CLASSIFICATION	4.023111473394073E-6	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999959768885266	WITHOUT_CLASSIFICATION	4.023111473394073E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999947044527437	WITHOUT_CLASSIFICATION	5.295547256369798E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999947044527437	WITHOUT_CLASSIFICATION	5.295547256369798E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999947044527437	WITHOUT_CLASSIFICATION	5.295547256369798E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999937554344498	WITHOUT_CLASSIFICATION	6.244565550151647E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999937554344498	WITHOUT_CLASSIFICATION	6.244565550151647E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999822359798292	WITHOUT_CLASSIFICATION	1.7764020170785108E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999822359798292	WITHOUT_CLASSIFICATION	1.7764020170785108E-5	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9992902449664883	WITHOUT_CLASSIFICATION	7.097550335116298E-4	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9991697076222422	WITHOUT_CLASSIFICATION	8.302923777577775E-4	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999996023089978	WITHOUT_CLASSIFICATION	3.976910021759829E-7	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999996023089978	WITHOUT_CLASSIFICATION	3.976910021759829E-7	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999061453127052	WITHOUT_CLASSIFICATION	9.385468729479719E-5	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999990658688961	WITHOUT_CLASSIFICATION	9.341311039458564E-7	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9999963737355754	WITHOUT_CLASSIFICATION	3.6262644246484567E-6	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999993224361843	WITHOUT_CLASSIFICATION	6.775638157682123E-7	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999923167790391	WITHOUT_CLASSIFICATION	7.68322096092222E-6	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999989064776106	WITHOUT_CLASSIFICATION	1.0935223894945582E-6	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.999989540799692	WITHOUT_CLASSIFICATION	1.045920030797078E-5	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999985146097594	WITHOUT_CLASSIFICATION	1.485390240566284E-6	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.999998589601661	WITHOUT_CLASSIFICATION	1.410398339055661E-6	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999992689394066	WITHOUT_CLASSIFICATION	7.31060593398123E-7	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999583071628065	WITHOUT_CLASSIFICATION	4.1692837193390086E-5	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999993512654596	WITHOUT_CLASSIFICATION	6.487345404441653E-7	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9999805199678422	WITHOUT_CLASSIFICATION	1.9480032157834094E-5	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999918487435486	WITHOUT_CLASSIFICATION	8.151256451448805E-6	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999991365411903	WITHOUT_CLASSIFICATION	8.634588096672302E-7	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9996526972374076	WITHOUT_CLASSIFICATION	3.473027625923937E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.999974349502086	WITHOUT_CLASSIFICATION	2.5650497914075554E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999922204507891	WITHOUT_CLASSIFICATION	7.779549210823837E-6	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.999980534334268	WITHOUT_CLASSIFICATION	1.946566573189561E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9969712638128337	WITHOUT_CLASSIFICATION	0.0030287361871661543	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999963159045667	WITHOUT_CLASSIFICATION	3.684095433224633E-6	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999964244359903	WITHOUT_CLASSIFICATION	3.575564009628444E-6	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999991521229454	WITHOUT_CLASSIFICATION	8.478770545293663E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999937372310019	WITHOUT_CLASSIFICATION	6.262768997971338E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999991382936381	WITHOUT_CLASSIFICATION	8.617063619059455E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999563139019945	WITHOUT_CLASSIFICATION	4.3686098005506456E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999752405942883	WITHOUT_CLASSIFICATION	2.4759405711771136E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.999988423340945	WITHOUT_CLASSIFICATION	1.1576659054971407E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999885405396711	WITHOUT_CLASSIFICATION	1.1459460328812373E-5	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999842327402114	WITHOUT_CLASSIFICATION	1.5767259788606822E-5	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999200667369562	WITHOUT_CLASSIFICATION	7.993326304374219E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962203945024	WITHOUT_CLASSIFICATION	3.7796054975733796E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999994799563669	WITHOUT_CLASSIFICATION	5.200436331044593E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999872961754201	WITHOUT_CLASSIFICATION	1.2703824579868087E-5	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999994799563669	WITHOUT_CLASSIFICATION	5.200436331044593E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999994799563669	WITHOUT_CLASSIFICATION	5.200436331044593E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999994799563669	WITHOUT_CLASSIFICATION	5.200436331044593E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999994799563669	WITHOUT_CLASSIFICATION	5.200436331044593E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999994799563669	WITHOUT_CLASSIFICATION	5.200436331044593E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999994799563669	WITHOUT_CLASSIFICATION	5.200436331044593E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999872961754201	WITHOUT_CLASSIFICATION	1.2703824579868087E-5	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999872961754201	WITHOUT_CLASSIFICATION	1.2703824579868087E-5	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999872961754201	WITHOUT_CLASSIFICATION	1.2703824579868087E-5	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999872961754201	WITHOUT_CLASSIFICATION	1.2703824579868087E-5	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999872961754201	WITHOUT_CLASSIFICATION	1.2703824579868087E-5	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999872961754201	WITHOUT_CLASSIFICATION	1.2703824579868087E-5	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9999220903428012	WITHOUT_CLASSIFICATION	7.790965719872199E-5	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.999971932815555	WITHOUT_CLASSIFICATION	2.806718444499667E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999733759066839	WITHOUT_CLASSIFICATION	2.662409331606777E-5	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998798664201549	WITHOUT_CLASSIFICATION	1.2013357984506272E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.999999651760956	WITHOUT_CLASSIFICATION	3.4823904402002526E-7	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.999816309028024	WITHOUT_CLASSIFICATION	1.8369097197603587E-4	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999985624757357	WITHOUT_CLASSIFICATION	1.43752426431037E-6	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999981702000013	WITHOUT_CLASSIFICATION	1.8297999986496461E-6	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999884489315817	WITHOUT_CLASSIFICATION	1.1551068418361537E-5	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999980185697115	WITHOUT_CLASSIFICATION	1.9814302884357827E-6	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999806176176167	WITHOUT_CLASSIFICATION	1.9382382383359614E-5	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999954599953486	WITHOUT_CLASSIFICATION	4.54000465147132E-6	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999974134882487	WITHOUT_CLASSIFICATION	2.5865117512994034E-6	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999999949517232	WITHOUT_CLASSIFICATION	5.048276867158567E-9	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999998274082417	WITHOUT_CLASSIFICATION	1.7259175823284143E-7	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999979032127798	WITHOUT_CLASSIFICATION	2.096787220240402E-6	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999997323600736	WITHOUT_CLASSIFICATION	2.6763992639892475E-7	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999992063426918	WITHOUT_CLASSIFICATION	7.936573083487882E-7	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999964537468984	WITHOUT_CLASSIFICATION	3.5462531015637735E-6	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999943484126694	WITHOUT_CLASSIFICATION	5.651587330532537E-6	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999778471434521	WITHOUT_CLASSIFICATION	2.2152856547962333E-5	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999997742054826	WITHOUT_CLASSIFICATION	2.2579451740151136E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999993653650375	WITHOUT_CLASSIFICATION	6.346349624984497E-7	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9999981279857785	WITHOUT_CLASSIFICATION	1.8720142216029658E-6	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9998980283924848	WITHOUT_CLASSIFICATION	1.0197160751522471E-4	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999999180723351	WITHOUT_CLASSIFICATION	8.192766485916458E-8	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999995586171602	WITHOUT_CLASSIFICATION	4.4138283983111066E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999545399384069	WITHOUT_CLASSIFICATION	4.546006159313689E-5	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999881450780129	WITHOUT_CLASSIFICATION	1.1854921987170037E-5	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999937294888834	WITHOUT_CLASSIFICATION	6.270511116633044E-6	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999992367085844	WITHOUT_CLASSIFICATION	7.632914156449589E-7	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.999998378608265	WITHOUT_CLASSIFICATION	1.6213917350397786E-6	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999857022597077	WITHOUT_CLASSIFICATION	1.4297740292211488E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999993608823622	WITHOUT_CLASSIFICATION	6.391176378693363E-7	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999975099949479	WITHOUT_CLASSIFICATION	2.49000505216188E-6	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999993044829194	WITHOUT_CLASSIFICATION	6.9551708056825E-7	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9998118395151543	WITHOUT_CLASSIFICATION	1.881604848457343E-4	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999537332430225	WITHOUT_CLASSIFICATION	4.626675697745453E-5	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999997735344374	WITHOUT_CLASSIFICATION	2.264655626834828E-7	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999929989203887	WITHOUT_CLASSIFICATION	7.0010796113382554E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999978701391032	WITHOUT_CLASSIFICATION	2.1298608968611574E-6	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.999998760625604	WITHOUT_CLASSIFICATION	1.2393743959712608E-6	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999975796898507	WITHOUT_CLASSIFICATION	2.420310149199137E-6	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999725774503853	WITHOUT_CLASSIFICATION	2.7422549614824697E-5	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999725774503853	WITHOUT_CLASSIFICATION	2.7422549614824697E-5	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.999999599610034	WITHOUT_CLASSIFICATION	4.0038996598708104E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.999999599610034	WITHOUT_CLASSIFICATION	4.0038996598708104E-7	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999862095235141	WITHOUT_CLASSIFICATION	1.379047648587543E-5	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999862095235141	WITHOUT_CLASSIFICATION	1.379047648587543E-5	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999831247310603	WITHOUT_CLASSIFICATION	1.6875268939719504E-5	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999999249124091	WITHOUT_CLASSIFICATION	7.508759094835295E-8	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999964286872245	WITHOUT_CLASSIFICATION	3.5713127755055676E-6	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999987891721236	WITHOUT_CLASSIFICATION	1.2108278763497052E-6	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999954380338202	WITHOUT_CLASSIFICATION	4.561966179823505E-6	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9999991560672638	WITHOUT_CLASSIFICATION	8.439327363161817E-7	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999996000480877	WITHOUT_CLASSIFICATION	3.999519121900594E-7	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999954616393522	WITHOUT_CLASSIFICATION	4.538360647811558E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999961597838065	WITHOUT_CLASSIFICATION	3.8402161934476695E-6	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999979757357088	WITHOUT_CLASSIFICATION	2.0242642912720877E-6	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999980830175534	WITHOUT_CLASSIFICATION	1.9169824465845587E-6	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999918575509689	WITHOUT_CLASSIFICATION	8.142449031131033E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9999703018253793	WITHOUT_CLASSIFICATION	2.9698174620666504E-5	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9999565002816987	WITHOUT_CLASSIFICATION	4.349971830130344E-5	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999826699051834	WITHOUT_CLASSIFICATION	1.7330094816628058E-5	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999980582116004	WITHOUT_CLASSIFICATION	1.941788399621151E-6	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999057667599413	WITHOUT_CLASSIFICATION	9.423324005883891E-5	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999732558518083	WITHOUT_CLASSIFICATION	2.674414819168321E-5	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999662632988169	WITHOUT_CLASSIFICATION	3.3736701183034477E-5	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.999990951111114	WITHOUT_CLASSIFICATION	9.04888888590321E-6	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999931852066046	WITHOUT_CLASSIFICATION	6.814793395327052E-6	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9999931752420186	WITHOUT_CLASSIFICATION	6.824757981361446E-6	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.999987273108558	WITHOUT_CLASSIFICATION	1.2726891441958487E-5	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999573126244652	WITHOUT_CLASSIFICATION	4.268737553495378E-5	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999998675707424	WITHOUT_CLASSIFICATION	1.3242925752504728E-7	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999249397633689	WITHOUT_CLASSIFICATION	7.506023663098349E-5	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999974913285883	WITHOUT_CLASSIFICATION	2.508671411690971E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999991854952179	WITHOUT_CLASSIFICATION	8.145047820933703E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999991854952179	WITHOUT_CLASSIFICATION	8.145047820933703E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999991854952179	WITHOUT_CLASSIFICATION	8.145047820933703E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999994842214108	WITHOUT_CLASSIFICATION	5.157785891930344E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999994842214108	WITHOUT_CLASSIFICATION	5.157785891930344E-7	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999997833746008	WITHOUT_CLASSIFICATION	2.1662539917248E-7	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999997833746008	WITHOUT_CLASSIFICATION	2.1662539917248E-7	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999999338606398	WITHOUT_CLASSIFICATION	6.61393602797939E-8	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9996831224962365	WITHOUT_CLASSIFICATION	3.168775037634956E-4	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999997222736755	WITHOUT_CLASSIFICATION	2.777263245066837E-7	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999861810564417	WITHOUT_CLASSIFICATION	1.3818943558240135E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999991854952179	WITHOUT_CLASSIFICATION	8.145047820933703E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999991854952179	WITHOUT_CLASSIFICATION	8.145047820933703E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999991854952179	WITHOUT_CLASSIFICATION	8.145047820933703E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999994842214108	WITHOUT_CLASSIFICATION	5.157785891930344E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999994842214108	WITHOUT_CLASSIFICATION	5.157785891930344E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999994842214108	WITHOUT_CLASSIFICATION	5.157785891930344E-7	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999997833746008	WITHOUT_CLASSIFICATION	2.1662539917248E-7	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999997833746008	WITHOUT_CLASSIFICATION	2.1662539917248E-7	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999993051621695	WITHOUT_CLASSIFICATION	6.94837830399478E-7	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999997007257868	WITHOUT_CLASSIFICATION	2.9927421318488335E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999975999093172	WITHOUT_CLASSIFICATION	2.40009068277195E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999975999093172	WITHOUT_CLASSIFICATION	2.40009068277195E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999975999093172	WITHOUT_CLASSIFICATION	2.40009068277195E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999975999093172	WITHOUT_CLASSIFICATION	2.40009068277195E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999975999093172	WITHOUT_CLASSIFICATION	2.40009068277195E-6	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999996246805741	WITHOUT_CLASSIFICATION	3.7531942580076915E-7	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999987355656633	WITHOUT_CLASSIFICATION	1.2644343367288765E-6	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9998776355565036	WITHOUT_CLASSIFICATION	1.2236444349634603E-4	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.999998175620295	WITHOUT_CLASSIFICATION	1.8243797049414103E-6	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.999999364844534	WITHOUT_CLASSIFICATION	6.351554660318265E-7	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999875894769806	WITHOUT_CLASSIFICATION	1.2410523019351425E-5	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9998901388623488	WITHOUT_CLASSIFICATION	1.0986113765118987E-4	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999847140836446	WITHOUT_CLASSIFICATION	1.5285916355278513E-5	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.999999853132237	WITHOUT_CLASSIFICATION	1.468677629878767E-7	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999772290379233	WITHOUT_CLASSIFICATION	2.2770962076646912E-5	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9998972462750222	WITHOUT_CLASSIFICATION	1.0275372497775606E-4	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999974785975166	WITHOUT_CLASSIFICATION	2.521402483454775E-6	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9999223341545787	WITHOUT_CLASSIFICATION	7.766584542137473E-5	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999826987657743	WITHOUT_CLASSIFICATION	1.73012342257655E-5	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9998979888675412	WITHOUT_CLASSIFICATION	1.020111324588295E-4	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.999988916545464	WITHOUT_CLASSIFICATION	1.1083454535975184E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.999988916545464	WITHOUT_CLASSIFICATION	1.1083454535975184E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.999988916545464	WITHOUT_CLASSIFICATION	1.1083454535975184E-5	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999947433927246	WITHOUT_CLASSIFICATION	5.2566072753622735E-6	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999947499649224	WITHOUT_CLASSIFICATION	5.250035077610695E-6	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999986300182195	WITHOUT_CLASSIFICATION	1.3699817803831716E-6	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.999986341781865	WITHOUT_CLASSIFICATION	1.3658218134949242E-5	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999985242617557	WITHOUT_CLASSIFICATION	1.4757382442604365E-6	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.999999493364475	WITHOUT_CLASSIFICATION	5.066355250899657E-7	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999995705960317	WITHOUT_CLASSIFICATION	4.294039682388402E-7	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999996754636703	WITHOUT_CLASSIFICATION	3.2453632967384996E-7	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999979182164679	WITHOUT_CLASSIFICATION	2.081783532051636E-6	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999999170518237	WITHOUT_CLASSIFICATION	8.294817627745049E-8	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999998986225355	WITHOUT_CLASSIFICATION	1.0137746462871342E-7	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999999480720325	WITHOUT_CLASSIFICATION	5.1927967504445455E-8	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999998870811417	WITHOUT_CLASSIFICATION	1.1291885825552007E-7	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999999723793546	WITHOUT_CLASSIFICATION	2.762064548350901E-8	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999999780823291	WITHOUT_CLASSIFICATION	2.1917670897468613E-8	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999982478327114	WITHOUT_CLASSIFICATION	1.7521672885060743E-6	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999979989180146	WITHOUT_CLASSIFICATION	2.0010819854710058E-6	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999996451376152	WITHOUT_CLASSIFICATION	3.548623848518005E-7	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999967281654786	WITHOUT_CLASSIFICATION	3.2718345214815487E-6	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999913726200905	WITHOUT_CLASSIFICATION	8.62737990957276E-6	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9997245125857582	WITHOUT_CLASSIFICATION	2.7548741424176604E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999945977394069	WITHOUT_CLASSIFICATION	5.4022605930751145E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9999987812755288	WITHOUT_CLASSIFICATION	1.2187244713473958E-6	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999997038889354	WITHOUT_CLASSIFICATION	2.961110644601169E-7	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.999997516416342	WITHOUT_CLASSIFICATION	2.483583658024091E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999961169073517	WITHOUT_CLASSIFICATION	3.883092648310723E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999989282640586	WITHOUT_CLASSIFICATION	1.0717359414301626E-6	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999972152901004	WITHOUT_CLASSIFICATION	2.784709899587643E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999987291439039	WITHOUT_CLASSIFICATION	1.2708560961475237E-6	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999805451157529	WITHOUT_CLASSIFICATION	1.945488424717991E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9999486292337347	WITHOUT_CLASSIFICATION	5.1370766265339555E-5	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999749417847846	WITHOUT_CLASSIFICATION	2.5058215215326368E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.999978620512224	WITHOUT_CLASSIFICATION	2.137948777593173E-5	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9999680315930615	WITHOUT_CLASSIFICATION	3.1968406938595854E-5	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9999714014606266	WITHOUT_CLASSIFICATION	2.859853937351902E-5	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9999735752401299	WITHOUT_CLASSIFICATION	2.6424759870093375E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999997568754433	WITHOUT_CLASSIFICATION	2.4312455671280616E-7	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999977876317505	WITHOUT_CLASSIFICATION	2.2123682495645416E-6	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999983730128429	WITHOUT_CLASSIFICATION	1.6269871570238522E-6	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9998209723944694	WITHOUT_CLASSIFICATION	1.7902760553065703E-4	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.998840029266145	WITHOUT_CLASSIFICATION	0.001159970733855065	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9127717852714399	WITHOUT_CLASSIFICATION	0.08722821472856016	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.999990787040793	WITHOUT_CLASSIFICATION	9.212959206951517E-6	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999583292098791	WITHOUT_CLASSIFICATION	4.1670790120828464E-5	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9998512693392552	WITHOUT_CLASSIFICATION	1.487306607447756E-4	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9990280802758984	WITHOUT_CLASSIFICATION	9.719197241015785E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9996996457990505	WITHOUT_CLASSIFICATION	3.003542009495833E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9996996457990505	WITHOUT_CLASSIFICATION	3.003542009495833E-4	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999989645557587	WITHOUT_CLASSIFICATION	1.0354442412867661E-6	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999738048592959	WITHOUT_CLASSIFICATION	2.6195140704152843E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9989009429651492	WITHOUT_CLASSIFICATION	0.00109905703485083	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999726881011364	WITHOUT_CLASSIFICATION	2.7311898863657453E-5	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999891582964189	WITHOUT_CLASSIFICATION	1.08417035811613E-5	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.999999594895195	WITHOUT_CLASSIFICATION	4.05104805084764E-7	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999995053694603	WITHOUT_CLASSIFICATION	4.946305398666702E-7	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999893935290263	WITHOUT_CLASSIFICATION	1.0606470973608315E-5	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999993702725651	WITHOUT_CLASSIFICATION	6.297274348415895E-7	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999884510777869	WITHOUT_CLASSIFICATION	1.1548922213200306E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999579707645	WITHOUT_CLASSIFICATION	4.2029235475498956E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999579707645	WITHOUT_CLASSIFICATION	4.2029235475498956E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999579707645	WITHOUT_CLASSIFICATION	4.2029235475498956E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999579707645	WITHOUT_CLASSIFICATION	4.2029235475498956E-8	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999975175713779	WITHOUT_CLASSIFICATION	2.4824286220169585E-6	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.999994700640365	WITHOUT_CLASSIFICATION	5.2993596350084905E-6	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999947485622435	WITHOUT_CLASSIFICATION	5.251437756451483E-6	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999983481835962	WITHOUT_CLASSIFICATION	1.651816403871428E-6	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9999940877691721	WITHOUT_CLASSIFICATION	5.912230827941652E-6	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9985981132296731	WITHOUT_CLASSIFICATION	0.0014018867703269261	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9998674851246734	WITHOUT_CLASSIFICATION	1.325148753265265E-4	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999889758203578	WITHOUT_CLASSIFICATION	1.1024179642062187E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999889758203578	WITHOUT_CLASSIFICATION	1.1024179642062187E-5	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999195764115618	WITHOUT_CLASSIFICATION	8.042358843823381E-5	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999968252895239	WITHOUT_CLASSIFICATION	3.1747104760813865E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999991546296019	WITHOUT_CLASSIFICATION	8.453703981578052E-7	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.999957806380088	WITHOUT_CLASSIFICATION	4.21936199118764E-5	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.999957806380088	WITHOUT_CLASSIFICATION	4.21936199118764E-5	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9999756791220437	WITHOUT_CLASSIFICATION	2.4320877956276694E-5	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.999995035273649	WITHOUT_CLASSIFICATION	4.964726351099256E-6	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.999995035273649	WITHOUT_CLASSIFICATION	4.964726351099256E-6	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9971349969406119	WITHOUT_CLASSIFICATION	0.0028650030593881572	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999945693268191	WITHOUT_CLASSIFICATION	5.430673180930768E-6	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9971165795634301	WITHOUT_CLASSIFICATION	0.0028834204365699974	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9991093243184217	WITHOUT_CLASSIFICATION	8.906756815781839E-4	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9999891923641728	WITHOUT_CLASSIFICATION	1.0807635827068425E-5	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999995083395938	WITHOUT_CLASSIFICATION	4.91660406261464E-7	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9999922506614438	WITHOUT_CLASSIFICATION	7.74933855614012E-6	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999864866106128	WITHOUT_CLASSIFICATION	1.3513389387177962E-5	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999990782455067	WITHOUT_CLASSIFICATION	9.217544932063567E-7	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999988313125031	WITHOUT_CLASSIFICATION	1.168687496955066E-6	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999986522327186	WITHOUT_CLASSIFICATION	1.3477672815155538E-6	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999997136713488	WITHOUT_CLASSIFICATION	2.863286511937495E-7	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9999876726040682	WITHOUT_CLASSIFICATION	1.2327395931878838E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9999869553188885	WITHOUT_CLASSIFICATION	1.304468111156152E-5	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999851926006765	WITHOUT_CLASSIFICATION	1.4807399323447985E-5	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.999982368746935	WITHOUT_CLASSIFICATION	1.763125306497537E-5	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999920642801546	WITHOUT_CLASSIFICATION	7.935719845430738E-6	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999998631670269	WITHOUT_CLASSIFICATION	1.368329731053362E-7	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999979797089369	WITHOUT_CLASSIFICATION	2.020291062988754E-6	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9998697024705265	WITHOUT_CLASSIFICATION	1.3029752947357162E-4	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9993302458955977	WITHOUT_CLASSIFICATION	6.697541044022636E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9999994914118406	WITHOUT_CLASSIFICATION	5.085881594848856E-7	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999981615583525	WITHOUT_CLASSIFICATION	1.838441647418184E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.999937590140469	WITHOUT_CLASSIFICATION	6.240985953100875E-5	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9998093716867837	WITHOUT_CLASSIFICATION	1.9062831321628134E-4	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9999942877696487	WITHOUT_CLASSIFICATION	5.712230351359056E-6	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999999034144186	WITHOUT_CLASSIFICATION	9.658558150150083E-8	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999999087106369	WITHOUT_CLASSIFICATION	9.128936311648325E-8	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999988589972972	WITHOUT_CLASSIFICATION	1.14100270276772E-6	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999990431185007	WITHOUT_CLASSIFICATION	9.568814993115785E-7	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999905075751823	WITHOUT_CLASSIFICATION	9.492424817736673E-6	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999988479720353	WITHOUT_CLASSIFICATION	1.152027964759053E-6	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.9183752991606643	WITHOUT_CLASSIFICATION	0.08162470083933562	DEFECT
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999816807951241	WITHOUT_CLASSIFICATION	1.831920487586926E-5	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999105386053241	WITHOUT_CLASSIFICATION	8.94613946758885E-5	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999248287804381	WITHOUT_CLASSIFICATION	7.517121956201538E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999840960544598	WITHOUT_CLASSIFICATION	1.590394554023883E-5	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999973573150576	WITHOUT_CLASSIFICATION	2.6426849423542918E-6	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999960978469785	WITHOUT_CLASSIFICATION	3.902153021518077E-6	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999248287804381	WITHOUT_CLASSIFICATION	7.517121956201538E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999840960544598	WITHOUT_CLASSIFICATION	1.590394554023883E-5	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999944355371999	WITHOUT_CLASSIFICATION	5.5644628001194795E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.999998420988267	WITHOUT_CLASSIFICATION	1.579011733037638E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.999998420988267	WITHOUT_CLASSIFICATION	1.579011733037638E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999366032764035	WITHOUT_CLASSIFICATION	6.339672359646644E-5	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9986231795084622	WITHOUT_CLASSIFICATION	0.0013768204915377595	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999895831592838	WITHOUT_CLASSIFICATION	1.0416840716157884E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.99999381546047	WITHOUT_CLASSIFICATION	6.18453953007129E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999764580882861	WITHOUT_CLASSIFICATION	2.354191171389274E-5	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9990315357755162	WITHOUT_CLASSIFICATION	9.684642244837614E-4	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.999993384845252	WITHOUT_CLASSIFICATION	6.6151547479099735E-6	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999973091037065	WITHOUT_CLASSIFICATION	2.690896293513069E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999996489734563	WITHOUT_CLASSIFICATION	3.510265437522612E-7	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999890739766286	WITHOUT_CLASSIFICATION	1.0926023371371961E-5	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9999991525976408	WITHOUT_CLASSIFICATION	8.474023591249791E-7	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999989319897489	WITHOUT_CLASSIFICATION	1.06801025120953E-6	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9998101792728139	WITHOUT_CLASSIFICATION	1.8982072718599205E-4	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999997921275139	WITHOUT_CLASSIFICATION	2.0787248610283188E-7	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999997921275139	WITHOUT_CLASSIFICATION	2.0787248610283188E-7	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999952987241953	WITHOUT_CLASSIFICATION	4.701275804578156E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999952987241953	WITHOUT_CLASSIFICATION	4.701275804578156E-6	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999992568382899	WITHOUT_CLASSIFICATION	7.431617100562257E-7	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999997747765818	WITHOUT_CLASSIFICATION	2.2522341819344783E-7	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999987014844424	WITHOUT_CLASSIFICATION	1.2985155576821886E-6	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999873615307138	WITHOUT_CLASSIFICATION	1.2638469286315442E-5	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999979775413788	WITHOUT_CLASSIFICATION	2.0224586212277606E-6	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999973950793849	WITHOUT_CLASSIFICATION	2.60492061502121E-6	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999895831592838	WITHOUT_CLASSIFICATION	1.0416840716157884E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.99999381546047	WITHOUT_CLASSIFICATION	6.18453953007129E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999996489734563	WITHOUT_CLASSIFICATION	3.510265437522612E-7	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999890739766286	WITHOUT_CLASSIFICATION	1.0926023371371961E-5	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999877259780693	WITHOUT_CLASSIFICATION	1.2274021930758216E-5	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999991128070169	WITHOUT_CLASSIFICATION	8.871929829998212E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999845919201337	WITHOUT_CLASSIFICATION	1.5408079866399503E-5	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999985359125348	WITHOUT_CLASSIFICATION	1.4640874651563503E-6	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999985348684665	WITHOUT_CLASSIFICATION	1.46513153349961E-6	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999976970430836	WITHOUT_CLASSIFICATION	2.302956916359685E-6	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9994323011699842	WITHOUT_CLASSIFICATION	5.676988300157983E-4	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999908174454153	WITHOUT_CLASSIFICATION	9.18255458478355E-6	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999994719430949	WITHOUT_CLASSIFICATION	5.280569051096994E-7	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999976164980375	WITHOUT_CLASSIFICATION	2.383501962399519E-6	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9982722918154235	WITHOUT_CLASSIFICATION	0.001727708184576543	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999964198859052	WITHOUT_CLASSIFICATION	3.5801140948381403E-6	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999998172929375	WITHOUT_CLASSIFICATION	1.8270706234824524E-7	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9999273257633157	WITHOUT_CLASSIFICATION	7.267423668441389E-5	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.999648182156645	WITHOUT_CLASSIFICATION	3.518178433550288E-4	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999666453767827	WITHOUT_CLASSIFICATION	3.335462321724365E-5	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999824302459283	WITHOUT_CLASSIFICATION	1.7569754071800513E-5	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9999789029360088	WITHOUT_CLASSIFICATION	2.109706399124307E-5	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.999999609522552	WITHOUT_CLASSIFICATION	3.904774480059829E-7	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999987056114019	WITHOUT_CLASSIFICATION	1.2943885981047725E-6	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999987641730568	WITHOUT_CLASSIFICATION	1.235826943279695E-6	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999987641730568	WITHOUT_CLASSIFICATION	1.235826943279695E-6	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999537945783848	WITHOUT_CLASSIFICATION	4.62054216151788E-5	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999918824309362	WITHOUT_CLASSIFICATION	8.117569063771476E-6	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.940903310323064	WITHOUT_CLASSIFICATION	0.05909668967693597	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999922302054526	WITHOUT_CLASSIFICATION	7.769794547323397E-6	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999922302054526	WITHOUT_CLASSIFICATION	7.769794547323397E-6	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999845919201337	WITHOUT_CLASSIFICATION	1.5408079866399503E-5	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999870022558089	WITHOUT_CLASSIFICATION	1.2997744191004776E-5	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999938771123116	WITHOUT_CLASSIFICATION	6.122887688375212E-6	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999919143958698	WITHOUT_CLASSIFICATION	8.085604130172715E-6	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999903115275546	WITHOUT_CLASSIFICATION	9.688472445466003E-6	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999977173085842	WITHOUT_CLASSIFICATION	2.282691415884985E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999658826187872	WITHOUT_CLASSIFICATION	3.4117381212815064E-5	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999956036439723	WITHOUT_CLASSIFICATION	4.396356027687885E-6	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999983737773473	WITHOUT_CLASSIFICATION	1.6262226526189357E-6	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999995311634181	WITHOUT_CLASSIFICATION	4.688365819189347E-7	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999753153715044	WITHOUT_CLASSIFICATION	2.4684628495608482E-5	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9998936330874204	WITHOUT_CLASSIFICATION	1.0636691257965371E-4	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9998249605351374	WITHOUT_CLASSIFICATION	1.7503946486261546E-4	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9999986770974459	WITHOUT_CLASSIFICATION	1.322902554075364E-6	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999545799460802	WITHOUT_CLASSIFICATION	4.5420053919875586E-5	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999985649589259	WITHOUT_CLASSIFICATION	1.435041074110242E-6	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999991630251096	WITHOUT_CLASSIFICATION	8.369748904956014E-7	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999992001262775	WITHOUT_CLASSIFICATION	7.998737224044101E-7	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999901245619098	WITHOUT_CLASSIFICATION	9.875438090098023E-6	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999730862287234	WITHOUT_CLASSIFICATION	2.6913771276598647E-5	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9998734680438617	WITHOUT_CLASSIFICATION	1.2653195613826932E-4	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999947505268135	WITHOUT_CLASSIFICATION	5.249473186476354E-6	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9998874252329161	WITHOUT_CLASSIFICATION	1.1257476708394643E-4	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999950860322834	WITHOUT_CLASSIFICATION	4.913967716530993E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999997450769083	WITHOUT_CLASSIFICATION	2.5492309180686855E-7	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999963027707147	WITHOUT_CLASSIFICATION	3.697229285262454E-6	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.999998940296034	WITHOUT_CLASSIFICATION	1.059703966051204E-6	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999991253996927	WITHOUT_CLASSIFICATION	8.746003072708852E-7	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9983132263598659	WITHOUT_CLASSIFICATION	0.0016867736401341015	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9997870783586705	WITHOUT_CLASSIFICATION	2.1292164132960854E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999986579801983	WITHOUT_CLASSIFICATION	1.3420198017011533E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999986579801983	WITHOUT_CLASSIFICATION	1.3420198017011533E-6	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999998540293542	WITHOUT_CLASSIFICATION	1.4597064573407188E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999997395423957	WITHOUT_CLASSIFICATION	2.6045760430208015E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999997395423957	WITHOUT_CLASSIFICATION	2.6045760430208015E-7	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9998507029618413	WITHOUT_CLASSIFICATION	1.4929703815873383E-4	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9998507029618413	WITHOUT_CLASSIFICATION	1.4929703815873383E-4	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999974908939945	WITHOUT_CLASSIFICATION	2.509106005454069E-6	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999993172774799	WITHOUT_CLASSIFICATION	6.827225199819621E-7	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999780922553145	WITHOUT_CLASSIFICATION	2.1907744685443307E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.999995319801154	WITHOUT_CLASSIFICATION	4.680198846053038E-6	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999998057317376	WITHOUT_CLASSIFICATION	1.9426826235793458E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978487386029	WITHOUT_CLASSIFICATION	2.151261397147041E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978487386029	WITHOUT_CLASSIFICATION	2.151261397147041E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999997450769083	WITHOUT_CLASSIFICATION	2.5492309180686855E-7	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999997450769083	WITHOUT_CLASSIFICATION	2.5492309180686855E-7	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999997450769083	WITHOUT_CLASSIFICATION	2.5492309180686855E-7	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999963027707147	WITHOUT_CLASSIFICATION	3.697229285262454E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999986579801983	WITHOUT_CLASSIFICATION	1.3420198017011533E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999986579801983	WITHOUT_CLASSIFICATION	1.3420198017011533E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999986579801983	WITHOUT_CLASSIFICATION	1.3420198017011533E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999974908939945	WITHOUT_CLASSIFICATION	2.509106005454069E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999974908939945	WITHOUT_CLASSIFICATION	2.509106005454069E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999974908939945	WITHOUT_CLASSIFICATION	2.509106005454069E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.999995319801154	WITHOUT_CLASSIFICATION	4.680198846053038E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.999995319801154	WITHOUT_CLASSIFICATION	4.680198846053038E-6	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999817721919892	WITHOUT_CLASSIFICATION	1.8227808010838177E-5	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999833503369462	WITHOUT_CLASSIFICATION	1.6649663053844837E-5	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999956704143016	WITHOUT_CLASSIFICATION	4.329585698445208E-6	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.720743016148847	DEFECT	0.2792569838511531	WITHOUT_CLASSIFICATION
// no digits, error	WITHOUT_CLASSIFICATION	0.9999994275887004	WITHOUT_CLASSIFICATION	5.724112996162908E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999963163610991	WITHOUT_CLASSIFICATION	3.6836389008595977E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999963163610991	WITHOUT_CLASSIFICATION	3.6836389008595977E-6	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999993391224893	WITHOUT_CLASSIFICATION	6.608775106702363E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999658826187872	WITHOUT_CLASSIFICATION	3.4117381212815064E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999658826187872	WITHOUT_CLASSIFICATION	3.4117381212815064E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999658826187872	WITHOUT_CLASSIFICATION	3.4117381212815064E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999658826187872	WITHOUT_CLASSIFICATION	3.4117381212815064E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999658826187872	WITHOUT_CLASSIFICATION	3.4117381212815064E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999993880991527	WITHOUT_CLASSIFICATION	6.119008473182637E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999993880991527	WITHOUT_CLASSIFICATION	6.119008473182637E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999993880991527	WITHOUT_CLASSIFICATION	6.119008473182637E-7	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999999228135121	WITHOUT_CLASSIFICATION	7.718648790821597E-8	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999998659057521	WITHOUT_CLASSIFICATION	1.340942479385823E-7	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999963027707147	WITHOUT_CLASSIFICATION	3.697229285262454E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999974908939945	WITHOUT_CLASSIFICATION	2.509106005454069E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999974908939945	WITHOUT_CLASSIFICATION	2.509106005454069E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999658826187872	WITHOUT_CLASSIFICATION	3.4117381212815064E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999658826187872	WITHOUT_CLASSIFICATION	3.4117381212815064E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999993880991527	WITHOUT_CLASSIFICATION	6.119008473182637E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999993391224893	WITHOUT_CLASSIFICATION	6.608775106702363E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999232616972304	WITHOUT_CLASSIFICATION	7.673830276951803E-5	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999995996251644	WITHOUT_CLASSIFICATION	4.003748356568454E-7	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999617589062675	WITHOUT_CLASSIFICATION	3.824109373245355E-5	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999972375580958	WITHOUT_CLASSIFICATION	2.7624419043075144E-6	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999995217682212	WITHOUT_CLASSIFICATION	4.782317788699098E-7	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999999056603608	WITHOUT_CLASSIFICATION	9.433963918596014E-8	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999555149640308	WITHOUT_CLASSIFICATION	4.448503596926249E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999956158099595	WITHOUT_CLASSIFICATION	4.384190040439872E-6	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999998404216625	WITHOUT_CLASSIFICATION	1.59578337551798E-7	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999999629555267	WITHOUT_CLASSIFICATION	3.704447321812763E-8	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.999964300557989	WITHOUT_CLASSIFICATION	3.569944201096738E-5	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999987929337926	WITHOUT_CLASSIFICATION	1.2070662073739307E-6	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999920646697831	WITHOUT_CLASSIFICATION	7.935330216948103E-6	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999956806582566	WITHOUT_CLASSIFICATION	4.319341743309525E-6	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999996071760586	WITHOUT_CLASSIFICATION	3.9282394138373594E-7	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9997113657623455	WITHOUT_CLASSIFICATION	2.886342376545249E-4	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999998522597234	WITHOUT_CLASSIFICATION	1.477402765145048E-7	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999998467379342	WITHOUT_CLASSIFICATION	1.5326206590507017E-7	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999844834607279	WITHOUT_CLASSIFICATION	1.5516539272102588E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999999225989276	WITHOUT_CLASSIFICATION	7.740107247752326E-8	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999663106280279	WITHOUT_CLASSIFICATION	3.368937197212683E-5	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9998823202313413	WITHOUT_CLASSIFICATION	1.1767976865875866E-4	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999996535741623	WITHOUT_CLASSIFICATION	3.464258376149322E-7	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999985839187864	WITHOUT_CLASSIFICATION	1.4160812135812478E-6	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999743411082461	WITHOUT_CLASSIFICATION	2.565889175392085E-5	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999707770138591	WITHOUT_CLASSIFICATION	2.9222986140942504E-5	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999981522999011	WITHOUT_CLASSIFICATION	1.847700098858465E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999990269645179	WITHOUT_CLASSIFICATION	9.730354821038187E-7	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999996526605581	WITHOUT_CLASSIFICATION	3.4733944194036764E-7	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.999988161414781	WITHOUT_CLASSIFICATION	1.1838585219012038E-5	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.999999874320502	WITHOUT_CLASSIFICATION	1.2567949804615176E-7	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999997869965769	WITHOUT_CLASSIFICATION	2.130034230903786E-7	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999877931911937	WITHOUT_CLASSIFICATION	1.2206808806413225E-5	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999997201011557	WITHOUT_CLASSIFICATION	2.798988443524298E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999232616972304	WITHOUT_CLASSIFICATION	7.673830276951803E-5	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999999409959968	WITHOUT_CLASSIFICATION	5.900400320282979E-8	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.999998901934081	WITHOUT_CLASSIFICATION	1.0980659189624087E-6	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9999954357498101	WITHOUT_CLASSIFICATION	4.5642501899413265E-6	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999997627273935	WITHOUT_CLASSIFICATION	2.37272606453084E-7	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999997627273935	WITHOUT_CLASSIFICATION	2.37272606453084E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999985201609487	WITHOUT_CLASSIFICATION	1.4798390513115765E-6	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999985201609487	WITHOUT_CLASSIFICATION	1.4798390513115765E-6	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.999999890617416	WITHOUT_CLASSIFICATION	1.0938258399577362E-7	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9997519417600633	WITHOUT_CLASSIFICATION	2.4805823993671075E-4	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999928736369009	WITHOUT_CLASSIFICATION	7.126363099017166E-6	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999960766190726	WITHOUT_CLASSIFICATION	3.923380927263506E-6	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999999857085368	WITHOUT_CLASSIFICATION	1.4291463255839938E-8	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999810112997563	WITHOUT_CLASSIFICATION	1.8988700243714794E-5	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999557317190134	WITHOUT_CLASSIFICATION	4.4268280986590566E-5	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9998541923862709	WITHOUT_CLASSIFICATION	1.4580761372916191E-4	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999909738848418	WITHOUT_CLASSIFICATION	9.026115158107591E-6	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999903460390628	WITHOUT_CLASSIFICATION	9.653960937204409E-6	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999991253580107	WITHOUT_CLASSIFICATION	8.746419894221689E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999963922452613	WITHOUT_CLASSIFICATION	3.6077547386875937E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999963922452613	WITHOUT_CLASSIFICATION	3.6077547386875937E-6	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999973949992794	WITHOUT_CLASSIFICATION	2.6050007205206963E-6	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999963897609306	WITHOUT_CLASSIFICATION	3.610239069256797E-6	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.999996758040174	WITHOUT_CLASSIFICATION	3.241959826034701E-6	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.999996758040174	WITHOUT_CLASSIFICATION	3.241959826034701E-6	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999499806525813	WITHOUT_CLASSIFICATION	5.00193474187024E-5	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999994960966521	WITHOUT_CLASSIFICATION	5.039033479352343E-7	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999981790572502	WITHOUT_CLASSIFICATION	1.8209427497577588E-6	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.99999472385083	WITHOUT_CLASSIFICATION	5.276149170046644E-6	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999988799803379	WITHOUT_CLASSIFICATION	1.1200196621144704E-6	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999688810163614	WITHOUT_CLASSIFICATION	3.111898363862034E-5	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999985117220033	WITHOUT_CLASSIFICATION	1.4882779967379982E-6	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999998409719196	WITHOUT_CLASSIFICATION	1.5902808043307496E-7	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9999985264936587	WITHOUT_CLASSIFICATION	1.4735063412900116E-6	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999988417340566	WITHOUT_CLASSIFICATION	1.1582659433478203E-6	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999998904756984	WITHOUT_CLASSIFICATION	1.095243017059545E-7	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999906279058423	WITHOUT_CLASSIFICATION	9.372094157736132E-6	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999995208595854	WITHOUT_CLASSIFICATION	4.791404145487436E-7	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999988746762615	WITHOUT_CLASSIFICATION	1.1253237385780909E-6	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999996184485275	WITHOUT_CLASSIFICATION	3.815514726229633E-7	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9999558398222962	WITHOUT_CLASSIFICATION	4.416017770381545E-5	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999969328083218	WITHOUT_CLASSIFICATION	3.0671916780608035E-6	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999991289253026	WITHOUT_CLASSIFICATION	8.71074697292805E-7	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999995393094455	WITHOUT_CLASSIFICATION	4.606905544400643E-7	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999976400917926	WITHOUT_CLASSIFICATION	2.359908207352673E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9968793160938355	WITHOUT_CLASSIFICATION	0.0031206839061644104	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999559407280967	WITHOUT_CLASSIFICATION	4.405927190326787E-5	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999792042894847	WITHOUT_CLASSIFICATION	2.079571051528035E-5	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999998685785977	WITHOUT_CLASSIFICATION	1.3142140234073134E-7	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999996286544007	WITHOUT_CLASSIFICATION	3.713455991547843E-7	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999998795248772	WITHOUT_CLASSIFICATION	1.2047512281165997E-7	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999930090041492	WITHOUT_CLASSIFICATION	6.990995850660316E-6	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999979350854306	WITHOUT_CLASSIFICATION	2.0649145694126153E-6	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999905352377608	WITHOUT_CLASSIFICATION	9.464762239213613E-6	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999999769448827	WITHOUT_CLASSIFICATION	2.3055117306977076E-8	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999980593073347	WITHOUT_CLASSIFICATION	1.940692665227528E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999994391261701	WITHOUT_CLASSIFICATION	5.60873829904494E-7	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.999999798673955	WITHOUT_CLASSIFICATION	2.0132604495508318E-7	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999975608217333	WITHOUT_CLASSIFICATION	2.439178266699375E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999975608217333	WITHOUT_CLASSIFICATION	2.439178266699375E-6	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999983743009366	WITHOUT_CLASSIFICATION	1.6256990633495968E-6	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999988050262815	WITHOUT_CLASSIFICATION	1.1949737184820125E-6	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999984173069382	WITHOUT_CLASSIFICATION	1.5826930617277038E-6	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999895585969873	WITHOUT_CLASSIFICATION	1.0441403012610106E-5	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.999994163624305	WITHOUT_CLASSIFICATION	5.836375695019895E-6	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999994145170698	WITHOUT_CLASSIFICATION	5.854829302714752E-7	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9999878844709682	WITHOUT_CLASSIFICATION	1.2115529031823347E-5	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9999725048272452	WITHOUT_CLASSIFICATION	2.7495172754899053E-5	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9999934305757158	WITHOUT_CLASSIFICATION	6.569424284269925E-6	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999920662840781	WITHOUT_CLASSIFICATION	7.933715921775393E-6	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999979020167701	WITHOUT_CLASSIFICATION	2.097983229966358E-6	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.995715614795892	WITHOUT_CLASSIFICATION	0.004284385204108012	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999986462206167	WITHOUT_CLASSIFICATION	1.3537793832957154E-6	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.999339224378893	WITHOUT_CLASSIFICATION	6.60775621107017E-4	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999998478962294	WITHOUT_CLASSIFICATION	1.5210377057095165E-7	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999995825748241	WITHOUT_CLASSIFICATION	4.1742517594686247E-7	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999991457681386	WITHOUT_CLASSIFICATION	8.542318613269069E-7	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999995582567064	WITHOUT_CLASSIFICATION	4.417432936321429E-7	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999975549775204	WITHOUT_CLASSIFICATION	2.4450224795929347E-6	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999984683146068	WITHOUT_CLASSIFICATION	1.531685393187351E-6	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999578376619465	WITHOUT_CLASSIFICATION	4.2162338053585295E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999991613099267	WITHOUT_CLASSIFICATION	8.386900732916855E-7	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9997637108371378	WITHOUT_CLASSIFICATION	2.362891628621413E-4	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999807712098162	WITHOUT_CLASSIFICATION	1.922879018370169E-5	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999896644335766	WITHOUT_CLASSIFICATION	1.0335566423474627E-5	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999999849382959	WITHOUT_CLASSIFICATION	1.5061704136678266E-8	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999998511111429	WITHOUT_CLASSIFICATION	1.4888885720111327E-7	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999988548955783	WITHOUT_CLASSIFICATION	1.1451044217715243E-6	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.999864270602331	WITHOUT_CLASSIFICATION	1.3572939766894144E-4	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.999839826088325	WITHOUT_CLASSIFICATION	1.60173911674892E-4	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999639841949666	WITHOUT_CLASSIFICATION	3.60158050333586E-5	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999987204473963	WITHOUT_CLASSIFICATION	1.2795526037271487E-6	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999781486526436	WITHOUT_CLASSIFICATION	2.1851347356385105E-5	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999977840206289	WITHOUT_CLASSIFICATION	2.2159793711290487E-6	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999502706476734	WITHOUT_CLASSIFICATION	4.972935232662186E-5	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.99999998938781	WITHOUT_CLASSIFICATION	1.0612189936864244E-8	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999899191432018	WITHOUT_CLASSIFICATION	1.008085679820929E-5	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.999997655099676	WITHOUT_CLASSIFICATION	2.3449003239103633E-6	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999980966896401	WITHOUT_CLASSIFICATION	1.9033103598928407E-6	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999990929237674	WITHOUT_CLASSIFICATION	9.070762326788267E-7	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999948118139549	WITHOUT_CLASSIFICATION	5.18818604508244E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999966571287178	WITHOUT_CLASSIFICATION	3.342871282223136E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999966571287178	WITHOUT_CLASSIFICATION	3.342871282223136E-6	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999955654954426	WITHOUT_CLASSIFICATION	4.434504557387389E-6	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999995795832022	WITHOUT_CLASSIFICATION	4.204167977697804E-7	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999988211280738	WITHOUT_CLASSIFICATION	1.178871926226115E-6	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999993668069017	WITHOUT_CLASSIFICATION	6.331930982467072E-7	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.999998630826716	WITHOUT_CLASSIFICATION	1.3691732839301283E-6	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999999531511347	WITHOUT_CLASSIFICATION	4.6848865469808986E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999158783463072	WITHOUT_CLASSIFICATION	8.412165369277896E-5	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9999990828792268	WITHOUT_CLASSIFICATION	9.171207732079759E-7	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999992683779797	WITHOUT_CLASSIFICATION	7.316220203350406E-7	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999985720481045	WITHOUT_CLASSIFICATION	1.4279518954804447E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999963155453213	WITHOUT_CLASSIFICATION	3.6844546788036663E-6	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.999998735553645	WITHOUT_CLASSIFICATION	1.2644463550193016E-6	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999840667008805	WITHOUT_CLASSIFICATION	1.5933299119601743E-5	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999994798101352	WITHOUT_CLASSIFICATION	5.201898648551407E-7	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999883342722581	WITHOUT_CLASSIFICATION	1.1665727741848412E-5	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.999985210688566	WITHOUT_CLASSIFICATION	1.4789311433897775E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999982584181853	WITHOUT_CLASSIFICATION	1.7415818146677623E-6	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999919612059534	WITHOUT_CLASSIFICATION	8.038794046740288E-6	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999998920091236	WITHOUT_CLASSIFICATION	1.0799087641750978E-7	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.999981080220348	WITHOUT_CLASSIFICATION	1.8919779651984445E-5	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999996067346308	WITHOUT_CLASSIFICATION	3.9326536916420116E-7	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9996624354043997	WITHOUT_CLASSIFICATION	3.375645956003028E-4	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999999939928965	WITHOUT_CLASSIFICATION	6.007103458278636E-9	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.999719561669942	WITHOUT_CLASSIFICATION	2.8043833005797383E-4	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999984628137883	WITHOUT_CLASSIFICATION	1.5371862116276863E-6	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999960629337626	WITHOUT_CLASSIFICATION	3.937066237386933E-6	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999999877741	WITHOUT_CLASSIFICATION	1.2225899895313457E-8	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999998821481358	WITHOUT_CLASSIFICATION	1.1785186414778762E-7	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999987981109102	WITHOUT_CLASSIFICATION	1.2018890897728058E-6	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999957138508387	WITHOUT_CLASSIFICATION	4.2861491611971514E-6	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999976692283054	WITHOUT_CLASSIFICATION	2.330771694670159E-6	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999910328575341	WITHOUT_CLASSIFICATION	8.967142465887128E-6	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999957138508387	WITHOUT_CLASSIFICATION	4.2861491611971514E-6	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999384229787913	WITHOUT_CLASSIFICATION	6.15770212086592E-5	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9998093716867837	WITHOUT_CLASSIFICATION	1.9062831321628134E-4	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9999945770304383	WITHOUT_CLASSIFICATION	5.422969561671707E-6	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.5724216710719623	DEFECT	0.4275783289280377	WITHOUT_CLASSIFICATION
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.999999919414332	WITHOUT_CLASSIFICATION	8.058566800354496E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999975999093172	WITHOUT_CLASSIFICATION	2.40009068277195E-6	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999963700929689	WITHOUT_CLASSIFICATION	3.6299070310243018E-6	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999997737194698	WITHOUT_CLASSIFICATION	2.2628053031294937E-7	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9986231795084622	WITHOUT_CLASSIFICATION	0.0013768204915377595	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999976400917926	WITHOUT_CLASSIFICATION	2.359908207352673E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999956704143016	WITHOUT_CLASSIFICATION	4.329585698445208E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9978308190277314	WITHOUT_CLASSIFICATION	0.002169180972268681	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999947696374772	WITHOUT_CLASSIFICATION	5.2303625227729245E-6	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999982141010796	WITHOUT_CLASSIFICATION	1.785898920423027E-6	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9998539965364206	WITHOUT_CLASSIFICATION	1.46003463579268E-4	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999991925146432	WITHOUT_CLASSIFICATION	8.07485356874812E-7	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9999978881410331	WITHOUT_CLASSIFICATION	2.1118589668767834E-6	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999862780851141	WITHOUT_CLASSIFICATION	1.3721914885880756E-5	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9999231239787244	WITHOUT_CLASSIFICATION	7.687602127558247E-5	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999917585004223	WITHOUT_CLASSIFICATION	8.241499577714544E-6	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999766916245973	WITHOUT_CLASSIFICATION	2.3308375402702984E-5	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999953734770707	WITHOUT_CLASSIFICATION	4.6265229293956255E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999995645288483	WITHOUT_CLASSIFICATION	4.354711517131619E-7	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999862210660883	WITHOUT_CLASSIFICATION	1.3778933911798574E-5	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999982824039307	WITHOUT_CLASSIFICATION	1.7175960692472302E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999959315454405	WITHOUT_CLASSIFICATION	4.068454559531658E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999965723312476	WITHOUT_CLASSIFICATION	3.4276687524410585E-6	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999958720220153	WITHOUT_CLASSIFICATION	4.127977984648708E-6	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999974292632	WITHOUT_CLASSIFICATION	2.5707369391385623E-9	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.999999234924275	WITHOUT_CLASSIFICATION	7.650757249003137E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.999999234924275	WITHOUT_CLASSIFICATION	7.650757249003137E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999989586693749	WITHOUT_CLASSIFICATION	1.041330625038751E-6	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999998674171666	WITHOUT_CLASSIFICATION	1.3258283339047845E-7	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999994494108201	WITHOUT_CLASSIFICATION	5.505891798329769E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9975978513136877	WITHOUT_CLASSIFICATION	0.002402148686312295	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9975978513136877	WITHOUT_CLASSIFICATION	0.002402148686312295	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9975978513136877	WITHOUT_CLASSIFICATION	0.002402148686312295	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9975978513136877	WITHOUT_CLASSIFICATION	0.002402148686312295	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999923329223307	WITHOUT_CLASSIFICATION	7.667077669303046E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999995671269999	WITHOUT_CLASSIFICATION	4.328730000909882E-7	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.999998842490588	WITHOUT_CLASSIFICATION	1.1575094120323524E-6	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9998722247354304	WITHOUT_CLASSIFICATION	1.2777526456966346E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999996353683249	WITHOUT_CLASSIFICATION	3.646316751061929E-7	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999230989718606	WITHOUT_CLASSIFICATION	7.690102813934735E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999960565135065	WITHOUT_CLASSIFICATION	3.943486493405948E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999960565135065	WITHOUT_CLASSIFICATION	3.943486493405948E-6	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.999976603707812	WITHOUT_CLASSIFICATION	2.339629218802429E-5	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9999236537909187	WITHOUT_CLASSIFICATION	7.634620908124303E-5	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999971098340452	WITHOUT_CLASSIFICATION	2.8901659547187734E-6	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9999293016019013	WITHOUT_CLASSIFICATION	7.069839809863345E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999999040644477	WITHOUT_CLASSIFICATION	9.593555227446313E-8	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.999999839299062	WITHOUT_CLASSIFICATION	1.6070093799895446E-7	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999221650423604	WITHOUT_CLASSIFICATION	7.783495763963706E-5	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999927486167924	WITHOUT_CLASSIFICATION	7.251383207627468E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999588575444798	WITHOUT_CLASSIFICATION	4.114245552014844E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999588575444798	WITHOUT_CLASSIFICATION	4.114245552014844E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999910328575341	WITHOUT_CLASSIFICATION	8.967142465887128E-6	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999972719644897	WITHOUT_CLASSIFICATION	2.7280355101620266E-6	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999966007120727	WITHOUT_CLASSIFICATION	3.3992879273076866E-6	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999877696009142	WITHOUT_CLASSIFICATION	1.2230399085748857E-5	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999971668994376	WITHOUT_CLASSIFICATION	2.833100562319445E-6	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9999162599598961	WITHOUT_CLASSIFICATION	8.374004010392639E-5	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999399730011531	WITHOUT_CLASSIFICATION	6.00269988467888E-5	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999990946291707	WITHOUT_CLASSIFICATION	9.053708292879207E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999952053830257	WITHOUT_CLASSIFICATION	4.794616974321968E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999952053830257	WITHOUT_CLASSIFICATION	4.794616974321968E-6	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999996405910556	WITHOUT_CLASSIFICATION	3.5940894434741013E-7	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999787999982115	WITHOUT_CLASSIFICATION	2.1200001788464224E-5	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999999328166808	WITHOUT_CLASSIFICATION	6.718331919667125E-8	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999977073542903	WITHOUT_CLASSIFICATION	2.2926457096888127E-6	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999898168158213	WITHOUT_CLASSIFICATION	1.0183184178615544E-5	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9998954244482552	WITHOUT_CLASSIFICATION	1.0457555174475605E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.999575476906626	WITHOUT_CLASSIFICATION	4.245230933741163E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999998129084224	WITHOUT_CLASSIFICATION	1.8709157759923858E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999998129084224	WITHOUT_CLASSIFICATION	1.8709157759923858E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999998129084224	WITHOUT_CLASSIFICATION	1.8709157759923858E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999998129084224	WITHOUT_CLASSIFICATION	1.8709157759923858E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999799605648504	WITHOUT_CLASSIFICATION	2.0039435149675322E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.999869265437205	WITHOUT_CLASSIFICATION	1.3073456279501667E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.999995605959828	WITHOUT_CLASSIFICATION	4.394040172106338E-6	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999888386810069	WITHOUT_CLASSIFICATION	1.1161318993114592E-5	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999804858375672	WITHOUT_CLASSIFICATION	1.9514162432854205E-5	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.999855697108824	WITHOUT_CLASSIFICATION	1.4430289117607213E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999998921793685	WITHOUT_CLASSIFICATION	1.0782063161893991E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999962956505435	WITHOUT_CLASSIFICATION	3.7043494565033236E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999962956505435	WITHOUT_CLASSIFICATION	3.7043494565033236E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999962956505435	WITHOUT_CLASSIFICATION	3.7043494565033236E-6	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999924760883298	WITHOUT_CLASSIFICATION	7.523911670345884E-6	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9999971160366171	WITHOUT_CLASSIFICATION	2.8839633829950327E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999977937966078	WITHOUT_CLASSIFICATION	2.2062033921465005E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999977937966078	WITHOUT_CLASSIFICATION	2.2062033921465005E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999568251052205	WITHOUT_CLASSIFICATION	4.31748947795192E-5	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999752768874903	WITHOUT_CLASSIFICATION	2.4723112509606144E-5	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999999717801623	WITHOUT_CLASSIFICATION	2.821983780357177E-8	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9999753193069641	WITHOUT_CLASSIFICATION	2.468069303585816E-5	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999953704909764	WITHOUT_CLASSIFICATION	4.6295090235469365E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999991107040485	WITHOUT_CLASSIFICATION	8.892959515557525E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999959297269351	WITHOUT_CLASSIFICATION	4.070273064976848E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999959297269351	WITHOUT_CLASSIFICATION	4.070273064976848E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999995804455155	WITHOUT_CLASSIFICATION	4.195544843955885E-7	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9999971337044082	WITHOUT_CLASSIFICATION	2.8662955916631482E-6	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999971156889923	WITHOUT_CLASSIFICATION	2.8843110076698903E-6	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9999243253106024	WITHOUT_CLASSIFICATION	7.567468939769363E-5	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.999999503086604	WITHOUT_CLASSIFICATION	4.969133959284137E-7	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999942525262674	WITHOUT_CLASSIFICATION	5.747473732557607E-6	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999995079012659	WITHOUT_CLASSIFICATION	4.920987341380352E-7	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9997069221635055	WITHOUT_CLASSIFICATION	2.930778364945167E-4	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9999056171949594	WITHOUT_CLASSIFICATION	9.438280504061364E-5	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999996232945534	WITHOUT_CLASSIFICATION	3.767054465582396E-7	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999998487687728	WITHOUT_CLASSIFICATION	1.512312270771133E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999552244072053	WITHOUT_CLASSIFICATION	4.477559279484104E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9986843576437466	WITHOUT_CLASSIFICATION	0.0013156423562534414	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999936156371563	WITHOUT_CLASSIFICATION	6.384362843713365E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999989637391	WITHOUT_CLASSIFICATION	1.036260887671155E-9	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999999742850788	WITHOUT_CLASSIFICATION	2.571492119757944E-8	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9994740475852262	WITHOUT_CLASSIFICATION	5.259524147738504E-4	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999974260010536	WITHOUT_CLASSIFICATION	2.573998946387407E-6	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999995576995432	WITHOUT_CLASSIFICATION	4.4230045679905234E-7	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999712133534148	WITHOUT_CLASSIFICATION	2.8786646585242327E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999993666460989	WITHOUT_CLASSIFICATION	6.333539012069467E-7	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9996080079343921	WITHOUT_CLASSIFICATION	3.919920656079481E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997471139725	WITHOUT_CLASSIFICATION	2.528860274590946E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997471139725	WITHOUT_CLASSIFICATION	2.528860274590946E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997471139725	WITHOUT_CLASSIFICATION	2.528860274590946E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997471139725	WITHOUT_CLASSIFICATION	2.528860274590946E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997471139725	WITHOUT_CLASSIFICATION	2.528860274590946E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997471139725	WITHOUT_CLASSIFICATION	2.528860274590946E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997471139725	WITHOUT_CLASSIFICATION	2.528860274590946E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997471139725	WITHOUT_CLASSIFICATION	2.528860274590946E-7	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999996476512136	WITHOUT_CLASSIFICATION	3.523487864124405E-7	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999692105258196	WITHOUT_CLASSIFICATION	3.07894741803457E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999905636836531	WITHOUT_CLASSIFICATION	9.43631634681189E-6	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9636791076451972	WITHOUT_CLASSIFICATION	0.0363208923548028	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999158783463072	WITHOUT_CLASSIFICATION	8.412165369277896E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999158783463072	WITHOUT_CLASSIFICATION	8.412165369277896E-5	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999794783025242	WITHOUT_CLASSIFICATION	2.052169747584556E-5	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999987805818817	WITHOUT_CLASSIFICATION	1.2194181182146062E-6	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999999640585692	WITHOUT_CLASSIFICATION	3.594143080209424E-8	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9999945428064991	WITHOUT_CLASSIFICATION	5.4571935007979895E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999767801962485	WITHOUT_CLASSIFICATION	2.3219803751529578E-5	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999979339390779	WITHOUT_CLASSIFICATION	2.066060922134232E-6	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999985102029859	WITHOUT_CLASSIFICATION	1.489797014049492E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9997616167032857	WITHOUT_CLASSIFICATION	2.38383296714415E-4	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999999280778603	WITHOUT_CLASSIFICATION	7.192213967378991E-8	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999990944068805	WITHOUT_CLASSIFICATION	9.055931194501167E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999990944068805	WITHOUT_CLASSIFICATION	9.055931194501167E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999990944068805	WITHOUT_CLASSIFICATION	9.055931194501167E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.999999162253837	WITHOUT_CLASSIFICATION	8.377461629519722E-7	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999957851247221	WITHOUT_CLASSIFICATION	4.21487527786768E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999978384497512	WITHOUT_CLASSIFICATION	2.1615502488353364E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999995745450705	WITHOUT_CLASSIFICATION	4.254549295106351E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999955468754481	WITHOUT_CLASSIFICATION	4.4531245518850596E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999007217605	WITHOUT_CLASSIFICATION	9.927823954642942E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999993940480759	WITHOUT_CLASSIFICATION	6.059519240292383E-7	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999986083408685	WITHOUT_CLASSIFICATION	1.3916591315228146E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999981431085737	WITHOUT_CLASSIFICATION	1.8568914263558383E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999981431085737	WITHOUT_CLASSIFICATION	1.8568914263558383E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999982743787938	WITHOUT_CLASSIFICATION	1.7256212061437731E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999256505793866	WITHOUT_CLASSIFICATION	7.434942061328892E-5	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999226850808645	WITHOUT_CLASSIFICATION	7.731491913557153E-5	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9993524029808009	WITHOUT_CLASSIFICATION	6.475970191991446E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999983995337891	WITHOUT_CLASSIFICATION	1.600466210891435E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999983995337891	WITHOUT_CLASSIFICATION	1.600466210891435E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999876875878	WITHOUT_CLASSIFICATION	1.2312412200067063E-5	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9999878567148133	WITHOUT_CLASSIFICATION	1.214328518665908E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999174855844671	WITHOUT_CLASSIFICATION	8.251441553287404E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999640515199806	WITHOUT_CLASSIFICATION	3.594848001940582E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999640515199806	WITHOUT_CLASSIFICATION	3.594848001940582E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999640515199806	WITHOUT_CLASSIFICATION	3.594848001940582E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999298342473	WITHOUT_CLASSIFICATION	7.016575274561558E-8	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999981720289887	WITHOUT_CLASSIFICATION	1.8279710113401704E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999981720289887	WITHOUT_CLASSIFICATION	1.8279710113401704E-6	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.999999761314243	WITHOUT_CLASSIFICATION	2.3868575699897206E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.999999761314243	WITHOUT_CLASSIFICATION	2.3868575699897206E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999999786136673	WITHOUT_CLASSIFICATION	2.138633270059869E-8	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999942989312537	WITHOUT_CLASSIFICATION	5.701068746228421E-6	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.999999077764148	WITHOUT_CLASSIFICATION	9.222358519478308E-7	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.999992170620357	WITHOUT_CLASSIFICATION	7.829379643103842E-6	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.999994726901763	WITHOUT_CLASSIFICATION	5.273098236919103E-6	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999977595547569	WITHOUT_CLASSIFICATION	2.240445243099305E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999995298149277	WITHOUT_CLASSIFICATION	4.701850722368791E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978487386029	WITHOUT_CLASSIFICATION	2.151261397147041E-6	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999997087920829	WITHOUT_CLASSIFICATION	2.9120791707147813E-7	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999990804364808	WITHOUT_CLASSIFICATION	9.195635191300071E-7	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9927699307008071	WITHOUT_CLASSIFICATION	0.0072300692991929035	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999996747513064	WITHOUT_CLASSIFICATION	3.2524869359191054E-7	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999999524953953	WITHOUT_CLASSIFICATION	4.7504604685849784E-8	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999539485576466	WITHOUT_CLASSIFICATION	4.6051442353383575E-5	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9998531578579996	WITHOUT_CLASSIFICATION	1.468421420004181E-4	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999962231787537	WITHOUT_CLASSIFICATION	3.77682124625435E-6	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999927547336945	WITHOUT_CLASSIFICATION	7.245266305485342E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999763363645904	WITHOUT_CLASSIFICATION	2.366363540966021E-5	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999990447159252	WITHOUT_CLASSIFICATION	9.552840748138197E-7	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.999999377464429	WITHOUT_CLASSIFICATION	6.22535570944063E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9978308190277314	WITHOUT_CLASSIFICATION	0.002169180972268681	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999004405832006	WITHOUT_CLASSIFICATION	9.955941679932399E-5	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999915504206354	WITHOUT_CLASSIFICATION	8.449579364696121E-6	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.999949465538024	WITHOUT_CLASSIFICATION	5.053446197603014E-5	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999999225287433	WITHOUT_CLASSIFICATION	7.747125675143822E-8	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999870344909957	WITHOUT_CLASSIFICATION	1.2965509004183116E-5	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999439230114556	WITHOUT_CLASSIFICATION	5.607698854436344E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999999599341444	WITHOUT_CLASSIFICATION	4.006585561256905E-8	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999989254539461	WITHOUT_CLASSIFICATION	1.0745460539335433E-6	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9999672289054161	WITHOUT_CLASSIFICATION	3.277109458377195E-5	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999880788727683	WITHOUT_CLASSIFICATION	1.1921127231796206E-5	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999896788915713	WITHOUT_CLASSIFICATION	1.032110842877199E-5	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999997668627026	WITHOUT_CLASSIFICATION	2.331372973387743E-7	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999978438886185	WITHOUT_CLASSIFICATION	2.1561113815025557E-6	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.99997515775965	WITHOUT_CLASSIFICATION	2.4842240350017656E-5	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9994621421565754	WITHOUT_CLASSIFICATION	5.37857843424726E-4	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999996096423629	WITHOUT_CLASSIFICATION	3.9035763702439673E-7	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999955337987357	WITHOUT_CLASSIFICATION	4.466201264265131E-6	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999994833253498	WITHOUT_CLASSIFICATION	5.16674650238719E-7	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9974715726111554	WITHOUT_CLASSIFICATION	0.002528427388844749	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9998395995029752	WITHOUT_CLASSIFICATION	1.6040049702480269E-4	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999909289218959	WITHOUT_CLASSIFICATION	9.071078104096387E-6	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999998065207094	WITHOUT_CLASSIFICATION	1.9347929062477862E-7	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999661041515971	WITHOUT_CLASSIFICATION	3.389584840282343E-5	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9997089667515291	WITHOUT_CLASSIFICATION	2.910332484708549E-4	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999996283748711	WITHOUT_CLASSIFICATION	3.716251288434033E-7	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999999226959699	WITHOUT_CLASSIFICATION	7.730403011605683E-8	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999788401730014	WITHOUT_CLASSIFICATION	2.1159826998526973E-5	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9998863573155882	WITHOUT_CLASSIFICATION	1.1364268441190801E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998690391040002	WITHOUT_CLASSIFICATION	1.3096089599981396E-4	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999996607402906	WITHOUT_CLASSIFICATION	3.392597093913438E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999963547981193	WITHOUT_CLASSIFICATION	3.6452018808046626E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999963547981193	WITHOUT_CLASSIFICATION	3.6452018808046626E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999987276237002	WITHOUT_CLASSIFICATION	1.2723762997035112E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999987276237002	WITHOUT_CLASSIFICATION	1.2723762997035112E-6	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999876201199852	WITHOUT_CLASSIFICATION	1.237988001474436E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999876201199852	WITHOUT_CLASSIFICATION	1.237988001474436E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999976859099908	WITHOUT_CLASSIFICATION	2.314090009093701E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999976859099908	WITHOUT_CLASSIFICATION	2.314090009093701E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999994457941016	WITHOUT_CLASSIFICATION	5.542058984092151E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999994457941016	WITHOUT_CLASSIFICATION	5.542058984092151E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999994457941016	WITHOUT_CLASSIFICATION	5.542058984092151E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999994457941016	WITHOUT_CLASSIFICATION	5.542058984092151E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999994457941016	WITHOUT_CLASSIFICATION	5.542058984092151E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999994457941016	WITHOUT_CLASSIFICATION	5.542058984092151E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999994457941016	WITHOUT_CLASSIFICATION	5.542058984092151E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999994457941016	WITHOUT_CLASSIFICATION	5.542058984092151E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999994457941016	WITHOUT_CLASSIFICATION	5.542058984092151E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999944796575087	WITHOUT_CLASSIFICATION	5.520342491361689E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999944796575087	WITHOUT_CLASSIFICATION	5.520342491361689E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999944796575087	WITHOUT_CLASSIFICATION	5.520342491361689E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.999999433809174	WITHOUT_CLASSIFICATION	5.661908260715862E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999976925615992	WITHOUT_CLASSIFICATION	2.3074384007643618E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999976925615992	WITHOUT_CLASSIFICATION	2.3074384007643618E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999976925615992	WITHOUT_CLASSIFICATION	2.3074384007643618E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999998930609838	WITHOUT_CLASSIFICATION	1.069390162054401E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999998930609838	WITHOUT_CLASSIFICATION	1.069390162054401E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999998930609838	WITHOUT_CLASSIFICATION	1.069390162054401E-7	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998429473454623	WITHOUT_CLASSIFICATION	1.570526545377058E-4	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999997194773462	WITHOUT_CLASSIFICATION	2.805226537720943E-7	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9997901304481566	WITHOUT_CLASSIFICATION	2.098695518435769E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998248524734301	WITHOUT_CLASSIFICATION	1.751475265699148E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998248524734301	WITHOUT_CLASSIFICATION	1.751475265699148E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998248524734301	WITHOUT_CLASSIFICATION	1.751475265699148E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999997186111677	WITHOUT_CLASSIFICATION	2.813888323522624E-7	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999859453030285	WITHOUT_CLASSIFICATION	1.4054696971384846E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999859453030285	WITHOUT_CLASSIFICATION	1.4054696971384846E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9997392194741785	WITHOUT_CLASSIFICATION	2.607805258214522E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999999694143473	WITHOUT_CLASSIFICATION	3.058565267952657E-8	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999999694143473	WITHOUT_CLASSIFICATION	3.058565267952657E-8	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.9962444193782837	WITHOUT_CLASSIFICATION	0.003755580621716404	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9998907412180382	WITHOUT_CLASSIFICATION	1.0925878196169349E-4	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999991343073354	WITHOUT_CLASSIFICATION	8.656926644087889E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999597048258	WITHOUT_CLASSIFICATION	4.0295174197796387E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999597048258	WITHOUT_CLASSIFICATION	4.0295174197796387E-7	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9993404542773524	WITHOUT_CLASSIFICATION	6.595457226476143E-4	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999996295612444	WITHOUT_CLASSIFICATION	3.704387555718747E-7	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999995574797427	WITHOUT_CLASSIFICATION	4.425202572793106E-7	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9999998074143416	WITHOUT_CLASSIFICATION	1.9258565850801847E-7	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9929186987114688	WITHOUT_CLASSIFICATION	0.0070813012885311746	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999597048258	WITHOUT_CLASSIFICATION	4.0295174197796387E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999597048258	WITHOUT_CLASSIFICATION	4.0295174197796387E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999597048258	WITHOUT_CLASSIFICATION	4.0295174197796387E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999597048258	WITHOUT_CLASSIFICATION	4.0295174197796387E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999597048258	WITHOUT_CLASSIFICATION	4.0295174197796387E-7	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999996468356609	WITHOUT_CLASSIFICATION	3.5316433913649193E-7	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.999976711279242	WITHOUT_CLASSIFICATION	2.328872075796158E-5	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999991399233461	WITHOUT_CLASSIFICATION	8.600766537735234E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999796116825047	WITHOUT_CLASSIFICATION	2.038831749526637E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.996890007929812	WITHOUT_CLASSIFICATION	0.0031099920701879837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999927609370454	WITHOUT_CLASSIFICATION	7.239062954588596E-6	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9998827065675091	WITHOUT_CLASSIFICATION	1.1729343249089689E-4	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999996491530834	WITHOUT_CLASSIFICATION	3.5084691662653966E-7	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999998942229184	WITHOUT_CLASSIFICATION	1.0577708174767181E-7	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999974344896976	WITHOUT_CLASSIFICATION	2.565510302398919E-6	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999943099494543	WITHOUT_CLASSIFICATION	5.690050545645611E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9996624354043997	WITHOUT_CLASSIFICATION	3.375645956003028E-4	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.999999830556858	WITHOUT_CLASSIFICATION	1.694431419298957E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999998985596078	WITHOUT_CLASSIFICATION	1.0144039217024984E-7	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.999951577353574	WITHOUT_CLASSIFICATION	4.842264642608041E-5	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9989903193434692	WITHOUT_CLASSIFICATION	0.0010096806565307848	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999999843608559	WITHOUT_CLASSIFICATION	1.5639144033958432E-8	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999999926251201	WITHOUT_CLASSIFICATION	7.374879904998492E-9	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999971180367665	WITHOUT_CLASSIFICATION	2.881963233450702E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999996252895065	WITHOUT_CLASSIFICATION	3.747104934719345E-7	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9999999479803929	WITHOUT_CLASSIFICATION	5.201960718408223E-8	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999991853576268	WITHOUT_CLASSIFICATION	8.14642373172407E-7	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999985720481045	WITHOUT_CLASSIFICATION	1.4279518954804447E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999617195799	WITHOUT_CLASSIFICATION	3.828042007981231E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999617195799	WITHOUT_CLASSIFICATION	3.828042007981231E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999617195799	WITHOUT_CLASSIFICATION	3.828042007981231E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999617195799	WITHOUT_CLASSIFICATION	3.828042007981231E-8	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999564542205627	WITHOUT_CLASSIFICATION	4.3545779437259686E-5	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9957953187081335	WITHOUT_CLASSIFICATION	0.004204681291866501	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.999938282210316	WITHOUT_CLASSIFICATION	6.171778968394415E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.999938282210316	WITHOUT_CLASSIFICATION	6.171778968394415E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999998026423894	WITHOUT_CLASSIFICATION	1.9735761057518127E-7	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999992426058022	WITHOUT_CLASSIFICATION	7.573941978138319E-7	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9998981391967967	WITHOUT_CLASSIFICATION	1.0186080320330911E-4	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999390740234	WITHOUT_CLASSIFICATION	6.092597661348028E-8	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999979826043193	WITHOUT_CLASSIFICATION	2.0173956807298992E-6	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999772425894942	WITHOUT_CLASSIFICATION	2.2757410505781168E-5	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9998420340672767	WITHOUT_CLASSIFICATION	1.579659327232884E-4	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999955041616182	WITHOUT_CLASSIFICATION	4.495838381787081E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999955041616182	WITHOUT_CLASSIFICATION	4.495838381787081E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999955041616182	WITHOUT_CLASSIFICATION	4.495838381787081E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999955041616182	WITHOUT_CLASSIFICATION	4.495838381787081E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999285428824715	WITHOUT_CLASSIFICATION	7.145711752853635E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995292401419	WITHOUT_CLASSIFICATION	4.707598581157796E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995292401419	WITHOUT_CLASSIFICATION	4.707598581157796E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995292401419	WITHOUT_CLASSIFICATION	4.707598581157796E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999992328377161	WITHOUT_CLASSIFICATION	7.671622840088151E-7	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999917314018653	WITHOUT_CLASSIFICATION	8.268598134719823E-6	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.99997954223367	WITHOUT_CLASSIFICATION	2.0457766329903086E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9975978513136877	WITHOUT_CLASSIFICATION	0.002402148686312295	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9975978513136877	WITHOUT_CLASSIFICATION	0.002402148686312295	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9996633441588514	WITHOUT_CLASSIFICATION	3.3665584114850073E-4	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9999804978464879	WITHOUT_CLASSIFICATION	1.950215351206744E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.999976848976313	WITHOUT_CLASSIFICATION	2.3151023687099786E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.999976848976313	WITHOUT_CLASSIFICATION	2.3151023687099786E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999971499677146	WITHOUT_CLASSIFICATION	2.850032285388545E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999971499677146	WITHOUT_CLASSIFICATION	2.850032285388545E-6	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.999999973955256	WITHOUT_CLASSIFICATION	2.6044743987473058E-8	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999999446978853	WITHOUT_CLASSIFICATION	5.5302114631754797E-8	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999999509266797	WITHOUT_CLASSIFICATION	4.90733202338145E-8	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9999996519534972	WITHOUT_CLASSIFICATION	3.480465028953907E-7	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999351361353674	WITHOUT_CLASSIFICATION	6.486386463262132E-5	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999999264047877	WITHOUT_CLASSIFICATION	7.35952122525345E-8	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999991951003114	WITHOUT_CLASSIFICATION	8.048996885975983E-7	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999857232399068	WITHOUT_CLASSIFICATION	1.427676009321045E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999998569941356	WITHOUT_CLASSIFICATION	1.430058643891026E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999217633009	WITHOUT_CLASSIFICATION	7.823669914560332E-8	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999217633009	WITHOUT_CLASSIFICATION	7.823669914560332E-8	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999995892397131	WITHOUT_CLASSIFICATION	4.107602868492567E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999995892397131	WITHOUT_CLASSIFICATION	4.107602868492567E-7	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9999717397029728	WITHOUT_CLASSIFICATION	2.8260297027111322E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999778804368852	WITHOUT_CLASSIFICATION	2.2119563114837108E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999812069311016	WITHOUT_CLASSIFICATION	1.879306889835621E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999794288959551	WITHOUT_CLASSIFICATION	2.0571104044842823E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999794288959551	WITHOUT_CLASSIFICATION	2.0571104044842823E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999794288959551	WITHOUT_CLASSIFICATION	2.0571104044842823E-5	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999951508448383	WITHOUT_CLASSIFICATION	4.849155161716189E-6	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999970762183459	WITHOUT_CLASSIFICATION	2.9237816541982176E-6	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.999996912989519	WITHOUT_CLASSIFICATION	3.087010480923297E-6	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999974609614134	WITHOUT_CLASSIFICATION	2.5390385865321706E-6	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999966238516622	WITHOUT_CLASSIFICATION	3.376148337782292E-6	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999962072642061	WITHOUT_CLASSIFICATION	3.792735793743749E-6	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999969375275115	WITHOUT_CLASSIFICATION	3.062472488425916E-6	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999956792486726	WITHOUT_CLASSIFICATION	4.320751327395406E-6	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9998531153501021	WITHOUT_CLASSIFICATION	1.468846498979015E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999999452458522	WITHOUT_CLASSIFICATION	5.475414781798153E-8	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9999991579078427	WITHOUT_CLASSIFICATION	8.420921574203572E-7	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999858063597205	WITHOUT_CLASSIFICATION	1.4193640279621417E-5	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999899047264004	WITHOUT_CLASSIFICATION	1.0095273599530685E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9975978513136877	WITHOUT_CLASSIFICATION	0.002402148686312295	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999716718652549	WITHOUT_CLASSIFICATION	2.832813474504223E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9998488258531886	WITHOUT_CLASSIFICATION	1.5117414681147277E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.999999234924275	WITHOUT_CLASSIFICATION	7.650757249003137E-7	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999932271708901	WITHOUT_CLASSIFICATION	6.772829109895471E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999932271708901	WITHOUT_CLASSIFICATION	6.772829109895471E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999932271708901	WITHOUT_CLASSIFICATION	6.772829109895471E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999932271708901	WITHOUT_CLASSIFICATION	6.772829109895471E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999932271708901	WITHOUT_CLASSIFICATION	6.772829109895471E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999220554928895	WITHOUT_CLASSIFICATION	7.794450711050205E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999932271708901	WITHOUT_CLASSIFICATION	6.772829109895471E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999932271708901	WITHOUT_CLASSIFICATION	6.772829109895471E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999932271708901	WITHOUT_CLASSIFICATION	6.772829109895471E-5	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999231048257994	WITHOUT_CLASSIFICATION	7.689517420057378E-5	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999729187538094	WITHOUT_CLASSIFICATION	2.708124619046107E-5	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9579381121812371	WITHOUT_CLASSIFICATION	0.042061887818762876	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9999166273691855	WITHOUT_CLASSIFICATION	8.337263081452556E-5	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999964693859881	WITHOUT_CLASSIFICATION	3.5306140120493347E-6	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999940235383651	WITHOUT_CLASSIFICATION	5.976461634907179E-6	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999993635983979	WITHOUT_CLASSIFICATION	6.364016020144821E-7	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999932031341057	WITHOUT_CLASSIFICATION	6.796865894352096E-6	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999971626447507	WITHOUT_CLASSIFICATION	2.8373552494004318E-6	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999971626447507	WITHOUT_CLASSIFICATION	2.8373552494004318E-6	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999927611206028	WITHOUT_CLASSIFICATION	7.238879397196973E-6	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999967866697369	WITHOUT_CLASSIFICATION	3.213330263057052E-6	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999969574075706	WITHOUT_CLASSIFICATION	3.0425924293435263E-6	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999954273203797	WITHOUT_CLASSIFICATION	4.572679620227398E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999956216743734	WITHOUT_CLASSIFICATION	4.378325626580429E-6	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999968200810848	WITHOUT_CLASSIFICATION	3.1799189151908657E-6	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999970710181559	WITHOUT_CLASSIFICATION	2.9289818441264824E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999959517856383	WITHOUT_CLASSIFICATION	4.048214361665277E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999972134274608	WITHOUT_CLASSIFICATION	2.7865725392764306E-6	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999971658527465	WITHOUT_CLASSIFICATION	2.8341472536537475E-6	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999957690508586	WITHOUT_CLASSIFICATION	4.230949141367141E-6	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999952001992087	WITHOUT_CLASSIFICATION	4.7998007912836326E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999965807920077	WITHOUT_CLASSIFICATION	3.419207992197467E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999962397785629	WITHOUT_CLASSIFICATION	3.760221437068164E-6	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999969471881881	WITHOUT_CLASSIFICATION	3.0528118118006096E-6	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999967075340807	WITHOUT_CLASSIFICATION	3.2924659194239467E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999963466153626	WITHOUT_CLASSIFICATION	3.6533846372715724E-6	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999978498710417	WITHOUT_CLASSIFICATION	2.1501289584300693E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999961973697536	WITHOUT_CLASSIFICATION	3.8026302463163503E-6	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999946094295636	WITHOUT_CLASSIFICATION	5.390570436345791E-6	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999974871982438	WITHOUT_CLASSIFICATION	2.5128017562012977E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.999994580081781	WITHOUT_CLASSIFICATION	5.419918219046915E-6	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.99999760286873	WITHOUT_CLASSIFICATION	2.3971312699271632E-6	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999984144594816	WITHOUT_CLASSIFICATION	1.5855405185057182E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999965170030708	WITHOUT_CLASSIFICATION	3.482996929295488E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999969161445048	WITHOUT_CLASSIFICATION	3.083855495206039E-6	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999974127350539	WITHOUT_CLASSIFICATION	2.587264946136317E-6	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999963923429528	WITHOUT_CLASSIFICATION	3.6076570473590525E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999976400178711	WITHOUT_CLASSIFICATION	2.359982128881439E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999978486980072	WITHOUT_CLASSIFICATION	2.1513019928444996E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999972576771718	WITHOUT_CLASSIFICATION	2.7423228282281905E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999980561463291	WITHOUT_CLASSIFICATION	1.9438536708880937E-6	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.99999744224857	WITHOUT_CLASSIFICATION	2.5577514300289546E-6	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999976254366086	WITHOUT_CLASSIFICATION	2.3745633913712164E-6	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.999997165443589	WITHOUT_CLASSIFICATION	2.8345564109263224E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999977043277128	WITHOUT_CLASSIFICATION	2.295672287159755E-6	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999968739950811	WITHOUT_CLASSIFICATION	3.1260049189387027E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999961639406626	WITHOUT_CLASSIFICATION	3.836059337415481E-6	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999960445204507	WITHOUT_CLASSIFICATION	3.955479549342459E-6	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999967078920151	WITHOUT_CLASSIFICATION	3.292107984976175E-6	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999978486314807	WITHOUT_CLASSIFICATION	2.1513685193136704E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999968972638997	WITHOUT_CLASSIFICATION	3.102736100304367E-6	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999953404963342	WITHOUT_CLASSIFICATION	4.6595036657121464E-6	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999975638406131	WITHOUT_CLASSIFICATION	2.436159386955E-6	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999968389792557	WITHOUT_CLASSIFICATION	3.1610207442088887E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.999996871754985	WITHOUT_CLASSIFICATION	3.128245014970254E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999968718080942	WITHOUT_CLASSIFICATION	3.128191905826754E-6	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999975225025844	WITHOUT_CLASSIFICATION	2.4774974155371553E-6	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999959067694482	WITHOUT_CLASSIFICATION	4.093230551795054E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999973730479506	WITHOUT_CLASSIFICATION	2.6269520493377506E-6	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999960058652387	WITHOUT_CLASSIFICATION	3.99413476130072E-6	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999948897335844	WITHOUT_CLASSIFICATION	5.110266415604625E-6	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999942781363721	WITHOUT_CLASSIFICATION	5.721863627891243E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.999997013683298	WITHOUT_CLASSIFICATION	2.9863167019988585E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.999997013683298	WITHOUT_CLASSIFICATION	2.9863167019988585E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999966824542557	WITHOUT_CLASSIFICATION	3.3175457444105598E-6	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999964219120921	WITHOUT_CLASSIFICATION	3.5780879078701874E-6	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999967321529761	WITHOUT_CLASSIFICATION	3.2678470239222955E-6	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999950622488333	WITHOUT_CLASSIFICATION	4.937751166677111E-6	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999969791152646	WITHOUT_CLASSIFICATION	3.0208847353847685E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999953560698138	WITHOUT_CLASSIFICATION	4.643930186275309E-6	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999969687005112	WITHOUT_CLASSIFICATION	3.03129948870868E-6	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999956002246371	WITHOUT_CLASSIFICATION	4.399775362890384E-6	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999939788291359	WITHOUT_CLASSIFICATION	6.021170864158082E-6	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999960344987997	WITHOUT_CLASSIFICATION	3.965501200224855E-6	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.999970125831954	WITHOUT_CLASSIFICATION	2.987416804593047E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.999970125831954	WITHOUT_CLASSIFICATION	2.987416804593047E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.99999872492704	WITHOUT_CLASSIFICATION	1.2750729599624432E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9966309035536274	WITHOUT_CLASSIFICATION	0.0033690964463727307	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9998815446341809	WITHOUT_CLASSIFICATION	1.1845536581903474E-4	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999994374614053	WITHOUT_CLASSIFICATION	5.62538594598531E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999997968045642	WITHOUT_CLASSIFICATION	2.031954357996803E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999997968045642	WITHOUT_CLASSIFICATION	2.031954357996803E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999997968045642	WITHOUT_CLASSIFICATION	2.031954357996803E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999997968045642	WITHOUT_CLASSIFICATION	2.031954357996803E-7	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9975545412912712	WITHOUT_CLASSIFICATION	0.0024454587087287304	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9791059949003154	WITHOUT_CLASSIFICATION	0.020894005099684615	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999976159768363	WITHOUT_CLASSIFICATION	2.384023163625166E-6	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999972389564361	WITHOUT_CLASSIFICATION	2.761043563993605E-6	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999971205655925	WITHOUT_CLASSIFICATION	2.879434407481123E-6	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999973590219315	WITHOUT_CLASSIFICATION	2.6409780685588417E-6	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999972497539568	WITHOUT_CLASSIFICATION	2.750246043285201E-6	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999949986072532	WITHOUT_CLASSIFICATION	5.0013927468562485E-6	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.999996212126225	WITHOUT_CLASSIFICATION	3.787873775083699E-6	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999969352573296	WITHOUT_CLASSIFICATION	3.0647426703703085E-6	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999965265532693	WITHOUT_CLASSIFICATION	3.473446730625047E-6	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.999992661661471	WITHOUT_CLASSIFICATION	7.338338528930485E-6	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999963112138643	WITHOUT_CLASSIFICATION	3.688786135788417E-6	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.999996876623909	WITHOUT_CLASSIFICATION	3.1233760909648115E-6	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999965620340668	WITHOUT_CLASSIFICATION	3.4379659331663403E-6	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999970584094969	WITHOUT_CLASSIFICATION	2.9415905030135672E-6	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999970733946734	WITHOUT_CLASSIFICATION	2.926605326653775E-6	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999973971742524	WITHOUT_CLASSIFICATION	2.602825747609554E-6	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999952610573898	WITHOUT_CLASSIFICATION	4.73894261016702E-6	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999966653302476	WITHOUT_CLASSIFICATION	3.334669752392551E-6	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999939114677108	WITHOUT_CLASSIFICATION	6.088532289151843E-6	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999962350427964	WITHOUT_CLASSIFICATION	3.7649572034592933E-6	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999943056571697	WITHOUT_CLASSIFICATION	5.694342830282531E-6	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999954868144605	WITHOUT_CLASSIFICATION	4.513185539560865E-6	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999955979108804	WITHOUT_CLASSIFICATION	4.4020891196195095E-6	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999978697394073	WITHOUT_CLASSIFICATION	2.1302605927482566E-6	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999960258994647	WITHOUT_CLASSIFICATION	3.974100535419537E-6	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999972212787921	WITHOUT_CLASSIFICATION	2.778721207948744E-6	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999973638981954	WITHOUT_CLASSIFICATION	2.6361018045841777E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999977846265328	WITHOUT_CLASSIFICATION	2.215373467156681E-6	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999971562170847	WITHOUT_CLASSIFICATION	2.8437829153162717E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999962967226899	WITHOUT_CLASSIFICATION	3.703277310101192E-6	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999969178231547	WITHOUT_CLASSIFICATION	3.0821768452458234E-6	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999962772128259	WITHOUT_CLASSIFICATION	3.722787174164913E-6	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999958179860973	WITHOUT_CLASSIFICATION	4.182013902646137E-6	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999978647913585	WITHOUT_CLASSIFICATION	2.135208641505071E-6	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999977510107833	WITHOUT_CLASSIFICATION	2.2489892166600503E-6	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.999997850589871	WITHOUT_CLASSIFICATION	2.149410129034505E-6	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999957223594473	WITHOUT_CLASSIFICATION	4.2776405526721554E-6	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999969183630574	WITHOUT_CLASSIFICATION	3.0816369425384875E-6	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999966470816126	WITHOUT_CLASSIFICATION	3.3529183872771034E-6	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999974434638241	WITHOUT_CLASSIFICATION	2.5565361758373633E-6	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999973250567034	WITHOUT_CLASSIFICATION	2.674943296635349E-6	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999972299900008	WITHOUT_CLASSIFICATION	2.7700099991431716E-6	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999964666068251	WITHOUT_CLASSIFICATION	3.533393174953142E-6	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999963834348509	WITHOUT_CLASSIFICATION	3.6165651491047254E-6	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999975161024933	WITHOUT_CLASSIFICATION	2.4838975066922988E-6	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999972236361863	WITHOUT_CLASSIFICATION	2.776363813596681E-6	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999931330683818	WITHOUT_CLASSIFICATION	6.866931618226161E-6	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999957234712908	WITHOUT_CLASSIFICATION	4.276528709225647E-6	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999966337591379	WITHOUT_CLASSIFICATION	3.366240862017204E-6	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999967841674603	WITHOUT_CLASSIFICATION	3.215832539674545E-6	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.999995665804284	WITHOUT_CLASSIFICATION	4.334195715924807E-6	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999967404261809	WITHOUT_CLASSIFICATION	3.259573819132921E-6	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999960784329351	WITHOUT_CLASSIFICATION	3.9215670648318065E-6	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999940136688538	WITHOUT_CLASSIFICATION	5.986331146279247E-6	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999964852897122	WITHOUT_CLASSIFICATION	3.5147102877552605E-6	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.999995413722182	WITHOUT_CLASSIFICATION	4.5862778179001215E-6	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999963719950461	WITHOUT_CLASSIFICATION	3.62800495383287E-6	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999995584881395	WITHOUT_CLASSIFICATION	4.4151186054403726E-7	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999945384004532	WITHOUT_CLASSIFICATION	5.4615995468405195E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999978082817395	WITHOUT_CLASSIFICATION	2.1917182605449707E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999978082817395	WITHOUT_CLASSIFICATION	2.1917182605449707E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999978082817395	WITHOUT_CLASSIFICATION	2.1917182605449707E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999978082817395	WITHOUT_CLASSIFICATION	2.1917182605449707E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999978082817395	WITHOUT_CLASSIFICATION	2.1917182605449707E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999978082817395	WITHOUT_CLASSIFICATION	2.1917182605449707E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999978082817395	WITHOUT_CLASSIFICATION	2.1917182605449707E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999870775127563	WITHOUT_CLASSIFICATION	1.2922487243709205E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999870775127563	WITHOUT_CLASSIFICATION	1.2922487243709205E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999870775127563	WITHOUT_CLASSIFICATION	1.2922487243709205E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999870775127563	WITHOUT_CLASSIFICATION	1.2922487243709205E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999472663982018	WITHOUT_CLASSIFICATION	5.273360179818742E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999472663982018	WITHOUT_CLASSIFICATION	5.273360179818742E-5	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9912817749450872	WITHOUT_CLASSIFICATION	0.008718225054912742	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999959768885266	WITHOUT_CLASSIFICATION	4.023111473394073E-6	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999959768885266	WITHOUT_CLASSIFICATION	4.023111473394073E-6	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999999308086831	WITHOUT_CLASSIFICATION	6.919131697133611E-8	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.999997723806017	WITHOUT_CLASSIFICATION	2.276193982872E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962203945024	WITHOUT_CLASSIFICATION	3.7796054975733796E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962203945024	WITHOUT_CLASSIFICATION	3.7796054975733796E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962203945024	WITHOUT_CLASSIFICATION	3.7796054975733796E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962203945024	WITHOUT_CLASSIFICATION	3.7796054975733796E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962203945024	WITHOUT_CLASSIFICATION	3.7796054975733796E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962203945024	WITHOUT_CLASSIFICATION	3.7796054975733796E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962203945024	WITHOUT_CLASSIFICATION	3.7796054975733796E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999994799563669	WITHOUT_CLASSIFICATION	5.200436331044593E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999872961754201	WITHOUT_CLASSIFICATION	1.2703824579868087E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999545399384069	WITHOUT_CLASSIFICATION	4.546006159313689E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999545399384069	WITHOUT_CLASSIFICATION	4.546006159313689E-5	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999998944030605	WITHOUT_CLASSIFICATION	1.0559693954581225E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999978701391032	WITHOUT_CLASSIFICATION	2.1298608968611574E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999978701391032	WITHOUT_CLASSIFICATION	2.1298608968611574E-6	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9997574172640905	WITHOUT_CLASSIFICATION	2.4258273590954397E-4	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9691678341307164	WITHOUT_CLASSIFICATION	0.030832165869283647	DEFECT
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9999690835090372	WITHOUT_CLASSIFICATION	3.0916490962706816E-5	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9996431234402656	WITHOUT_CLASSIFICATION	3.568765597344485E-4	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999996669003212	WITHOUT_CLASSIFICATION	3.330996787956624E-7	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999986322838861	WITHOUT_CLASSIFICATION	1.3677161140366222E-6	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9981147351119376	WITHOUT_CLASSIFICATION	0.0018852648880624435	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999990028297785	WITHOUT_CLASSIFICATION	9.971702215924848E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999991546296019	WITHOUT_CLASSIFICATION	8.453703981578052E-7	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.999941273085111	WITHOUT_CLASSIFICATION	5.8726914888975986E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999726881011364	WITHOUT_CLASSIFICATION	2.7311898863657453E-5	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9969999901720091	WITHOUT_CLASSIFICATION	0.0030000098279907403	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999893935290263	WITHOUT_CLASSIFICATION	1.0606470973608315E-5	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9998216563898429	WITHOUT_CLASSIFICATION	1.783436101571271E-4	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999366032764035	WITHOUT_CLASSIFICATION	6.339672359646644E-5	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9991278520247475	WITHOUT_CLASSIFICATION	8.721479752525286E-4	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9999986621480629	WITHOUT_CLASSIFICATION	1.337851937119442E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999764580882861	WITHOUT_CLASSIFICATION	2.354191171389274E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999996489734563	WITHOUT_CLASSIFICATION	3.510265437522612E-7	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999996489734563	WITHOUT_CLASSIFICATION	3.510265437522612E-7	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999922640696132	WITHOUT_CLASSIFICATION	7.735930386799288E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999986579801983	WITHOUT_CLASSIFICATION	1.3420198017011533E-6	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999845574033706	WITHOUT_CLASSIFICATION	1.5442596629380526E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999658826187872	WITHOUT_CLASSIFICATION	3.4117381212815064E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999555149640308	WITHOUT_CLASSIFICATION	4.448503596926249E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999555149640308	WITHOUT_CLASSIFICATION	4.448503596926249E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999555149640308	WITHOUT_CLASSIFICATION	4.448503596926249E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.999964300557989	WITHOUT_CLASSIFICATION	3.569944201096738E-5	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999663106280279	WITHOUT_CLASSIFICATION	3.368937197212683E-5	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999998308578537	WITHOUT_CLASSIFICATION	1.691421461892883E-7	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999721001551132	WITHOUT_CLASSIFICATION	2.7899844886730868E-5	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999927616316692	WITHOUT_CLASSIFICATION	7.238368330776323E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999992656241607	WITHOUT_CLASSIFICATION	7.343758392626353E-7	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9999814457892434	WITHOUT_CLASSIFICATION	1.855421075667446E-5	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999903460390628	WITHOUT_CLASSIFICATION	9.653960937204409E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999909738848418	WITHOUT_CLASSIFICATION	9.026115158107591E-6	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.999999314096132	WITHOUT_CLASSIFICATION	6.859038680585346E-7	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999951229643949	WITHOUT_CLASSIFICATION	4.87703560522155E-6	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999950162902786	WITHOUT_CLASSIFICATION	4.983709721389241E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9968793160938355	WITHOUT_CLASSIFICATION	0.0031206839061644104	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9999941828037369	WITHOUT_CLASSIFICATION	5.817196263080049E-6	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999974032882906	WITHOUT_CLASSIFICATION	2.596711709463733E-6	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999997945179824	WITHOUT_CLASSIFICATION	2.0548201766775164E-7	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999418211438132	WITHOUT_CLASSIFICATION	5.817885618678771E-5	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999639841949666	WITHOUT_CLASSIFICATION	3.60158050333586E-5	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999984565633854	WITHOUT_CLASSIFICATION	1.543436614622052E-6	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9354936555554015	WITHOUT_CLASSIFICATION	0.06450634444459845	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.8588088853380389	DEFECT	0.14119111466196105	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.800318636684751	WITHOUT_CLASSIFICATION	0.199681363315249	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9472829010201949	WITHOUT_CLASSIFICATION	0.05271709897980506	DEFECT
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.8012083925622034	WITHOUT_CLASSIFICATION	0.19879160743779656	DEFECT
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.996122246322134	WITHOUT_CLASSIFICATION	0.003877753677866155	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.959342993880687	WITHOUT_CLASSIFICATION	0.04065700611931302	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9981264896293215	WITHOUT_CLASSIFICATION	0.0018735103706784583	DEFECT
// FIXME: not correct exception	DEFECT	0.6569328723424629	DEFECT	0.34306712765753694	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9998730298551702	WITHOUT_CLASSIFICATION	1.2697014482973716E-4	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9953995743974067	WITHOUT_CLASSIFICATION	0.0046004256025933615	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9999627832164327	WITHOUT_CLASSIFICATION	3.721678356731449E-5	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9178239132140233	WITHOUT_CLASSIFICATION	0.08217608678597664	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.9742664292941227	WITHOUT_CLASSIFICATION	0.025733570705877357	DEFECT
// TODO: sys fail	DEFECT	0.9938266340993657	WITHOUT_CLASSIFICATION	0.006173365900634339	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9959372495290748	WITHOUT_CLASSIFICATION	0.004062750470925236	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9959372495290748	WITHOUT_CLASSIFICATION	0.004062750470925236	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9999927458770853	WITHOUT_CLASSIFICATION	7.254122914657562E-6	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9999696716979426	WITHOUT_CLASSIFICATION	3.0328302057365924E-5	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9786540327155482	WITHOUT_CLASSIFICATION	0.0213459672844519	DEFECT
// ENEBO: Very wrong	DEFECT	0.9999473857934936	WITHOUT_CLASSIFICATION	5.261420650636628E-5	DEFECT
// ENEBO: Very wrong	DEFECT	0.9999473857934936	WITHOUT_CLASSIFICATION	5.261420650636628E-5	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.9967486844806013	WITHOUT_CLASSIFICATION	0.0032513155193986533	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9998610419281342	WITHOUT_CLASSIFICATION	1.3895807186571112E-4	DEFECT
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9960137460502912	WITHOUT_CLASSIFICATION	0.003986253949708726	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.9909049810990278	WITHOUT_CLASSIFICATION	0.009095018900972102	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.9706476951216244	WITHOUT_CLASSIFICATION	0.029352304878375677	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.9354289246647444	WITHOUT_CLASSIFICATION	0.06457107533525558	DEFECT
// TODO: proper sign	DEFECT	0.9984087660213743	WITHOUT_CLASSIFICATION	0.001591233978625642	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.9909062647882609	DEFECT	0.009093735211739035	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.9642156457612154	WITHOUT_CLASSIFICATION	0.035784354238784594	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.9955228701846396	WITHOUT_CLASSIFICATION	0.0044771298153604405	DEFECT
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.8720921436180886	WITHOUT_CLASSIFICATION	0.12790785638191138	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9993364235954012	WITHOUT_CLASSIFICATION	6.635764045988558E-4	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.7426824902405147	DEFECT	0.25731750975948525	WITHOUT_CLASSIFICATION
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.9547857502383017	WITHOUT_CLASSIFICATION	0.04521424976169836	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.9886963350588889	WITHOUT_CLASSIFICATION	0.011303664941111121	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9918614038307895	WITHOUT_CLASSIFICATION	0.0081385961692106	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9937786114934124	WITHOUT_CLASSIFICATION	0.0062213885065875605	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9782250083158879	WITHOUT_CLASSIFICATION	0.021774991684112156	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9705917534580215	WITHOUT_CLASSIFICATION	0.029408246541978576	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9998466934633813	WITHOUT_CLASSIFICATION	1.5330653661880847E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9968032274369714	WITHOUT_CLASSIFICATION	0.0031967725630286476	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9968032274369714	WITHOUT_CLASSIFICATION	0.0031967725630286476	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9985915525630935	WITHOUT_CLASSIFICATION	0.001408447436906508	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9999355898215545	WITHOUT_CLASSIFICATION	6.44101784456054E-5	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9108845182740078	WITHOUT_CLASSIFICATION	0.08911548172599217	DEFECT
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9864237506534308	WITHOUT_CLASSIFICATION	0.01357624934656928	DEFECT
// FIXME: This is wrong	DEFECT	0.9140138795507058	WITHOUT_CLASSIFICATION	0.0859861204492943	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9721672195867704	WITHOUT_CLASSIFICATION	0.02783278041322945	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.999915290181837	WITHOUT_CLASSIFICATION	8.470981816293546E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.727750008806954	DEFECT	0.2722499911930461	WITHOUT_CLASSIFICATION
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.999737555070924	WITHOUT_CLASSIFICATION	2.6244492907603716E-4	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9999302334616861	WITHOUT_CLASSIFICATION	6.976653831384154E-5	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9978616464261312	WITHOUT_CLASSIFICATION	0.0021383535738687402	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9939949151976305	WITHOUT_CLASSIFICATION	0.0060050848023694755	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9939949151976305	WITHOUT_CLASSIFICATION	0.0060050848023694755	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9973504681207894	WITHOUT_CLASSIFICATION	0.0026495318792106605	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9976238901313981	WITHOUT_CLASSIFICATION	0.002376109868602048	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.958621203834443	WITHOUT_CLASSIFICATION	0.04137879616555693	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9991856281830708	WITHOUT_CLASSIFICATION	8.143718169291649E-4	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.5393334724673213	DEFECT	0.4606665275326786	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.8331247107971753	WITHOUT_CLASSIFICATION	0.16687528920282474	DEFECT
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9999550829624282	WITHOUT_CLASSIFICATION	4.491703757180919E-5	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9859622639844101	WITHOUT_CLASSIFICATION	0.014037736015589835	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9985915525630935	WITHOUT_CLASSIFICATION	0.001408447436906508	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.992508338830625	WITHOUT_CLASSIFICATION	0.007491661169375003	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9932169180626559	WITHOUT_CLASSIFICATION	0.006783081937344071	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9459712228390292	WITHOUT_CLASSIFICATION	0.054028777160970765	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.9909049810990278	WITHOUT_CLASSIFICATION	0.009095018900972102	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9800222120892782	WITHOUT_CLASSIFICATION	0.019977787910721766	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.8970286088297084	DEFECT	0.10297139117029161	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9918614038307895	WITHOUT_CLASSIFICATION	0.0081385961692106	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9996724604602569	WITHOUT_CLASSIFICATION	3.275395397430828E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9978616464261312	WITHOUT_CLASSIFICATION	0.0021383535738687402	DEFECT
// TODO: we loose encoding information here, fix it	DEFECT	0.8480998855688469	WITHOUT_CLASSIFICATION	0.15190011443115317	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// TODO: don't require pop	DEFECT	0.9877177791874444	WITHOUT_CLASSIFICATION	0.012282220812555618	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.727750008806954	DEFECT	0.2722499911930461	WITHOUT_CLASSIFICATION
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.8685204632366386	WITHOUT_CLASSIFICATION	0.13147953676336144	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9939949151976305	WITHOUT_CLASSIFICATION	0.0060050848023694755	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9939949151976305	WITHOUT_CLASSIFICATION	0.0060050848023694755	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9976238901313981	WITHOUT_CLASSIFICATION	0.002376109868602048	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9976238901313981	WITHOUT_CLASSIFICATION	0.002376109868602048	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9976238901313981	WITHOUT_CLASSIFICATION	0.002376109868602048	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9976238901313981	WITHOUT_CLASSIFICATION	0.002376109868602048	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9976238901313981	WITHOUT_CLASSIFICATION	0.002376109868602048	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9976238901313981	WITHOUT_CLASSIFICATION	0.002376109868602048	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9682422755716231	WITHOUT_CLASSIFICATION	0.031757724428376856	DEFECT
