// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999999988277882	WITHOUT_CLASSIFICATION	1.1722117473055313E-9	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999898814949576	WITHOUT_CLASSIFICATION	1.0118505042472626E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998588287680138	WITHOUT_CLASSIFICATION	1.411712319861801E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998588287680138	WITHOUT_CLASSIFICATION	1.411712319861801E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999844132794771	WITHOUT_CLASSIFICATION	1.5586720522899157E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999844132794771	WITHOUT_CLASSIFICATION	1.5586720522899157E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999346088081127	WITHOUT_CLASSIFICATION	6.539119188731645E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999997791372717	WITHOUT_CLASSIFICATION	2.2086272818409123E-7	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999859797372522	WITHOUT_CLASSIFICATION	1.4020262747780159E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999840895225859	WITHOUT_CLASSIFICATION	1.591047741411481E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998225459403438	WITHOUT_CLASSIFICATION	1.7745405965623946E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998225459403438	WITHOUT_CLASSIFICATION	1.7745405965623946E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999938722813719	WITHOUT_CLASSIFICATION	6.127718628011672E-6	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997277030014644	WITHOUT_CLASSIFICATION	2.722969985355705E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997277030014644	WITHOUT_CLASSIFICATION	2.722969985355705E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9999559361761226	WITHOUT_CLASSIFICATION	4.406382387730982E-5	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999651074896695	WITHOUT_CLASSIFICATION	3.489251033059161E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999283676213716	WITHOUT_CLASSIFICATION	7.163237862847968E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999283676213716	WITHOUT_CLASSIFICATION	7.163237862847968E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999283676213716	WITHOUT_CLASSIFICATION	7.163237862847968E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999283676213716	WITHOUT_CLASSIFICATION	7.163237862847968E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999283676213716	WITHOUT_CLASSIFICATION	7.163237862847968E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999283676213716	WITHOUT_CLASSIFICATION	7.163237862847968E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999283676213716	WITHOUT_CLASSIFICATION	7.163237862847968E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999946021081486	WITHOUT_CLASSIFICATION	5.3978918513976275E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999946021081486	WITHOUT_CLASSIFICATION	5.3978918513976275E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999946021081486	WITHOUT_CLASSIFICATION	5.3978918513976275E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999946021081486	WITHOUT_CLASSIFICATION	5.3978918513976275E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999946021081486	WITHOUT_CLASSIFICATION	5.3978918513976275E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999946021081486	WITHOUT_CLASSIFICATION	5.3978918513976275E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999946021081486	WITHOUT_CLASSIFICATION	5.3978918513976275E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999665623906998	WITHOUT_CLASSIFICATION	3.343760930013886E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999665623906998	WITHOUT_CLASSIFICATION	3.343760930013886E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999665623906998	WITHOUT_CLASSIFICATION	3.343760930013886E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999665623906998	WITHOUT_CLASSIFICATION	3.343760930013886E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999665623906998	WITHOUT_CLASSIFICATION	3.343760930013886E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999665623906998	WITHOUT_CLASSIFICATION	3.343760930013886E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999407875659424	WITHOUT_CLASSIFICATION	5.921243405761758E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999407875659424	WITHOUT_CLASSIFICATION	5.921243405761758E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999407875659424	WITHOUT_CLASSIFICATION	5.921243405761758E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999407875659424	WITHOUT_CLASSIFICATION	5.921243405761758E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999407875659424	WITHOUT_CLASSIFICATION	5.921243405761758E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999407875659424	WITHOUT_CLASSIFICATION	5.921243405761758E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999091348640972	WITHOUT_CLASSIFICATION	9.086513590293483E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999091348640972	WITHOUT_CLASSIFICATION	9.086513590293483E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999091348640972	WITHOUT_CLASSIFICATION	9.086513590293483E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999091348640972	WITHOUT_CLASSIFICATION	9.086513590293483E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999091348640972	WITHOUT_CLASSIFICATION	9.086513590293483E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999091348640972	WITHOUT_CLASSIFICATION	9.086513590293483E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999091348640972	WITHOUT_CLASSIFICATION	9.086513590293483E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999379205265326	WITHOUT_CLASSIFICATION	6.207947346734569E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999379205265326	WITHOUT_CLASSIFICATION	6.207947346734569E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999379205265326	WITHOUT_CLASSIFICATION	6.207947346734569E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999379205265326	WITHOUT_CLASSIFICATION	6.207947346734569E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999956618363163	WITHOUT_CLASSIFICATION	4.338163683829163E-6	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999956618363163	WITHOUT_CLASSIFICATION	4.338163683829163E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993137606291	WITHOUT_CLASSIFICATION	6.8623937075057E-7	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999996636587564	WITHOUT_CLASSIFICATION	3.3634124361960075E-7	DEFECT
// name	WITHOUT_CLASSIFICATION	0.999997915652194	WITHOUT_CLASSIFICATION	2.0843478059663542E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999999495458893	WITHOUT_CLASSIFICATION	5.045411060762944E-8	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999997366014187	WITHOUT_CLASSIFICATION	2.633985813156416E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999994073226323	WITHOUT_CLASSIFICATION	5.926773677629821E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999994073226323	WITHOUT_CLASSIFICATION	5.926773677629821E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999994073226323	WITHOUT_CLASSIFICATION	5.926773677629821E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999994073226323	WITHOUT_CLASSIFICATION	5.926773677629821E-7	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9999285616992557	WITHOUT_CLASSIFICATION	7.143830074420374E-5	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999825974685808	WITHOUT_CLASSIFICATION	1.740253141919507E-5	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999978307573401	WITHOUT_CLASSIFICATION	2.1692426600133396E-6	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999992515601418	WITHOUT_CLASSIFICATION	7.484398581581382E-7	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999997570982139	WITHOUT_CLASSIFICATION	2.4290178615024237E-7	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999952894535092	WITHOUT_CLASSIFICATION	4.710546490770041E-6	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999955868484542	WITHOUT_CLASSIFICATION	4.4131515457231885E-6	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999999411440295	WITHOUT_CLASSIFICATION	5.8855970574469416E-8	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999999103821281	WITHOUT_CLASSIFICATION	8.961787190635228E-8	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9999558806252746	WITHOUT_CLASSIFICATION	4.411937472535786E-5	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999984798968833	WITHOUT_CLASSIFICATION	1.5201031166590765E-6	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999996241644334	WITHOUT_CLASSIFICATION	3.758355665242119E-7	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999761376316149	WITHOUT_CLASSIFICATION	2.3862368385133602E-5	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999999795170363	WITHOUT_CLASSIFICATION	2.0482963665949794E-8	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999985458858779	WITHOUT_CLASSIFICATION	1.454114122149384E-6	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999962706953163	WITHOUT_CLASSIFICATION	3.7293046837560813E-6	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999846282128454	WITHOUT_CLASSIFICATION	1.5371787154612432E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999994073226323	WITHOUT_CLASSIFICATION	5.926773677629821E-7	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999933291954545	WITHOUT_CLASSIFICATION	6.670804545478603E-6	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999995190492528	WITHOUT_CLASSIFICATION	4.809507472625065E-7	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999981057789586	WITHOUT_CLASSIFICATION	1.8942210414130908E-6	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.999997234336498	WITHOUT_CLASSIFICATION	2.765663501990567E-6	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9998015818795696	WITHOUT_CLASSIFICATION	1.984181204304093E-4	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.999995369421519	WITHOUT_CLASSIFICATION	4.630578480920207E-6	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999999923835863	WITHOUT_CLASSIFICATION	7.61641379264774E-9	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.99999997389149	WITHOUT_CLASSIFICATION	2.6108510038396545E-8	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999999807557198	WITHOUT_CLASSIFICATION	1.92442801241174E-8	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.998259955888748	WITHOUT_CLASSIFICATION	0.0017400441112519678	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9994292899504787	WITHOUT_CLASSIFICATION	5.707100495213104E-4	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999988193825058	WITHOUT_CLASSIFICATION	1.1806174942300619E-6	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999983747249902	WITHOUT_CLASSIFICATION	1.625275009799336E-6	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999999551349408	WITHOUT_CLASSIFICATION	4.48650593122296E-8	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999952882077561	WITHOUT_CLASSIFICATION	4.711792243958948E-6	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999944153409545	WITHOUT_CLASSIFICATION	5.58465904555724E-6	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999970133565061	WITHOUT_CLASSIFICATION	2.9866434938960012E-6	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999993664881636	WITHOUT_CLASSIFICATION	6.335118364232421E-7	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999994178738154	WITHOUT_CLASSIFICATION	5.821261845632328E-7	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999996252531268	WITHOUT_CLASSIFICATION	3.7474687321375133E-7	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9601826239918207	WITHOUT_CLASSIFICATION	0.03981737600817931	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.999998342699224	WITHOUT_CLASSIFICATION	1.6573007760079471E-6	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999962274678762	WITHOUT_CLASSIFICATION	3.772532123748039E-6	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999976778208821	WITHOUT_CLASSIFICATION	2.322179117997631E-6	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999960221272448	WITHOUT_CLASSIFICATION	3.977872755176518E-6	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9999261744643269	WITHOUT_CLASSIFICATION	7.38255356731779E-5	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999960166266303	WITHOUT_CLASSIFICATION	3.98337336966718E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999985196538981	WITHOUT_CLASSIFICATION	1.4803461019113461E-6	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999998981068594	WITHOUT_CLASSIFICATION	1.0189314058513513E-7	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999996548121822	WITHOUT_CLASSIFICATION	3.451878178673731E-7	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999866118421166	WITHOUT_CLASSIFICATION	1.3388157883375323E-5	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.999999277146518	WITHOUT_CLASSIFICATION	7.228534819246665E-7	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999965548090851	WITHOUT_CLASSIFICATION	3.445190914948725E-6	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999975589681824	WITHOUT_CLASSIFICATION	2.4410318175885275E-6	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.999938756379184	WITHOUT_CLASSIFICATION	6.12436208160834E-5	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999999144817479	WITHOUT_CLASSIFICATION	8.551825209182155E-8	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999986627994214	WITHOUT_CLASSIFICATION	1.3372005785487019E-6	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999998511138196	WITHOUT_CLASSIFICATION	1.48886180334583E-7	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999999811022229	WITHOUT_CLASSIFICATION	1.8897777073839727E-8	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999986619473004	WITHOUT_CLASSIFICATION	1.3380526996553894E-6	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999977650846819	WITHOUT_CLASSIFICATION	2.2349153180359793E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999964921060558	WITHOUT_CLASSIFICATION	3.5078939441386372E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.999819042492111	WITHOUT_CLASSIFICATION	1.8095750788901183E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999956573886188	WITHOUT_CLASSIFICATION	4.342611381213762E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999956573886188	WITHOUT_CLASSIFICATION	4.342611381213762E-6	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.999999988904105	WITHOUT_CLASSIFICATION	1.1095894928335191E-8	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999998863227738	WITHOUT_CLASSIFICATION	1.136772262145743E-7	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999949526987907	WITHOUT_CLASSIFICATION	5.047301209246609E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.999843273710241	WITHOUT_CLASSIFICATION	1.567262897589963E-4	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.99999889515164	WITHOUT_CLASSIFICATION	1.1048483599847664E-6	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.999889558269524	WITHOUT_CLASSIFICATION	1.1044173047604239E-4	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9999867556164502	WITHOUT_CLASSIFICATION	1.3244383549668052E-5	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999906844443393	WITHOUT_CLASSIFICATION	9.315555660727401E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999964921060558	WITHOUT_CLASSIFICATION	3.5078939441386372E-6	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999998771545565	WITHOUT_CLASSIFICATION	1.2284544341899552E-7	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.999995354809969	WITHOUT_CLASSIFICATION	4.645190030918518E-6	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999999063010796	WITHOUT_CLASSIFICATION	9.369892030181819E-8	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.999999998142446	WITHOUT_CLASSIFICATION	1.857554074992405E-9	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999999988077377	WITHOUT_CLASSIFICATION	1.1922622840799474E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999953290881	WITHOUT_CLASSIFICATION	4.670911824427429E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999953290881	WITHOUT_CLASSIFICATION	4.670911824427429E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999953290881	WITHOUT_CLASSIFICATION	4.670911824427429E-9	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999998481918014	WITHOUT_CLASSIFICATION	1.5180819856668297E-7	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999999978135156	WITHOUT_CLASSIFICATION	2.1864844193294145E-9	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999998997189494	WITHOUT_CLASSIFICATION	1.0028105061725463E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9912617317916497	WITHOUT_CLASSIFICATION	0.008738268208350343	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9998665823928534	WITHOUT_CLASSIFICATION	1.3341760714655226E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999999705348794	WITHOUT_CLASSIFICATION	2.9465120498529504E-8	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9997939957453608	WITHOUT_CLASSIFICATION	2.06004254639163E-4	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.99999974962159	WITHOUT_CLASSIFICATION	2.5037840997473835E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999995400937871	WITHOUT_CLASSIFICATION	4.599062128169754E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999995400937871	WITHOUT_CLASSIFICATION	4.599062128169754E-7	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999996970580857	WITHOUT_CLASSIFICATION	3.0294191427716696E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999823071529	WITHOUT_CLASSIFICATION	1.7692847163747922E-8	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999954468888409	WITHOUT_CLASSIFICATION	4.553111159147981E-6	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999954468888409	WITHOUT_CLASSIFICATION	4.553111159147981E-6	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999993834054473	WITHOUT_CLASSIFICATION	6.165945528131993E-7	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999999809667898	WITHOUT_CLASSIFICATION	1.903321022982067E-8	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999914429430476	WITHOUT_CLASSIFICATION	8.557056952383276E-6	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999999657208006	WITHOUT_CLASSIFICATION	3.4279199360977245E-8	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999962021184666	WITHOUT_CLASSIFICATION	3.7978815333253906E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999990926261577	WITHOUT_CLASSIFICATION	9.073738422695645E-7	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999986954630149	WITHOUT_CLASSIFICATION	1.304536985108957E-6	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999891134546346	WITHOUT_CLASSIFICATION	1.0886545365420725E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999990728304273	WITHOUT_CLASSIFICATION	9.271695726408887E-7	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999993209628881	WITHOUT_CLASSIFICATION	6.79037111931094E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999964921060558	WITHOUT_CLASSIFICATION	3.5078939441386372E-6	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.999999204744476	WITHOUT_CLASSIFICATION	7.952555240601315E-7	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999850342597	WITHOUT_CLASSIFICATION	1.496574025986203E-8	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999981684931458	WITHOUT_CLASSIFICATION	1.8315068542311411E-6	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.8197437896565893	WITHOUT_CLASSIFICATION	0.18025621034341063	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999751853076955	WITHOUT_CLASSIFICATION	2.4814692304464376E-5	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999744411417908	WITHOUT_CLASSIFICATION	2.5558858209265712E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999599971770318	WITHOUT_CLASSIFICATION	4.000282296820472E-5	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999203167551237	WITHOUT_CLASSIFICATION	7.968324487630187E-5	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999997802473817	WITHOUT_CLASSIFICATION	2.1975261835497572E-7	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9999884780046758	WITHOUT_CLASSIFICATION	1.15219953241783E-5	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9999999611084938	WITHOUT_CLASSIFICATION	3.889150621103115E-8	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999997084010046	WITHOUT_CLASSIFICATION	2.915989954086359E-7	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9999998545559511	WITHOUT_CLASSIFICATION	1.454440490134467E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999998486215311	WITHOUT_CLASSIFICATION	1.5137846878185492E-7	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9999992553323207	WITHOUT_CLASSIFICATION	7.446676793064043E-7	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9999925006945414	WITHOUT_CLASSIFICATION	7.499305458537202E-6	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999999812341038	WITHOUT_CLASSIFICATION	1.8765896143189134E-8	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999999609390785	WITHOUT_CLASSIFICATION	3.9060921484741146E-8	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999999444318297	WITHOUT_CLASSIFICATION	5.556817039179452E-8	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999999990871764	WITHOUT_CLASSIFICATION	9.128237482405222E-10	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999970763309411	WITHOUT_CLASSIFICATION	2.9236690587629245E-6	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999998999205489	WITHOUT_CLASSIFICATION	1.0007945101444189E-7	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999999602307916	WITHOUT_CLASSIFICATION	3.9769208385869694E-8	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999996562393704	WITHOUT_CLASSIFICATION	3.437606296478783E-7	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999964195433845	WITHOUT_CLASSIFICATION	3.580456615466989E-6	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999965620507322	WITHOUT_CLASSIFICATION	3.437949267836836E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.999996823790743	WITHOUT_CLASSIFICATION	3.1762092570125486E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999996945174703	WITHOUT_CLASSIFICATION	3.054825297509655E-7	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999989838873563	WITHOUT_CLASSIFICATION	1.0161126436298333E-6	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999998130200451	WITHOUT_CLASSIFICATION	1.8697995492405637E-7	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.999985983498402	WITHOUT_CLASSIFICATION	1.4016501598031446E-5	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999998481696597	WITHOUT_CLASSIFICATION	1.518303402045488E-7	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999985807126802	WITHOUT_CLASSIFICATION	1.419287319778889E-6	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999923798653916	WITHOUT_CLASSIFICATION	7.620134608442244E-6	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999998044744505	WITHOUT_CLASSIFICATION	1.955255495888518E-7	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999993250523384	WITHOUT_CLASSIFICATION	6.749476617003982E-7	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999995688941188	WITHOUT_CLASSIFICATION	4.311058812589988E-7	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.999991102191312	WITHOUT_CLASSIFICATION	8.89780868802139E-6	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999999920839037	WITHOUT_CLASSIFICATION	7.916096222224052E-9	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999956850179474	WITHOUT_CLASSIFICATION	4.314982052619119E-6	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999999494498991	WITHOUT_CLASSIFICATION	5.055010098262253E-8	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999999676122681	WITHOUT_CLASSIFICATION	3.238773196600613E-8	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999999957340775	WITHOUT_CLASSIFICATION	4.265922480848277E-9	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999999830694837	WITHOUT_CLASSIFICATION	1.6930516419189977E-8	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999959286942965	WITHOUT_CLASSIFICATION	4.071305703514117E-6	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.999999607281072	WITHOUT_CLASSIFICATION	3.9271892812493303E-7	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999991584172362	WITHOUT_CLASSIFICATION	8.415827638858653E-7	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999994049636068	WITHOUT_CLASSIFICATION	5.95036393188105E-7	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.999996561203931	WITHOUT_CLASSIFICATION	3.438796069021573E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999999316495777	WITHOUT_CLASSIFICATION	6.835042233769905E-8	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999989475537103	WITHOUT_CLASSIFICATION	1.052446289719757E-6	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.99999667749016	WITHOUT_CLASSIFICATION	3.3225098399091833E-6	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999984425138263	WITHOUT_CLASSIFICATION	1.557486173681666E-6	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999997495560413	WITHOUT_CLASSIFICATION	2.504439586873281E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999987394962934	WITHOUT_CLASSIFICATION	1.2605037066656914E-6	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999941515035866	WITHOUT_CLASSIFICATION	5.848496413448522E-6	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9999998104587345	WITHOUT_CLASSIFICATION	1.895412653507868E-7	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999978354845706	WITHOUT_CLASSIFICATION	2.164515429489383E-6	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.999999953916986	WITHOUT_CLASSIFICATION	4.608301397975263E-8	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999999564084796	WITHOUT_CLASSIFICATION	4.359152036208929E-8	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999973809218177	WITHOUT_CLASSIFICATION	2.6190781824099172E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999973809218177	WITHOUT_CLASSIFICATION	2.6190781824099172E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999978588282304	WITHOUT_CLASSIFICATION	2.1411717694908195E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999978588282304	WITHOUT_CLASSIFICATION	2.1411717694908195E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999978307952065	WITHOUT_CLASSIFICATION	2.169204793452195E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999978307952065	WITHOUT_CLASSIFICATION	2.169204793452195E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999948984021013	WITHOUT_CLASSIFICATION	5.101597898693642E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999948984021013	WITHOUT_CLASSIFICATION	5.101597898693642E-6	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999972282305645	WITHOUT_CLASSIFICATION	2.7717694355521398E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999997382255259	WITHOUT_CLASSIFICATION	2.6177447409010924E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.99999779733476	WITHOUT_CLASSIFICATION	2.2026652400404863E-6	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999830790325647	WITHOUT_CLASSIFICATION	1.692096743531693E-5	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999587199577685	WITHOUT_CLASSIFICATION	4.1280042231385914E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9998148998101625	WITHOUT_CLASSIFICATION	1.8510018983751607E-4	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999989798841681	WITHOUT_CLASSIFICATION	1.0201158319081569E-6	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999998702108498	WITHOUT_CLASSIFICATION	1.2978915025158156E-7	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999999393044785	WITHOUT_CLASSIFICATION	6.069552145174363E-8	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999999547271765	WITHOUT_CLASSIFICATION	4.527282344212936E-8	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999999935977016	WITHOUT_CLASSIFICATION	6.4022983864223654E-9	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999999628134529	WITHOUT_CLASSIFICATION	3.718654706244559E-8	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999998670745295	WITHOUT_CLASSIFICATION	1.3292547061540085E-7	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.999999998644101	WITHOUT_CLASSIFICATION	1.355898841622622E-9	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.999999854128639	WITHOUT_CLASSIFICATION	1.458713610445913E-7	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.999999383579691	WITHOUT_CLASSIFICATION	6.164203091260875E-7	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999997359158145	WITHOUT_CLASSIFICATION	2.640841854620227E-7	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999993609741812	WITHOUT_CLASSIFICATION	6.390258189303958E-7	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999914688516742	WITHOUT_CLASSIFICATION	8.53114832581719E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9992079571886631	WITHOUT_CLASSIFICATION	7.92042811336869E-4	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999998466058031	WITHOUT_CLASSIFICATION	1.5339419692859558E-7	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999990311477283	WITHOUT_CLASSIFICATION	9.688522717217872E-7	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999996054082365	WITHOUT_CLASSIFICATION	3.9459176351425486E-7	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999897928922185	WITHOUT_CLASSIFICATION	1.0207107781520668E-5	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999961413547395	WITHOUT_CLASSIFICATION	3.858645260611616E-6	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999999827112542	WITHOUT_CLASSIFICATION	1.72887457916923E-8	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999980648563811	WITHOUT_CLASSIFICATION	1.935143618930922E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999995365072687	WITHOUT_CLASSIFICATION	4.6349273139744214E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999995365072687	WITHOUT_CLASSIFICATION	4.6349273139744214E-7	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999999781229009	WITHOUT_CLASSIFICATION	2.187709920888062E-8	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.999999585368518	WITHOUT_CLASSIFICATION	4.1463148192338796E-7	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999993715660717	WITHOUT_CLASSIFICATION	6.284339283696311E-7	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.999997615468873	WITHOUT_CLASSIFICATION	2.384531126927044E-6	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999972857165463	WITHOUT_CLASSIFICATION	2.7142834536171495E-6	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999996118471262	WITHOUT_CLASSIFICATION	3.8815287378866024E-7	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999945061032155	WITHOUT_CLASSIFICATION	5.49389678448403E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999945061032155	WITHOUT_CLASSIFICATION	5.49389678448403E-6	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.99999991278261	WITHOUT_CLASSIFICATION	8.72173899776357E-8	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9979401593508548	WITHOUT_CLASSIFICATION	0.0020598406491452426	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999991239484342	WITHOUT_CLASSIFICATION	8.760515659096292E-7	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999991239484342	WITHOUT_CLASSIFICATION	8.760515659096292E-7	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9999980419292567	WITHOUT_CLASSIFICATION	1.9580707433395114E-6	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.99942662468919	WITHOUT_CLASSIFICATION	5.733753108100754E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.99942662468919	WITHOUT_CLASSIFICATION	5.733753108100754E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999994542237204	WITHOUT_CLASSIFICATION	5.457762796185481E-7	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999994542237204	WITHOUT_CLASSIFICATION	5.457762796185481E-7	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999919061648652	WITHOUT_CLASSIFICATION	8.093835134746155E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999919061648652	WITHOUT_CLASSIFICATION	8.093835134746155E-6	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9999967554783203	WITHOUT_CLASSIFICATION	3.2445216796181765E-6	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999991803134453	WITHOUT_CLASSIFICATION	8.196865547735505E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999999036057678	WITHOUT_CLASSIFICATION	9.639423212493046E-8	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.999997726861489	WITHOUT_CLASSIFICATION	2.273138511053279E-6	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999999925475922	WITHOUT_CLASSIFICATION	7.45240780930227E-9	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999998861034514	WITHOUT_CLASSIFICATION	1.1389654863180712E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999984971375631	WITHOUT_CLASSIFICATION	1.5028624369819138E-6	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.999998050652596	WITHOUT_CLASSIFICATION	1.9493474039818702E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999984971375631	WITHOUT_CLASSIFICATION	1.5028624369819138E-6	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9999982684635826	WITHOUT_CLASSIFICATION	1.7315364174378613E-6	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999997956062391	WITHOUT_CLASSIFICATION	2.0439376081937404E-7	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999999253015835	WITHOUT_CLASSIFICATION	7.4698416433964E-8	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.99997450590127	WITHOUT_CLASSIFICATION	2.5494098729908824E-5	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999999543167758	WITHOUT_CLASSIFICATION	4.568322417919786E-8	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9999772896895869	WITHOUT_CLASSIFICATION	2.271031041314969E-5	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999990459440148	WITHOUT_CLASSIFICATION	9.540559851561956E-7	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.999999722886936	WITHOUT_CLASSIFICATION	2.771130640442355E-7	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999995075059478	WITHOUT_CLASSIFICATION	4.924940521930849E-7	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999997158633984	WITHOUT_CLASSIFICATION	2.8413660164055364E-7	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999997481448503	WITHOUT_CLASSIFICATION	2.5185514970701984E-7	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999999601729841	WITHOUT_CLASSIFICATION	3.982701596569906E-8	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999941257620143	WITHOUT_CLASSIFICATION	5.874237985705171E-6	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999998083775984	WITHOUT_CLASSIFICATION	1.916224016472716E-7	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999990305187005	WITHOUT_CLASSIFICATION	9.694812994985638E-7	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.999999926165992	WITHOUT_CLASSIFICATION	7.383400807742315E-8	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999956706803804	WITHOUT_CLASSIFICATION	4.329319619612191E-6	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.999999880089204	WITHOUT_CLASSIFICATION	1.1991079594599095E-7	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999996234977258	WITHOUT_CLASSIFICATION	3.7650227424316194E-7	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999994397876232	WITHOUT_CLASSIFICATION	5.602123767744812E-7	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9999863534272858	WITHOUT_CLASSIFICATION	1.3646572714266778E-5	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999999774988767	WITHOUT_CLASSIFICATION	2.2501123306549774E-8	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999994800971511	WITHOUT_CLASSIFICATION	5.199028489126515E-7	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999981013389606	WITHOUT_CLASSIFICATION	1.8986610394293004E-6	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9999996681648172	WITHOUT_CLASSIFICATION	3.3183518281575046E-7	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999999271353951	WITHOUT_CLASSIFICATION	7.286460488951625E-8	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999999962598445	WITHOUT_CLASSIFICATION	3.740155479454403E-9	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999999950071293	WITHOUT_CLASSIFICATION	4.9928707060307494E-9	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999995498232103	WITHOUT_CLASSIFICATION	4.501767897027124E-7	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999997158257516	WITHOUT_CLASSIFICATION	2.8417424830960387E-7	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999995724845983	WITHOUT_CLASSIFICATION	4.275154017168222E-7	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999999831813459	WITHOUT_CLASSIFICATION	1.6818654095157192E-8	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999999542850777	WITHOUT_CLASSIFICATION	4.571492242229978E-8	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999990425256554	WITHOUT_CLASSIFICATION	9.574743445230166E-7	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999962330425551	WITHOUT_CLASSIFICATION	3.766957444822299E-6	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.99999865947892	WITHOUT_CLASSIFICATION	1.3405210800026747E-6	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9999996122863567	WITHOUT_CLASSIFICATION	3.8771364326919597E-7	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999987078111431	WITHOUT_CLASSIFICATION	1.2921888569165124E-6	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999999072350116	WITHOUT_CLASSIFICATION	9.276498836303667E-8	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999984732236066	WITHOUT_CLASSIFICATION	1.5267763934644815E-6	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999999389359606	WITHOUT_CLASSIFICATION	6.106403934958341E-8	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999965596758145	WITHOUT_CLASSIFICATION	3.440324185533706E-6	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999998330556644	WITHOUT_CLASSIFICATION	1.6694433549552456E-7	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999998198199315	WITHOUT_CLASSIFICATION	1.8018006847728112E-7	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999999441820144	WITHOUT_CLASSIFICATION	5.581798549949304E-8	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999999610524815	WITHOUT_CLASSIFICATION	3.8947518485412934E-8	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999999130364646	WITHOUT_CLASSIFICATION	8.696353536348814E-8	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999994692815704	WITHOUT_CLASSIFICATION	5.307184297630011E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999998449028987	WITHOUT_CLASSIFICATION	1.5509710125359343E-7	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.999998678211922	WITHOUT_CLASSIFICATION	1.3217880779818137E-6	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999992706910872	WITHOUT_CLASSIFICATION	7.293089127944861E-7	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999999757951227	WITHOUT_CLASSIFICATION	2.420487728272514E-8	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9997503436911747	WITHOUT_CLASSIFICATION	2.496563088253427E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999998953196753	WITHOUT_CLASSIFICATION	1.046803247957044E-7	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999871094477	WITHOUT_CLASSIFICATION	1.2890552279225075E-8	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999871094477	WITHOUT_CLASSIFICATION	1.2890552279225075E-8	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999950010238594	WITHOUT_CLASSIFICATION	4.9989761405683135E-6	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999791495744057	WITHOUT_CLASSIFICATION	2.0850425594245655E-5	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999993270464325	WITHOUT_CLASSIFICATION	6.729535675910428E-7	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999979059360221	WITHOUT_CLASSIFICATION	2.0940639779257626E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999871243471194	WITHOUT_CLASSIFICATION	1.2875652880484743E-5	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.999996419462532	WITHOUT_CLASSIFICATION	3.5805374678973504E-6	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9999930562710149	WITHOUT_CLASSIFICATION	6.943728985139835E-6	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999999213871068	WITHOUT_CLASSIFICATION	7.861289323643915E-8	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999996799577423	WITHOUT_CLASSIFICATION	3.200422577336557E-7	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.999999317626882	WITHOUT_CLASSIFICATION	6.823731180504616E-7	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999967351029474	WITHOUT_CLASSIFICATION	3.264897052710481E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999967351029474	WITHOUT_CLASSIFICATION	3.264897052710481E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999996133444706	WITHOUT_CLASSIFICATION	3.8665552931663164E-7	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999920919617608	WITHOUT_CLASSIFICATION	7.9080382392559E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999426128631239	WITHOUT_CLASSIFICATION	5.738713687608401E-5	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999988521195528	WITHOUT_CLASSIFICATION	1.1478804472643068E-6	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999991507443913	WITHOUT_CLASSIFICATION	8.492556087672259E-7	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999999815201657	WITHOUT_CLASSIFICATION	1.8479834284259784E-8	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999996389651952	WITHOUT_CLASSIFICATION	3.6103480483172336E-7	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999993695199091	WITHOUT_CLASSIFICATION	6.304800909240251E-7	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999998880041753	WITHOUT_CLASSIFICATION	1.1199582460301255E-7	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999995732545313	WITHOUT_CLASSIFICATION	4.2674546871061067E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999994490679841	WITHOUT_CLASSIFICATION	5.509320158095058E-7	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.999999907432879	WITHOUT_CLASSIFICATION	9.256712095683945E-8	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999947491947098	WITHOUT_CLASSIFICATION	5.25080529014199E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999947491947098	WITHOUT_CLASSIFICATION	5.25080529014199E-6	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999732083694831	WITHOUT_CLASSIFICATION	2.679163051679114E-5	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999918007562082	WITHOUT_CLASSIFICATION	8.199243791803321E-6	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999871893106088	WITHOUT_CLASSIFICATION	1.2810689391179401E-5	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9999994110885325	WITHOUT_CLASSIFICATION	5.889114675911569E-7	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.999999606386194	WITHOUT_CLASSIFICATION	3.936138059963746E-7	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999998596205416	WITHOUT_CLASSIFICATION	1.4037945841233647E-7	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999702565850916	WITHOUT_CLASSIFICATION	2.9743414908375994E-5	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999996368176215	WITHOUT_CLASSIFICATION	3.631823785560836E-7	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9999670069661684	WITHOUT_CLASSIFICATION	3.2993033831633954E-5	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999999604243243	WITHOUT_CLASSIFICATION	3.957567573379095E-8	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999426128631239	WITHOUT_CLASSIFICATION	5.738713687608401E-5	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9999943996064349	WITHOUT_CLASSIFICATION	5.600393565183906E-6	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9999689572812954	WITHOUT_CLASSIFICATION	3.104271870461171E-5	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999999765853669	WITHOUT_CLASSIFICATION	2.341463308821292E-8	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999999883753281	WITHOUT_CLASSIFICATION	1.162467185517052E-8	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999999945751397	WITHOUT_CLASSIFICATION	5.424860340262405E-9	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999969359696483	WITHOUT_CLASSIFICATION	3.0640303517670767E-6	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999998441333043	WITHOUT_CLASSIFICATION	1.5586669558397748E-7	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999977181575502	WITHOUT_CLASSIFICATION	2.281842449780688E-6	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999996105100075	WITHOUT_CLASSIFICATION	3.8948999248424085E-7	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999984558798477	WITHOUT_CLASSIFICATION	1.5441201522257131E-6	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999977197765586	WITHOUT_CLASSIFICATION	2.2802234413768966E-6	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999973773900145	WITHOUT_CLASSIFICATION	2.622609985469952E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999995033432365	WITHOUT_CLASSIFICATION	4.966567633851509E-7	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9999405371701455	WITHOUT_CLASSIFICATION	5.946282985447237E-5	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999997939638852	WITHOUT_CLASSIFICATION	2.060361148062588E-7	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999998908383876	WITHOUT_CLASSIFICATION	1.0916161231598219E-7	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999991241713219	WITHOUT_CLASSIFICATION	8.758286780724603E-7	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.999999318673818	WITHOUT_CLASSIFICATION	6.813261819176051E-7	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.999994132040121	WITHOUT_CLASSIFICATION	5.867959879044187E-6	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999986302439722	WITHOUT_CLASSIFICATION	1.3697560278390023E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9998508576849438	WITHOUT_CLASSIFICATION	1.4914231505620232E-4	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999994154595414	WITHOUT_CLASSIFICATION	5.845404585427981E-7	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.999979108364397	WITHOUT_CLASSIFICATION	2.0891635602945578E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9992982790177865	WITHOUT_CLASSIFICATION	7.017209822134963E-4	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999930644437004	WITHOUT_CLASSIFICATION	6.935556299523469E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999999999602109	WITHOUT_CLASSIFICATION	3.9789125533329306E-11	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999696142452001	WITHOUT_CLASSIFICATION	3.038575479990978E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999990287226402	WITHOUT_CLASSIFICATION	9.712773597430807E-7	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999996618264979	WITHOUT_CLASSIFICATION	3.381735021513357E-7	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9999653880814928	WITHOUT_CLASSIFICATION	3.4611918507190246E-5	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999956950793153	WITHOUT_CLASSIFICATION	4.304920684778421E-6	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999956950793153	WITHOUT_CLASSIFICATION	4.304920684778421E-6	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999950525953314	WITHOUT_CLASSIFICATION	4.947404668611479E-6	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.999991965813584	WITHOUT_CLASSIFICATION	8.034186415945666E-6	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999999922123223	WITHOUT_CLASSIFICATION	7.787677759593584E-9	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999925142002267	WITHOUT_CLASSIFICATION	7.485799773374205E-6	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999968313204054	WITHOUT_CLASSIFICATION	3.168679594706875E-6	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999997459010732	WITHOUT_CLASSIFICATION	2.5409892681961703E-7	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999964921060558	WITHOUT_CLASSIFICATION	3.5078939441386372E-6	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.999999313047559	WITHOUT_CLASSIFICATION	6.869524409654965E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999932207399699	WITHOUT_CLASSIFICATION	6.779260030157192E-6	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999985917361893	WITHOUT_CLASSIFICATION	1.4082638107433427E-6	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999994334887521	WITHOUT_CLASSIFICATION	5.665112478681095E-7	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999999694203855	WITHOUT_CLASSIFICATION	3.057961448872601E-8	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999870968074454	WITHOUT_CLASSIFICATION	1.2903192554549986E-5	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999956850179474	WITHOUT_CLASSIFICATION	4.314982052619119E-6	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999972477010171	WITHOUT_CLASSIFICATION	2.7522989830386964E-6	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999985019041379	WITHOUT_CLASSIFICATION	1.498095862092828E-6	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9999631726906917	WITHOUT_CLASSIFICATION	3.6827309308312746E-5	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999999788542498	WITHOUT_CLASSIFICATION	2.114575007481925E-8	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999999156616545	WITHOUT_CLASSIFICATION	8.433834543502034E-8	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999857989295853	WITHOUT_CLASSIFICATION	1.4201070414598138E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999999699654196	WITHOUT_CLASSIFICATION	3.003458033620997E-8	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999999699654196	WITHOUT_CLASSIFICATION	3.003458033620997E-8	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999998082785243	WITHOUT_CLASSIFICATION	1.9172147572309207E-7	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.999999998300826	WITHOUT_CLASSIFICATION	1.6991739544478166E-9	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999957785325461	WITHOUT_CLASSIFICATION	4.2214674539249555E-6	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999998615480606	WITHOUT_CLASSIFICATION	1.3845193944004666E-7	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999999756598287	WITHOUT_CLASSIFICATION	2.4340171280272098E-8	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999999586878414	WITHOUT_CLASSIFICATION	4.131215863317827E-8	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999997790681945	WITHOUT_CLASSIFICATION	2.2093180546488105E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999964467048	WITHOUT_CLASSIFICATION	3.5532952601368733E-9	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999998309802169	WITHOUT_CLASSIFICATION	1.6901978297843988E-7	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999999999943961	WITHOUT_CLASSIFICATION	5.603787847238123E-12	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999998911942762	WITHOUT_CLASSIFICATION	1.0880572374853562E-7	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999266496441642	WITHOUT_CLASSIFICATION	7.335035583573332E-5	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999999946346908	WITHOUT_CLASSIFICATION	5.365309221878765E-9	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.999999997079174	WITHOUT_CLASSIFICATION	2.920826126461341E-9	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999999445963125	WITHOUT_CLASSIFICATION	5.5403687669867305E-8	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999522861871976	WITHOUT_CLASSIFICATION	4.771381280250189E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999979320588704	WITHOUT_CLASSIFICATION	2.067941129575327E-6	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999997539368664	WITHOUT_CLASSIFICATION	2.460631336355929E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.99997862815307	WITHOUT_CLASSIFICATION	2.1371846929960214E-5	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999992289777988	WITHOUT_CLASSIFICATION	7.710222012581073E-7	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9999889763520636	WITHOUT_CLASSIFICATION	1.1023647936395827E-5	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999982572273175	WITHOUT_CLASSIFICATION	1.74277268254274E-6	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999999386243293	WITHOUT_CLASSIFICATION	6.137567065996638E-8	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.958352980061513	WITHOUT_CLASSIFICATION	0.04164701993848697	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999970860053827	WITHOUT_CLASSIFICATION	2.913994617184059E-6	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9999981857509942	WITHOUT_CLASSIFICATION	1.8142490058907377E-6	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999979490535306	WITHOUT_CLASSIFICATION	2.050946469413414E-6	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999992153348377	WITHOUT_CLASSIFICATION	7.846651622627761E-7	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999983683111082	WITHOUT_CLASSIFICATION	1.631688891858559E-6	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999987524371845	WITHOUT_CLASSIFICATION	1.2475628155426972E-6	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9999992175126198	WITHOUT_CLASSIFICATION	7.824873801996279E-7	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999991157165473	WITHOUT_CLASSIFICATION	8.842834527002942E-7	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999992568164588	WITHOUT_CLASSIFICATION	7.431835410165462E-7	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999933811405756	WITHOUT_CLASSIFICATION	6.618859424461653E-6	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9998420993662545	WITHOUT_CLASSIFICATION	1.579006337456096E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9999586845463085	WITHOUT_CLASSIFICATION	4.1315453691471165E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.999671284689031	WITHOUT_CLASSIFICATION	3.287153109690128E-4	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999997843353031	WITHOUT_CLASSIFICATION	2.1566469698545383E-7	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999923604327081	WITHOUT_CLASSIFICATION	7.639567291755556E-6	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999962620395495	WITHOUT_CLASSIFICATION	3.7379604504524854E-6	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999967568734668	WITHOUT_CLASSIFICATION	3.2431265332790545E-6	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.999990497939012	WITHOUT_CLASSIFICATION	9.502060988001077E-6	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9999979959912961	WITHOUT_CLASSIFICATION	2.004008703833559E-6	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999859733016727	WITHOUT_CLASSIFICATION	1.4026698327205004E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999883372456451	WITHOUT_CLASSIFICATION	1.1662754354946702E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999859733016727	WITHOUT_CLASSIFICATION	1.4026698327205004E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9794897370807006	WITHOUT_CLASSIFICATION	0.020510262919299305	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9998823379921751	WITHOUT_CLASSIFICATION	1.1766200782494325E-4	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999986804620032	WITHOUT_CLASSIFICATION	1.3195379967451292E-6	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9689161093302825	WITHOUT_CLASSIFICATION	0.031083890669717444	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999839535550903	WITHOUT_CLASSIFICATION	1.604644490965323E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999560564178	WITHOUT_CLASSIFICATION	4.394358218538552E-8	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999989972959691	WITHOUT_CLASSIFICATION	1.002704030974441E-6	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9996673830799687	WITHOUT_CLASSIFICATION	3.3261692003125473E-4	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999999478487742	WITHOUT_CLASSIFICATION	5.215122578732381E-8	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.6302475710893612	WITHOUT_CLASSIFICATION	0.36975242891063875	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9995454767855685	WITHOUT_CLASSIFICATION	4.5452321443156086E-4	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999999820571819	WITHOUT_CLASSIFICATION	1.794281819021704E-8	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999995015840143	WITHOUT_CLASSIFICATION	4.984159857011566E-7	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999976980310495	WITHOUT_CLASSIFICATION	2.3019689504641948E-6	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.999998259976171	WITHOUT_CLASSIFICATION	1.7400238290284773E-6	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9996949006396916	WITHOUT_CLASSIFICATION	3.0509936030838163E-4	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.999996251268533	WITHOUT_CLASSIFICATION	3.7487314669707627E-6	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999951074700735	WITHOUT_CLASSIFICATION	4.892529926516471E-6	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999994396147439	WITHOUT_CLASSIFICATION	5.603852560555522E-7	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999982983481454	WITHOUT_CLASSIFICATION	1.701651854733514E-6	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9999755609713888	WITHOUT_CLASSIFICATION	2.4439028611116773E-5	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999996511301787	WITHOUT_CLASSIFICATION	3.4886982126090315E-7	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999841226345462	WITHOUT_CLASSIFICATION	1.58773654538968E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999999232501082	WITHOUT_CLASSIFICATION	7.674989181310566E-8	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999997674732041	WITHOUT_CLASSIFICATION	2.3252679592018719E-7	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999926819626546	WITHOUT_CLASSIFICATION	7.3180373454567374E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999932464010888	WITHOUT_CLASSIFICATION	6.753598911179204E-6	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999986726095579	WITHOUT_CLASSIFICATION	1.3273904421326607E-6	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999984798968833	WITHOUT_CLASSIFICATION	1.5201031166590765E-6	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9999999588485682	WITHOUT_CLASSIFICATION	4.1151431882764963E-8	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999888845247217	WITHOUT_CLASSIFICATION	1.111547527840295E-5	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999724688498058	WITHOUT_CLASSIFICATION	2.7531150194194417E-5	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.999987653109993	WITHOUT_CLASSIFICATION	1.2346890007061823E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999997268601746	WITHOUT_CLASSIFICATION	2.7313982541771676E-7	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999999891971727	WITHOUT_CLASSIFICATION	1.0802827316419436E-8	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999997878080048	WITHOUT_CLASSIFICATION	2.121919952113353E-7	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999984028854123	WITHOUT_CLASSIFICATION	1.5971145876785507E-6	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999953496542	WITHOUT_CLASSIFICATION	4.650345798786472E-9	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999997826300295	WITHOUT_CLASSIFICATION	2.1736997046447959E-7	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999980050430702	WITHOUT_CLASSIFICATION	1.9949569298046185E-6	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999448662172827	WITHOUT_CLASSIFICATION	5.513378271729396E-5	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999999179087588	WITHOUT_CLASSIFICATION	8.209124117509795E-8	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.99999999328874	WITHOUT_CLASSIFICATION	6.711259907841864E-9	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999933831243151	WITHOUT_CLASSIFICATION	6.61687568491674E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999933831243151	WITHOUT_CLASSIFICATION	6.61687568491674E-6	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999996591513483	WITHOUT_CLASSIFICATION	3.408486518446888E-7	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999982910402185	WITHOUT_CLASSIFICATION	1.7089597814432498E-6	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9987522009413917	WITHOUT_CLASSIFICATION	0.0012477990586082463	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999990616055748	WITHOUT_CLASSIFICATION	9.383944252875628E-7	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999995367733292	WITHOUT_CLASSIFICATION	4.632266708374047E-7	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999992237662307	WITHOUT_CLASSIFICATION	7.762337693006187E-7	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9999992246521573	WITHOUT_CLASSIFICATION	7.753478426538944E-7	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999997172963262	WITHOUT_CLASSIFICATION	2.827036738479979E-7	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999999896906971	WITHOUT_CLASSIFICATION	1.0309302958750353E-8	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999999949399457	WITHOUT_CLASSIFICATION	5.060054176788612E-9	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999999825219854	WITHOUT_CLASSIFICATION	1.7478014579909015E-8	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999926275187749	WITHOUT_CLASSIFICATION	7.37248122504048E-6	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9997853014807018	WITHOUT_CLASSIFICATION	2.1469851929813732E-4	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999999154893159	WITHOUT_CLASSIFICATION	8.451068409960705E-8	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999999791984296	WITHOUT_CLASSIFICATION	2.0801570449820574E-8	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999999513822192	WITHOUT_CLASSIFICATION	4.861778079417605E-8	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999999382398275	WITHOUT_CLASSIFICATION	6.176017251584446E-8	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999965237430383	WITHOUT_CLASSIFICATION	3.476256961722013E-6	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999995908596045	WITHOUT_CLASSIFICATION	4.091403953891445E-7	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999996011875695	WITHOUT_CLASSIFICATION	3.9881243046612994E-7	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.5498572097064087	DEFECT	0.4501427902935912	WITHOUT_CLASSIFICATION
// FIXME warning	WITHOUT_CLASSIFICATION	0.8148911499755551	DEFECT	0.1851088500244449	WITHOUT_CLASSIFICATION
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999999927133847	WITHOUT_CLASSIFICATION	7.286615268101567E-9	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999999997869039	WITHOUT_CLASSIFICATION	2.1309599621671101E-10	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9990556406338105	WITHOUT_CLASSIFICATION	9.443593661896165E-4	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999926011063	WITHOUT_CLASSIFICATION	7.3988938083551585E-9	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999993978811859	WITHOUT_CLASSIFICATION	6.021188141945655E-7	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9999196851042685	WITHOUT_CLASSIFICATION	8.03148957314225E-5	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.999998812071918	WITHOUT_CLASSIFICATION	1.1879280819561018E-6	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999939387778499	WITHOUT_CLASSIFICATION	6.061222150160483E-6	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999999631509104	WITHOUT_CLASSIFICATION	3.6849089553122315E-8	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9999995010670627	WITHOUT_CLASSIFICATION	4.989329373950464E-7	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999999844681973	WITHOUT_CLASSIFICATION	1.553180271422211E-8	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999997412429065	WITHOUT_CLASSIFICATION	2.587570935289481E-7	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999999154493924	WITHOUT_CLASSIFICATION	8.455060766944212E-8	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999999881776365	WITHOUT_CLASSIFICATION	1.1822363464922339E-8	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999671598650383	WITHOUT_CLASSIFICATION	3.284013496178969E-5	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999855526897948	WITHOUT_CLASSIFICATION	1.4447310205226236E-5	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9994287415920572	WITHOUT_CLASSIFICATION	5.712584079426781E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999982296570639	WITHOUT_CLASSIFICATION	1.7703429361058456E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999956360483313	WITHOUT_CLASSIFICATION	4.363951668752819E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9988306966850847	WITHOUT_CLASSIFICATION	0.0011693033149152918	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9999971222019645	WITHOUT_CLASSIFICATION	2.8777980354712078E-6	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999998243646193	WITHOUT_CLASSIFICATION	1.7563538069062813E-7	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999633345184017	WITHOUT_CLASSIFICATION	3.666548159830619E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999995738930316	WITHOUT_CLASSIFICATION	4.2610696833456585E-7	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999979326779349	WITHOUT_CLASSIFICATION	2.0673220651137883E-6	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9999964478723204	WITHOUT_CLASSIFICATION	3.5521276794257158E-6	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999938043425957	WITHOUT_CLASSIFICATION	6.19565740436718E-6	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999986074686819	WITHOUT_CLASSIFICATION	1.3925313180699384E-6	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999944590516373	WITHOUT_CLASSIFICATION	5.540948362737851E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999992034139709	WITHOUT_CLASSIFICATION	7.965860292131088E-7	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999999777340361	WITHOUT_CLASSIFICATION	2.226596383831952E-8	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999998370076968	WITHOUT_CLASSIFICATION	1.6299230317558656E-7	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999967978590418	WITHOUT_CLASSIFICATION	3.2021409581526874E-6	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999997402697353	WITHOUT_CLASSIFICATION	2.597302647565466E-7	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999999286200079	WITHOUT_CLASSIFICATION	7.137999219902323E-8	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999990638327442	WITHOUT_CLASSIFICATION	9.361672556931968E-7	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999975833196941	WITHOUT_CLASSIFICATION	2.4166803057941337E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999945041330541	WITHOUT_CLASSIFICATION	5.495866945918473E-6	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999999723927679	WITHOUT_CLASSIFICATION	2.7607232129102957E-8	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999998757053843	WITHOUT_CLASSIFICATION	1.2429461575008775E-7	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.999999929220502	WITHOUT_CLASSIFICATION	7.07794979909791E-8	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.999999236528295	WITHOUT_CLASSIFICATION	7.634717050398339E-7	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999999057621912	WITHOUT_CLASSIFICATION	9.423780871903624E-8	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999970160152891	WITHOUT_CLASSIFICATION	2.983984710936032E-6	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999859820144998	WITHOUT_CLASSIFICATION	1.4017985500281653E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999999969731923	WITHOUT_CLASSIFICATION	3.026807669096307E-9	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999839215859208	WITHOUT_CLASSIFICATION	1.6078414079227915E-5	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999986534925352	WITHOUT_CLASSIFICATION	1.3465074647689267E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9999597495035213	WITHOUT_CLASSIFICATION	4.0250496478824885E-5	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999923029888802	WITHOUT_CLASSIFICATION	7.697011119698847E-6	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999996242714603	WITHOUT_CLASSIFICATION	3.7572853980268123E-7	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9999856556706357	WITHOUT_CLASSIFICATION	1.4344329364255735E-5	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9997181904800767	WITHOUT_CLASSIFICATION	2.818095199232702E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9997822625020266	WITHOUT_CLASSIFICATION	2.177374979733171E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.999678402557946	WITHOUT_CLASSIFICATION	3.215974420539392E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9997410458832655	WITHOUT_CLASSIFICATION	2.589541167344982E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9997008727873226	WITHOUT_CLASSIFICATION	2.9912721267745984E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9995375980507503	WITHOUT_CLASSIFICATION	4.624019492497239E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9995842361640619	WITHOUT_CLASSIFICATION	4.1576383593808946E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9997251959342024	WITHOUT_CLASSIFICATION	2.748040657976706E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9997588319334632	WITHOUT_CLASSIFICATION	2.411680665368567E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.999624515451763	WITHOUT_CLASSIFICATION	3.7548454823702716E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9997463211610115	WITHOUT_CLASSIFICATION	2.5367883898850656E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9994907773720403	WITHOUT_CLASSIFICATION	5.092226279596416E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9996382319554009	WITHOUT_CLASSIFICATION	3.617680445991113E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9994642474212431	WITHOUT_CLASSIFICATION	5.35752578756961E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9995742395005123	WITHOUT_CLASSIFICATION	4.2576049948781023E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9993609421929878	WITHOUT_CLASSIFICATION	6.390578070122549E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9995529736194224	WITHOUT_CLASSIFICATION	4.470263805775764E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9989350302779344	WITHOUT_CLASSIFICATION	0.0010649697220654918	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9996002043764864	WITHOUT_CLASSIFICATION	3.9979562351349473E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999999646273922	WITHOUT_CLASSIFICATION	3.537260776960165E-8	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999999906514458	WITHOUT_CLASSIFICATION	9.348554150241458E-9	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.999994722868796	WITHOUT_CLASSIFICATION	5.277131204074202E-6	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999996658094533	WITHOUT_CLASSIFICATION	3.341905466348808E-7	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.999859659039532	WITHOUT_CLASSIFICATION	1.4034096046800572E-4	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999979143768375	WITHOUT_CLASSIFICATION	2.0856231625380492E-6	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999988666680286	WITHOUT_CLASSIFICATION	1.133331971397408E-6	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9992954508922095	WITHOUT_CLASSIFICATION	7.045491077905956E-4	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.999999795838223	WITHOUT_CLASSIFICATION	2.0416177708456847E-7	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999997185262663	WITHOUT_CLASSIFICATION	2.814737336724281E-7	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.9715157348034907	WITHOUT_CLASSIFICATION	0.028484265196509175	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.999999480440234	WITHOUT_CLASSIFICATION	5.195597659040946E-7	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999978446049168	WITHOUT_CLASSIFICATION	2.155395083088879E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999996265690777	WITHOUT_CLASSIFICATION	3.7343092227941863E-7	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999996265690777	WITHOUT_CLASSIFICATION	3.7343092227941863E-7	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999891760385338	WITHOUT_CLASSIFICATION	1.0823961466185892E-5	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999844531157983	WITHOUT_CLASSIFICATION	1.5546884201744235E-5	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999999907950832	WITHOUT_CLASSIFICATION	9.204916747423997E-9	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999978003872668	WITHOUT_CLASSIFICATION	2.1996127331016253E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999945142174956	WITHOUT_CLASSIFICATION	5.485782504418158E-6	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999988403160329	WITHOUT_CLASSIFICATION	1.1596839670131477E-6	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999993487732979	WITHOUT_CLASSIFICATION	6.512267021464879E-7	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999998056381642	WITHOUT_CLASSIFICATION	1.943618357103608E-7	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.999999929295308	WITHOUT_CLASSIFICATION	7.070469196944522E-8	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999998384048546	WITHOUT_CLASSIFICATION	1.6159514542796963E-7	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9999936736827638	WITHOUT_CLASSIFICATION	6.326317236137499E-6	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999999357336178	WITHOUT_CLASSIFICATION	6.426638227007104E-8	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999911624241429	WITHOUT_CLASSIFICATION	8.837575857044277E-6	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.999935508223301	WITHOUT_CLASSIFICATION	6.449177669900476E-5	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999999840122048	WITHOUT_CLASSIFICATION	1.598779516781677E-8	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999997179626958	WITHOUT_CLASSIFICATION	2.820373042408541E-7	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.999995369421519	WITHOUT_CLASSIFICATION	4.630578480920207E-6	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999999178662038	WITHOUT_CLASSIFICATION	8.213379621420612E-8	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9988421806402855	WITHOUT_CLASSIFICATION	0.00115781935971443	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999947070668727	WITHOUT_CLASSIFICATION	5.2929331272585985E-6	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999998458575827	WITHOUT_CLASSIFICATION	1.5414241733664714E-7	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999998483802118	WITHOUT_CLASSIFICATION	1.51619788175932E-7	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999987513902662	WITHOUT_CLASSIFICATION	1.2486097338926747E-6	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999998921745709	WITHOUT_CLASSIFICATION	1.078254291569705E-7	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999781610476993	WITHOUT_CLASSIFICATION	2.1838952300668267E-5	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.999999763770241	WITHOUT_CLASSIFICATION	2.362297589172596E-7	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999999764876799	WITHOUT_CLASSIFICATION	2.3512319998336985E-8	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.99999999551479	WITHOUT_CLASSIFICATION	4.485209994363839E-9	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999998983319871	WITHOUT_CLASSIFICATION	1.0166801290723413E-7	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9999904520984735	WITHOUT_CLASSIFICATION	9.54790152650021E-6	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999996490157603	WITHOUT_CLASSIFICATION	3.509842397113047E-7	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999690135279363	WITHOUT_CLASSIFICATION	3.098647206366057E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9999909527486031	WITHOUT_CLASSIFICATION	9.047251397019533E-6	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999990410105241	WITHOUT_CLASSIFICATION	9.589894760005461E-7	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999889697127841	WITHOUT_CLASSIFICATION	1.1030287215901285E-5	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999958192611985	WITHOUT_CLASSIFICATION	4.1807388014851255E-6	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999993956482793	WITHOUT_CLASSIFICATION	6.043517205896126E-7	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.99999988000701	WITHOUT_CLASSIFICATION	1.1999298988968944E-7	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999219530362958	WITHOUT_CLASSIFICATION	7.804696370421378E-5	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999999506929043	WITHOUT_CLASSIFICATION	4.9307095653027456E-8	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999944491053517	WITHOUT_CLASSIFICATION	5.550894648327901E-6	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999916306334272	WITHOUT_CLASSIFICATION	8.36936657269585E-6	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.999999798918573	WITHOUT_CLASSIFICATION	2.0108142689907556E-7	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999995866478695	WITHOUT_CLASSIFICATION	4.133521304834447E-7	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999995866478695	WITHOUT_CLASSIFICATION	4.133521304834447E-7	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999639105579371	WITHOUT_CLASSIFICATION	3.6089442062861746E-5	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999961913687434	WITHOUT_CLASSIFICATION	3.808631256471083E-6	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999990664946142	WITHOUT_CLASSIFICATION	9.335053857321892E-7	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999998622469782	WITHOUT_CLASSIFICATION	1.377530217452701E-7	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.999997207192654	WITHOUT_CLASSIFICATION	2.7928073459838292E-6	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999988475041198	WITHOUT_CLASSIFICATION	1.1524958801964463E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999999998461727	WITHOUT_CLASSIFICATION	1.5382728521733543E-10	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999103727699336	WITHOUT_CLASSIFICATION	8.962723006645287E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999718988644462	WITHOUT_CLASSIFICATION	2.810113555381737E-5	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999842810185817	WITHOUT_CLASSIFICATION	1.5718981418270942E-5	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999810693549706	WITHOUT_CLASSIFICATION	1.893064502945068E-5	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999999011720173	WITHOUT_CLASSIFICATION	9.882798270122144E-8	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9999909755406223	WITHOUT_CLASSIFICATION	9.024459377652173E-6	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999984401505323	WITHOUT_CLASSIFICATION	1.5598494677070523E-6	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9976044274885785	WITHOUT_CLASSIFICATION	0.002395572511421592	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999935231213546	WITHOUT_CLASSIFICATION	6.4768786454918256E-6	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999903864669488	WITHOUT_CLASSIFICATION	9.613533051172046E-6	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9999994428618842	WITHOUT_CLASSIFICATION	5.571381158258958E-7	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999956744942521	WITHOUT_CLASSIFICATION	4.325505747982941E-6	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.999991102191312	WITHOUT_CLASSIFICATION	8.89780868802139E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999909161050127	WITHOUT_CLASSIFICATION	9.083894987300175E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999909161050127	WITHOUT_CLASSIFICATION	9.083894987300175E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999949191328	WITHOUT_CLASSIFICATION	5.080867201145858E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999949191328	WITHOUT_CLASSIFICATION	5.080867201145858E-8	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999997990280493	WITHOUT_CLASSIFICATION	2.0097195065230067E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999995428657595	WITHOUT_CLASSIFICATION	4.5713424045988197E-7	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999576763851538	WITHOUT_CLASSIFICATION	4.2323614846218895E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999999462423185	WITHOUT_CLASSIFICATION	5.375768161337253E-8	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999999036057678	WITHOUT_CLASSIFICATION	9.639423212493046E-8	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999998813876608	WITHOUT_CLASSIFICATION	1.1861233915428102E-7	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9856629847465879	WITHOUT_CLASSIFICATION	0.014337015253412085	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999994251316655	WITHOUT_CLASSIFICATION	5.748683345701354E-7	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999999959244537	WITHOUT_CLASSIFICATION	4.075546387983018E-9	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999386601310455	WITHOUT_CLASSIFICATION	6.13398689545657E-5	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999996358831985	WITHOUT_CLASSIFICATION	3.641168015752676E-7	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999994064244752	WITHOUT_CLASSIFICATION	5.935755247495631E-7	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999997665558203	WITHOUT_CLASSIFICATION	2.3344417965748306E-7	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9997380916506151	WITHOUT_CLASSIFICATION	2.61908349384904E-4	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999999538425384	WITHOUT_CLASSIFICATION	4.61574616927277E-8	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999999541316043	WITHOUT_CLASSIFICATION	4.5868395638668144E-8	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999999308585121	WITHOUT_CLASSIFICATION	6.914148793526537E-8	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.999999903605711	WITHOUT_CLASSIFICATION	9.639428907639135E-8	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9999949519057583	WITHOUT_CLASSIFICATION	5.048094241716614E-6	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9999724491385809	WITHOUT_CLASSIFICATION	2.7550861419069416E-5	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999990646991141	WITHOUT_CLASSIFICATION	9.35300885772556E-7	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999999925685815	WITHOUT_CLASSIFICATION	7.4314185230029175E-9	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.999996142085755	WITHOUT_CLASSIFICATION	3.857914244943428E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999932464010888	WITHOUT_CLASSIFICATION	6.753598911179204E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999992237662307	WITHOUT_CLASSIFICATION	7.762337693006187E-7	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.999999864013718	WITHOUT_CLASSIFICATION	1.3598628205325077E-7	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9999977296567942	WITHOUT_CLASSIFICATION	2.2703432056369074E-6	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999993542348382	WITHOUT_CLASSIFICATION	6.457651618854868E-7	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9988446580081148	WITHOUT_CLASSIFICATION	0.0011553419918852155	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999994772087303	WITHOUT_CLASSIFICATION	5.227912696811236E-7	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999994772087303	WITHOUT_CLASSIFICATION	5.227912696811236E-7	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999978040402215	WITHOUT_CLASSIFICATION	2.1959597785139802E-6	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999943773044845	WITHOUT_CLASSIFICATION	5.62269551551872E-6	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.999999829236981	WITHOUT_CLASSIFICATION	1.707630189429127E-7	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999996319220171	WITHOUT_CLASSIFICATION	3.6807798281653445E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999866345615229	WITHOUT_CLASSIFICATION	1.3365438477104533E-5	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999999376110709	WITHOUT_CLASSIFICATION	6.238892917891706E-8	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999999400761044	WITHOUT_CLASSIFICATION	5.992389561487194E-8	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999999928216728	WITHOUT_CLASSIFICATION	7.178327202674908E-9	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999999986255632	WITHOUT_CLASSIFICATION	1.3744368435999656E-9	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999966168946915	WITHOUT_CLASSIFICATION	3.3831053084866387E-6	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.999999934451061	WITHOUT_CLASSIFICATION	6.554893905313345E-8	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999999733347439	WITHOUT_CLASSIFICATION	2.6665256076137154E-8	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999999622960399	WITHOUT_CLASSIFICATION	3.770395996777691E-8	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999962189617811	WITHOUT_CLASSIFICATION	3.781038218821561E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999998276478461	WITHOUT_CLASSIFICATION	1.7235215387764965E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.99999779733476	WITHOUT_CLASSIFICATION	2.2026652400404863E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998638874944862	WITHOUT_CLASSIFICATION	1.361125055138064E-4	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999997779719136	WITHOUT_CLASSIFICATION	2.220280862833671E-7	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999991808663496	WITHOUT_CLASSIFICATION	8.191336504068942E-7	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9999171031187103	WITHOUT_CLASSIFICATION	8.289688128975961E-5	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999997228024002	WITHOUT_CLASSIFICATION	2.771975998538408E-7	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999974521242903	WITHOUT_CLASSIFICATION	2.547875709669726E-6	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.999988856311098	WITHOUT_CLASSIFICATION	1.114368890208591E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999990972224286	WITHOUT_CLASSIFICATION	9.027775713965741E-7	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.999991141340185	WITHOUT_CLASSIFICATION	8.858659815059874E-6	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999931814544578	WITHOUT_CLASSIFICATION	6.818545542090811E-6	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999998014090099	WITHOUT_CLASSIFICATION	1.9859099015658868E-7	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9998298045365973	WITHOUT_CLASSIFICATION	1.701954634025744E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.999999800894653	WITHOUT_CLASSIFICATION	1.9910534701795842E-7	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9999879788655718	WITHOUT_CLASSIFICATION	1.2021134428278375E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999920678613246	WITHOUT_CLASSIFICATION	7.932138675480819E-6	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999991080309204	WITHOUT_CLASSIFICATION	8.919690797113889E-7	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999999649705023	WITHOUT_CLASSIFICATION	3.5029497702816104E-8	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999937891491344	WITHOUT_CLASSIFICATION	6.210850865505278E-6	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.999890450591291	WITHOUT_CLASSIFICATION	1.0954940870895624E-4	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999906755040545	WITHOUT_CLASSIFICATION	9.324495945556054E-6	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999957405008889	WITHOUT_CLASSIFICATION	4.259499111086713E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.999486287112767	WITHOUT_CLASSIFICATION	5.137128872329775E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999998448695219	WITHOUT_CLASSIFICATION	1.5513047810577499E-7	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999985613722792	WITHOUT_CLASSIFICATION	1.4386277208903242E-6	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999999627745026	WITHOUT_CLASSIFICATION	3.7225497264466715E-8	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999999959580919	WITHOUT_CLASSIFICATION	4.041908126558051E-9	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.999999591658229	WITHOUT_CLASSIFICATION	4.083417709843755E-7	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999986171336058	WITHOUT_CLASSIFICATION	1.3828663942424977E-6	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.999960654897246	WITHOUT_CLASSIFICATION	3.934510275410591E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999997259961629	WITHOUT_CLASSIFICATION	2.740038371440946E-7	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999997907025773	WITHOUT_CLASSIFICATION	2.092974227309588E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999994727256	WITHOUT_CLASSIFICATION	5.27274475132567E-10	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999998985856136	WITHOUT_CLASSIFICATION	1.0141438633253172E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999996875473466	WITHOUT_CLASSIFICATION	3.124526534662689E-7	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999550806424623	WITHOUT_CLASSIFICATION	4.491935753766842E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999536982040487	WITHOUT_CLASSIFICATION	4.63017959513268E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999610478388419	WITHOUT_CLASSIFICATION	3.895216115804555E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999535809730729	WITHOUT_CLASSIFICATION	4.641902692718273E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999916530386885	WITHOUT_CLASSIFICATION	8.34696131151684E-6	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999985634802636	WITHOUT_CLASSIFICATION	1.4365197363454975E-6	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999981667618321	WITHOUT_CLASSIFICATION	1.8332381680283869E-6	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9999928092853582	WITHOUT_CLASSIFICATION	7.190714641790955E-6	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999992224502552	WITHOUT_CLASSIFICATION	7.775497448930667E-7	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999986264281298	WITHOUT_CLASSIFICATION	1.3735718702041435E-6	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999711515373485	WITHOUT_CLASSIFICATION	2.8848462651428255E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999550806424623	WITHOUT_CLASSIFICATION	4.491935753766842E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999610478388419	WITHOUT_CLASSIFICATION	3.895216115804555E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999536982040487	WITHOUT_CLASSIFICATION	4.63017959513268E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9998787836698376	WITHOUT_CLASSIFICATION	1.212163301623523E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999918242469249	WITHOUT_CLASSIFICATION	8.175753075140149E-6	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999975104710618	WITHOUT_CLASSIFICATION	2.489528938228943E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999999419474932	WITHOUT_CLASSIFICATION	5.805250673221722E-8	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999994423287667	WITHOUT_CLASSIFICATION	5.576712332844493E-7	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.999999966334618	WITHOUT_CLASSIFICATION	3.3665381957370135E-8	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.999999404310993	WITHOUT_CLASSIFICATION	5.9568900705887E-7	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.999999968282346	WITHOUT_CLASSIFICATION	3.171765395376136E-8	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999984691252871	WITHOUT_CLASSIFICATION	1.530874712837505E-6	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999999822334628	WITHOUT_CLASSIFICATION	1.776653720821966E-8	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999999498805232	WITHOUT_CLASSIFICATION	5.0119476870615304E-8	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9994002533120807	WITHOUT_CLASSIFICATION	5.997466879193234E-4	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999996475024125	WITHOUT_CLASSIFICATION	3.5249758738350666E-7	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999998778440382	WITHOUT_CLASSIFICATION	1.221559617698995E-7	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999941561267952	WITHOUT_CLASSIFICATION	5.84387320477627E-6	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999995646043834	WITHOUT_CLASSIFICATION	4.353956165838928E-7	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999943980897646	WITHOUT_CLASSIFICATION	5.601910235330036E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999975868892701	WITHOUT_CLASSIFICATION	2.4131107299592768E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999975868892701	WITHOUT_CLASSIFICATION	2.4131107299592768E-6	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999997706873889	WITHOUT_CLASSIFICATION	2.2931261108956582E-7	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999999961766173	WITHOUT_CLASSIFICATION	3.823382774461184E-9	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999999464660025	WITHOUT_CLASSIFICATION	5.3533997545227125E-8	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9999885027834592	WITHOUT_CLASSIFICATION	1.1497216540785095E-5	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999996057799752	WITHOUT_CLASSIFICATION	3.9422002475862174E-7	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999999982629567	WITHOUT_CLASSIFICATION	1.7370432867267671E-9	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.999999979060313	WITHOUT_CLASSIFICATION	2.093968691547168E-8	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999997730924427	WITHOUT_CLASSIFICATION	2.2690755724348536E-7	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999999619165476	WITHOUT_CLASSIFICATION	3.808345240839574E-8	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999999548568755	WITHOUT_CLASSIFICATION	4.514312455724562E-8	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999996871782749	WITHOUT_CLASSIFICATION	3.128217250848626E-7	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999971969819373	WITHOUT_CLASSIFICATION	2.803018062654634E-6	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.999997784940969	WITHOUT_CLASSIFICATION	2.215059030969629E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999889621497613	WITHOUT_CLASSIFICATION	1.1037850238681541E-5	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999955511872408	WITHOUT_CLASSIFICATION	4.448812759263993E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999469452415	WITHOUT_CLASSIFICATION	5.3054758407107854E-8	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999999097549728	WITHOUT_CLASSIFICATION	9.02450272696635E-8	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999933333511246	WITHOUT_CLASSIFICATION	6.666648875407487E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999933333511246	WITHOUT_CLASSIFICATION	6.666648875407487E-6	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999932392750668	WITHOUT_CLASSIFICATION	6.760724933326833E-6	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.999995427770134	WITHOUT_CLASSIFICATION	4.5722298661002054E-6	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999584715533036	WITHOUT_CLASSIFICATION	4.152844669631217E-5	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999987263435585	WITHOUT_CLASSIFICATION	1.2736564416059323E-6	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999993732384278	WITHOUT_CLASSIFICATION	6.267615721939571E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999933333511246	WITHOUT_CLASSIFICATION	6.666648875407487E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999933333511246	WITHOUT_CLASSIFICATION	6.666648875407487E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999989908847	WITHOUT_CLASSIFICATION	1.0091152604559402E-9	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999989908847	WITHOUT_CLASSIFICATION	1.0091152604559402E-9	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999976377347731	WITHOUT_CLASSIFICATION	2.3622652268952262E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999979054289201	WITHOUT_CLASSIFICATION	2.094571079869576E-6	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999897687468032	WITHOUT_CLASSIFICATION	1.0231253196831073E-5	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9996371464521487	WITHOUT_CLASSIFICATION	3.628535478512251E-4	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999846936951245	WITHOUT_CLASSIFICATION	1.530630487542581E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999846936951245	WITHOUT_CLASSIFICATION	1.530630487542581E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999999546350075	WITHOUT_CLASSIFICATION	4.5364992478387057E-8	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999742566049858	WITHOUT_CLASSIFICATION	2.5743395014193346E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999994215948559	WITHOUT_CLASSIFICATION	5.784051441502091E-7	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.999999627005935	WITHOUT_CLASSIFICATION	3.729940649081062E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999989525943	WITHOUT_CLASSIFICATION	1.047405621501483E-9	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999544777207	WITHOUT_CLASSIFICATION	4.55222793142697E-8	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9999306412037231	WITHOUT_CLASSIFICATION	6.935879627696034E-5	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999996498502332	WITHOUT_CLASSIFICATION	3.5014976685713656E-7	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999823971083828	WITHOUT_CLASSIFICATION	1.7602891617208273E-5	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999999998297172	WITHOUT_CLASSIFICATION	1.7028280020024276E-10	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9997160594200358	WITHOUT_CLASSIFICATION	2.83940579964102E-4	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999999266866515	WITHOUT_CLASSIFICATION	7.331334852514916E-8	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999980014989913	WITHOUT_CLASSIFICATION	1.998501008622414E-6	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.99999997093481	WITHOUT_CLASSIFICATION	2.9065189949519904E-8	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999469452415	WITHOUT_CLASSIFICATION	5.3054758407107854E-8	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999933333511246	WITHOUT_CLASSIFICATION	6.666648875407487E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999989908847	WITHOUT_CLASSIFICATION	1.0091152604559402E-9	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999544777207	WITHOUT_CLASSIFICATION	4.55222793142697E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999833559316827	WITHOUT_CLASSIFICATION	1.664406831724299E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999833559316827	WITHOUT_CLASSIFICATION	1.664406831724299E-5	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999993157097706	WITHOUT_CLASSIFICATION	6.842902292727735E-7	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999999997750262	WITHOUT_CLASSIFICATION	2.2497384275269E-10	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999999981622492	WITHOUT_CLASSIFICATION	1.8377508244104384E-9	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999999533209565	WITHOUT_CLASSIFICATION	4.6679043569147286E-8	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999987683424727	WITHOUT_CLASSIFICATION	1.231657527312911E-6	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999998713443079	WITHOUT_CLASSIFICATION	1.2865569204053111E-7	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9999251971323088	WITHOUT_CLASSIFICATION	7.480286769130393E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999923822301388	WITHOUT_CLASSIFICATION	7.617769861272748E-6	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999832004713	WITHOUT_CLASSIFICATION	1.6799528667531757E-8	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.999999991390075	WITHOUT_CLASSIFICATION	8.60992502888153E-9	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999996987872724	WITHOUT_CLASSIFICATION	3.0121272756253525E-7	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999999909253016	WITHOUT_CLASSIFICATION	9.074698421689102E-9	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999957221674112	WITHOUT_CLASSIFICATION	4.277832588876354E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999999097549728	WITHOUT_CLASSIFICATION	9.02450272696635E-8	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999989908847	WITHOUT_CLASSIFICATION	1.0091152604559402E-9	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999742566049858	WITHOUT_CLASSIFICATION	2.5743395014193346E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999994215948559	WITHOUT_CLASSIFICATION	5.784051441502091E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999994215948559	WITHOUT_CLASSIFICATION	5.784051441502091E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999989525943	WITHOUT_CLASSIFICATION	1.047405621501483E-9	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999544777207	WITHOUT_CLASSIFICATION	4.55222793142697E-8	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999544777207	WITHOUT_CLASSIFICATION	4.55222793142697E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999833559316827	WITHOUT_CLASSIFICATION	1.664406831724299E-5	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999999330233252	WITHOUT_CLASSIFICATION	6.697667475026617E-8	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.999988583297314	WITHOUT_CLASSIFICATION	1.1416702685951966E-5	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999999836641976	WITHOUT_CLASSIFICATION	1.6335802293397957E-8	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999894997588	WITHOUT_CLASSIFICATION	1.0500241191087538E-8	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9999965436411944	WITHOUT_CLASSIFICATION	3.4563588055141494E-6	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9998795700857758	WITHOUT_CLASSIFICATION	1.204299142241376E-4	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999998248540153	WITHOUT_CLASSIFICATION	1.751459847324483E-7	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999999506795356	WITHOUT_CLASSIFICATION	4.9320464340763045E-8	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999999967321116	WITHOUT_CLASSIFICATION	3.267888427153911E-9	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999742566049858	WITHOUT_CLASSIFICATION	2.5743395014193346E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999994215948559	WITHOUT_CLASSIFICATION	5.784051441502091E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999994215948559	WITHOUT_CLASSIFICATION	5.784051441502091E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999989525943	WITHOUT_CLASSIFICATION	1.047405621501483E-9	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999923822301388	WITHOUT_CLASSIFICATION	7.617769861272748E-6	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.999999991390075	WITHOUT_CLASSIFICATION	8.60992502888153E-9	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999970041437449	WITHOUT_CLASSIFICATION	2.9958562550672047E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999998940359638	WITHOUT_CLASSIFICATION	1.0596403620467936E-7	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999964208805029	WITHOUT_CLASSIFICATION	3.5791194970504587E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999964208805029	WITHOUT_CLASSIFICATION	3.5791194970504587E-6	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999972303489086	WITHOUT_CLASSIFICATION	2.7696510912897963E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999982375398428	WITHOUT_CLASSIFICATION	1.7624601571471288E-6	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999995263834744	WITHOUT_CLASSIFICATION	4.7361652559412063E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999990890403142	WITHOUT_CLASSIFICATION	9.109596856705006E-7	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.999999984876726	WITHOUT_CLASSIFICATION	1.5123274026916368E-8	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.999999984876726	WITHOUT_CLASSIFICATION	1.5123274026916368E-8	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999994101593422	WITHOUT_CLASSIFICATION	5.898406577751157E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999994101593422	WITHOUT_CLASSIFICATION	5.898406577751157E-7	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999527047618	WITHOUT_CLASSIFICATION	4.729523822213638E-8	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999527047618	WITHOUT_CLASSIFICATION	4.729523822213638E-8	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999996721339692	WITHOUT_CLASSIFICATION	3.2786603082800756E-7	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999892299218801	WITHOUT_CLASSIFICATION	1.0770078119799128E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.999999069936668	WITHOUT_CLASSIFICATION	9.30063331864644E-7	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999980525840817	WITHOUT_CLASSIFICATION	1.9474159182777964E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999998456792278	WITHOUT_CLASSIFICATION	1.5432077226759999E-7	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999998593330138	WITHOUT_CLASSIFICATION	1.4066698625017123E-7	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999996951065784	WITHOUT_CLASSIFICATION	3.0489342160112027E-7	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.999999968285748	WITHOUT_CLASSIFICATION	3.171425199568449E-8	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999998818021272	WITHOUT_CLASSIFICATION	1.1819787281092091E-7	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999990301963676	WITHOUT_CLASSIFICATION	9.698036324596944E-7	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999997896228141	WITHOUT_CLASSIFICATION	2.1037718598404057E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999988065440671	WITHOUT_CLASSIFICATION	1.1934559328220602E-6	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9996503151432168	WITHOUT_CLASSIFICATION	3.4968485678328994E-4	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999831480043215	WITHOUT_CLASSIFICATION	1.6851995678406076E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999831480043215	WITHOUT_CLASSIFICATION	1.6851995678406076E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9999901916729537	WITHOUT_CLASSIFICATION	9.808327046338589E-6	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999998813876608	WITHOUT_CLASSIFICATION	1.1861233915428102E-7	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9997231548104071	WITHOUT_CLASSIFICATION	2.768451895928941E-4	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999999842234674	WITHOUT_CLASSIFICATION	1.577653267033719E-8	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.999999980352363	WITHOUT_CLASSIFICATION	1.9647636964506578E-8	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999999456082189	WITHOUT_CLASSIFICATION	5.4391781071267355E-8	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.999999947255659	WITHOUT_CLASSIFICATION	5.27443409199635E-8	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999966146674768	WITHOUT_CLASSIFICATION	3.385332523284063E-6	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999998924723341	WITHOUT_CLASSIFICATION	1.075276659014191E-7	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999905378789749	WITHOUT_CLASSIFICATION	9.462121025070742E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999999027775707	WITHOUT_CLASSIFICATION	9.722242926739303E-8	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9999896497373758	WITHOUT_CLASSIFICATION	1.0350262624282167E-5	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999998137396159	WITHOUT_CLASSIFICATION	1.8626038415604204E-7	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999998963971862	WITHOUT_CLASSIFICATION	1.0360281383571901E-7	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999958412289186	WITHOUT_CLASSIFICATION	4.158771081376038E-6	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999986832065677	WITHOUT_CLASSIFICATION	1.3167934323482308E-6	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999797287620036	WITHOUT_CLASSIFICATION	2.027123799634865E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.999999991749973	WITHOUT_CLASSIFICATION	8.250027081840594E-9	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999998432621504	WITHOUT_CLASSIFICATION	1.5673784957520921E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999998432621504	WITHOUT_CLASSIFICATION	1.5673784957520921E-7	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.999997643929443	WITHOUT_CLASSIFICATION	2.356070557011163E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999992124557028	WITHOUT_CLASSIFICATION	7.875442971207469E-7	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.999965543089985	WITHOUT_CLASSIFICATION	3.4456910014956047E-5	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.999965543089985	WITHOUT_CLASSIFICATION	3.4456910014956047E-5	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999991443160954	WITHOUT_CLASSIFICATION	8.556839046541005E-7	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9999986419505957	WITHOUT_CLASSIFICATION	1.3580494043133237E-6	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999978868407835	WITHOUT_CLASSIFICATION	2.113159216499568E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999939708603909	WITHOUT_CLASSIFICATION	6.029139609181037E-6	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999996998567461	WITHOUT_CLASSIFICATION	3.0014325386032865E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999996290412428	WITHOUT_CLASSIFICATION	3.709587572501134E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999996290412428	WITHOUT_CLASSIFICATION	3.709587572501134E-7	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999996076164296	WITHOUT_CLASSIFICATION	3.923835704122687E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999997920273962	WITHOUT_CLASSIFICATION	2.079726036881317E-7	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999998308274297	WITHOUT_CLASSIFICATION	1.6917257033960055E-7	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999995085878686	WITHOUT_CLASSIFICATION	4.914121314449684E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999992124557028	WITHOUT_CLASSIFICATION	7.875442971207469E-7	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999987541772982	WITHOUT_CLASSIFICATION	1.2458227017799207E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999971680052103	WITHOUT_CLASSIFICATION	2.8319947897121194E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999971680052103	WITHOUT_CLASSIFICATION	2.8319947897121194E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.99999936824503	WITHOUT_CLASSIFICATION	6.317549700642415E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.999999994198038	WITHOUT_CLASSIFICATION	5.801961968475897E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.999999994198038	WITHOUT_CLASSIFICATION	5.801961968475897E-9	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999978907047167	WITHOUT_CLASSIFICATION	2.109295283416132E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999978907047167	WITHOUT_CLASSIFICATION	2.109295283416132E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999978907047167	WITHOUT_CLASSIFICATION	2.109295283416132E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.999999994198038	WITHOUT_CLASSIFICATION	5.801961968475897E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.999999994198038	WITHOUT_CLASSIFICATION	5.801961968475897E-9	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.99999936824503	WITHOUT_CLASSIFICATION	6.317549700642415E-7	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999998936895647	WITHOUT_CLASSIFICATION	1.0631043529012166E-7	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999958408639605	WITHOUT_CLASSIFICATION	4.159136039529296E-6	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9999814238737272	WITHOUT_CLASSIFICATION	1.8576126272728893E-5	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999991677562831	WITHOUT_CLASSIFICATION	8.322437169096285E-7	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.999999674130553	WITHOUT_CLASSIFICATION	3.2586944692113186E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999999172835685	WITHOUT_CLASSIFICATION	8.27164315144041E-8	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999999934789117	WITHOUT_CLASSIFICATION	6.5210883256106724E-9	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.99999292261232	WITHOUT_CLASSIFICATION	7.077387679975626E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999999027775707	WITHOUT_CLASSIFICATION	9.722242926739303E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.999999994198038	WITHOUT_CLASSIFICATION	5.801961968475897E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.999999994198038	WITHOUT_CLASSIFICATION	5.801961968475897E-9	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999997894326879	WITHOUT_CLASSIFICATION	2.1056731220901197E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999983597414529	WITHOUT_CLASSIFICATION	1.6402585470617448E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999998278149896	WITHOUT_CLASSIFICATION	1.7218501044212662E-7	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9998357140613011	WITHOUT_CLASSIFICATION	1.6428593869878533E-4	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999999127110688	WITHOUT_CLASSIFICATION	8.728893119122449E-8	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999995094570817	WITHOUT_CLASSIFICATION	4.905429182789245E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.999999965640924	WITHOUT_CLASSIFICATION	3.4359076008506065E-8	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999985535054321	WITHOUT_CLASSIFICATION	1.4464945678206133E-6	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999999137158414	WITHOUT_CLASSIFICATION	8.628415852984371E-8	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9998949922184754	WITHOUT_CLASSIFICATION	1.0500778152448177E-4	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999944507158766	WITHOUT_CLASSIFICATION	5.549284123381967E-6	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999998576447675	WITHOUT_CLASSIFICATION	1.4235523245019973E-7	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999989593517716	WITHOUT_CLASSIFICATION	1.0406482283646666E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999637562401	WITHOUT_CLASSIFICATION	3.624375984688165E-8	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999999999225888	WITHOUT_CLASSIFICATION	7.7411203008205E-11	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999988903116341	WITHOUT_CLASSIFICATION	1.1096883658046906E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999988903116341	WITHOUT_CLASSIFICATION	1.1096883658046906E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999988903116341	WITHOUT_CLASSIFICATION	1.1096883658046906E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999998991956828	WITHOUT_CLASSIFICATION	1.0080431724574228E-7	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999997772449322	WITHOUT_CLASSIFICATION	2.2275506788812502E-7	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999999483503892	WITHOUT_CLASSIFICATION	5.1649610804973795E-8	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9999452451874574	WITHOUT_CLASSIFICATION	5.475481254252424E-5	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.999999992289441	WITHOUT_CLASSIFICATION	7.710558903944211E-9	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999999901904812	WITHOUT_CLASSIFICATION	9.80951885626532E-9	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999999932714	WITHOUT_CLASSIFICATION	6.728639299546626E-12	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999999637745056	WITHOUT_CLASSIFICATION	3.622549432859148E-8	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.999999994203381	WITHOUT_CLASSIFICATION	5.7966189769574595E-9	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999993206326842	WITHOUT_CLASSIFICATION	6.793673159004089E-7	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999907932706134	WITHOUT_CLASSIFICATION	9.206729386682008E-6	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9999535676599528	WITHOUT_CLASSIFICATION	4.643234004719035E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999996076164296	WITHOUT_CLASSIFICATION	3.923835704122687E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.999999994198038	WITHOUT_CLASSIFICATION	5.801961968475897E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.999999994198038	WITHOUT_CLASSIFICATION	5.801961968475897E-9	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.99999936824503	WITHOUT_CLASSIFICATION	6.317549700642415E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999999172835685	WITHOUT_CLASSIFICATION	8.27164315144041E-8	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999983597414529	WITHOUT_CLASSIFICATION	1.6402585470617448E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9998357140613011	WITHOUT_CLASSIFICATION	1.6428593869878533E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999995094570817	WITHOUT_CLASSIFICATION	4.905429182789245E-7	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999998278149896	WITHOUT_CLASSIFICATION	1.7218501044212662E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.999999965640924	WITHOUT_CLASSIFICATION	3.4359076008506065E-8	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9998949922184754	WITHOUT_CLASSIFICATION	1.0500778152448177E-4	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999999137158414	WITHOUT_CLASSIFICATION	8.628415852984371E-8	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999998576447675	WITHOUT_CLASSIFICATION	1.4235523245019973E-7	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.999999702516295	WITHOUT_CLASSIFICATION	2.974837050993929E-7	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999924759198551	WITHOUT_CLASSIFICATION	7.5240801449165325E-6	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999956093613681	WITHOUT_CLASSIFICATION	4.390638631920644E-6	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999999499407287	WITHOUT_CLASSIFICATION	5.005927129206264E-8	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999993348726659	WITHOUT_CLASSIFICATION	6.651273339925854E-7	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999994242020999	WITHOUT_CLASSIFICATION	5.757979001108727E-7	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999898329901042	WITHOUT_CLASSIFICATION	1.0167009895815947E-5	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9998236814364293	WITHOUT_CLASSIFICATION	1.7631856357062687E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999873524145432	WITHOUT_CLASSIFICATION	1.2647585456830316E-5	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999981456253797	WITHOUT_CLASSIFICATION	1.8543746202845262E-6	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999997616997288	WITHOUT_CLASSIFICATION	2.383002713374891E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999827299217	WITHOUT_CLASSIFICATION	1.727007824358394E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999908608943	WITHOUT_CLASSIFICATION	9.13910569714141E-8	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999985310782279	WITHOUT_CLASSIFICATION	1.4689217720949901E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999942464776038	WITHOUT_CLASSIFICATION	5.753522396298723E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999744142747	WITHOUT_CLASSIFICATION	2.5585725400704655E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999996599311696	WITHOUT_CLASSIFICATION	3.4006883039152075E-7	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999979435493583	WITHOUT_CLASSIFICATION	2.0564506416405828E-6	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999995991472005	WITHOUT_CLASSIFICATION	4.0085279962454956E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999983231834876	WITHOUT_CLASSIFICATION	1.676816512345407E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999272192218	WITHOUT_CLASSIFICATION	7.278077813541447E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999998287102237	WITHOUT_CLASSIFICATION	1.712897762955928E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999998287102237	WITHOUT_CLASSIFICATION	1.712897762955928E-6	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999512681053956	WITHOUT_CLASSIFICATION	4.873189460435634E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.999999996254972	WITHOUT_CLASSIFICATION	3.745027951033252E-9	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999713339288364	WITHOUT_CLASSIFICATION	2.866607116352749E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999713339288364	WITHOUT_CLASSIFICATION	2.866607116352749E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999713339288364	WITHOUT_CLASSIFICATION	2.866607116352749E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999713339288364	WITHOUT_CLASSIFICATION	2.866607116352749E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998818340120412	WITHOUT_CLASSIFICATION	1.1816598795866505E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998818340120412	WITHOUT_CLASSIFICATION	1.1816598795866505E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998818340120412	WITHOUT_CLASSIFICATION	1.1816598795866505E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999251454259889	WITHOUT_CLASSIFICATION	7.485457401116287E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999251454259889	WITHOUT_CLASSIFICATION	7.485457401116287E-5	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9998721846429907	WITHOUT_CLASSIFICATION	1.2781535700932218E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999687135968537	WITHOUT_CLASSIFICATION	3.1286403146309005E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.999999996254972	WITHOUT_CLASSIFICATION	3.745027951033252E-9	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999983761782499	WITHOUT_CLASSIFICATION	1.6238217500757588E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999713339288364	WITHOUT_CLASSIFICATION	2.866607116352749E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999713339288364	WITHOUT_CLASSIFICATION	2.866607116352749E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999713339288364	WITHOUT_CLASSIFICATION	2.866607116352749E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998818340120412	WITHOUT_CLASSIFICATION	1.1816598795866505E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998818340120412	WITHOUT_CLASSIFICATION	1.1816598795866505E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999251454259889	WITHOUT_CLASSIFICATION	7.485457401116287E-5	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999687135968537	WITHOUT_CLASSIFICATION	3.1286403146309005E-5	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999990950314221	WITHOUT_CLASSIFICATION	9.049685780035477E-7	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999990950314221	WITHOUT_CLASSIFICATION	9.049685780035477E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999998250179658	WITHOUT_CLASSIFICATION	1.749820342646641E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999998250179658	WITHOUT_CLASSIFICATION	1.749820342646641E-7	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999978515781737	WITHOUT_CLASSIFICATION	2.1484218262682996E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999978515781737	WITHOUT_CLASSIFICATION	2.1484218262682996E-6	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999963662435353	WITHOUT_CLASSIFICATION	3.633756464643781E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999980109452496	WITHOUT_CLASSIFICATION	1.989054750291318E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999980109452496	WITHOUT_CLASSIFICATION	1.989054750291318E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999998035319866	WITHOUT_CLASSIFICATION	1.9646801338034374E-7	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999998035319866	WITHOUT_CLASSIFICATION	1.9646801338034374E-7	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9999999383155808	WITHOUT_CLASSIFICATION	6.168441915006487E-8	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999991191727375	WITHOUT_CLASSIFICATION	8.808272623769838E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999991191727375	WITHOUT_CLASSIFICATION	8.808272623769838E-7	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999993438680095	WITHOUT_CLASSIFICATION	6.561319905140523E-7	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999924875425218	WITHOUT_CLASSIFICATION	7.512457478163146E-6	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999992231960628	WITHOUT_CLASSIFICATION	7.768039371274512E-7	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999713339288364	WITHOUT_CLASSIFICATION	2.866607116352749E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999713339288364	WITHOUT_CLASSIFICATION	2.866607116352749E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999993438680095	WITHOUT_CLASSIFICATION	6.561319905140523E-7	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.999999070502257	WITHOUT_CLASSIFICATION	9.294977430030191E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999993189405468	WITHOUT_CLASSIFICATION	6.810594530588497E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999993189405468	WITHOUT_CLASSIFICATION	6.810594530588497E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999993189405468	WITHOUT_CLASSIFICATION	6.810594530588497E-7	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.99999973941517	WITHOUT_CLASSIFICATION	2.605848299956559E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999997270127593	WITHOUT_CLASSIFICATION	2.7298724073742657E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999979420996387	WITHOUT_CLASSIFICATION	2.0579003614301205E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999979420996387	WITHOUT_CLASSIFICATION	2.0579003614301205E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999912575679	WITHOUT_CLASSIFICATION	8.742432192486749E-9	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999935556706	WITHOUT_CLASSIFICATION	6.444329377451565E-9	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999890188257	WITHOUT_CLASSIFICATION	1.0981174228607742E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.999999959535189	WITHOUT_CLASSIFICATION	4.046481090313284E-8	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999998398921724	WITHOUT_CLASSIFICATION	1.6010782752574435E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999991262161257	WITHOUT_CLASSIFICATION	8.737838742657195E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999991262161257	WITHOUT_CLASSIFICATION	8.737838742657195E-7	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999998486916093	WITHOUT_CLASSIFICATION	1.5130839082329104E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.999914951402083	WITHOUT_CLASSIFICATION	8.504859791704308E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.999914951402083	WITHOUT_CLASSIFICATION	8.504859791704308E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999713339288364	WITHOUT_CLASSIFICATION	2.866607116352749E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999993189405468	WITHOUT_CLASSIFICATION	6.810594530588497E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999997270127593	WITHOUT_CLASSIFICATION	2.7298724073742657E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999979420996387	WITHOUT_CLASSIFICATION	2.0579003614301205E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999912575679	WITHOUT_CLASSIFICATION	8.742432192486749E-9	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999935556706	WITHOUT_CLASSIFICATION	6.444329377451565E-9	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999890188257	WITHOUT_CLASSIFICATION	1.0981174228607742E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.999999959535189	WITHOUT_CLASSIFICATION	4.046481090313284E-8	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.999914951402083	WITHOUT_CLASSIFICATION	8.504859791704308E-5	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999992705282871	WITHOUT_CLASSIFICATION	7.294717130216204E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999990871835929	WITHOUT_CLASSIFICATION	9.128164070316836E-7	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999983490292691	WITHOUT_CLASSIFICATION	1.6509707308829902E-6	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999998702241303	WITHOUT_CLASSIFICATION	1.2977586980374158E-7	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999991359808367	WITHOUT_CLASSIFICATION	8.640191633559878E-7	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999992626281188	WITHOUT_CLASSIFICATION	7.37371881288864E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999997887987978	WITHOUT_CLASSIFICATION	2.1120120219685128E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999997887987978	WITHOUT_CLASSIFICATION	2.1120120219685128E-7	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9999961061407807	WITHOUT_CLASSIFICATION	3.8938592192963096E-6	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999977083659528	WITHOUT_CLASSIFICATION	2.2916340472086824E-6	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999885860564269	WITHOUT_CLASSIFICATION	1.141394357310427E-5	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999992942323618	WITHOUT_CLASSIFICATION	7.057676381995754E-7	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999922432377204	WITHOUT_CLASSIFICATION	7.75676227964955E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999922432377204	WITHOUT_CLASSIFICATION	7.75676227964955E-6	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999998456717826	WITHOUT_CLASSIFICATION	1.5432821747755913E-7	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999998267775808	WITHOUT_CLASSIFICATION	1.7322241925917758E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.999999729585508	WITHOUT_CLASSIFICATION	2.704144920627105E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.999999729585508	WITHOUT_CLASSIFICATION	2.704144920627105E-7	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9999990875595559	WITHOUT_CLASSIFICATION	9.124404439945555E-7	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999983115787155	WITHOUT_CLASSIFICATION	1.6884212844787472E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999998398921724	WITHOUT_CLASSIFICATION	1.6010782752574435E-7	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999995596690228	WITHOUT_CLASSIFICATION	4.403309771434483E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.99999992043786	WITHOUT_CLASSIFICATION	7.956213993297801E-8	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999989707912482	WITHOUT_CLASSIFICATION	1.029208751804484E-6	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999993612173183	WITHOUT_CLASSIFICATION	6.387826817357915E-7	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999937757619394	WITHOUT_CLASSIFICATION	6.2242380606946585E-6	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999996523522404	WITHOUT_CLASSIFICATION	3.4764775953081923E-7	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999981820752692	WITHOUT_CLASSIFICATION	1.8179247308154345E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999999997552712	WITHOUT_CLASSIFICATION	2.4472872716370875E-10	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999999904525803	WITHOUT_CLASSIFICATION	9.54741969470849E-9	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999999904525803	WITHOUT_CLASSIFICATION	9.54741969470849E-9	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999998989423508	WITHOUT_CLASSIFICATION	1.0105764928972799E-7	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999998989423508	WITHOUT_CLASSIFICATION	1.0105764928972799E-7	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999999575624738	WITHOUT_CLASSIFICATION	4.243752625803091E-8	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999814057483781	WITHOUT_CLASSIFICATION	1.8594251621847773E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999814057483781	WITHOUT_CLASSIFICATION	1.8594251621847773E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999814057483781	WITHOUT_CLASSIFICATION	1.8594251621847773E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999997679652642	WITHOUT_CLASSIFICATION	2.3203473584524085E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999998470110819	WITHOUT_CLASSIFICATION	1.5298891814310914E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999998470110819	WITHOUT_CLASSIFICATION	1.5298891814310914E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999991890163072	WITHOUT_CLASSIFICATION	8.109836926610632E-7	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.999959571390595	WITHOUT_CLASSIFICATION	4.0428609405027004E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999998744051277	WITHOUT_CLASSIFICATION	1.255948722859477E-7	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999999872633427	WITHOUT_CLASSIFICATION	1.2736657259782019E-8	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9998886707774257	WITHOUT_CLASSIFICATION	1.1132922257421316E-4	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999988471757489	WITHOUT_CLASSIFICATION	1.1528242511641482E-6	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999237641644224	WITHOUT_CLASSIFICATION	7.623583557764248E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999908608943	WITHOUT_CLASSIFICATION	9.13910569714141E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999908608943	WITHOUT_CLASSIFICATION	9.13910569714141E-8	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999997679652642	WITHOUT_CLASSIFICATION	2.3203473584524085E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999991890163072	WITHOUT_CLASSIFICATION	8.109836926610632E-7	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.999999945171698	WITHOUT_CLASSIFICATION	5.482830203775166E-8	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.999959571390595	WITHOUT_CLASSIFICATION	4.0428609405027004E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999998744051277	WITHOUT_CLASSIFICATION	1.255948722859477E-7	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.99999990485324	WITHOUT_CLASSIFICATION	9.514676010829533E-8	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999998916276532	WITHOUT_CLASSIFICATION	1.083723467656719E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999883878062	WITHOUT_CLASSIFICATION	1.1612193679728553E-8	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999849350578541	WITHOUT_CLASSIFICATION	1.5064942145919308E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999940056993704	WITHOUT_CLASSIFICATION	5.9943006296255525E-6	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999997768998038	WITHOUT_CLASSIFICATION	2.231001963415537E-7	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999981133335133	WITHOUT_CLASSIFICATION	1.886666486647359E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.99999990485324	WITHOUT_CLASSIFICATION	9.514676010829533E-8	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999973351968823	WITHOUT_CLASSIFICATION	2.664803117647492E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999973351968823	WITHOUT_CLASSIFICATION	2.664803117647492E-6	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999960235288353	WITHOUT_CLASSIFICATION	3.9764711646001465E-6	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999933570741207	WITHOUT_CLASSIFICATION	6.6429258791849004E-6	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999800652457452	WITHOUT_CLASSIFICATION	1.9934754254739235E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999978396435917	WITHOUT_CLASSIFICATION	2.1603564082340114E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999995935546818	WITHOUT_CLASSIFICATION	4.0644531819433943E-7	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999999987980279	WITHOUT_CLASSIFICATION	1.2019720339520379E-9	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999997175793826	WITHOUT_CLASSIFICATION	2.824206173895796E-7	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.999998442359949	WITHOUT_CLASSIFICATION	1.557640051146677E-6	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999997145619066	WITHOUT_CLASSIFICATION	2.8543809334623865E-7	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999996529287275	WITHOUT_CLASSIFICATION	3.4707127254226933E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999993154532584	WITHOUT_CLASSIFICATION	6.84546741518389E-7	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999978396435917	WITHOUT_CLASSIFICATION	2.1603564082340114E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999995935546818	WITHOUT_CLASSIFICATION	4.0644531819433943E-7	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999947111479633	WITHOUT_CLASSIFICATION	5.288852036655721E-6	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.999999894555881	WITHOUT_CLASSIFICATION	1.0544411900458689E-7	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.999998291747289	WITHOUT_CLASSIFICATION	1.7082527109594065E-6	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.999997978840735	WITHOUT_CLASSIFICATION	2.0211592649545725E-6	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.999999650465371	WITHOUT_CLASSIFICATION	3.4953462899365545E-7	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9999709803775688	WITHOUT_CLASSIFICATION	2.9019622431157516E-5	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9999748663440988	WITHOUT_CLASSIFICATION	2.5133655901141212E-5	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999998500435091	WITHOUT_CLASSIFICATION	1.4995649077380068E-7	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999983785182004	WITHOUT_CLASSIFICATION	1.6214817995881526E-6	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999982876341813	WITHOUT_CLASSIFICATION	1.7123658187115341E-6	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.999984623856775	WITHOUT_CLASSIFICATION	1.5376143225022462E-5	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999984901625801	WITHOUT_CLASSIFICATION	1.509837419789028E-6	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999996660934489	WITHOUT_CLASSIFICATION	3.3390655110772267E-7	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999998182896943	WITHOUT_CLASSIFICATION	1.8171030559973895E-7	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9998782560735614	WITHOUT_CLASSIFICATION	1.2174392643856263E-4	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999994037099156	WITHOUT_CLASSIFICATION	5.962900843257911E-7	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999724329789699	WITHOUT_CLASSIFICATION	2.756702103024316E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999833461702	WITHOUT_CLASSIFICATION	1.665382968473146E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999626063979	WITHOUT_CLASSIFICATION	3.739360202690086E-8	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999993472090667	WITHOUT_CLASSIFICATION	6.527909333077004E-7	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999724329789699	WITHOUT_CLASSIFICATION	2.756702103024316E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999833461702	WITHOUT_CLASSIFICATION	1.665382968473146E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999626063979	WITHOUT_CLASSIFICATION	3.739360202690086E-8	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999949009025593	WITHOUT_CLASSIFICATION	5.099097440651422E-6	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999984051327289	WITHOUT_CLASSIFICATION	1.5948672712055952E-6	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999928028887807	WITHOUT_CLASSIFICATION	7.197111219321308E-6	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9999658341138825	WITHOUT_CLASSIFICATION	3.41658861174349E-5	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9992468936291521	WITHOUT_CLASSIFICATION	7.531063708477777E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999937810624763	WITHOUT_CLASSIFICATION	6.218937523766152E-6	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9998471286887625	WITHOUT_CLASSIFICATION	1.528713112374885E-4	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999999986127075	WITHOUT_CLASSIFICATION	1.3872923902708745E-9	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.999999767225012	WITHOUT_CLASSIFICATION	2.327749879491292E-7	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999996318826692	WITHOUT_CLASSIFICATION	3.6811733087380066E-7	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9429662831059497	WITHOUT_CLASSIFICATION	0.057033716894050346	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999999542843384	WITHOUT_CLASSIFICATION	4.571566171522196E-8	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.999999597662692	WITHOUT_CLASSIFICATION	4.023373080064394E-7	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999999555359177	WITHOUT_CLASSIFICATION	4.446408224951965E-8	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999998373956989	WITHOUT_CLASSIFICATION	1.6260430115552708E-7	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999997752332531	WITHOUT_CLASSIFICATION	2.247667469424881E-7	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9999930410905418	WITHOUT_CLASSIFICATION	6.9589094581949054E-6	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999927920080679	WITHOUT_CLASSIFICATION	7.207991932037544E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999825758923	WITHOUT_CLASSIFICATION	1.7424107640891325E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999869075219	WITHOUT_CLASSIFICATION	1.3092477988112037E-8	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999989634293152	WITHOUT_CLASSIFICATION	1.0365706848284134E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999984159425293	WITHOUT_CLASSIFICATION	1.5840574706469427E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999984159425293	WITHOUT_CLASSIFICATION	1.5840574706469427E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999994950690774	WITHOUT_CLASSIFICATION	5.049309226565612E-7	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999994950690774	WITHOUT_CLASSIFICATION	5.049309226565612E-7	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999894530724	WITHOUT_CLASSIFICATION	1.0546927554912228E-8	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999894530724	WITHOUT_CLASSIFICATION	1.0546927554912228E-8	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999874953297	WITHOUT_CLASSIFICATION	1.2504670410153388E-8	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999967708637	WITHOUT_CLASSIFICATION	3.229136322649595E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999714073777	WITHOUT_CLASSIFICATION	2.8592622395856618E-8	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999999971380268	WITHOUT_CLASSIFICATION	2.861973253795257E-9	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999971034953	WITHOUT_CLASSIFICATION	2.8965047576346007E-9	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999981306104	WITHOUT_CLASSIFICATION	1.86938967939859E-9	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999999843246632	WITHOUT_CLASSIFICATION	1.5675336777636445E-8	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999999444926693	WITHOUT_CLASSIFICATION	5.550733080610102E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999908608943	WITHOUT_CLASSIFICATION	9.13910569714141E-8	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999874953297	WITHOUT_CLASSIFICATION	1.2504670410153388E-8	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999967708637	WITHOUT_CLASSIFICATION	3.229136322649595E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999714073777	WITHOUT_CLASSIFICATION	2.8592622395856618E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999971034953	WITHOUT_CLASSIFICATION	2.8965047576346007E-9	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999981306104	WITHOUT_CLASSIFICATION	1.86938967939859E-9	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999978652194828	WITHOUT_CLASSIFICATION	2.1347805172699535E-6	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999997784054967	WITHOUT_CLASSIFICATION	2.2159450327859114E-7	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999427767577653	WITHOUT_CLASSIFICATION	5.722324223478289E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999427767577653	WITHOUT_CLASSIFICATION	5.722324223478289E-5	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999995144263822	WITHOUT_CLASSIFICATION	4.855736177252289E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999913947663789	WITHOUT_CLASSIFICATION	8.605233621116438E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999966108243331	WITHOUT_CLASSIFICATION	3.3891756669765334E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999993061405057	WITHOUT_CLASSIFICATION	6.938594941727928E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999993061405057	WITHOUT_CLASSIFICATION	6.938594941727928E-7	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999901882675531	WITHOUT_CLASSIFICATION	9.811732446816524E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.999999891250768	WITHOUT_CLASSIFICATION	1.0874923200153434E-7	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999996218919929	WITHOUT_CLASSIFICATION	3.7810800718215556E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.999999198399814	WITHOUT_CLASSIFICATION	8.016001859339033E-7	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999941013983725	WITHOUT_CLASSIFICATION	5.898601627530279E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999985310782279	WITHOUT_CLASSIFICATION	1.4689217720949901E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999942464776038	WITHOUT_CLASSIFICATION	5.753522396298723E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999744142747	WITHOUT_CLASSIFICATION	2.5585725400704655E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999996599311696	WITHOUT_CLASSIFICATION	3.4006883039152075E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999983231834876	WITHOUT_CLASSIFICATION	1.676816512345407E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999272192218	WITHOUT_CLASSIFICATION	7.278077813541447E-8	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999901882675531	WITHOUT_CLASSIFICATION	9.811732446816524E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.999999891250768	WITHOUT_CLASSIFICATION	1.0874923200153434E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.999999198399814	WITHOUT_CLASSIFICATION	8.016001859339033E-7	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999999225428359	WITHOUT_CLASSIFICATION	7.745716406765341E-8	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999966108243331	WITHOUT_CLASSIFICATION	3.3891756669765334E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999966108243331	WITHOUT_CLASSIFICATION	3.3891756669765334E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999993154532584	WITHOUT_CLASSIFICATION	6.84546741518389E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999993154532584	WITHOUT_CLASSIFICATION	6.84546741518389E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999388127458749	WITHOUT_CLASSIFICATION	6.118725412508634E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999388127458749	WITHOUT_CLASSIFICATION	6.118725412508634E-5	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999998707243206	WITHOUT_CLASSIFICATION	1.2927567940754884E-7	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999998829951112	WITHOUT_CLASSIFICATION	1.170048887362368E-7	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999949273296522	WITHOUT_CLASSIFICATION	5.07267034781098E-6	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999957549639028	WITHOUT_CLASSIFICATION	4.245036097178767E-6	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.99999974814001	WITHOUT_CLASSIFICATION	2.518599900047665E-7	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999996856953618	WITHOUT_CLASSIFICATION	3.143046382604277E-7	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999134515771184	WITHOUT_CLASSIFICATION	8.65484228815349E-5	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999999988915661	WITHOUT_CLASSIFICATION	1.1084339133205113E-9	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.999999550734458	WITHOUT_CLASSIFICATION	4.4926554189551327E-7	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999999787464083	WITHOUT_CLASSIFICATION	2.1253591566077265E-8	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999999339841183	WITHOUT_CLASSIFICATION	6.60158816050389E-8	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999975977631216	WITHOUT_CLASSIFICATION	2.4022368783514715E-6	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999999582054003	WITHOUT_CLASSIFICATION	4.17945995944149E-8	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999998939796735	WITHOUT_CLASSIFICATION	1.0602032656253504E-7	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999999571763949	WITHOUT_CLASSIFICATION	4.2823605040882406E-8	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999962888863014	WITHOUT_CLASSIFICATION	3.7111136984915182E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999986783430662	WITHOUT_CLASSIFICATION	1.3216569337744123E-6	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999999223685145	WITHOUT_CLASSIFICATION	7.763148545894941E-8	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.999999886533033	WITHOUT_CLASSIFICATION	1.1346696706507936E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999942464776038	WITHOUT_CLASSIFICATION	5.753522396298723E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999996599311696	WITHOUT_CLASSIFICATION	3.4006883039152075E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999998287102237	WITHOUT_CLASSIFICATION	1.712897762955928E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999979420996387	WITHOUT_CLASSIFICATION	2.0579003614301205E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999979420996387	WITHOUT_CLASSIFICATION	2.0579003614301205E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999999225428359	WITHOUT_CLASSIFICATION	7.745716406765341E-8	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999966108243331	WITHOUT_CLASSIFICATION	3.3891756669765334E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999993154532584	WITHOUT_CLASSIFICATION	6.84546741518389E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999388127458749	WITHOUT_CLASSIFICATION	6.118725412508634E-5	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999991761680708	WITHOUT_CLASSIFICATION	8.238319293098056E-7	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999633020090688	WITHOUT_CLASSIFICATION	3.6697990931289435E-5	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999999974410791	WITHOUT_CLASSIFICATION	2.5589207745660717E-9	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.993812003234258	WITHOUT_CLASSIFICATION	0.006187996765741979	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999999606345552	WITHOUT_CLASSIFICATION	3.936544473732828E-8	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999999606345552	WITHOUT_CLASSIFICATION	3.936544473732828E-8	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999996985420972	WITHOUT_CLASSIFICATION	3.0145790277920463E-7	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999999859010188	WITHOUT_CLASSIFICATION	1.4098981113055034E-8	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999682261372	WITHOUT_CLASSIFICATION	3.177386272463262E-8	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999999409285145	WITHOUT_CLASSIFICATION	5.907148545773045E-8	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999159366335	WITHOUT_CLASSIFICATION	8.406336645463593E-8	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999159366335	WITHOUT_CLASSIFICATION	8.406336645463593E-8	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999999979109861	WITHOUT_CLASSIFICATION	2.089013726864856E-9	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.999999997640976	WITHOUT_CLASSIFICATION	2.3590239814914053E-9	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999999802196132	WITHOUT_CLASSIFICATION	1.9780386772007417E-8	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999966718241576	WITHOUT_CLASSIFICATION	3.3281758424962317E-6	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999998334105863	WITHOUT_CLASSIFICATION	1.6658941363373237E-7	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999999658086917	WITHOUT_CLASSIFICATION	3.419130847012019E-8	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999669193482454	WITHOUT_CLASSIFICATION	3.308065175456506E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999999739764902	WITHOUT_CLASSIFICATION	2.602350977600278E-8	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9987121261177863	WITHOUT_CLASSIFICATION	0.0012878738822137106	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9994513381078088	WITHOUT_CLASSIFICATION	5.486618921911261E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9997815809575387	WITHOUT_CLASSIFICATION	2.184190424613185E-4	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999994858974208	WITHOUT_CLASSIFICATION	5.141025791479453E-7	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999999999110512	WITHOUT_CLASSIFICATION	8.894875699796163E-11	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999996170782921	WITHOUT_CLASSIFICATION	3.829217078839046E-7	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9999998264818882	WITHOUT_CLASSIFICATION	1.7351811163006253E-7	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999996481978045	WITHOUT_CLASSIFICATION	3.5180219549962867E-7	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.999999596865757	WITHOUT_CLASSIFICATION	4.0313424305425497E-7	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999777990953799	WITHOUT_CLASSIFICATION	2.2200904620062433E-5	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999998811126833	WITHOUT_CLASSIFICATION	1.1888731667805442E-7	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.999999906833662	WITHOUT_CLASSIFICATION	9.316633798750228E-8	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999990642349993	WITHOUT_CLASSIFICATION	9.357650006212729E-7	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999996265949082	WITHOUT_CLASSIFICATION	3.734050918783172E-7	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999996265949082	WITHOUT_CLASSIFICATION	3.734050918783172E-7	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999923962545701	WITHOUT_CLASSIFICATION	7.603745429952372E-6	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9997501845750817	WITHOUT_CLASSIFICATION	2.4981542491827035E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999966146674768	WITHOUT_CLASSIFICATION	3.385332523284063E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999966146674768	WITHOUT_CLASSIFICATION	3.385332523284063E-6	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9973512489129872	DEFECT	0.002648751087012833	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999584033151886	WITHOUT_CLASSIFICATION	4.159668481150738E-5	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.999989411984261	WITHOUT_CLASSIFICATION	1.0588015739094726E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999972708040634	WITHOUT_CLASSIFICATION	2.7291959366508653E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999972708040634	WITHOUT_CLASSIFICATION	2.7291959366508653E-6	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9999821484364098	WITHOUT_CLASSIFICATION	1.7851563590327502E-5	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999999440964512	WITHOUT_CLASSIFICATION	5.590354879096048E-8	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999997037050193	WITHOUT_CLASSIFICATION	2.962949806993603E-7	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999990629587482	WITHOUT_CLASSIFICATION	9.37041251964249E-7	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999998881686119	WITHOUT_CLASSIFICATION	1.1183138821977472E-7	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999997312702673	WITHOUT_CLASSIFICATION	2.687297326932883E-7	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.999999543842671	WITHOUT_CLASSIFICATION	4.561573290492793E-7	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999952649273935	WITHOUT_CLASSIFICATION	4.735072606517055E-6	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999996619285904	WITHOUT_CLASSIFICATION	3.3807140970989994E-7	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9998883772276663	WITHOUT_CLASSIFICATION	1.1162277233365478E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999990913806609	WITHOUT_CLASSIFICATION	9.086193390038322E-7	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999998308876223	WITHOUT_CLASSIFICATION	1.6911237770379E-7	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999999189311379	WITHOUT_CLASSIFICATION	8.106886207254586E-8	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9996181804099169	WITHOUT_CLASSIFICATION	3.8181959008306096E-4	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999926414096858	WITHOUT_CLASSIFICATION	7.358590314233665E-6	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9981612319412421	WITHOUT_CLASSIFICATION	0.001838768058757873	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999999446508172	WITHOUT_CLASSIFICATION	5.534918283904748E-8	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.99998618062812	WITHOUT_CLASSIFICATION	1.3819371880053216E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999081458722195	WITHOUT_CLASSIFICATION	9.18541277804341E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999969161034415	WITHOUT_CLASSIFICATION	3.083896558413809E-6	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999938791774708	WITHOUT_CLASSIFICATION	6.120822529232079E-6	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999995532477959	WITHOUT_CLASSIFICATION	4.467522041685755E-7	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999901996382315	WITHOUT_CLASSIFICATION	9.80036176832081E-6	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999295189866693	WITHOUT_CLASSIFICATION	7.048101333081804E-5	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999998703080332	WITHOUT_CLASSIFICATION	1.296919668675681E-7	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9946950748678203	WITHOUT_CLASSIFICATION	0.0053049251321797665	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9986590681374838	WITHOUT_CLASSIFICATION	0.0013409318625161129	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999999152501136	WITHOUT_CLASSIFICATION	8.474988648459701E-8	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999943331164798	WITHOUT_CLASSIFICATION	5.666883520263887E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.999999794314522	WITHOUT_CLASSIFICATION	2.0568547796187004E-7	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999998020281	WITHOUT_CLASSIFICATION	1.9797178306324167E-10	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9996181804099169	WITHOUT_CLASSIFICATION	3.8181959008306096E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999999152501136	WITHOUT_CLASSIFICATION	8.474988648459701E-8	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999943331164798	WITHOUT_CLASSIFICATION	5.666883520263887E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999998020281	WITHOUT_CLASSIFICATION	1.9797178306324167E-10	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999999597469508	WITHOUT_CLASSIFICATION	4.025304914023563E-8	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999830075142478	WITHOUT_CLASSIFICATION	1.699248575217572E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999677224384288	WITHOUT_CLASSIFICATION	3.227756157118656E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999997829065621	WITHOUT_CLASSIFICATION	2.170934378213077E-7	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999885173423	WITHOUT_CLASSIFICATION	1.1482657635312269E-8	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999993592437222	WITHOUT_CLASSIFICATION	6.407562777912195E-7	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999994835440721	WITHOUT_CLASSIFICATION	5.164559279459894E-7	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.999999876210299	WITHOUT_CLASSIFICATION	1.237897010683786E-7	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999999139646811	WITHOUT_CLASSIFICATION	8.603531891857751E-8	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.999232836933007	WITHOUT_CLASSIFICATION	7.671630669930012E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999915518021091	WITHOUT_CLASSIFICATION	8.448197890948004E-6	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999915518021091	WITHOUT_CLASSIFICATION	8.448197890948004E-6	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.999997362705713	WITHOUT_CLASSIFICATION	2.637294287019125E-6	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999988938975424	WITHOUT_CLASSIFICATION	1.1061024576247484E-6	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999992764781623	WITHOUT_CLASSIFICATION	7.235218376965758E-7	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999999491536634	WITHOUT_CLASSIFICATION	5.084633667184636E-8	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999990228594381	WITHOUT_CLASSIFICATION	9.771405618671572E-7	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999887446365104	WITHOUT_CLASSIFICATION	1.1255363489658882E-5	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999981201562124	WITHOUT_CLASSIFICATION	1.879843787753795E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9991681858356367	WITHOUT_CLASSIFICATION	8.318141643633135E-4	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.999999996315307	WITHOUT_CLASSIFICATION	3.6846928643000396E-9	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999917836521	WITHOUT_CLASSIFICATION	8.216347842611242E-9	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999999009617917	WITHOUT_CLASSIFICATION	9.903820824282435E-8	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999998685843525	WITHOUT_CLASSIFICATION	1.3141564746814614E-7	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.999999997389518	WITHOUT_CLASSIFICATION	2.6104820522332194E-9	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999997185273624	WITHOUT_CLASSIFICATION	2.8147263772611034E-7	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999999831200441	WITHOUT_CLASSIFICATION	1.6879955880492898E-8	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999999357380528	WITHOUT_CLASSIFICATION	6.42619472522931E-8	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999999950642522	WITHOUT_CLASSIFICATION	4.935747786973184E-9	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999999666758519	WITHOUT_CLASSIFICATION	3.332414808299165E-8	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999998845972619	WITHOUT_CLASSIFICATION	1.15402738078934E-7	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999997534884003	WITHOUT_CLASSIFICATION	2.465115996354129E-7	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999984293468557	WITHOUT_CLASSIFICATION	1.5706531442942E-6	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999983994414882	WITHOUT_CLASSIFICATION	1.6005585118080613E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999999974264655	WITHOUT_CLASSIFICATION	2.573534486236542E-9	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999997658743204	WITHOUT_CLASSIFICATION	2.341256796719273E-7	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999998885879382	WITHOUT_CLASSIFICATION	1.1141206177963963E-7	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999995699074141	WITHOUT_CLASSIFICATION	4.300925858799377E-7	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.996420616303558	WITHOUT_CLASSIFICATION	0.003579383696441983	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9997993806143516	WITHOUT_CLASSIFICATION	2.0061938564842424E-4	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999982585754574	WITHOUT_CLASSIFICATION	1.7414245425132116E-6	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999998177446386	WITHOUT_CLASSIFICATION	1.8225536130314076E-7	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999987100243439	WITHOUT_CLASSIFICATION	1.289975656071496E-6	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999999582486486	WITHOUT_CLASSIFICATION	4.175135127763876E-8	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999999696173101	WITHOUT_CLASSIFICATION	3.038268996733962E-8	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999994371814933	WITHOUT_CLASSIFICATION	5.628185067104263E-7	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999999429268979	WITHOUT_CLASSIFICATION	5.7073102245304133E-8	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999727867324647	WITHOUT_CLASSIFICATION	2.7213267535347312E-5	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999999737589937	WITHOUT_CLASSIFICATION	2.6241006227012617E-8	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999991412735766	WITHOUT_CLASSIFICATION	8.587264233642425E-7	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999998332837978	WITHOUT_CLASSIFICATION	1.6671620223537896E-7	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999996330073267	WITHOUT_CLASSIFICATION	3.669926731472207E-7	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9999454871737299	WITHOUT_CLASSIFICATION	5.451282627013725E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999709652027222	WITHOUT_CLASSIFICATION	2.9034797277878564E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999952385664626	WITHOUT_CLASSIFICATION	4.761433537459163E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999966619884795	WITHOUT_CLASSIFICATION	3.3380115204614813E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999643641928082	WITHOUT_CLASSIFICATION	3.563580719191383E-5	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999976882229401	WITHOUT_CLASSIFICATION	2.3117770598905873E-6	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9999996078861166	WITHOUT_CLASSIFICATION	3.9211388325689116E-7	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999932107419556	WITHOUT_CLASSIFICATION	6.7892580444563045E-6	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.999991204414367	WITHOUT_CLASSIFICATION	8.79558563314741E-6	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999996075769093	WITHOUT_CLASSIFICATION	3.924230906348722E-7	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999924726708131	WITHOUT_CLASSIFICATION	7.52732918697002E-6	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999999991767826	WITHOUT_CLASSIFICATION	8.232173700252464E-10	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999952344575691	WITHOUT_CLASSIFICATION	4.765542430855772E-6	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999962399218737	WITHOUT_CLASSIFICATION	3.7600781262077457E-6	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9999987244998684	WITHOUT_CLASSIFICATION	1.2755001316710155E-6	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999975683281691	WITHOUT_CLASSIFICATION	2.4316718308515714E-6	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999997148410252	WITHOUT_CLASSIFICATION	2.851589746652571E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999995077161633	WITHOUT_CLASSIFICATION	4.922838366879475E-7	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9992730543892451	WITHOUT_CLASSIFICATION	7.269456107549049E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999557778349062	WITHOUT_CLASSIFICATION	4.42221650937241E-5	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999557778349062	WITHOUT_CLASSIFICATION	4.42221650937241E-5	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.999997706988234	WITHOUT_CLASSIFICATION	2.2930117659980497E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999987813567329	WITHOUT_CLASSIFICATION	1.2186432671357984E-6	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999946061909575	WITHOUT_CLASSIFICATION	5.393809042499217E-6	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999916196772425	WITHOUT_CLASSIFICATION	8.380322757500211E-6	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999986162996103	WITHOUT_CLASSIFICATION	1.3837003896511564E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.999914131650407	WITHOUT_CLASSIFICATION	8.586834959302192E-5	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9998873335703787	WITHOUT_CLASSIFICATION	1.1266642962133204E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999999630426762	WITHOUT_CLASSIFICATION	3.695732371874347E-8	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999999912077512	WITHOUT_CLASSIFICATION	8.792248935897776E-9	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999999999681769	WITHOUT_CLASSIFICATION	3.182309163975053E-11	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.999998789204978	WITHOUT_CLASSIFICATION	1.210795022034719E-6	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999995377948828	WITHOUT_CLASSIFICATION	4.6220511719864244E-7	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999999261834084	WITHOUT_CLASSIFICATION	7.381659163662091E-8	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999999682552883	WITHOUT_CLASSIFICATION	3.174471182033724E-8	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999987716988172	WITHOUT_CLASSIFICATION	1.2283011827322835E-6	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999814374538286	WITHOUT_CLASSIFICATION	1.8562546171343184E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999995613927777	WITHOUT_CLASSIFICATION	4.386072224003166E-7	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999946982051074	WITHOUT_CLASSIFICATION	5.301794892567782E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.998863064547684	WITHOUT_CLASSIFICATION	0.0011369354523160114	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999999591817024	WITHOUT_CLASSIFICATION	4.0818297755939034E-8	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999848899862385	WITHOUT_CLASSIFICATION	1.5110013761524763E-5	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999999441384666	WITHOUT_CLASSIFICATION	5.586153331265006E-8	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999987095607472	WITHOUT_CLASSIFICATION	1.2904392527919674E-6	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999999720346621	WITHOUT_CLASSIFICATION	2.7965338051381258E-8	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999990097102113	WITHOUT_CLASSIFICATION	9.902897886597225E-7	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999980785778849	WITHOUT_CLASSIFICATION	1.92142211500757E-6	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999999953358162	WITHOUT_CLASSIFICATION	4.664183912693455E-9	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999999167877055	WITHOUT_CLASSIFICATION	8.321229447586658E-8	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999994572036596	WITHOUT_CLASSIFICATION	5.42796340443864E-7	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9999858900970644	WITHOUT_CLASSIFICATION	1.4109902935526915E-5	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999908291236241	WITHOUT_CLASSIFICATION	9.170876375862193E-6	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999972744005106	WITHOUT_CLASSIFICATION	2.7255994893472076E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999543146724	WITHOUT_CLASSIFICATION	4.5685327776704315E-8	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999998590626162	WITHOUT_CLASSIFICATION	1.4093738373882285E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999543146724	WITHOUT_CLASSIFICATION	4.5685327776704315E-8	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999979717660403	WITHOUT_CLASSIFICATION	2.028233959659803E-6	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9998955076132641	WITHOUT_CLASSIFICATION	1.0449238673582899E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9998955076132641	WITHOUT_CLASSIFICATION	1.0449238673582899E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9998955076132641	WITHOUT_CLASSIFICATION	1.0449238673582899E-4	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999999615202046	WITHOUT_CLASSIFICATION	3.8479795310985164E-8	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999999615202046	WITHOUT_CLASSIFICATION	3.8479795310985164E-8	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999999821942281	WITHOUT_CLASSIFICATION	1.7805771827857055E-8	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999248332747073	WITHOUT_CLASSIFICATION	7.516672529265741E-5	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999999921009061	WITHOUT_CLASSIFICATION	7.899093921802673E-9	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999999889848595	WITHOUT_CLASSIFICATION	1.1015140467675173E-8	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.999998628408563	WITHOUT_CLASSIFICATION	1.3715914370127429E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999998872012574	WITHOUT_CLASSIFICATION	1.1279874262605144E-7	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9999992332921417	WITHOUT_CLASSIFICATION	7.667078582957979E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999999341533174	WITHOUT_CLASSIFICATION	6.584668259752206E-8	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999999992222629	WITHOUT_CLASSIFICATION	7.777371046539678E-10	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999998139848385	WITHOUT_CLASSIFICATION	1.860151615150108E-7	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999998269567596	WITHOUT_CLASSIFICATION	1.7304324042568056E-7	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.99969177218466	WITHOUT_CLASSIFICATION	3.082278153399582E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999970846601267	WITHOUT_CLASSIFICATION	2.9153398732564396E-6	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999999396166421	WITHOUT_CLASSIFICATION	6.038335782442518E-8	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999999455830306	WITHOUT_CLASSIFICATION	5.4416969381447514E-8	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999999227617398	WITHOUT_CLASSIFICATION	7.723826021236546E-8	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9999952291921742	WITHOUT_CLASSIFICATION	4.770807825806437E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999994645555277	WITHOUT_CLASSIFICATION	5.354444723565906E-7	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999994645555277	WITHOUT_CLASSIFICATION	5.354444723565906E-7	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999997789782343	WITHOUT_CLASSIFICATION	2.2102176562634696E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999999569341957	WITHOUT_CLASSIFICATION	4.306580430231137E-8	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999999569341957	WITHOUT_CLASSIFICATION	4.306580430231137E-8	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9999496637331737	WITHOUT_CLASSIFICATION	5.033626682625063E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999999490050038	WITHOUT_CLASSIFICATION	5.099499621337905E-8	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999998189413193	WITHOUT_CLASSIFICATION	1.8105868065198282E-7	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999996785559759	WITHOUT_CLASSIFICATION	3.214440240889565E-7	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999998991558756	WITHOUT_CLASSIFICATION	1.0084412434221395E-7	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.999999815368286	WITHOUT_CLASSIFICATION	1.8463171396635895E-7	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999995380209208	WITHOUT_CLASSIFICATION	4.6197907923034077E-7	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999950782304083	WITHOUT_CLASSIFICATION	4.921769591742123E-6	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999999676624731	WITHOUT_CLASSIFICATION	3.2337526832573733E-8	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999987822731194	WITHOUT_CLASSIFICATION	1.21772688060034E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.999999739211452	WITHOUT_CLASSIFICATION	2.607885480724533E-7	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999956368620411	WITHOUT_CLASSIFICATION	4.36313795882952E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.999999864013718	WITHOUT_CLASSIFICATION	1.3598628205325077E-7	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999989323464873	WITHOUT_CLASSIFICATION	1.0676535127221094E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999999341533174	WITHOUT_CLASSIFICATION	6.584668259752206E-8	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9999906008916294	WITHOUT_CLASSIFICATION	9.399108370629615E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999995148780172	WITHOUT_CLASSIFICATION	4.851219828185032E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999619550375	WITHOUT_CLASSIFICATION	3.804496254699027E-8	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999619550375	WITHOUT_CLASSIFICATION	3.804496254699027E-8	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999837306707943	WITHOUT_CLASSIFICATION	1.6269329205735226E-5	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9999789716535642	WITHOUT_CLASSIFICATION	2.102834643571782E-5	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999998835918015	WITHOUT_CLASSIFICATION	1.1640819850870666E-7	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999970710743055	WITHOUT_CLASSIFICATION	2.928925694652884E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.99999991317661	WITHOUT_CLASSIFICATION	8.682339005448703E-8	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999999954392397	WITHOUT_CLASSIFICATION	4.5607603459998315E-9	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9998844089561744	WITHOUT_CLASSIFICATION	1.1559104382562718E-4	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9985987149358764	WITHOUT_CLASSIFICATION	0.00140128506412365	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999990238273808	WITHOUT_CLASSIFICATION	9.761726191354553E-7	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9999942645183585	WITHOUT_CLASSIFICATION	5.735481641533851E-6	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.999997954848486	WITHOUT_CLASSIFICATION	2.045151513967929E-6	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9999988632697147	WITHOUT_CLASSIFICATION	1.136730285359645E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9798699549967375	DEFECT	0.020130045003262525	WITHOUT_CLASSIFICATION
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999993936567078	WITHOUT_CLASSIFICATION	6.063432923038294E-7	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999999457540538	WITHOUT_CLASSIFICATION	5.4245946130725226E-8	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.99999742939076	WITHOUT_CLASSIFICATION	2.570609239968638E-6	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.999999331027347	WITHOUT_CLASSIFICATION	6.689726530813253E-7	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999999895436118	WITHOUT_CLASSIFICATION	1.0456388121668195E-8	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999999852510725	WITHOUT_CLASSIFICATION	1.4748927455835046E-8	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999973764227955	WITHOUT_CLASSIFICATION	2.6235772045206594E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999994807022047	WITHOUT_CLASSIFICATION	5.192977954021114E-7	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.999998724222069	WITHOUT_CLASSIFICATION	1.2757779309254543E-6	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.99999974736849	WITHOUT_CLASSIFICATION	2.526315100711729E-7	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999999983372518	WITHOUT_CLASSIFICATION	1.6627482612141886E-9	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999993985713331	WITHOUT_CLASSIFICATION	6.014286668200637E-7	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999995488763235	WITHOUT_CLASSIFICATION	4.511236765576326E-7	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9993837295753409	WITHOUT_CLASSIFICATION	6.162704246590936E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9916318764175436	WITHOUT_CLASSIFICATION	0.008368123582456394	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.999999993901377	WITHOUT_CLASSIFICATION	6.098623123133524E-9	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9997319388877806	WITHOUT_CLASSIFICATION	2.6806111221945996E-4	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999836157364086	WITHOUT_CLASSIFICATION	1.638426359148392E-5	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999999962925241	WITHOUT_CLASSIFICATION	3.707475859825206E-9	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.999953182195081	WITHOUT_CLASSIFICATION	4.681780491901921E-5	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9968367307833568	WITHOUT_CLASSIFICATION	0.0031632692166432314	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999965287882	WITHOUT_CLASSIFICATION	3.47121179997865E-9	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999983701738505	WITHOUT_CLASSIFICATION	1.6298261494992918E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9916318764175436	WITHOUT_CLASSIFICATION	0.008368123582456394	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999998700188204	WITHOUT_CLASSIFICATION	1.2998117961542282E-7	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999965287882	WITHOUT_CLASSIFICATION	3.47121179997865E-9	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.999998876713453	WITHOUT_CLASSIFICATION	1.123286547063346E-6	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999999851441044	WITHOUT_CLASSIFICATION	1.4855895620959123E-8	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999999674440818	WITHOUT_CLASSIFICATION	3.255591812938245E-8	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999995307878031	WITHOUT_CLASSIFICATION	4.6921219689617883E-7	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999995012596914	WITHOUT_CLASSIFICATION	4.987403086326965E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999805990680027	WITHOUT_CLASSIFICATION	1.9400931997216033E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999805990680027	WITHOUT_CLASSIFICATION	1.9400931997216033E-5	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999999787631713	WITHOUT_CLASSIFICATION	2.1236828751168986E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.999999924926461	WITHOUT_CLASSIFICATION	7.50735391001771E-8	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999997608132456	WITHOUT_CLASSIFICATION	2.391867543438161E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999997608132456	WITHOUT_CLASSIFICATION	2.391867543438161E-7	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999979122189299	WITHOUT_CLASSIFICATION	2.0877810702409977E-6	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9995829347030624	WITHOUT_CLASSIFICATION	4.170652969376272E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999702900386697	WITHOUT_CLASSIFICATION	2.9709961330367805E-5	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999702900386697	WITHOUT_CLASSIFICATION	2.9709961330367805E-5	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999917075823296	WITHOUT_CLASSIFICATION	8.292417670453444E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999934942316859	WITHOUT_CLASSIFICATION	6.505768314147302E-6	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999991834094892	WITHOUT_CLASSIFICATION	8.165905108537419E-7	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999994981033625	WITHOUT_CLASSIFICATION	5.018966373857675E-7	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999931942185966	WITHOUT_CLASSIFICATION	6.805781403460606E-6	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.999996297949354	WITHOUT_CLASSIFICATION	3.7020506459616578E-6	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999978782705146	WITHOUT_CLASSIFICATION	2.121729485427524E-6	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999983331264232	WITHOUT_CLASSIFICATION	1.666873576831982E-6	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999810898484583	WITHOUT_CLASSIFICATION	1.891015154163123E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999997514038199	WITHOUT_CLASSIFICATION	2.485961800777514E-7	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999994790411603	WITHOUT_CLASSIFICATION	5.209588397680219E-7	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999834232962883	WITHOUT_CLASSIFICATION	1.6576703711643274E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999800776006544	WITHOUT_CLASSIFICATION	1.9922399345592578E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999993818484785	WITHOUT_CLASSIFICATION	6.181515215394591E-7	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999995222678731	WITHOUT_CLASSIFICATION	4.777321268014821E-7	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999998397926756	WITHOUT_CLASSIFICATION	1.6020732448879705E-7	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999252953509487	WITHOUT_CLASSIFICATION	7.470464905127978E-5	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999959972547086	WITHOUT_CLASSIFICATION	4.0027452914701955E-6	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999970189935042	WITHOUT_CLASSIFICATION	2.9810064957113864E-6	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999836046235674	WITHOUT_CLASSIFICATION	1.639537643258924E-5	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999999015890431	WITHOUT_CLASSIFICATION	9.841095704277913E-8	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999998675790094	WITHOUT_CLASSIFICATION	1.324209905187283E-7	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999969822237913	WITHOUT_CLASSIFICATION	3.0177762087930043E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999951721306797	WITHOUT_CLASSIFICATION	4.827869320291952E-6	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999891632275257	WITHOUT_CLASSIFICATION	1.0836772474180043E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.99999315933866	WITHOUT_CLASSIFICATION	6.840661340086972E-6	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999956714238922	WITHOUT_CLASSIFICATION	4.328576107774189E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999915714288187	WITHOUT_CLASSIFICATION	8.428571181356232E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999945041330541	WITHOUT_CLASSIFICATION	5.495866945918473E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999945041330541	WITHOUT_CLASSIFICATION	5.495866945918473E-6	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999958555185495	WITHOUT_CLASSIFICATION	4.144481450459575E-6	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.999999850937482	WITHOUT_CLASSIFICATION	1.4906251803379517E-7	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999963954827	WITHOUT_CLASSIFICATION	3.6045173001064285E-6	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9998926725152746	WITHOUT_CLASSIFICATION	1.0732748472534521E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999759358225859	WITHOUT_CLASSIFICATION	2.4064177414003446E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999823357404225	WITHOUT_CLASSIFICATION	1.7664259577430164E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999994166365749	WITHOUT_CLASSIFICATION	5.833634251804104E-7	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999998776042179	WITHOUT_CLASSIFICATION	1.223957820804275E-7	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999980013860479	WITHOUT_CLASSIFICATION	1.9986139520061867E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999956035107	WITHOUT_CLASSIFICATION	4.396489272269454E-9	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999995518480875	WITHOUT_CLASSIFICATION	4.481519124996453E-7	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999999875448375	WITHOUT_CLASSIFICATION	1.2455162469872555E-8	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999991110778721	WITHOUT_CLASSIFICATION	8.889221279299888E-7	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999985413979395	WITHOUT_CLASSIFICATION	1.458602060540331E-6	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999998075348684	WITHOUT_CLASSIFICATION	1.9246513164966124E-7	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999989020977661	WITHOUT_CLASSIFICATION	1.097902233899507E-6	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999920011071608	WITHOUT_CLASSIFICATION	7.998892839108948E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999931062923043	WITHOUT_CLASSIFICATION	6.893707695653713E-6	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999965174454424	WITHOUT_CLASSIFICATION	3.48255455766019E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9999691530094629	WITHOUT_CLASSIFICATION	3.08469905371776E-5	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999998204508055	WITHOUT_CLASSIFICATION	1.7954919446129306E-7	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999892093530423	WITHOUT_CLASSIFICATION	1.0790646957713554E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999999795865628	WITHOUT_CLASSIFICATION	2.0413437148905854E-8	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999999900524328	WITHOUT_CLASSIFICATION	9.947567213546262E-9	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999998741109333	WITHOUT_CLASSIFICATION	1.2588906674022503E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999993288368189	WITHOUT_CLASSIFICATION	6.711631810913402E-7	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999832090871776	WITHOUT_CLASSIFICATION	1.6790912822372415E-5	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999996796306353	WITHOUT_CLASSIFICATION	3.203693647900366E-7	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999962558151344	WITHOUT_CLASSIFICATION	3.744184865630328E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999999641769021	WITHOUT_CLASSIFICATION	3.5823097966193804E-8	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999969362171663	WITHOUT_CLASSIFICATION	3.0637828336869218E-6	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999994277571906	WITHOUT_CLASSIFICATION	5.722428093009863E-7	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999999889652738	WITHOUT_CLASSIFICATION	1.1034726318144087E-8	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999990101387161	WITHOUT_CLASSIFICATION	9.8986128391897E-7	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999999696126524	WITHOUT_CLASSIFICATION	3.038734764320373E-8	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.999999319259187	WITHOUT_CLASSIFICATION	6.807408131301563E-7	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999997730705047	WITHOUT_CLASSIFICATION	2.26929495405461E-7	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999986842542029	WITHOUT_CLASSIFICATION	1.3157457970962784E-6	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999999985342168	WITHOUT_CLASSIFICATION	1.465783166861611E-9	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999997471563473	WITHOUT_CLASSIFICATION	2.5284365273701464E-7	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9999155835644945	WITHOUT_CLASSIFICATION	8.44164355055299E-5	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999999548955995	WITHOUT_CLASSIFICATION	4.5104400618014905E-8	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.999944292126661	WITHOUT_CLASSIFICATION	5.570787333908967E-5	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.999944292126661	WITHOUT_CLASSIFICATION	5.570787333908967E-5	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999998727241785	WITHOUT_CLASSIFICATION	1.2727582164449974E-7	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999545668816243	WITHOUT_CLASSIFICATION	4.543311837566788E-5	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.99999930194525	WITHOUT_CLASSIFICATION	6.980547499966196E-7	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999994676820011	WITHOUT_CLASSIFICATION	5.323179988567065E-7	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999825758923	WITHOUT_CLASSIFICATION	1.7424107640891325E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999869075219	WITHOUT_CLASSIFICATION	1.3092477988112037E-8	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999994882094171	WITHOUT_CLASSIFICATION	5.117905828674768E-7	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999991390801392	WITHOUT_CLASSIFICATION	8.609198607645474E-7	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9916601386294341	WITHOUT_CLASSIFICATION	0.008339861370565832	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999800040851482	WITHOUT_CLASSIFICATION	1.9995914851796448E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999998720572498	WITHOUT_CLASSIFICATION	1.2794275017824066E-7	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999999270621028	WITHOUT_CLASSIFICATION	7.29378972000924E-8	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999999070520375	WITHOUT_CLASSIFICATION	9.294796250809424E-8	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999998054956956	WITHOUT_CLASSIFICATION	1.9450430445408753E-7	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999999934625351	WITHOUT_CLASSIFICATION	6.537464921896911E-9	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999998848180964	WITHOUT_CLASSIFICATION	1.1518190350525825E-7	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999999470171298	WITHOUT_CLASSIFICATION	5.2982870339196306E-8	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999989289653199	WITHOUT_CLASSIFICATION	1.0710346800847726E-6	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999998037638641	WITHOUT_CLASSIFICATION	1.9623613599601066E-7	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999967621039221	WITHOUT_CLASSIFICATION	3.237896077963262E-6	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999998026522168	WITHOUT_CLASSIFICATION	1.9734778333322875E-7	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999889668503151	WITHOUT_CLASSIFICATION	1.1033149684731636E-5	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999999405727631	WITHOUT_CLASSIFICATION	5.94272369522961E-8	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999999712897926	WITHOUT_CLASSIFICATION	2.8710207519393086E-8	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999786686612	WITHOUT_CLASSIFICATION	2.1331338833792733E-8	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999374629869	WITHOUT_CLASSIFICATION	6.253701315350214E-8	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999998817980592	WITHOUT_CLASSIFICATION	1.1820194072100138E-7	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999999736536188	WITHOUT_CLASSIFICATION	2.634638116529835E-8	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999999137059421	WITHOUT_CLASSIFICATION	8.629405790646348E-8	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999999441337163	WITHOUT_CLASSIFICATION	5.5866283827059486E-8	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.999999824836712	WITHOUT_CLASSIFICATION	1.7516328799759205E-7	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.999999803377357	WITHOUT_CLASSIFICATION	1.9662264294866647E-7	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999994313370827	WITHOUT_CLASSIFICATION	5.686629173489515E-7	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999994032327817	WITHOUT_CLASSIFICATION	5.967672183113919E-7	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999986842542029	WITHOUT_CLASSIFICATION	1.3157457970962784E-6	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999996140235916	WITHOUT_CLASSIFICATION	3.859764083882046E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999941097146	WITHOUT_CLASSIFICATION	5.890285380332327E-9	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999941097146	WITHOUT_CLASSIFICATION	5.890285380332327E-9	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999987888073144	WITHOUT_CLASSIFICATION	1.2111926855766253E-6	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999995604505151	WITHOUT_CLASSIFICATION	4.395494848918546E-7	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999940971295564	WITHOUT_CLASSIFICATION	5.9028704435314305E-6	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999999137516047	WITHOUT_CLASSIFICATION	8.62483952878016E-8	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999995772718798	WITHOUT_CLASSIFICATION	4.2272812019350704E-7	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999998972020059	WITHOUT_CLASSIFICATION	1.0279799402663247E-7	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999999121179712	WITHOUT_CLASSIFICATION	8.788202880213447E-8	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999990175298763	WITHOUT_CLASSIFICATION	9.82470123743553E-7	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999991626847541	WITHOUT_CLASSIFICATION	8.373152459851181E-7	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999992963756059	WITHOUT_CLASSIFICATION	7.036243941717853E-7	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999919975866213	WITHOUT_CLASSIFICATION	8.002413378684206E-6	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999965198912841	WITHOUT_CLASSIFICATION	3.4801087159343408E-6	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999988191594573	WITHOUT_CLASSIFICATION	1.1808405426645756E-6	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999993216466365	WITHOUT_CLASSIFICATION	6.783533634913864E-7	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.999999995838152	WITHOUT_CLASSIFICATION	4.161847964385144E-9	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999851711227388	WITHOUT_CLASSIFICATION	1.4828877261298551E-5	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999926450897859	WITHOUT_CLASSIFICATION	7.354910214036608E-6	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999940415185832	WITHOUT_CLASSIFICATION	5.958481416764041E-6	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999986458602621	WITHOUT_CLASSIFICATION	1.3541397379196484E-6	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.999998862070366	WITHOUT_CLASSIFICATION	1.1379296339237673E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999857324745992	WITHOUT_CLASSIFICATION	1.4267525400800448E-5	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999976847741285	WITHOUT_CLASSIFICATION	2.3152258715303483E-6	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999999854885269	WITHOUT_CLASSIFICATION	1.4511473059554326E-8	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.999996552816898	WITHOUT_CLASSIFICATION	3.447183101868701E-6	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999974822642196	WITHOUT_CLASSIFICATION	2.51773578047893E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999950914493635	WITHOUT_CLASSIFICATION	4.9085506365031765E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999999203745323	WITHOUT_CLASSIFICATION	7.962546769301082E-8	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.99999999226032	WITHOUT_CLASSIFICATION	7.73967996308001E-9	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999998093942795	WITHOUT_CLASSIFICATION	1.906057205150611E-7	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999947208437	WITHOUT_CLASSIFICATION	5.279156316982546E-9	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999999548718689	WITHOUT_CLASSIFICATION	4.5128131204199345E-8	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.999999500079186	WITHOUT_CLASSIFICATION	4.99920813887743E-7	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999996880884207	WITHOUT_CLASSIFICATION	3.1191157931730416E-7	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999988442269884	WITHOUT_CLASSIFICATION	1.1557730117041392E-6	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999976855446711	WITHOUT_CLASSIFICATION	2.314455329015865E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999975984933955	WITHOUT_CLASSIFICATION	2.4015066045638605E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.999998901881448	WITHOUT_CLASSIFICATION	1.0981185519365825E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999950914493635	WITHOUT_CLASSIFICATION	4.9085506365031765E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999999203745323	WITHOUT_CLASSIFICATION	7.962546769301082E-8	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.99999999226032	WITHOUT_CLASSIFICATION	7.73967996308001E-9	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999947208437	WITHOUT_CLASSIFICATION	5.279156316982546E-9	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9995711423396847	WITHOUT_CLASSIFICATION	4.2885766031529554E-4	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999342704019	WITHOUT_CLASSIFICATION	6.572959808310983E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.99999836764237	WITHOUT_CLASSIFICATION	1.6323576299254605E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999965096586767	WITHOUT_CLASSIFICATION	3.490341323274624E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999870270885914	WITHOUT_CLASSIFICATION	1.297291140856045E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999967330088783	WITHOUT_CLASSIFICATION	3.2669911218417505E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999997467697019	WITHOUT_CLASSIFICATION	2.53230298022304E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999963931122834	WITHOUT_CLASSIFICATION	3.6068877166312768E-6	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999998092147662	WITHOUT_CLASSIFICATION	1.9078523380127053E-7	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999997699010598	WITHOUT_CLASSIFICATION	2.3009894030392794E-7	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999998245256615	WITHOUT_CLASSIFICATION	1.7547433849136912E-7	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999999575144942	WITHOUT_CLASSIFICATION	4.2485505700798716E-8	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999945142436769	WITHOUT_CLASSIFICATION	5.485756323109275E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999999174722781	WITHOUT_CLASSIFICATION	8.25277218772849E-8	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999997959836773	WITHOUT_CLASSIFICATION	2.0401632269912535E-7	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999995872947846	WITHOUT_CLASSIFICATION	4.1270521547980356E-7	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999999713589364	WITHOUT_CLASSIFICATION	2.86410635842463E-8	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999996594952616	WITHOUT_CLASSIFICATION	3.405047383461571E-7	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999994638646684	WITHOUT_CLASSIFICATION	5.361353314647889E-7	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.999998901881448	WITHOUT_CLASSIFICATION	1.0981185519365825E-6	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999342704019	WITHOUT_CLASSIFICATION	6.572959808310983E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.99999836764237	WITHOUT_CLASSIFICATION	1.6323576299254605E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999870270885914	WITHOUT_CLASSIFICATION	1.297291140856045E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999967330088783	WITHOUT_CLASSIFICATION	3.2669911218417505E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999997467697019	WITHOUT_CLASSIFICATION	2.53230298022304E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999963931122834	WITHOUT_CLASSIFICATION	3.6068877166312768E-6	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999994381043039	WITHOUT_CLASSIFICATION	5.618956961459228E-7	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.999989427339163	WITHOUT_CLASSIFICATION	1.0572660836923015E-5	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999999444804587	WITHOUT_CLASSIFICATION	5.551954127018999E-8	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999999554207429	WITHOUT_CLASSIFICATION	4.457925702141141E-8	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999820482045021	WITHOUT_CLASSIFICATION	1.7951795497887413E-5	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999820482045021	WITHOUT_CLASSIFICATION	1.7951795497887413E-5	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999991346185015	WITHOUT_CLASSIFICATION	8.653814985052189E-7	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.999999993381224	WITHOUT_CLASSIFICATION	6.61877596047718E-9	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999994567566536	WITHOUT_CLASSIFICATION	5.432433464615865E-7	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999992845995861	WITHOUT_CLASSIFICATION	7.154004139799734E-7	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999999950444004	WITHOUT_CLASSIFICATION	4.955599565591661E-9	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999988714637198	WITHOUT_CLASSIFICATION	1.128536280188648E-6	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999999314640747	WITHOUT_CLASSIFICATION	6.853592521270239E-8	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999998189064103	WITHOUT_CLASSIFICATION	1.810935896830558E-7	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999992919175258	WITHOUT_CLASSIFICATION	7.080824740867079E-7	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999998688029945	WITHOUT_CLASSIFICATION	1.3119700540658473E-7	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999999401063143	WITHOUT_CLASSIFICATION	5.98936856726426E-8	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999995881268222	WITHOUT_CLASSIFICATION	4.118731778162507E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999942919667422	WITHOUT_CLASSIFICATION	5.7080332579098625E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999997406492237	WITHOUT_CLASSIFICATION	2.593507762482202E-7	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999999809016307	WITHOUT_CLASSIFICATION	1.9098369268318745E-8	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999997344317157	WITHOUT_CLASSIFICATION	2.6556828425702366E-7	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999999923249526	WITHOUT_CLASSIFICATION	7.675047332596054E-9	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.999999936746824	WITHOUT_CLASSIFICATION	6.325317595080723E-8	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999966295977112	WITHOUT_CLASSIFICATION	3.370402288792736E-6	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.999999964870556	WITHOUT_CLASSIFICATION	3.512944407934653E-8	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9999915412779897	WITHOUT_CLASSIFICATION	8.458722010218149E-6	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.999999644144263	WITHOUT_CLASSIFICATION	3.558557370653044E-7	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999999768767832	WITHOUT_CLASSIFICATION	2.3123216742333316E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9966892510598739	WITHOUT_CLASSIFICATION	0.0033107489401260136	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999153619671	WITHOUT_CLASSIFICATION	8.463803296095569E-8	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999976635385012	WITHOUT_CLASSIFICATION	2.3364614988372115E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999987341950084	WITHOUT_CLASSIFICATION	1.2658049914997954E-6	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999454751818418	WITHOUT_CLASSIFICATION	5.452481815817509E-5	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.999988246046266	WITHOUT_CLASSIFICATION	1.1753953734091291E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999153619671	WITHOUT_CLASSIFICATION	8.463803296095569E-8	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999976635385012	WITHOUT_CLASSIFICATION	2.3364614988372115E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999997406492237	WITHOUT_CLASSIFICATION	2.593507762482202E-7	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999998980750434	WITHOUT_CLASSIFICATION	1.019249565708603E-7	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999996933502986	WITHOUT_CLASSIFICATION	3.0664970137905893E-7	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999409210555372	WITHOUT_CLASSIFICATION	5.907894446278441E-5	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999968297465761	WITHOUT_CLASSIFICATION	3.1702534237685923E-6	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999999987034914	WITHOUT_CLASSIFICATION	1.2965086360101688E-9	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999942847259754	WITHOUT_CLASSIFICATION	5.715274024622138E-6	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9999989495334848	WITHOUT_CLASSIFICATION	1.050466515221895E-6	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999999597113679	WITHOUT_CLASSIFICATION	4.028863220334165E-8	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9996249055709447	WITHOUT_CLASSIFICATION	3.7509442905524096E-4	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999875807338924	WITHOUT_CLASSIFICATION	1.2419266107491112E-5	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9980016177924155	WITHOUT_CLASSIFICATION	0.001998382207584466	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999990797253392	WITHOUT_CLASSIFICATION	9.202746609404539E-7	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999998012609411	WITHOUT_CLASSIFICATION	1.9873905881521835E-7	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999999429343305	WITHOUT_CLASSIFICATION	5.706566946353206E-8	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999974774055105	WITHOUT_CLASSIFICATION	2.5225944894288037E-6	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9999785294048978	WITHOUT_CLASSIFICATION	2.147059510210728E-5	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9998684108074183	WITHOUT_CLASSIFICATION	1.3158919258169632E-4	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999957831310166	WITHOUT_CLASSIFICATION	4.21686898341444E-6	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999933693179	WITHOUT_CLASSIFICATION	6.630682185151834E-9	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999976804956233	WITHOUT_CLASSIFICATION	2.3195043766492806E-6	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999982199189	WITHOUT_CLASSIFICATION	1.7800810994944486E-9	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999994601894107	WITHOUT_CLASSIFICATION	5.398105893352187E-7	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999992409120992	WITHOUT_CLASSIFICATION	7.590879007493383E-7	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999999798470797	WITHOUT_CLASSIFICATION	2.01529203135032E-8	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999999979377858	WITHOUT_CLASSIFICATION	2.062214166694813E-9	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.999997894729152	WITHOUT_CLASSIFICATION	2.10527084802294E-6	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999994145733501	WITHOUT_CLASSIFICATION	5.854266499939381E-7	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999991905759525	WITHOUT_CLASSIFICATION	8.094240475633956E-7	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999928596728088	WITHOUT_CLASSIFICATION	7.140327191202842E-6	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.999533481838561	WITHOUT_CLASSIFICATION	4.665181614389631E-4	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999988219050474	WITHOUT_CLASSIFICATION	1.1780949524931357E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999682072193	WITHOUT_CLASSIFICATION	3.179278079383895E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999682072193	WITHOUT_CLASSIFICATION	3.179278079383895E-8	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999942919667422	WITHOUT_CLASSIFICATION	5.7080332579098625E-6	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999999109740407	WITHOUT_CLASSIFICATION	8.902595924782237E-8	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999546190765	WITHOUT_CLASSIFICATION	4.538092349206728E-8	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999991320439097	WITHOUT_CLASSIFICATION	8.679560903025455E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.99999931935787	WITHOUT_CLASSIFICATION	6.806421299071487E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.99999931935787	WITHOUT_CLASSIFICATION	6.806421299071487E-7	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999998800813859	WITHOUT_CLASSIFICATION	1.1991861410771123E-7	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999999995747191	WITHOUT_CLASSIFICATION	4.2528099086355166E-10	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999999670035244	WITHOUT_CLASSIFICATION	3.299647556161047E-8	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999999003867908	WITHOUT_CLASSIFICATION	9.961320924542769E-8	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999980344797424	WITHOUT_CLASSIFICATION	1.9655202575809835E-6	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999999969406628	WITHOUT_CLASSIFICATION	3.0593372961152892E-9	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999991626018124	WITHOUT_CLASSIFICATION	8.373981875746708E-7	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999999831168548	WITHOUT_CLASSIFICATION	1.6883145267288727E-8	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999840073335964	WITHOUT_CLASSIFICATION	1.599266640368143E-5	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999997218664775	WITHOUT_CLASSIFICATION	2.7813352244442043E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999984446033752	WITHOUT_CLASSIFICATION	1.555396624883201E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999997857485369	WITHOUT_CLASSIFICATION	2.1425146301970113E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999965457255946	WITHOUT_CLASSIFICATION	3.45427440533416E-6	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999925229098551	WITHOUT_CLASSIFICATION	7.4770901449787125E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999967200386475	WITHOUT_CLASSIFICATION	3.2799613525606506E-6	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999988885923248	WITHOUT_CLASSIFICATION	1.111407675220376E-6	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999762877101	WITHOUT_CLASSIFICATION	2.371228996196755E-8	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999762877101	WITHOUT_CLASSIFICATION	2.371228996196755E-8	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999977534040766	WITHOUT_CLASSIFICATION	2.2465959235035327E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999977534040766	WITHOUT_CLASSIFICATION	2.2465959235035327E-6	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999999957075851	WITHOUT_CLASSIFICATION	4.292414860064048E-9	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999032017779834	WITHOUT_CLASSIFICATION	9.679822201656373E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9983687742013598	WITHOUT_CLASSIFICATION	0.0016312257986401942	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999999947143255	WITHOUT_CLASSIFICATION	5.285674516619933E-9	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999972127634946	WITHOUT_CLASSIFICATION	2.7872365054340603E-6	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999981930634573	WITHOUT_CLASSIFICATION	1.806936542702978E-6	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999999693053151	WITHOUT_CLASSIFICATION	3.069468487199112E-8	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999997857485369	WITHOUT_CLASSIFICATION	2.1425146301970113E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999965457255946	WITHOUT_CLASSIFICATION	3.45427440533416E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999967200386475	WITHOUT_CLASSIFICATION	3.2799613525606506E-6	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999948149610558	WITHOUT_CLASSIFICATION	5.185038944256754E-6	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999953905403254	WITHOUT_CLASSIFICATION	4.609459674592397E-6	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9816377792793813	WITHOUT_CLASSIFICATION	0.018362220720618657	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9999506333074161	WITHOUT_CLASSIFICATION	4.936669258387422E-5	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999925741620155	WITHOUT_CLASSIFICATION	7.4258379846355964E-6	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.999939861126049	WITHOUT_CLASSIFICATION	6.013887395093805E-5	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999994607322613	WITHOUT_CLASSIFICATION	5.392677387080225E-7	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999997535641302	WITHOUT_CLASSIFICATION	2.464358697600234E-7	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999999276515606	WITHOUT_CLASSIFICATION	7.23484393725071E-8	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.999999930341744	WITHOUT_CLASSIFICATION	6.965825603906589E-8	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999874751018515	WITHOUT_CLASSIFICATION	1.252489814842166E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9994197390202227	WITHOUT_CLASSIFICATION	5.802609797772972E-4	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999861627951444	WITHOUT_CLASSIFICATION	1.383720485572876E-5	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9985557317011642	WITHOUT_CLASSIFICATION	0.001444268298835815	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999973250095661	WITHOUT_CLASSIFICATION	2.674990434048493E-6	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.999999844218556	WITHOUT_CLASSIFICATION	1.5578144403084347E-7	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9999824064697299	WITHOUT_CLASSIFICATION	1.7593530270079043E-5	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999996642523928	WITHOUT_CLASSIFICATION	3.357476071965584E-7	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999999430195002	WITHOUT_CLASSIFICATION	5.6980499882853456E-8	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999992474475264	WITHOUT_CLASSIFICATION	7.52552473520682E-7	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999999671983045	WITHOUT_CLASSIFICATION	3.280169543734235E-8	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.999992141279072	WITHOUT_CLASSIFICATION	7.858720928001736E-6	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.999990482125133	WITHOUT_CLASSIFICATION	9.51787486702387E-6	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999995576434582	WITHOUT_CLASSIFICATION	4.4235654183258235E-7	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999998279833432	WITHOUT_CLASSIFICATION	1.7201665676653953E-7	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999985456307106	WITHOUT_CLASSIFICATION	1.4543692894893202E-6	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999686317410346	WITHOUT_CLASSIFICATION	3.1368258965464824E-5	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.999961168485912	WITHOUT_CLASSIFICATION	3.883151408803869E-5	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999999224097287	WITHOUT_CLASSIFICATION	7.759027127438346E-8	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9999177531559009	WITHOUT_CLASSIFICATION	8.224684409897928E-5	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999946851156313	WITHOUT_CLASSIFICATION	5.3148843687361536E-6	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9999753830963763	WITHOUT_CLASSIFICATION	2.4616903623673645E-5	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999956486050593	WITHOUT_CLASSIFICATION	4.35139494075508E-6	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999977219312697	WITHOUT_CLASSIFICATION	2.2780687302823624E-6	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9995010581423567	WITHOUT_CLASSIFICATION	4.989418576432462E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999999761231299	WITHOUT_CLASSIFICATION	2.387687018748296E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999993572022761	WITHOUT_CLASSIFICATION	6.427977238895125E-7	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9999852798866267	WITHOUT_CLASSIFICATION	1.4720113373398355E-5	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999918220548767	WITHOUT_CLASSIFICATION	8.177945123282213E-6	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999939051716862	WITHOUT_CLASSIFICATION	6.094828313878309E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.999811248166362	WITHOUT_CLASSIFICATION	1.887518336380018E-4	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999546190765	WITHOUT_CLASSIFICATION	4.538092349206728E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999993572022761	WITHOUT_CLASSIFICATION	6.427977238895125E-7	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999922688217737	WITHOUT_CLASSIFICATION	7.731178226255029E-6	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9998834356284017	WITHOUT_CLASSIFICATION	1.1656437159835768E-4	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9999678307392749	WITHOUT_CLASSIFICATION	3.216926072519729E-5	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.999689312829072	WITHOUT_CLASSIFICATION	3.106871709279689E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.999689312829072	WITHOUT_CLASSIFICATION	3.106871709279689E-4	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999999986021134	WITHOUT_CLASSIFICATION	1.3978866013638295E-9	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999999808108546	WITHOUT_CLASSIFICATION	1.918914540425648E-8	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999995557275614	WITHOUT_CLASSIFICATION	4.442724386813119E-7	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999999998705789	WITHOUT_CLASSIFICATION	1.2942116767424199E-10	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999592537552586	WITHOUT_CLASSIFICATION	4.07462447413862E-5	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999997755048363	WITHOUT_CLASSIFICATION	2.244951637164041E-7	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999999504550013	WITHOUT_CLASSIFICATION	4.954499855099347E-8	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.999996946935303	WITHOUT_CLASSIFICATION	3.053064696903925E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999999222764486	WITHOUT_CLASSIFICATION	7.772355146281601E-8	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999999222764486	WITHOUT_CLASSIFICATION	7.772355146281601E-8	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999999513002752	WITHOUT_CLASSIFICATION	4.869972491429068E-8	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999972448295023	WITHOUT_CLASSIFICATION	2.755170497848947E-6	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999999944733307	WITHOUT_CLASSIFICATION	5.526669345086687E-9	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999998853953791	WITHOUT_CLASSIFICATION	1.1460462090220242E-7	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999993289538511	WITHOUT_CLASSIFICATION	6.710461487914282E-7	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999988983995598	WITHOUT_CLASSIFICATION	1.1016004401952225E-6	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9984916462632109	WITHOUT_CLASSIFICATION	0.0015083537367891293	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999998495760173	WITHOUT_CLASSIFICATION	1.5042398268365086E-7	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999998194964462	WITHOUT_CLASSIFICATION	1.8050355381643725E-7	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9999701777433928	WITHOUT_CLASSIFICATION	2.98222566072183E-5	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999989062569894	WITHOUT_CLASSIFICATION	1.0937430106264816E-6	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999968005629517	WITHOUT_CLASSIFICATION	3.1994370482133633E-6	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999997676223784	WITHOUT_CLASSIFICATION	2.323776216008469E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999995065543411	WITHOUT_CLASSIFICATION	4.934456588675447E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999995065543411	WITHOUT_CLASSIFICATION	4.934456588675447E-7	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999982375398428	WITHOUT_CLASSIFICATION	1.7624601571471288E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999963931122834	WITHOUT_CLASSIFICATION	3.6068877166312768E-6	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999977137472246	WITHOUT_CLASSIFICATION	2.2862527754424993E-6	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999996662989742	WITHOUT_CLASSIFICATION	3.337010257830856E-7	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.999999596828799	WITHOUT_CLASSIFICATION	4.031712009547744E-7	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999936901235271	WITHOUT_CLASSIFICATION	6.309876472849686E-6	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999998841906302	WITHOUT_CLASSIFICATION	1.1580936983242349E-7	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.999988860775642	WITHOUT_CLASSIFICATION	1.1139224358049774E-5	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999989169098155	WITHOUT_CLASSIFICATION	1.083090184503389E-6	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999993846781621	WITHOUT_CLASSIFICATION	6.153218378766817E-7	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999998967532244	WITHOUT_CLASSIFICATION	1.0324677558365033E-7	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999994135488767	WITHOUT_CLASSIFICATION	5.86451123451632E-7	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999750491745726	WITHOUT_CLASSIFICATION	2.4950825427399967E-5	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999994431134849	WITHOUT_CLASSIFICATION	5.568865151488586E-7	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999986241642277	WITHOUT_CLASSIFICATION	1.3758357722325666E-6	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999998714628858	WITHOUT_CLASSIFICATION	1.2853711424117032E-7	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999987418152263	WITHOUT_CLASSIFICATION	1.2581847736028859E-6	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999998758232144	WITHOUT_CLASSIFICATION	1.241767856147656E-7	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999999431712666	WITHOUT_CLASSIFICATION	5.682873336021886E-8	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9999890941404218	WITHOUT_CLASSIFICATION	1.0905859578223148E-5	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9999601316305424	WITHOUT_CLASSIFICATION	3.986836945769148E-5	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999994378908449	WITHOUT_CLASSIFICATION	5.621091550724368E-7	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999985275896927	WITHOUT_CLASSIFICATION	1.4724103073323265E-6	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9997930664547434	WITHOUT_CLASSIFICATION	2.0693354525654984E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.5286188033924666	DEFECT	0.4713811966075335	WITHOUT_CLASSIFICATION
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9998909317231827	WITHOUT_CLASSIFICATION	1.0906827681741905E-4	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999999627166855	WITHOUT_CLASSIFICATION	3.728331442189015E-8	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.999999977443537	WITHOUT_CLASSIFICATION	2.2556462999500167E-8	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999999933029937	WITHOUT_CLASSIFICATION	6.697006184816731E-9	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9999514436362419	WITHOUT_CLASSIFICATION	4.855636375812633E-5	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999999635218763	WITHOUT_CLASSIFICATION	3.647812363058006E-8	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999996170679314	WITHOUT_CLASSIFICATION	3.8293206869749604E-7	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999997424515059	WITHOUT_CLASSIFICATION	2.575484941212177E-7	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999999988739451	WITHOUT_CLASSIFICATION	1.1260548312925552E-9	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.999999318112248	WITHOUT_CLASSIFICATION	6.818877520425518E-7	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999999847391244	WITHOUT_CLASSIFICATION	1.52608756006751E-8	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.999999898494808	WITHOUT_CLASSIFICATION	1.0150519197888264E-7	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9998155288425531	WITHOUT_CLASSIFICATION	1.8447115744685407E-4	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999934082905474	WITHOUT_CLASSIFICATION	6.591709452604511E-6	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999624611816823	WITHOUT_CLASSIFICATION	3.7538818317739815E-5	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999999669092013	WITHOUT_CLASSIFICATION	3.309079873044102E-8	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9998946676140035	WITHOUT_CLASSIFICATION	1.0533238599653866E-4	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999999415636943	WITHOUT_CLASSIFICATION	5.843630576180563E-8	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.999997406073991	WITHOUT_CLASSIFICATION	2.593926008944813E-6	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999816641395903	WITHOUT_CLASSIFICATION	1.8335860409659715E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999576763851538	WITHOUT_CLASSIFICATION	4.2323614846218895E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999999462423185	WITHOUT_CLASSIFICATION	5.375768161337253E-8	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999832004713	WITHOUT_CLASSIFICATION	1.6799528667531757E-8	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999894997588	WITHOUT_CLASSIFICATION	1.0500241191087538E-8	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999153619671	WITHOUT_CLASSIFICATION	8.463803296095569E-8	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999153619671	WITHOUT_CLASSIFICATION	8.463803296095569E-8	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999999802249671	WITHOUT_CLASSIFICATION	1.977503292842385E-8	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9999987569240227	WITHOUT_CLASSIFICATION	1.2430759772553798E-6	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999998353965163	WITHOUT_CLASSIFICATION	1.64603483677256E-7	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.6509466777165357	DEFECT	0.34905332228346425	WITHOUT_CLASSIFICATION
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999999944440664	WITHOUT_CLASSIFICATION	5.555933607523299E-9	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999999847205535	WITHOUT_CLASSIFICATION	1.5279446473186854E-8	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999845084256191	WITHOUT_CLASSIFICATION	1.549157438085766E-5	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9999969123592674	WITHOUT_CLASSIFICATION	3.087640732578423E-6	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.998300421176513	WITHOUT_CLASSIFICATION	0.0016995788234869709	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999999636109579	WITHOUT_CLASSIFICATION	3.638904220239538E-8	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999987635233976	WITHOUT_CLASSIFICATION	1.2364766024574433E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999987635233976	WITHOUT_CLASSIFICATION	1.2364766024574433E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999987635233976	WITHOUT_CLASSIFICATION	1.2364766024574433E-6	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999994754196876	WITHOUT_CLASSIFICATION	5.245803123087408E-7	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999992318410981	WITHOUT_CLASSIFICATION	7.681589019302961E-7	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999990185543581	WITHOUT_CLASSIFICATION	9.81445641788495E-7	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999986745193716	WITHOUT_CLASSIFICATION	1.3254806283749725E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999986745193716	WITHOUT_CLASSIFICATION	1.3254806283749725E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999955357621267	WITHOUT_CLASSIFICATION	4.464237873205835E-6	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999937007877421	WITHOUT_CLASSIFICATION	6.29921225797534E-6	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999997732508848	WITHOUT_CLASSIFICATION	2.2674911502603E-7	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999997993802643	WITHOUT_CLASSIFICATION	2.006197357259711E-7	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999981852503261	WITHOUT_CLASSIFICATION	1.8147496738443062E-6	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999926722618685	WITHOUT_CLASSIFICATION	7.3277381314638095E-6	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999996708021236	WITHOUT_CLASSIFICATION	3.2919787637535877E-7	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999914736942782	WITHOUT_CLASSIFICATION	8.526305721739195E-6	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.997215424506919	WITHOUT_CLASSIFICATION	0.0027845754930808423	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999995352901	WITHOUT_CLASSIFICATION	4.647098999483063E-7	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999995352901	WITHOUT_CLASSIFICATION	4.647098999483063E-7	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999995428902643	WITHOUT_CLASSIFICATION	4.5710973566562505E-7	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999692977738738	WITHOUT_CLASSIFICATION	3.070222612621055E-5	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999980668202575	WITHOUT_CLASSIFICATION	1.9331797426038968E-6	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999707909724413	WITHOUT_CLASSIFICATION	2.9209027558720098E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999938560731214	WITHOUT_CLASSIFICATION	6.143926878620404E-6	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999999895441851	WITHOUT_CLASSIFICATION	1.0455814879893602E-8	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999980118540318	WITHOUT_CLASSIFICATION	1.9881459682006316E-6	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999943464739298	WITHOUT_CLASSIFICATION	5.653526070188464E-6	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.999995709700308	WITHOUT_CLASSIFICATION	4.29029969194031E-6	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999951683490679	WITHOUT_CLASSIFICATION	4.831650932135677E-6	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999996550731916	WITHOUT_CLASSIFICATION	3.4492680843087425E-7	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999925082726079	WITHOUT_CLASSIFICATION	7.491727392099131E-6	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999970361697796	WITHOUT_CLASSIFICATION	2.9638302204383686E-6	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999993755486232	WITHOUT_CLASSIFICATION	6.24451376960103E-7	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9999830938872978	WITHOUT_CLASSIFICATION	1.6906112702240603E-5	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999991428628786	WITHOUT_CLASSIFICATION	8.571371214151986E-7	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999842275658996	WITHOUT_CLASSIFICATION	1.5772434100392057E-5	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9999621811476387	WITHOUT_CLASSIFICATION	3.781885236131942E-5	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999974798171094	WITHOUT_CLASSIFICATION	2.5201828906846644E-6	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999932782012586	WITHOUT_CLASSIFICATION	6.721798741349697E-6	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.997650810795577	WITHOUT_CLASSIFICATION	0.0023491892044230195	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999998420976524	WITHOUT_CLASSIFICATION	1.579023476374008E-7	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999992536462579	WITHOUT_CLASSIFICATION	7.463537421100562E-7	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999991509172828	WITHOUT_CLASSIFICATION	8.490827171864101E-7	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999938567883604	WITHOUT_CLASSIFICATION	6.143211639698495E-6	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999967684055365	WITHOUT_CLASSIFICATION	3.231594463538682E-6	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999996065130478	WITHOUT_CLASSIFICATION	3.934869522789953E-7	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.999999693181878	WITHOUT_CLASSIFICATION	3.068181220371499E-7	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.999895839236747	WITHOUT_CLASSIFICATION	1.041607632529998E-4	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999927944823883	WITHOUT_CLASSIFICATION	7.205517611675719E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999683574921757	WITHOUT_CLASSIFICATION	3.164250782426666E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999991210684671	WITHOUT_CLASSIFICATION	8.78931532794917E-7	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.999996835895448	WITHOUT_CLASSIFICATION	3.1641045520816454E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999683574921757	WITHOUT_CLASSIFICATION	3.164250782426666E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999926291947568	WITHOUT_CLASSIFICATION	7.3708052430980494E-6	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999985795203098	WITHOUT_CLASSIFICATION	1.4204796902200899E-6	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999990642504355	WITHOUT_CLASSIFICATION	9.357495646027592E-7	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999997003362879	WITHOUT_CLASSIFICATION	2.99663711960685E-7	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999977846695692	WITHOUT_CLASSIFICATION	2.2153304307200664E-6	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.999604784778533	WITHOUT_CLASSIFICATION	3.952152214670514E-4	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999993031965754	WITHOUT_CLASSIFICATION	6.968034245760311E-7	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999381320322004	WITHOUT_CLASSIFICATION	6.186796779965274E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9998889366081327	WITHOUT_CLASSIFICATION	1.1106339186722745E-4	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999615295753331	WITHOUT_CLASSIFICATION	3.847042466681388E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999048636408739	WITHOUT_CLASSIFICATION	9.513635912607593E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9998470710669141	WITHOUT_CLASSIFICATION	1.5292893308589922E-4	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9999602224453723	WITHOUT_CLASSIFICATION	3.977755462765903E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9998917061926763	WITHOUT_CLASSIFICATION	1.0829380732371843E-4	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999986042920574	WITHOUT_CLASSIFICATION	1.3957079424450254E-6	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.999995654505928	WITHOUT_CLASSIFICATION	4.345494072042879E-6	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999978114929134	WITHOUT_CLASSIFICATION	2.1885070865189957E-6	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.999964886684027	WITHOUT_CLASSIFICATION	3.511331597286731E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999997364624015	WITHOUT_CLASSIFICATION	2.6353759859181415E-7	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999119632337173	WITHOUT_CLASSIFICATION	8.803676628262341E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999794492198735	WITHOUT_CLASSIFICATION	2.0550780126561178E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999826294113325	WITHOUT_CLASSIFICATION	1.73705886674144E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999505511167889	WITHOUT_CLASSIFICATION	4.944888321107444E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999568924469706	WITHOUT_CLASSIFICATION	4.310755302945143E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999635413953154	WITHOUT_CLASSIFICATION	3.6458604684526316E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999994967080611	WITHOUT_CLASSIFICATION	5.032919389950504E-7	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9999540437880966	WITHOUT_CLASSIFICATION	4.5956211903432245E-5	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999999114946495	WITHOUT_CLASSIFICATION	8.850535044856026E-8	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.999999923401418	WITHOUT_CLASSIFICATION	7.659858207124934E-8	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999997323806242	WITHOUT_CLASSIFICATION	2.67619375781185E-7	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9999981922174018	WITHOUT_CLASSIFICATION	1.8077825981112566E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9990630520880536	WITHOUT_CLASSIFICATION	9.36947911946549E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.549499109231348	WITHOUT_CLASSIFICATION	0.45050089076865196	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999014678688004	WITHOUT_CLASSIFICATION	9.853213119961226E-5	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999977393249724	WITHOUT_CLASSIFICATION	2.2606750275982055E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999995310558728	WITHOUT_CLASSIFICATION	4.6894412714326065E-7	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999981383850514	WITHOUT_CLASSIFICATION	1.8616149486829446E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9999782216441682	WITHOUT_CLASSIFICATION	2.177835583188487E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999999956358456	WITHOUT_CLASSIFICATION	4.364154277117578E-9	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999994016214814	WITHOUT_CLASSIFICATION	5.983785186323761E-7	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999973020774002	WITHOUT_CLASSIFICATION	2.6979225997706958E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999992061005317	WITHOUT_CLASSIFICATION	7.938994684193279E-7	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999997006581381	WITHOUT_CLASSIFICATION	2.9934186187050874E-7	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999987028306286	WITHOUT_CLASSIFICATION	1.2971693713553593E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999998664989349	WITHOUT_CLASSIFICATION	1.335010650798193E-7	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999993698553501	WITHOUT_CLASSIFICATION	6.301446500205603E-7	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999989724573517	WITHOUT_CLASSIFICATION	1.0275426483327753E-6	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.999999748616211	WITHOUT_CLASSIFICATION	2.513837890561092E-7	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999989591877437	WITHOUT_CLASSIFICATION	1.040812256193857E-6	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999998044758989	WITHOUT_CLASSIFICATION	1.9552410101926793E-7	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999991422148214	WITHOUT_CLASSIFICATION	8.577851785328519E-7	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999997780011246	WITHOUT_CLASSIFICATION	2.2199887537715767E-7	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999969490808372	WITHOUT_CLASSIFICATION	3.0509191627429294E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999989591877437	WITHOUT_CLASSIFICATION	1.040812256193857E-6	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9631438054385101	DEFECT	0.03685619456148997	WITHOUT_CLASSIFICATION
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9631438054385101	DEFECT	0.03685619456148997	WITHOUT_CLASSIFICATION
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999999892514175	WITHOUT_CLASSIFICATION	1.0748582328751122E-8	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999989987123558	WITHOUT_CLASSIFICATION	1.0012876442352714E-6	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999997817238865	WITHOUT_CLASSIFICATION	2.1827611345569782E-7	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999999821746607	WITHOUT_CLASSIFICATION	1.7825339253717206E-8	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999990380787622	WITHOUT_CLASSIFICATION	9.619212377702692E-7	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999994146809867	WITHOUT_CLASSIFICATION	5.85319013336704E-7	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999930950255125	WITHOUT_CLASSIFICATION	6.904974487540936E-6	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.8390342867267182	WITHOUT_CLASSIFICATION	0.16096571327328174	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999993037225301	WITHOUT_CLASSIFICATION	6.962774698768434E-7	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9999724300892225	WITHOUT_CLASSIFICATION	2.756991077754236E-5	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999999824927471	WITHOUT_CLASSIFICATION	1.750725284555828E-8	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999995753603889	WITHOUT_CLASSIFICATION	4.246396111218287E-7	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999605963934096	WITHOUT_CLASSIFICATION	3.940360659037564E-5	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999998154240399	WITHOUT_CLASSIFICATION	1.845759601754353E-7	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999976743452356	WITHOUT_CLASSIFICATION	2.3256547644083904E-6	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999987748449088	WITHOUT_CLASSIFICATION	1.2251550910902234E-6	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999999189130687	WITHOUT_CLASSIFICATION	8.108693122779074E-8	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999843960978986	WITHOUT_CLASSIFICATION	1.5603902101378524E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999843960978986	WITHOUT_CLASSIFICATION	1.5603902101378524E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999843960978986	WITHOUT_CLASSIFICATION	1.5603902101378524E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999843960978986	WITHOUT_CLASSIFICATION	1.5603902101378524E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999843960978986	WITHOUT_CLASSIFICATION	1.5603902101378524E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999907367629204	WITHOUT_CLASSIFICATION	9.263237079636998E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999977795490519	WITHOUT_CLASSIFICATION	2.2204509481209776E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998781298472972	WITHOUT_CLASSIFICATION	1.2187015270281098E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999955529139173	WITHOUT_CLASSIFICATION	4.447086082637194E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9996175848716863	WITHOUT_CLASSIFICATION	3.8241512831366627E-4	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999999807871693	WITHOUT_CLASSIFICATION	1.921283066833441E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999996171089405	WITHOUT_CLASSIFICATION	3.828910595088784E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999993577416918	WITHOUT_CLASSIFICATION	6.422583082749507E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999983703191034	WITHOUT_CLASSIFICATION	1.629680896638012E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999946475364366	WITHOUT_CLASSIFICATION	5.35246356331886E-6	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999911989006582	WITHOUT_CLASSIFICATION	8.801099341781511E-6	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.999989348439243	WITHOUT_CLASSIFICATION	1.065156075699891E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.999996154275827	WITHOUT_CLASSIFICATION	3.8457241730189445E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999932589431284	WITHOUT_CLASSIFICATION	6.7410568716160535E-6	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999917479908287	WITHOUT_CLASSIFICATION	8.252009171365842E-6	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999906850420356	WITHOUT_CLASSIFICATION	9.314957964406435E-6	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999950023065108	WITHOUT_CLASSIFICATION	4.9976934891267365E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999939029312992	WITHOUT_CLASSIFICATION	6.097068700737767E-6	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.999992292058292	WITHOUT_CLASSIFICATION	7.707941708039418E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999927791933908	WITHOUT_CLASSIFICATION	7.220806609190896E-6	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999900772877247	WITHOUT_CLASSIFICATION	9.92271227538073E-6	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999906335952242	WITHOUT_CLASSIFICATION	9.366404775654965E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999840895225859	WITHOUT_CLASSIFICATION	1.591047741411481E-5	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999925329294702	WITHOUT_CLASSIFICATION	7.467070529724109E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999906627154683	WITHOUT_CLASSIFICATION	9.337284531696543E-6	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999900920775394	WITHOUT_CLASSIFICATION	9.907922460472493E-6	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999947730870825	WITHOUT_CLASSIFICATION	5.226912917540423E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999925946197947	WITHOUT_CLASSIFICATION	7.4053802052432115E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.999987213178999	WITHOUT_CLASSIFICATION	1.2786821000910144E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.999986577075874	WITHOUT_CLASSIFICATION	1.3422924126113494E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999850805934878	WITHOUT_CLASSIFICATION	1.4919406512203989E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.999992314388253	WITHOUT_CLASSIFICATION	7.685611746972106E-6	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999913534083353	WITHOUT_CLASSIFICATION	8.64659166460533E-6	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999899473072169	WITHOUT_CLASSIFICATION	1.005269278303461E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999800782045225	WITHOUT_CLASSIFICATION	1.9921795477591334E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999855127569013	WITHOUT_CLASSIFICATION	1.4487243098646377E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999905194688843	WITHOUT_CLASSIFICATION	9.480531115735204E-6	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999888907635144	WITHOUT_CLASSIFICATION	1.1109236485645343E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999903404744923	WITHOUT_CLASSIFICATION	9.659525507607517E-6	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999894814877611	WITHOUT_CLASSIFICATION	1.0518512238846774E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999932844704342	WITHOUT_CLASSIFICATION	6.715529565692489E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999909861211356	WITHOUT_CLASSIFICATION	9.013878864475195E-6	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999863839553781	WITHOUT_CLASSIFICATION	1.3616044621935514E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999918812672541	WITHOUT_CLASSIFICATION	8.118732745786206E-6	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999864978465435	WITHOUT_CLASSIFICATION	1.3502153456416316E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999759567781725	WITHOUT_CLASSIFICATION	2.4043221827511238E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999824133563933	WITHOUT_CLASSIFICATION	1.7586643606775494E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999933768887653	WITHOUT_CLASSIFICATION	6.623111234733691E-6	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999887477521519	WITHOUT_CLASSIFICATION	1.1252247848181047E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999779683260105	WITHOUT_CLASSIFICATION	2.2031673989469426E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998781298472972	WITHOUT_CLASSIFICATION	1.2187015270281098E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999861550521998	WITHOUT_CLASSIFICATION	1.3844947800168795E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999851862135146	WITHOUT_CLASSIFICATION	1.4813786485287375E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999846280639003	WITHOUT_CLASSIFICATION	1.5371936099717787E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999821303197977	WITHOUT_CLASSIFICATION	1.786968020237051E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999845300913703	WITHOUT_CLASSIFICATION	1.5469908629683315E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999863463981237	WITHOUT_CLASSIFICATION	1.3653601876399466E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999807128005657	WITHOUT_CLASSIFICATION	1.9287199434329E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999829673731334	WITHOUT_CLASSIFICATION	1.703262686660441E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999789368593404	WITHOUT_CLASSIFICATION	2.106314065966699E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999801906826804	WITHOUT_CLASSIFICATION	1.9809317319525155E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999864349448276	WITHOUT_CLASSIFICATION	1.3565055172320832E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.999987220200618	WITHOUT_CLASSIFICATION	1.2779799382024483E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999810596325253	WITHOUT_CLASSIFICATION	1.89403674747097E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999789344939717	WITHOUT_CLASSIFICATION	2.1065506028306062E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999841882060683	WITHOUT_CLASSIFICATION	1.5811793931751157E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999915408118903	WITHOUT_CLASSIFICATION	8.459188109719778E-6	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999873267976143	WITHOUT_CLASSIFICATION	1.2673202385827065E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999894181722943	WITHOUT_CLASSIFICATION	1.0581827705659843E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999855057844338	WITHOUT_CLASSIFICATION	1.4494215566325761E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999891085097798	WITHOUT_CLASSIFICATION	1.0891490220127774E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999849834426572	WITHOUT_CLASSIFICATION	1.5016557342900072E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999870357088106	WITHOUT_CLASSIFICATION	1.2964291189319513E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999824549043173	WITHOUT_CLASSIFICATION	1.7545095682836246E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999866248482963	WITHOUT_CLASSIFICATION	1.3375151703801083E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999870826579468	WITHOUT_CLASSIFICATION	1.2917342053328121E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999855772195811	WITHOUT_CLASSIFICATION	1.4422780418823627E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999750567947123	WITHOUT_CLASSIFICATION	2.494320528766352E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999864394746504	WITHOUT_CLASSIFICATION	1.3560525349694039E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999940826367624	WITHOUT_CLASSIFICATION	5.91736323760611E-6	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999935474232037	WITHOUT_CLASSIFICATION	6.452576796392078E-6	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999860620382259	WITHOUT_CLASSIFICATION	1.3937961773985732E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999845668564401	WITHOUT_CLASSIFICATION	1.5433143559885523E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999878372007945	WITHOUT_CLASSIFICATION	1.2162799205483668E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999888018153726	WITHOUT_CLASSIFICATION	1.1198184627449715E-5	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999878257868343	WITHOUT_CLASSIFICATION	1.2174213165661679E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999935902347314	WITHOUT_CLASSIFICATION	6.409765268630396E-6	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999904190445879	WITHOUT_CLASSIFICATION	9.580955412195255E-6	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999846319405953	WITHOUT_CLASSIFICATION	1.5368059404728328E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999853078997647	WITHOUT_CLASSIFICATION	1.4692100235204915E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999906063495172	WITHOUT_CLASSIFICATION	9.393650482821007E-6	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999905350767431	WITHOUT_CLASSIFICATION	9.464923256901453E-6	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.999989821893293	WITHOUT_CLASSIFICATION	1.0178106706931641E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999865479696088	WITHOUT_CLASSIFICATION	1.3452030391048005E-5	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999856281142263	WITHOUT_CLASSIFICATION	1.4371885773722211E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999902946423266	WITHOUT_CLASSIFICATION	9.70535767340832E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999941809540698	WITHOUT_CLASSIFICATION	5.819045930161662E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999936029394265	WITHOUT_CLASSIFICATION	6.397060573435411E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.999989822244297	WITHOUT_CLASSIFICATION	1.017775570293994E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999911056648325	WITHOUT_CLASSIFICATION	8.894335167407146E-6	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999879995796525	WITHOUT_CLASSIFICATION	1.2000420347485318E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999900712287686	WITHOUT_CLASSIFICATION	9.928771231300989E-6	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999891873213469	WITHOUT_CLASSIFICATION	1.0812678653200327E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999920474477724	WITHOUT_CLASSIFICATION	7.952552227581005E-6	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999958891534845	WITHOUT_CLASSIFICATION	4.110846515520146E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999938447132141	WITHOUT_CLASSIFICATION	6.155286785969938E-6	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999906071887343	WITHOUT_CLASSIFICATION	9.392811265571095E-6	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999944698703278	WITHOUT_CLASSIFICATION	5.53012967218665E-6	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999939495636173	WITHOUT_CLASSIFICATION	6.050436382718004E-6	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999920916068259	WITHOUT_CLASSIFICATION	7.908393174115111E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999925485971795	WITHOUT_CLASSIFICATION	7.45140282054485E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999887274842384	WITHOUT_CLASSIFICATION	1.1272515761472234E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999933447665967	WITHOUT_CLASSIFICATION	6.6552334032532124E-6	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999845491719633	WITHOUT_CLASSIFICATION	1.5450828036725906E-5	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999908652271802	WITHOUT_CLASSIFICATION	9.134772819819635E-6	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999936803263078	WITHOUT_CLASSIFICATION	6.319673692271925E-6	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999927145189784	WITHOUT_CLASSIFICATION	7.285481021540677E-6	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999953947696911	WITHOUT_CLASSIFICATION	4.605230308896625E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999919595748307	WITHOUT_CLASSIFICATION	8.040425169368156E-6	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999918707865459	WITHOUT_CLASSIFICATION	8.129213454052144E-6	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999938040054545	WITHOUT_CLASSIFICATION	6.195994545587775E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999896262859472	WITHOUT_CLASSIFICATION	1.037371405276723E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999912966783002	WITHOUT_CLASSIFICATION	8.703321699760775E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.999992608942475	WITHOUT_CLASSIFICATION	7.391057525023444E-6	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999819996562712	WITHOUT_CLASSIFICATION	1.8000343728727434E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999884532377049	WITHOUT_CLASSIFICATION	1.1546762295035003E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999878216499914	WITHOUT_CLASSIFICATION	1.2178350008460582E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999857510982291	WITHOUT_CLASSIFICATION	1.4248901771007616E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999871759191559	WITHOUT_CLASSIFICATION	1.2824080844107331E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999842826646904	WITHOUT_CLASSIFICATION	1.5717335309555345E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999828780495879	WITHOUT_CLASSIFICATION	1.7121950412062297E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999855980641258	WITHOUT_CLASSIFICATION	1.4401935874263479E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999881177621651	WITHOUT_CLASSIFICATION	1.1882237834891463E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999890492564985	WITHOUT_CLASSIFICATION	1.095074350144868E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999897596752018	WITHOUT_CLASSIFICATION	1.0240324798267348E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999814414930797	WITHOUT_CLASSIFICATION	1.8558506920390956E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999869215815325	WITHOUT_CLASSIFICATION	1.3078418467566572E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999867304445442	WITHOUT_CLASSIFICATION	1.3269555455840905E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999873692346158	WITHOUT_CLASSIFICATION	1.2630765384009165E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999777979005852	WITHOUT_CLASSIFICATION	2.2202099414769313E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999895747813398	WITHOUT_CLASSIFICATION	1.0425218660237577E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.999991508558461	WITHOUT_CLASSIFICATION	8.491441539103239E-6	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999906350261772	WITHOUT_CLASSIFICATION	9.364973822657931E-6	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999897892083093	WITHOUT_CLASSIFICATION	1.0210791690781404E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.999987587587254	WITHOUT_CLASSIFICATION	1.2412412746001284E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999937226305441	WITHOUT_CLASSIFICATION	6.277369455927943E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999896652744065	WITHOUT_CLASSIFICATION	1.0334725593480065E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999910695600308	WITHOUT_CLASSIFICATION	8.93043996914711E-6	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999936434101634	WITHOUT_CLASSIFICATION	6.356589836622225E-6	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999915453553266	WITHOUT_CLASSIFICATION	8.45464467334281E-6	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999872571606987	WITHOUT_CLASSIFICATION	1.274283930131154E-5	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999895830756576	WITHOUT_CLASSIFICATION	1.041692434247964E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999875426677619	WITHOUT_CLASSIFICATION	1.245733223813189E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999928855829525	WITHOUT_CLASSIFICATION	7.114417047418439E-6	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999926379505019	WITHOUT_CLASSIFICATION	7.362049498201417E-6	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999913643983429	WITHOUT_CLASSIFICATION	8.635601657150167E-6	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999955746631619	WITHOUT_CLASSIFICATION	4.425336838029793E-6	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999934357977205	WITHOUT_CLASSIFICATION	6.564202279471236E-6	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999927504262417	WITHOUT_CLASSIFICATION	7.249573758376371E-6	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999929323434175	WITHOUT_CLASSIFICATION	7.067656582447071E-6	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.999990179317353	WITHOUT_CLASSIFICATION	9.820682647027716E-6	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999931505564157	WITHOUT_CLASSIFICATION	6.849443584315815E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999896070648834	WITHOUT_CLASSIFICATION	1.039293511653698E-5	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999957305013358	WITHOUT_CLASSIFICATION	4.2694986641788135E-6	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999937805307904	WITHOUT_CLASSIFICATION	6.219469209575932E-6	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999960320776446	WITHOUT_CLASSIFICATION	3.967922355281285E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999962527526064	WITHOUT_CLASSIFICATION	3.7472473936993017E-6	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999953281498042	WITHOUT_CLASSIFICATION	4.671850195829888E-6	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.999992937517538	WITHOUT_CLASSIFICATION	7.0624824619999685E-6	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999947190027396	WITHOUT_CLASSIFICATION	5.28099726041231E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999957697490958	WITHOUT_CLASSIFICATION	4.230250904267781E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999953714323367	WITHOUT_CLASSIFICATION	4.6285676632945245E-6	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999921491224267	WITHOUT_CLASSIFICATION	7.850877573311626E-6	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999945959631573	WITHOUT_CLASSIFICATION	5.404036842564681E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999939645217591	WITHOUT_CLASSIFICATION	6.0354782408211035E-6	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999942040710891	WITHOUT_CLASSIFICATION	5.79592891085058E-6	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999921398088323	WITHOUT_CLASSIFICATION	7.86019116772213E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999932660924065	WITHOUT_CLASSIFICATION	6.733907593510929E-6	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999935790816263	WITHOUT_CLASSIFICATION	6.4209183736140695E-6	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999835948434709	WITHOUT_CLASSIFICATION	1.6405156529141045E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999936988346294	WITHOUT_CLASSIFICATION	6.301165370550316E-6	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.999995865074928	WITHOUT_CLASSIFICATION	4.1349250720181344E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999957372399114	WITHOUT_CLASSIFICATION	4.262760088573032E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999914903756139	WITHOUT_CLASSIFICATION	8.509624386196E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999843303449533	WITHOUT_CLASSIFICATION	1.5669655046739868E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999881131424705	WITHOUT_CLASSIFICATION	1.188685752943262E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999938235878025	WITHOUT_CLASSIFICATION	6.176412197571448E-6	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999896120174998	WITHOUT_CLASSIFICATION	1.0387982500238548E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999901552801873	WITHOUT_CLASSIFICATION	9.84471981262726E-6	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999892469050803	WITHOUT_CLASSIFICATION	1.0753094919703472E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999888137247852	WITHOUT_CLASSIFICATION	1.1186275214797886E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999889596265558	WITHOUT_CLASSIFICATION	1.1040373444160433E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999868861173695	WITHOUT_CLASSIFICATION	1.3113882630492121E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999860351204491	WITHOUT_CLASSIFICATION	1.3964879550905416E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999849828696793	WITHOUT_CLASSIFICATION	1.5017130320636837E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999912650329679	WITHOUT_CLASSIFICATION	8.7349670322074E-6	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999907413953308	WITHOUT_CLASSIFICATION	9.258604669157806E-6	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999901301947086	WITHOUT_CLASSIFICATION	9.869805291341799E-6	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999877748015848	WITHOUT_CLASSIFICATION	1.2225198415158056E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999896180796435	WITHOUT_CLASSIFICATION	1.0381920356406202E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999883106186779	WITHOUT_CLASSIFICATION	1.1689381322110697E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999891593636192	WITHOUT_CLASSIFICATION	1.0840636380923093E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999938021926719	WITHOUT_CLASSIFICATION	6.197807328076934E-6	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999896365124387	WITHOUT_CLASSIFICATION	1.0363487561427731E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999895878522803	WITHOUT_CLASSIFICATION	1.0412147719694991E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999919704476614	WITHOUT_CLASSIFICATION	8.029552338547125E-6	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999902284925841	WITHOUT_CLASSIFICATION	9.771507415965143E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999929324086181	WITHOUT_CLASSIFICATION	7.067591381894024E-6	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999834228040545	WITHOUT_CLASSIFICATION	1.6577195945521365E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999904237246263	WITHOUT_CLASSIFICATION	9.576275373644393E-6	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999915800590053	WITHOUT_CLASSIFICATION	8.419940994708208E-6	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999948786105676	WITHOUT_CLASSIFICATION	5.121389432505724E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999936599199315	WITHOUT_CLASSIFICATION	6.34008006857718E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999883383334898	WITHOUT_CLASSIFICATION	1.1661666510247486E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999870131071193	WITHOUT_CLASSIFICATION	1.2986892880566154E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.999991992468397	WITHOUT_CLASSIFICATION	8.007531602997887E-6	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.999992042020301	WITHOUT_CLASSIFICATION	7.95797969895152E-6	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999908907115391	WITHOUT_CLASSIFICATION	9.109288460973548E-6	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999905445728218	WITHOUT_CLASSIFICATION	9.455427178192605E-6	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999868028223714	WITHOUT_CLASSIFICATION	1.3197177628668724E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999833460631495	WITHOUT_CLASSIFICATION	1.665393685050148E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999827836091375	WITHOUT_CLASSIFICATION	1.721639086251059E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999825576356085	WITHOUT_CLASSIFICATION	1.744236439143411E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999900065098658	WITHOUT_CLASSIFICATION	9.993490134165068E-6	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999913263947953	WITHOUT_CLASSIFICATION	8.673605204747665E-6	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999919451673931	WITHOUT_CLASSIFICATION	8.0548326068752E-6	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999875242565388	WITHOUT_CLASSIFICATION	1.2475743461300693E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999928767432519	WITHOUT_CLASSIFICATION	7.123256748120545E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999876887189909	WITHOUT_CLASSIFICATION	1.2311281009099765E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999801482604788	WITHOUT_CLASSIFICATION	1.985173952125162E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999937817956762	WITHOUT_CLASSIFICATION	6.218204323825099E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999906542193673	WITHOUT_CLASSIFICATION	9.345780632708195E-6	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999895068509955	WITHOUT_CLASSIFICATION	1.0493149004372972E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999906041450058	WITHOUT_CLASSIFICATION	9.395854994225874E-6	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999904668715341	WITHOUT_CLASSIFICATION	9.53312846586463E-6	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999903838356881	WITHOUT_CLASSIFICATION	9.616164311926642E-6	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999876543778349	WITHOUT_CLASSIFICATION	1.2345622165153813E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999863457047234	WITHOUT_CLASSIFICATION	1.3654295276564044E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999874719946201	WITHOUT_CLASSIFICATION	1.2528005379788008E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999903329625722	WITHOUT_CLASSIFICATION	9.667037427907808E-6	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999865436453665	WITHOUT_CLASSIFICATION	1.3456354633540192E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.999988488776577	WITHOUT_CLASSIFICATION	1.1511223423066054E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999898124949586	WITHOUT_CLASSIFICATION	1.0187505041528324E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.99998853959688	WITHOUT_CLASSIFICATION	1.1460403119889409E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999895738123118	WITHOUT_CLASSIFICATION	1.0426187688071334E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999885074538422	WITHOUT_CLASSIFICATION	1.1492546157907622E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999850842024701	WITHOUT_CLASSIFICATION	1.4915797530019498E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999882451353461	WITHOUT_CLASSIFICATION	1.175486465380379E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999884505214534	WITHOUT_CLASSIFICATION	1.1549478546699103E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999890047639451	WITHOUT_CLASSIFICATION	1.0995236054832755E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.999987682636405	WITHOUT_CLASSIFICATION	1.2317363594988811E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999929497718238	WITHOUT_CLASSIFICATION	7.050228176262908E-6	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999919873734542	WITHOUT_CLASSIFICATION	8.012626545887498E-6	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999914281285295	WITHOUT_CLASSIFICATION	8.571871470553798E-6	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999896267421968	WITHOUT_CLASSIFICATION	1.0373257803079568E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999887706232924	WITHOUT_CLASSIFICATION	1.122937670761647E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999888860084238	WITHOUT_CLASSIFICATION	1.1113991576085342E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999924627177164	WITHOUT_CLASSIFICATION	7.537282283662991E-6	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999839160423711	WITHOUT_CLASSIFICATION	1.6083957628850392E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999919320557166	WITHOUT_CLASSIFICATION	8.06794428345905E-6	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999922434025745	WITHOUT_CLASSIFICATION	7.75659742549059E-6	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999887407066725	WITHOUT_CLASSIFICATION	1.125929332757257E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999664200908435	WITHOUT_CLASSIFICATION	3.3579909156509745E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.999974661634656	WITHOUT_CLASSIFICATION	2.53383653440099E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999438211327604	WITHOUT_CLASSIFICATION	5.617886723966164E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999874382925866	WITHOUT_CLASSIFICATION	1.2561707413467049E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999778809892774	WITHOUT_CLASSIFICATION	2.2119010722590123E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.999977625038185	WITHOUT_CLASSIFICATION	2.2374961814972572E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999837654704153	WITHOUT_CLASSIFICATION	1.6234529584639092E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999687050538403	WITHOUT_CLASSIFICATION	3.1294946159760466E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999821866905945	WITHOUT_CLASSIFICATION	1.7813309405569976E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999764586712641	WITHOUT_CLASSIFICATION	2.3541328735934538E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999748479553241	WITHOUT_CLASSIFICATION	2.5152044675864366E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999876037136965	WITHOUT_CLASSIFICATION	1.2396286303462303E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999915726400481	WITHOUT_CLASSIFICATION	8.427359951909619E-6	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999934627689862	WITHOUT_CLASSIFICATION	6.537231013959217E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.999994918648228	WITHOUT_CLASSIFICATION	5.0813517720332775E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999922342609767	WITHOUT_CLASSIFICATION	7.765739023209283E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999981177324926	WITHOUT_CLASSIFICATION	1.8822675073806227E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9995920443314797	WITHOUT_CLASSIFICATION	4.0795566852021135E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9999571684488854	WITHOUT_CLASSIFICATION	4.283155111451175E-5	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.999969485671122	WITHOUT_CLASSIFICATION	3.0514328878072124E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9998032140443943	WITHOUT_CLASSIFICATION	1.967859556057482E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9997775220461738	WITHOUT_CLASSIFICATION	2.2247795382621309E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999324993265389	WITHOUT_CLASSIFICATION	6.750067346098666E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9998931716727288	WITHOUT_CLASSIFICATION	1.0682832727119413E-4	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9999995120891609	WITHOUT_CLASSIFICATION	4.879108390155902E-7	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999503125232674	WITHOUT_CLASSIFICATION	4.968747673268314E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.999964143373216	WITHOUT_CLASSIFICATION	3.585662678392631E-5	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999824595467265	WITHOUT_CLASSIFICATION	1.7540453273400528E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999965862485086	WITHOUT_CLASSIFICATION	3.413751491218263E-6	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9988864391887571	WITHOUT_CLASSIFICATION	0.0011135608112429868	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999970901508295	WITHOUT_CLASSIFICATION	2.9098491704939015E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9991756866547105	WITHOUT_CLASSIFICATION	8.243133452895485E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9998680694053447	WITHOUT_CLASSIFICATION	1.3193059465530508E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9995903120109164	WITHOUT_CLASSIFICATION	4.096879890836295E-4	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999990676709598	WITHOUT_CLASSIFICATION	9.323290402088745E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999946922108	WITHOUT_CLASSIFICATION	5.307789198150464E-9	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998659458063733	WITHOUT_CLASSIFICATION	1.3405419362667802E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999975514711877	WITHOUT_CLASSIFICATION	2.448528812238044E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999998413925054	WITHOUT_CLASSIFICATION	1.5860749460420467E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999919962226	WITHOUT_CLASSIFICATION	8.003777475935473E-9	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999919962226	WITHOUT_CLASSIFICATION	8.003777475935473E-9	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9999974970646862	WITHOUT_CLASSIFICATION	2.502935313768944E-6	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9999917626406932	WITHOUT_CLASSIFICATION	8.237359306674235E-6	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9999013467025025	WITHOUT_CLASSIFICATION	9.86532974973917E-5	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.999983891727326	WITHOUT_CLASSIFICATION	1.6108272673926636E-5	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9999606445325364	WITHOUT_CLASSIFICATION	3.935546746350243E-5	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999977306545054	WITHOUT_CLASSIFICATION	2.2693454945874352E-6	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9998932032516773	WITHOUT_CLASSIFICATION	1.0679674832270129E-4	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999658756229264	WITHOUT_CLASSIFICATION	3.4124377073525765E-5	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9960653344211127	WITHOUT_CLASSIFICATION	0.0039346655788872545	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999997620089435	WITHOUT_CLASSIFICATION	2.3799105645513618E-7	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999995196372623	WITHOUT_CLASSIFICATION	4.803627377425201E-7	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9995241645387268	WITHOUT_CLASSIFICATION	4.7583546127308876E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9988247336850191	WITHOUT_CLASSIFICATION	0.0011752663149809106	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999981070406553	WITHOUT_CLASSIFICATION	1.892959344771322E-6	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999997255419063	WITHOUT_CLASSIFICATION	2.744580937383471E-7	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.999997065721652	WITHOUT_CLASSIFICATION	2.9342783480410208E-6	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999999532071602	WITHOUT_CLASSIFICATION	4.67928398404255E-8	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9998122827014071	WITHOUT_CLASSIFICATION	1.877172985928809E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9998848161953229	WITHOUT_CLASSIFICATION	1.1518380467710617E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999507401599625	WITHOUT_CLASSIFICATION	4.9259840037526536E-5	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999999939955188	WITHOUT_CLASSIFICATION	6.004481255395787E-9	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999983818611823	WITHOUT_CLASSIFICATION	1.6181388176874698E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9569030580436902	DEFECT	0.04309694195630962	WITHOUT_CLASSIFICATION
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999998339792289	WITHOUT_CLASSIFICATION	1.660207710961254E-7	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9569030580436902	DEFECT	0.04309694195630962	WITHOUT_CLASSIFICATION
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9999970459471813	WITHOUT_CLASSIFICATION	2.95405281883404E-6	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999992547255251	WITHOUT_CLASSIFICATION	7.452744749481321E-7	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.9857212675732653	DEFECT	0.014278732426734747	WITHOUT_CLASSIFICATION
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999882796339286	WITHOUT_CLASSIFICATION	1.1720366071512965E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9997593082572516	WITHOUT_CLASSIFICATION	2.4069174274837877E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999949888764901	WITHOUT_CLASSIFICATION	5.011123509938217E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999949888764901	WITHOUT_CLASSIFICATION	5.011123509938217E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999949888764901	WITHOUT_CLASSIFICATION	5.011123509938217E-6	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.999999064517555	WITHOUT_CLASSIFICATION	9.354824448641005E-7	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999941372625145	WITHOUT_CLASSIFICATION	5.862737485531981E-6	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999999775647539	WITHOUT_CLASSIFICATION	2.2435246087923474E-8	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999698808392642	WITHOUT_CLASSIFICATION	3.0119160735878086E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999698808392642	WITHOUT_CLASSIFICATION	3.0119160735878086E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999698808392642	WITHOUT_CLASSIFICATION	3.0119160735878086E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999698808392642	WITHOUT_CLASSIFICATION	3.0119160735878086E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999698808392642	WITHOUT_CLASSIFICATION	3.0119160735878086E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999698808392642	WITHOUT_CLASSIFICATION	3.0119160735878086E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998588287680138	WITHOUT_CLASSIFICATION	1.411712319861801E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998588287680138	WITHOUT_CLASSIFICATION	1.411712319861801E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998588287680138	WITHOUT_CLASSIFICATION	1.411712319861801E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998588287680138	WITHOUT_CLASSIFICATION	1.411712319861801E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998588287680138	WITHOUT_CLASSIFICATION	1.411712319861801E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999844132794771	WITHOUT_CLASSIFICATION	1.5586720522899157E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999844132794771	WITHOUT_CLASSIFICATION	1.5586720522899157E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999844132794771	WITHOUT_CLASSIFICATION	1.5586720522899157E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999844132794771	WITHOUT_CLASSIFICATION	1.5586720522899157E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999844132794771	WITHOUT_CLASSIFICATION	1.5586720522899157E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999346088081127	WITHOUT_CLASSIFICATION	6.539119188731645E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999346088081127	WITHOUT_CLASSIFICATION	6.539119188731645E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999346088081127	WITHOUT_CLASSIFICATION	6.539119188731645E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999346088081127	WITHOUT_CLASSIFICATION	6.539119188731645E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999346088081127	WITHOUT_CLASSIFICATION	6.539119188731645E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999346088081127	WITHOUT_CLASSIFICATION	6.539119188731645E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998225459403438	WITHOUT_CLASSIFICATION	1.7745405965623946E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998225459403438	WITHOUT_CLASSIFICATION	1.7745405965623946E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998225459403438	WITHOUT_CLASSIFICATION	1.7745405965623946E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998225459403438	WITHOUT_CLASSIFICATION	1.7745405965623946E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998225459403438	WITHOUT_CLASSIFICATION	1.7745405965623946E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997277030014644	WITHOUT_CLASSIFICATION	2.722969985355705E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997277030014644	WITHOUT_CLASSIFICATION	2.722969985355705E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997277030014644	WITHOUT_CLASSIFICATION	2.722969985355705E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997277030014644	WITHOUT_CLASSIFICATION	2.722969985355705E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997277030014644	WITHOUT_CLASSIFICATION	2.722969985355705E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998781298472972	WITHOUT_CLASSIFICATION	1.2187015270281098E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998781298472972	WITHOUT_CLASSIFICATION	1.2187015270281098E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998781298472972	WITHOUT_CLASSIFICATION	1.2187015270281098E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998781298472972	WITHOUT_CLASSIFICATION	1.2187015270281098E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998781298472972	WITHOUT_CLASSIFICATION	1.2187015270281098E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999955529139173	WITHOUT_CLASSIFICATION	4.447086082637194E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999999807871693	WITHOUT_CLASSIFICATION	1.921283066833441E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999996171089405	WITHOUT_CLASSIFICATION	3.828910595088784E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999993577416918	WITHOUT_CLASSIFICATION	6.422583082749507E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999983703191034	WITHOUT_CLASSIFICATION	1.629680896638012E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999934942316859	WITHOUT_CLASSIFICATION	6.505768314147302E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999927791933908	WITHOUT_CLASSIFICATION	7.220806609190896E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999906627154683	WITHOUT_CLASSIFICATION	9.337284531696543E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.999987213178999	WITHOUT_CLASSIFICATION	1.2786821000910144E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.999986577075874	WITHOUT_CLASSIFICATION	1.3422924126113494E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999878760325427	WITHOUT_CLASSIFICATION	1.21239674572269E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999850805934878	WITHOUT_CLASSIFICATION	1.4919406512203989E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999929108108027	WITHOUT_CLASSIFICATION	7.089189197347175E-6	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999924766016864	WITHOUT_CLASSIFICATION	7.5233983135834684E-6	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999902223554942	WITHOUT_CLASSIFICATION	9.777644505797157E-6	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999900584186089	WITHOUT_CLASSIFICATION	9.941581391174638E-6	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999909121804732	WITHOUT_CLASSIFICATION	9.08781952680488E-6	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.999995090440794	WITHOUT_CLASSIFICATION	4.909559206028221E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999938263801076	WITHOUT_CLASSIFICATION	6.173619892363772E-6	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999921646699131	WITHOUT_CLASSIFICATION	7.835330086894188E-6	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999873007638985	WITHOUT_CLASSIFICATION	1.2699236101561751E-5	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999873277155443	WITHOUT_CLASSIFICATION	1.2672284455737824E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999926767266614	WITHOUT_CLASSIFICATION	7.323273338633019E-6	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999884293966996	WITHOUT_CLASSIFICATION	1.157060330049299E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.999991917557835	WITHOUT_CLASSIFICATION	8.082442164999456E-6	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999914556113977	WITHOUT_CLASSIFICATION	8.54438860220174E-6	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999943930861308	WITHOUT_CLASSIFICATION	5.606913869215401E-6	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999879689100426	WITHOUT_CLASSIFICATION	1.2031089957514403E-5	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999899390453504	WITHOUT_CLASSIFICATION	1.00609546495226E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999882420762034	WITHOUT_CLASSIFICATION	1.1757923796537958E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999875962253946	WITHOUT_CLASSIFICATION	1.2403774605401285E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999895518323579	WITHOUT_CLASSIFICATION	1.0448167642025803E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999871952322954	WITHOUT_CLASSIFICATION	1.2804767704542996E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999927030193063	WITHOUT_CLASSIFICATION	7.296980693703167E-6	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999890746861376	WITHOUT_CLASSIFICATION	1.0925313862322797E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999856172034187	WITHOUT_CLASSIFICATION	1.4382796581208094E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999897662424204	WITHOUT_CLASSIFICATION	1.0233757579606566E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999875364338652	WITHOUT_CLASSIFICATION	1.2463566134820554E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999921848111604	WITHOUT_CLASSIFICATION	7.815188839523485E-6	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999945713600018	WITHOUT_CLASSIFICATION	5.428639998151742E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999931824026814	WITHOUT_CLASSIFICATION	6.817597318553315E-6	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999913217400076	WITHOUT_CLASSIFICATION	8.678259992400204E-6	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999886211059189	WITHOUT_CLASSIFICATION	1.1378894081112187E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999715438811032	WITHOUT_CLASSIFICATION	2.845611889681032E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999758145561624	WITHOUT_CLASSIFICATION	2.4185443837715796E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999736561002	WITHOUT_CLASSIFICATION	2.6343899800063003E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999861769631702	WITHOUT_CLASSIFICATION	1.3823036829701977E-5	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999873900933437	WITHOUT_CLASSIFICATION	1.2609906656316212E-5	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999772285259944	WITHOUT_CLASSIFICATION	2.2771474005740494E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999851862135146	WITHOUT_CLASSIFICATION	1.4813786485287375E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999846280639003	WITHOUT_CLASSIFICATION	1.5371936099717787E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999821303197977	WITHOUT_CLASSIFICATION	1.786968020237051E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999829673731334	WITHOUT_CLASSIFICATION	1.703262686660441E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999915408118903	WITHOUT_CLASSIFICATION	8.459188109719778E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999750567947123	WITHOUT_CLASSIFICATION	2.494320528766352E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999890250830075	WITHOUT_CLASSIFICATION	1.0974916992553439E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999864394746504	WITHOUT_CLASSIFICATION	1.3560525349694039E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999865479696088	WITHOUT_CLASSIFICATION	1.3452030391048005E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999902946423266	WITHOUT_CLASSIFICATION	9.70535767340832E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.999989770046394	WITHOUT_CLASSIFICATION	1.0229953606043983E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999941809540698	WITHOUT_CLASSIFICATION	5.819045930161662E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999936029394265	WITHOUT_CLASSIFICATION	6.397060573435411E-6	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999859056846744	WITHOUT_CLASSIFICATION	1.4094315325589452E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999834926870277	WITHOUT_CLASSIFICATION	1.6507312972231816E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999798196177749	WITHOUT_CLASSIFICATION	2.0180382225079133E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999891284930063	WITHOUT_CLASSIFICATION	1.0871506993790386E-5	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999858389594135	WITHOUT_CLASSIFICATION	1.4161040586474049E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999896959808046	WITHOUT_CLASSIFICATION	1.0304019195525494E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.99998305707154	WITHOUT_CLASSIFICATION	1.6942928460090506E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999818112883436	WITHOUT_CLASSIFICATION	1.8188711656383304E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999854895307221	WITHOUT_CLASSIFICATION	1.4510469277921394E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999867767586429	WITHOUT_CLASSIFICATION	1.3223241356990673E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.999977699850551	WITHOUT_CLASSIFICATION	2.230014944906242E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999851287525656	WITHOUT_CLASSIFICATION	1.4871247434281898E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999864726750931	WITHOUT_CLASSIFICATION	1.3527324906896444E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999789851004516	WITHOUT_CLASSIFICATION	2.1014899548425104E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999800397838028	WITHOUT_CLASSIFICATION	1.9960216197190103E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999888523718424	WITHOUT_CLASSIFICATION	1.1147628157517404E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999878038058306	WITHOUT_CLASSIFICATION	1.2196194169413558E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999849798228491	WITHOUT_CLASSIFICATION	1.5020177151014388E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999873287259995	WITHOUT_CLASSIFICATION	1.2671274000368328E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999781401604262	WITHOUT_CLASSIFICATION	2.1859839573870646E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999900965498735	WITHOUT_CLASSIFICATION	9.90345012655745E-6	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999888594757169	WITHOUT_CLASSIFICATION	1.114052428307951E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.999988511605969	WITHOUT_CLASSIFICATION	1.1488394031040083E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999827775590874	WITHOUT_CLASSIFICATION	1.7222440912655594E-5	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999896846041719	WITHOUT_CLASSIFICATION	1.031539582797965E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999845159643037	WITHOUT_CLASSIFICATION	1.5484035696253316E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999876799971554	WITHOUT_CLASSIFICATION	1.232000284449796E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999889663247619	WITHOUT_CLASSIFICATION	1.1033675238048172E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999898949500643	WITHOUT_CLASSIFICATION	1.0105049935693974E-5	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999929036640267	WITHOUT_CLASSIFICATION	7.096335973313419E-6	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.999985489968376	WITHOUT_CLASSIFICATION	1.4510031624087226E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999918157278238	WITHOUT_CLASSIFICATION	8.18427217614988E-6	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999946001387604	WITHOUT_CLASSIFICATION	5.399861239533898E-6	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999910601386229	WITHOUT_CLASSIFICATION	8.939861377057407E-6	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999966069988847	WITHOUT_CLASSIFICATION	3.393001115380608E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999927186007158	WITHOUT_CLASSIFICATION	7.281399284246951E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999887274842384	WITHOUT_CLASSIFICATION	1.1272515761472234E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999885981980186	WITHOUT_CLASSIFICATION	1.1401801981429677E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999933447665967	WITHOUT_CLASSIFICATION	6.6552334032532124E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999896262859472	WITHOUT_CLASSIFICATION	1.037371405276723E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.999992608942475	WITHOUT_CLASSIFICATION	7.391057525023444E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999828780495879	WITHOUT_CLASSIFICATION	1.7121950412062297E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999890492564985	WITHOUT_CLASSIFICATION	1.095074350144868E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999869215815325	WITHOUT_CLASSIFICATION	1.3078418467566572E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.999991508558461	WITHOUT_CLASSIFICATION	8.491441539103239E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999896652744065	WITHOUT_CLASSIFICATION	1.0334725593480065E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999927038116253	WITHOUT_CLASSIFICATION	7.296188374676156E-6	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999898022740533	WITHOUT_CLASSIFICATION	1.0197725946690569E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999888948572918	WITHOUT_CLASSIFICATION	1.1105142708140667E-5	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999912534068424	WITHOUT_CLASSIFICATION	8.746593157647273E-6	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999905603647392	WITHOUT_CLASSIFICATION	9.439635260798325E-6	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999935018950635	WITHOUT_CLASSIFICATION	6.49810493648537E-6	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.999988772798178	WITHOUT_CLASSIFICATION	1.1227201822037004E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999914651541068	WITHOUT_CLASSIFICATION	8.534845893239853E-6	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999914003973149	WITHOUT_CLASSIFICATION	8.599602685144584E-6	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.999992406869389	WITHOUT_CLASSIFICATION	7.59313061096019E-6	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.999990758912908	WITHOUT_CLASSIFICATION	9.241087091954862E-6	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.999985724798792	WITHOUT_CLASSIFICATION	1.4275201207952693E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999935456966552	WITHOUT_CLASSIFICATION	6.454303344782596E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999938021005434	WITHOUT_CLASSIFICATION	6.197899456471237E-6	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999930539059508	WITHOUT_CLASSIFICATION	6.946094049149644E-6	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999820399563206	WITHOUT_CLASSIFICATION	1.796004367932328E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999870990401347	WITHOUT_CLASSIFICATION	1.2900959865395973E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999887967364762	WITHOUT_CLASSIFICATION	1.1203263523714913E-5	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999909549482552	WITHOUT_CLASSIFICATION	9.04505174481256E-6	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999886788185272	WITHOUT_CLASSIFICATION	1.1321181472893842E-5	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999890685976888	WITHOUT_CLASSIFICATION	1.0931402311133068E-5	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999913378326885	WITHOUT_CLASSIFICATION	8.662167311427158E-6	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999878311440411	WITHOUT_CLASSIFICATION	1.216885595889336E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999908466838128	WITHOUT_CLASSIFICATION	9.153316187103715E-6	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999863462449348	WITHOUT_CLASSIFICATION	1.3653755065330816E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999808517729737	WITHOUT_CLASSIFICATION	1.914822702630156E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999890359004067	WITHOUT_CLASSIFICATION	1.0964099593230746E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999888609935178	WITHOUT_CLASSIFICATION	1.1139006482226913E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999909295008917	WITHOUT_CLASSIFICATION	9.07049910831533E-6	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999943288795543	WITHOUT_CLASSIFICATION	5.671120445687302E-6	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999912821473249	WITHOUT_CLASSIFICATION	8.717852675101775E-6	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999861421942869	WITHOUT_CLASSIFICATION	1.385780571319962E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999930070407234	WITHOUT_CLASSIFICATION	6.9929592766279435E-6	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999915687908391	WITHOUT_CLASSIFICATION	8.431209161058002E-6	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999899072119807	WITHOUT_CLASSIFICATION	1.0092788019313642E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999891286131048	WITHOUT_CLASSIFICATION	1.0871386895052718E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999937031470886	WITHOUT_CLASSIFICATION	6.2968529113834E-6	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999906491592455	WITHOUT_CLASSIFICATION	9.350840754399269E-6	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999877194497226	WITHOUT_CLASSIFICATION	1.2280550277259548E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999932812446491	WITHOUT_CLASSIFICATION	6.718755350956128E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999962527526064	WITHOUT_CLASSIFICATION	3.7472473936993017E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999944986344073	WITHOUT_CLASSIFICATION	5.501365592669363E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999957697490958	WITHOUT_CLASSIFICATION	4.230250904267781E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999939645217591	WITHOUT_CLASSIFICATION	6.0354782408211035E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999932660924065	WITHOUT_CLASSIFICATION	6.733907593510929E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999843303449533	WITHOUT_CLASSIFICATION	1.5669655046739868E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999881131424705	WITHOUT_CLASSIFICATION	1.188685752943262E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999889596265558	WITHOUT_CLASSIFICATION	1.1040373444160433E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999868861173695	WITHOUT_CLASSIFICATION	1.3113882630492121E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999878780506705	WITHOUT_CLASSIFICATION	1.2121949329415576E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999948495504382	WITHOUT_CLASSIFICATION	5.150449561870144E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999929749584135	WITHOUT_CLASSIFICATION	7.02504158657084E-6	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999932540353169	WITHOUT_CLASSIFICATION	6.745964683159672E-6	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999937701743634	WITHOUT_CLASSIFICATION	6.2298256365391385E-6	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999835655493344	WITHOUT_CLASSIFICATION	1.643445066550075E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999947442681743	WITHOUT_CLASSIFICATION	5.255731825776504E-6	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999947545903026	WITHOUT_CLASSIFICATION	5.245409697431839E-6	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999964357896185	WITHOUT_CLASSIFICATION	3.5642103815881597E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999939791139044	WITHOUT_CLASSIFICATION	6.020886095557459E-6	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999926490068775	WITHOUT_CLASSIFICATION	7.350993122620303E-6	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999958664943107	WITHOUT_CLASSIFICATION	4.133505689272272E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999941274646243	WITHOUT_CLASSIFICATION	5.872535375631461E-6	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999932717622595	WITHOUT_CLASSIFICATION	6.728237740532607E-6	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999929843786058	WITHOUT_CLASSIFICATION	7.015621394141839E-6	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999908397478915	WITHOUT_CLASSIFICATION	9.160252108419314E-6	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.999992069499853	WITHOUT_CLASSIFICATION	7.930500147096387E-6	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999915822291637	WITHOUT_CLASSIFICATION	8.41777083627549E-6	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999940798700028	WITHOUT_CLASSIFICATION	5.9201299971482364E-6	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999942221591669	WITHOUT_CLASSIFICATION	5.777840833093007E-6	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.999992863206128	WITHOUT_CLASSIFICATION	7.136793872068015E-6	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999907185302563	WITHOUT_CLASSIFICATION	9.281469743664171E-6	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999868922067762	WITHOUT_CLASSIFICATION	1.3107793223831286E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999915126203172	WITHOUT_CLASSIFICATION	8.48737968285997E-6	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999885431114345	WITHOUT_CLASSIFICATION	1.1456888565590813E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.999990064990826	WITHOUT_CLASSIFICATION	9.935009173938663E-6	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999821348509697	WITHOUT_CLASSIFICATION	1.786514903033471E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999847069259369	WITHOUT_CLASSIFICATION	1.52930740631588E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999859377229995	WITHOUT_CLASSIFICATION	1.4062277000556819E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999889133952153	WITHOUT_CLASSIFICATION	1.1086604784705243E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999887135337423	WITHOUT_CLASSIFICATION	1.1286466257696052E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999887721734181	WITHOUT_CLASSIFICATION	1.1227826581966743E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999879303895284	WITHOUT_CLASSIFICATION	1.2069610471549552E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999908772069893	WITHOUT_CLASSIFICATION	9.122793010791662E-6	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999904160797733	WITHOUT_CLASSIFICATION	9.583920226750501E-6	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999900559717966	WITHOUT_CLASSIFICATION	9.944028203393209E-6	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999850657847115	WITHOUT_CLASSIFICATION	1.4934215288517773E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.99999138115214	WITHOUT_CLASSIFICATION	8.618847859920408E-6	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999874318859054	WITHOUT_CLASSIFICATION	1.2568114094412633E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999929324086181	WITHOUT_CLASSIFICATION	7.067591381894024E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999936599199315	WITHOUT_CLASSIFICATION	6.34008006857718E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999883383334898	WITHOUT_CLASSIFICATION	1.1661666510247486E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999920204305978	WITHOUT_CLASSIFICATION	7.979569402253738E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999827836091375	WITHOUT_CLASSIFICATION	1.721639086251059E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999900065098658	WITHOUT_CLASSIFICATION	9.993490134165068E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999876887189909	WITHOUT_CLASSIFICATION	1.2311281009099765E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999801482604788	WITHOUT_CLASSIFICATION	1.985173952125162E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.99998853959688	WITHOUT_CLASSIFICATION	1.1460403119889409E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999895738123118	WITHOUT_CLASSIFICATION	1.0426187688071334E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.999991283757562	WITHOUT_CLASSIFICATION	8.716242437997225E-6	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999955781779141	WITHOUT_CLASSIFICATION	4.4218220859042485E-6	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999905114807787	WITHOUT_CLASSIFICATION	9.488519221318102E-6	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999917303763434	WITHOUT_CLASSIFICATION	8.269623656753695E-6	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999884663170073	WITHOUT_CLASSIFICATION	1.153368299269681E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999909103577067	WITHOUT_CLASSIFICATION	9.089642293377642E-6	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999932683764696	WITHOUT_CLASSIFICATION	6.731623530341342E-6	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.999987744137857	WITHOUT_CLASSIFICATION	1.225586214306786E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999877701485397	WITHOUT_CLASSIFICATION	1.2229851460279576E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999888333666498	WITHOUT_CLASSIFICATION	1.1166633350300732E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999880791581798	WITHOUT_CLASSIFICATION	1.1920841820196804E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999916380497351	WITHOUT_CLASSIFICATION	8.361950264892048E-6	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999898160805708	WITHOUT_CLASSIFICATION	1.0183919429168395E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999925149694215	WITHOUT_CLASSIFICATION	7.485030578519395E-6	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999925472469849	WITHOUT_CLASSIFICATION	7.452753014971747E-6	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999944180657804	WITHOUT_CLASSIFICATION	5.581934219646041E-6	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999916221575396	WITHOUT_CLASSIFICATION	8.377842460418732E-6	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999910380544382	WITHOUT_CLASSIFICATION	8.96194556189593E-6	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999865447332783	WITHOUT_CLASSIFICATION	1.3455266721567535E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999872019108539	WITHOUT_CLASSIFICATION	1.2798089146181824E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999893626009139	WITHOUT_CLASSIFICATION	1.063739908602146E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999880289257221	WITHOUT_CLASSIFICATION	1.19710742778157E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999924652551682	WITHOUT_CLASSIFICATION	7.5347448318336775E-6	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999920255641954	WITHOUT_CLASSIFICATION	7.97443580458264E-6	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999891815641248	WITHOUT_CLASSIFICATION	1.0818435875198087E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999861562065999	WITHOUT_CLASSIFICATION	1.3843793400031186E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999859974304136	WITHOUT_CLASSIFICATION	1.4002569586420893E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999880400278877	WITHOUT_CLASSIFICATION	1.1959972112259014E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.99999018407263	WITHOUT_CLASSIFICATION	9.815927370076337E-6	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999914171868087	WITHOUT_CLASSIFICATION	8.582813191292427E-6	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999853453220713	WITHOUT_CLASSIFICATION	1.4654677928629885E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999877754325583	WITHOUT_CLASSIFICATION	1.222456744174442E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999894356604406	WITHOUT_CLASSIFICATION	1.0564339559477513E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999853406975524	WITHOUT_CLASSIFICATION	1.4659302447640081E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999916094246227	WITHOUT_CLASSIFICATION	8.390575377237044E-6	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999821726601017	WITHOUT_CLASSIFICATION	1.782733989824587E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999890247422287	WITHOUT_CLASSIFICATION	1.0975257771227776E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999864406332565	WITHOUT_CLASSIFICATION	1.3559366743436452E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999895526965773	WITHOUT_CLASSIFICATION	1.0447303422779711E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999868830157774	WITHOUT_CLASSIFICATION	1.3116984222718809E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999890047639451	WITHOUT_CLASSIFICATION	1.0995236054832755E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.999987682636405	WITHOUT_CLASSIFICATION	1.2317363594988811E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999664200908435	WITHOUT_CLASSIFICATION	3.3579909156509745E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999869379917553	WITHOUT_CLASSIFICATION	1.3062008244703891E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999438211327604	WITHOUT_CLASSIFICATION	5.617886723966164E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999778809892774	WITHOUT_CLASSIFICATION	2.2119010722590123E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999837654704153	WITHOUT_CLASSIFICATION	1.6234529584639092E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.999994918648228	WITHOUT_CLASSIFICATION	5.0813517720332775E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999922342609767	WITHOUT_CLASSIFICATION	7.765739023209283E-6	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999897795286079	WITHOUT_CLASSIFICATION	1.0220471392183563E-5	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999942082721355	WITHOUT_CLASSIFICATION	5.791727864562583E-6	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999891735563874	WITHOUT_CLASSIFICATION	1.0826443612604622E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999774329724844	WITHOUT_CLASSIFICATION	2.2567027515557838E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999922943724946	WITHOUT_CLASSIFICATION	7.705627505408246E-6	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999902771954782	WITHOUT_CLASSIFICATION	9.722804521833179E-6	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.999990517769169	WITHOUT_CLASSIFICATION	9.482230830889098E-6	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.999990434091425	WITHOUT_CLASSIFICATION	9.565908574977052E-6	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999860085689869	WITHOUT_CLASSIFICATION	1.3991431013111365E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999913825457677	WITHOUT_CLASSIFICATION	8.617454232255063E-6	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999913173481053	WITHOUT_CLASSIFICATION	8.682651894690514E-6	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999925920523188	WITHOUT_CLASSIFICATION	7.407947681224885E-6	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999667704553098	WITHOUT_CLASSIFICATION	3.3229544690270206E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999933021609089	WITHOUT_CLASSIFICATION	6.697839091171278E-6	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999868510401163	WITHOUT_CLASSIFICATION	1.3148959883744899E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999782185693974	WITHOUT_CLASSIFICATION	2.178143060260478E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999877978366181	WITHOUT_CLASSIFICATION	1.2202163381969737E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999851274505449	WITHOUT_CLASSIFICATION	1.4872549455190472E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999887818571755	WITHOUT_CLASSIFICATION	1.1218142824312205E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999824339585843	WITHOUT_CLASSIFICATION	1.7566041415703235E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.999957144115323	WITHOUT_CLASSIFICATION	4.285588467710489E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999702500455854	WITHOUT_CLASSIFICATION	2.974995441466446E-5	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999856199565146	WITHOUT_CLASSIFICATION	1.4380043485387616E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999865544108199	WITHOUT_CLASSIFICATION	1.3445589180197515E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999858331878579	WITHOUT_CLASSIFICATION	1.4166812142151626E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999830140707483	WITHOUT_CLASSIFICATION	1.698592925168777E-5	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999820959509516	WITHOUT_CLASSIFICATION	1.7904049048472427E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999898157086043	WITHOUT_CLASSIFICATION	1.0184291395650076E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.999986873090426	WITHOUT_CLASSIFICATION	1.3126909573877886E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.999984549356732	WITHOUT_CLASSIFICATION	1.5450643268007843E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999922003072722	WITHOUT_CLASSIFICATION	7.799692727833545E-6	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999886875338083	WITHOUT_CLASSIFICATION	1.1312466191728643E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999906404215613	WITHOUT_CLASSIFICATION	9.359578438734378E-6	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999898071859288	WITHOUT_CLASSIFICATION	1.0192814071151894E-5	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999912154842414	WITHOUT_CLASSIFICATION	8.784515758655047E-6	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999837774735069	WITHOUT_CLASSIFICATION	1.622252649312259E-5	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999925845311491	WITHOUT_CLASSIFICATION	7.415468850797787E-6	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999945304790399	WITHOUT_CLASSIFICATION	5.469520960239341E-6	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999928872144555	WITHOUT_CLASSIFICATION	7.112785544597273E-6	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999324993265389	WITHOUT_CLASSIFICATION	6.750067346098666E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9998931716727288	WITHOUT_CLASSIFICATION	1.0682832727119413E-4	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999965862485086	WITHOUT_CLASSIFICATION	3.413751491218263E-6	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999970901508295	WITHOUT_CLASSIFICATION	2.9098491704939015E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9991756866547105	WITHOUT_CLASSIFICATION	8.243133452895485E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9998680694053447	WITHOUT_CLASSIFICATION	1.3193059465530508E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9995903120109164	WITHOUT_CLASSIFICATION	4.096879890836295E-4	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999789474131161	WITHOUT_CLASSIFICATION	2.10525868839374E-5	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.999990252660899	WITHOUT_CLASSIFICATION	9.747339100925157E-6	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999913591437061	WITHOUT_CLASSIFICATION	8.640856293910887E-6	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999879233194856	WITHOUT_CLASSIFICATION	1.207668051447355E-5	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.999993942175603	WITHOUT_CLASSIFICATION	6.057824397039508E-6	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.99999342984832	WITHOUT_CLASSIFICATION	6.570151680032287E-6	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999944719689681	WITHOUT_CLASSIFICATION	5.528031031923512E-6	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999842381641445	WITHOUT_CLASSIFICATION	1.5761835855505026E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.999982952449823	WITHOUT_CLASSIFICATION	1.7047550177039423E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999944889068111	WITHOUT_CLASSIFICATION	5.511093188933452E-6	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999934818066204	WITHOUT_CLASSIFICATION	6.518193379540176E-6	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999832855122204	WITHOUT_CLASSIFICATION	1.6714487779616265E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999911998364455	WITHOUT_CLASSIFICATION	8.8001635544827E-6	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999816665894857	WITHOUT_CLASSIFICATION	1.8333410514239598E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999902207495903	WITHOUT_CLASSIFICATION	9.779250409658333E-6	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.999988262146634	WITHOUT_CLASSIFICATION	1.1737853365969556E-5	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999881730878174	WITHOUT_CLASSIFICATION	1.1826912182522149E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999902178819503	WITHOUT_CLASSIFICATION	9.782118049753389E-6	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999803666935134	WITHOUT_CLASSIFICATION	1.963330648654606E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999883985706431	WITHOUT_CLASSIFICATION	1.1601429356869045E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999853318267711	WITHOUT_CLASSIFICATION	1.4668173229021172E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999640076825355	WITHOUT_CLASSIFICATION	3.5992317464490816E-5	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999471574084722	WITHOUT_CLASSIFICATION	5.2842591527858E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999930470452797	WITHOUT_CLASSIFICATION	6.952954720374914E-6	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999994309616935	WITHOUT_CLASSIFICATION	5.690383064817728E-7	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999962621039162	WITHOUT_CLASSIFICATION	3.73789608365832E-6	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9999296924808007	WITHOUT_CLASSIFICATION	7.030751919926088E-5	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999995890154924	WITHOUT_CLASSIFICATION	4.109845076366812E-7	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999997293493549	WITHOUT_CLASSIFICATION	2.706506451143204E-7	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9999797959771509	WITHOUT_CLASSIFICATION	2.020402284904247E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999946922108	WITHOUT_CLASSIFICATION	5.307789198150464E-9	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998659458063733	WITHOUT_CLASSIFICATION	1.3405419362667802E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999919962226	WITHOUT_CLASSIFICATION	8.003777475935473E-9	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999919962226	WITHOUT_CLASSIFICATION	8.003777475935473E-9	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9961114704785972	WITHOUT_CLASSIFICATION	0.0038885295214028033	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999755563918827	WITHOUT_CLASSIFICATION	2.444360811717962E-5	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999972883512189	WITHOUT_CLASSIFICATION	2.7116487810178227E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999969851644093	WITHOUT_CLASSIFICATION	3.014835590793725E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999966525745048	WITHOUT_CLASSIFICATION	3.3474254952968878E-6	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999998881879517	WITHOUT_CLASSIFICATION	1.1181204822845276E-7	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999995676379446	WITHOUT_CLASSIFICATION	4.323620553912085E-7	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999989331447741	WITHOUT_CLASSIFICATION	1.0668552259377663E-6	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999999799060175	WITHOUT_CLASSIFICATION	2.0093982588141614E-8	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999999824205449	WITHOUT_CLASSIFICATION	1.7579455082456713E-8	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9999992791504823	WITHOUT_CLASSIFICATION	7.208495176547999E-7	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999999651691477	WITHOUT_CLASSIFICATION	3.483085235913411E-8	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999999819034419	WITHOUT_CLASSIFICATION	1.8096558125835888E-8	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999999789670321	WITHOUT_CLASSIFICATION	2.1032967981935683E-8	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999995240786655	WITHOUT_CLASSIFICATION	4.759213345587405E-7	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999995240786655	WITHOUT_CLASSIFICATION	4.759213345587405E-7	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999988400489931	WITHOUT_CLASSIFICATION	1.159951006944275E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.999999834846665	WITHOUT_CLASSIFICATION	1.6515333508301055E-7	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999999974502003	WITHOUT_CLASSIFICATION	2.5497997286349475E-9	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999994923674487	WITHOUT_CLASSIFICATION	5.076325513013545E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999789450245616	WITHOUT_CLASSIFICATION	2.1054975438340007E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999669282094	WITHOUT_CLASSIFICATION	3.3071790630075694E-8	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999995848954497	WITHOUT_CLASSIFICATION	4.151045502376493E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999669282094	WITHOUT_CLASSIFICATION	3.3071790630075694E-8	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999985684365881	WITHOUT_CLASSIFICATION	1.4315634118625331E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999049698042666	WITHOUT_CLASSIFICATION	9.503019573345794E-5	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9880603191881524	WITHOUT_CLASSIFICATION	0.011939680811847552	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9968009121021874	WITHOUT_CLASSIFICATION	0.0031990878978126035	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999924279702075	WITHOUT_CLASSIFICATION	7.572029792615046E-6	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999992062308828	WITHOUT_CLASSIFICATION	7.937691171756664E-7	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999999975142738	WITHOUT_CLASSIFICATION	2.4857261318416165E-9	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999939556420603	WITHOUT_CLASSIFICATION	6.04435793980218E-6	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999988764628399	WITHOUT_CLASSIFICATION	1.1235371600793147E-6	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.9845276222354777	WITHOUT_CLASSIFICATION	0.015472377764522309	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999995259395403	WITHOUT_CLASSIFICATION	4.740604596512662E-7	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999964511257613	WITHOUT_CLASSIFICATION	3.548874238640755E-6	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999666456175856	WITHOUT_CLASSIFICATION	3.3354382414352795E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9998807409100235	WITHOUT_CLASSIFICATION	1.1925908997640079E-4	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999999921460069	WITHOUT_CLASSIFICATION	7.853993155909846E-9	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999999921460069	WITHOUT_CLASSIFICATION	7.853993155909846E-9	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999980942306248	WITHOUT_CLASSIFICATION	1.905769375259311E-6	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999999555338644	WITHOUT_CLASSIFICATION	4.446613558680933E-8	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999998675827388	WITHOUT_CLASSIFICATION	1.3241726111058654E-7	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9999690413252559	WITHOUT_CLASSIFICATION	3.095867474423207E-5	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999992804001709	WITHOUT_CLASSIFICATION	7.195998290175018E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999669282094	WITHOUT_CLASSIFICATION	3.3071790630075694E-8	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999950930294311	WITHOUT_CLASSIFICATION	4.90697056889001E-6	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999999505997499	WITHOUT_CLASSIFICATION	4.940025002016366E-8	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999988351288674	WITHOUT_CLASSIFICATION	1.1648711325757958E-6	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999954769837928	WITHOUT_CLASSIFICATION	4.523016207293047E-6	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999999951600127	WITHOUT_CLASSIFICATION	4.839987302344289E-9	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999999944144596	WITHOUT_CLASSIFICATION	5.585540399069906E-9	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999996949692359	WITHOUT_CLASSIFICATION	3.05030764090777E-7	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9999959057369965	WITHOUT_CLASSIFICATION	4.094263003544037E-6	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999999994309455	WITHOUT_CLASSIFICATION	5.690545044592065E-10	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.999999977806625	WITHOUT_CLASSIFICATION	2.219337497864237E-8	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999999988133866	WITHOUT_CLASSIFICATION	1.186613373812908E-9	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999999976535794	WITHOUT_CLASSIFICATION	2.346420645703543E-9	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9998399122075907	WITHOUT_CLASSIFICATION	1.6008779240925114E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999448305827	WITHOUT_CLASSIFICATION	5.51694173394149E-8	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9999681630159003	WITHOUT_CLASSIFICATION	3.183698409977254E-5	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999995901849776	WITHOUT_CLASSIFICATION	4.0981502235461563E-7	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999994005822114	WITHOUT_CLASSIFICATION	5.994177886533845E-7	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9999847771186499	WITHOUT_CLASSIFICATION	1.5222881350037449E-5	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.999999353044642	WITHOUT_CLASSIFICATION	6.469553578748198E-7	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999997567138128	WITHOUT_CLASSIFICATION	2.432861872480316E-7	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999999845568548	WITHOUT_CLASSIFICATION	1.5443145143589308E-8	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9995620717562397	WITHOUT_CLASSIFICATION	4.3792824376044464E-4	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999999996155116	WITHOUT_CLASSIFICATION	3.844884998781682E-10	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999999420444105	WITHOUT_CLASSIFICATION	5.795558948947487E-8	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999991606352867	WITHOUT_CLASSIFICATION	8.393647132646059E-7	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999999902996812	WITHOUT_CLASSIFICATION	9.700318887275163E-9	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999999704718264	WITHOUT_CLASSIFICATION	2.952817361935504E-8	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999914013936654	WITHOUT_CLASSIFICATION	8.598606334639083E-6	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.999981645567862	WITHOUT_CLASSIFICATION	1.8354432138102494E-5	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999999314834997	WITHOUT_CLASSIFICATION	6.851650029181891E-8	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999721156487006	WITHOUT_CLASSIFICATION	2.7884351299423985E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999998374009632	WITHOUT_CLASSIFICATION	1.625990367230721E-7	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999999972822933	WITHOUT_CLASSIFICATION	2.717706741360914E-9	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9995526717280764	WITHOUT_CLASSIFICATION	4.473282719237252E-4	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999987830434256	WITHOUT_CLASSIFICATION	1.2169565743950796E-6	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999996759958594	WITHOUT_CLASSIFICATION	3.2400414063955326E-7	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999843884969721	WITHOUT_CLASSIFICATION	1.5611503027765658E-5	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999999572528281	WITHOUT_CLASSIFICATION	4.274717180441561E-8	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999999779794958	WITHOUT_CLASSIFICATION	2.2020504148555616E-8	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999999988989647	WITHOUT_CLASSIFICATION	1.1010351904962867E-9	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999789474131161	WITHOUT_CLASSIFICATION	2.10525868839374E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999996320826773	WITHOUT_CLASSIFICATION	3.67917322683316E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999995428657595	WITHOUT_CLASSIFICATION	4.5713424045988197E-7	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999576763851538	WITHOUT_CLASSIFICATION	4.2323614846218895E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999999462423185	WITHOUT_CLASSIFICATION	5.375768161337253E-8	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999049698042666	WITHOUT_CLASSIFICATION	9.503019573345794E-5	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999939281326294	WITHOUT_CLASSIFICATION	6.0718673706080835E-6	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999998370010208	WITHOUT_CLASSIFICATION	1.6299897926674861E-7	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9999906934742498	WITHOUT_CLASSIFICATION	9.306525750111886E-6	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999281272215	WITHOUT_CLASSIFICATION	7.187277846108151E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999281272215	WITHOUT_CLASSIFICATION	7.187277846108151E-8	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999922132572853	WITHOUT_CLASSIFICATION	7.786742714727261E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999922132572853	WITHOUT_CLASSIFICATION	7.786742714727261E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999922132572853	WITHOUT_CLASSIFICATION	7.786742714727261E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.999998437162004	WITHOUT_CLASSIFICATION	1.5628379959720831E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.999998437162004	WITHOUT_CLASSIFICATION	1.5628379959720831E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999923574215427	WITHOUT_CLASSIFICATION	7.64257845735813E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999923574215427	WITHOUT_CLASSIFICATION	7.64257845735813E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999990725060434	WITHOUT_CLASSIFICATION	9.274939565790248E-7	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9999908803885275	WITHOUT_CLASSIFICATION	9.119611472569407E-6	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999997758919391	WITHOUT_CLASSIFICATION	2.241080607960462E-7	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999997758919391	WITHOUT_CLASSIFICATION	2.241080607960462E-7	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999997766732318	WITHOUT_CLASSIFICATION	2.233267682079827E-7	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999994932497313	WITHOUT_CLASSIFICATION	5.067502687905452E-7	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9999482897001583	WITHOUT_CLASSIFICATION	5.171029984167784E-5	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999999855816706	WITHOUT_CLASSIFICATION	1.4418329379636729E-8	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999839174106475	WITHOUT_CLASSIFICATION	1.6082589352473714E-5	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999998696140755	WITHOUT_CLASSIFICATION	1.3038592442399373E-7	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999999702368878	WITHOUT_CLASSIFICATION	2.976311220189719E-8	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.999987920755736	WITHOUT_CLASSIFICATION	1.2079244264052563E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999944955216735	WITHOUT_CLASSIFICATION	5.504478326472375E-6	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999848268584672	WITHOUT_CLASSIFICATION	1.5173141532758138E-5	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.999999886392043	WITHOUT_CLASSIFICATION	1.1360795706553053E-7	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999987133323841	WITHOUT_CLASSIFICATION	1.2866676159401293E-6	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9999823102869055	WITHOUT_CLASSIFICATION	1.7689713094482056E-5	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999918053020406	WITHOUT_CLASSIFICATION	8.194697959350398E-6	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999990531332796	WITHOUT_CLASSIFICATION	9.468667203389989E-7	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999871910906772	WITHOUT_CLASSIFICATION	1.2808909322610374E-5	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999928134184143	WITHOUT_CLASSIFICATION	7.1865815857531634E-6	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999829746523556	WITHOUT_CLASSIFICATION	1.7025347644303085E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999835314488867	WITHOUT_CLASSIFICATION	1.6468551113279194E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999735521952801	WITHOUT_CLASSIFICATION	2.644780472002152E-5	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999977376103959	WITHOUT_CLASSIFICATION	2.2623896040188686E-6	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.999993012672641	WITHOUT_CLASSIFICATION	6.987327358937248E-6	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999951474571688	WITHOUT_CLASSIFICATION	4.852542831305567E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999940355695363	WITHOUT_CLASSIFICATION	5.96443046377039E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999982843382967	WITHOUT_CLASSIFICATION	1.7156617032288942E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999953165790033	WITHOUT_CLASSIFICATION	4.683420996690897E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999737383210306	WITHOUT_CLASSIFICATION	2.6261678969338406E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999867324381106	WITHOUT_CLASSIFICATION	1.326756188939204E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999955536367108	WITHOUT_CLASSIFICATION	4.44636328922457E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999987210099923	WITHOUT_CLASSIFICATION	1.2789900076587255E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999965086047152	WITHOUT_CLASSIFICATION	3.4913952848557874E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999986386892676	WITHOUT_CLASSIFICATION	1.3613107322960494E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996084217856	WITHOUT_CLASSIFICATION	3.9157821445135045E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996257439302	WITHOUT_CLASSIFICATION	3.742560697969368E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996084217856	WITHOUT_CLASSIFICATION	3.9157821445135045E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996084217856	WITHOUT_CLASSIFICATION	3.9157821445135045E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996084217856	WITHOUT_CLASSIFICATION	3.9157821445135045E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996084217856	WITHOUT_CLASSIFICATION	3.9157821445135045E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996084217856	WITHOUT_CLASSIFICATION	3.9157821445135045E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996084217856	WITHOUT_CLASSIFICATION	3.9157821445135045E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996257439302	WITHOUT_CLASSIFICATION	3.742560697969368E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996257439302	WITHOUT_CLASSIFICATION	3.742560697969368E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996257439302	WITHOUT_CLASSIFICATION	3.742560697969368E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996257439302	WITHOUT_CLASSIFICATION	3.742560697969368E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996257439302	WITHOUT_CLASSIFICATION	3.742560697969368E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996257439302	WITHOUT_CLASSIFICATION	3.742560697969368E-7	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9979508210103027	WITHOUT_CLASSIFICATION	0.002049178989697293	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9998192594132076	WITHOUT_CLASSIFICATION	1.8074058679247218E-4	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999979959495239	WITHOUT_CLASSIFICATION	2.0040504760308696E-6	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9997051485967775	WITHOUT_CLASSIFICATION	2.9485140322251484E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999874341058929	WITHOUT_CLASSIFICATION	1.2565894107161036E-5	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999890025083306	WITHOUT_CLASSIFICATION	1.0997491669362404E-5	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999999865843577	WITHOUT_CLASSIFICATION	1.3415642232669618E-8	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999999237159571	WITHOUT_CLASSIFICATION	7.628404290056711E-8	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999987245258303	WITHOUT_CLASSIFICATION	1.2754741697217867E-6	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999989486425216	WITHOUT_CLASSIFICATION	1.0513574783924862E-6	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999933732689597	WITHOUT_CLASSIFICATION	6.626731040378574E-6	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999988868045673	WITHOUT_CLASSIFICATION	1.113195432699888E-6	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999996483285903	WITHOUT_CLASSIFICATION	3.5167140967286725E-7	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999999542745917	WITHOUT_CLASSIFICATION	4.5725408345830965E-8	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999997920460105	WITHOUT_CLASSIFICATION	2.0795398953455653E-7	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.999999011575158	WITHOUT_CLASSIFICATION	9.884248419543918E-7	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.99999210607163	WITHOUT_CLASSIFICATION	7.89392836989036E-6	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999927951460452	WITHOUT_CLASSIFICATION	7.204853954799652E-6	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999985361851281	WITHOUT_CLASSIFICATION	1.4638148719488858E-6	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999448115389153	WITHOUT_CLASSIFICATION	5.5188461084783345E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999999023289141	WITHOUT_CLASSIFICATION	9.767108585680431E-8	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999998467860367	WITHOUT_CLASSIFICATION	1.5321396323889647E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999995848954497	WITHOUT_CLASSIFICATION	4.151045502376493E-7	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9987736618308948	WITHOUT_CLASSIFICATION	0.0012263381691052643	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9999248995849478	WITHOUT_CLASSIFICATION	7.510041505221208E-5	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999996568130468	WITHOUT_CLASSIFICATION	3.431869532686634E-7	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999996010366569	WITHOUT_CLASSIFICATION	3.989633431103607E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999967297338165	WITHOUT_CLASSIFICATION	3.2702661834243573E-6	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.99999548695949	WITHOUT_CLASSIFICATION	4.513040509939202E-6	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999910897022695	WITHOUT_CLASSIFICATION	8.91029773057945E-6	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999966082838417	WITHOUT_CLASSIFICATION	3.39171615816116E-6	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999992792471313	WITHOUT_CLASSIFICATION	7.207528687641979E-7	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999889717350952	WITHOUT_CLASSIFICATION	1.102826490482431E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999997769674686	WITHOUT_CLASSIFICATION	2.2303253156598009E-7	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999994639911266	WITHOUT_CLASSIFICATION	5.360088734241337E-7	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.999999935780593	WITHOUT_CLASSIFICATION	6.421940699359366E-8	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999998010002069	WITHOUT_CLASSIFICATION	1.9899979301908988E-7	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999513400162641	WITHOUT_CLASSIFICATION	4.8659983735909975E-5	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999994419593573	WITHOUT_CLASSIFICATION	5.580406426117627E-7	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999997047164422	WITHOUT_CLASSIFICATION	2.952835578770137E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999985879786124	WITHOUT_CLASSIFICATION	1.412021387530769E-6	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999999911958362	WITHOUT_CLASSIFICATION	8.804163881895036E-9	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999999900867829	WITHOUT_CLASSIFICATION	9.913217131976427E-9	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.99999961220792	WITHOUT_CLASSIFICATION	3.877920799533349E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.99999961220792	WITHOUT_CLASSIFICATION	3.877920799533349E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999999253784254	WITHOUT_CLASSIFICATION	7.462157455805233E-8	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999999253784254	WITHOUT_CLASSIFICATION	7.462157455805233E-8	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999999802287302	WITHOUT_CLASSIFICATION	1.977126975939562E-8	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999999802287302	WITHOUT_CLASSIFICATION	1.977126975939562E-8	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999872538818171	WITHOUT_CLASSIFICATION	1.2746118182974459E-5	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.999999921930274	WITHOUT_CLASSIFICATION	7.806972608007549E-8	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999999777623662	WITHOUT_CLASSIFICATION	2.2237633875429534E-8	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999998437146091	WITHOUT_CLASSIFICATION	1.5628539082346564E-7	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999961464039705	WITHOUT_CLASSIFICATION	3.8535960294280275E-6	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9999931321451365	WITHOUT_CLASSIFICATION	6.867854863499579E-6	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.99999997772321	WITHOUT_CLASSIFICATION	2.2276789960386073E-8	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999830194408716	WITHOUT_CLASSIFICATION	1.6980559128442114E-5	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999997660658911	WITHOUT_CLASSIFICATION	2.339341087579721E-7	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999976847421391	WITHOUT_CLASSIFICATION	2.315257860958048E-6	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999975251010496	WITHOUT_CLASSIFICATION	2.474898950551341E-6	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999981991045687	WITHOUT_CLASSIFICATION	1.8008954313778083E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9999989085703602	WITHOUT_CLASSIFICATION	1.0914296397593855E-6	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9998494692542824	WITHOUT_CLASSIFICATION	1.505307457175678E-4	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999942590889208	WITHOUT_CLASSIFICATION	5.740911079197189E-6	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999996104463692	WITHOUT_CLASSIFICATION	3.8955363087317374E-7	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999991682267586	WITHOUT_CLASSIFICATION	8.317732415062514E-7	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999899409735374	WITHOUT_CLASSIFICATION	1.0059026462597052E-5	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999997986147433	WITHOUT_CLASSIFICATION	2.0138525665320545E-7	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999990508488367	WITHOUT_CLASSIFICATION	9.491511634412739E-7	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999989645606429	WITHOUT_CLASSIFICATION	1.0354393572203785E-6	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9999165319164228	WITHOUT_CLASSIFICATION	8.346808357722025E-5	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999990378049372	WITHOUT_CLASSIFICATION	9.621950629081948E-7	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999993683403171	WITHOUT_CLASSIFICATION	6.316596828831965E-7	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999997822798105	WITHOUT_CLASSIFICATION	2.1772018943028992E-7	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999974752407765	WITHOUT_CLASSIFICATION	2.5247592234953075E-6	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999986308015428	WITHOUT_CLASSIFICATION	1.3691984571152282E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997945306931	WITHOUT_CLASSIFICATION	2.0546930691105212E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997945306931	WITHOUT_CLASSIFICATION	2.0546930691105212E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997945306931	WITHOUT_CLASSIFICATION	2.0546930691105212E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999962715759	WITHOUT_CLASSIFICATION	3.728424116359659E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999962715759	WITHOUT_CLASSIFICATION	3.728424116359659E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999448305827	WITHOUT_CLASSIFICATION	5.51694173394149E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999448305827	WITHOUT_CLASSIFICATION	5.51694173394149E-8	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.99999999967178	WITHOUT_CLASSIFICATION	3.282199013748532E-10	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.8688492939343931	WITHOUT_CLASSIFICATION	0.13115070606560686	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999999704318037	WITHOUT_CLASSIFICATION	2.9568196349317443E-8	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999988208342063	WITHOUT_CLASSIFICATION	1.1791657936295634E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997945306931	WITHOUT_CLASSIFICATION	2.0546930691105212E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997945306931	WITHOUT_CLASSIFICATION	2.0546930691105212E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997945306931	WITHOUT_CLASSIFICATION	2.0546930691105212E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999962715759	WITHOUT_CLASSIFICATION	3.728424116359659E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999962715759	WITHOUT_CLASSIFICATION	3.728424116359659E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999962715759	WITHOUT_CLASSIFICATION	3.728424116359659E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999448305827	WITHOUT_CLASSIFICATION	5.51694173394149E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999448305827	WITHOUT_CLASSIFICATION	5.51694173394149E-8	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999997977904023	WITHOUT_CLASSIFICATION	2.0220959778845467E-7	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999999761223554	WITHOUT_CLASSIFICATION	2.3877644681507694E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999735654559	WITHOUT_CLASSIFICATION	2.6434544080030646E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999735654559	WITHOUT_CLASSIFICATION	2.6434544080030646E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999735654559	WITHOUT_CLASSIFICATION	2.6434544080030646E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999735654559	WITHOUT_CLASSIFICATION	2.6434544080030646E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999735654559	WITHOUT_CLASSIFICATION	2.6434544080030646E-8	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999993182213262	WITHOUT_CLASSIFICATION	6.817786739180954E-7	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.999999341359829	WITHOUT_CLASSIFICATION	6.58640170950269E-7	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9993593148150806	WITHOUT_CLASSIFICATION	6.406851849193925E-4	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999990906039192	WITHOUT_CLASSIFICATION	9.093960807000674E-7	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999993225428082	WITHOUT_CLASSIFICATION	6.774571917420789E-7	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999995686026637	WITHOUT_CLASSIFICATION	4.3139733622235254E-7	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999928304527286	WITHOUT_CLASSIFICATION	7.16954727146604E-6	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999993531270759	WITHOUT_CLASSIFICATION	6.468729240142862E-7	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999999449482545	WITHOUT_CLASSIFICATION	5.505174543509545E-8	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.999997829959221	WITHOUT_CLASSIFICATION	2.17004077893553E-6	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9999645429798909	WITHOUT_CLASSIFICATION	3.545702010916185E-5	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999993512181949	WITHOUT_CLASSIFICATION	6.48781805022165E-7	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9998073756295655	WITHOUT_CLASSIFICATION	1.9262437043460594E-4	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999986429682851	WITHOUT_CLASSIFICATION	1.3570317149317296E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9999955235755289	WITHOUT_CLASSIFICATION	4.47642447106541E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999994891228119	WITHOUT_CLASSIFICATION	5.108771880598219E-7	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999994891228119	WITHOUT_CLASSIFICATION	5.108771880598219E-7	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999994891228119	WITHOUT_CLASSIFICATION	5.108771880598219E-7	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999829661113804	WITHOUT_CLASSIFICATION	1.7033888619617896E-5	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.999982968918108	WITHOUT_CLASSIFICATION	1.7031081892035698E-5	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999995715227231	WITHOUT_CLASSIFICATION	4.284772768208593E-7	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999993046341054	WITHOUT_CLASSIFICATION	6.953658946644889E-7	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999989221243917	WITHOUT_CLASSIFICATION	1.07787560831871E-6	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.999997196031779	WITHOUT_CLASSIFICATION	2.8039682211354782E-6	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999994267356042	WITHOUT_CLASSIFICATION	5.732643957639748E-7	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999999665559152	WITHOUT_CLASSIFICATION	3.344408492065839E-8	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999998293236552	WITHOUT_CLASSIFICATION	1.7067634481929613E-7	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.999996958187511	WITHOUT_CLASSIFICATION	3.041812489068887E-6	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999988916047535	WITHOUT_CLASSIFICATION	1.1083952464213205E-6	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999999535633048	WITHOUT_CLASSIFICATION	4.643669506551296E-8	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999995522641502	WITHOUT_CLASSIFICATION	4.4773584982842055E-7	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999999982378387	WITHOUT_CLASSIFICATION	1.7621613528500252E-9	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999999974148627	WITHOUT_CLASSIFICATION	2.5851374395794963E-9	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999845723416803	WITHOUT_CLASSIFICATION	1.542765831977902E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999966876141818	WITHOUT_CLASSIFICATION	3.31238581809477E-6	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999999663049578	WITHOUT_CLASSIFICATION	3.369504216750975E-8	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999997297492013	WITHOUT_CLASSIFICATION	2.7025079868629115E-7	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999726590195152	WITHOUT_CLASSIFICATION	2.7340980484867412E-5	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9994208963256093	WITHOUT_CLASSIFICATION	5.791036743907393E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.999996592340755	WITHOUT_CLASSIFICATION	3.4076592450224255E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.999248076512151	WITHOUT_CLASSIFICATION	7.519234878490262E-4	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999998534398187	WITHOUT_CLASSIFICATION	1.4656018128560189E-7	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999966660813723	WITHOUT_CLASSIFICATION	3.333918627677348E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999967338201096	WITHOUT_CLASSIFICATION	3.266179890360357E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999980518020191	WITHOUT_CLASSIFICATION	1.9481979809706745E-6	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999963256366712	WITHOUT_CLASSIFICATION	3.6743633288984448E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999873317749699	WITHOUT_CLASSIFICATION	1.2668225030004846E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999717184903142	WITHOUT_CLASSIFICATION	2.8281509685730544E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.999935129726483	WITHOUT_CLASSIFICATION	6.487027351700297E-5	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999663931703482	WITHOUT_CLASSIFICATION	3.3606829651744064E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9999511972551608	WITHOUT_CLASSIFICATION	4.880274483919131E-5	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9999244504393427	WITHOUT_CLASSIFICATION	7.554956065727674E-5	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.999914798428753	WITHOUT_CLASSIFICATION	8.520157124700064E-5	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9999588760048456	WITHOUT_CLASSIFICATION	4.112399515437494E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999987603920251	WITHOUT_CLASSIFICATION	1.2396079748814639E-6	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999981721711618	WITHOUT_CLASSIFICATION	1.8278288382629503E-6	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999634557413	WITHOUT_CLASSIFICATION	3.654425865459427E-8	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9983051731600795	WITHOUT_CLASSIFICATION	0.0016948268399205506	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999044625726292	WITHOUT_CLASSIFICATION	9.553742737069819E-5	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9989839145345794	WITHOUT_CLASSIFICATION	0.0010160854654206498	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999845584969005	WITHOUT_CLASSIFICATION	1.5441503099556925E-5	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999897908649874	WITHOUT_CLASSIFICATION	1.0209135012623238E-5	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999996935703165	WITHOUT_CLASSIFICATION	3.064296834908798E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9999941134775522	WITHOUT_CLASSIFICATION	5.886522447886684E-6	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.99998841244348	WITHOUT_CLASSIFICATION	1.1587556519999083E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.99998841244348	WITHOUT_CLASSIFICATION	1.1587556519999083E-5	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999989986457756	WITHOUT_CLASSIFICATION	1.0013542243430215E-6	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999975792971132	WITHOUT_CLASSIFICATION	2.420702886706936E-6	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9999934817217934	WITHOUT_CLASSIFICATION	6.5182782065397004E-6	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999872008441651	WITHOUT_CLASSIFICATION	1.2799155834774076E-5	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999990476194439	WITHOUT_CLASSIFICATION	9.523805562015275E-7	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999998759486384	WITHOUT_CLASSIFICATION	1.2405136162728615E-7	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999999798536889	WITHOUT_CLASSIFICATION	2.014631109552616E-8	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999789256926	WITHOUT_CLASSIFICATION	2.1074307411046556E-8	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.999999872155725	WITHOUT_CLASSIFICATION	1.2784427496349572E-7	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999991987295801	WITHOUT_CLASSIFICATION	8.012704198917919E-7	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999871382979	WITHOUT_CLASSIFICATION	1.2861702081450823E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999871382979	WITHOUT_CLASSIFICATION	1.2861702081450823E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999871382979	WITHOUT_CLASSIFICATION	1.2861702081450823E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999871382979	WITHOUT_CLASSIFICATION	1.2861702081450823E-8	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999984340683711	WITHOUT_CLASSIFICATION	1.5659316288918625E-6	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999997814478074	WITHOUT_CLASSIFICATION	2.185521924996842E-7	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999999060929468	WITHOUT_CLASSIFICATION	9.390705321027894E-8	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.999999509199226	WITHOUT_CLASSIFICATION	4.908007739638987E-7	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9999850578311646	WITHOUT_CLASSIFICATION	1.4942168835205264E-5	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9999866661336051	WITHOUT_CLASSIFICATION	1.3333866394927431E-5	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9999845128653952	WITHOUT_CLASSIFICATION	1.5487134604755215E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999959650763952	WITHOUT_CLASSIFICATION	4.0349236047186725E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999959650763952	WITHOUT_CLASSIFICATION	4.0349236047186725E-6	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999931507749388	WITHOUT_CLASSIFICATION	6.849225061266206E-6	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999997491126863	WITHOUT_CLASSIFICATION	2.508873137332351E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999933411301	WITHOUT_CLASSIFICATION	6.658869855225041E-9	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9994002182994722	WITHOUT_CLASSIFICATION	5.997817005277737E-4	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9994002182994722	WITHOUT_CLASSIFICATION	5.997817005277737E-4	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9996777354201757	WITHOUT_CLASSIFICATION	3.222645798243449E-4	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999998263823432	WITHOUT_CLASSIFICATION	1.7361765685970028E-7	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999998263823432	WITHOUT_CLASSIFICATION	1.7361765685970028E-7	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9996144250869594	WITHOUT_CLASSIFICATION	3.855749130406532E-4	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999999682497309	WITHOUT_CLASSIFICATION	3.175026901787519E-8	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.999994081901236	WITHOUT_CLASSIFICATION	5.918098764069076E-6	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9948682174318322	WITHOUT_CLASSIFICATION	0.005131782568167875	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9999965188423376	WITHOUT_CLASSIFICATION	3.481157662309866E-6	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999999992602789	WITHOUT_CLASSIFICATION	7.397211564221421E-10	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9999350404383492	WITHOUT_CLASSIFICATION	6.495956165078682E-5	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999991822618685	WITHOUT_CLASSIFICATION	8.17738131613876E-7	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999999876556082	WITHOUT_CLASSIFICATION	1.2344391824915609E-8	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999994417636691	WITHOUT_CLASSIFICATION	5.582363309579747E-7	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.999998695371904	WITHOUT_CLASSIFICATION	1.3046280960228653E-6	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999994940014396	WITHOUT_CLASSIFICATION	5.05998560363247E-7	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9999607923957681	WITHOUT_CLASSIFICATION	3.9207604231966774E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9999830494430008	WITHOUT_CLASSIFICATION	1.695055699916997E-5	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999997706041183	WITHOUT_CLASSIFICATION	2.2939588160074373E-7	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9999647929848112	WITHOUT_CLASSIFICATION	3.520701518872583E-5	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999989949315704	WITHOUT_CLASSIFICATION	1.0050684295517918E-6	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999998204113938	WITHOUT_CLASSIFICATION	1.7958860613697445E-7	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.999999886005135	WITHOUT_CLASSIFICATION	1.1399486510953985E-7	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9987236890147885	WITHOUT_CLASSIFICATION	0.0012763109852115422	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9992606617039522	WITHOUT_CLASSIFICATION	7.393382960478134E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.999994821486015	WITHOUT_CLASSIFICATION	5.178513985013975E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999973490889504	WITHOUT_CLASSIFICATION	2.65091104956667E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9999374465068714	WITHOUT_CLASSIFICATION	6.25534931285834E-5	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9981630855444199	WITHOUT_CLASSIFICATION	0.001836914455580066	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9997157093272675	WITHOUT_CLASSIFICATION	2.842906727324915E-4	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999998266866073	WITHOUT_CLASSIFICATION	1.733133928024758E-7	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999864892652269	WITHOUT_CLASSIFICATION	1.3510734773121624E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999998012701643	WITHOUT_CLASSIFICATION	1.9872983569768904E-7	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999983488137705	WITHOUT_CLASSIFICATION	1.6511862294773464E-6	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999675377554845	WITHOUT_CLASSIFICATION	3.246224451547587E-5	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999975126397801	WITHOUT_CLASSIFICATION	2.487360219845544E-6	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.9998727115296293	DEFECT	1.2728847037065316E-4	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999616063353827	WITHOUT_CLASSIFICATION	3.8393664617229276E-5	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999999624784083	WITHOUT_CLASSIFICATION	3.75215917322046E-8	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999714859698652	WITHOUT_CLASSIFICATION	2.8514030134861273E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999962074217651	WITHOUT_CLASSIFICATION	3.792578234946118E-6	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999999904644331	WITHOUT_CLASSIFICATION	9.535566881049053E-9	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999999817985885	WITHOUT_CLASSIFICATION	1.8201411483799568E-8	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999714859698652	WITHOUT_CLASSIFICATION	2.8514030134861273E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999962074217651	WITHOUT_CLASSIFICATION	3.792578234946118E-6	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999966059562315	WITHOUT_CLASSIFICATION	3.3940437684266174E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999970845598034	WITHOUT_CLASSIFICATION	2.9154401964982834E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999970845598034	WITHOUT_CLASSIFICATION	2.9154401964982834E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999993877243749	WITHOUT_CLASSIFICATION	6.122756249910807E-7	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9997910877785257	WITHOUT_CLASSIFICATION	2.0891222147442193E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999963052678423	WITHOUT_CLASSIFICATION	3.69473215761444E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999981210250874	WITHOUT_CLASSIFICATION	1.8789749125294587E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999745501994791	WITHOUT_CLASSIFICATION	2.5449800520835855E-5	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9964709530511291	WITHOUT_CLASSIFICATION	0.003529046948870915	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999994145275236	WITHOUT_CLASSIFICATION	5.854724764632338E-7	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999999647229528	WITHOUT_CLASSIFICATION	3.5277047205546994E-8	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999979307713476	WITHOUT_CLASSIFICATION	2.0692286524410973E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999913625842854	WITHOUT_CLASSIFICATION	8.637415714433963E-6	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9999981122709661	WITHOUT_CLASSIFICATION	1.8877290338987442E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999995594968278	WITHOUT_CLASSIFICATION	4.4050317220722706E-7	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9999814922238502	WITHOUT_CLASSIFICATION	1.8507776149728042E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.999999782796929	WITHOUT_CLASSIFICATION	2.172030710923273E-7	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.999999782796929	WITHOUT_CLASSIFICATION	2.172030710923273E-7	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999906595409956	WITHOUT_CLASSIFICATION	9.340459004424696E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999906595409956	WITHOUT_CLASSIFICATION	9.340459004424696E-6	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.999999672492428	WITHOUT_CLASSIFICATION	3.275075718845488E-7	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.999999798330785	WITHOUT_CLASSIFICATION	2.0166921501226879E-7	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999984270889422	WITHOUT_CLASSIFICATION	1.5729110578713214E-6	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999944837183039	WITHOUT_CLASSIFICATION	5.5162816961865875E-6	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999994437493949	WITHOUT_CLASSIFICATION	5.562506051380599E-7	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999998903241427	WITHOUT_CLASSIFICATION	1.0967585727455467E-7	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999963052678423	WITHOUT_CLASSIFICATION	3.69473215761444E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999981210250874	WITHOUT_CLASSIFICATION	1.8789749125294587E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999979307713476	WITHOUT_CLASSIFICATION	2.0692286524410973E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999913625842854	WITHOUT_CLASSIFICATION	8.637415714433963E-6	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999986203490275	WITHOUT_CLASSIFICATION	1.3796509724436008E-6	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999996700543488	WITHOUT_CLASSIFICATION	3.299456512514874E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999926271977754	WITHOUT_CLASSIFICATION	7.3728022246937975E-6	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999996349501995	WITHOUT_CLASSIFICATION	3.650498004621908E-7	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999998817996245	WITHOUT_CLASSIFICATION	1.1820037543385701E-7	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999979682593588	WITHOUT_CLASSIFICATION	2.031740641086241E-6	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9999150318123088	WITHOUT_CLASSIFICATION	8.496818769128454E-5	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999970954091529	WITHOUT_CLASSIFICATION	2.904590847023897E-6	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999860716419307	WITHOUT_CLASSIFICATION	1.3928358069402246E-5	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999986956444654	WITHOUT_CLASSIFICATION	1.3043555345288135E-6	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9999969762787934	WITHOUT_CLASSIFICATION	3.023721206725393E-6	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.999999862170477	WITHOUT_CLASSIFICATION	1.378295230385233E-7	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999996144337904	WITHOUT_CLASSIFICATION	3.8556620963714527E-7	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9997342952691496	WITHOUT_CLASSIFICATION	2.6570473085046025E-4	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999970606072964	WITHOUT_CLASSIFICATION	2.9393927035254764E-6	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999597401737983	WITHOUT_CLASSIFICATION	4.025982620170053E-5	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999994860990389	WITHOUT_CLASSIFICATION	5.139009612102737E-7	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9999990485943494	WITHOUT_CLASSIFICATION	9.514056506939015E-7	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.999999864267099	WITHOUT_CLASSIFICATION	1.357329010190428E-7	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999999237879903	WITHOUT_CLASSIFICATION	7.621200972090522E-8	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999999081713892	WITHOUT_CLASSIFICATION	9.182861083506602E-8	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999999081713892	WITHOUT_CLASSIFICATION	9.182861083506602E-8	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999958008138778	WITHOUT_CLASSIFICATION	4.199186122113768E-6	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.999997963133123	WITHOUT_CLASSIFICATION	2.036866877125019E-6	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9990883197175037	WITHOUT_CLASSIFICATION	9.116802824963687E-4	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999999428376437	WITHOUT_CLASSIFICATION	5.716235626708312E-8	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999999428376437	WITHOUT_CLASSIFICATION	5.716235626708312E-8	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999926271977754	WITHOUT_CLASSIFICATION	7.3728022246937975E-6	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999995721272266	WITHOUT_CLASSIFICATION	4.278727733910939E-7	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999999393409904	WITHOUT_CLASSIFICATION	6.065900960780114E-8	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999999144195093	WITHOUT_CLASSIFICATION	8.55804907941287E-8	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999998469376911	WITHOUT_CLASSIFICATION	1.5306230891109675E-7	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999999355483167	WITHOUT_CLASSIFICATION	6.445168340504723E-8	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999945069995839	WITHOUT_CLASSIFICATION	5.493000416051648E-6	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999999462733775	WITHOUT_CLASSIFICATION	5.372662253181966E-8	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999999589798093	WITHOUT_CLASSIFICATION	4.102019072866853E-8	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999995835219148	WITHOUT_CLASSIFICATION	4.164780851839382E-7	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999999022202414	WITHOUT_CLASSIFICATION	9.777975861703277E-8	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999835660753577	WITHOUT_CLASSIFICATION	1.6433924642330953E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999989502230602	WITHOUT_CLASSIFICATION	1.049776939870848E-6	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9999999320488218	WITHOUT_CLASSIFICATION	6.795117819890195E-8	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999965814480788	WITHOUT_CLASSIFICATION	3.4185519211706366E-6	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999995812752389	WITHOUT_CLASSIFICATION	4.1872476101550895E-7	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999995897831226	WITHOUT_CLASSIFICATION	4.102168773175998E-7	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999997018769426	WITHOUT_CLASSIFICATION	2.981230573614353E-7	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999656218348945	WITHOUT_CLASSIFICATION	3.437816510551988E-5	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999998267944071	WITHOUT_CLASSIFICATION	1.732055929314145E-7	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999999998092959	WITHOUT_CLASSIFICATION	1.907041176415521E-10	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999994070513484	WITHOUT_CLASSIFICATION	5.929486515629422E-7	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999957356231374	WITHOUT_CLASSIFICATION	4.26437686260555E-6	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999994158884601	WITHOUT_CLASSIFICATION	5.841115400209773E-7	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999993818645	WITHOUT_CLASSIFICATION	6.181354358827679E-10	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999997711020234	WITHOUT_CLASSIFICATION	2.2889797667071238E-7	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999983328406407	WITHOUT_CLASSIFICATION	1.6671593592706103E-6	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999999204854042	WITHOUT_CLASSIFICATION	7.951459585646316E-8	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999999981126897	WITHOUT_CLASSIFICATION	1.8873103034461323E-9	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9999998503325552	WITHOUT_CLASSIFICATION	1.496674446614269E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999977465596	WITHOUT_CLASSIFICATION	2.253440329776391E-9	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999977465596	WITHOUT_CLASSIFICATION	2.253440329776391E-9	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999997192882706	WITHOUT_CLASSIFICATION	2.807117293677476E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999877323686	WITHOUT_CLASSIFICATION	1.2267631412331682E-8	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999877323686	WITHOUT_CLASSIFICATION	1.2267631412331682E-8	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999983394355529	WITHOUT_CLASSIFICATION	1.6605644469708218E-6	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999983394355529	WITHOUT_CLASSIFICATION	1.6605644469708218E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999037310545	WITHOUT_CLASSIFICATION	9.62689454105469E-8	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999999875373747	WITHOUT_CLASSIFICATION	1.246262539459144E-8	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999997406465057	WITHOUT_CLASSIFICATION	2.593534943812295E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999998162714477	WITHOUT_CLASSIFICATION	1.8372855220724025E-7	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999999162049341	WITHOUT_CLASSIFICATION	8.379506591769536E-8	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999979420996387	WITHOUT_CLASSIFICATION	2.0579003614301205E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999979420996387	WITHOUT_CLASSIFICATION	2.0579003614301205E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999993818645	WITHOUT_CLASSIFICATION	6.181354358827679E-10	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999993818645	WITHOUT_CLASSIFICATION	6.181354358827679E-10	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999993818645	WITHOUT_CLASSIFICATION	6.181354358827679E-10	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999997711020234	WITHOUT_CLASSIFICATION	2.2889797667071238E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999977465596	WITHOUT_CLASSIFICATION	2.253440329776391E-9	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999977465596	WITHOUT_CLASSIFICATION	2.253440329776391E-9	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999977465596	WITHOUT_CLASSIFICATION	2.253440329776391E-9	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999037310545	WITHOUT_CLASSIFICATION	9.62689454105469E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999037310545	WITHOUT_CLASSIFICATION	9.62689454105469E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999037310545	WITHOUT_CLASSIFICATION	9.62689454105469E-8	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999998162714477	WITHOUT_CLASSIFICATION	1.8372855220724025E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999998162714477	WITHOUT_CLASSIFICATION	1.8372855220724025E-7	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.999998789809664	WITHOUT_CLASSIFICATION	1.2101903359487945E-6	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999999305829308	WITHOUT_CLASSIFICATION	6.941706922986301E-8	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999904834761	WITHOUT_CLASSIFICATION	9.516523825065697E-9	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.7155721908575758	WITHOUT_CLASSIFICATION	0.2844278091424242	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999998135514678	WITHOUT_CLASSIFICATION	1.8644853219242897E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999997937544834	WITHOUT_CLASSIFICATION	2.0624551658549776E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999997937544834	WITHOUT_CLASSIFICATION	2.0624551658549776E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999996423857379	WITHOUT_CLASSIFICATION	3.5761426213945396E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999945069995839	WITHOUT_CLASSIFICATION	5.493000416051648E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999945069995839	WITHOUT_CLASSIFICATION	5.493000416051648E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999945069995839	WITHOUT_CLASSIFICATION	5.493000416051648E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999945069995839	WITHOUT_CLASSIFICATION	5.493000416051648E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999945069995839	WITHOUT_CLASSIFICATION	5.493000416051648E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998780381992	WITHOUT_CLASSIFICATION	1.2196180076673923E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998780381992	WITHOUT_CLASSIFICATION	1.2196180076673923E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998780381992	WITHOUT_CLASSIFICATION	1.2196180076673923E-7	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.999999997525285	WITHOUT_CLASSIFICATION	2.474715054781539E-9	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999999881743656	WITHOUT_CLASSIFICATION	1.1825634430859902E-8	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999997711020234	WITHOUT_CLASSIFICATION	2.2889797667071238E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999037310545	WITHOUT_CLASSIFICATION	9.62689454105469E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999037310545	WITHOUT_CLASSIFICATION	9.62689454105469E-8	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999945069995839	WITHOUT_CLASSIFICATION	5.493000416051648E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999945069995839	WITHOUT_CLASSIFICATION	5.493000416051648E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998780381992	WITHOUT_CLASSIFICATION	1.2196180076673923E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999996423857379	WITHOUT_CLASSIFICATION	3.5761426213945396E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999789301360407	WITHOUT_CLASSIFICATION	2.1069863959400072E-5	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999999060506877	WITHOUT_CLASSIFICATION	9.394931233581903E-8	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999907595920603	WITHOUT_CLASSIFICATION	9.240407939631266E-6	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999998910376291	WITHOUT_CLASSIFICATION	1.0896237089422813E-7	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999998461036491	WITHOUT_CLASSIFICATION	1.5389635093399003E-7	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999999835324845	WITHOUT_CLASSIFICATION	1.6467515514961456E-8	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999642268606308	WITHOUT_CLASSIFICATION	3.57731393692E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999984853867383	WITHOUT_CLASSIFICATION	1.514613261724259E-6	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999999342148743	WITHOUT_CLASSIFICATION	6.57851256237829E-8	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.999999998707225	WITHOUT_CLASSIFICATION	1.2927750538381594E-9	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999998512607198	WITHOUT_CLASSIFICATION	1.4873928020615522E-7	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999999837023985	WITHOUT_CLASSIFICATION	1.6297601501429578E-8	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999989023324319	WITHOUT_CLASSIFICATION	1.0976675680494934E-6	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999985053182591	WITHOUT_CLASSIFICATION	1.4946817409314185E-6	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999998892621356	WITHOUT_CLASSIFICATION	1.1073786439753549E-7	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999973947314068	WITHOUT_CLASSIFICATION	2.6052685931578664E-6	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999999769470286	WITHOUT_CLASSIFICATION	2.3052971473164587E-8	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9998363314603836	WITHOUT_CLASSIFICATION	1.6366853961644374E-4	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999793745534132	WITHOUT_CLASSIFICATION	2.062544658677007E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.999999877106998	WITHOUT_CLASSIFICATION	1.2289300194754375E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999004337880243	WITHOUT_CLASSIFICATION	9.956621197561145E-5	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999944952915	WITHOUT_CLASSIFICATION	5.504708372028933E-9	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.999999999718715	WITHOUT_CLASSIFICATION	2.812849612380184E-10	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999999067003222	WITHOUT_CLASSIFICATION	9.32996777531571E-8	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999862856115301	WITHOUT_CLASSIFICATION	1.3714388469923924E-5	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999985166663452	WITHOUT_CLASSIFICATION	1.4833336547093835E-6	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999979113008984	WITHOUT_CLASSIFICATION	2.0886991016443676E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999990998794899	WITHOUT_CLASSIFICATION	9.001205100682266E-7	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999996153565422	WITHOUT_CLASSIFICATION	3.846434577989572E-7	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999986183812037	WITHOUT_CLASSIFICATION	1.3816187961605905E-6	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.999999985790302	WITHOUT_CLASSIFICATION	1.4209697985447553E-8	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999999818962139	WITHOUT_CLASSIFICATION	1.810378612564314E-8	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999904237393771	WITHOUT_CLASSIFICATION	9.576260622970944E-6	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999983179454943	WITHOUT_CLASSIFICATION	1.68205450564904E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999789301360407	WITHOUT_CLASSIFICATION	2.1069863959400072E-5	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999999886983102	WITHOUT_CLASSIFICATION	1.1301689802155548E-8	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9999999914240068	WITHOUT_CLASSIFICATION	8.575993363409693E-9	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9998541565659228	WITHOUT_CLASSIFICATION	1.4584343407722658E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999996217538469	WITHOUT_CLASSIFICATION	3.7824615310947187E-7	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999996217538469	WITHOUT_CLASSIFICATION	3.7824615310947187E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.999999286088921	WITHOUT_CLASSIFICATION	7.139110790316163E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.999999286088921	WITHOUT_CLASSIFICATION	7.139110790316163E-7	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999972162975236	WITHOUT_CLASSIFICATION	2.7837024764596914E-6	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9981854773057117	WITHOUT_CLASSIFICATION	0.0018145226942881988	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999999238305416	WITHOUT_CLASSIFICATION	7.616945849639719E-8	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999999609937245	WITHOUT_CLASSIFICATION	3.900627551096643E-8	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999997509509407	WITHOUT_CLASSIFICATION	2.4904905929332904E-7	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999983327271934	WITHOUT_CLASSIFICATION	1.6672728066580823E-6	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999296852632463	WITHOUT_CLASSIFICATION	7.031473675358962E-5	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999990267682981	WITHOUT_CLASSIFICATION	9.73231701948681E-7	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999988967617597	WITHOUT_CLASSIFICATION	1.103238240272568E-6	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999970305854405	WITHOUT_CLASSIFICATION	2.9694145594090804E-6	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999980857855832	WITHOUT_CLASSIFICATION	1.9142144167441405E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999996190870352	WITHOUT_CLASSIFICATION	3.809129648124895E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999996190870352	WITHOUT_CLASSIFICATION	3.809129648124895E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999966333248017	WITHOUT_CLASSIFICATION	3.366675198343955E-6	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999987493860311	WITHOUT_CLASSIFICATION	1.2506139689477907E-6	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999997252002512	WITHOUT_CLASSIFICATION	2.747997488276666E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999997252002512	WITHOUT_CLASSIFICATION	2.747997488276666E-7	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999971947659214	WITHOUT_CLASSIFICATION	2.805234078542217E-6	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999747396192252	WITHOUT_CLASSIFICATION	2.5260380774784444E-5	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.999988519722316	WITHOUT_CLASSIFICATION	1.148027768417521E-5	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9999984990909009	WITHOUT_CLASSIFICATION	1.50090909909514E-6	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999999777111582	WITHOUT_CLASSIFICATION	2.2288841774708775E-8	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999997945320079	WITHOUT_CLASSIFICATION	2.0546799203969341E-7	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999993306122839	WITHOUT_CLASSIFICATION	6.693877161579365E-7	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999999500798195	WITHOUT_CLASSIFICATION	4.992018049940155E-8	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.999847738844598	WITHOUT_CLASSIFICATION	1.5226115540207378E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999999565862082	WITHOUT_CLASSIFICATION	4.341379189039532E-8	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999998331649342	WITHOUT_CLASSIFICATION	1.6683506571443287E-7	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999979747732624	WITHOUT_CLASSIFICATION	2.025226737540249E-6	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999999579628871	WITHOUT_CLASSIFICATION	4.203711293528085E-8	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999987251123603	WITHOUT_CLASSIFICATION	1.274887639708876E-6	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999996673772641	WITHOUT_CLASSIFICATION	3.326227359713417E-7	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9999731234756298	WITHOUT_CLASSIFICATION	2.6876524370154314E-5	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999971608022669	WITHOUT_CLASSIFICATION	2.8391977330050877E-6	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999997997191311	WITHOUT_CLASSIFICATION	2.0028086885119452E-7	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999991062485205	WITHOUT_CLASSIFICATION	8.937514795275665E-7	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999999013960718	WITHOUT_CLASSIFICATION	9.86039281666227E-8	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9283526177485338	WITHOUT_CLASSIFICATION	0.0716473822514662	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999966169869083	WITHOUT_CLASSIFICATION	3.3830130916895676E-6	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999955538344064	WITHOUT_CLASSIFICATION	4.446165593571022E-6	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999997239655675	WITHOUT_CLASSIFICATION	2.7603443251405726E-7	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999967737806015	WITHOUT_CLASSIFICATION	3.2262193985199228E-6	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999838961093419	WITHOUT_CLASSIFICATION	1.610389065811006E-5	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999943535391231	WITHOUT_CLASSIFICATION	5.646460876931703E-6	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999995811316555	WITHOUT_CLASSIFICATION	4.188683443492202E-7	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999912409705907	WITHOUT_CLASSIFICATION	8.759029409339495E-6	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999998783554507	WITHOUT_CLASSIFICATION	1.216445493457492E-7	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999976469024311	WITHOUT_CLASSIFICATION	2.3530975688727345E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999999448165097	WITHOUT_CLASSIFICATION	5.518349039593381E-8	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999995613446812	WITHOUT_CLASSIFICATION	4.386553187875439E-7	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999958565487228	WITHOUT_CLASSIFICATION	4.143451277174059E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999958565487228	WITHOUT_CLASSIFICATION	4.143451277174059E-6	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999993555455343	WITHOUT_CLASSIFICATION	6.444544656660306E-7	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999998328711434	WITHOUT_CLASSIFICATION	1.671288565896948E-7	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999999461408243	WITHOUT_CLASSIFICATION	5.38591756276407E-8	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999850801911667	WITHOUT_CLASSIFICATION	1.491980883329746E-5	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9998957585306298	WITHOUT_CLASSIFICATION	1.042414693701951E-4	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999999907436551	WITHOUT_CLASSIFICATION	9.256345004730133E-9	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9998948306705135	WITHOUT_CLASSIFICATION	1.0516932948650818E-4	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9987501157630344	WITHOUT_CLASSIFICATION	0.0012498842369655634	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9999637613777788	WITHOUT_CLASSIFICATION	3.6238622221227587E-5	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999638024321846	WITHOUT_CLASSIFICATION	3.6197567815236174E-5	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999991521727868	WITHOUT_CLASSIFICATION	8.478272132131999E-7	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9987136039362484	WITHOUT_CLASSIFICATION	0.0012863960637515051	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999999401226408	WITHOUT_CLASSIFICATION	5.987735916520691E-8	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9998217496880263	WITHOUT_CLASSIFICATION	1.7825031197361396E-4	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999999901384669	WITHOUT_CLASSIFICATION	9.86153302937056E-9	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.999999691842326	WITHOUT_CLASSIFICATION	3.0815767413613816E-7	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999996625986973	WITHOUT_CLASSIFICATION	3.3740130268219817E-7	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999989992215111	WITHOUT_CLASSIFICATION	1.0007784888349537E-6	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999998267300049	WITHOUT_CLASSIFICATION	1.7326999517456234E-7	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.999985918777646	WITHOUT_CLASSIFICATION	1.4081222353999489E-5	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999997637822028	WITHOUT_CLASSIFICATION	2.362177973064804E-7	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999999827112542	WITHOUT_CLASSIFICATION	1.72887457916923E-8	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999981907699957	WITHOUT_CLASSIFICATION	1.8092300042552218E-6	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999895518130746	WITHOUT_CLASSIFICATION	1.0448186925553146E-5	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999967164852114	WITHOUT_CLASSIFICATION	3.2835147886035832E-6	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999990751159452	WITHOUT_CLASSIFICATION	9.248840548404487E-7	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999999925684482	WITHOUT_CLASSIFICATION	7.431551866387481E-9	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999998203983125	WITHOUT_CLASSIFICATION	1.7960168764303133E-7	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9985353717008969	WITHOUT_CLASSIFICATION	0.0014646282991031463	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9982194738168426	WITHOUT_CLASSIFICATION	0.0017805261831572747	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999982644022629	WITHOUT_CLASSIFICATION	1.7355977371572276E-6	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.999999999570127	WITHOUT_CLASSIFICATION	4.2987309812672014E-10	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999985370305055	WITHOUT_CLASSIFICATION	1.4629694945441563E-6	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999995510801546	WITHOUT_CLASSIFICATION	4.489198454061745E-7	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999966133412218	WITHOUT_CLASSIFICATION	3.3866587781533116E-6	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999997302931141	WITHOUT_CLASSIFICATION	2.6970688600629645E-7	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999958253711785	WITHOUT_CLASSIFICATION	4.174628821543199E-6	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999985558868995	WITHOUT_CLASSIFICATION	1.4441131005210868E-6	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999992985711599	WITHOUT_CLASSIFICATION	7.014288401770569E-7	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999999469823985	WITHOUT_CLASSIFICATION	5.301760145978896E-8	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999994934289377	WITHOUT_CLASSIFICATION	5.065710622647042E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999990525218363	WITHOUT_CLASSIFICATION	9.474781636584276E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999990525218363	WITHOUT_CLASSIFICATION	9.474781636584276E-7	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999976959228383	WITHOUT_CLASSIFICATION	2.304077161681521E-6	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999999242272795	WITHOUT_CLASSIFICATION	7.577272049301433E-8	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999988037441856	WITHOUT_CLASSIFICATION	1.1962558144300781E-6	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999996740229895	WITHOUT_CLASSIFICATION	3.259770104468036E-7	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999999403825908	WITHOUT_CLASSIFICATION	5.961740926645396E-8	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999999234683362	WITHOUT_CLASSIFICATION	7.653166374013523E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999998287102237	WITHOUT_CLASSIFICATION	1.712897762955928E-6	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9903007508274083	WITHOUT_CLASSIFICATION	0.009699249172591656	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999990071249373	WITHOUT_CLASSIFICATION	9.928750627635219E-7	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999967785284	WITHOUT_CLASSIFICATION	3.2214717124741824E-9	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999995085878686	WITHOUT_CLASSIFICATION	4.914121314449684E-7	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999983761782499	WITHOUT_CLASSIFICATION	1.6238217500757588E-6	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9996314004238774	WITHOUT_CLASSIFICATION	3.6859957612266146E-4	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999999332935156	WITHOUT_CLASSIFICATION	6.670648441542181E-8	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999999011093982	WITHOUT_CLASSIFICATION	9.889060179268452E-8	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9997952574702553	WITHOUT_CLASSIFICATION	2.047425297447111E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9998834356284017	WITHOUT_CLASSIFICATION	1.1656437159835768E-4	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999989993236212	WITHOUT_CLASSIFICATION	1.0006763787958968E-6	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999999999324689	WITHOUT_CLASSIFICATION	6.75310198556364E-11	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.5005220347751353	DEFECT	0.49947796522486465	WITHOUT_CLASSIFICATION
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999999245249259	WITHOUT_CLASSIFICATION	7.547507412576147E-8	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999836384800213	WITHOUT_CLASSIFICATION	1.6361519978671874E-5	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999999998621371	WITHOUT_CLASSIFICATION	1.378629859213476E-10	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999984267963292	WITHOUT_CLASSIFICATION	1.5732036708141363E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999840073335964	WITHOUT_CLASSIFICATION	1.599266640368143E-5	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999995810187268	WITHOUT_CLASSIFICATION	4.189812732378751E-7	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999999225869735	WITHOUT_CLASSIFICATION	7.741302663747143E-8	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999996922586624	WITHOUT_CLASSIFICATION	3.077413375711248E-7	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999259437130674	WITHOUT_CLASSIFICATION	7.405628693250111E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999991554456104	WITHOUT_CLASSIFICATION	8.445543896377492E-7	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9998756824755013	WITHOUT_CLASSIFICATION	1.2431752449865266E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999975130041007	WITHOUT_CLASSIFICATION	2.4869958993370845E-6	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999991554456104	WITHOUT_CLASSIFICATION	8.445543896377492E-7	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999962583676856	WITHOUT_CLASSIFICATION	3.7416323143506564E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9981630855444199	WITHOUT_CLASSIFICATION	0.001836914455580066	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9951357260436471	WITHOUT_CLASSIFICATION	0.004864273956352988	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.5547871637926919	DEFECT	0.44521283620730806	WITHOUT_CLASSIFICATION
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999998835002937	WITHOUT_CLASSIFICATION	1.1649970626979197E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999735654559	WITHOUT_CLASSIFICATION	2.6434544080030646E-8	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999998782724578	WITHOUT_CLASSIFICATION	1.2172754213617822E-7	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999985947681013	WITHOUT_CLASSIFICATION	1.4052318986941365E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9997910877785257	WITHOUT_CLASSIFICATION	2.0891222147442193E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999999013960718	WITHOUT_CLASSIFICATION	9.86039281666227E-8	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999904834761	WITHOUT_CLASSIFICATION	9.516523825065697E-9	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999833559316827	WITHOUT_CLASSIFICATION	1.664406831724299E-5	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.999999923802274	WITHOUT_CLASSIFICATION	7.61977260310668E-8	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999999615617189	WITHOUT_CLASSIFICATION	3.843828124261719E-8	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9999770962233927	WITHOUT_CLASSIFICATION	2.290377660734488E-5	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999998826774796	WITHOUT_CLASSIFICATION	1.1732252033743981E-7	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9999956125647612	WITHOUT_CLASSIFICATION	4.387435238822488E-6	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999999883435778	WITHOUT_CLASSIFICATION	1.1656422290994548E-8	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9960686805422004	WITHOUT_CLASSIFICATION	0.003931319457799596	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999960642990676	WITHOUT_CLASSIFICATION	3.935700932408462E-6	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999990299097927	WITHOUT_CLASSIFICATION	9.70090207233119E-7	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999994046122581	WITHOUT_CLASSIFICATION	5.953877419762525E-7	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999999727945521	WITHOUT_CLASSIFICATION	2.7205447900668633E-8	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999956844825119	WITHOUT_CLASSIFICATION	4.315517488155691E-6	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999996228568903	WITHOUT_CLASSIFICATION	3.771431097690665E-7	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999878760325427	WITHOUT_CLASSIFICATION	1.21239674572269E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999909861211356	WITHOUT_CLASSIFICATION	9.013878864475195E-6	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.999990393728927	WITHOUT_CLASSIFICATION	9.606271073020436E-6	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999964467048	WITHOUT_CLASSIFICATION	3.5532952601368733E-9	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999990638327442	WITHOUT_CLASSIFICATION	9.361672556931968E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999990638327442	WITHOUT_CLASSIFICATION	9.361672556931968E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999998432621504	WITHOUT_CLASSIFICATION	1.5673784957520921E-7	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999999855861382	WITHOUT_CLASSIFICATION	1.44138617023365E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.999999924926461	WITHOUT_CLASSIFICATION	7.50735391001771E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9966892510598739	WITHOUT_CLASSIFICATION	0.0033107489401260136	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9966892510598739	WITHOUT_CLASSIFICATION	0.0033107489401260136	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9966892510598739	WITHOUT_CLASSIFICATION	0.0033107489401260136	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9966892510598739	WITHOUT_CLASSIFICATION	0.0033107489401260136	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999987323525936	WITHOUT_CLASSIFICATION	1.2676474063090024E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999637562401	WITHOUT_CLASSIFICATION	3.624375984688165E-8	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999995876884111	WITHOUT_CLASSIFICATION	4.1231158884403213E-7	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9978097466072344	WITHOUT_CLASSIFICATION	0.0021902533927656053	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999153619671	WITHOUT_CLASSIFICATION	8.463803296095569E-8	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9996459403464195	WITHOUT_CLASSIFICATION	3.5405965358051625E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999985807126802	WITHOUT_CLASSIFICATION	1.419287319778889E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999985807126802	WITHOUT_CLASSIFICATION	1.419287319778889E-6	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9998512197404777	WITHOUT_CLASSIFICATION	1.4878025952223082E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9996572862747112	WITHOUT_CLASSIFICATION	3.4271372528893505E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999975488585435	WITHOUT_CLASSIFICATION	2.4511414563644297E-6	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9980942423437907	WITHOUT_CLASSIFICATION	0.0019057576562093207	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999989593517716	WITHOUT_CLASSIFICATION	1.0406482283646666E-6	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999998826701902	WITHOUT_CLASSIFICATION	1.1732980978514238E-7	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999998591997271	WITHOUT_CLASSIFICATION	1.4080027297726664E-7	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999984453071611	WITHOUT_CLASSIFICATION	1.5546928388959228E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999843960978986	WITHOUT_CLASSIFICATION	1.5603902101378524E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999843960978986	WITHOUT_CLASSIFICATION	1.5603902101378524E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999975130041007	WITHOUT_CLASSIFICATION	2.4869958993370845E-6	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999907131437253	WITHOUT_CLASSIFICATION	9.286856274705206E-6	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999853244299599	WITHOUT_CLASSIFICATION	1.4675570040079907E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999983199404772	WITHOUT_CLASSIFICATION	1.6800595229186637E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.999999996848354	WITHOUT_CLASSIFICATION	3.1516459098723807E-9	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9995434144065627	WITHOUT_CLASSIFICATION	4.5658559343735754E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999999460694969	WITHOUT_CLASSIFICATION	5.393050309390843E-8	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999987699645015	WITHOUT_CLASSIFICATION	1.230035498429371E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999989634293152	WITHOUT_CLASSIFICATION	1.0365706848284134E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999989634293152	WITHOUT_CLASSIFICATION	1.0365706848284134E-6	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999991194480422	WITHOUT_CLASSIFICATION	8.805519578464207E-7	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999999215329982	WITHOUT_CLASSIFICATION	7.846700174026676E-8	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999956565230583	WITHOUT_CLASSIFICATION	4.343476941667252E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999984159425293	WITHOUT_CLASSIFICATION	1.5840574706469427E-6	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.999999663936067	WITHOUT_CLASSIFICATION	3.360639329703804E-7	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9996856231198559	WITHOUT_CLASSIFICATION	3.14376880144067E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999955511872408	WITHOUT_CLASSIFICATION	4.448812759263993E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999827299217	WITHOUT_CLASSIFICATION	1.727007824358394E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999827299217	WITHOUT_CLASSIFICATION	1.727007824358394E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999827299217	WITHOUT_CLASSIFICATION	1.727007824358394E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999827299217	WITHOUT_CLASSIFICATION	1.727007824358394E-8	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999972708040634	WITHOUT_CLASSIFICATION	2.7291959366508653E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9999850364215425	WITHOUT_CLASSIFICATION	1.496357845762661E-5	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999252953509487	WITHOUT_CLASSIFICATION	7.470464905127978E-5	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999997179997282	WITHOUT_CLASSIFICATION	2.82000271745003E-7	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999943579907916	WITHOUT_CLASSIFICATION	5.642009208389596E-6	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9995640025225416	WITHOUT_CLASSIFICATION	4.359974774583073E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999469452415	WITHOUT_CLASSIFICATION	5.3054758407107854E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999908608943	WITHOUT_CLASSIFICATION	9.13910569714141E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999908608943	WITHOUT_CLASSIFICATION	9.13910569714141E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999908608943	WITHOUT_CLASSIFICATION	9.13910569714141E-8	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999913947663789	WITHOUT_CLASSIFICATION	8.605233621116438E-6	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9994656479820617	WITHOUT_CLASSIFICATION	5.343520179382906E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999543146724	WITHOUT_CLASSIFICATION	4.5685327776704315E-8	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999543146724	WITHOUT_CLASSIFICATION	4.5685327776704315E-8	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999951721306797	WITHOUT_CLASSIFICATION	4.827869320291952E-6	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999999990339272	WITHOUT_CLASSIFICATION	9.66072820120527E-10	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999999247478182	WITHOUT_CLASSIFICATION	7.52521817651727E-8	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.999694309099891	WITHOUT_CLASSIFICATION	3.056909001091039E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999999803213264	WITHOUT_CLASSIFICATION	1.967867355706518E-8	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999999097549728	WITHOUT_CLASSIFICATION	9.02450272696635E-8	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999985310782279	WITHOUT_CLASSIFICATION	1.4689217720949901E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999985310782279	WITHOUT_CLASSIFICATION	1.4689217720949901E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999993061405057	WITHOUT_CLASSIFICATION	6.938594941727928E-7	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9979345091089931	WITHOUT_CLASSIFICATION	0.002065490891006943	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999999305511469	WITHOUT_CLASSIFICATION	6.944885309411085E-8	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9999993307184661	WITHOUT_CLASSIFICATION	6.69281533898869E-7	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999983508256077	WITHOUT_CLASSIFICATION	1.6491743922297466E-6	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999999029579617	WITHOUT_CLASSIFICATION	9.704203837893771E-8	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999996336081601	WITHOUT_CLASSIFICATION	3.6639183994706763E-7	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999665623906998	WITHOUT_CLASSIFICATION	3.343760930013886E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9996175848716863	WITHOUT_CLASSIFICATION	3.8241512831366627E-4	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999999635604195	WITHOUT_CLASSIFICATION	3.6439580400878604E-8	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999998728303009	WITHOUT_CLASSIFICATION	1.2716969904370993E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999942464776038	WITHOUT_CLASSIFICATION	5.753522396298723E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999388127458749	WITHOUT_CLASSIFICATION	6.118725412508634E-5	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999971104076744	WITHOUT_CLASSIFICATION	2.8895923257070326E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999956035107	WITHOUT_CLASSIFICATION	4.396489272269454E-9	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999999927490572	WITHOUT_CLASSIFICATION	7.250942880553188E-9	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999847500952533	WITHOUT_CLASSIFICATION	1.5249904746601766E-5	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999999937432849	WITHOUT_CLASSIFICATION	6.256715149639422E-9	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999995991472005	WITHOUT_CLASSIFICATION	4.0085279962454956E-7	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999960322484416	WITHOUT_CLASSIFICATION	3.967751558437461E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.999999794314522	WITHOUT_CLASSIFICATION	2.0568547796187004E-7	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9995711423396847	WITHOUT_CLASSIFICATION	4.2885766031529554E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999682072193	WITHOUT_CLASSIFICATION	3.179278079383895E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999682072193	WITHOUT_CLASSIFICATION	3.179278079383895E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999682072193	WITHOUT_CLASSIFICATION	3.179278079383895E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999682072193	WITHOUT_CLASSIFICATION	3.179278079383895E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999682072193	WITHOUT_CLASSIFICATION	3.179278079383895E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999682072193	WITHOUT_CLASSIFICATION	3.179278079383895E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999682072193	WITHOUT_CLASSIFICATION	3.179278079383895E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999682072193	WITHOUT_CLASSIFICATION	3.179278079383895E-8	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9983687742013598	WITHOUT_CLASSIFICATION	0.0016312257986401942	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999016904980331	WITHOUT_CLASSIFICATION	9.830950196687915E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999835303551171	WITHOUT_CLASSIFICATION	1.6469644882904836E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9794897370807006	WITHOUT_CLASSIFICATION	0.020510262919299305	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999998287102237	WITHOUT_CLASSIFICATION	1.712897762955928E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999998287102237	WITHOUT_CLASSIFICATION	1.712897762955928E-6	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.999999977812238	WITHOUT_CLASSIFICATION	2.2187761939116298E-8	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999998195493922	WITHOUT_CLASSIFICATION	1.8045060775478374E-7	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999999870700926	WITHOUT_CLASSIFICATION	1.292990726930528E-8	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.999977626974008	WITHOUT_CLASSIFICATION	2.2373025991956052E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999975984933955	WITHOUT_CLASSIFICATION	2.4015066045638605E-6	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999991217396811	WITHOUT_CLASSIFICATION	8.782603188697834E-7	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999991293049589	WITHOUT_CLASSIFICATION	8.706950410284151E-7	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9992079571886631	WITHOUT_CLASSIFICATION	7.92042811336869E-4	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999997185262663	WITHOUT_CLASSIFICATION	2.814737336724281E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999933333511246	WITHOUT_CLASSIFICATION	6.666648875407487E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999933333511246	WITHOUT_CLASSIFICATION	6.666648875407487E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999933333511246	WITHOUT_CLASSIFICATION	6.666648875407487E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999999606345552	WITHOUT_CLASSIFICATION	3.936544473732828E-8	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999956368620411	WITHOUT_CLASSIFICATION	4.36313795882952E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999961413547395	WITHOUT_CLASSIFICATION	3.858645260611616E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999560564178	WITHOUT_CLASSIFICATION	4.394358218538552E-8	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999815794236914	WITHOUT_CLASSIFICATION	1.8420576308577086E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999682261372	WITHOUT_CLASSIFICATION	3.177386272463262E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999885173423	WITHOUT_CLASSIFICATION	1.1482657635312269E-8	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999961057915401	WITHOUT_CLASSIFICATION	3.894208459963492E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999993288368189	WITHOUT_CLASSIFICATION	6.711631810913402E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999993288368189	WITHOUT_CLASSIFICATION	6.711631810913402E-7	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999965096586767	WITHOUT_CLASSIFICATION	3.490341323274624E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999546190765	WITHOUT_CLASSIFICATION	4.538092349206728E-8	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999967996895464	WITHOUT_CLASSIFICATION	3.2003104535883866E-6	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9991557648639711	WITHOUT_CLASSIFICATION	8.442351360290251E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999995365072687	WITHOUT_CLASSIFICATION	4.6349273139744214E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999995365072687	WITHOUT_CLASSIFICATION	4.6349273139744214E-7	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999994581168488	WITHOUT_CLASSIFICATION	5.41883151314021E-7	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9999997046776835	WITHOUT_CLASSIFICATION	2.9532231650548233E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999742566049858	WITHOUT_CLASSIFICATION	2.5743395014193346E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999713339288364	WITHOUT_CLASSIFICATION	2.866607116352749E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999713339288364	WITHOUT_CLASSIFICATION	2.866607116352749E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999713339288364	WITHOUT_CLASSIFICATION	2.866607116352749E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999159366335	WITHOUT_CLASSIFICATION	8.406336645463593E-8	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999995148780172	WITHOUT_CLASSIFICATION	4.851219828185032E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999995148780172	WITHOUT_CLASSIFICATION	4.851219828185032E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999997615848816	WITHOUT_CLASSIFICATION	2.3841511835712308E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999997615848816	WITHOUT_CLASSIFICATION	2.3841511835712308E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999994381043039	WITHOUT_CLASSIFICATION	5.618956961459228E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.99999931935787	WITHOUT_CLASSIFICATION	6.806421299071487E-7	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999963857835263	WITHOUT_CLASSIFICATION	3.614216473545002E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999919061648652	WITHOUT_CLASSIFICATION	8.093835134746155E-6	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999841226345462	WITHOUT_CLASSIFICATION	1.58773654538968E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999983595058585	WITHOUT_CLASSIFICATION	1.6404941415933138E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999989525943	WITHOUT_CLASSIFICATION	1.047405621501483E-9	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999979420996387	WITHOUT_CLASSIFICATION	2.0579003614301205E-6	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999999856596902	WITHOUT_CLASSIFICATION	1.4340309812237524E-8	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999895061412002	WITHOUT_CLASSIFICATION	1.0493858799694852E-5	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9798699549967375	DEFECT	0.020130045003262525	WITHOUT_CLASSIFICATION
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999996796306353	WITHOUT_CLASSIFICATION	3.203693647900366E-7	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999996280671408	WITHOUT_CLASSIFICATION	3.719328592034556E-7	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999991626018124	WITHOUT_CLASSIFICATION	8.373981875746708E-7	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.999999344629965	WITHOUT_CLASSIFICATION	6.553700349630512E-7	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999998645574981	WITHOUT_CLASSIFICATION	1.3544250185621192E-7	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999999122949991	WITHOUT_CLASSIFICATION	8.770500093714332E-8	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999995075059478	WITHOUT_CLASSIFICATION	4.924940521930849E-7	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999914091547129	WITHOUT_CLASSIFICATION	8.590845287104635E-6	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999999770935698	WITHOUT_CLASSIFICATION	2.2906430174650297E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999833559316827	WITHOUT_CLASSIFICATION	1.664406831724299E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.999914951402083	WITHOUT_CLASSIFICATION	8.504859791704308E-5	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999997693771259	WITHOUT_CLASSIFICATION	2.3062287421787636E-7	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999994933485288	WITHOUT_CLASSIFICATION	5.066514712204776E-7	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999999704733239	WITHOUT_CLASSIFICATION	2.9526676064084094E-8	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999977795794321	WITHOUT_CLASSIFICATION	2.220420567861771E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999918220548767	WITHOUT_CLASSIFICATION	8.177945123282213E-6	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999999922543192	WITHOUT_CLASSIFICATION	7.745680765409404E-9	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999994594273849	WITHOUT_CLASSIFICATION	5.405726150377338E-7	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.999832965110011	WITHOUT_CLASSIFICATION	1.670348899891097E-4	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999999134931316	WITHOUT_CLASSIFICATION	8.650686848974507E-8	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999994213229402	WITHOUT_CLASSIFICATION	5.786770598200392E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999990871835929	WITHOUT_CLASSIFICATION	9.128164070316836E-7	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999998115435615	WITHOUT_CLASSIFICATION	1.8845643845457614E-7	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999999774988767	WITHOUT_CLASSIFICATION	2.2501123306549774E-8	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9999946786429801	WITHOUT_CLASSIFICATION	5.32135701988071E-6	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999999894780591	WITHOUT_CLASSIFICATION	1.0521940928573926E-8	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999999657540901	WITHOUT_CLASSIFICATION	3.424590986437843E-8	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999992626281188	WITHOUT_CLASSIFICATION	7.37371881288864E-7	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9991681858356367	WITHOUT_CLASSIFICATION	8.318141643633135E-4	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999413234396041	WITHOUT_CLASSIFICATION	5.867656039598188E-5	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999969362171663	WITHOUT_CLASSIFICATION	3.0637828336869218E-6	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999999984448227	WITHOUT_CLASSIFICATION	1.5551772140179279E-9	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999984583738833	WITHOUT_CLASSIFICATION	1.541626116559879E-6	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.996136092674366	WITHOUT_CLASSIFICATION	0.0038639073256340117	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999894997588	WITHOUT_CLASSIFICATION	1.0500241191087538E-8	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.999999984617164	WITHOUT_CLASSIFICATION	1.538283593414851E-8	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.999999869179005	WITHOUT_CLASSIFICATION	1.308209950712436E-7	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999928633741093	WITHOUT_CLASSIFICATION	7.136625890725198E-6	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999888845247217	WITHOUT_CLASSIFICATION	1.111547527840295E-5	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999989641778728	WITHOUT_CLASSIFICATION	1.035822127216565E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999990890403142	WITHOUT_CLASSIFICATION	9.109596856705006E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999990890403142	WITHOUT_CLASSIFICATION	9.109596856705006E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.99999992043786	WITHOUT_CLASSIFICATION	7.956213993297801E-8	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.99999992043786	WITHOUT_CLASSIFICATION	7.956213993297801E-8	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999709652027222	WITHOUT_CLASSIFICATION	2.9034797277878564E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999709652027222	WITHOUT_CLASSIFICATION	2.9034797277878564E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999986619473004	WITHOUT_CLASSIFICATION	1.3380526996553894E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999986619473004	WITHOUT_CLASSIFICATION	1.3380526996553894E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999949191328	WITHOUT_CLASSIFICATION	5.080867201145858E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999949191328	WITHOUT_CLASSIFICATION	5.080867201145858E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999949191328	WITHOUT_CLASSIFICATION	5.080867201145858E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999949191328	WITHOUT_CLASSIFICATION	5.080867201145858E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999949191328	WITHOUT_CLASSIFICATION	5.080867201145858E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999949191328	WITHOUT_CLASSIFICATION	5.080867201145858E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999949191328	WITHOUT_CLASSIFICATION	5.080867201145858E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999949191328	WITHOUT_CLASSIFICATION	5.080867201145858E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999949191328	WITHOUT_CLASSIFICATION	5.080867201145858E-8	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999989707912482	WITHOUT_CLASSIFICATION	1.029208751804484E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999989707912482	WITHOUT_CLASSIFICATION	1.029208751804484E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999989707912482	WITHOUT_CLASSIFICATION	1.029208751804484E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999997218664775	WITHOUT_CLASSIFICATION	2.7813352244442043E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999964921060558	WITHOUT_CLASSIFICATION	3.5078939441386372E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999964921060558	WITHOUT_CLASSIFICATION	3.5078939441386372E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999964921060558	WITHOUT_CLASSIFICATION	3.5078939441386372E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999998449028987	WITHOUT_CLASSIFICATION	1.5509710125359343E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999998449028987	WITHOUT_CLASSIFICATION	1.5509710125359343E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999998449028987	WITHOUT_CLASSIFICATION	1.5509710125359343E-7	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999724688498058	WITHOUT_CLASSIFICATION	2.7531150194194417E-5	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999998041329189	WITHOUT_CLASSIFICATION	1.958670811358043E-7	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999407875659424	WITHOUT_CLASSIFICATION	5.921243405761758E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999379205265326	WITHOUT_CLASSIFICATION	6.207947346734569E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999379205265326	WITHOUT_CLASSIFICATION	6.207947346734569E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999379205265326	WITHOUT_CLASSIFICATION	6.207947346734569E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999976680545466	WITHOUT_CLASSIFICATION	2.331945453472915E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999870695500717	WITHOUT_CLASSIFICATION	1.2930449928228075E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999870695500717	WITHOUT_CLASSIFICATION	1.2930449928228075E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.999819042492111	WITHOUT_CLASSIFICATION	1.8095750788901183E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.999999989599906	WITHOUT_CLASSIFICATION	1.0400093902038104E-8	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.999999989599906	WITHOUT_CLASSIFICATION	1.0400093902038104E-8	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.8551843825832196	WITHOUT_CLASSIFICATION	0.14481561741678045	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999996320826773	WITHOUT_CLASSIFICATION	3.67917322683316E-7	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999996032934803	WITHOUT_CLASSIFICATION	3.967065197663417E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999997679652642	WITHOUT_CLASSIFICATION	2.3203473584524085E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999997679652642	WITHOUT_CLASSIFICATION	2.3203473584524085E-7	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.99999889515164	WITHOUT_CLASSIFICATION	1.1048483599847664E-6	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999992703137416	WITHOUT_CLASSIFICATION	7.296862583707663E-7	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999996700122902	WITHOUT_CLASSIFICATION	3.2998770980277363E-7	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9999982633997406	WITHOUT_CLASSIFICATION	1.7366002592484435E-6	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.999553973688668	WITHOUT_CLASSIFICATION	4.4602631133195086E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999997679652642	WITHOUT_CLASSIFICATION	2.3203473584524085E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999997679652642	WITHOUT_CLASSIFICATION	2.3203473584524085E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999997679652642	WITHOUT_CLASSIFICATION	2.3203473584524085E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999997679652642	WITHOUT_CLASSIFICATION	2.3203473584524085E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999997679652642	WITHOUT_CLASSIFICATION	2.3203473584524085E-7	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999999852510725	WITHOUT_CLASSIFICATION	1.4748927455835046E-8	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999997730705047	WITHOUT_CLASSIFICATION	2.26929495405461E-7	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999999555493249	WITHOUT_CLASSIFICATION	4.445067504969088E-8	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999984446033752	WITHOUT_CLASSIFICATION	1.555396624883201E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.999991446978419	WITHOUT_CLASSIFICATION	8.553021580951565E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999992930761503	WITHOUT_CLASSIFICATION	7.069238496878899E-7	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9575173779010948	WITHOUT_CLASSIFICATION	0.04248262209890505	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9988446580081148	WITHOUT_CLASSIFICATION	0.0011553419918852155	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.999999945171698	WITHOUT_CLASSIFICATION	5.482830203775166E-8	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.999999906833662	WITHOUT_CLASSIFICATION	9.316633798750228E-8	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999973764227955	WITHOUT_CLASSIFICATION	2.6235772045206594E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999836384800213	WITHOUT_CLASSIFICATION	1.6361519978671874E-5	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999994305027172	WITHOUT_CLASSIFICATION	5.694972827602572E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999823071529	WITHOUT_CLASSIFICATION	1.7692847163747922E-8	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999489082576835	WITHOUT_CLASSIFICATION	5.1091742316664805E-5	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9999201488591813	WITHOUT_CLASSIFICATION	7.985114081857562E-5	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999999860444972	WITHOUT_CLASSIFICATION	1.3955502716303983E-8	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999999999084851	WITHOUT_CLASSIFICATION	9.151486014179527E-11	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999959169895831	WITHOUT_CLASSIFICATION	4.083010416876479E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999996389651952	WITHOUT_CLASSIFICATION	3.6103480483172336E-7	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9999992694583406	WITHOUT_CLASSIFICATION	7.305416593832814E-7	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999966168946915	WITHOUT_CLASSIFICATION	3.3831053084866387E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999967785284	WITHOUT_CLASSIFICATION	3.2214717124741824E-9	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999883878062	WITHOUT_CLASSIFICATION	1.1612193679728553E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999883878062	WITHOUT_CLASSIFICATION	1.1612193679728553E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999883878062	WITHOUT_CLASSIFICATION	1.1612193679728553E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999883878062	WITHOUT_CLASSIFICATION	1.1612193679728553E-8	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999936301942195	WITHOUT_CLASSIFICATION	6.369805780462164E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9999468288188097	WITHOUT_CLASSIFICATION	5.3171181190296283E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999998489423917	WITHOUT_CLASSIFICATION	1.5105760828624807E-7	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999998489423917	WITHOUT_CLASSIFICATION	1.5105760828624807E-7	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999994037099156	WITHOUT_CLASSIFICATION	5.962900843257911E-7	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999950118368464	WITHOUT_CLASSIFICATION	4.988163153717415E-6	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999998700188204	WITHOUT_CLASSIFICATION	1.2998117961542282E-7	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999973679631	WITHOUT_CLASSIFICATION	2.632037007451016E-9	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999032017779834	WITHOUT_CLASSIFICATION	9.679822201656373E-5	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999995612921182	WITHOUT_CLASSIFICATION	4.3870788178729476E-7	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999935213214903	WITHOUT_CLASSIFICATION	6.478678509593398E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999981825735637	WITHOUT_CLASSIFICATION	1.8174264363447961E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999981825735637	WITHOUT_CLASSIFICATION	1.8174264363447961E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999981825735637	WITHOUT_CLASSIFICATION	1.8174264363447961E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999981825735637	WITHOUT_CLASSIFICATION	1.8174264363447961E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9981714549370571	WITHOUT_CLASSIFICATION	0.001828545062942922	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999993978811859	WITHOUT_CLASSIFICATION	6.021188141945655E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999993978811859	WITHOUT_CLASSIFICATION	6.021188141945655E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999993978811859	WITHOUT_CLASSIFICATION	6.021188141945655E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.999999947255659	WITHOUT_CLASSIFICATION	5.27443409199635E-8	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999990643095059	WITHOUT_CLASSIFICATION	9.356904941098435E-7	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999997563524229	WITHOUT_CLASSIFICATION	2.4364757709673173E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9966892510598739	WITHOUT_CLASSIFICATION	0.0033107489401260136	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9966892510598739	WITHOUT_CLASSIFICATION	0.0033107489401260136	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999989366197807	WITHOUT_CLASSIFICATION	1.0633802193855327E-6	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9997957976497477	WITHOUT_CLASSIFICATION	2.0420235025231753E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.999908651958814	WITHOUT_CLASSIFICATION	9.134804118602149E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.999908651958814	WITHOUT_CLASSIFICATION	9.134804118602149E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998638874944862	WITHOUT_CLASSIFICATION	1.361125055138064E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998638874944862	WITHOUT_CLASSIFICATION	1.361125055138064E-4	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.999999919153468	WITHOUT_CLASSIFICATION	8.08465319801216E-8	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999999710322747	WITHOUT_CLASSIFICATION	2.8967725327086835E-8	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999999956157388	WITHOUT_CLASSIFICATION	4.384261162571266E-9	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9936140153926053	WITHOUT_CLASSIFICATION	0.0063859846073947586	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999961055473037	WITHOUT_CLASSIFICATION	3.8944526963698104E-6	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999999007801331	WITHOUT_CLASSIFICATION	9.921986689690945E-8	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999850342597	WITHOUT_CLASSIFICATION	1.496574025986203E-8	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999771579950795	WITHOUT_CLASSIFICATION	2.2842004920518344E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999999671535408	WITHOUT_CLASSIFICATION	3.284645919906602E-8	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999994727256	WITHOUT_CLASSIFICATION	5.27274475132567E-10	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999994727256	WITHOUT_CLASSIFICATION	5.27274475132567E-10	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999998486215311	WITHOUT_CLASSIFICATION	1.5137846878185492E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999998486215311	WITHOUT_CLASSIFICATION	1.5137846878185492E-7	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.999984485782238	WITHOUT_CLASSIFICATION	1.551421776207604E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999995738930316	WITHOUT_CLASSIFICATION	4.2610696833456585E-7	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999535809730729	WITHOUT_CLASSIFICATION	4.641902692718273E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999977795490519	WITHOUT_CLASSIFICATION	2.2204509481209776E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999977795490519	WITHOUT_CLASSIFICATION	2.2204509481209776E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999977795490519	WITHOUT_CLASSIFICATION	2.2204509481209776E-6	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999914544300842	WITHOUT_CLASSIFICATION	8.545569915795245E-6	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.999989596371994	WITHOUT_CLASSIFICATION	1.040362800590939E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999900456580588	WITHOUT_CLASSIFICATION	9.954341941234106E-6	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999908377622508	WITHOUT_CLASSIFICATION	9.1622377492255E-6	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999881403036467	WITHOUT_CLASSIFICATION	1.1859696353366164E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999861550521998	WITHOUT_CLASSIFICATION	1.3844947800168795E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.999992040142375	WITHOUT_CLASSIFICATION	7.959857625000433E-6	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999991155930417	WITHOUT_CLASSIFICATION	8.844069583052774E-7	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.999996304136981	WITHOUT_CLASSIFICATION	3.6958630189370712E-6	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999984051327289	WITHOUT_CLASSIFICATION	1.5948672712055952E-6	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.999999892467735	WITHOUT_CLASSIFICATION	1.075322649151488E-7	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999998594226118	WITHOUT_CLASSIFICATION	1.4057738815047676E-7	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999962476239779	WITHOUT_CLASSIFICATION	3.7523760220814667E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9966892510598739	WITHOUT_CLASSIFICATION	0.0033107489401260136	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999535215027678	WITHOUT_CLASSIFICATION	4.647849723211143E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999857989295853	WITHOUT_CLASSIFICATION	1.4201070414598138E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999990638327442	WITHOUT_CLASSIFICATION	9.361672556931968E-7	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998686909829889	WITHOUT_CLASSIFICATION	1.3130901701111382E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998686909829889	WITHOUT_CLASSIFICATION	1.3130901701111382E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998686909829889	WITHOUT_CLASSIFICATION	1.3130901701111382E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998686909829889	WITHOUT_CLASSIFICATION	1.3130901701111382E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998686909829889	WITHOUT_CLASSIFICATION	1.3130901701111382E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999698808392642	WITHOUT_CLASSIFICATION	3.0119160735878086E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998686909829889	WITHOUT_CLASSIFICATION	1.3130901701111382E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998686909829889	WITHOUT_CLASSIFICATION	1.3130901701111382E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998686909829889	WITHOUT_CLASSIFICATION	1.3130901701111382E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999992839597341	WITHOUT_CLASSIFICATION	7.160402658297211E-7	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999907393786097	WITHOUT_CLASSIFICATION	9.260621390389166E-6	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.5639782538039747	DEFECT	0.4360217461960252	WITHOUT_CLASSIFICATION
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9998478040519457	WITHOUT_CLASSIFICATION	1.5219594805423987E-4	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999894556394884	WITHOUT_CLASSIFICATION	1.05443605115721E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999997780011246	WITHOUT_CLASSIFICATION	2.2199887537715767E-7	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999999991979208	WITHOUT_CLASSIFICATION	8.020790863512401E-10	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999707926860291	WITHOUT_CLASSIFICATION	2.920731397095523E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999884626698132	WITHOUT_CLASSIFICATION	1.153733018680872E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999884626698132	WITHOUT_CLASSIFICATION	1.153733018680872E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999596558709121	WITHOUT_CLASSIFICATION	4.0344129087890854E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.999983866655154	WITHOUT_CLASSIFICATION	1.6133344845934366E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999890250830075	WITHOUT_CLASSIFICATION	1.0974916992553439E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999874585528492	WITHOUT_CLASSIFICATION	1.2541447150796967E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999888018153726	WITHOUT_CLASSIFICATION	1.1198184627449715E-5	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.99998709749306	WITHOUT_CLASSIFICATION	1.2902506939893497E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999916430014616	WITHOUT_CLASSIFICATION	8.356998538321687E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.999989770046394	WITHOUT_CLASSIFICATION	1.0229953606043983E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.999989822244297	WITHOUT_CLASSIFICATION	1.017775570293994E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999917899885676	WITHOUT_CLASSIFICATION	8.210011432436408E-6	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999926876040182	WITHOUT_CLASSIFICATION	7.312395981834451E-6	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999914457616884	WITHOUT_CLASSIFICATION	8.554238311527052E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999925485971795	WITHOUT_CLASSIFICATION	7.45140282054485E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999885981980186	WITHOUT_CLASSIFICATION	1.1401801981429677E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999913404194332	WITHOUT_CLASSIFICATION	8.659580566926214E-6	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999929728688239	WITHOUT_CLASSIFICATION	7.027131176031969E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999912966783002	WITHOUT_CLASSIFICATION	8.703321699760775E-6	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999948038193948	WITHOUT_CLASSIFICATION	5.196180605291163E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999905970639514	WITHOUT_CLASSIFICATION	9.402936048599907E-6	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999772948461755	WITHOUT_CLASSIFICATION	2.2705153824467446E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999872649062517	WITHOUT_CLASSIFICATION	1.273509374837325E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999777979005852	WITHOUT_CLASSIFICATION	2.2202099414769313E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999925306720038	WITHOUT_CLASSIFICATION	7.469327996326599E-6	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999967777869437	WITHOUT_CLASSIFICATION	3.222213056262777E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999892720521907	WITHOUT_CLASSIFICATION	1.0727947809208096E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999927038116253	WITHOUT_CLASSIFICATION	7.296188374676156E-6	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999916652533457	WITHOUT_CLASSIFICATION	8.334746654342087E-6	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999898536556656	WITHOUT_CLASSIFICATION	1.0146344334344162E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999896070648834	WITHOUT_CLASSIFICATION	1.039293511653698E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999932812446491	WITHOUT_CLASSIFICATION	6.718755350956128E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999944986344073	WITHOUT_CLASSIFICATION	5.501365592669363E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999953714323367	WITHOUT_CLASSIFICATION	4.6285676632945245E-6	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999907261066662	WITHOUT_CLASSIFICATION	9.2738933338514E-6	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999931332228937	WITHOUT_CLASSIFICATION	6.86677710623655E-6	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999898734770793	WITHOUT_CLASSIFICATION	1.0126522920685065E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999938235878025	WITHOUT_CLASSIFICATION	6.176412197571448E-6	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999919317664909	WITHOUT_CLASSIFICATION	8.068233509138281E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999878780506705	WITHOUT_CLASSIFICATION	1.2121949329415576E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999907377865337	WITHOUT_CLASSIFICATION	9.26221346638191E-6	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999854284799243	WITHOUT_CLASSIFICATION	1.4571520075709149E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999925322449323	WITHOUT_CLASSIFICATION	7.467755067752046E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999895878522803	WITHOUT_CLASSIFICATION	1.0412147719694991E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999820075898379	WITHOUT_CLASSIFICATION	1.7992410161982913E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999916451696921	WITHOUT_CLASSIFICATION	8.354830307815797E-6	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999930448970414	WITHOUT_CLASSIFICATION	6.955102958501634E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999920204305978	WITHOUT_CLASSIFICATION	7.979569402253738E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999833460631495	WITHOUT_CLASSIFICATION	1.665393685050148E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999897833504755	WITHOUT_CLASSIFICATION	1.021664952451289E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999854434281235	WITHOUT_CLASSIFICATION	1.4556571876525535E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999906542193673	WITHOUT_CLASSIFICATION	9.345780632708195E-6	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999850609266213	WITHOUT_CLASSIFICATION	1.4939073378625676E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999782678167649	WITHOUT_CLASSIFICATION	2.1732183235065502E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999854141984339	WITHOUT_CLASSIFICATION	1.4585801566020392E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999838858833179	WITHOUT_CLASSIFICATION	1.6114116682074273E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999838858833179	WITHOUT_CLASSIFICATION	1.6114116682074273E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999868830157774	WITHOUT_CLASSIFICATION	1.3116984222718809E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999869353261722	WITHOUT_CLASSIFICATION	1.306467382767824E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999866090620573	WITHOUT_CLASSIFICATION	1.3390937942656708E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999807450713729	WITHOUT_CLASSIFICATION	1.925492862716661E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999937342404185	WITHOUT_CLASSIFICATION	6.265759581417601E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.999974661634656	WITHOUT_CLASSIFICATION	2.53383653440099E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999869379917553	WITHOUT_CLASSIFICATION	1.3062008244703891E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.999972158496259	WITHOUT_CLASSIFICATION	2.7841503740975816E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999764586712641	WITHOUT_CLASSIFICATION	2.3541328735934538E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999878264282591	WITHOUT_CLASSIFICATION	1.2173571740922108E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999993411734053	WITHOUT_CLASSIFICATION	6.588265948215437E-7	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999993411734053	WITHOUT_CLASSIFICATION	6.588265948215437E-7	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999981177324926	WITHOUT_CLASSIFICATION	1.8822675073806227E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9998032140443943	WITHOUT_CLASSIFICATION	1.967859556057482E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9997775220461738	WITHOUT_CLASSIFICATION	2.2247795382621309E-4	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999999997997719	WITHOUT_CLASSIFICATION	2.0022816419834916E-10	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999946922108	WITHOUT_CLASSIFICATION	5.307789198150464E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999946922108	WITHOUT_CLASSIFICATION	5.307789198150464E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999946922108	WITHOUT_CLASSIFICATION	5.307789198150464E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999946922108	WITHOUT_CLASSIFICATION	5.307789198150464E-9	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9569030580436902	DEFECT	0.04309694195630962	WITHOUT_CLASSIFICATION
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9803815861412927	WITHOUT_CLASSIFICATION	0.019618413858707297	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999947399805617	WITHOUT_CLASSIFICATION	5.260019438340293E-6	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999926471718206	WITHOUT_CLASSIFICATION	7.352828179499673E-6	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999928187898591	WITHOUT_CLASSIFICATION	7.181210140851022E-6	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.999991896329956	WITHOUT_CLASSIFICATION	8.103670044027956E-6	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999916150295808	WITHOUT_CLASSIFICATION	8.384970419215799E-6	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999832904654979	WITHOUT_CLASSIFICATION	1.6709534502146897E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.999974871941247	WITHOUT_CLASSIFICATION	2.512805875299668E-5	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999907163721815	WITHOUT_CLASSIFICATION	9.283627818513581E-6	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999884562541492	WITHOUT_CLASSIFICATION	1.154374585072962E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999817027418922	WITHOUT_CLASSIFICATION	1.8297258107683126E-5	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999857278433993	WITHOUT_CLASSIFICATION	1.4272156600633567E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999880960254692	WITHOUT_CLASSIFICATION	1.1903974530707979E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999855079049144	WITHOUT_CLASSIFICATION	1.4492095085703413E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999853537994484	WITHOUT_CLASSIFICATION	1.4646200551633341E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999919051174618	WITHOUT_CLASSIFICATION	8.094882538094277E-6	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999940818980322	WITHOUT_CLASSIFICATION	5.918101967786002E-6	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999909756267807	WITHOUT_CLASSIFICATION	9.024373219338908E-6	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999895768799306	WITHOUT_CLASSIFICATION	1.0423120069350094E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999870860478527	WITHOUT_CLASSIFICATION	1.2913952147332525E-5	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999805749346896	WITHOUT_CLASSIFICATION	1.9425065310323967E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999753819719627	WITHOUT_CLASSIFICATION	2.4618028037257063E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.999986894510941	WITHOUT_CLASSIFICATION	1.310548905892869E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999853276680332	WITHOUT_CLASSIFICATION	1.4672331966930183E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999916787587833	WITHOUT_CLASSIFICATION	8.321241216723486E-6	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999876734218041	WITHOUT_CLASSIFICATION	1.2326578195979666E-5	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999945533741352	WITHOUT_CLASSIFICATION	5.446625864831283E-6	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999953441439176	WITHOUT_CLASSIFICATION	4.655856082462956E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999939256329713	WITHOUT_CLASSIFICATION	6.0743670288082796E-6	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.999994718417525	WITHOUT_CLASSIFICATION	5.281582475099308E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999916160233865	WITHOUT_CLASSIFICATION	8.383976613546637E-6	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999912950270494	WITHOUT_CLASSIFICATION	8.704972950487929E-6	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999866211436049	WITHOUT_CLASSIFICATION	1.3378856395058794E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999894834712224	WITHOUT_CLASSIFICATION	1.051652877756883E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999935998011956	WITHOUT_CLASSIFICATION	6.400198804485899E-6	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.999992249121391	WITHOUT_CLASSIFICATION	7.7508786090011E-6	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.999994036106767	WITHOUT_CLASSIFICATION	5.9638932330762526E-6	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999864124852271	WITHOUT_CLASSIFICATION	1.3587514772819081E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999874278166652	WITHOUT_CLASSIFICATION	1.2572183334842797E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999860443163983	WITHOUT_CLASSIFICATION	1.3955683601797428E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999898477646899	WITHOUT_CLASSIFICATION	1.015223531004741E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999892341090053	WITHOUT_CLASSIFICATION	1.076589099467922E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.999990153782416	WITHOUT_CLASSIFICATION	9.846217584000712E-6	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999912512640373	WITHOUT_CLASSIFICATION	8.748735962744018E-6	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999933802552003	WITHOUT_CLASSIFICATION	6.619744799711335E-6	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999903448069816	WITHOUT_CLASSIFICATION	9.65519301851544E-6	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999906629084653	WITHOUT_CLASSIFICATION	9.337091534726268E-6	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999795127145712	WITHOUT_CLASSIFICATION	2.0487285428768154E-5	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999705109353038	WITHOUT_CLASSIFICATION	2.9489064696346437E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.999985676748474	WITHOUT_CLASSIFICATION	1.4323251525869614E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999823199012736	WITHOUT_CLASSIFICATION	1.7680098726297184E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999919226104778	WITHOUT_CLASSIFICATION	8.077389522210511E-6	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999934052616277	WITHOUT_CLASSIFICATION	6.594738372180963E-6	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999896670443381	WITHOUT_CLASSIFICATION	1.0332955661962067E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999777860565163	WITHOUT_CLASSIFICATION	2.221394348368431E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999866768312766	WITHOUT_CLASSIFICATION	1.3323168723433219E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999866810920345	WITHOUT_CLASSIFICATION	1.3318907965481013E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999841724196794	WITHOUT_CLASSIFICATION	1.5827580320624653E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999999807378576	WITHOUT_CLASSIFICATION	1.926214246061357E-8	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.999999834846665	WITHOUT_CLASSIFICATION	1.6515333508301055E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999789450245616	WITHOUT_CLASSIFICATION	2.1054975438340007E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999789450245616	WITHOUT_CLASSIFICATION	2.1054975438340007E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999789450245616	WITHOUT_CLASSIFICATION	2.1054975438340007E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999789450245616	WITHOUT_CLASSIFICATION	2.1054975438340007E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999789450245616	WITHOUT_CLASSIFICATION	2.1054975438340007E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999789450245616	WITHOUT_CLASSIFICATION	2.1054975438340007E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999789450245616	WITHOUT_CLASSIFICATION	2.1054975438340007E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999049698042666	WITHOUT_CLASSIFICATION	9.503019573345794E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999049698042666	WITHOUT_CLASSIFICATION	9.503019573345794E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999049698042666	WITHOUT_CLASSIFICATION	9.503019573345794E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999049698042666	WITHOUT_CLASSIFICATION	9.503019573345794E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9998807409100235	WITHOUT_CLASSIFICATION	1.1925908997640079E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9998807409100235	WITHOUT_CLASSIFICATION	1.1925908997640079E-4	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9999996413364897	WITHOUT_CLASSIFICATION	3.586635103610126E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999281272215	WITHOUT_CLASSIFICATION	7.187277846108151E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999281272215	WITHOUT_CLASSIFICATION	7.187277846108151E-8	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999998870921166	WITHOUT_CLASSIFICATION	1.1290788327045465E-7	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.999999833312939	WITHOUT_CLASSIFICATION	1.6668706102680346E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999986386892676	WITHOUT_CLASSIFICATION	1.3613107322960494E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999986386892676	WITHOUT_CLASSIFICATION	1.3613107322960494E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999986386892676	WITHOUT_CLASSIFICATION	1.3613107322960494E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999986386892676	WITHOUT_CLASSIFICATION	1.3613107322960494E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999986386892676	WITHOUT_CLASSIFICATION	1.3613107322960494E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999986386892676	WITHOUT_CLASSIFICATION	1.3613107322960494E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999986386892676	WITHOUT_CLASSIFICATION	1.3613107322960494E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996084217856	WITHOUT_CLASSIFICATION	3.9157821445135045E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996257439302	WITHOUT_CLASSIFICATION	3.742560697969368E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999967297338165	WITHOUT_CLASSIFICATION	3.2702661834243573E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999967297338165	WITHOUT_CLASSIFICATION	3.2702661834243573E-6	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999999173653918	WITHOUT_CLASSIFICATION	8.2634608214333E-8	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999985879786124	WITHOUT_CLASSIFICATION	1.412021387530769E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999985879786124	WITHOUT_CLASSIFICATION	1.412021387530769E-6	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999999989428731	WITHOUT_CLASSIFICATION	1.0571269038944405E-9	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9774731288883389	DEFECT	0.02252687111166119	WITHOUT_CLASSIFICATION
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.999997223460141	WITHOUT_CLASSIFICATION	2.7765398590683038E-6	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9996872012762398	WITHOUT_CLASSIFICATION	3.127987237602948E-4	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999997630180352	WITHOUT_CLASSIFICATION	2.369819648386978E-7	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999991717617471	WITHOUT_CLASSIFICATION	8.282382527665806E-7	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999993694830149	WITHOUT_CLASSIFICATION	6.305169850746559E-7	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999989443303392	WITHOUT_CLASSIFICATION	1.0556696607669108E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999933411301	WITHOUT_CLASSIFICATION	6.658869855225041E-9	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9999657592893751	WITHOUT_CLASSIFICATION	3.424071062478536E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999872008441651	WITHOUT_CLASSIFICATION	1.2799155834774076E-5	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999998583063947	WITHOUT_CLASSIFICATION	1.4169360539271075E-7	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999789256926	WITHOUT_CLASSIFICATION	2.1074307411046556E-8	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999895378386974	WITHOUT_CLASSIFICATION	1.0462161302701982E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999993877243749	WITHOUT_CLASSIFICATION	6.122756249910807E-7	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999992975121313	WITHOUT_CLASSIFICATION	7.024878686170982E-7	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9999999989984529	WITHOUT_CLASSIFICATION	1.0015470849395222E-9	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999745501994791	WITHOUT_CLASSIFICATION	2.5449800520835855E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999979307713476	WITHOUT_CLASSIFICATION	2.0692286524410973E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999979307713476	WITHOUT_CLASSIFICATION	2.0692286524410973E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999995441406428	WITHOUT_CLASSIFICATION	4.558593570580653E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999977465596	WITHOUT_CLASSIFICATION	2.253440329776391E-9	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999953080800958	WITHOUT_CLASSIFICATION	4.691919904126865E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999945069995839	WITHOUT_CLASSIFICATION	5.493000416051648E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999642268606308	WITHOUT_CLASSIFICATION	3.57731393692E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999642268606308	WITHOUT_CLASSIFICATION	3.57731393692E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999642268606308	WITHOUT_CLASSIFICATION	3.57731393692E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999998512607198	WITHOUT_CLASSIFICATION	1.4873928020615522E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999004337880243	WITHOUT_CLASSIFICATION	9.956621197561145E-5	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999997339932258	WITHOUT_CLASSIFICATION	2.660067741745545E-7	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999870571212872	WITHOUT_CLASSIFICATION	1.2942878712639496E-5	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999957732287331	WITHOUT_CLASSIFICATION	4.226771266959359E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999999883629082	WITHOUT_CLASSIFICATION	1.163709183473819E-8	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9999194917980805	WITHOUT_CLASSIFICATION	8.050820191949386E-5	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999970305854405	WITHOUT_CLASSIFICATION	2.9694145594090804E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999988967617597	WITHOUT_CLASSIFICATION	1.103238240272568E-6	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999998707023707	WITHOUT_CLASSIFICATION	1.2929762923184097E-7	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999996813585891	WITHOUT_CLASSIFICATION	3.1864141087570753E-7	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999995880267228	WITHOUT_CLASSIFICATION	4.1197327718529E-7	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9283526177485338	WITHOUT_CLASSIFICATION	0.0716473822514662	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9999410143196953	WITHOUT_CLASSIFICATION	5.89856803046639E-5	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999999998831529	WITHOUT_CLASSIFICATION	1.1684696929261586E-10	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999997403713073	WITHOUT_CLASSIFICATION	2.596286925908039E-7	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999986908736552	WITHOUT_CLASSIFICATION	1.3091263448203306E-6	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999982644022629	WITHOUT_CLASSIFICATION	1.7355977371572276E-6	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999977533283634	WITHOUT_CLASSIFICATION	2.246671636634533E-6	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9639477965977011	DEFECT	0.03605220340229884	WITHOUT_CLASSIFICATION
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9898864063626913	DEFECT	0.010113593637308722	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9945429149284927	WITHOUT_CLASSIFICATION	0.005457085071507326	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9433714212494376	DEFECT	0.0566285787505623	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9999893171187235	DEFECT	1.0682881276541804E-5	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.805517892827443	WITHOUT_CLASSIFICATION	0.19448210717255696	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9009141305028644	DEFECT	0.09908586949713562	WITHOUT_CLASSIFICATION
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9089613613111941	WITHOUT_CLASSIFICATION	0.0910386386888059	DEFECT
// FIXME: not correct exception	DEFECT	0.9999530198476404	DEFECT	4.698015235964377E-5	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9956771355862921	WITHOUT_CLASSIFICATION	0.004322864413707934	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9999024174860017	WITHOUT_CLASSIFICATION	9.75825139982296E-5	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.5994245652259702	WITHOUT_CLASSIFICATION	0.40057543477402996	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9990844895311006	WITHOUT_CLASSIFICATION	9.155104688995195E-4	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.7881000215212605	DEFECT	0.2118999784787396	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.8093660392689748	WITHOUT_CLASSIFICATION	0.1906339607310253	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9417936888756345	WITHOUT_CLASSIFICATION	0.05820631112436544	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9417936888756345	WITHOUT_CLASSIFICATION	0.05820631112436544	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9611845491360897	WITHOUT_CLASSIFICATION	0.03881545086391021	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.7115395870559971	WITHOUT_CLASSIFICATION	0.28846041294400304	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9565751750151726	DEFECT	0.04342482498482739	WITHOUT_CLASSIFICATION
// ENEBO: Very wrong	DEFECT	0.9999135456715367	WITHOUT_CLASSIFICATION	8.645432846330001E-5	DEFECT
// ENEBO: Very wrong	DEFECT	0.9999135456715367	WITHOUT_CLASSIFICATION	8.645432846330001E-5	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.9955755576956177	DEFECT	0.004424442304382363	WITHOUT_CLASSIFICATION
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9996466567784962	DEFECT	3.5334322150383046E-4	WITHOUT_CLASSIFICATION
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.8281363490998972	DEFECT	0.17186365090010278	WITHOUT_CLASSIFICATION
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.833104283693468	WITHOUT_CLASSIFICATION	0.16689571630653194	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.5449485859155935	WITHOUT_CLASSIFICATION	0.4550514140844065	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.5659102411728254	DEFECT	0.4340897588271746	WITHOUT_CLASSIFICATION
// TODO: proper sign	DEFECT	0.9989609154233391	WITHOUT_CLASSIFICATION	0.001039084576660927	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.9997853134467386	DEFECT	2.1468655326131717E-4	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.9902792617510496	DEFECT	0.009720738248950403	WITHOUT_CLASSIFICATION
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.9999132305525456	DEFECT	8.676944745455061E-5	WITHOUT_CLASSIFICATION
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.9954120713936676	DEFECT	0.004587928606332424	WITHOUT_CLASSIFICATION
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9994607462134403	DEFECT	5.392537865596603E-4	WITHOUT_CLASSIFICATION
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.8569234542078943	WITHOUT_CLASSIFICATION	0.14307654579210569	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.9540686433409141	WITHOUT_CLASSIFICATION	0.04593135665908585	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.977165329643447	DEFECT	0.022834670356553028	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.7141523812946584	DEFECT	0.2858476187053416	WITHOUT_CLASSIFICATION
// SSS FIXME: Incorect!	DEFECT	0.9517007467184558	DEFECT	0.04829925328154412	WITHOUT_CLASSIFICATION
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9999411385906947	DEFECT	5.886140930536577E-5	WITHOUT_CLASSIFICATION
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.8399836932234294	WITHOUT_CLASSIFICATION	0.16001630677657064	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9999969851596423	WITHOUT_CLASSIFICATION	3.014840357750377E-6	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.8956609702407876	DEFECT	0.1043390297592124	WITHOUT_CLASSIFICATION
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.8956609702407876	DEFECT	0.1043390297592124	WITHOUT_CLASSIFICATION
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.8349940711054856	DEFECT	0.1650059288945144	WITHOUT_CLASSIFICATION
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.975338295803823	WITHOUT_CLASSIFICATION	0.02466170419617696	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9999955455839397	DEFECT	4.454416060360806E-6	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.8726947878023376	WITHOUT_CLASSIFICATION	0.12730521219766236	DEFECT
// FIXME: This is wrong	DEFECT	0.9976560080617588	DEFECT	0.002343991938241242	WITHOUT_CLASSIFICATION
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9921826321126384	DEFECT	0.007817367887361756	WITHOUT_CLASSIFICATION
// XXX Wrong, but will have to do for now	DEFECT	0.9999115643160489	WITHOUT_CLASSIFICATION	8.843568395110342E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.987599538036934	DEFECT	0.012400461963065951	WITHOUT_CLASSIFICATION
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.8653376118859495	WITHOUT_CLASSIFICATION	0.13466238811405057	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9999119259384739	WITHOUT_CLASSIFICATION	8.807406152608112E-5	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9999873068763101	DEFECT	1.269312368995177E-5	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9339329877397391	WITHOUT_CLASSIFICATION	0.06606701226026089	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9339329877397391	WITHOUT_CLASSIFICATION	0.06606701226026089	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9999717242144981	DEFECT	2.82757855019366E-5	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9868250728635195	DEFECT	0.013174927136480415	WITHOUT_CLASSIFICATION
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9999011454890273	DEFECT	9.885451097268877E-5	WITHOUT_CLASSIFICATION
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9999489867091483	WITHOUT_CLASSIFICATION	5.1013290851649976E-5	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9997664524823044	DEFECT	2.3354751769559973E-4	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9986589597170054	DEFECT	0.0013410402829945388	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9992748178345888	WITHOUT_CLASSIFICATION	7.251821654111739E-4	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9999254525505227	DEFECT	7.454744947728118E-5	WITHOUT_CLASSIFICATION
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.8349940711054856	DEFECT	0.1650059288945144	WITHOUT_CLASSIFICATION
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9998871590592178	WITHOUT_CLASSIFICATION	1.1284094078217474E-4	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9969555453278486	DEFECT	0.003044454672151399	WITHOUT_CLASSIFICATION
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9950551529883119	WITHOUT_CLASSIFICATION	0.004944847011688045	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.833104283693468	WITHOUT_CLASSIFICATION	0.16689571630653194	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9151690550644463	WITHOUT_CLASSIFICATION	0.08483094493555361	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.9995889614521404	DEFECT	4.1103854785960725E-4	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.7141523812946584	DEFECT	0.2858476187053416	WITHOUT_CLASSIFICATION
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9392824657194859	WITHOUT_CLASSIFICATION	0.06071753428051397	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9999873068763101	DEFECT	1.269312368995177E-5	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.9832122474855014	DEFECT	0.016787752514498606	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// TODO: don't require pop	DEFECT	0.7339902187621649	WITHOUT_CLASSIFICATION	0.26600978123783514	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.987599538036934	DEFECT	0.012400461963065951	WITHOUT_CLASSIFICATION
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.6111935956698274	DEFECT	0.38880640433017255	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9339329877397391	WITHOUT_CLASSIFICATION	0.06606701226026089	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9339329877397391	WITHOUT_CLASSIFICATION	0.06606701226026089	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9868250728635195	DEFECT	0.013174927136480415	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9868250728635195	DEFECT	0.013174927136480415	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9868250728635195	DEFECT	0.013174927136480415	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9868250728635195	DEFECT	0.013174927136480415	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9868250728635195	DEFECT	0.013174927136480415	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9868250728635195	DEFECT	0.013174927136480415	WITHOUT_CLASSIFICATION
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9970525031382893	WITHOUT_CLASSIFICATION	0.0029474968617106655	DEFECT
