// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.999999995168717	WITHOUT_CLASSIFICATION	4.83128298828351E-9	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999954570046189	WITHOUT_CLASSIFICATION	4.542995381062683E-6	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999271887067924	WITHOUT_CLASSIFICATION	7.281129320765683E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999271887067924	WITHOUT_CLASSIFICATION	7.281129320765683E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999907651798999	WITHOUT_CLASSIFICATION	9.234820100133223E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999907651798999	WITHOUT_CLASSIFICATION	9.234820100133223E-6	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999710418885432	WITHOUT_CLASSIFICATION	2.89581114568176E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999998882197045	WITHOUT_CLASSIFICATION	1.117802955454858E-7	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999950409746718	WITHOUT_CLASSIFICATION	4.959025328131643E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999940036773863	WITHOUT_CLASSIFICATION	5.996322613647277E-6	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998222749497796	WITHOUT_CLASSIFICATION	1.7772505022051267E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998222749497796	WITHOUT_CLASSIFICATION	1.7772505022051267E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999972657665773	WITHOUT_CLASSIFICATION	2.7342334228076323E-6	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997825749989986	WITHOUT_CLASSIFICATION	2.1742500100140313E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997825749989986	WITHOUT_CLASSIFICATION	2.1742500100140313E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9999759624384635	WITHOUT_CLASSIFICATION	2.403756153641152E-5	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999798420380599	WITHOUT_CLASSIFICATION	2.0157961940054244E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999583610007892	WITHOUT_CLASSIFICATION	4.163899921080878E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999583610007892	WITHOUT_CLASSIFICATION	4.163899921080878E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999583610007892	WITHOUT_CLASSIFICATION	4.163899921080878E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999583610007892	WITHOUT_CLASSIFICATION	4.163899921080878E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999583610007892	WITHOUT_CLASSIFICATION	4.163899921080878E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999583610007892	WITHOUT_CLASSIFICATION	4.163899921080878E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999583610007892	WITHOUT_CLASSIFICATION	4.163899921080878E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999970358917092	WITHOUT_CLASSIFICATION	2.964108290768393E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999970358917092	WITHOUT_CLASSIFICATION	2.964108290768393E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999970358917092	WITHOUT_CLASSIFICATION	2.964108290768393E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999970358917092	WITHOUT_CLASSIFICATION	2.964108290768393E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999970358917092	WITHOUT_CLASSIFICATION	2.964108290768393E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999970358917092	WITHOUT_CLASSIFICATION	2.964108290768393E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999970358917092	WITHOUT_CLASSIFICATION	2.964108290768393E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999815758577989	WITHOUT_CLASSIFICATION	1.842414220111602E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999815758577989	WITHOUT_CLASSIFICATION	1.842414220111602E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999815758577989	WITHOUT_CLASSIFICATION	1.842414220111602E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999815758577989	WITHOUT_CLASSIFICATION	1.842414220111602E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999815758577989	WITHOUT_CLASSIFICATION	1.842414220111602E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999815758577989	WITHOUT_CLASSIFICATION	1.842414220111602E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999453518256928	WITHOUT_CLASSIFICATION	5.464817430723379E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999453518256928	WITHOUT_CLASSIFICATION	5.464817430723379E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999453518256928	WITHOUT_CLASSIFICATION	5.464817430723379E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999453518256928	WITHOUT_CLASSIFICATION	5.464817430723379E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999453518256928	WITHOUT_CLASSIFICATION	5.464817430723379E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999453518256928	WITHOUT_CLASSIFICATION	5.464817430723379E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999331427614114	WITHOUT_CLASSIFICATION	6.685723858861829E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999331427614114	WITHOUT_CLASSIFICATION	6.685723858861829E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999331427614114	WITHOUT_CLASSIFICATION	6.685723858861829E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999331427614114	WITHOUT_CLASSIFICATION	6.685723858861829E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999331427614114	WITHOUT_CLASSIFICATION	6.685723858861829E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999331427614114	WITHOUT_CLASSIFICATION	6.685723858861829E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999331427614114	WITHOUT_CLASSIFICATION	6.685723858861829E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999940480081768	WITHOUT_CLASSIFICATION	5.951991823192418E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999940480081768	WITHOUT_CLASSIFICATION	5.951991823192418E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999940480081768	WITHOUT_CLASSIFICATION	5.951991823192418E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999940480081768	WITHOUT_CLASSIFICATION	5.951991823192418E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999965074209748	WITHOUT_CLASSIFICATION	3.4925790253084977E-6	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999965074209748	WITHOUT_CLASSIFICATION	3.4925790253084977E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130273367	WITHOUT_CLASSIFICATION	5.869726632033907E-7	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999990845907606	WITHOUT_CLASSIFICATION	9.154092393083972E-7	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999987623257817	WITHOUT_CLASSIFICATION	1.237674218337025E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999998934777962	WITHOUT_CLASSIFICATION	1.0652220381883007E-7	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999996789353612	WITHOUT_CLASSIFICATION	3.210646387264098E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992491202558	WITHOUT_CLASSIFICATION	7.508797442450926E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992491202558	WITHOUT_CLASSIFICATION	7.508797442450926E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992491202558	WITHOUT_CLASSIFICATION	7.508797442450926E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992491202558	WITHOUT_CLASSIFICATION	7.508797442450926E-7	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.999977431017906	WITHOUT_CLASSIFICATION	2.2568982094041844E-5	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999906865250044	WITHOUT_CLASSIFICATION	9.313474995542333E-6	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999994278992739	WITHOUT_CLASSIFICATION	5.721007261862012E-7	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999991500953872	WITHOUT_CLASSIFICATION	8.499046128387395E-7	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999994571724725	WITHOUT_CLASSIFICATION	5.428275275465892E-7	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999962806667153	WITHOUT_CLASSIFICATION	3.719333284787694E-6	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999971901841154	WITHOUT_CLASSIFICATION	2.8098158845505356E-6	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999997283879186	WITHOUT_CLASSIFICATION	2.7161208137067074E-7	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999999263364644	WITHOUT_CLASSIFICATION	7.366353563327778E-8	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9999646263775885	WITHOUT_CLASSIFICATION	3.5373622411475185E-5	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999964204686009	WITHOUT_CLASSIFICATION	3.5795313990009816E-6	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999994760554279	WITHOUT_CLASSIFICATION	5.239445719955757E-7	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999916596442118	WITHOUT_CLASSIFICATION	8.340355788337902E-6	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999999879230006	WITHOUT_CLASSIFICATION	1.207699944468379E-8	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999993353442299	WITHOUT_CLASSIFICATION	6.646557700813104E-7	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999991088824879	WITHOUT_CLASSIFICATION	8.911175120617018E-7	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999990051502637	WITHOUT_CLASSIFICATION	9.948497362530703E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992491202558	WITHOUT_CLASSIFICATION	7.508797442450926E-7	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999982852389525	WITHOUT_CLASSIFICATION	1.7147610473870677E-6	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999998375293669	WITHOUT_CLASSIFICATION	1.6247063317356752E-7	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999988844124702	WITHOUT_CLASSIFICATION	1.1155875298582923E-6	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999989139596359	WITHOUT_CLASSIFICATION	1.0860403640395132E-6	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9998169778812137	WITHOUT_CLASSIFICATION	1.830221187863359E-4	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999970479639825	WITHOUT_CLASSIFICATION	2.952036017508902E-6	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999999930668529	WITHOUT_CLASSIFICATION	6.9331469876609895E-9	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999999826358734	WITHOUT_CLASSIFICATION	1.7364126589719654E-8	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999999884019383	WITHOUT_CLASSIFICATION	1.1598061833554595E-8	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9997382040060044	WITHOUT_CLASSIFICATION	2.617959939955428E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9996106392629073	WITHOUT_CLASSIFICATION	3.8936073709280113E-4	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999988951083323	WITHOUT_CLASSIFICATION	1.1048916677108865E-6	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.999999167079717	WITHOUT_CLASSIFICATION	8.329202830113617E-7	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999998773633223	WITHOUT_CLASSIFICATION	1.22636677673269E-7	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999952753606725	WITHOUT_CLASSIFICATION	4.724639327546267E-6	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999960735099385	WITHOUT_CLASSIFICATION	3.926490061485098E-6	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999987386769851	WITHOUT_CLASSIFICATION	1.261323014916153E-6	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999995338217849	WITHOUT_CLASSIFICATION	4.661782151204912E-7	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999992190644175	WITHOUT_CLASSIFICATION	7.809355825572474E-7	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999996467727944	WITHOUT_CLASSIFICATION	3.532272055229067E-7	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9579568706382924	WITHOUT_CLASSIFICATION	0.04204312936170771	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.999999035803761	WITHOUT_CLASSIFICATION	9.641962390350585E-7	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999948298534165	WITHOUT_CLASSIFICATION	5.1701465835743865E-6	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999983312774504	WITHOUT_CLASSIFICATION	1.668722549606696E-6	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.999996230888325	WITHOUT_CLASSIFICATION	3.7691116749663742E-6	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9999731502052747	WITHOUT_CLASSIFICATION	2.6849794725265664E-5	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999969385840437	WITHOUT_CLASSIFICATION	3.0614159563155218E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999258745399792	WITHOUT_CLASSIFICATION	7.412546002090422E-5	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999999699744305	WITHOUT_CLASSIFICATION	3.002556953249123E-8	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999993500308434	WITHOUT_CLASSIFICATION	6.499691565184611E-7	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999987452861321	WITHOUT_CLASSIFICATION	1.2547138678908333E-6	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9999989784792915	WITHOUT_CLASSIFICATION	1.0215207084246467E-6	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999975363953459	WITHOUT_CLASSIFICATION	2.463604654095306E-6	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999982616266834	WITHOUT_CLASSIFICATION	1.7383733165569643E-6	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999642924167851	WITHOUT_CLASSIFICATION	3.5707583214959605E-5	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999999069283947	WITHOUT_CLASSIFICATION	9.307160527712723E-8	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999991307431509	WITHOUT_CLASSIFICATION	8.692568490315837E-7	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.999998401634033	WITHOUT_CLASSIFICATION	1.5983659670019671E-6	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999999879826549	WITHOUT_CLASSIFICATION	1.2017345215212015E-8	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999994646475828	WITHOUT_CLASSIFICATION	5.353524171126825E-7	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999990679665454	WITHOUT_CLASSIFICATION	9.320334546037053E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999991141961779	WITHOUT_CLASSIFICATION	8.858038220082314E-7	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9998383463749049	WITHOUT_CLASSIFICATION	1.6165362509512176E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999933669014329	WITHOUT_CLASSIFICATION	6.633098567068396E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999933669014329	WITHOUT_CLASSIFICATION	6.633098567068396E-6	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999999707385756	WITHOUT_CLASSIFICATION	2.9261424404831115E-8	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999999649910567	WITHOUT_CLASSIFICATION	3.500894334483083E-8	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999976779928645	WITHOUT_CLASSIFICATION	2.322007135430328E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9999745428238812	WITHOUT_CLASSIFICATION	2.545717611878219E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999991649685276	WITHOUT_CLASSIFICATION	8.35031472394207E-7	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9999140585589791	WITHOUT_CLASSIFICATION	8.594144102092675E-5	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9999205226146772	WITHOUT_CLASSIFICATION	7.947738532277939E-5	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999954403795412	WITHOUT_CLASSIFICATION	4.559620458856116E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999991141961779	WITHOUT_CLASSIFICATION	8.858038220082314E-7	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999996619355711	WITHOUT_CLASSIFICATION	3.380644289422863E-7	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.999997656909542	WITHOUT_CLASSIFICATION	2.3430904579851375E-6	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999999784843452	WITHOUT_CLASSIFICATION	2.151565486125201E-8	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999999983132661	WITHOUT_CLASSIFICATION	1.6867339068608784E-9	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.999999998396626	WITHOUT_CLASSIFICATION	1.6033740028963637E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999973733547	WITHOUT_CLASSIFICATION	2.626645424182719E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999973733547	WITHOUT_CLASSIFICATION	2.626645424182719E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999973733547	WITHOUT_CLASSIFICATION	2.626645424182719E-9	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999997472559856	WITHOUT_CLASSIFICATION	2.5274401441428056E-7	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999999983556831	WITHOUT_CLASSIFICATION	1.6443169028144159E-9	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999999620099013	WITHOUT_CLASSIFICATION	3.799009879401767E-8	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9906775002066222	WITHOUT_CLASSIFICATION	0.009322499793377848	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9999660061504356	WITHOUT_CLASSIFICATION	3.399384956431662E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999999191075979	WITHOUT_CLASSIFICATION	8.089240213591916E-8	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9997725542927953	WITHOUT_CLASSIFICATION	2.2744570720466546E-4	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999998223232377	WITHOUT_CLASSIFICATION	1.776767623423488E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999995863033901	WITHOUT_CLASSIFICATION	4.1369660983485657E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999995863033901	WITHOUT_CLASSIFICATION	4.1369660983485657E-7	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999997101406919	WITHOUT_CLASSIFICATION	2.898593080754561E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999976333429	WITHOUT_CLASSIFICATION	2.3666571210951203E-9	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999964456259753	WITHOUT_CLASSIFICATION	3.554374024568835E-6	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999964456259753	WITHOUT_CLASSIFICATION	3.554374024568835E-6	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999998300829915	WITHOUT_CLASSIFICATION	1.6991700846936584E-7	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999999726412026	WITHOUT_CLASSIFICATION	2.7358797480284064E-8	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999872329192068	WITHOUT_CLASSIFICATION	1.2767080793223582E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.999999966127384	WITHOUT_CLASSIFICATION	3.3872615990763614E-8	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999977400277955	WITHOUT_CLASSIFICATION	2.2599722044332797E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999993547188496	WITHOUT_CLASSIFICATION	6.452811503796924E-7	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999987532439942	WITHOUT_CLASSIFICATION	1.2467560056935743E-6	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999931335328421	WITHOUT_CLASSIFICATION	6.866467157859328E-6	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999994093762611	WITHOUT_CLASSIFICATION	5.906237388289866E-7	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999996452749504	WITHOUT_CLASSIFICATION	3.54725049535726E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999991141961779	WITHOUT_CLASSIFICATION	8.858038220082314E-7	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999990276461824	WITHOUT_CLASSIFICATION	9.723538176062224E-7	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999907393111	WITHOUT_CLASSIFICATION	9.260688925753806E-9	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999987411729028	WITHOUT_CLASSIFICATION	1.2588270973038268E-6	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.8701855203348082	WITHOUT_CLASSIFICATION	0.12981447966519177	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.999989349561442	WITHOUT_CLASSIFICATION	1.0650438558043393E-5	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999860453991471	WITHOUT_CLASSIFICATION	1.3954600852868115E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999184930175147	WITHOUT_CLASSIFICATION	8.150698248536802E-5	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.999212714570643	WITHOUT_CLASSIFICATION	7.872854293570064E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999995533808985	WITHOUT_CLASSIFICATION	4.4661910159448127E-7	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9999814488751351	WITHOUT_CLASSIFICATION	1.855112486491943E-5	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9999999383866556	WITHOUT_CLASSIFICATION	6.16133444247913E-8	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999997433133632	WITHOUT_CLASSIFICATION	2.566866368172515E-7	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.999994333467206	WITHOUT_CLASSIFICATION	5.666532793914315E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999997901283925	WITHOUT_CLASSIFICATION	2.0987160759987206E-7	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9999988624897876	WITHOUT_CLASSIFICATION	1.1375102123819537E-6	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9999818174549677	WITHOUT_CLASSIFICATION	1.8182545032308443E-5	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999999906659941	WITHOUT_CLASSIFICATION	9.33400583644592E-9	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999999121641417	WITHOUT_CLASSIFICATION	8.783585819704405E-8	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999998059377778	WITHOUT_CLASSIFICATION	1.9406222224896667E-7	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999999995084127	WITHOUT_CLASSIFICATION	4.915873484053959E-10	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999967041166128	WITHOUT_CLASSIFICATION	3.2958833872335685E-6	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999998860261743	WITHOUT_CLASSIFICATION	1.1397382573314702E-7	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999998001861821	WITHOUT_CLASSIFICATION	1.9981381793136115E-7	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999996895840468	WITHOUT_CLASSIFICATION	3.104159531436903E-7	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.999999043242985	WITHOUT_CLASSIFICATION	9.567570149357885E-7	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999957502470582	WITHOUT_CLASSIFICATION	4.249752941806308E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999955003311689	WITHOUT_CLASSIFICATION	4.499668831088981E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.999998410341074	WITHOUT_CLASSIFICATION	1.5896589259605677E-6	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999996923955377	WITHOUT_CLASSIFICATION	3.076044624008795E-7	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999998075964298	WITHOUT_CLASSIFICATION	1.9240357021377294E-7	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999949127535259	WITHOUT_CLASSIFICATION	5.087246474114365E-6	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999998098445705	WITHOUT_CLASSIFICATION	1.9015542963789675E-7	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999995554128482	WITHOUT_CLASSIFICATION	4.4458715180537515E-7	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999986067112576	WITHOUT_CLASSIFICATION	1.3932887423783312E-6	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999995604178978	WITHOUT_CLASSIFICATION	4.3958210219420827E-7	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999965466645396	WITHOUT_CLASSIFICATION	3.4533354604740186E-6	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999996960115932	WITHOUT_CLASSIFICATION	3.0398840677972236E-7	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999983687285058	WITHOUT_CLASSIFICATION	1.631271494298991E-6	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999999859766635	WITHOUT_CLASSIFICATION	1.4023336377987552E-8	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999933931329031	WITHOUT_CLASSIFICATION	6.6068670967912875E-6	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999999280813079	WITHOUT_CLASSIFICATION	7.191869206574088E-8	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999999865464764	WITHOUT_CLASSIFICATION	1.3453523716252509E-8	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999999984100789	WITHOUT_CLASSIFICATION	1.5899209670243524E-9	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999998809047066	WITHOUT_CLASSIFICATION	1.190952934183529E-7	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999971690528031	WITHOUT_CLASSIFICATION	2.830947196841248E-6	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999995301383879	WITHOUT_CLASSIFICATION	4.698616119930206E-7	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999992538225909	WITHOUT_CLASSIFICATION	7.46177409062315E-7	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999994766205115	WITHOUT_CLASSIFICATION	5.233794885469397E-7	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999956310977423	WITHOUT_CLASSIFICATION	4.36890225767666E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999994532486919	WITHOUT_CLASSIFICATION	5.467513081771736E-7	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999953457979254	WITHOUT_CLASSIFICATION	4.654202074599045E-6	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999976442049104	WITHOUT_CLASSIFICATION	2.3557950896493734E-6	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999987717139965	WITHOUT_CLASSIFICATION	1.2282860033784254E-6	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999997278692295	WITHOUT_CLASSIFICATION	2.72130770469111E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999994250580648	WITHOUT_CLASSIFICATION	5.749419351678077E-7	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999990948626548	WITHOUT_CLASSIFICATION	9.051373451216382E-7	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.999998450750933	WITHOUT_CLASSIFICATION	1.5492490670135018E-6	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999847793665173	WITHOUT_CLASSIFICATION	1.5220633482661865E-5	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999999534054398	WITHOUT_CLASSIFICATION	4.6594560201793986E-8	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.999999984371534	WITHOUT_CLASSIFICATION	1.56284658888365E-8	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999930898877727	WITHOUT_CLASSIFICATION	6.910112227278136E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999930898877727	WITHOUT_CLASSIFICATION	6.910112227278136E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999985954747472	WITHOUT_CLASSIFICATION	1.404525252712503E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999985954747472	WITHOUT_CLASSIFICATION	1.404525252712503E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999944643159611	WITHOUT_CLASSIFICATION	5.5356840389676565E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999944643159611	WITHOUT_CLASSIFICATION	5.5356840389676565E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.999996961547764	WITHOUT_CLASSIFICATION	3.038452236119841E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.999996961547764	WITHOUT_CLASSIFICATION	3.038452236119841E-6	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999998195788226	WITHOUT_CLASSIFICATION	1.8042117730939885E-7	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.999999724195006	WITHOUT_CLASSIFICATION	2.758049939696673E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999986409645131	WITHOUT_CLASSIFICATION	1.3590354869698364E-6	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.999995860172422	WITHOUT_CLASSIFICATION	4.1398275779848775E-6	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999877552965053	WITHOUT_CLASSIFICATION	1.2244703494798055E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9999074293180686	WITHOUT_CLASSIFICATION	9.257068193146207E-5	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999965737956187	WITHOUT_CLASSIFICATION	3.426204381342554E-6	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999998402961654	WITHOUT_CLASSIFICATION	1.5970383459350748E-7	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.999999911739115	WITHOUT_CLASSIFICATION	8.826088505952742E-8	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999999547409439	WITHOUT_CLASSIFICATION	4.525905606626419E-8	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999999857336991	WITHOUT_CLASSIFICATION	1.4266300907455753E-8	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.999999830099009	WITHOUT_CLASSIFICATION	1.6990099104717563E-7	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999998339926319	WITHOUT_CLASSIFICATION	1.6600736805374638E-7	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999999990875801	WITHOUT_CLASSIFICATION	9.124198154733644E-10	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999997736722261	WITHOUT_CLASSIFICATION	2.2632777386458568E-7	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.999999326815071	WITHOUT_CLASSIFICATION	6.731849291056721E-7	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999998680213658	WITHOUT_CLASSIFICATION	1.3197863424969628E-7	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.999999240755062	WITHOUT_CLASSIFICATION	7.592449380113209E-7	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.999997010903335	WITHOUT_CLASSIFICATION	2.9890966649316893E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9985686266684777	WITHOUT_CLASSIFICATION	0.0014313733315222776	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999991137956014	WITHOUT_CLASSIFICATION	8.862043986268081E-7	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999992254691961	WITHOUT_CLASSIFICATION	7.745308040127761E-7	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999996166399264	WITHOUT_CLASSIFICATION	3.8336007366068105E-7	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999949968659957	WITHOUT_CLASSIFICATION	5.003134004356661E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999911570868117	WITHOUT_CLASSIFICATION	8.84291318828454E-6	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999999881850768	WITHOUT_CLASSIFICATION	1.1814923113567561E-8	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999988337877268	WITHOUT_CLASSIFICATION	1.166212273271776E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996899430599	WITHOUT_CLASSIFICATION	3.100569400970216E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996899430599	WITHOUT_CLASSIFICATION	3.100569400970216E-7	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999999561107472	WITHOUT_CLASSIFICATION	4.388925280367278E-8	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999997783818584	WITHOUT_CLASSIFICATION	2.2161814166825778E-7	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999997195664655	WITHOUT_CLASSIFICATION	2.804335345407826E-7	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9999966337853213	WITHOUT_CLASSIFICATION	3.366214678595459E-6	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999984103244205	WITHOUT_CLASSIFICATION	1.5896755795430974E-6	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999996503556364	WITHOUT_CLASSIFICATION	3.496443635863534E-7	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999951296907641	WITHOUT_CLASSIFICATION	4.870309235875643E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999951296907641	WITHOUT_CLASSIFICATION	4.870309235875643E-6	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999999055645518	WITHOUT_CLASSIFICATION	9.443544818857204E-8	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9986191376014708	WITHOUT_CLASSIFICATION	0.0013808623985292405	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999995713386757	WITHOUT_CLASSIFICATION	4.2866132429383193E-7	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999995713386757	WITHOUT_CLASSIFICATION	4.2866132429383193E-7	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9999992428574461	WITHOUT_CLASSIFICATION	7.571425538611589E-7	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9997525417630065	WITHOUT_CLASSIFICATION	2.4745823699348564E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9997525417630065	WITHOUT_CLASSIFICATION	2.4745823699348564E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999996899712651	WITHOUT_CLASSIFICATION	3.1002873494834845E-7	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999996899712651	WITHOUT_CLASSIFICATION	3.1002873494834845E-7	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999953326507532	WITHOUT_CLASSIFICATION	4.6673492467623325E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999953326507532	WITHOUT_CLASSIFICATION	4.6673492467623325E-6	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9999980392008837	WITHOUT_CLASSIFICATION	1.9607991164101017E-6	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999992385025652	WITHOUT_CLASSIFICATION	7.614974348942322E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999998614480486	WITHOUT_CLASSIFICATION	1.3855195137256762E-7	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.999996310792563	WITHOUT_CLASSIFICATION	3.6892074370184322E-6	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999999906187453	WITHOUT_CLASSIFICATION	9.381254609647672E-9	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999998756940145	WITHOUT_CLASSIFICATION	1.243059854424895E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999987807178908	WITHOUT_CLASSIFICATION	1.2192821091657511E-6	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999985362686218	WITHOUT_CLASSIFICATION	1.463731378179671E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999987807178908	WITHOUT_CLASSIFICATION	1.2192821091657511E-6	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9999969595149395	WITHOUT_CLASSIFICATION	3.040485060616548E-6	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999998742692408	WITHOUT_CLASSIFICATION	1.2573075917131668E-7	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999998458896042	WITHOUT_CLASSIFICATION	1.5411039586665142E-7	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999955215573247	WITHOUT_CLASSIFICATION	4.478442675222549E-6	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999999607773611	WITHOUT_CLASSIFICATION	3.922263894027108E-8	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9999800822573718	WITHOUT_CLASSIFICATION	1.9917742628176146E-5	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.999999416166628	WITHOUT_CLASSIFICATION	5.838333720026322E-7	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999996849259508	WITHOUT_CLASSIFICATION	3.150740491709247E-7	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999988463642343	WITHOUT_CLASSIFICATION	1.15363576569845E-6	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999996015763865	WITHOUT_CLASSIFICATION	3.984236134869738E-7	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999998140522417	WITHOUT_CLASSIFICATION	1.859477583421579E-7	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999999470589459	WITHOUT_CLASSIFICATION	5.2941054146058664E-8	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.999996627566148	WITHOUT_CLASSIFICATION	3.3724338520132943E-6	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.999999803519759	WITHOUT_CLASSIFICATION	1.9648024101517337E-7	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999990383586718	WITHOUT_CLASSIFICATION	9.616413282054466E-7	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999999034590006	WITHOUT_CLASSIFICATION	9.654099936199241E-8	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999967758401083	WITHOUT_CLASSIFICATION	3.224159891694266E-6	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999998045632124	WITHOUT_CLASSIFICATION	1.9543678777924884E-7	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.999999805342883	WITHOUT_CLASSIFICATION	1.9465711704421848E-7	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999992982300111	WITHOUT_CLASSIFICATION	7.017699889311408E-7	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9999941555552279	WITHOUT_CLASSIFICATION	5.844444772123604E-6	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999999920260345	WITHOUT_CLASSIFICATION	7.973965514788098E-9	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999998513261786	WITHOUT_CLASSIFICATION	1.486738213631462E-7	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999897117789515	WITHOUT_CLASSIFICATION	1.028822104849251E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9999996495969665	WITHOUT_CLASSIFICATION	3.5040303341199053E-7	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999999801375493	WITHOUT_CLASSIFICATION	1.986245067295053E-8	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999999991218498	WITHOUT_CLASSIFICATION	8.781501844944018E-10	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999999946795328	WITHOUT_CLASSIFICATION	5.320467168534288E-9	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999997087718646	WITHOUT_CLASSIFICATION	2.9122813529083814E-7	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999999017933647	WITHOUT_CLASSIFICATION	9.820663526834815E-8	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999998783225356	WITHOUT_CLASSIFICATION	1.2167746450328805E-7	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999999960693876	WITHOUT_CLASSIFICATION	3.930612415063535E-9	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999997237808005	WITHOUT_CLASSIFICATION	2.762191995566917E-7	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.999998972700003	WITHOUT_CLASSIFICATION	1.0272999969184504E-6	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999975413947733	WITHOUT_CLASSIFICATION	2.458605226822129E-6	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999986707953866	WITHOUT_CLASSIFICATION	1.329204613371724E-6	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9999998384449444	WITHOUT_CLASSIFICATION	1.6155505555292498E-7	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999997710581853	WITHOUT_CLASSIFICATION	2.2894181481506968E-7	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999999324831241	WITHOUT_CLASSIFICATION	6.751687586341669E-8	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.999997918592948	WITHOUT_CLASSIFICATION	2.081407051984135E-6	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999998251282993	WITHOUT_CLASSIFICATION	1.7487170079151592E-7	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999987595264932	WITHOUT_CLASSIFICATION	1.2404735067716486E-6	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.999999944938808	WITHOUT_CLASSIFICATION	5.506119195133113E-8	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999999306069198	WITHOUT_CLASSIFICATION	6.939308021489246E-8	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999999895777135	WITHOUT_CLASSIFICATION	1.0422286474417958E-8	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999999899097455	WITHOUT_CLASSIFICATION	1.0090254476510148E-8	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999999794255723	WITHOUT_CLASSIFICATION	2.0574427701131704E-8	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.999999942701934	WITHOUT_CLASSIFICATION	5.729806583349757E-8	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999997872923417	WITHOUT_CLASSIFICATION	2.1270765837297712E-7	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9999942995591745	WITHOUT_CLASSIFICATION	5.700440825453372E-6	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999865908304899	WITHOUT_CLASSIFICATION	1.3409169510044468E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999999479176541	WITHOUT_CLASSIFICATION	5.208234600439937E-8	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9997796005617874	WITHOUT_CLASSIFICATION	2.20399438212703E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999999235955888	WITHOUT_CLASSIFICATION	7.640441127887921E-8	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999904406147	WITHOUT_CLASSIFICATION	9.559385197852798E-9	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999904406147	WITHOUT_CLASSIFICATION	9.559385197852798E-9	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999996728504295	WITHOUT_CLASSIFICATION	3.271495705077596E-7	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999977475556142	WITHOUT_CLASSIFICATION	2.252444385813271E-6	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999992107008643	WITHOUT_CLASSIFICATION	7.8929913572267E-7	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999986243342625	WITHOUT_CLASSIFICATION	1.3756657375238563E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999958206740401	WITHOUT_CLASSIFICATION	4.179325959914027E-6	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999990422795968	WITHOUT_CLASSIFICATION	9.577204032440905E-7	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9999987964395693	WITHOUT_CLASSIFICATION	1.2035604307353612E-6	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999999129306695	WITHOUT_CLASSIFICATION	8.7069330508817E-8	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999997035906825	WITHOUT_CLASSIFICATION	2.9640931751237367E-7	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999995259746631	WITHOUT_CLASSIFICATION	4.740253368356684E-7	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.999996636767735	WITHOUT_CLASSIFICATION	3.3632322649827526E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.999996636767735	WITHOUT_CLASSIFICATION	3.3632322649827526E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999960428930191	WITHOUT_CLASSIFICATION	3.9571069809543005E-6	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999864118455855	WITHOUT_CLASSIFICATION	1.3588154414428975E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999776455059385	WITHOUT_CLASSIFICATION	2.2354494061501047E-5	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999992610793382	WITHOUT_CLASSIFICATION	7.389206617566782E-7	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999998042741919	WITHOUT_CLASSIFICATION	1.9572580819586237E-7	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999999782115345	WITHOUT_CLASSIFICATION	2.1788465455446303E-8	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999997221936785	WITHOUT_CLASSIFICATION	2.7780632153692605E-7	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999998494874248	WITHOUT_CLASSIFICATION	1.505125750989262E-7	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999999147842631	WITHOUT_CLASSIFICATION	8.521573688874941E-8	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999997462713273	WITHOUT_CLASSIFICATION	2.5372867269061464E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999994084258497	WITHOUT_CLASSIFICATION	5.915741504194531E-7	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999999409635952	WITHOUT_CLASSIFICATION	5.903640484719374E-8	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999951374610149	WITHOUT_CLASSIFICATION	4.862538985135313E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999951374610149	WITHOUT_CLASSIFICATION	4.862538985135313E-6	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999922572023002	WITHOUT_CLASSIFICATION	7.742797699771887E-6	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999875213956819	WITHOUT_CLASSIFICATION	1.2478604318131203E-5	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999904122613363	WITHOUT_CLASSIFICATION	9.58773866357802E-6	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.99999982169918	WITHOUT_CLASSIFICATION	1.78300820068389E-7	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999998733622726	WITHOUT_CLASSIFICATION	1.266377274512745E-7	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999995265310355	WITHOUT_CLASSIFICATION	4.734689645104786E-7	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999767105021864	WITHOUT_CLASSIFICATION	2.3289497813609267E-5	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999996259341978	WITHOUT_CLASSIFICATION	3.7406580219032775E-7	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9999816553046484	WITHOUT_CLASSIFICATION	1.8344695351613002E-5	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999999300238271	WITHOUT_CLASSIFICATION	6.997617284265414E-8	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999776455059385	WITHOUT_CLASSIFICATION	2.2354494061501047E-5	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9999982015046522	WITHOUT_CLASSIFICATION	1.7984953477818042E-6	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9999805611526988	WITHOUT_CLASSIFICATION	1.9438847301149543E-5	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999999773462569	WITHOUT_CLASSIFICATION	2.265374315243678E-8	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.999999997563026	WITHOUT_CLASSIFICATION	2.4369739230113744E-9	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999999878570367	WITHOUT_CLASSIFICATION	1.2142963290404511E-8	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999978569846183	WITHOUT_CLASSIFICATION	2.1430153815965842E-6	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999999584586555	WITHOUT_CLASSIFICATION	4.1541344424836957E-8	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999995783025691	WITHOUT_CLASSIFICATION	4.2169743090429176E-7	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999999508072531	WITHOUT_CLASSIFICATION	4.9192746853512115E-8	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999991370928788	WITHOUT_CLASSIFICATION	8.629071210883595E-7	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999987524223936	WITHOUT_CLASSIFICATION	1.2475776064405545E-6	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999980777451432	WITHOUT_CLASSIFICATION	1.922254856784869E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999997013212075	WITHOUT_CLASSIFICATION	2.986787924573324E-7	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9998997543089564	WITHOUT_CLASSIFICATION	1.002456910435849E-4	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999998821513151	WITHOUT_CLASSIFICATION	1.1784868485940225E-7	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999999221401558	WITHOUT_CLASSIFICATION	7.785984431745637E-8	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.999998764670175	WITHOUT_CLASSIFICATION	1.2353298250436893E-6	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999990682962271	WITHOUT_CLASSIFICATION	9.317037730269021E-7	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999954482138661	WITHOUT_CLASSIFICATION	4.551786133853771E-6	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999989218647181	WITHOUT_CLASSIFICATION	1.0781352818646852E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9999734078597023	WITHOUT_CLASSIFICATION	2.6592140297734783E-5	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999996927138195	WITHOUT_CLASSIFICATION	3.0728618049108E-7	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999819974677141	WITHOUT_CLASSIFICATION	1.8002532285921253E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9994099115184456	WITHOUT_CLASSIFICATION	5.900884815544733E-4	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999962456802003	WITHOUT_CLASSIFICATION	3.7543197997358647E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999999999405301	WITHOUT_CLASSIFICATION	5.946996521661341E-11	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999845939588201	WITHOUT_CLASSIFICATION	1.540604117992012E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999996171071934	WITHOUT_CLASSIFICATION	3.828928064672845E-7	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999997228674355	WITHOUT_CLASSIFICATION	2.771325644571334E-7	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9999867007126912	WITHOUT_CLASSIFICATION	1.3299287308741957E-5	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999980923428378	WITHOUT_CLASSIFICATION	1.907657162277381E-6	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999980923428378	WITHOUT_CLASSIFICATION	1.907657162277381E-6	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999887642423058	WITHOUT_CLASSIFICATION	1.1235757694129413E-5	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999905409295998	WITHOUT_CLASSIFICATION	9.459070400160474E-6	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999999346467483	WITHOUT_CLASSIFICATION	6.535325165609346E-8	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999921119505999	WITHOUT_CLASSIFICATION	7.88804940016987E-6	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999994607650347	WITHOUT_CLASSIFICATION	5.392349653344814E-7	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999997943841543	WITHOUT_CLASSIFICATION	2.0561584565616448E-7	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999991141961779	WITHOUT_CLASSIFICATION	8.858038220082314E-7	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999995201734434	WITHOUT_CLASSIFICATION	4.798265564753008E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999904292030009	WITHOUT_CLASSIFICATION	9.570796999155578E-6	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.999999625814316	WITHOUT_CLASSIFICATION	3.7418568399387664E-7	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999997010226155	WITHOUT_CLASSIFICATION	2.9897738452717555E-7	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999999192540415	WITHOUT_CLASSIFICATION	8.074595845078594E-8	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999950015604294	WITHOUT_CLASSIFICATION	4.99843957056921E-6	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999933931329031	WITHOUT_CLASSIFICATION	6.6068670967912875E-6	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999989323743163	WITHOUT_CLASSIFICATION	1.0676256836948894E-6	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999989004824851	WITHOUT_CLASSIFICATION	1.0995175149790378E-6	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9999785971054567	WITHOUT_CLASSIFICATION	2.140289454332776E-5	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999999787569354	WITHOUT_CLASSIFICATION	2.124306472497371E-8	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999998991809868	WITHOUT_CLASSIFICATION	1.008190132687812E-7	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999916045718211	WITHOUT_CLASSIFICATION	8.3954281787907E-6	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999999733549065	WITHOUT_CLASSIFICATION	2.66450935037542E-8	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999999733549065	WITHOUT_CLASSIFICATION	2.66450935037542E-8	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999998098488694	WITHOUT_CLASSIFICATION	1.9015113067738304E-7	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999999930924951	WITHOUT_CLASSIFICATION	6.9075048417080875E-9	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999963971509656	WITHOUT_CLASSIFICATION	3.602849034477747E-6	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999998115638329	WITHOUT_CLASSIFICATION	1.884361671402341E-7	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999999839531533	WITHOUT_CLASSIFICATION	1.6046846771170207E-8	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999999524665707	WITHOUT_CLASSIFICATION	4.7533429284776766E-8	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999997268554945	WITHOUT_CLASSIFICATION	2.731445054495123E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999985652488	WITHOUT_CLASSIFICATION	1.4347512204398588E-9	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999997400357812	WITHOUT_CLASSIFICATION	2.599642187967273E-7	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999999999953237	WITHOUT_CLASSIFICATION	4.676294953575443E-12	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999998921571873	WITHOUT_CLASSIFICATION	1.078428126888064E-7	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999632663802509	WITHOUT_CLASSIFICATION	3.673361974906107E-5	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999999990607004	WITHOUT_CLASSIFICATION	9.392995795958173E-10	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999999988752981	WITHOUT_CLASSIFICATION	1.124701808060337E-9	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999998759376993	WITHOUT_CLASSIFICATION	1.2406230072600945E-7	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999859976431049	WITHOUT_CLASSIFICATION	1.4002356895054931E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999992737716733	WITHOUT_CLASSIFICATION	7.26228326771764E-7	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999997410137612	WITHOUT_CLASSIFICATION	2.5898623885617696E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.99999714562448	WITHOUT_CLASSIFICATION	2.8543755200484717E-6	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999996673453643	WITHOUT_CLASSIFICATION	3.3265463568544414E-7	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.999979896600281	WITHOUT_CLASSIFICATION	2.0103399719106973E-5	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999930480450703	WITHOUT_CLASSIFICATION	6.95195492975292E-6	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999995613881019	WITHOUT_CLASSIFICATION	4.386118981025594E-7	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9410469323941612	WITHOUT_CLASSIFICATION	0.05895306760583893	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999908674022812	WITHOUT_CLASSIFICATION	9.132597718779892E-6	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9999979456298075	WITHOUT_CLASSIFICATION	2.0543701924549465E-6	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999985567896356	WITHOUT_CLASSIFICATION	1.443210364442034E-6	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999989719439759	WITHOUT_CLASSIFICATION	1.028056024013704E-6	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999982398543672	WITHOUT_CLASSIFICATION	1.7601456328945744E-6	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999988507491132	WITHOUT_CLASSIFICATION	1.1492508867031249E-6	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9999989376168259	WITHOUT_CLASSIFICATION	1.0623831740695604E-6	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999992638748395	WITHOUT_CLASSIFICATION	7.361251604370116E-7	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999994584763994	WITHOUT_CLASSIFICATION	5.415236006574159E-7	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999959534987171	WITHOUT_CLASSIFICATION	4.046501282982914E-6	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9999713543521854	WITHOUT_CLASSIFICATION	2.8645647814618566E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9999012203880099	WITHOUT_CLASSIFICATION	9.877961199018174E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9993138196617942	WITHOUT_CLASSIFICATION	6.86180338205895E-4	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999998687400518	WITHOUT_CLASSIFICATION	1.312599481647742E-7	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999943496683882	WITHOUT_CLASSIFICATION	5.650331611888646E-6	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.999999716462669	WITHOUT_CLASSIFICATION	2.8353733090071425E-7	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999938798799854	WITHOUT_CLASSIFICATION	6.120120014623698E-6	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.999989872885638	WITHOUT_CLASSIFICATION	1.0127114361976345E-5	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9999978404738192	WITHOUT_CLASSIFICATION	2.1595261808151196E-6	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999600772979521	WITHOUT_CLASSIFICATION	3.992270204792444E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999866391966653	WITHOUT_CLASSIFICATION	1.3360803334660841E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999600772979521	WITHOUT_CLASSIFICATION	3.992270204792444E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9829357862358179	WITHOUT_CLASSIFICATION	0.017064213764182077	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9999467555922251	WITHOUT_CLASSIFICATION	5.324440777495049E-5	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999996380023186	WITHOUT_CLASSIFICATION	3.6199768141715567E-7	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.8704491302982171	WITHOUT_CLASSIFICATION	0.1295508697017829	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999914293577421	WITHOUT_CLASSIFICATION	8.570642257856852E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999280898078	WITHOUT_CLASSIFICATION	7.19101922358689E-8	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999995098277908	WITHOUT_CLASSIFICATION	4.901722092172377E-7	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9999197365831065	WITHOUT_CLASSIFICATION	8.026341689346148E-5	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999999293248518	WITHOUT_CLASSIFICATION	7.06751481418518E-8	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9730341523377377	WITHOUT_CLASSIFICATION	0.026965847662262243	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9971492095348266	WITHOUT_CLASSIFICATION	0.0028507904651734082	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999999833277103	WITHOUT_CLASSIFICATION	1.6672289586791575E-8	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999998066651967	WITHOUT_CLASSIFICATION	1.9333480327415116E-7	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.999998596429953	WITHOUT_CLASSIFICATION	1.403570046986095E-6	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999969238230774	WITHOUT_CLASSIFICATION	3.0761769226852215E-6	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9992981519282113	WITHOUT_CLASSIFICATION	7.018480717888239E-4	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999983568182796	WITHOUT_CLASSIFICATION	1.6431817204201014E-6	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.999993611341793	WITHOUT_CLASSIFICATION	6.388658207018395E-6	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999993161892095	WITHOUT_CLASSIFICATION	6.838107904897197E-7	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999980155987911	WITHOUT_CLASSIFICATION	1.984401208842928E-6	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9999593333747512	WITHOUT_CLASSIFICATION	4.066662524891176E-5	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.99999973975623	WITHOUT_CLASSIFICATION	2.602437698750505E-7	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999881433111188	WITHOUT_CLASSIFICATION	1.185668888117323E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999998283815	WITHOUT_CLASSIFICATION	1.7161850003353786E-7	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999997605772184	WITHOUT_CLASSIFICATION	2.394227815566074E-7	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999961050446392	WITHOUT_CLASSIFICATION	3.894955360728484E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999916083128483	WITHOUT_CLASSIFICATION	8.391687151710844E-6	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.999998622251065	WITHOUT_CLASSIFICATION	1.377748935021544E-6	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999964204686009	WITHOUT_CLASSIFICATION	3.5795313990009816E-6	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9999995441338871	WITHOUT_CLASSIFICATION	4.558661129060177E-7	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999932025997926	WITHOUT_CLASSIFICATION	6.797400207349049E-6	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999865393739351	WITHOUT_CLASSIFICATION	1.3460626064905233E-5	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999940602230333	WITHOUT_CLASSIFICATION	5.939776966677958E-6	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999997702727158	WITHOUT_CLASSIFICATION	2.2972728419224186E-7	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999999779660412	WITHOUT_CLASSIFICATION	2.2033958674544207E-8	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999997934157808	WITHOUT_CLASSIFICATION	2.0658421917253616E-7	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.99999838325336	WITHOUT_CLASSIFICATION	1.6167466401056831E-6	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999984855693	WITHOUT_CLASSIFICATION	1.5144306517096774E-9	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999999639634994	WITHOUT_CLASSIFICATION	3.6036500684591106E-8	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999963628658411	WITHOUT_CLASSIFICATION	3.637134158799508E-6	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999669355101569	WITHOUT_CLASSIFICATION	3.306448984306847E-5	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999998976636972	WITHOUT_CLASSIFICATION	1.0233630281856475E-7	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999999958328841	WITHOUT_CLASSIFICATION	4.167115919725724E-9	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999957543850794	WITHOUT_CLASSIFICATION	4.2456149207049995E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999957543850794	WITHOUT_CLASSIFICATION	4.2456149207049995E-6	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999989894102531	WITHOUT_CLASSIFICATION	1.0105897468929845E-6	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999984142362869	WITHOUT_CLASSIFICATION	1.5857637130969055E-6	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9992948163985769	WITHOUT_CLASSIFICATION	7.051836014231976E-4	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999998133197473	WITHOUT_CLASSIFICATION	1.866802527340341E-7	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999993636457378	WITHOUT_CLASSIFICATION	6.363542621549456E-7	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999994847224493	WITHOUT_CLASSIFICATION	5.15277550776438E-7	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.999998996993966	WITHOUT_CLASSIFICATION	1.0030060339505585E-6	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999991874469875	WITHOUT_CLASSIFICATION	8.125530123944745E-7	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999999983973022	WITHOUT_CLASSIFICATION	1.6026977679943898E-9	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999999956959468	WITHOUT_CLASSIFICATION	4.30405319138053E-9	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.999999990763427	WITHOUT_CLASSIFICATION	9.236572895447175E-9	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999980747857136	WITHOUT_CLASSIFICATION	1.9252142864480975E-6	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9994219503527918	WITHOUT_CLASSIFICATION	5.780496472082096E-4	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999999548190073	WITHOUT_CLASSIFICATION	4.518099274763182E-8	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999999989407083	WITHOUT_CLASSIFICATION	1.059291690024104E-9	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999999424137744	WITHOUT_CLASSIFICATION	5.7586225547940676E-8	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999998986821832	WITHOUT_CLASSIFICATION	1.0131781678439829E-7	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999965852549028	WITHOUT_CLASSIFICATION	3.4147450972102722E-6	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999998971497334	WITHOUT_CLASSIFICATION	1.028502666974332E-7	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999996107620541	WITHOUT_CLASSIFICATION	3.8923794586308017E-7	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.6871488050557365	WITHOUT_CLASSIFICATION	0.3128511949442636	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.7090424747811211	WITHOUT_CLASSIFICATION	0.29095752521887874	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999999883265748	WITHOUT_CLASSIFICATION	1.167342522236016E-8	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999999998657029	WITHOUT_CLASSIFICATION	1.3429714166363989E-10	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9997155755276386	WITHOUT_CLASSIFICATION	2.8442447236138387E-4	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999989845869	WITHOUT_CLASSIFICATION	1.0154131633041998E-9	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995255006325	WITHOUT_CLASSIFICATION	4.744993674531986E-7	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9997077544710525	WITHOUT_CLASSIFICATION	2.922455289475532E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999990907330863	WITHOUT_CLASSIFICATION	9.09266913666423E-7	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999954941429211	WITHOUT_CLASSIFICATION	4.505857078948567E-6	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999999583987982	WITHOUT_CLASSIFICATION	4.160120176130022E-8	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9999939234699999	WITHOUT_CLASSIFICATION	6.076530000118118E-6	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999999616564217	WITHOUT_CLASSIFICATION	3.8343578330176216E-8	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999995918720448	WITHOUT_CLASSIFICATION	4.081279551529062E-7	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999998887560634	WITHOUT_CLASSIFICATION	1.1124393657895145E-7	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999999424608232	WITHOUT_CLASSIFICATION	5.7539176847535807E-8	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999840766648187	WITHOUT_CLASSIFICATION	1.5923335181342967E-5	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999947958574158	WITHOUT_CLASSIFICATION	5.204142584246247E-6	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9987879230034564	WITHOUT_CLASSIFICATION	0.0012120769965435559	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999919406931195	WITHOUT_CLASSIFICATION	8.059306880535872E-6	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999977684668622	WITHOUT_CLASSIFICATION	2.231533137861978E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9992197074761107	WITHOUT_CLASSIFICATION	7.802925238893396E-4	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9999983929217747	WITHOUT_CLASSIFICATION	1.607078225284204E-6	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999999003610044	WITHOUT_CLASSIFICATION	9.963899559705032E-8	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.999958269422486	WITHOUT_CLASSIFICATION	4.1730577514026674E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999995648105124	WITHOUT_CLASSIFICATION	4.3518948755714234E-7	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999948874902518	WITHOUT_CLASSIFICATION	5.112509748198443E-6	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9999987221200417	WITHOUT_CLASSIFICATION	1.2778799582480875E-6	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999904325175235	WITHOUT_CLASSIFICATION	9.567482476525805E-6	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999990803487586	WITHOUT_CLASSIFICATION	9.196512413796165E-7	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.999996857954371	WITHOUT_CLASSIFICATION	3.142045629019419E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999997203846465	WITHOUT_CLASSIFICATION	2.79615353466138E-7	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999999893409938	WITHOUT_CLASSIFICATION	1.0659006221034813E-8	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999999288144874	WITHOUT_CLASSIFICATION	7.118551251027641E-8	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999968407145329	WITHOUT_CLASSIFICATION	3.1592854671778925E-6	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999977829011907	WITHOUT_CLASSIFICATION	2.217098809312196E-6	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999999695714501	WITHOUT_CLASSIFICATION	3.042854985904612E-8	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999852210379864	WITHOUT_CLASSIFICATION	1.4778962013533831E-5	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999984899587759	WITHOUT_CLASSIFICATION	1.5100412241048387E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999981824226319	WITHOUT_CLASSIFICATION	1.817577368098936E-5	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999999694268622	WITHOUT_CLASSIFICATION	3.0573137677738576E-8	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999998147156415	WITHOUT_CLASSIFICATION	1.8528435841598347E-7	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999999792166621	WITHOUT_CLASSIFICATION	2.0783337869052095E-8	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999998042262134	WITHOUT_CLASSIFICATION	1.9577378648372006E-7	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999994288781859	WITHOUT_CLASSIFICATION	5.711218139730094E-7	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999988370304269	WITHOUT_CLASSIFICATION	1.1629695731362152E-6	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999941629640713	WITHOUT_CLASSIFICATION	5.837035928758496E-6	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999999949849079	WITHOUT_CLASSIFICATION	5.015092168611829E-9	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999911135399767	WITHOUT_CLASSIFICATION	8.88646002337916E-6	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999983256977487	WITHOUT_CLASSIFICATION	1.6743022512602293E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9999851033287437	WITHOUT_CLASSIFICATION	1.4896671256236787E-5	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.999996748628316	WITHOUT_CLASSIFICATION	3.2513716839215526E-6	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999999352910292	WITHOUT_CLASSIFICATION	6.470897088134281E-8	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9999855868892759	WITHOUT_CLASSIFICATION	1.4413110724069113E-5	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9998565912538315	WITHOUT_CLASSIFICATION	1.4340874616838644E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9998609008296214	WITHOUT_CLASSIFICATION	1.390991703784954E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9998330658811722	WITHOUT_CLASSIFICATION	1.6693411882786276E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9998424575399241	WITHOUT_CLASSIFICATION	1.5754246007584094E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9998148600658494	WITHOUT_CLASSIFICATION	1.8513993415057034E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9997017404789945	WITHOUT_CLASSIFICATION	2.982595210055076E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9997523878402357	WITHOUT_CLASSIFICATION	2.476121597642785E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9998340426466822	WITHOUT_CLASSIFICATION	1.6595735331788867E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9998556319785182	WITHOUT_CLASSIFICATION	1.4436802148177274E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9997775115869402	WITHOUT_CLASSIFICATION	2.2248841305979922E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9998320716734529	WITHOUT_CLASSIFICATION	1.6792832654712183E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9997023382113795	WITHOUT_CLASSIFICATION	2.976617886204487E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.999756078600644	WITHOUT_CLASSIFICATION	2.4392139935600223E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9996465478761742	WITHOUT_CLASSIFICATION	3.5345212382571485E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9997280391764849	WITHOUT_CLASSIFICATION	2.7196082351512666E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9995908872413799	WITHOUT_CLASSIFICATION	4.0911275862001045E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9997255289192903	WITHOUT_CLASSIFICATION	2.744710807096406E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9994778290844163	WITHOUT_CLASSIFICATION	5.221709155837626E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9997916562521865	WITHOUT_CLASSIFICATION	2.08343747813495E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999999761022473	WITHOUT_CLASSIFICATION	2.389775259457139E-8	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999999973321185	WITHOUT_CLASSIFICATION	2.667881538648236E-9	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999957402690963	WITHOUT_CLASSIFICATION	4.259730903673965E-6	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.99999987091147	WITHOUT_CLASSIFICATION	1.2908853005713506E-7	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9998966372646813	WITHOUT_CLASSIFICATION	1.0336273531872083E-4	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999987574862608	WITHOUT_CLASSIFICATION	1.2425137392331273E-6	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999991204929534	WITHOUT_CLASSIFICATION	8.795070467251162E-7	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.999419018742651	WITHOUT_CLASSIFICATION	5.809812573490421E-4	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999999569997616	WITHOUT_CLASSIFICATION	4.3000238249128064E-8	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999997550006853	WITHOUT_CLASSIFICATION	2.4499931478283053E-7	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.8629650479263926	WITHOUT_CLASSIFICATION	0.13703495207360736	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999994316179303	WITHOUT_CLASSIFICATION	5.683820697441409E-7	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999984329764203	WITHOUT_CLASSIFICATION	1.5670235796773266E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999995787479693	WITHOUT_CLASSIFICATION	4.212520307580279E-7	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999995787479693	WITHOUT_CLASSIFICATION	4.212520307580279E-7	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999948141965439	WITHOUT_CLASSIFICATION	5.185803456035359E-6	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999958720604052	WITHOUT_CLASSIFICATION	4.127939594777682E-6	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999999975516065	WITHOUT_CLASSIFICATION	2.44839355188994E-9	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999978471002767	WITHOUT_CLASSIFICATION	2.1528997232162667E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999982523865747	WITHOUT_CLASSIFICATION	1.7476134253335297E-6	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999988735759846	WITHOUT_CLASSIFICATION	1.1264240154189271E-6	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999996929650579	WITHOUT_CLASSIFICATION	3.070349420702743E-7	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999998816175981	WITHOUT_CLASSIFICATION	1.183824019725482E-7	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999997471389013	WITHOUT_CLASSIFICATION	2.5286109873066085E-7	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999998720737302	WITHOUT_CLASSIFICATION	1.2792626978126619E-7	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9999888414738931	WITHOUT_CLASSIFICATION	1.1158526106877331E-5	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999997970132892	WITHOUT_CLASSIFICATION	2.02986710884872E-7	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.999992094077862	WITHOUT_CLASSIFICATION	7.905922137913696E-6	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9998743651142972	WITHOUT_CLASSIFICATION	1.256348857028604E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999999386641463	WITHOUT_CLASSIFICATION	6.13358537424594E-8	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999990930612024	WITHOUT_CLASSIFICATION	9.069387975394062E-7	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999970479639825	WITHOUT_CLASSIFICATION	2.952036017508902E-6	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999999785960064	WITHOUT_CLASSIFICATION	2.140399361967479E-8	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.999204835565356	WITHOUT_CLASSIFICATION	7.951644346439825E-4	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999992182754089	WITHOUT_CLASSIFICATION	7.81724591106424E-7	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999999355785167	WITHOUT_CLASSIFICATION	6.442148323975376E-8	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999999163246683	WITHOUT_CLASSIFICATION	8.367533170680248E-8	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999994380496736	WITHOUT_CLASSIFICATION	5.619503263755546E-7	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999994601461719	WITHOUT_CLASSIFICATION	5.398538280801155E-7	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999913398887629	WITHOUT_CLASSIFICATION	8.660111237130372E-6	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999995592473604	WITHOUT_CLASSIFICATION	4.4075263963304486E-7	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.999999949611719	WITHOUT_CLASSIFICATION	5.038828108497631E-8	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999999981369775	WITHOUT_CLASSIFICATION	1.863022498462495E-9	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999999320332941	WITHOUT_CLASSIFICATION	6.796670587090693E-8	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9999961801303272	WITHOUT_CLASSIFICATION	3.8198696728331574E-6	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999995922909074	WITHOUT_CLASSIFICATION	4.0770909269848484E-7	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999532840366401	WITHOUT_CLASSIFICATION	4.6715963359910415E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9999968197240243	WITHOUT_CLASSIFICATION	3.180275975746595E-6	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999993678700595	WITHOUT_CLASSIFICATION	6.321299405605309E-7	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.999993748459764	WITHOUT_CLASSIFICATION	6.25154023606522E-6	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999959127513751	WITHOUT_CLASSIFICATION	4.0872486249143405E-6	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999997723012181	WITHOUT_CLASSIFICATION	2.276987819890444E-7	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999998351076678	WITHOUT_CLASSIFICATION	1.6489233228128768E-7	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999525611105956	WITHOUT_CLASSIFICATION	4.743888940434494E-5	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999999848499156	WITHOUT_CLASSIFICATION	1.515008440069244E-8	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999954313536024	WITHOUT_CLASSIFICATION	4.5686463976410195E-6	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.999997581415238	WITHOUT_CLASSIFICATION	2.4185847619834104E-6	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999998036342802	WITHOUT_CLASSIFICATION	1.9636571971118815E-7	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.999998796672749	WITHOUT_CLASSIFICATION	1.203327251011773E-6	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.999998796672749	WITHOUT_CLASSIFICATION	1.203327251011773E-6	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999882461650675	WITHOUT_CLASSIFICATION	1.1753834932419405E-5	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999949523763243	WITHOUT_CLASSIFICATION	5.047623675720618E-6	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999997411039546	WITHOUT_CLASSIFICATION	2.588960454156781E-7	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999998182745001	WITHOUT_CLASSIFICATION	1.8172549986424096E-7	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999975392135806	WITHOUT_CLASSIFICATION	2.460786419352253E-6	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999992993114891	WITHOUT_CLASSIFICATION	7.006885108741344E-7	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999999997809387	WITHOUT_CLASSIFICATION	2.190612203657356E-10	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999215763468505	WITHOUT_CLASSIFICATION	7.842365314942981E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.999992099469094	WITHOUT_CLASSIFICATION	7.900530905968089E-6	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999962512954054	WITHOUT_CLASSIFICATION	3.7487045945226843E-6	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999950058640323	WITHOUT_CLASSIFICATION	4.994135967615734E-6	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999999195995618	WITHOUT_CLASSIFICATION	8.040043819782413E-8	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9999975932840945	WITHOUT_CLASSIFICATION	2.4067159053508827E-6	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999994814590426	WITHOUT_CLASSIFICATION	5.185409574947982E-7	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9955128098496485	WITHOUT_CLASSIFICATION	0.004487190150351463	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999931691689518	WITHOUT_CLASSIFICATION	6.830831048193168E-6	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999984543965919	WITHOUT_CLASSIFICATION	1.5456034081547412E-6	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.999999160779472	WITHOUT_CLASSIFICATION	8.392205280417534E-7	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999988868236799	WITHOUT_CLASSIFICATION	1.1131763200588144E-6	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999983687285058	WITHOUT_CLASSIFICATION	1.631271494298991E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999954477858009	WITHOUT_CLASSIFICATION	4.552214199077939E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999954477858009	WITHOUT_CLASSIFICATION	4.552214199077939E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359217	WITHOUT_CLASSIFICATION	1.9664078197455988E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359217	WITHOUT_CLASSIFICATION	1.9664078197455988E-8	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999997304261264	WITHOUT_CLASSIFICATION	2.6957387362799575E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.999998989830622	WITHOUT_CLASSIFICATION	1.0101693780209007E-6	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999371557170907	WITHOUT_CLASSIFICATION	6.284428290924621E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.999999940334247	WITHOUT_CLASSIFICATION	5.966575296629902E-8	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999998614480486	WITHOUT_CLASSIFICATION	1.3855195137256762E-7	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999999026236878	WITHOUT_CLASSIFICATION	9.737631225472648E-8	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9740435441543902	WITHOUT_CLASSIFICATION	0.025956455845609693	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999993573132193	WITHOUT_CLASSIFICATION	6.426867806555288E-7	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999999980121226	WITHOUT_CLASSIFICATION	1.9878773512608002E-9	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999953807539214	WITHOUT_CLASSIFICATION	4.619246078600873E-6	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999984501476592	WITHOUT_CLASSIFICATION	1.5498523407713498E-6	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999996613454685	WITHOUT_CLASSIFICATION	3.38654531459593E-7	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999999549560974	WITHOUT_CLASSIFICATION	4.504390274716656E-8	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9997681704338142	WITHOUT_CLASSIFICATION	2.318295661858326E-4	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999997174830989	WITHOUT_CLASSIFICATION	2.825169010321597E-7	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999999700224308	WITHOUT_CLASSIFICATION	2.997756916334631E-8	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999999722301848	WITHOUT_CLASSIFICATION	2.7769815266922413E-8	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999998888972729	WITHOUT_CLASSIFICATION	1.1110272714488728E-7	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9999951204808255	WITHOUT_CLASSIFICATION	4.8795191744563135E-6	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9999835250447385	WITHOUT_CLASSIFICATION	1.6474955261458428E-5	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999987393419112	WITHOUT_CLASSIFICATION	1.2606580887893952E-6	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999999936423754	WITHOUT_CLASSIFICATION	6.357624720465453E-9	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9999928861954204	WITHOUT_CLASSIFICATION	7.113804579545761E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999916083128483	WITHOUT_CLASSIFICATION	8.391687151710844E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999994847224493	WITHOUT_CLASSIFICATION	5.15277550776438E-7	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.999999915264652	WITHOUT_CLASSIFICATION	8.473534798759949E-8	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9999886305759154	WITHOUT_CLASSIFICATION	1.1369424084738666E-5	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.999999751000887	WITHOUT_CLASSIFICATION	2.489991129615846E-7	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.999426872805613	WITHOUT_CLASSIFICATION	5.731271943870772E-4	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999992293177398	WITHOUT_CLASSIFICATION	7.706822600811556E-7	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999992293177398	WITHOUT_CLASSIFICATION	7.706822600811556E-7	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.999998683031878	WITHOUT_CLASSIFICATION	1.3169681219742812E-6	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.999998933615953	WITHOUT_CLASSIFICATION	1.0663840469175883E-6	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999999172168544	WITHOUT_CLASSIFICATION	8.27831455240944E-8	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999997951101326	WITHOUT_CLASSIFICATION	2.0488986740675845E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999910082602546	WITHOUT_CLASSIFICATION	8.991739745451017E-6	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999998805945296	WITHOUT_CLASSIFICATION	1.1940547041960476E-7	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999999373516141	WITHOUT_CLASSIFICATION	6.2648385895208E-8	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999999952139902	WITHOUT_CLASSIFICATION	4.7860098409591356E-9	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999999953395458	WITHOUT_CLASSIFICATION	4.660454160187808E-9	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.999990515184892	WITHOUT_CLASSIFICATION	9.484815107940431E-6	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999999310631729	WITHOUT_CLASSIFICATION	6.893682718318183E-8	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999999866697833	WITHOUT_CLASSIFICATION	1.333021665502096E-8	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999998181111276	WITHOUT_CLASSIFICATION	1.8188887253497376E-7	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999932815818146	WITHOUT_CLASSIFICATION	6.71841818537894E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999999497941181	WITHOUT_CLASSIFICATION	5.0205881804461056E-8	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999986409645131	WITHOUT_CLASSIFICATION	1.3590354869698364E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999652340533147	WITHOUT_CLASSIFICATION	3.476594668526041E-5	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999998997527987	WITHOUT_CLASSIFICATION	1.0024720131916887E-7	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999994990846923	WITHOUT_CLASSIFICATION	5.009153076486894E-7	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9997213678603863	WITHOUT_CLASSIFICATION	2.78632139613654E-4	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999999551851013	WITHOUT_CLASSIFICATION	4.4814898758445605E-8	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999990697845359	WITHOUT_CLASSIFICATION	9.302154639736939E-7	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999935211745645	WITHOUT_CLASSIFICATION	6.478825435537173E-6	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999996727102475	WITHOUT_CLASSIFICATION	3.2728975253816796E-7	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999926313399281	WITHOUT_CLASSIFICATION	7.3686600719674285E-6	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999982095852	WITHOUT_CLASSIFICATION	1.7904148000686244E-6	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999993892400874	WITHOUT_CLASSIFICATION	6.107599127201799E-7	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9997854690831569	WITHOUT_CLASSIFICATION	2.1453091684303435E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999999373012142	WITHOUT_CLASSIFICATION	6.269878583737596E-8	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9999875549079376	WITHOUT_CLASSIFICATION	1.2445092062393872E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999888056324355	WITHOUT_CLASSIFICATION	1.1194367564597147E-5	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999990214135535	WITHOUT_CLASSIFICATION	9.7858644649198E-7	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.999999937763641	WITHOUT_CLASSIFICATION	6.223635890751943E-8	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999909117961289	WITHOUT_CLASSIFICATION	9.08820387111976E-6	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9999667732243512	WITHOUT_CLASSIFICATION	3.322677564877545E-5	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999749803260105	WITHOUT_CLASSIFICATION	2.5019673989414845E-5	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999969820766825	WITHOUT_CLASSIFICATION	3.017923317449085E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9935847258270488	WITHOUT_CLASSIFICATION	0.006415274172951225	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999999223348722	WITHOUT_CLASSIFICATION	7.76651278086312E-8	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999989816496417	WITHOUT_CLASSIFICATION	1.0183503583103766E-6	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999999844470515	WITHOUT_CLASSIFICATION	1.555294852032418E-8	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999999969291583	WITHOUT_CLASSIFICATION	3.070841617369726E-9	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999994003358668	WITHOUT_CLASSIFICATION	5.996641331639261E-7	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999991683252333	WITHOUT_CLASSIFICATION	8.316747667029283E-7	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9999793819195637	WITHOUT_CLASSIFICATION	2.0618080436354346E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999997927883665	WITHOUT_CLASSIFICATION	2.0721163353459517E-7	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999996010657833	WITHOUT_CLASSIFICATION	3.989342167062902E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999994893802	WITHOUT_CLASSIFICATION	5.106197335350868E-10	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999998809431087	WITHOUT_CLASSIFICATION	1.1905689137674138E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999998283485826	WITHOUT_CLASSIFICATION	1.7165141741012375E-7	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999745492683787	WITHOUT_CLASSIFICATION	2.5450731621324066E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999592373379645	WITHOUT_CLASSIFICATION	4.076266203549729E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999778777101368	WITHOUT_CLASSIFICATION	2.212228986326388E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999793678890719	WITHOUT_CLASSIFICATION	2.0632110928053566E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999928457950432	WITHOUT_CLASSIFICATION	7.1542049567954374E-6	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999988701202398	WITHOUT_CLASSIFICATION	1.1298797602108367E-6	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999979810689297	WITHOUT_CLASSIFICATION	2.0189310703158617E-6	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9999971089241714	WITHOUT_CLASSIFICATION	2.891075828599987E-6	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999991812929673	WITHOUT_CLASSIFICATION	8.18707032666381E-7	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.999999249038955	WITHOUT_CLASSIFICATION	7.509610450504765E-7	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999893863434065	WITHOUT_CLASSIFICATION	1.0613656593470923E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999745492683787	WITHOUT_CLASSIFICATION	2.5450731621324066E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999778777101368	WITHOUT_CLASSIFICATION	2.212228986326388E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999592373379645	WITHOUT_CLASSIFICATION	4.076266203549729E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9999587879853952	WITHOUT_CLASSIFICATION	4.121201460487389E-5	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999956056222472	WITHOUT_CLASSIFICATION	4.394377752781065E-6	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999986122116661	WITHOUT_CLASSIFICATION	1.3877883339314984E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999998051583292	WITHOUT_CLASSIFICATION	1.9484167087433958E-7	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999994802584322	WITHOUT_CLASSIFICATION	5.197415678716799E-7	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999999771073804	WITHOUT_CLASSIFICATION	2.2892619559213623E-8	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999995979839594	WITHOUT_CLASSIFICATION	4.0201604056718954E-7	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.999999983973396	WITHOUT_CLASSIFICATION	1.6026604105448797E-8	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999960479492056	WITHOUT_CLASSIFICATION	3.952050794442129E-6	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.999999925236903	WITHOUT_CLASSIFICATION	7.476309704266786E-8	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999998781702976	WITHOUT_CLASSIFICATION	1.2182970239013147E-7	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9994488612972866	WITHOUT_CLASSIFICATION	5.511387027134073E-4	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999997219661955	WITHOUT_CLASSIFICATION	2.780338045138938E-7	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999998964783239	WITHOUT_CLASSIFICATION	1.0352167606675264E-7	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999526052279135	WITHOUT_CLASSIFICATION	4.739477208657166E-5	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999996821528309	WITHOUT_CLASSIFICATION	3.1784716912525913E-7	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999945867243564	WITHOUT_CLASSIFICATION	5.413275643675211E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999986636602457	WITHOUT_CLASSIFICATION	1.3363397543109058E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999986636602457	WITHOUT_CLASSIFICATION	1.3363397543109058E-6	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999998524320951	WITHOUT_CLASSIFICATION	1.475679048765775E-7	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999999966793861	WITHOUT_CLASSIFICATION	3.320614037128982E-9	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.999999984008168	WITHOUT_CLASSIFICATION	1.5991831987655872E-8	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9999669981697631	WITHOUT_CLASSIFICATION	3.300183023697827E-5	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999997777670857	WITHOUT_CLASSIFICATION	2.222329142556947E-7	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999999997955366	WITHOUT_CLASSIFICATION	2.04463402878654E-10	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999999910716046	WITHOUT_CLASSIFICATION	8.928395472460301E-9	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999997231030476	WITHOUT_CLASSIFICATION	2.7689695240488583E-7	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999999706064618	WITHOUT_CLASSIFICATION	2.9393538159213302E-8	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999999029840696	WITHOUT_CLASSIFICATION	9.701593030857775E-8	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999997411674985	WITHOUT_CLASSIFICATION	2.5883250154187886E-7	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999987196714742	WITHOUT_CLASSIFICATION	1.280328525730477E-6	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999984968852701	WITHOUT_CLASSIFICATION	1.5031147298618177E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.999996433181533	WITHOUT_CLASSIFICATION	3.566818466994588E-6	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.999997233973537	WITHOUT_CLASSIFICATION	2.7660264630172768E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999613409972	WITHOUT_CLASSIFICATION	3.865900266371112E-8	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999997553941504	WITHOUT_CLASSIFICATION	2.446058496407598E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999981019537268	WITHOUT_CLASSIFICATION	1.898046273253841E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999981019537268	WITHOUT_CLASSIFICATION	1.898046273253841E-6	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999973211647368	WITHOUT_CLASSIFICATION	2.6788352632039878E-6	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999978151971929	WITHOUT_CLASSIFICATION	2.184802806989405E-6	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999887426566808	WITHOUT_CLASSIFICATION	1.1257343319152723E-5	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999997256800212	WITHOUT_CLASSIFICATION	2.743199788410188E-7	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999993866586258	WITHOUT_CLASSIFICATION	6.133413742665258E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999981019537268	WITHOUT_CLASSIFICATION	1.898046273253841E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999981019537268	WITHOUT_CLASSIFICATION	1.898046273253841E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.99999999993838	WITHOUT_CLASSIFICATION	6.162002695158804E-11	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.99999999993838	WITHOUT_CLASSIFICATION	6.162002695158804E-11	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999984794024933	WITHOUT_CLASSIFICATION	1.520597506760335E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999996035997117	WITHOUT_CLASSIFICATION	3.964002882563132E-7	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999935105419321	WITHOUT_CLASSIFICATION	6.489458067929774E-6	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9998657876051585	WITHOUT_CLASSIFICATION	1.3421239484154039E-4	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999781570378412	WITHOUT_CLASSIFICATION	2.184296215887038E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999781570378412	WITHOUT_CLASSIFICATION	2.184296215887038E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999999551516358	WITHOUT_CLASSIFICATION	4.484836430453497E-8	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999621134849841	WITHOUT_CLASSIFICATION	3.7886515015836065E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997044577437	WITHOUT_CLASSIFICATION	2.9554225634759335E-7	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999999133817681	WITHOUT_CLASSIFICATION	8.661823187155468E-8	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999999364917	WITHOUT_CLASSIFICATION	6.35082219103069E-11	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999596584139	WITHOUT_CLASSIFICATION	4.034158598127937E-8	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9999491543845306	WITHOUT_CLASSIFICATION	5.0845615469520325E-5	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999993439074522	WITHOUT_CLASSIFICATION	6.560925477208331E-7	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.999993778445412	WITHOUT_CLASSIFICATION	6.221554587879649E-6	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999999998749066	WITHOUT_CLASSIFICATION	1.2509342099983044E-10	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9992209342069316	WITHOUT_CLASSIFICATION	7.790657930684253E-4	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999999378082508	WITHOUT_CLASSIFICATION	6.219174922280915E-8	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.99999774858887	WITHOUT_CLASSIFICATION	2.251411129965639E-6	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999999485356238	WITHOUT_CLASSIFICATION	5.146437607405828E-8	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999613409972	WITHOUT_CLASSIFICATION	3.865900266371112E-8	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999981019537268	WITHOUT_CLASSIFICATION	1.898046273253841E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.99999999993838	WITHOUT_CLASSIFICATION	6.162002695158804E-11	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999596584139	WITHOUT_CLASSIFICATION	4.034158598127937E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998423532888486	WITHOUT_CLASSIFICATION	1.576467111513918E-4	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998423532888486	WITHOUT_CLASSIFICATION	1.576467111513918E-4	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999995373167938	WITHOUT_CLASSIFICATION	4.626832060808272E-7	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999999998464826	WITHOUT_CLASSIFICATION	1.535175501685057E-10	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999999943196576	WITHOUT_CLASSIFICATION	5.680342524860074E-9	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999999470580416	WITHOUT_CLASSIFICATION	5.294195833011969E-8	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999989524085845	WITHOUT_CLASSIFICATION	1.0475914155836354E-6	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999998761917146	WITHOUT_CLASSIFICATION	1.2380828546893453E-7	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9999456323281923	WITHOUT_CLASSIFICATION	5.4367671807651985E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.999985237081465	WITHOUT_CLASSIFICATION	1.4762918535078929E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999964665955	WITHOUT_CLASSIFICATION	3.5334044544089558E-9	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999659126572	WITHOUT_CLASSIFICATION	3.40873428338292E-8	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999998682262622	WITHOUT_CLASSIFICATION	1.317737377186851E-7	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999999984891241	WITHOUT_CLASSIFICATION	1.510875815516719E-9	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999974111283253	WITHOUT_CLASSIFICATION	2.588871674731594E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999997553941504	WITHOUT_CLASSIFICATION	2.446058496407598E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.99999999993838	WITHOUT_CLASSIFICATION	6.162002695158804E-11	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999621134849841	WITHOUT_CLASSIFICATION	3.7886515015836065E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997044577437	WITHOUT_CLASSIFICATION	2.9554225634759335E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997044577437	WITHOUT_CLASSIFICATION	2.9554225634759335E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999999364917	WITHOUT_CLASSIFICATION	6.35082219103069E-11	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999596584139	WITHOUT_CLASSIFICATION	4.034158598127937E-8	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999596584139	WITHOUT_CLASSIFICATION	4.034158598127937E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998423532888486	WITHOUT_CLASSIFICATION	1.576467111513918E-4	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999996176022513	WITHOUT_CLASSIFICATION	3.8239774867508115E-7	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.999994132148038	WITHOUT_CLASSIFICATION	5.867851962000123E-6	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999995867492166	WITHOUT_CLASSIFICATION	4.132507834056445E-7	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999844751464	WITHOUT_CLASSIFICATION	1.552485360288405E-8	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9999975277451266	WITHOUT_CLASSIFICATION	2.472254873411711E-6	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9999442026105148	WITHOUT_CLASSIFICATION	5.57973894852084E-5	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999998804203681	WITHOUT_CLASSIFICATION	1.1957963185513723E-7	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999999269132318	WITHOUT_CLASSIFICATION	7.308676813959384E-8	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999999805823648	WITHOUT_CLASSIFICATION	1.941763508142484E-8	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999621134849841	WITHOUT_CLASSIFICATION	3.7886515015836065E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997044577437	WITHOUT_CLASSIFICATION	2.9554225634759335E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997044577437	WITHOUT_CLASSIFICATION	2.9554225634759335E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999999364917	WITHOUT_CLASSIFICATION	6.35082219103069E-11	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.999985237081465	WITHOUT_CLASSIFICATION	1.4762918535078929E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999659126572	WITHOUT_CLASSIFICATION	3.40873428338292E-8	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999955898605548	WITHOUT_CLASSIFICATION	4.410139445154628E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999999269946036	WITHOUT_CLASSIFICATION	7.3005396358608E-8	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999992944203232	WITHOUT_CLASSIFICATION	7.055796768123644E-7	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999992944203232	WITHOUT_CLASSIFICATION	7.055796768123644E-7	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999971983303665	WITHOUT_CLASSIFICATION	2.8016696335364553E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999987571208022	WITHOUT_CLASSIFICATION	1.2428791978108573E-6	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999997918486405	WITHOUT_CLASSIFICATION	2.0815135941033815E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.999998672621931	WITHOUT_CLASSIFICATION	1.3273780690161825E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999999800784971	WITHOUT_CLASSIFICATION	1.992150289985817E-8	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999999800784971	WITHOUT_CLASSIFICATION	1.992150289985817E-8	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999997781243297	WITHOUT_CLASSIFICATION	2.218756702716018E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999997781243297	WITHOUT_CLASSIFICATION	2.218756702716018E-7	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.999999909775462	WITHOUT_CLASSIFICATION	9.022453791581021E-8	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.999999909775462	WITHOUT_CLASSIFICATION	9.022453791581021E-8	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999986397218574	WITHOUT_CLASSIFICATION	1.360278142588471E-6	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999879904178084	WITHOUT_CLASSIFICATION	1.2009582191562076E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9999952570386761	WITHOUT_CLASSIFICATION	4.74296132388045E-6	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999989178678	WITHOUT_CLASSIFICATION	1.0821321999596231E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999995439034723	WITHOUT_CLASSIFICATION	4.560965276492245E-7	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999998199932119	WITHOUT_CLASSIFICATION	1.800067881784832E-7	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999999130985319	WITHOUT_CLASSIFICATION	8.690146814693749E-8	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999999840043007	WITHOUT_CLASSIFICATION	1.5995699284129847E-8	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999999659056524	WITHOUT_CLASSIFICATION	3.409434756318288E-8	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999997936316812	WITHOUT_CLASSIFICATION	2.063683188140788E-7	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999998105155125	WITHOUT_CLASSIFICATION	1.8948448760871064E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999983426003031	WITHOUT_CLASSIFICATION	1.6573996968650933E-6	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9999693059045072	WITHOUT_CLASSIFICATION	3.0694095492914006E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999852250054417	WITHOUT_CLASSIFICATION	1.4774994558342545E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999852250054417	WITHOUT_CLASSIFICATION	1.4774994558342545E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9999992179170478	WITHOUT_CLASSIFICATION	7.820829522197058E-7	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999999026236878	WITHOUT_CLASSIFICATION	9.737631225472648E-8	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9998789152392943	WITHOUT_CLASSIFICATION	1.2108476070560168E-4	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999999780403435	WITHOUT_CLASSIFICATION	2.1959656480021822E-8	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999999771680642	WITHOUT_CLASSIFICATION	2.283193582981155E-8	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999999618790533	WITHOUT_CLASSIFICATION	3.812094669981516E-8	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999999698823245	WITHOUT_CLASSIFICATION	3.0117675435859277E-8	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999986621558424	WITHOUT_CLASSIFICATION	1.3378441575331567E-6	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.999999631255485	WITHOUT_CLASSIFICATION	3.687445150452254E-7	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.999993359705777	WITHOUT_CLASSIFICATION	6.640294223097675E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999997772321803	WITHOUT_CLASSIFICATION	2.2276781982857303E-7	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9998250550872883	WITHOUT_CLASSIFICATION	1.749449127117303E-4	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999996357871085	WITHOUT_CLASSIFICATION	3.642128914648944E-7	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999974835621055	WITHOUT_CLASSIFICATION	2.5164378945829245E-6	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.999998934851251	WITHOUT_CLASSIFICATION	1.065148748989906E-6	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.999997832357265	WITHOUT_CLASSIFICATION	2.167642734990139E-6	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999861042881326	WITHOUT_CLASSIFICATION	1.389571186737602E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999999864816624	WITHOUT_CLASSIFICATION	1.3518337609596583E-8	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997200397899	WITHOUT_CLASSIFICATION	2.7996021016249E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997200397899	WITHOUT_CLASSIFICATION	2.7996021016249E-7	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999997146060365	WITHOUT_CLASSIFICATION	2.853939635375279E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999992003458715	WITHOUT_CLASSIFICATION	7.996541284536637E-7	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999783103446463	WITHOUT_CLASSIFICATION	2.168965535371763E-5	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999783103446463	WITHOUT_CLASSIFICATION	2.168965535371763E-5	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999988302434982	WITHOUT_CLASSIFICATION	1.1697565017379165E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.99999943848776	WITHOUT_CLASSIFICATION	5.615122399534547E-7	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999985135591319	WITHOUT_CLASSIFICATION	1.486440868000076E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999974022723166	WITHOUT_CLASSIFICATION	2.597727683310393E-6	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.999999252479005	WITHOUT_CLASSIFICATION	7.475209950186961E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999983203395885	WITHOUT_CLASSIFICATION	1.6796604114772716E-6	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999983203395885	WITHOUT_CLASSIFICATION	1.6796604114772716E-6	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999996721293947	WITHOUT_CLASSIFICATION	3.278706053837649E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.999999441328174	WITHOUT_CLASSIFICATION	5.586718260613035E-7	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999996897564238	WITHOUT_CLASSIFICATION	3.102435761310634E-7	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.999999575760495	WITHOUT_CLASSIFICATION	4.242395049915377E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999992003458715	WITHOUT_CLASSIFICATION	7.996541284536637E-7	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999992890105246	WITHOUT_CLASSIFICATION	7.109894754522716E-7	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999980984554383	WITHOUT_CLASSIFICATION	1.9015445616332904E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999980984554383	WITHOUT_CLASSIFICATION	1.9015445616332904E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994063222165	WITHOUT_CLASSIFICATION	5.936777835936449E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237802	WITHOUT_CLASSIFICATION	2.776219739223766E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237802	WITHOUT_CLASSIFICATION	2.776219739223766E-9	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999932929435965	WITHOUT_CLASSIFICATION	6.707056403431613E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999932929435965	WITHOUT_CLASSIFICATION	6.707056403431613E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999932929435965	WITHOUT_CLASSIFICATION	6.707056403431613E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237802	WITHOUT_CLASSIFICATION	2.776219739223766E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237802	WITHOUT_CLASSIFICATION	2.776219739223766E-9	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994063222165	WITHOUT_CLASSIFICATION	5.936777835936449E-7	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999999071998313	WITHOUT_CLASSIFICATION	9.280016873102395E-8	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999957128300142	WITHOUT_CLASSIFICATION	4.287169985749723E-6	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9999882324774511	WITHOUT_CLASSIFICATION	1.1767522548904393E-5	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999991707981879	WITHOUT_CLASSIFICATION	8.292018122283584E-7	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999982322812518	WITHOUT_CLASSIFICATION	1.767718748193081E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999999043457514	WITHOUT_CLASSIFICATION	9.565424858600954E-8	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999999890167324	WITHOUT_CLASSIFICATION	1.0983267736381457E-8	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9999947693464298	WITHOUT_CLASSIFICATION	5.2306535701341095E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999997772321803	WITHOUT_CLASSIFICATION	2.2276781982857303E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237802	WITHOUT_CLASSIFICATION	2.776219739223766E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237802	WITHOUT_CLASSIFICATION	2.776219739223766E-9	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999999685477112	WITHOUT_CLASSIFICATION	3.1452288894213233E-8	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999987319456123	WITHOUT_CLASSIFICATION	1.2680543877887268E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999995498737941	WITHOUT_CLASSIFICATION	4.501262058983694E-7	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9998531846540307	WITHOUT_CLASSIFICATION	1.4681534596934555E-4	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999999656383315	WITHOUT_CLASSIFICATION	3.436166852259972E-8	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999991248503799	WITHOUT_CLASSIFICATION	8.751496200634661E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.999999945919198	WITHOUT_CLASSIFICATION	5.4080801899543914E-8	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999996786940712	WITHOUT_CLASSIFICATION	3.2130592877531976E-7	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999999471815866	WITHOUT_CLASSIFICATION	5.281841349381184E-8	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9998920095788231	WITHOUT_CLASSIFICATION	1.0799042117681683E-4	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999957682972944	WITHOUT_CLASSIFICATION	4.231702705620938E-6	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999997828573458	WITHOUT_CLASSIFICATION	2.1714265425738818E-7	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999993766882366	WITHOUT_CLASSIFICATION	6.233117633264614E-7	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999812843136	WITHOUT_CLASSIFICATION	1.8715686490480377E-8	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999999989686911	WITHOUT_CLASSIFICATION	1.0313089611148272E-9	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999988269370164	WITHOUT_CLASSIFICATION	1.173062983663197E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999988269370164	WITHOUT_CLASSIFICATION	1.173062983663197E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999988269370164	WITHOUT_CLASSIFICATION	1.173062983663197E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999997599076589	WITHOUT_CLASSIFICATION	2.4009234109580996E-7	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999993421238074	WITHOUT_CLASSIFICATION	6.578761927225602E-7	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.999999815660356	WITHOUT_CLASSIFICATION	1.843396440342466E-7	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9990608381972537	WITHOUT_CLASSIFICATION	9.391618027462197E-4	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999999961894901	WITHOUT_CLASSIFICATION	3.810509966889458E-9	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999999965333425	WITHOUT_CLASSIFICATION	3.466657652663408E-9	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999999943057	WITHOUT_CLASSIFICATION	5.694373210738146E-12	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999999873727876	WITHOUT_CLASSIFICATION	1.2627212467069392E-8	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999999835433485	WITHOUT_CLASSIFICATION	1.6456651509612483E-8	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999991573144059	WITHOUT_CLASSIFICATION	8.426855941456467E-7	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999961878265232	WITHOUT_CLASSIFICATION	3.812173476802051E-6	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9999553497692177	WITHOUT_CLASSIFICATION	4.465023078221859E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999996721293947	WITHOUT_CLASSIFICATION	3.278706053837649E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237802	WITHOUT_CLASSIFICATION	2.776219739223766E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237802	WITHOUT_CLASSIFICATION	2.776219739223766E-9	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994063222165	WITHOUT_CLASSIFICATION	5.936777835936449E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999999043457514	WITHOUT_CLASSIFICATION	9.565424858600954E-8	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999987319456123	WITHOUT_CLASSIFICATION	1.2680543877887268E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9998531846540307	WITHOUT_CLASSIFICATION	1.4681534596934555E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999991248503799	WITHOUT_CLASSIFICATION	8.751496200634661E-7	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999995498737941	WITHOUT_CLASSIFICATION	4.501262058983694E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.999999945919198	WITHOUT_CLASSIFICATION	5.4080801899543914E-8	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9998920095788231	WITHOUT_CLASSIFICATION	1.0799042117681683E-4	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999999471815866	WITHOUT_CLASSIFICATION	5.281841349381184E-8	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999997828573458	WITHOUT_CLASSIFICATION	2.1714265425738818E-7	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999995676824734	WITHOUT_CLASSIFICATION	4.3231752658044306E-7	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999966371974229	WITHOUT_CLASSIFICATION	3.3628025770244146E-6	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999974848956645	WITHOUT_CLASSIFICATION	2.5151043354282446E-6	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999999000904075	WITHOUT_CLASSIFICATION	9.990959252903447E-8	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.999999600330968	WITHOUT_CLASSIFICATION	3.996690319235131E-7	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999988468871678	WITHOUT_CLASSIFICATION	1.1531128322243432E-6	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999974131810335	WITHOUT_CLASSIFICATION	2.5868189664886867E-6	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9998326095400434	WITHOUT_CLASSIFICATION	1.673904599567161E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999718144569311	WITHOUT_CLASSIFICATION	2.818554306882411E-5	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999994447929719	WITHOUT_CLASSIFICATION	5.552070281620087E-7	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.999999846220261	WITHOUT_CLASSIFICATION	1.537797390106659E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999970748328	WITHOUT_CLASSIFICATION	2.92516726073142E-9	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999836860105	WITHOUT_CLASSIFICATION	1.6313989499833123E-8	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999997658213468	WITHOUT_CLASSIFICATION	2.3417865317507457E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999951291890605	WITHOUT_CLASSIFICATION	4.870810939543271E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999488398863	WITHOUT_CLASSIFICATION	5.116011360674629E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.999999807238376	WITHOUT_CLASSIFICATION	1.9276162400519133E-7	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999984053992378	WITHOUT_CLASSIFICATION	1.5946007622234818E-6	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999994337408942	WITHOUT_CLASSIFICATION	5.662591058478738E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999982821449956	WITHOUT_CLASSIFICATION	1.7178550043866665E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999827807041	WITHOUT_CLASSIFICATION	1.7219295857278438E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999909072836846	WITHOUT_CLASSIFICATION	9.092716315437743E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999909072836846	WITHOUT_CLASSIFICATION	9.092716315437743E-6	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.999986517674978	WITHOUT_CLASSIFICATION	1.3482325022057824E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.999999997449776	WITHOUT_CLASSIFICATION	2.5502240076123318E-9	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941729697	WITHOUT_CLASSIFICATION	1.8305827030321507E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941729697	WITHOUT_CLASSIFICATION	1.8305827030321507E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941729697	WITHOUT_CLASSIFICATION	1.8305827030321507E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941729697	WITHOUT_CLASSIFICATION	1.8305827030321507E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999365838395202	WITHOUT_CLASSIFICATION	6.341616047981069E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999365838395202	WITHOUT_CLASSIFICATION	6.341616047981069E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999365838395202	WITHOUT_CLASSIFICATION	6.341616047981069E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999546164114802	WITHOUT_CLASSIFICATION	4.5383588519770666E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999546164114802	WITHOUT_CLASSIFICATION	4.5383588519770666E-5	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9999313783668007	WITHOUT_CLASSIFICATION	6.862163319935141E-5	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999786459607463	WITHOUT_CLASSIFICATION	2.1354039253732774E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.999999997449776	WITHOUT_CLASSIFICATION	2.5502240076123318E-9	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999994583746143	WITHOUT_CLASSIFICATION	5.416253855797636E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941729697	WITHOUT_CLASSIFICATION	1.8305827030321507E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941729697	WITHOUT_CLASSIFICATION	1.8305827030321507E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941729697	WITHOUT_CLASSIFICATION	1.8305827030321507E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999365838395202	WITHOUT_CLASSIFICATION	6.341616047981069E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999365838395202	WITHOUT_CLASSIFICATION	6.341616047981069E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999546164114802	WITHOUT_CLASSIFICATION	4.5383588519770666E-5	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999786459607463	WITHOUT_CLASSIFICATION	2.1354039253732774E-5	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999995227807563	WITHOUT_CLASSIFICATION	4.772192437250256E-7	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999995227807563	WITHOUT_CLASSIFICATION	4.772192437250256E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999998365531375	WITHOUT_CLASSIFICATION	1.6344686255437771E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999998365531375	WITHOUT_CLASSIFICATION	1.6344686255437771E-7	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999968565515772	WITHOUT_CLASSIFICATION	3.1434484228411397E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999968565515772	WITHOUT_CLASSIFICATION	3.1434484228411397E-6	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999969388623002	WITHOUT_CLASSIFICATION	3.061137699764661E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999992319680816	WITHOUT_CLASSIFICATION	7.68031918477387E-7	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999992319680816	WITHOUT_CLASSIFICATION	7.68031918477387E-7	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999996650119107	WITHOUT_CLASSIFICATION	3.349880892024875E-7	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999996650119107	WITHOUT_CLASSIFICATION	3.349880892024875E-7	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9999999567147556	WITHOUT_CLASSIFICATION	4.3285244358356345E-8	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999996810459745	WITHOUT_CLASSIFICATION	3.18954025596595E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999996810459745	WITHOUT_CLASSIFICATION	3.18954025596595E-7	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999995250785123	WITHOUT_CLASSIFICATION	4.749214877978306E-7	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999870462161069	WITHOUT_CLASSIFICATION	1.2953783892976917E-5	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999989548378306	WITHOUT_CLASSIFICATION	1.0451621693627193E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941729697	WITHOUT_CLASSIFICATION	1.8305827030321507E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941729697	WITHOUT_CLASSIFICATION	1.8305827030321507E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999995250785123	WITHOUT_CLASSIFICATION	4.749214877978306E-7	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999979341715948	WITHOUT_CLASSIFICATION	2.0658284053363163E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999994248082501	WITHOUT_CLASSIFICATION	5.751917499386062E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999994248082501	WITHOUT_CLASSIFICATION	5.751917499386062E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999994248082501	WITHOUT_CLASSIFICATION	5.751917499386062E-7	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999997982702168	WITHOUT_CLASSIFICATION	2.0172978313108264E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999997761535306	WITHOUT_CLASSIFICATION	2.238464692369136E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999986094382918	WITHOUT_CLASSIFICATION	1.3905617082386501E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999986094382918	WITHOUT_CLASSIFICATION	1.3905617082386501E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999930553767	WITHOUT_CLASSIFICATION	6.944623272123256E-9	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999862899467	WITHOUT_CLASSIFICATION	1.371005322326098E-8	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999832407496	WITHOUT_CLASSIFICATION	1.6759250449052553E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999999445612453	WITHOUT_CLASSIFICATION	5.543875473978553E-8	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999998422436557	WITHOUT_CLASSIFICATION	1.5775634426412206E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999994849032371	WITHOUT_CLASSIFICATION	5.150967629084299E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999994849032371	WITHOUT_CLASSIFICATION	5.150967629084299E-7	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999998287624137	WITHOUT_CLASSIFICATION	1.7123758635530782E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999475232550304	WITHOUT_CLASSIFICATION	5.247674496949439E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999475232550304	WITHOUT_CLASSIFICATION	5.247674496949439E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941729697	WITHOUT_CLASSIFICATION	1.8305827030321507E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999994248082501	WITHOUT_CLASSIFICATION	5.751917499386062E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999997761535306	WITHOUT_CLASSIFICATION	2.238464692369136E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999986094382918	WITHOUT_CLASSIFICATION	1.3905617082386501E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999930553767	WITHOUT_CLASSIFICATION	6.944623272123256E-9	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999862899467	WITHOUT_CLASSIFICATION	1.371005322326098E-8	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999832407496	WITHOUT_CLASSIFICATION	1.6759250449052553E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999999445612453	WITHOUT_CLASSIFICATION	5.543875473978553E-8	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999475232550304	WITHOUT_CLASSIFICATION	5.247674496949439E-5	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999992951580489	WITHOUT_CLASSIFICATION	7.048419511941606E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999987434611567	WITHOUT_CLASSIFICATION	1.2565388432544099E-6	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999991952675147	WITHOUT_CLASSIFICATION	8.047324852999299E-7	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999999489817663	WITHOUT_CLASSIFICATION	5.10182338121077E-8	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999981190682309	WITHOUT_CLASSIFICATION	1.8809317692104024E-6	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999993964419348	WITHOUT_CLASSIFICATION	6.035580652677904E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999995575004698	WITHOUT_CLASSIFICATION	4.424995302614749E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999995575004698	WITHOUT_CLASSIFICATION	4.424995302614749E-7	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.999997904368848	WITHOUT_CLASSIFICATION	2.0956311521017314E-6	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999978371779554	WITHOUT_CLASSIFICATION	2.162822044625464E-6	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999847745661052	WITHOUT_CLASSIFICATION	1.5225433894837588E-5	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999993529647527	WITHOUT_CLASSIFICATION	6.4703524726342E-7	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999943582097152	WITHOUT_CLASSIFICATION	5.641790284865621E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999943582097152	WITHOUT_CLASSIFICATION	5.641790284865621E-6	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.99999987677754	WITHOUT_CLASSIFICATION	1.2322246011580308E-7	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999998376086672	WITHOUT_CLASSIFICATION	1.6239133278748595E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.999999710081131	WITHOUT_CLASSIFICATION	2.8991886894428E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.999999710081131	WITHOUT_CLASSIFICATION	2.8991886894428E-7	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9999991227912831	WITHOUT_CLASSIFICATION	8.772087170154162E-7	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999983900593306	WITHOUT_CLASSIFICATION	1.6099406694565343E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999998422436557	WITHOUT_CLASSIFICATION	1.5775634426412206E-7	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999996947616355	WITHOUT_CLASSIFICATION	3.0523836447077863E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.999999780954328	WITHOUT_CLASSIFICATION	2.1904567203204851E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999988979110817	WITHOUT_CLASSIFICATION	1.1020889184225164E-6	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999998860560829	WITHOUT_CLASSIFICATION	1.1394391713581811E-7	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999923157912355	WITHOUT_CLASSIFICATION	7.68420876449373E-6	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999997162593798	WITHOUT_CLASSIFICATION	2.8374062019178853E-7	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999952616561487	WITHOUT_CLASSIFICATION	4.738343851285876E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999999990078764	WITHOUT_CLASSIFICATION	9.921236318406069E-10	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999999397833702	WITHOUT_CLASSIFICATION	6.021662983873764E-8	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999999397833702	WITHOUT_CLASSIFICATION	6.021662983873764E-8	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999998678542354	WITHOUT_CLASSIFICATION	1.3214576462050456E-7	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999998678542354	WITHOUT_CLASSIFICATION	1.3214576462050456E-7	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999999788668696	WITHOUT_CLASSIFICATION	2.1133130301114786E-8	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999211931110062	WITHOUT_CLASSIFICATION	7.880688899373167E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999211931110062	WITHOUT_CLASSIFICATION	7.880688899373167E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999211931110062	WITHOUT_CLASSIFICATION	7.880688899373167E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999996527359125	WITHOUT_CLASSIFICATION	3.472640875826151E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999999270012445	WITHOUT_CLASSIFICATION	7.299875546652701E-8	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999999270012445	WITHOUT_CLASSIFICATION	7.299875546652701E-8	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999998826644366	WITHOUT_CLASSIFICATION	1.1733556331263843E-7	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.999876875592836	WITHOUT_CLASSIFICATION	1.2312440716411922E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999996738092397	WITHOUT_CLASSIFICATION	3.261907602939846E-7	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999999922372195	WITHOUT_CLASSIFICATION	7.762780459867297E-9	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9999633558656144	WITHOUT_CLASSIFICATION	3.664413438572815E-5	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999991147166396	WITHOUT_CLASSIFICATION	8.852833604335678E-7	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999921377859511	WITHOUT_CLASSIFICATION	7.862214048966969E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999836860105	WITHOUT_CLASSIFICATION	1.6313989499833123E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999836860105	WITHOUT_CLASSIFICATION	1.6313989499833123E-8	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999996527359125	WITHOUT_CLASSIFICATION	3.472640875826151E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999998826644366	WITHOUT_CLASSIFICATION	1.1733556331263843E-7	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999999310255108	WITHOUT_CLASSIFICATION	6.897448919368191E-8	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.999876875592836	WITHOUT_CLASSIFICATION	1.2312440716411922E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999996738092397	WITHOUT_CLASSIFICATION	3.261907602939846E-7	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999999453951645	WITHOUT_CLASSIFICATION	5.4604835643035096E-8	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999998748333918	WITHOUT_CLASSIFICATION	1.2516660812102283E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999777294515	WITHOUT_CLASSIFICATION	2.2270548545912827E-8	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999883159472123	WITHOUT_CLASSIFICATION	1.1684052787739407E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999978572609567	WITHOUT_CLASSIFICATION	2.1427390432569886E-6	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999995853843653	WITHOUT_CLASSIFICATION	4.146156347937048E-7	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999974742552596	WITHOUT_CLASSIFICATION	2.52574474030291E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999999453951645	WITHOUT_CLASSIFICATION	5.4604835643035096E-8	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999983756594023	WITHOUT_CLASSIFICATION	1.6243405977231767E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999983756594023	WITHOUT_CLASSIFICATION	1.6243405977231767E-6	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999915431695247	WITHOUT_CLASSIFICATION	8.456830475396705E-6	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999961323329466	WITHOUT_CLASSIFICATION	3.867667053370887E-6	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999725529631263	WITHOUT_CLASSIFICATION	2.7447036873662462E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999989935045029	WITHOUT_CLASSIFICATION	1.0064954970688615E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999999023685092	WITHOUT_CLASSIFICATION	9.763149071506809E-8	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999999988318835	WITHOUT_CLASSIFICATION	1.1681165539084131E-9	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999998308513951	WITHOUT_CLASSIFICATION	1.6914860486600457E-7	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999997121050812	WITHOUT_CLASSIFICATION	2.8789491879837145E-7	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999997005130328	WITHOUT_CLASSIFICATION	2.9948696722239004E-7	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999997196141526	WITHOUT_CLASSIFICATION	2.8038584736421946E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999997129957641	WITHOUT_CLASSIFICATION	2.870042359562679E-7	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999989935045029	WITHOUT_CLASSIFICATION	1.0064954970688615E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999999023685092	WITHOUT_CLASSIFICATION	9.763149071506809E-8	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.999996316145695	WITHOUT_CLASSIFICATION	3.683854305145077E-6	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999999047688322	WITHOUT_CLASSIFICATION	9.523116785157425E-8	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999993396012489	WITHOUT_CLASSIFICATION	6.603987510634415E-7	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9999970822689503	WITHOUT_CLASSIFICATION	2.9177310496384578E-6	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999997057098473	WITHOUT_CLASSIFICATION	2.942901526135983E-7	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9999786286801943	WITHOUT_CLASSIFICATION	2.13713198058368E-5	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9999806510061644	WITHOUT_CLASSIFICATION	1.9348993835577587E-5	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999997275622944	WITHOUT_CLASSIFICATION	2.7243770564875657E-7	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999955627752877	WITHOUT_CLASSIFICATION	4.43722471241492E-6	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999997523566421	WITHOUT_CLASSIFICATION	2.4764335787867086E-7	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9999914197475337	WITHOUT_CLASSIFICATION	8.58025246621219E-6	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999997146419236	WITHOUT_CLASSIFICATION	2.8535807632161753E-7	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999993140593115	WITHOUT_CLASSIFICATION	6.859406885135289E-7	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.999999716482275	WITHOUT_CLASSIFICATION	2.8351772501731726E-7	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9999868070657253	WITHOUT_CLASSIFICATION	1.3192934274739151E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999988373908962	WITHOUT_CLASSIFICATION	1.1626091036771984E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999822917802095	WITHOUT_CLASSIFICATION	1.7708219790465684E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999886970482	WITHOUT_CLASSIFICATION	1.13029517638996E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999886722978	WITHOUT_CLASSIFICATION	1.1327702203853E-8	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999995399187154	WITHOUT_CLASSIFICATION	4.6008128465378966E-7	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999822917802095	WITHOUT_CLASSIFICATION	1.7708219790465684E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999886970482	WITHOUT_CLASSIFICATION	1.13029517638996E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999886722978	WITHOUT_CLASSIFICATION	1.1327702203853E-8	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999937711427439	WITHOUT_CLASSIFICATION	6.228857256184265E-6	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999988732776389	WITHOUT_CLASSIFICATION	1.126722361086693E-6	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999975926084226	WITHOUT_CLASSIFICATION	2.4073915774719996E-6	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9999850095976275	WITHOUT_CLASSIFICATION	1.4990402372558025E-5	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9997532372756267	WITHOUT_CLASSIFICATION	2.467627243731974E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.99999497010278	WITHOUT_CLASSIFICATION	5.0298972199913336E-6	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999084473486446	WITHOUT_CLASSIFICATION	9.15526513554649E-5	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999999992821343	WITHOUT_CLASSIFICATION	7.178655787161546E-10	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999996932894778	WITHOUT_CLASSIFICATION	3.0671052222226003E-7	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.999999659013216	WITHOUT_CLASSIFICATION	3.409867840069899E-7	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9695994448890422	WITHOUT_CLASSIFICATION	0.030400555110957923	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999999573338351	WITHOUT_CLASSIFICATION	4.2666164885883806E-8	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999999030359081	WITHOUT_CLASSIFICATION	9.696409183613685E-8	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999999739868258	WITHOUT_CLASSIFICATION	2.601317412291429E-8	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.999999780679057	WITHOUT_CLASSIFICATION	2.193209429480465E-7	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999999686613702	WITHOUT_CLASSIFICATION	3.133862986690079E-8	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.999997452423535	WITHOUT_CLASSIFICATION	2.5475764650476838E-6	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999911315216049	WITHOUT_CLASSIFICATION	8.868478395178422E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999729362613	WITHOUT_CLASSIFICATION	2.706373863327778E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999877206122	WITHOUT_CLASSIFICATION	1.2279387752128403E-8	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999990226672189	WITHOUT_CLASSIFICATION	9.773327811740608E-7	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999967673906529	WITHOUT_CLASSIFICATION	3.2326093469722494E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999967673906529	WITHOUT_CLASSIFICATION	3.2326093469722494E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999997437265243	WITHOUT_CLASSIFICATION	2.5627347565185465E-7	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999997437265243	WITHOUT_CLASSIFICATION	2.5627347565185465E-7	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.999999996598203	WITHOUT_CLASSIFICATION	3.4017968991648456E-9	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.999999996598203	WITHOUT_CLASSIFICATION	3.4017968991648456E-9	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999980979517	WITHOUT_CLASSIFICATION	1.9020483056425533E-9	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999989677335	WITHOUT_CLASSIFICATION	1.0322664385069231E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999758956624	WITHOUT_CLASSIFICATION	2.410433765130018E-8	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999999939590961	WITHOUT_CLASSIFICATION	6.040903894046882E-9	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999981847838	WITHOUT_CLASSIFICATION	1.8152160827944967E-9	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999984657074	WITHOUT_CLASSIFICATION	1.5342925197677167E-9	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999999926111474	WITHOUT_CLASSIFICATION	7.388852703585402E-9	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.999999929343476	WITHOUT_CLASSIFICATION	7.065652389518211E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999836860105	WITHOUT_CLASSIFICATION	1.6313989499833123E-8	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999980979517	WITHOUT_CLASSIFICATION	1.9020483056425533E-9	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999989677335	WITHOUT_CLASSIFICATION	1.0322664385069231E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999758956624	WITHOUT_CLASSIFICATION	2.410433765130018E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999981847838	WITHOUT_CLASSIFICATION	1.8152160827944967E-9	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999984657074	WITHOUT_CLASSIFICATION	1.5342925197677167E-9	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999962347997866	WITHOUT_CLASSIFICATION	3.765200213393146E-6	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999996488257424	WITHOUT_CLASSIFICATION	3.5117425754346626E-7	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9998361911608746	WITHOUT_CLASSIFICATION	1.6380883912534044E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9998361911608746	WITHOUT_CLASSIFICATION	1.6380883912534044E-4	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.999999682343824	WITHOUT_CLASSIFICATION	3.1765617601970675E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999959113118413	WITHOUT_CLASSIFICATION	4.088688158734958E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.999998562025499	WITHOUT_CLASSIFICATION	1.43797450109784E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999999553865078	WITHOUT_CLASSIFICATION	4.461349219443844E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999999553865078	WITHOUT_CLASSIFICATION	4.461349219443844E-7	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.999998495615672	WITHOUT_CLASSIFICATION	1.5043843280982644E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999998779209808	WITHOUT_CLASSIFICATION	1.2207901913635206E-7	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999998751181132	WITHOUT_CLASSIFICATION	1.2488188687109575E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999998569046425	WITHOUT_CLASSIFICATION	1.4309535737730016E-7	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.999988322104015	WITHOUT_CLASSIFICATION	1.1677895984972266E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999997658213468	WITHOUT_CLASSIFICATION	2.3417865317507457E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999951291890605	WITHOUT_CLASSIFICATION	4.870810939543271E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999488398863	WITHOUT_CLASSIFICATION	5.116011360674629E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.999999807238376	WITHOUT_CLASSIFICATION	1.9276162400519133E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999982821449956	WITHOUT_CLASSIFICATION	1.7178550043866665E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999827807041	WITHOUT_CLASSIFICATION	1.7219295857278438E-8	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.999998495615672	WITHOUT_CLASSIFICATION	1.5043843280982644E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999998779209808	WITHOUT_CLASSIFICATION	1.2207901913635206E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999998569046425	WITHOUT_CLASSIFICATION	1.4309535737730016E-7	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.999999934832087	WITHOUT_CLASSIFICATION	6.516791286031482E-8	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.999998562025499	WITHOUT_CLASSIFICATION	1.43797450109784E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.999998562025499	WITHOUT_CLASSIFICATION	1.43797450109784E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999997129957641	WITHOUT_CLASSIFICATION	2.870042359562679E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999997129957641	WITHOUT_CLASSIFICATION	2.870042359562679E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998886151255651	WITHOUT_CLASSIFICATION	1.1138487443482772E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998886151255651	WITHOUT_CLASSIFICATION	1.1138487443482772E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999999684348427	WITHOUT_CLASSIFICATION	3.156515725080339E-8	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999999412845018	WITHOUT_CLASSIFICATION	5.8715498127841644E-8	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999939252856119	WITHOUT_CLASSIFICATION	6.074714388112974E-6	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999958866529225	WITHOUT_CLASSIFICATION	4.113347077605978E-6	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9999999701103964	WITHOUT_CLASSIFICATION	2.9889603622610384E-8	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999999189177832	WITHOUT_CLASSIFICATION	8.108221691786945E-8	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9998436603701477	WITHOUT_CLASSIFICATION	1.5633962985225897E-4	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999999991279874	WITHOUT_CLASSIFICATION	8.720126984299201E-10	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999997931868966	WITHOUT_CLASSIFICATION	2.0681310344977613E-7	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999999959122541	WITHOUT_CLASSIFICATION	4.087745922231359E-9	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999999411671471	WITHOUT_CLASSIFICATION	5.8832852813401915E-8	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999974560907842	WITHOUT_CLASSIFICATION	2.5439092158575095E-6	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.99999998334174	WITHOUT_CLASSIFICATION	1.6658259994746483E-8	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999999714361889	WITHOUT_CLASSIFICATION	2.8563811130968224E-8	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999999831324489	WITHOUT_CLASSIFICATION	1.6867551219489204E-8	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999966927920287	WITHOUT_CLASSIFICATION	3.307207971353373E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999989645204497	WITHOUT_CLASSIFICATION	1.0354795503336588E-6	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999998091971279	WITHOUT_CLASSIFICATION	1.9080287206725114E-7	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999999884624674	WITHOUT_CLASSIFICATION	1.1537532664156574E-8	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999951291890605	WITHOUT_CLASSIFICATION	4.870810939543271E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.999999807238376	WITHOUT_CLASSIFICATION	1.9276162400519133E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999909072836846	WITHOUT_CLASSIFICATION	9.092716315437743E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999986094382918	WITHOUT_CLASSIFICATION	1.3905617082386501E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999986094382918	WITHOUT_CLASSIFICATION	1.3905617082386501E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.999999934832087	WITHOUT_CLASSIFICATION	6.516791286031482E-8	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.999998562025499	WITHOUT_CLASSIFICATION	1.43797450109784E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999997129957641	WITHOUT_CLASSIFICATION	2.870042359562679E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998886151255651	WITHOUT_CLASSIFICATION	1.1138487443482772E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999983269379834	WITHOUT_CLASSIFICATION	1.6730620166131415E-6	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9998536060532777	WITHOUT_CLASSIFICATION	1.4639394672226445E-4	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999999986508015	WITHOUT_CLASSIFICATION	1.3491984400365779E-9	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9986755910160241	WITHOUT_CLASSIFICATION	0.0013244089839759105	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.999999874288583	WITHOUT_CLASSIFICATION	1.2571141710767706E-7	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.999999874288583	WITHOUT_CLASSIFICATION	1.2571141710767706E-7	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999999766373188	WITHOUT_CLASSIFICATION	2.3362681185788044E-8	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999999814726613	WITHOUT_CLASSIFICATION	1.8527338641339694E-8	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999286580127	WITHOUT_CLASSIFICATION	7.134198739116271E-8	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999998761447628	WITHOUT_CLASSIFICATION	1.23855237088192E-7	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999999948871015	WITHOUT_CLASSIFICATION	5.1128984980544645E-8	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999999948871015	WITHOUT_CLASSIFICATION	5.1128984980544645E-8	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.999999999286636	WITHOUT_CLASSIFICATION	7.133640043217926E-10	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999999978931046	WITHOUT_CLASSIFICATION	2.106895516060603E-9	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999999911807821	WITHOUT_CLASSIFICATION	8.819217958442353E-9	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999979917978015	WITHOUT_CLASSIFICATION	2.0082021985367235E-6	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999999131764331	WITHOUT_CLASSIFICATION	8.682356683131785E-8	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999999754379497	WITHOUT_CLASSIFICATION	2.4562050268399076E-8	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999895702020329	WITHOUT_CLASSIFICATION	1.04297979671246E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999999792426845	WITHOUT_CLASSIFICATION	2.0757315441484884E-8	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9989446544310814	WITHOUT_CLASSIFICATION	0.0010553455689185833	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9997723468848085	WITHOUT_CLASSIFICATION	2.276531151914105E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9998538088597898	WITHOUT_CLASSIFICATION	1.461911402102479E-4	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999991914206515	WITHOUT_CLASSIFICATION	8.08579348413436E-7	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999999999578372	WITHOUT_CLASSIFICATION	4.216280976002615E-11	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.999999916993325	WITHOUT_CLASSIFICATION	8.300667498686859E-8	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.999999920330047	WITHOUT_CLASSIFICATION	7.966995299819315E-8	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999999604787484	WITHOUT_CLASSIFICATION	3.952125149406475E-8	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999996311178622	WITHOUT_CLASSIFICATION	3.688821378056316E-7	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999886257169793	WITHOUT_CLASSIFICATION	1.1374283020522542E-5	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999995970865432	WITHOUT_CLASSIFICATION	4.0291345684684977E-7	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999999607759567	WITHOUT_CLASSIFICATION	3.9224043453646076E-8	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999997581474586	WITHOUT_CLASSIFICATION	2.418525413718728E-7	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999986344686733	WITHOUT_CLASSIFICATION	1.3655313267351333E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999986344686733	WITHOUT_CLASSIFICATION	1.3655313267351333E-6	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999950550030811	WITHOUT_CLASSIFICATION	4.944996918982902E-6	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9998611844740823	WITHOUT_CLASSIFICATION	1.3881552591760594E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999986621558424	WITHOUT_CLASSIFICATION	1.3378441575331567E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999986621558424	WITHOUT_CLASSIFICATION	1.3378441575331567E-6	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9805265580902164	DEFECT	0.019473441909783586	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999843361512214	WITHOUT_CLASSIFICATION	1.5663848778542627E-5	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999953572917233	WITHOUT_CLASSIFICATION	4.642708276710135E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999990655824628	WITHOUT_CLASSIFICATION	9.344175372006751E-7	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999990655824628	WITHOUT_CLASSIFICATION	9.344175372006751E-7	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9999875160993799	WITHOUT_CLASSIFICATION	1.2483900620024922E-5	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999997277468972	WITHOUT_CLASSIFICATION	2.722531028472644E-7	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999997276458598	WITHOUT_CLASSIFICATION	2.723541402721969E-7	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999980548287957	WITHOUT_CLASSIFICATION	1.945171204333425E-6	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999999896335817	WITHOUT_CLASSIFICATION	1.0366418214146174E-8	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999998340118835	WITHOUT_CLASSIFICATION	1.6598811655221698E-7	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999990185648889	WITHOUT_CLASSIFICATION	9.81435111137109E-7	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999971387732676	WITHOUT_CLASSIFICATION	2.861226732404979E-6	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999998341412685	WITHOUT_CLASSIFICATION	1.658587315602928E-7	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9998218164933921	WITHOUT_CLASSIFICATION	1.781835066079741E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999985350867442	WITHOUT_CLASSIFICATION	1.464913255890371E-6	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999998602746493	WITHOUT_CLASSIFICATION	1.397253507322422E-7	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999999524899177	WITHOUT_CLASSIFICATION	4.751008222898328E-8	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9998663956288175	WITHOUT_CLASSIFICATION	1.3360437118236303E-4	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999920551317638	WITHOUT_CLASSIFICATION	7.944868236225558E-6	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9987552101440552	WITHOUT_CLASSIFICATION	0.001244789855944753	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999999591195505	WITHOUT_CLASSIFICATION	4.088044945485558E-8	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.999996202519504	WITHOUT_CLASSIFICATION	3.7974804959649837E-6	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999677245144845	WITHOUT_CLASSIFICATION	3.227548551559089E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999964323901008	WITHOUT_CLASSIFICATION	3.5676098992064376E-6	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999981018373403	WITHOUT_CLASSIFICATION	1.8981626595971937E-6	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999997556309096	WITHOUT_CLASSIFICATION	2.443690903622713E-7	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999769984092235	WITHOUT_CLASSIFICATION	2.3001590776516376E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.999964344008958	WITHOUT_CLASSIFICATION	3.565599104201894E-5	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.999999864256039	WITHOUT_CLASSIFICATION	1.3574396093921693E-7	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9985583005132774	WITHOUT_CLASSIFICATION	0.0014416994867225833	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9903518269885747	WITHOUT_CLASSIFICATION	0.009648173011425308	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999999693843711	WITHOUT_CLASSIFICATION	3.0615628907042804E-8	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999964163075081	WITHOUT_CLASSIFICATION	3.5836924919049497E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999998453725615	WITHOUT_CLASSIFICATION	1.5462743844279124E-7	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.999999999533051	WITHOUT_CLASSIFICATION	4.669490204389113E-10	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9998663956288175	WITHOUT_CLASSIFICATION	1.3360437118236303E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999999693843711	WITHOUT_CLASSIFICATION	3.0615628907042804E-8	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999964163075081	WITHOUT_CLASSIFICATION	3.5836924919049497E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.999999999533051	WITHOUT_CLASSIFICATION	4.669490204389113E-10	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999999677523291	WITHOUT_CLASSIFICATION	3.224767091204708E-8	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999899865021415	WITHOUT_CLASSIFICATION	1.0013497858459759E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999769436979674	WITHOUT_CLASSIFICATION	2.305630203253239E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999999777084498	WITHOUT_CLASSIFICATION	2.2291550129412533E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999869079564	WITHOUT_CLASSIFICATION	1.3092043547798995E-8	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999999011224637	WITHOUT_CLASSIFICATION	9.88775362532661E-8	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999997228748612	WITHOUT_CLASSIFICATION	2.771251387650516E-7	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999999449224973	WITHOUT_CLASSIFICATION	5.5077502761162466E-8	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999999257151828	WITHOUT_CLASSIFICATION	7.428481727505278E-8	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9998997459433253	WITHOUT_CLASSIFICATION	1.0025405667467471E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999939693540701	WITHOUT_CLASSIFICATION	6.030645929861857E-6	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999939693540701	WITHOUT_CLASSIFICATION	6.030645929861857E-6	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999949887454915	WITHOUT_CLASSIFICATION	5.011254508554393E-6	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999983006251214	WITHOUT_CLASSIFICATION	1.699374878615578E-6	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.999999073403446	WITHOUT_CLASSIFICATION	9.265965539492928E-7	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999999543226192	WITHOUT_CLASSIFICATION	4.5677380749590305E-8	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999977260870774	WITHOUT_CLASSIFICATION	2.2739129225975356E-6	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999960323051825	WITHOUT_CLASSIFICATION	3.9676948174178645E-6	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.999998268963386	WITHOUT_CLASSIFICATION	1.7310366139992568E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9997885226214914	WITHOUT_CLASSIFICATION	2.1147737850852369E-4	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.999999998477373	WITHOUT_CLASSIFICATION	1.5226270827887964E-9	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999896444921	WITHOUT_CLASSIFICATION	1.0355507848408673E-8	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999999632368073	WITHOUT_CLASSIFICATION	3.67631927128916E-8	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999281796187	WITHOUT_CLASSIFICATION	7.182038132791705E-8	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999999983201381	WITHOUT_CLASSIFICATION	1.6798618236602728E-9	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.999999873756278	WITHOUT_CLASSIFICATION	1.2624372204587E-7	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.999999980463827	WITHOUT_CLASSIFICATION	1.953617301541735E-8	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999999343931846	WITHOUT_CLASSIFICATION	6.560681546759721E-8	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999999955185577	WITHOUT_CLASSIFICATION	4.481442351905169E-9	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.999999962970417	WITHOUT_CLASSIFICATION	3.702958297598069E-8	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999998973202238	WITHOUT_CLASSIFICATION	1.0267977614517177E-7	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999996628288182	WITHOUT_CLASSIFICATION	3.3717118181659714E-7	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999992610656439	WITHOUT_CLASSIFICATION	7.389343561249086E-7	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999985086216067	WITHOUT_CLASSIFICATION	1.4913783933303963E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999999956265724	WITHOUT_CLASSIFICATION	4.373427663321713E-9	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999996552979377	WITHOUT_CLASSIFICATION	3.4470206237003076E-7	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999999152535975	WITHOUT_CLASSIFICATION	8.474640254003488E-8	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999996334335126	WITHOUT_CLASSIFICATION	3.665664873760107E-7	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.9988695552565215	WITHOUT_CLASSIFICATION	0.0011304447434784847	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9999369083041868	WITHOUT_CLASSIFICATION	6.309169581316464E-5	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999977556301504	WITHOUT_CLASSIFICATION	2.2443698495060207E-6	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999992567814506	WITHOUT_CLASSIFICATION	7.432185493483436E-7	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.999998799084569	WITHOUT_CLASSIFICATION	1.200915431067328E-6	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999999160377605	WITHOUT_CLASSIFICATION	8.39622394456006E-8	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999999886330762	WITHOUT_CLASSIFICATION	1.1366923978112878E-8	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999998824022163	WITHOUT_CLASSIFICATION	1.1759778369450334E-7	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999999811926659	WITHOUT_CLASSIFICATION	1.880733414426162E-8	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999955704982021	WITHOUT_CLASSIFICATION	4.429501797916418E-6	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.99999999746515	WITHOUT_CLASSIFICATION	2.534849941416706E-9	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999989078127746	WITHOUT_CLASSIFICATION	1.092187225487405E-6	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999999409958847	WITHOUT_CLASSIFICATION	5.900411530321489E-8	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999999050235853	WITHOUT_CLASSIFICATION	9.497641463004653E-8	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9999283448848567	WITHOUT_CLASSIFICATION	7.165511514334143E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999794866227484	WITHOUT_CLASSIFICATION	2.051337725165812E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999978046306953	WITHOUT_CLASSIFICATION	2.1953693047310803E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999987667833524	WITHOUT_CLASSIFICATION	1.2332166476575625E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999882885401974	WITHOUT_CLASSIFICATION	1.1711459802584484E-5	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.999999053135018	WITHOUT_CLASSIFICATION	9.46864981906108E-7	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9999978852381171	WITHOUT_CLASSIFICATION	2.1147618829060915E-6	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999986520130726	WITHOUT_CLASSIFICATION	1.34798692740001E-6	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9999996035574128	WITHOUT_CLASSIFICATION	3.9644258717802524E-7	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999998271579525	WITHOUT_CLASSIFICATION	1.7284204742424671E-7	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999968222280966	WITHOUT_CLASSIFICATION	3.1777719033122262E-6	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999999994197482	WITHOUT_CLASSIFICATION	5.802518930450457E-10	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999992444279929	WITHOUT_CLASSIFICATION	7.555720071348581E-7	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999958390533605	WITHOUT_CLASSIFICATION	4.160946639481936E-6	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.999995116308347	WITHOUT_CLASSIFICATION	4.8836916530496984E-6	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999972237809572	WITHOUT_CLASSIFICATION	2.7762190428162836E-6	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999998728678777	WITHOUT_CLASSIFICATION	1.271321223771489E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999997381586897	WITHOUT_CLASSIFICATION	2.618413103845421E-7	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9993131647520184	WITHOUT_CLASSIFICATION	6.868352479817386E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999718161770005	WITHOUT_CLASSIFICATION	2.818382299939652E-5	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999718161770005	WITHOUT_CLASSIFICATION	2.818382299939652E-5	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999947067928295	WITHOUT_CLASSIFICATION	5.293207170408382E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999993018085658	WITHOUT_CLASSIFICATION	6.981914342948941E-7	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.999984858497317	WITHOUT_CLASSIFICATION	1.5141502682923235E-5	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999911959727875	WITHOUT_CLASSIFICATION	8.804027212582039E-6	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999984128885567	WITHOUT_CLASSIFICATION	1.5871114433810758E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9998641450419544	WITHOUT_CLASSIFICATION	1.358549580456642E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9999204467481824	WITHOUT_CLASSIFICATION	7.955325181755704E-5	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999999630778594	WITHOUT_CLASSIFICATION	3.692214054031834E-8	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.999999994981365	WITHOUT_CLASSIFICATION	5.018634997378768E-9	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999999999552955	WITHOUT_CLASSIFICATION	4.470438657076288E-11	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999994780465908	WITHOUT_CLASSIFICATION	5.219534091751513E-7	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999997480894284	WITHOUT_CLASSIFICATION	2.5191057165363324E-7	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999999007122528	WITHOUT_CLASSIFICATION	9.928774718893901E-8	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999999775726993	WITHOUT_CLASSIFICATION	2.2427300791105346E-8	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999996820047783	WITHOUT_CLASSIFICATION	3.179952217748146E-7	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999758890232469	WITHOUT_CLASSIFICATION	2.411097675314048E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999998535947237	WITHOUT_CLASSIFICATION	1.4640527633378288E-7	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999951289218237	WITHOUT_CLASSIFICATION	4.871078176343606E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9996286261957305	WITHOUT_CLASSIFICATION	3.7137380426949414E-4	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999999567620254	WITHOUT_CLASSIFICATION	4.3237974697449647E-8	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999933508504802	WITHOUT_CLASSIFICATION	6.649149519733578E-6	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999996448386131	WITHOUT_CLASSIFICATION	3.5516138683190765E-7	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999992710045682	WITHOUT_CLASSIFICATION	7.289954317046357E-7	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999999632218213	WITHOUT_CLASSIFICATION	3.677817865512516E-8	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999993612192198	WITHOUT_CLASSIFICATION	6.387807800559528E-7	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999983071594599	WITHOUT_CLASSIFICATION	1.6928405400787396E-6	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999999954247052	WITHOUT_CLASSIFICATION	4.5752948126158346E-9	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999999989169808	WITHOUT_CLASSIFICATION	1.0830191575632432E-9	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999999016301905	WITHOUT_CLASSIFICATION	9.836980951167658E-8	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9999677636340569	WITHOUT_CLASSIFICATION	3.223636594294811E-5	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999949993026658	WITHOUT_CLASSIFICATION	5.000697334303939E-6	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999992863159061	WITHOUT_CLASSIFICATION	7.136840939746268E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999424832295	WITHOUT_CLASSIFICATION	5.751677037743411E-8	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999999363017333	WITHOUT_CLASSIFICATION	6.369826674045151E-8	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999424832295	WITHOUT_CLASSIFICATION	5.751677037743411E-8	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999994230849036	WITHOUT_CLASSIFICATION	5.76915096336439E-7	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999721243423573	WITHOUT_CLASSIFICATION	2.7875657642777102E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999721243423573	WITHOUT_CLASSIFICATION	2.7875657642777102E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999721243423573	WITHOUT_CLASSIFICATION	2.7875657642777102E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999999941069527	WITHOUT_CLASSIFICATION	5.8930473423988285E-9	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999999941069527	WITHOUT_CLASSIFICATION	5.8930473423988285E-9	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.999999990145067	WITHOUT_CLASSIFICATION	9.854933051302555E-9	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9998594642090166	WITHOUT_CLASSIFICATION	1.405357909833771E-4	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.999999994289116	WITHOUT_CLASSIFICATION	5.710883928955425E-9	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999999879119833	WITHOUT_CLASSIFICATION	1.2088016763865767E-8	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999987120010567	WITHOUT_CLASSIFICATION	1.2879989432489896E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999999690838478	WITHOUT_CLASSIFICATION	3.0916152163963244E-8	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9999998557532537	WITHOUT_CLASSIFICATION	1.4424674640738032E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999998713694316	WITHOUT_CLASSIFICATION	1.2863056846671497E-7	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999999999046225	WITHOUT_CLASSIFICATION	9.53774288297984E-11	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999991953184906	WITHOUT_CLASSIFICATION	8.046815094150401E-7	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999998254509186	WITHOUT_CLASSIFICATION	1.7454908138461414E-7	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9996730576945011	WITHOUT_CLASSIFICATION	3.269423054988757E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999991402594418	WITHOUT_CLASSIFICATION	8.59740558119986E-7	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999999658441503	WITHOUT_CLASSIFICATION	3.4155849809612256E-8	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999999314918752	WITHOUT_CLASSIFICATION	6.850812487619996E-8	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999999403068379	WITHOUT_CLASSIFICATION	5.969316207323697E-8	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9999975845572121	WITHOUT_CLASSIFICATION	2.415442787881929E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999993926534593	WITHOUT_CLASSIFICATION	6.073465407226279E-7	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999993926534593	WITHOUT_CLASSIFICATION	6.073465407226279E-7	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999995285991602	WITHOUT_CLASSIFICATION	4.714008397822905E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999999773112717	WITHOUT_CLASSIFICATION	2.268872826944361E-8	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999999773112717	WITHOUT_CLASSIFICATION	2.268872826944361E-8	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9999874918748283	WITHOUT_CLASSIFICATION	1.2508125171711342E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.999999912216211	WITHOUT_CLASSIFICATION	8.778378905635804E-8	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999999378356135	WITHOUT_CLASSIFICATION	6.216438663527647E-8	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.999999715989923	WITHOUT_CLASSIFICATION	2.8401007696461274E-7	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999996084833688	WITHOUT_CLASSIFICATION	3.9151663119321373E-7	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9999996949120546	WITHOUT_CLASSIFICATION	3.0508794539639305E-7	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999992275280846	WITHOUT_CLASSIFICATION	7.724719154789378E-7	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999967965025155	WITHOUT_CLASSIFICATION	3.2034974844897393E-6	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.999999933003605	WITHOUT_CLASSIFICATION	6.699639493921777E-8	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999994435513098	WITHOUT_CLASSIFICATION	5.564486902988042E-7	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999997443097375	WITHOUT_CLASSIFICATION	2.556902625944669E-7	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999971213539091	WITHOUT_CLASSIFICATION	2.8786460910202173E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.999999915264652	WITHOUT_CLASSIFICATION	8.473534798759949E-8	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999994873586682	WITHOUT_CLASSIFICATION	5.126413318561811E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999998713694316	WITHOUT_CLASSIFICATION	1.2863056846671497E-7	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9999905806158286	WITHOUT_CLASSIFICATION	9.419384171466124E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999993550121491	WITHOUT_CLASSIFICATION	6.449878509137168E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999749867549	WITHOUT_CLASSIFICATION	2.5013245134114504E-8	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999749867549	WITHOUT_CLASSIFICATION	2.5013245134114504E-8	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.999989338397295	WITHOUT_CLASSIFICATION	1.066160270496869E-5	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.999993364789614	WITHOUT_CLASSIFICATION	6.635210385933858E-6	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999997270678276	WITHOUT_CLASSIFICATION	2.7293217242590774E-7	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999968228952848	WITHOUT_CLASSIFICATION	3.177104715246989E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999998918089262	WITHOUT_CLASSIFICATION	1.0819107387179997E-7	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999999952393779	WITHOUT_CLASSIFICATION	4.760622166223614E-9	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9999834905877306	WITHOUT_CLASSIFICATION	1.6509412269405867E-5	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9981002906484869	WITHOUT_CLASSIFICATION	0.001899709351513158	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999993625807715	WITHOUT_CLASSIFICATION	6.374192284996254E-7	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9999992170199122	WITHOUT_CLASSIFICATION	7.829800877104336E-7	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9999958611821251	WITHOUT_CLASSIFICATION	4.138817874806281E-6	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.999998678339315	WITHOUT_CLASSIFICATION	1.3216606850148307E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.5917902048896708	WITHOUT_CLASSIFICATION	0.4082097951103292	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.99999983124778	WITHOUT_CLASSIFICATION	1.6875221993753675E-7	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999999591650666	WITHOUT_CLASSIFICATION	4.0834933438530116E-8	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9999962095467675	WITHOUT_CLASSIFICATION	3.7904532325648856E-6	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999994027791599	WITHOUT_CLASSIFICATION	5.972208399950127E-7	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999999967645563	WITHOUT_CLASSIFICATION	3.2354436635963744E-9	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999999299152372	WITHOUT_CLASSIFICATION	7.008476275714758E-8	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999947632621774	WITHOUT_CLASSIFICATION	5.236737822586921E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999989737249563	WITHOUT_CLASSIFICATION	1.0262750436454196E-6	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999996026562712	WITHOUT_CLASSIFICATION	3.9734372873403987E-7	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999995209498289	WITHOUT_CLASSIFICATION	4.790501710654115E-7	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999999975922755	WITHOUT_CLASSIFICATION	2.4077244265259805E-9	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999999835644859	WITHOUT_CLASSIFICATION	1.6435514115474344E-8	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999987337470099	WITHOUT_CLASSIFICATION	1.266252990217386E-6	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9998551834975169	WITHOUT_CLASSIFICATION	1.4481650248312076E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.991856641678545	WITHOUT_CLASSIFICATION	0.008143358321454951	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.999999991861759	WITHOUT_CLASSIFICATION	8.138240877752354E-9	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9998937884242785	WITHOUT_CLASSIFICATION	1.0621157572157109E-4	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999823089641436	WITHOUT_CLASSIFICATION	1.769103585640044E-5	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999999942515635	WITHOUT_CLASSIFICATION	5.748436488402322E-9	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999852570494917	WITHOUT_CLASSIFICATION	1.4742950508308174E-5	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9935350667641244	WITHOUT_CLASSIFICATION	0.006464933235875605	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999962445075	WITHOUT_CLASSIFICATION	3.7554924239677735E-9	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999989457946757	WITHOUT_CLASSIFICATION	1.0542053242586115E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.991856641678545	WITHOUT_CLASSIFICATION	0.008143358321454951	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999024223366	WITHOUT_CLASSIFICATION	9.75776634175049E-8	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999962445075	WITHOUT_CLASSIFICATION	3.7554924239677735E-9	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9999998185588502	WITHOUT_CLASSIFICATION	1.814411498488376E-7	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999999837705812	WITHOUT_CLASSIFICATION	1.622941874317596E-8	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.999999986579227	WITHOUT_CLASSIFICATION	1.342077299943679E-8	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999998479522691	WITHOUT_CLASSIFICATION	1.5204773079840374E-7	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999996228540049	WITHOUT_CLASSIFICATION	3.7714599509561386E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999928479416105	WITHOUT_CLASSIFICATION	7.1520583895430636E-6	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999928479416105	WITHOUT_CLASSIFICATION	7.1520583895430636E-6	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999999785235172	WITHOUT_CLASSIFICATION	2.1476482802391066E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999781156272	WITHOUT_CLASSIFICATION	2.1884372838847815E-8	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999998201435712	WITHOUT_CLASSIFICATION	1.798564288347405E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999998201435712	WITHOUT_CLASSIFICATION	1.798564288347405E-7	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999994110986798	WITHOUT_CLASSIFICATION	5.889013200798742E-7	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9998258762445158	WITHOUT_CLASSIFICATION	1.741237554841455E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999673370315376	WITHOUT_CLASSIFICATION	3.266296846233164E-5	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999673370315376	WITHOUT_CLASSIFICATION	3.266296846233164E-5	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999944178922555	WITHOUT_CLASSIFICATION	5.582107744442883E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999973827789648	WITHOUT_CLASSIFICATION	2.617221035181974E-6	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999995605108208	WITHOUT_CLASSIFICATION	4.3948917909167524E-7	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999999126149042	WITHOUT_CLASSIFICATION	8.738509583763497E-8	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999778902663756	WITHOUT_CLASSIFICATION	2.2109733624333724E-5	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999964324318859	WITHOUT_CLASSIFICATION	3.5675681141521543E-6	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999995222085766	WITHOUT_CLASSIFICATION	4.777914234648964E-7	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999986997006272	WITHOUT_CLASSIFICATION	1.300299372888991E-6	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.99997857119589	WITHOUT_CLASSIFICATION	2.142880411007622E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.99999972856041	WITHOUT_CLASSIFICATION	2.7143959000961334E-7	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999994473390281	WITHOUT_CLASSIFICATION	5.526609718822766E-7	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999779536464257	WITHOUT_CLASSIFICATION	2.204635357429555E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999950179294331	WITHOUT_CLASSIFICATION	4.982070566776348E-6	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999996432313429	WITHOUT_CLASSIFICATION	3.5676865709205605E-7	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999979981624796	WITHOUT_CLASSIFICATION	2.0018375204093958E-6	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999995665177378	WITHOUT_CLASSIFICATION	4.3348226223587495E-7	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999097383026281	WITHOUT_CLASSIFICATION	9.026169737196831E-5	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.999995568208862	WITHOUT_CLASSIFICATION	4.4317911379315025E-6	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999990880809456	WITHOUT_CLASSIFICATION	9.119190544857806E-7	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999552956691679	WITHOUT_CLASSIFICATION	4.470433083216099E-5	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999999078624745	WITHOUT_CLASSIFICATION	9.213752544162575E-8	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999998882376974	WITHOUT_CLASSIFICATION	1.1176230262946469E-7	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.999996583171944	WITHOUT_CLASSIFICATION	3.416828056160929E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999958776747391	WITHOUT_CLASSIFICATION	4.122325260861859E-6	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999965702997604	WITHOUT_CLASSIFICATION	3.4297002395547757E-6	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999978707169906	WITHOUT_CLASSIFICATION	2.1292830092916434E-6	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999975775694889	WITHOUT_CLASSIFICATION	2.422430511071339E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999963147123888	WITHOUT_CLASSIFICATION	3.68528761121314E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999981824226319	WITHOUT_CLASSIFICATION	1.817577368098936E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999981824226319	WITHOUT_CLASSIFICATION	1.817577368098936E-5	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999948532185744	WITHOUT_CLASSIFICATION	5.146781425557995E-6	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999998283350588	WITHOUT_CLASSIFICATION	1.716649411629447E-7	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999946632534841	WITHOUT_CLASSIFICATION	5.336746515942281E-6	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9998958516719022	WITHOUT_CLASSIFICATION	1.0414832809782652E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.999984993682976	WITHOUT_CLASSIFICATION	1.5006317024048584E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999755459273804	WITHOUT_CLASSIFICATION	2.4454072619618198E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999992853760445	WITHOUT_CLASSIFICATION	7.146239555591546E-7	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999998769103855	WITHOUT_CLASSIFICATION	1.2308961441128807E-7	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999987459934745	WITHOUT_CLASSIFICATION	1.254006525439621E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999967104831	WITHOUT_CLASSIFICATION	3.289516842191243E-9	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999996697269473	WITHOUT_CLASSIFICATION	3.302730526769002E-7	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999999329038642	WITHOUT_CLASSIFICATION	6.70961357710905E-8	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999989715597243	WITHOUT_CLASSIFICATION	1.0284402756936078E-6	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999976212966651	WITHOUT_CLASSIFICATION	2.378703334829949E-6	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999997635783451	WITHOUT_CLASSIFICATION	2.3642165481527333E-7	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999971140695424	WITHOUT_CLASSIFICATION	2.8859304577326784E-6	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999956916761946	WITHOUT_CLASSIFICATION	4.308323805438977E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999946993909896	WITHOUT_CLASSIFICATION	5.300609010408668E-6	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999984695745723	WITHOUT_CLASSIFICATION	1.530425427674655E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9999932970302713	WITHOUT_CLASSIFICATION	6.702969728726805E-6	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999999076746319	WITHOUT_CLASSIFICATION	9.232536807378072E-8	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999873861867644	WITHOUT_CLASSIFICATION	1.2613813235592692E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999999907333069	WITHOUT_CLASSIFICATION	9.266693011985944E-9	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999999729193741	WITHOUT_CLASSIFICATION	2.7080625890491315E-8	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999998680968148	WITHOUT_CLASSIFICATION	1.3190318503872565E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999996466231257	WITHOUT_CLASSIFICATION	3.5337687430298956E-7	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999894847544541	WITHOUT_CLASSIFICATION	1.0515245545976188E-5	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999986264140321	WITHOUT_CLASSIFICATION	1.3735859678229424E-6	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999981332319237	WITHOUT_CLASSIFICATION	1.8667680763469876E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999999080554475	WITHOUT_CLASSIFICATION	9.194455254937166E-8	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.999997966632006	WITHOUT_CLASSIFICATION	2.0333679938693744E-6	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999994440476123	WITHOUT_CLASSIFICATION	5.559523875692604E-7	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999999788735957	WITHOUT_CLASSIFICATION	2.1126404267788043E-8	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999993837793743	WITHOUT_CLASSIFICATION	6.162206258264907E-7	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999999598952016	WITHOUT_CLASSIFICATION	4.010479827962326E-8	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9999984760136785	WITHOUT_CLASSIFICATION	1.5239863214510524E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999998379065168	WITHOUT_CLASSIFICATION	1.6209348321260942E-7	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999992395130823	WITHOUT_CLASSIFICATION	7.604869177798992E-7	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999999993489339	WITHOUT_CLASSIFICATION	6.510660531215755E-10	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999999200226322	WITHOUT_CLASSIFICATION	7.997736777863026E-8	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9999352469198038	WITHOUT_CLASSIFICATION	6.475308019616478E-5	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999999484023481	WITHOUT_CLASSIFICATION	5.159765193293208E-8	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9998296832594101	WITHOUT_CLASSIFICATION	1.7031674058976085E-4	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9998296832594101	WITHOUT_CLASSIFICATION	1.7031674058976085E-4	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999997612059095	WITHOUT_CLASSIFICATION	2.387940904940407E-7	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999826946128536	WITHOUT_CLASSIFICATION	1.7305387146369976E-5	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999977442077842	WITHOUT_CLASSIFICATION	2.255792215835684E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999993794435441	WITHOUT_CLASSIFICATION	6.205564558369838E-7	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999729362613	WITHOUT_CLASSIFICATION	2.706373863327778E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999877206122	WITHOUT_CLASSIFICATION	1.2279387752128403E-8	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999997372759708	WITHOUT_CLASSIFICATION	2.627240292387444E-7	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999996208716585	WITHOUT_CLASSIFICATION	3.79128341508713E-7	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9554369406415837	WITHOUT_CLASSIFICATION	0.044563059358416285	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999874521228788	WITHOUT_CLASSIFICATION	1.2547877121227951E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.999999911465311	WITHOUT_CLASSIFICATION	8.853468900815975E-8	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999999457866112	WITHOUT_CLASSIFICATION	5.421338881231458E-8	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.999999854305175	WITHOUT_CLASSIFICATION	1.4569482502728146E-7	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.99999990934959	WITHOUT_CLASSIFICATION	9.065040994846425E-8	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999999830027665	WITHOUT_CLASSIFICATION	1.6997233417259416E-8	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.999999691715305	WITHOUT_CLASSIFICATION	3.082846949960039E-7	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999998996996647	WITHOUT_CLASSIFICATION	1.003003352873461E-7	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999980016453279	WITHOUT_CLASSIFICATION	1.9983546720100806E-6	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999996707761306	WITHOUT_CLASSIFICATION	3.292238694147754E-7	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999928937037761	WITHOUT_CLASSIFICATION	7.1062962239899685E-6	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999995848628346	WITHOUT_CLASSIFICATION	4.1513716544621514E-7	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999952702303556	WITHOUT_CLASSIFICATION	4.729769644373603E-6	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999999633851899	WITHOUT_CLASSIFICATION	3.6614810015573197E-8	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999999848767108	WITHOUT_CLASSIFICATION	1.512328915974308E-8	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999607445207	WITHOUT_CLASSIFICATION	3.925547933372329E-8	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999011974058	WITHOUT_CLASSIFICATION	9.880259418406399E-8	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999997814683697	WITHOUT_CLASSIFICATION	2.185316303514583E-7	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999999748047204	WITHOUT_CLASSIFICATION	2.5195279680012788E-8	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999999596013567	WITHOUT_CLASSIFICATION	4.039864328954829E-8	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999999687038545	WITHOUT_CLASSIFICATION	3.129614544636235E-8	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999998064727529	WITHOUT_CLASSIFICATION	1.9352724704762938E-7	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999999491730888	WITHOUT_CLASSIFICATION	5.082691124106817E-8	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999985085413248	WITHOUT_CLASSIFICATION	1.4914586752447004E-6	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999984501058949	WITHOUT_CLASSIFICATION	1.5498941050003082E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999992395130823	WITHOUT_CLASSIFICATION	7.604869177798992E-7	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999998470896929	WITHOUT_CLASSIFICATION	1.52910307034418E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999908931311	WITHOUT_CLASSIFICATION	9.106868979456395E-9	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999908931311	WITHOUT_CLASSIFICATION	9.106868979456395E-9	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999993774562297	WITHOUT_CLASSIFICATION	6.2254377030421E-7	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999997811342859	WITHOUT_CLASSIFICATION	2.188657140739742E-7	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999946193940789	WITHOUT_CLASSIFICATION	5.380605921064071E-6	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999999425883834	WITHOUT_CLASSIFICATION	5.741161661783251E-8	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999982626435936	WITHOUT_CLASSIFICATION	1.737356406428933E-6	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999993911132518	WITHOUT_CLASSIFICATION	6.088867482262025E-7	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999995816505223	WITHOUT_CLASSIFICATION	4.183494777185279E-7	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999960057230054	WITHOUT_CLASSIFICATION	3.994276994567143E-6	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999905473692347	WITHOUT_CLASSIFICATION	9.4526307653279E-6	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999930617773102	WITHOUT_CLASSIFICATION	6.938222689767298E-6	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999379941027032	WITHOUT_CLASSIFICATION	6.200589729674122E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999768909998668	WITHOUT_CLASSIFICATION	2.3109000133231346E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999945037841975	WITHOUT_CLASSIFICATION	5.49621580240588E-6	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999991857005228	WITHOUT_CLASSIFICATION	8.142994772170103E-7	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999999967160589	WITHOUT_CLASSIFICATION	3.283941177465146E-9	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.999995783820005	WITHOUT_CLASSIFICATION	4.216179995048524E-6	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999837181728071	WITHOUT_CLASSIFICATION	1.628182719300625E-5	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999819791223079	WITHOUT_CLASSIFICATION	1.8020877692024016E-5	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999949278834235	WITHOUT_CLASSIFICATION	5.072116576492331E-6	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999962770752203	WITHOUT_CLASSIFICATION	3.7229247797421925E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999633911851891	WITHOUT_CLASSIFICATION	3.66088148109651E-5	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999894115003847	WITHOUT_CLASSIFICATION	1.0588499615356989E-5	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999999962348908	WITHOUT_CLASSIFICATION	3.76510915983784E-9	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999995710222126	WITHOUT_CLASSIFICATION	4.289777874057756E-7	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.999996052603121	WITHOUT_CLASSIFICATION	3.947396879020677E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999972621075965	WITHOUT_CLASSIFICATION	2.737892403481852E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999999640453283	WITHOUT_CLASSIFICATION	3.595467177822191E-8	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999928830159	WITHOUT_CLASSIFICATION	7.116984174016717E-9	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999999137540341	WITHOUT_CLASSIFICATION	8.624596588374491E-8	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999916005149	WITHOUT_CLASSIFICATION	8.3994850684412E-9	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999999085241612	WITHOUT_CLASSIFICATION	9.147583884848571E-8	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999995648164646	WITHOUT_CLASSIFICATION	4.351835353737088E-7	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999997839663751	WITHOUT_CLASSIFICATION	2.160336248889892E-7	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999996266648614	WITHOUT_CLASSIFICATION	3.73335138533628E-7	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999996388951592	WITHOUT_CLASSIFICATION	3.611048407272237E-7	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.999996303095693	WITHOUT_CLASSIFICATION	3.6969043070656618E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999996633145646	WITHOUT_CLASSIFICATION	3.366854354621907E-7	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999972621075965	WITHOUT_CLASSIFICATION	2.737892403481852E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999999640453283	WITHOUT_CLASSIFICATION	3.595467177822191E-8	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999928830159	WITHOUT_CLASSIFICATION	7.116984174016717E-9	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999916005149	WITHOUT_CLASSIFICATION	8.3994850684412E-9	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999332896114501	WITHOUT_CLASSIFICATION	6.671038854983303E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999845206342	WITHOUT_CLASSIFICATION	1.5479365781243408E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999950284882639	WITHOUT_CLASSIFICATION	4.971511736048008E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999988783772854	WITHOUT_CLASSIFICATION	1.1216227146061717E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999822678349084	WITHOUT_CLASSIFICATION	1.773216509160984E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999941083728853	WITHOUT_CLASSIFICATION	5.891627114763783E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999998487333088	WITHOUT_CLASSIFICATION	1.5126669111296123E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.999997425322688	WITHOUT_CLASSIFICATION	2.574677312091357E-6	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999999688818398	WITHOUT_CLASSIFICATION	3.111816024601178E-8	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.999999768837204	WITHOUT_CLASSIFICATION	2.3116279611571155E-7	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999997347018877	WITHOUT_CLASSIFICATION	2.652981122688361E-7	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999999905020058	WITHOUT_CLASSIFICATION	9.497994209224237E-9	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999979464382899	WITHOUT_CLASSIFICATION	2.0535617101675744E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999999549597988	WITHOUT_CLASSIFICATION	4.5040201239824885E-8	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999996916967506	WITHOUT_CLASSIFICATION	3.083032493400011E-7	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999995463768449	WITHOUT_CLASSIFICATION	4.53623155066265E-7	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999999563372183	WITHOUT_CLASSIFICATION	4.366278176475757E-8	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999998950327416	WITHOUT_CLASSIFICATION	1.0496725831801869E-7	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999991480091045	WITHOUT_CLASSIFICATION	8.51990895538064E-7	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999996633145646	WITHOUT_CLASSIFICATION	3.366854354621907E-7	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999845206342	WITHOUT_CLASSIFICATION	1.5479365781243408E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999950284882639	WITHOUT_CLASSIFICATION	4.971511736048008E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999822678349084	WITHOUT_CLASSIFICATION	1.773216509160984E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999941083728853	WITHOUT_CLASSIFICATION	5.891627114763783E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999998487333088	WITHOUT_CLASSIFICATION	1.5126669111296123E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.999997425322688	WITHOUT_CLASSIFICATION	2.574677312091357E-6	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999997520877143	WITHOUT_CLASSIFICATION	2.4791228566990934E-7	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.999996602422938	WITHOUT_CLASSIFICATION	3.397577062012946E-6	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999998881130062	WITHOUT_CLASSIFICATION	1.1188699373031275E-7	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999999941831915	WITHOUT_CLASSIFICATION	5.816808589532642E-9	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999942658750935	WITHOUT_CLASSIFICATION	5.734124906440622E-6	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999942658750935	WITHOUT_CLASSIFICATION	5.734124906440622E-6	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999992199684469	WITHOUT_CLASSIFICATION	7.80031553213097E-7	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.999999997725181	WITHOUT_CLASSIFICATION	2.2748190163836147E-9	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999991514183665	WITHOUT_CLASSIFICATION	8.485816336024931E-7	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999983809611223	WITHOUT_CLASSIFICATION	1.619038877790041E-6	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999999902641497	WITHOUT_CLASSIFICATION	9.735850302247432E-9	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999980682143025	WITHOUT_CLASSIFICATION	1.9317856974676757E-6	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999999698803446	WITHOUT_CLASSIFICATION	3.011965548902659E-8	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999995087700329	WITHOUT_CLASSIFICATION	4.912299671882488E-7	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999992821953427	WITHOUT_CLASSIFICATION	7.178046573046891E-7	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.999999919782595	WITHOUT_CLASSIFICATION	8.021740498793899E-8	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999999777267388	WITHOUT_CLASSIFICATION	2.2273261139307016E-8	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999999133925049	WITHOUT_CLASSIFICATION	8.66074950391422E-8	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999907888639009	WITHOUT_CLASSIFICATION	9.21113609913784E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999992791364861	WITHOUT_CLASSIFICATION	7.208635138385757E-7	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999999939698235	WITHOUT_CLASSIFICATION	6.0301764684699075E-9	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999999005065396	WITHOUT_CLASSIFICATION	9.949346042806463E-8	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999999943069773	WITHOUT_CLASSIFICATION	5.6930227500867984E-9	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999999717854289	WITHOUT_CLASSIFICATION	2.8214571087791405E-8	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999995620415489	WITHOUT_CLASSIFICATION	4.3795845100010956E-7	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999999825356193	WITHOUT_CLASSIFICATION	1.7464380764591186E-8	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9999754282589057	WITHOUT_CLASSIFICATION	2.4571741094328526E-5	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999999597215562	WITHOUT_CLASSIFICATION	4.027844390452717E-8	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999999856354179	WITHOUT_CLASSIFICATION	1.4364582116842412E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728126695801	WITHOUT_CLASSIFICATION	0.0029271873304199665	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999401172919	WITHOUT_CLASSIFICATION	5.988270813123561E-8	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999875452402833	WITHOUT_CLASSIFICATION	1.2454759716663885E-5	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999996331419735	WITHOUT_CLASSIFICATION	3.6685802650014525E-7	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999906551735113	WITHOUT_CLASSIFICATION	9.34482648859905E-6	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999953779827322	WITHOUT_CLASSIFICATION	4.622017267862937E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999401172919	WITHOUT_CLASSIFICATION	5.988270813123561E-8	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999875452402833	WITHOUT_CLASSIFICATION	1.2454759716663885E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999992791364861	WITHOUT_CLASSIFICATION	7.208635138385757E-7	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999999374044268	WITHOUT_CLASSIFICATION	6.259557315890562E-8	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999998003200048	WITHOUT_CLASSIFICATION	1.996799951051284E-7	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.999963275546124	WITHOUT_CLASSIFICATION	3.6724453876014554E-5	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999974544767279	WITHOUT_CLASSIFICATION	2.5455232720022143E-6	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999999980274029	WITHOUT_CLASSIFICATION	1.972597060924181E-9	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999978149126222	WITHOUT_CLASSIFICATION	2.1850873778409274E-6	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9999970616051249	WITHOUT_CLASSIFICATION	2.93839487499984E-6	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999998323752513	WITHOUT_CLASSIFICATION	1.6762474882426042E-7	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.999805317065726	WITHOUT_CLASSIFICATION	1.94682934274076E-4	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999720004971664	WITHOUT_CLASSIFICATION	2.7999502833722045E-5	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9993748646571172	WITHOUT_CLASSIFICATION	6.25135342882784E-4	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999993497949602	WITHOUT_CLASSIFICATION	6.50205039800413E-7	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999999632463091	WITHOUT_CLASSIFICATION	3.675369078013445E-8	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999999820718994	WITHOUT_CLASSIFICATION	1.7928100621469558E-8	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999968054400963	WITHOUT_CLASSIFICATION	3.194559903619958E-6	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9999895387900981	WITHOUT_CLASSIFICATION	1.0461209901822703E-5	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9998151986475486	WITHOUT_CLASSIFICATION	1.848013524512946E-4	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999874749028331	WITHOUT_CLASSIFICATION	1.2525097166848387E-5	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999945269877	WITHOUT_CLASSIFICATION	5.473012316456742E-9	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999995345266188	WITHOUT_CLASSIFICATION	4.654733811719285E-7	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999990414262	WITHOUT_CLASSIFICATION	9.58573717734279E-10	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999992290560363	WITHOUT_CLASSIFICATION	7.709439636754211E-7	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999996973876102	WITHOUT_CLASSIFICATION	3.0261238980350617E-7	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999999991272077	WITHOUT_CLASSIFICATION	8.727923496650179E-10	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999999994637115	WITHOUT_CLASSIFICATION	5.362884388668243E-10	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.999999475193354	WITHOUT_CLASSIFICATION	5.248066459894651E-7	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999994058853996	WITHOUT_CLASSIFICATION	5.94114600525356E-7	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999992940065658	WITHOUT_CLASSIFICATION	7.059934340680389E-7	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999963565310934	WITHOUT_CLASSIFICATION	3.6434689067100864E-6	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9991767460273583	WITHOUT_CLASSIFICATION	8.232539726418041E-4	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999997188086993	WITHOUT_CLASSIFICATION	2.8119130063774815E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297701	WITHOUT_CLASSIFICATION	2.1117022979640347E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297701	WITHOUT_CLASSIFICATION	2.1117022979640347E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999907888639009	WITHOUT_CLASSIFICATION	9.21113609913784E-6	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.999999751669569	WITHOUT_CLASSIFICATION	2.4833043103244637E-7	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999335879046	WITHOUT_CLASSIFICATION	6.641209536798628E-8	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999989419028177	WITHOUT_CLASSIFICATION	1.0580971823841877E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.999999390881896	WITHOUT_CLASSIFICATION	6.091181038184294E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.999999390881896	WITHOUT_CLASSIFICATION	6.091181038184294E-7	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999999664772644	WITHOUT_CLASSIFICATION	3.352273564446442E-8	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999999935677527	WITHOUT_CLASSIFICATION	6.4322473754640136E-9	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999999738028057	WITHOUT_CLASSIFICATION	2.619719433354793E-8	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999998374816379	WITHOUT_CLASSIFICATION	1.6251836204865753E-7	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999979056894724	WITHOUT_CLASSIFICATION	2.094310527617502E-6	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999999979276453	WITHOUT_CLASSIFICATION	2.07235482041079E-9	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999991442396999	WITHOUT_CLASSIFICATION	8.557603000472644E-7	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999999874654939	WITHOUT_CLASSIFICATION	1.2534506147466438E-8	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999496625187566	WITHOUT_CLASSIFICATION	5.033748124327516E-5	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999995083056359	WITHOUT_CLASSIFICATION	4.916943640458461E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999997457904957	WITHOUT_CLASSIFICATION	2.542095044086468E-7	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999998349493496	WITHOUT_CLASSIFICATION	1.6505065037991833E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999952122893886	WITHOUT_CLASSIFICATION	4.787710611386259E-6	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999933145815537	WITHOUT_CLASSIFICATION	6.685418446259891E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999711028219976	WITHOUT_CLASSIFICATION	2.889717800238076E-5	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999984680401754	WITHOUT_CLASSIFICATION	1.5319598244541493E-6	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999812175581	WITHOUT_CLASSIFICATION	1.878244196862513E-8	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999812175581	WITHOUT_CLASSIFICATION	1.878244196862513E-8	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999988856648969	WITHOUT_CLASSIFICATION	1.1143351030513412E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999988856648969	WITHOUT_CLASSIFICATION	1.1143351030513412E-6	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999999983463774	WITHOUT_CLASSIFICATION	1.6536226627314035E-9	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999711871750074	WITHOUT_CLASSIFICATION	2.8812824992635284E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9991884123134473	WITHOUT_CLASSIFICATION	8.115876865527503E-4	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999999955818828	WITHOUT_CLASSIFICATION	4.418117212594261E-9	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999985873089308	WITHOUT_CLASSIFICATION	1.4126910692474178E-6	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.999998959767217	WITHOUT_CLASSIFICATION	1.0402327830692733E-6	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.999999916234449	WITHOUT_CLASSIFICATION	8.37655510418297E-8	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999998349493496	WITHOUT_CLASSIFICATION	1.6505065037991833E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999952122893886	WITHOUT_CLASSIFICATION	4.787710611386259E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999711028219976	WITHOUT_CLASSIFICATION	2.889717800238076E-5	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999988273140554	WITHOUT_CLASSIFICATION	1.1726859445990762E-6	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999965948639614	WITHOUT_CLASSIFICATION	3.405136038519936E-6	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9868631040448318	WITHOUT_CLASSIFICATION	0.013136895955168105	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9999361030071671	WITHOUT_CLASSIFICATION	6.389699283290705E-5	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999977508407666	WITHOUT_CLASSIFICATION	2.2491592334624485E-6	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9999855523029358	WITHOUT_CLASSIFICATION	1.444769706413144E-5	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999990220415591	WITHOUT_CLASSIFICATION	9.779584409472075E-7	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999996350830564	WITHOUT_CLASSIFICATION	3.649169435567108E-7	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999993664451818	WITHOUT_CLASSIFICATION	6.335548182565407E-7	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999999881263882	WITHOUT_CLASSIFICATION	1.187361178862442E-8	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999831763149732	WITHOUT_CLASSIFICATION	1.682368502673461E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9994559678337686	WITHOUT_CLASSIFICATION	5.440321662313995E-4	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999937478056349	WITHOUT_CLASSIFICATION	6.252194365059622E-6	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9998516210550424	WITHOUT_CLASSIFICATION	1.4837894495763683E-4	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.999988131119634	WITHOUT_CLASSIFICATION	1.1868880366065654E-5	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999999468337439	WITHOUT_CLASSIFICATION	5.316625603102342E-8	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.999989079356508	WITHOUT_CLASSIFICATION	1.0920643491881273E-5	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999996237069237	WITHOUT_CLASSIFICATION	3.762930761688738E-7	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.999999872492004	WITHOUT_CLASSIFICATION	1.275079959541855E-7	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.999999224332357	WITHOUT_CLASSIFICATION	7.756676431229581E-7	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999999800516467	WITHOUT_CLASSIFICATION	1.9948353300922948E-8	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999961528184824	WITHOUT_CLASSIFICATION	3.847181517591861E-6	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999957940287143	WITHOUT_CLASSIFICATION	4.205971285615006E-6	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999999005187298	WITHOUT_CLASSIFICATION	9.948127031862326E-8	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999999390292762	WITHOUT_CLASSIFICATION	6.097072381073549E-8	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.999999477601777	WITHOUT_CLASSIFICATION	5.223982230296808E-7	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999923971287848	WITHOUT_CLASSIFICATION	7.602871215110796E-6	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999883422943094	WITHOUT_CLASSIFICATION	1.1657705690482943E-5	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999999260016643	WITHOUT_CLASSIFICATION	7.399833571685086E-8	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9999284171747048	WITHOUT_CLASSIFICATION	7.158282529522245E-5	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999957753165254	WITHOUT_CLASSIFICATION	4.2246834745923475E-6	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9999728351582371	WITHOUT_CLASSIFICATION	2.7164841762877747E-5	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.999994555255903	WITHOUT_CLASSIFICATION	5.4447440970797235E-6	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999955554425132	WITHOUT_CLASSIFICATION	4.444557486862712E-6	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.999660484942697	WITHOUT_CLASSIFICATION	3.395150573029747E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999999892580312	WITHOUT_CLASSIFICATION	1.0741968730060188E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999992024162824	WITHOUT_CLASSIFICATION	7.975837176676539E-7	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.999995391461895	WITHOUT_CLASSIFICATION	4.608538105016219E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999934322264185	WITHOUT_CLASSIFICATION	6.567773581457885E-6	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999932760181292	WITHOUT_CLASSIFICATION	6.723981870780138E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999633071327382	WITHOUT_CLASSIFICATION	3.6692867261814996E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999335879046	WITHOUT_CLASSIFICATION	6.641209536798628E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999992024162824	WITHOUT_CLASSIFICATION	7.975837176676539E-7	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.999969618678095	WITHOUT_CLASSIFICATION	3.0381321905076674E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999519957040038	WITHOUT_CLASSIFICATION	4.800429599614896E-5	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9999703914413041	WITHOUT_CLASSIFICATION	2.9608558695888647E-5	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9997006829175965	WITHOUT_CLASSIFICATION	2.993170824035027E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9997006829175965	WITHOUT_CLASSIFICATION	2.993170824035027E-4	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999999990328728	WITHOUT_CLASSIFICATION	9.671270993728296E-10	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999999852292695	WITHOUT_CLASSIFICATION	1.4770730593354668E-8	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999994015771587	WITHOUT_CLASSIFICATION	5.984228412522935E-7	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999999993668683	WITHOUT_CLASSIFICATION	6.331316352609411E-10	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999869596598472	WITHOUT_CLASSIFICATION	1.3040340152888072E-5	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999993453422652	WITHOUT_CLASSIFICATION	6.54657734793286E-7	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999999891939947	WITHOUT_CLASSIFICATION	1.0806005397668819E-8	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999969589634224	WITHOUT_CLASSIFICATION	3.041036577576252E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999998899013711	WITHOUT_CLASSIFICATION	1.1009862887550997E-7	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999998899013711	WITHOUT_CLASSIFICATION	1.1009862887550997E-7	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999999282946256	WITHOUT_CLASSIFICATION	7.170537443910494E-8	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.999998663892542	WITHOUT_CLASSIFICATION	1.3361074579786596E-6	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.999999991006655	WITHOUT_CLASSIFICATION	8.993345035534007E-9	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999997453511132	WITHOUT_CLASSIFICATION	2.5464888677564634E-7	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999984215070216	WITHOUT_CLASSIFICATION	1.5784929784846032E-6	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999945201342123	WITHOUT_CLASSIFICATION	5.479865787631414E-6	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9996151206740719	WITHOUT_CLASSIFICATION	3.848793259281108E-4	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999998861939329	WITHOUT_CLASSIFICATION	1.1380606716620405E-7	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999998316194295	WITHOUT_CLASSIFICATION	1.6838057037963896E-7	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9999364145069664	WITHOUT_CLASSIFICATION	6.358549303367218E-5	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999997370775999	WITHOUT_CLASSIFICATION	2.6292240001770166E-7	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999987092751373	WITHOUT_CLASSIFICATION	1.290724862646442E-6	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999998163300362	WITHOUT_CLASSIFICATION	1.8366996384983406E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999986925789895	WITHOUT_CLASSIFICATION	1.3074210105191403E-6	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999986925789895	WITHOUT_CLASSIFICATION	1.3074210105191403E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999987571208022	WITHOUT_CLASSIFICATION	1.2428791978108573E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.999997425322688	WITHOUT_CLASSIFICATION	2.574677312091357E-6	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.999997676401725	WITHOUT_CLASSIFICATION	2.323598274988265E-6	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999997517362935	WITHOUT_CLASSIFICATION	2.4826370646193855E-7	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9999999105303828	WITHOUT_CLASSIFICATION	8.946961720939076E-8	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999970210264544	WITHOUT_CLASSIFICATION	2.9789735455363707E-6	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999999110367931	WITHOUT_CLASSIFICATION	8.896320693331939E-8	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999880789413254	WITHOUT_CLASSIFICATION	1.1921058674693386E-5	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999996769914306	WITHOUT_CLASSIFICATION	3.230085694301935E-7	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999996497106217	WITHOUT_CLASSIFICATION	3.5028937829167846E-7	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999997610672298	WITHOUT_CLASSIFICATION	2.3893277013242304E-7	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999998061149553	WITHOUT_CLASSIFICATION	1.9388504460913405E-7	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999949835771115	WITHOUT_CLASSIFICATION	5.016422888486657E-6	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999993231336329	WITHOUT_CLASSIFICATION	6.768663671416695E-7	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999984569764029	WITHOUT_CLASSIFICATION	1.5430235970621394E-6	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999999301508105	WITHOUT_CLASSIFICATION	6.984918962775658E-8	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999997085151886	WITHOUT_CLASSIFICATION	2.914848113332426E-7	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999995469333292	WITHOUT_CLASSIFICATION	4.5306667085610076E-7	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999997475769703	WITHOUT_CLASSIFICATION	2.5242302969831695E-7	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9999922142927397	WITHOUT_CLASSIFICATION	7.78570726030171E-6	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9999641522823334	WITHOUT_CLASSIFICATION	3.584771766659655E-5	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999994657288557	WITHOUT_CLASSIFICATION	5.342711443252736E-7	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999988488444284	WITHOUT_CLASSIFICATION	1.151155571664838E-6	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9997732642821665	WITHOUT_CLASSIFICATION	2.2673571783357493E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.6027065948584108	WITHOUT_CLASSIFICATION	0.3972934051415892	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9999184093355448	WITHOUT_CLASSIFICATION	8.159066445519144E-5	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999999871203321	WITHOUT_CLASSIFICATION	1.2879667928669471E-8	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.999999984561346	WITHOUT_CLASSIFICATION	1.5438654044320393E-8	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.999999993098673	WITHOUT_CLASSIFICATION	6.90132694252068E-9	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9999740500407118	WITHOUT_CLASSIFICATION	2.5949959288111005E-5	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.999999987173654	WITHOUT_CLASSIFICATION	1.2826345917284119E-8	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999995635468626	WITHOUT_CLASSIFICATION	4.3645313745252705E-7	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999998837589834	WITHOUT_CLASSIFICATION	1.162410166024295E-7	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999999991841663	WITHOUT_CLASSIFICATION	8.158337479872458E-10	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999994070735961	WITHOUT_CLASSIFICATION	5.929264038125962E-7	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.999999992590562	WITHOUT_CLASSIFICATION	7.40943799211858E-9	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999999454001933	WITHOUT_CLASSIFICATION	5.459980665624653E-8	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9998767555640938	WITHOUT_CLASSIFICATION	1.232444359061839E-4	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.999989448200597	WITHOUT_CLASSIFICATION	1.0551799402884696E-5	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999699018787965	WITHOUT_CLASSIFICATION	3.0098121203542874E-5	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999999209717751	WITHOUT_CLASSIFICATION	7.902822478711313E-8	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9999825905293345	WITHOUT_CLASSIFICATION	1.7409470665544234E-5	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999999147887975	WITHOUT_CLASSIFICATION	8.521120252527521E-8	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999971593536947	WITHOUT_CLASSIFICATION	2.840646305338558E-6	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999867957387053	WITHOUT_CLASSIFICATION	1.3204261294721228E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999371557170907	WITHOUT_CLASSIFICATION	6.284428290924621E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.999999940334247	WITHOUT_CLASSIFICATION	5.966575296629902E-8	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999964665955	WITHOUT_CLASSIFICATION	3.5334044544089558E-9	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999844751464	WITHOUT_CLASSIFICATION	1.552485360288405E-8	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999401172919	WITHOUT_CLASSIFICATION	5.988270813123561E-8	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999401172919	WITHOUT_CLASSIFICATION	5.988270813123561E-8	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999999943386618	WITHOUT_CLASSIFICATION	5.6613381499068475E-9	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.999998211395514	WITHOUT_CLASSIFICATION	1.7886044860235658E-6	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999999283235071	WITHOUT_CLASSIFICATION	7.167649278533548E-8	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9101178128827909	DEFECT	0.0898821871172091	WITHOUT_CLASSIFICATION
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999999928859944	WITHOUT_CLASSIFICATION	7.114005603915913E-9	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999998094300719	WITHOUT_CLASSIFICATION	1.905699280115481E-7	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999831726554286	WITHOUT_CLASSIFICATION	1.6827344571346987E-5	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9999988263861576	WITHOUT_CLASSIFICATION	1.1736138424379917E-6	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9998548133340348	WITHOUT_CLASSIFICATION	1.451866659651726E-4	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999999461795409	WITHOUT_CLASSIFICATION	5.382045908384072E-8	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999943149940632	WITHOUT_CLASSIFICATION	5.685005936765512E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999943149940632	WITHOUT_CLASSIFICATION	5.685005936765512E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999943149940632	WITHOUT_CLASSIFICATION	5.685005936765512E-6	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999994501572056	WITHOUT_CLASSIFICATION	5.498427945047098E-7	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999987168550566	WITHOUT_CLASSIFICATION	1.2831449433126711E-6	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999981429350978	WITHOUT_CLASSIFICATION	1.8570649022398085E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.99999829729351	WITHOUT_CLASSIFICATION	1.7027064900928088E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.99999829729351	WITHOUT_CLASSIFICATION	1.7027064900928088E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999977716619382	WITHOUT_CLASSIFICATION	2.2283380619105585E-6	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999912312282898	WITHOUT_CLASSIFICATION	8.768771710195868E-6	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999999505063075	WITHOUT_CLASSIFICATION	4.949369256635835E-8	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999998080734254	WITHOUT_CLASSIFICATION	1.9192657462134916E-7	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999968799723487	WITHOUT_CLASSIFICATION	3.1200276513684502E-6	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999990986010349	WITHOUT_CLASSIFICATION	9.01398965161007E-7	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999995235922834	WITHOUT_CLASSIFICATION	4.764077166181265E-7	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999942103297603	WITHOUT_CLASSIFICATION	5.7896702396310615E-6	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9972459791215945	WITHOUT_CLASSIFICATION	0.0027540208784055543	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999991108006581	WITHOUT_CLASSIFICATION	8.891993418497185E-7	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999991108006581	WITHOUT_CLASSIFICATION	8.891993418497185E-7	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999997275460268	WITHOUT_CLASSIFICATION	2.7245397321580895E-7	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999817214569852	WITHOUT_CLASSIFICATION	1.8278543014885078E-5	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999987216296035	WITHOUT_CLASSIFICATION	1.2783703965015287E-6	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999886330370288	WITHOUT_CLASSIFICATION	1.1366962971279625E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999980489849778	WITHOUT_CLASSIFICATION	1.9510150222503225E-6	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999999853725355	WITHOUT_CLASSIFICATION	1.4627464521081469E-8	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999990160740346	WITHOUT_CLASSIFICATION	9.83925965410937E-7	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999941261093978	WITHOUT_CLASSIFICATION	5.873890602193658E-6	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999974056844108	WITHOUT_CLASSIFICATION	2.5943155892208867E-6	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999971181847462	WITHOUT_CLASSIFICATION	2.88181525372365E-6	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.999999829697764	WITHOUT_CLASSIFICATION	1.7030223596630365E-7	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.999996357527246	WITHOUT_CLASSIFICATION	3.642472753946148E-6	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999978922606536	WITHOUT_CLASSIFICATION	2.1077393463688286E-6	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999997022333098	WITHOUT_CLASSIFICATION	2.9776669021389425E-7	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9999932144325294	WITHOUT_CLASSIFICATION	6.785567470640642E-6	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999996033266013	WITHOUT_CLASSIFICATION	3.966733987661646E-7	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999887326680647	WITHOUT_CLASSIFICATION	1.1267331935421965E-5	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9999874179592095	WITHOUT_CLASSIFICATION	1.2582040790491655E-5	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999963500910173	WITHOUT_CLASSIFICATION	3.6499089826876893E-6	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999962644730902	WITHOUT_CLASSIFICATION	3.7355269098494395E-6	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9973827566641695	WITHOUT_CLASSIFICATION	0.0026172433358304732	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999999004645319	WITHOUT_CLASSIFICATION	9.953546814981756E-8	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999996334114178	WITHOUT_CLASSIFICATION	3.665885821333574E-7	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.999999708183253	WITHOUT_CLASSIFICATION	2.9181674700459116E-7	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999976921110874	WITHOUT_CLASSIFICATION	2.307888912732372E-6	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.999998603017971	WITHOUT_CLASSIFICATION	1.3969820290096905E-6	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999997389796549	WITHOUT_CLASSIFICATION	2.6102034512196536E-7	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9999985427004893	WITHOUT_CLASSIFICATION	1.4572995107326919E-6	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9999681388486801	WITHOUT_CLASSIFICATION	3.186115131999741E-5	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999966416430954	WITHOUT_CLASSIFICATION	3.3583569046270024E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.999983216473461	WITHOUT_CLASSIFICATION	1.6783526538993296E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999991198191128	WITHOUT_CLASSIFICATION	8.801808870204E-7	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999982393434881	WITHOUT_CLASSIFICATION	1.7606565119290565E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.999983216473461	WITHOUT_CLASSIFICATION	1.6783526538993296E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999929637458955	WITHOUT_CLASSIFICATION	7.036254104458194E-6	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999996923908218	WITHOUT_CLASSIFICATION	3.0760917826386005E-7	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999997267827918	WITHOUT_CLASSIFICATION	2.7321720819169784E-7	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999986978841012	WITHOUT_CLASSIFICATION	1.3021158988210983E-6	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999950656034816	WITHOUT_CLASSIFICATION	4.934396518363009E-6	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9999076983000003	WITHOUT_CLASSIFICATION	9.230169999975702E-5	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999993960211969	WITHOUT_CLASSIFICATION	6.03978802992315E-7	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999788631216453	WITHOUT_CLASSIFICATION	2.11368783546234E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999295052256676	WITHOUT_CLASSIFICATION	7.049477433237889E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999745723015984	WITHOUT_CLASSIFICATION	2.5427698401710425E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999425376193911	WITHOUT_CLASSIFICATION	5.746238060880337E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9997901079177134	WITHOUT_CLASSIFICATION	2.0989208228660346E-4	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9998327931297022	WITHOUT_CLASSIFICATION	1.6720687029785446E-4	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9988961506698626	WITHOUT_CLASSIFICATION	0.0011038493301373457	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999994654526164	WITHOUT_CLASSIFICATION	5.345473836508715E-7	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999966827995941	WITHOUT_CLASSIFICATION	3.317200406025317E-6	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999986704941064	WITHOUT_CLASSIFICATION	1.3295058936148426E-6	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999838317776331	WITHOUT_CLASSIFICATION	1.6168222366970308E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999998244664218	WITHOUT_CLASSIFICATION	1.755335782239317E-7	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999657071087301	WITHOUT_CLASSIFICATION	3.429289126981706E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999810498419315	WITHOUT_CLASSIFICATION	1.8950158068550392E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999852950884592	WITHOUT_CLASSIFICATION	1.4704911540757064E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999679424483098	WITHOUT_CLASSIFICATION	3.2057551690154614E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.999988708450414	WITHOUT_CLASSIFICATION	1.1291549586051931E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999884759938914	WITHOUT_CLASSIFICATION	1.1524006108490321E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.999999664462419	WITHOUT_CLASSIFICATION	3.3553758112268416E-7	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9999653666627284	WITHOUT_CLASSIFICATION	3.463333727160031E-5	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999999220865166	WITHOUT_CLASSIFICATION	7.791348342392998E-8	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999999119329679	WITHOUT_CLASSIFICATION	8.806703220773447E-8	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.999999679695223	WITHOUT_CLASSIFICATION	3.2030477696055886E-7	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9999988948184645	WITHOUT_CLASSIFICATION	1.1051815354836472E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9979345580709352	WITHOUT_CLASSIFICATION	0.002065441929064689	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9810554067858309	WITHOUT_CLASSIFICATION	0.01894459321416908	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999685656857449	WITHOUT_CLASSIFICATION	3.143431425506099E-5	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999982209199005	WITHOUT_CLASSIFICATION	1.7790800995200295E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999993953269734	WITHOUT_CLASSIFICATION	6.046730267601946E-7	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.999998510602701	WITHOUT_CLASSIFICATION	1.4893972990106586E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9999850465886505	WITHOUT_CLASSIFICATION	1.4953411349507319E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999999895153456	WITHOUT_CLASSIFICATION	1.0484654476934363E-8	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999995860180461	WITHOUT_CLASSIFICATION	4.139819539833572E-7	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999978532878486	WITHOUT_CLASSIFICATION	2.1467121514085683E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999990143990847	WITHOUT_CLASSIFICATION	9.856009153194307E-7	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999997588177554	WITHOUT_CLASSIFICATION	2.4118224457584914E-7	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999984284675454	WITHOUT_CLASSIFICATION	1.5715324545668174E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999999022642966	WITHOUT_CLASSIFICATION	9.773570347719671E-8	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999996180308357	WITHOUT_CLASSIFICATION	3.819691642942637E-7	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999987449043994	WITHOUT_CLASSIFICATION	1.2550956005597983E-6	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999994798533314	WITHOUT_CLASSIFICATION	5.201466685355239E-7	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999992307132214	WITHOUT_CLASSIFICATION	7.69286778514911E-7	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999998329312653	WITHOUT_CLASSIFICATION	1.6706873469493845E-7	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999991193535787	WITHOUT_CLASSIFICATION	8.806464213712481E-7	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999966233790827	WITHOUT_CLASSIFICATION	3.3766209172850346E-6	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999987189156598	WITHOUT_CLASSIFICATION	1.2810843401433953E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999992307132214	WITHOUT_CLASSIFICATION	7.69286778514911E-7	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.7374283004880228	WITHOUT_CLASSIFICATION	0.2625716995119773	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.7374283004880228	WITHOUT_CLASSIFICATION	0.2625716995119773	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999999877626414	WITHOUT_CLASSIFICATION	1.2237358436263913E-8	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.999998768510202	WITHOUT_CLASSIFICATION	1.2314897979211377E-6	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999989812786131	WITHOUT_CLASSIFICATION	1.0187213868771233E-6	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999999908437096	WITHOUT_CLASSIFICATION	9.156290326568467E-9	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999996053156335	WITHOUT_CLASSIFICATION	3.946843664087435E-7	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999994301473487	WITHOUT_CLASSIFICATION	5.698526512356605E-7	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999951391764038	WITHOUT_CLASSIFICATION	4.8608235962057584E-6	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.5776257958768685	DEFECT	0.4223742041231316	WITHOUT_CLASSIFICATION
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999998956403509	WITHOUT_CLASSIFICATION	1.0435964913596366E-7	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9999465574182089	WITHOUT_CLASSIFICATION	5.344258179104215E-5	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999999895521762	WITHOUT_CLASSIFICATION	1.0447823815444735E-8	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.999999501349553	WITHOUT_CLASSIFICATION	4.986504470124772E-7	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999606752498356	WITHOUT_CLASSIFICATION	3.932475016440021E-5	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999998985122499	WITHOUT_CLASSIFICATION	1.0148775004399945E-7	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9998390921585057	WITHOUT_CLASSIFICATION	1.609078414942157E-4	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999207205851881	WITHOUT_CLASSIFICATION	7.927941481189041E-5	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999998232746361	WITHOUT_CLASSIFICATION	1.7672536389267369E-7	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999899252244955	WITHOUT_CLASSIFICATION	1.0074775504449307E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999899252244955	WITHOUT_CLASSIFICATION	1.0074775504449307E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999899252244955	WITHOUT_CLASSIFICATION	1.0074775504449307E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999899252244955	WITHOUT_CLASSIFICATION	1.0074775504449307E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999899252244955	WITHOUT_CLASSIFICATION	1.0074775504449307E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999964550281684	WITHOUT_CLASSIFICATION	3.544971831682274E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999984214212989	WITHOUT_CLASSIFICATION	1.5785787010469391E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999063047562557	WITHOUT_CLASSIFICATION	9.369524374426711E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999943351908771	WITHOUT_CLASSIFICATION	5.6648091228856824E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.999612027570887	WITHOUT_CLASSIFICATION	3.879724291130617E-4	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999999835410799	WITHOUT_CLASSIFICATION	1.6458920181119043E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999996951379658	WITHOUT_CLASSIFICATION	3.048620341064708E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.99999967947061	WITHOUT_CLASSIFICATION	3.205293899181643E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999986858061596	WITHOUT_CLASSIFICATION	1.3141938403722667E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999978845272612	WITHOUT_CLASSIFICATION	2.1154727387893694E-6	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999966099273162	WITHOUT_CLASSIFICATION	3.3900726837197633E-6	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999950791338761	WITHOUT_CLASSIFICATION	4.920866123890714E-6	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999982141255149	WITHOUT_CLASSIFICATION	1.7858744849995507E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999971059029326	WITHOUT_CLASSIFICATION	2.8940970674144435E-6	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999962760542074	WITHOUT_CLASSIFICATION	3.723945792629676E-6	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.999996737006883	WITHOUT_CLASSIFICATION	3.2629931171366966E-6	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999978824425663	WITHOUT_CLASSIFICATION	2.117557433654459E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999971842338784	WITHOUT_CLASSIFICATION	2.815766121653831E-6	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999964845363299	WITHOUT_CLASSIFICATION	3.515463670081954E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999967325522349	WITHOUT_CLASSIFICATION	3.2674477651769284E-6	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999955811514153	WITHOUT_CLASSIFICATION	4.418848584728415E-6	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999958719047058	WITHOUT_CLASSIFICATION	4.128095294118142E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999940036773863	WITHOUT_CLASSIFICATION	5.996322613647277E-6	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999965779914084	WITHOUT_CLASSIFICATION	3.4220085916664175E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999966482409612	WITHOUT_CLASSIFICATION	3.351759038812106E-6	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999961977128587	WITHOUT_CLASSIFICATION	3.8022871412628007E-6	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999975591537087	WITHOUT_CLASSIFICATION	2.4408462913460683E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999968487815619	WITHOUT_CLASSIFICATION	3.1512184380404905E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999942650554711	WITHOUT_CLASSIFICATION	5.734944528932394E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.999995630719859	WITHOUT_CLASSIFICATION	4.369280141036743E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999940617686289	WITHOUT_CLASSIFICATION	5.938231371029256E-6	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999963515867075	WITHOUT_CLASSIFICATION	3.6484132924202736E-6	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999952348552065	WITHOUT_CLASSIFICATION	4.7651447936335015E-6	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999953177853251	WITHOUT_CLASSIFICATION	4.682214674865302E-6	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999925655550622	WITHOUT_CLASSIFICATION	7.434444937873174E-6	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999933206294702	WITHOUT_CLASSIFICATION	6.679370529759411E-6	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999957986967587	WITHOUT_CLASSIFICATION	4.201303241232937E-6	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999950059168311	WITHOUT_CLASSIFICATION	4.994083168906155E-6	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999965886049549	WITHOUT_CLASSIFICATION	3.411395045079215E-6	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999952841562512	WITHOUT_CLASSIFICATION	4.715843748926698E-6	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999969751632932	WITHOUT_CLASSIFICATION	3.0248367066966628E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999958868384	WITHOUT_CLASSIFICATION	4.113161599980553E-6	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999950498829477	WITHOUT_CLASSIFICATION	4.950117052192075E-6	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999963400843047	WITHOUT_CLASSIFICATION	3.6599156952333476E-6	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999931641140891	WITHOUT_CLASSIFICATION	6.835885910854416E-6	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999886274590631	WITHOUT_CLASSIFICATION	1.1372540936860547E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999917035006112	WITHOUT_CLASSIFICATION	8.29649938880592E-6	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.999997544102049	WITHOUT_CLASSIFICATION	2.4558979509967816E-6	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999948060134094	WITHOUT_CLASSIFICATION	5.1939865906856575E-6	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999900591683623	WITHOUT_CLASSIFICATION	9.940831637775451E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999063047562557	WITHOUT_CLASSIFICATION	9.369524374426711E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999927631507439	WITHOUT_CLASSIFICATION	7.2368492560799555E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.999994163010599	WITHOUT_CLASSIFICATION	5.836989401055445E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999907057467871	WITHOUT_CLASSIFICATION	9.294253213049953E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999908681126483	WITHOUT_CLASSIFICATION	9.131887351833575E-6	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999923737882341	WITHOUT_CLASSIFICATION	7.626211765863397E-6	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999934105102738	WITHOUT_CLASSIFICATION	6.589489726200538E-6	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999890072077471	WITHOUT_CLASSIFICATION	1.0992792252860977E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999914271591388	WITHOUT_CLASSIFICATION	8.572840861263046E-6	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999898841403133	WITHOUT_CLASSIFICATION	1.0115859686610825E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999897002926859	WITHOUT_CLASSIFICATION	1.0299707314200178E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999933170629867	WITHOUT_CLASSIFICATION	6.682937013299672E-6	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999938559161407	WITHOUT_CLASSIFICATION	6.144083859356974E-6	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.999990780675301	WITHOUT_CLASSIFICATION	9.219324699022663E-6	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999918384946396	WITHOUT_CLASSIFICATION	8.161505360446741E-6	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999938831818863	WITHOUT_CLASSIFICATION	6.1168181137397905E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.999997077706741	WITHOUT_CLASSIFICATION	2.922293259112323E-6	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999932634884254	WITHOUT_CLASSIFICATION	6.7365115746533034E-6	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999950415640491	WITHOUT_CLASSIFICATION	4.958435950981006E-6	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999933015407947	WITHOUT_CLASSIFICATION	6.6984592053342735E-6	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999949948838491	WITHOUT_CLASSIFICATION	5.005116150923564E-6	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999919151787622	WITHOUT_CLASSIFICATION	8.084821237790756E-6	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999939416750048	WITHOUT_CLASSIFICATION	6.058324995263801E-6	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999920632132465	WITHOUT_CLASSIFICATION	7.936786753486618E-6	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.999995265391561	WITHOUT_CLASSIFICATION	4.734608438955659E-6	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999941871433086	WITHOUT_CLASSIFICATION	5.8128566914307565E-6	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999950962955199	WITHOUT_CLASSIFICATION	4.903704480120421E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999910226287225	WITHOUT_CLASSIFICATION	8.977371277513752E-6	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999940070108108	WITHOUT_CLASSIFICATION	5.992989189225801E-6	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999977358885274	WITHOUT_CLASSIFICATION	2.264111472599473E-6	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999969681038732	WITHOUT_CLASSIFICATION	3.0318961267879565E-6	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999954727239226	WITHOUT_CLASSIFICATION	4.527276077389835E-6	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.999993918880895	WITHOUT_CLASSIFICATION	6.0811191050261185E-6	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999953328839775	WITHOUT_CLASSIFICATION	4.667116022560114E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999957938860045	WITHOUT_CLASSIFICATION	4.206113995528085E-6	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999941340560732	WITHOUT_CLASSIFICATION	5.8659439268079546E-6	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999970600555539	WITHOUT_CLASSIFICATION	2.9399444461365723E-6	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999956460694538	WITHOUT_CLASSIFICATION	4.353930546248117E-6	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999930152554588	WITHOUT_CLASSIFICATION	6.984744541225433E-6	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999932069533601	WITHOUT_CLASSIFICATION	6.793046639770979E-6	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999967303351405	WITHOUT_CLASSIFICATION	3.269664859465626E-6	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999951358410522	WITHOUT_CLASSIFICATION	4.8641589478891E-6	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.999995601943938	WITHOUT_CLASSIFICATION	4.398056061988363E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999949106158457	WITHOUT_CLASSIFICATION	5.089384154299665E-6	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.999993136747346	WITHOUT_CLASSIFICATION	6.8632526539025315E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999965125095598	WITHOUT_CLASSIFICATION	3.487490440152194E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999973777586914	WITHOUT_CLASSIFICATION	2.622241308697854E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.999997155257665	WITHOUT_CLASSIFICATION	2.844742335110628E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.999995475873804	WITHOUT_CLASSIFICATION	4.524126196081676E-6	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999960595257203	WITHOUT_CLASSIFICATION	3.94047427963314E-6	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999945475849227	WITHOUT_CLASSIFICATION	5.452415077366761E-6	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999960574203498	WITHOUT_CLASSIFICATION	3.942579650111648E-6	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999959472410478	WITHOUT_CLASSIFICATION	4.052758952139775E-6	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999963097853329	WITHOUT_CLASSIFICATION	3.690214667128592E-6	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999981589546161	WITHOUT_CLASSIFICATION	1.8410453839804783E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999975576305108	WITHOUT_CLASSIFICATION	2.4423694890867123E-6	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999961787349715	WITHOUT_CLASSIFICATION	3.821265028603177E-6	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999978861081267	WITHOUT_CLASSIFICATION	2.1138918732780304E-6	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999969799901309	WITHOUT_CLASSIFICATION	3.0200098691433125E-6	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999963561195987	WITHOUT_CLASSIFICATION	3.643880401287336E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999966431102524	WITHOUT_CLASSIFICATION	3.356889747680736E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.999995807887303	WITHOUT_CLASSIFICATION	4.192112696953424E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999968679573663	WITHOUT_CLASSIFICATION	3.1320426338322673E-6	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999943407315313	WITHOUT_CLASSIFICATION	5.659268468665396E-6	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.999995857214765	WITHOUT_CLASSIFICATION	4.142785234969928E-6	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999971317834339	WITHOUT_CLASSIFICATION	2.868216566199144E-6	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999967559521066	WITHOUT_CLASSIFICATION	3.2440478934516064E-6	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999979115648665	WITHOUT_CLASSIFICATION	2.088435133549018E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999964796414053	WITHOUT_CLASSIFICATION	3.5203585947764198E-6	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999965168391161	WITHOUT_CLASSIFICATION	3.4831608839392495E-6	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999967779630682	WITHOUT_CLASSIFICATION	3.2220369318171836E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999948266413222	WITHOUT_CLASSIFICATION	5.1733586777429235E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999962798068387	WITHOUT_CLASSIFICATION	3.720193161285424E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999967567745518	WITHOUT_CLASSIFICATION	3.2432254483144895E-6	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.999991805304604	WITHOUT_CLASSIFICATION	8.194695396122279E-6	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999955807829667	WITHOUT_CLASSIFICATION	4.419217033246252E-6	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999943718770913	WITHOUT_CLASSIFICATION	5.6281229087019346E-6	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999954987967451	WITHOUT_CLASSIFICATION	4.501203254959212E-6	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999943720019896	WITHOUT_CLASSIFICATION	5.6279980104859525E-6	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999939900445344	WITHOUT_CLASSIFICATION	6.0099554656520694E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999936106656204	WITHOUT_CLASSIFICATION	6.389334379691452E-6	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.999993377959545	WITHOUT_CLASSIFICATION	6.622040454878397E-6	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999958029184944	WITHOUT_CLASSIFICATION	4.197081505635067E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999949890016482	WITHOUT_CLASSIFICATION	5.010998351869867E-6	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.999995270305293	WITHOUT_CLASSIFICATION	4.729694706974806E-6	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999917753852084	WITHOUT_CLASSIFICATION	8.224614791507665E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999955409245214	WITHOUT_CLASSIFICATION	4.459075478549739E-6	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999942296713558	WITHOUT_CLASSIFICATION	5.770328644317035E-6	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999945254251341	WITHOUT_CLASSIFICATION	5.47457486584999E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999920836660788	WITHOUT_CLASSIFICATION	7.916333921162433E-6	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.999995480386802	WITHOUT_CLASSIFICATION	4.519613198064485E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.999997084755651	WITHOUT_CLASSIFICATION	2.915244349014045E-6	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999958553627792	WITHOUT_CLASSIFICATION	4.144637220804198E-6	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999955047422234	WITHOUT_CLASSIFICATION	4.495257776626549E-6	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999944520924838	WITHOUT_CLASSIFICATION	5.5479075161562975E-6	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999976556259079	WITHOUT_CLASSIFICATION	2.3443740921074186E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999962660215579	WITHOUT_CLASSIFICATION	3.7339784420507785E-6	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999967404142334	WITHOUT_CLASSIFICATION	3.259585766761373E-6	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999977027906413	WITHOUT_CLASSIFICATION	2.2972093586062258E-6	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999973528149757	WITHOUT_CLASSIFICATION	2.6471850243832605E-6	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999959498408338	WITHOUT_CLASSIFICATION	4.050159166192425E-6	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999959192661334	WITHOUT_CLASSIFICATION	4.080733866628075E-6	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999951028275182	WITHOUT_CLASSIFICATION	4.897172481781468E-6	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999972825890013	WITHOUT_CLASSIFICATION	2.7174109986205413E-6	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.999997103306728	WITHOUT_CLASSIFICATION	2.896693272034022E-6	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999967640772992	WITHOUT_CLASSIFICATION	3.23592270073434E-6	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999985642285534	WITHOUT_CLASSIFICATION	1.4357714466125376E-6	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999972254045651	WITHOUT_CLASSIFICATION	2.7745954348907117E-6	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999973378317435	WITHOUT_CLASSIFICATION	2.662168256521987E-6	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999974631902926	WITHOUT_CLASSIFICATION	2.5368097074397043E-6	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999970586032139	WITHOUT_CLASSIFICATION	2.94139678615104E-6	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999975502003053	WITHOUT_CLASSIFICATION	2.449799694680755E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999962639589718	WITHOUT_CLASSIFICATION	3.736041028190525E-6	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999985583182798	WITHOUT_CLASSIFICATION	1.4416817201249432E-6	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999971729879801	WITHOUT_CLASSIFICATION	2.8270120197956116E-6	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999984699558052	WITHOUT_CLASSIFICATION	1.5300441947570331E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999981880339982	WITHOUT_CLASSIFICATION	1.8119660019184194E-6	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999974642515789	WITHOUT_CLASSIFICATION	2.5357484212208858E-6	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999965354473943	WITHOUT_CLASSIFICATION	3.4645526056384445E-6	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999976735471229	WITHOUT_CLASSIFICATION	2.326452877115488E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999983084641015	WITHOUT_CLASSIFICATION	1.6915358984488773E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999975776738785	WITHOUT_CLASSIFICATION	2.4223261215696067E-6	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999960531377803	WITHOUT_CLASSIFICATION	3.9468622197150065E-6	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999973512997421	WITHOUT_CLASSIFICATION	2.648700258004363E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999978517482063	WITHOUT_CLASSIFICATION	2.1482517935722446E-6	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999971886404492	WITHOUT_CLASSIFICATION	2.811359550905045E-6	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999962532218744	WITHOUT_CLASSIFICATION	3.7467781256716154E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999968636727564	WITHOUT_CLASSIFICATION	3.1363272436633515E-6	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999970674349152	WITHOUT_CLASSIFICATION	2.932565084696743E-6	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.99999211799958	WITHOUT_CLASSIFICATION	7.88200041995378E-6	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999970809597948	WITHOUT_CLASSIFICATION	2.9190402051091855E-6	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999981372455236	WITHOUT_CLASSIFICATION	1.8627544765334635E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999981063778948	WITHOUT_CLASSIFICATION	1.8936221051875951E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999956224221946	WITHOUT_CLASSIFICATION	4.377577805375323E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999942961376608	WITHOUT_CLASSIFICATION	5.703862339187026E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.999995704955593	WITHOUT_CLASSIFICATION	4.295044406965074E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999980742540486	WITHOUT_CLASSIFICATION	1.9257459513657433E-6	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999958398266795	WITHOUT_CLASSIFICATION	4.1601733204973856E-6	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999960753162083	WITHOUT_CLASSIFICATION	3.9246837916825985E-6	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999957259727092	WITHOUT_CLASSIFICATION	4.2740272907733705E-6	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999935466668963	WITHOUT_CLASSIFICATION	6.453333103687383E-6	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999948579774144	WITHOUT_CLASSIFICATION	5.142022585686455E-6	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999945849167161	WITHOUT_CLASSIFICATION	5.415083283800123E-6	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999935107722596	WITHOUT_CLASSIFICATION	6.489227740390077E-6	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999941325947299	WITHOUT_CLASSIFICATION	5.867405270116521E-6	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999972786831748	WITHOUT_CLASSIFICATION	2.721316825244788E-6	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999957386592119	WITHOUT_CLASSIFICATION	4.261340788136775E-6	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999969351912577	WITHOUT_CLASSIFICATION	3.06480874229502E-6	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999952138492243	WITHOUT_CLASSIFICATION	4.786150775715023E-6	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999958274832935	WITHOUT_CLASSIFICATION	4.172516706453819E-6	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999959883984677	WITHOUT_CLASSIFICATION	4.011601532243686E-6	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999955177926451	WITHOUT_CLASSIFICATION	4.482207354983447E-6	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999966721032466	WITHOUT_CLASSIFICATION	3.3278967533898045E-6	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999948231485701	WITHOUT_CLASSIFICATION	5.176851429850479E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999964715104335	WITHOUT_CLASSIFICATION	3.528489566543523E-6	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999966922423856	WITHOUT_CLASSIFICATION	3.307757614254546E-6	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999952828095807	WITHOUT_CLASSIFICATION	4.717190419193412E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.999996602938729	WITHOUT_CLASSIFICATION	3.3970612709053185E-6	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999935807325155	WITHOUT_CLASSIFICATION	6.419267484438925E-6	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999955244785079	WITHOUT_CLASSIFICATION	4.47552149207148E-6	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999959706550893	WITHOUT_CLASSIFICATION	4.029344910734723E-6	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999975323005023	WITHOUT_CLASSIFICATION	2.4676994978180977E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999970872132541	WITHOUT_CLASSIFICATION	2.9127867460596204E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999956862986186	WITHOUT_CLASSIFICATION	4.313701381523991E-6	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.999993832616229	WITHOUT_CLASSIFICATION	6.167383771045836E-6	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999960421312777	WITHOUT_CLASSIFICATION	3.957868722261178E-6	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999962613521839	WITHOUT_CLASSIFICATION	3.7386478159685707E-6	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999967406378482	WITHOUT_CLASSIFICATION	3.259362151863225E-6	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999948006677551	WITHOUT_CLASSIFICATION	5.1993322448464925E-6	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999931265144919	WITHOUT_CLASSIFICATION	6.8734855080404415E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999925725928609	WITHOUT_CLASSIFICATION	7.4274071390286255E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999938355329672	WITHOUT_CLASSIFICATION	6.164467032832954E-6	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999919459112411	WITHOUT_CLASSIFICATION	8.05408875886037E-6	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999965202171084	WITHOUT_CLASSIFICATION	3.4797828915927244E-6	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999959523529287	WITHOUT_CLASSIFICATION	4.0476470713262705E-6	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.999997150579952	WITHOUT_CLASSIFICATION	2.8494200480410164E-6	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999941307989567	WITHOUT_CLASSIFICATION	5.869201043238288E-6	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999967258523647	WITHOUT_CLASSIFICATION	3.2741476352047963E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999945799336077	WITHOUT_CLASSIFICATION	5.420066392243263E-6	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999934024396837	WITHOUT_CLASSIFICATION	6.5975603162863494E-6	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999978050464389	WITHOUT_CLASSIFICATION	2.194953561091899E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999949370202581	WITHOUT_CLASSIFICATION	5.062979741884315E-6	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999951160459101	WITHOUT_CLASSIFICATION	4.883954089943781E-6	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999950924010859	WITHOUT_CLASSIFICATION	4.907598914114113E-6	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999965056492414	WITHOUT_CLASSIFICATION	3.494350758592849E-6	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999948925013948	WITHOUT_CLASSIFICATION	5.1074986051273155E-6	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999943273497173	WITHOUT_CLASSIFICATION	5.672650282741229E-6	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999935043852691	WITHOUT_CLASSIFICATION	6.495614730961223E-6	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999943532197465	WITHOUT_CLASSIFICATION	5.646780253544794E-6	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999952728810119	WITHOUT_CLASSIFICATION	4.7271189881663165E-6	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999936993688828	WITHOUT_CLASSIFICATION	6.300631117117572E-6	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999944843538053	WITHOUT_CLASSIFICATION	5.515646194582952E-6	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999954344167172	WITHOUT_CLASSIFICATION	4.565583282786046E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.99999457605259	WITHOUT_CLASSIFICATION	5.423947409941624E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999952717088819	WITHOUT_CLASSIFICATION	4.728291118126366E-6	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999960435573401	WITHOUT_CLASSIFICATION	3.956442659992763E-6	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999943477152418	WITHOUT_CLASSIFICATION	5.652284758186931E-6	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999947881175791	WITHOUT_CLASSIFICATION	5.211882420853258E-6	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999954244722292	WITHOUT_CLASSIFICATION	4.575527770815031E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999958774301655	WITHOUT_CLASSIFICATION	4.1225698345047204E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.999995321579539	WITHOUT_CLASSIFICATION	4.6784204611009E-6	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999967368535798	WITHOUT_CLASSIFICATION	3.2631464201075647E-6	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999962209863054	WITHOUT_CLASSIFICATION	3.7790136946678068E-6	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999960775178981	WITHOUT_CLASSIFICATION	3.922482101874479E-6	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999953317463548	WITHOUT_CLASSIFICATION	4.668253645220599E-6	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999948496606408	WITHOUT_CLASSIFICATION	5.150339359211065E-6	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999950539947448	WITHOUT_CLASSIFICATION	4.946005255292074E-6	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999964110544677	WITHOUT_CLASSIFICATION	3.5889455323162745E-6	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999941654986204	WITHOUT_CLASSIFICATION	5.834501379577424E-6	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999962942946972	WITHOUT_CLASSIFICATION	3.705705302968857E-6	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999966291550787	WITHOUT_CLASSIFICATION	3.3708449213460284E-6	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999950011094527	WITHOUT_CLASSIFICATION	4.998890547328892E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999864547610722	WITHOUT_CLASSIFICATION	1.3545238927711102E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999904344003495	WITHOUT_CLASSIFICATION	9.56559965043271E-6	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999776844159336	WITHOUT_CLASSIFICATION	2.231558406651114E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999937402437243	WITHOUT_CLASSIFICATION	6.259756275696453E-6	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999917237437332	WITHOUT_CLASSIFICATION	8.276256266874337E-6	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999893671086509	WITHOUT_CLASSIFICATION	1.0632891349119215E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999926578437932	WITHOUT_CLASSIFICATION	7.342156206839368E-6	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.999986068568999	WITHOUT_CLASSIFICATION	1.3931431000986897E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999923644263613	WITHOUT_CLASSIFICATION	7.635573638687247E-6	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999911661014914	WITHOUT_CLASSIFICATION	8.833898508557882E-6	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999880858421508	WITHOUT_CLASSIFICATION	1.1914157849220241E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999945240109538	WITHOUT_CLASSIFICATION	5.475989046160552E-6	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999966695312456	WITHOUT_CLASSIFICATION	3.3304687544822015E-6	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999971179971746	WITHOUT_CLASSIFICATION	2.8820028253835374E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999976423877998	WITHOUT_CLASSIFICATION	2.35761220022265E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999971586908544	WITHOUT_CLASSIFICATION	2.8413091456593222E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999988659643724	WITHOUT_CLASSIFICATION	1.1340356276244607E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9999071959354086	WITHOUT_CLASSIFICATION	9.280406459147632E-5	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9999910645633681	WITHOUT_CLASSIFICATION	8.935436631869771E-6	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9999802332477782	WITHOUT_CLASSIFICATION	1.9766752221834948E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9998291020682885	WITHOUT_CLASSIFICATION	1.7089793171144404E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9996242253623019	WITHOUT_CLASSIFICATION	3.757746376981733E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999922245193684	WITHOUT_CLASSIFICATION	7.775480631583316E-6	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999883990906441	WITHOUT_CLASSIFICATION	1.1600909355843937E-5	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9999989284737685	WITHOUT_CLASSIFICATION	1.0715262315123916E-6	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999171026381904	WITHOUT_CLASSIFICATION	8.28973618095752E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9999564211748434	WITHOUT_CLASSIFICATION	4.357882515655972E-5	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999925352384315	WITHOUT_CLASSIFICATION	7.464761568576389E-6	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999954763502047	WITHOUT_CLASSIFICATION	4.523649795310654E-6	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9994939853582897	WITHOUT_CLASSIFICATION	5.060146417103549E-4	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999959807787516	WITHOUT_CLASSIFICATION	4.0192212484519475E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9994632071755775	WITHOUT_CLASSIFICATION	5.36792824422578E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9998416957178691	WITHOUT_CLASSIFICATION	1.583042821308891E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9997011793036992	WITHOUT_CLASSIFICATION	2.9882069630086916E-4	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999995948521376	WITHOUT_CLASSIFICATION	4.0514786236035786E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999779890838	WITHOUT_CLASSIFICATION	2.201091631356257E-8	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999081475782743	WITHOUT_CLASSIFICATION	9.185242172573436E-5	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999988463722621	WITHOUT_CLASSIFICATION	1.1536277379668506E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.999999958308961	WITHOUT_CLASSIFICATION	4.16910389144835E-8	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.999999996694034	WITHOUT_CLASSIFICATION	3.3059659640332563E-9	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.999999996694034	WITHOUT_CLASSIFICATION	3.3059659640332563E-9	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9999962345506097	WITHOUT_CLASSIFICATION	3.7654493902534896E-6	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9999733720345123	WITHOUT_CLASSIFICATION	2.662796548773743E-5	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9999601285665796	WITHOUT_CLASSIFICATION	3.9871433420397315E-5	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999823381300523	WITHOUT_CLASSIFICATION	1.7661869947683216E-5	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9999880098840247	WITHOUT_CLASSIFICATION	1.1990115975205134E-5	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999989409449667	WITHOUT_CLASSIFICATION	1.059055033296924E-6	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9999322792415852	WITHOUT_CLASSIFICATION	6.7720758414811E-5	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999892456901736	WITHOUT_CLASSIFICATION	1.0754309826467281E-5	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9981449270684725	WITHOUT_CLASSIFICATION	0.001855072931527506	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999998304678641	WITHOUT_CLASSIFICATION	1.6953213590906064E-7	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999996938306163	WITHOUT_CLASSIFICATION	3.0616938372725606E-7	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9998148463589187	WITHOUT_CLASSIFICATION	1.8515364108127557E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9993585264180603	WITHOUT_CLASSIFICATION	6.414735819396405E-4	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999982010938071	WITHOUT_CLASSIFICATION	1.7989061928968906E-6	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999997140982068	WITHOUT_CLASSIFICATION	2.8590179330848514E-7	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.999997075194476	WITHOUT_CLASSIFICATION	2.9248055240219357E-6	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.999999921854484	WITHOUT_CLASSIFICATION	7.814551593333878E-8	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9997652061672663	WITHOUT_CLASSIFICATION	2.3479383273380356E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9997661262830109	WITHOUT_CLASSIFICATION	2.338737169891503E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999449258978697	WITHOUT_CLASSIFICATION	5.507410213031855E-5	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999999839169473	WITHOUT_CLASSIFICATION	1.608305266357437E-8	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999982392348062	WITHOUT_CLASSIFICATION	1.7607651937714359E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.7152047891380466	WITHOUT_CLASSIFICATION	0.2847952108619534	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999999192239678	WITHOUT_CLASSIFICATION	8.07760321888263E-8	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.7152047891380466	WITHOUT_CLASSIFICATION	0.2847952108619534	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9999994933797962	WITHOUT_CLASSIFICATION	5.066202037766418E-7	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.999999867319334	WITHOUT_CLASSIFICATION	1.3268066603590605E-7	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.7209683458013793	DEFECT	0.27903165419862086	WITHOUT_CLASSIFICATION
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999927040011353	WITHOUT_CLASSIFICATION	7.295998864615025E-6	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9999086192718032	WITHOUT_CLASSIFICATION	9.138072819682457E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999998038888498	WITHOUT_CLASSIFICATION	1.961111502037028E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999998038888498	WITHOUT_CLASSIFICATION	1.961111502037028E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999998038888498	WITHOUT_CLASSIFICATION	1.961111502037028E-6	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9999963634105556	WITHOUT_CLASSIFICATION	3.6365894443641E-6	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999924822889646	WITHOUT_CLASSIFICATION	7.517711035411995E-6	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.999999965794774	WITHOUT_CLASSIFICATION	3.420522601151078E-8	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999825384127349	WITHOUT_CLASSIFICATION	1.7461587265138958E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999825384127349	WITHOUT_CLASSIFICATION	1.7461587265138958E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999825384127349	WITHOUT_CLASSIFICATION	1.7461587265138958E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999825384127349	WITHOUT_CLASSIFICATION	1.7461587265138958E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999825384127349	WITHOUT_CLASSIFICATION	1.7461587265138958E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999825384127349	WITHOUT_CLASSIFICATION	1.7461587265138958E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999271887067924	WITHOUT_CLASSIFICATION	7.281129320765683E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999271887067924	WITHOUT_CLASSIFICATION	7.281129320765683E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999271887067924	WITHOUT_CLASSIFICATION	7.281129320765683E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999271887067924	WITHOUT_CLASSIFICATION	7.281129320765683E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999271887067924	WITHOUT_CLASSIFICATION	7.281129320765683E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999907651798999	WITHOUT_CLASSIFICATION	9.234820100133223E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999907651798999	WITHOUT_CLASSIFICATION	9.234820100133223E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999907651798999	WITHOUT_CLASSIFICATION	9.234820100133223E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999907651798999	WITHOUT_CLASSIFICATION	9.234820100133223E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999907651798999	WITHOUT_CLASSIFICATION	9.234820100133223E-6	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999710418885432	WITHOUT_CLASSIFICATION	2.89581114568176E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999710418885432	WITHOUT_CLASSIFICATION	2.89581114568176E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999710418885432	WITHOUT_CLASSIFICATION	2.89581114568176E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999710418885432	WITHOUT_CLASSIFICATION	2.89581114568176E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999710418885432	WITHOUT_CLASSIFICATION	2.89581114568176E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999710418885432	WITHOUT_CLASSIFICATION	2.89581114568176E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998222749497796	WITHOUT_CLASSIFICATION	1.7772505022051267E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998222749497796	WITHOUT_CLASSIFICATION	1.7772505022051267E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998222749497796	WITHOUT_CLASSIFICATION	1.7772505022051267E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998222749497796	WITHOUT_CLASSIFICATION	1.7772505022051267E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998222749497796	WITHOUT_CLASSIFICATION	1.7772505022051267E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997825749989986	WITHOUT_CLASSIFICATION	2.1742500100140313E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997825749989986	WITHOUT_CLASSIFICATION	2.1742500100140313E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997825749989986	WITHOUT_CLASSIFICATION	2.1742500100140313E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997825749989986	WITHOUT_CLASSIFICATION	2.1742500100140313E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997825749989986	WITHOUT_CLASSIFICATION	2.1742500100140313E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999063047562557	WITHOUT_CLASSIFICATION	9.369524374426711E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999063047562557	WITHOUT_CLASSIFICATION	9.369524374426711E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999063047562557	WITHOUT_CLASSIFICATION	9.369524374426711E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999063047562557	WITHOUT_CLASSIFICATION	9.369524374426711E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999063047562557	WITHOUT_CLASSIFICATION	9.369524374426711E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999943351908771	WITHOUT_CLASSIFICATION	5.6648091228856824E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999999835410799	WITHOUT_CLASSIFICATION	1.6458920181119043E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999996951379658	WITHOUT_CLASSIFICATION	3.048620341064708E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.99999967947061	WITHOUT_CLASSIFICATION	3.205293899181643E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999986858061596	WITHOUT_CLASSIFICATION	1.3141938403722667E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999973827789648	WITHOUT_CLASSIFICATION	2.617221035181974E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999967325522349	WITHOUT_CLASSIFICATION	3.2674477651769284E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999966482409612	WITHOUT_CLASSIFICATION	3.351759038812106E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999942650554711	WITHOUT_CLASSIFICATION	5.734944528932394E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.999995630719859	WITHOUT_CLASSIFICATION	4.369280141036743E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999944764984823	WITHOUT_CLASSIFICATION	5.523501517733571E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999940617686289	WITHOUT_CLASSIFICATION	5.938231371029256E-6	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999979240020537	WITHOUT_CLASSIFICATION	2.075997946240878E-6	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999967432576627	WITHOUT_CLASSIFICATION	3.2567423371564155E-6	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999964332805545	WITHOUT_CLASSIFICATION	3.56671944548243E-6	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999958930234759	WITHOUT_CLASSIFICATION	4.106976524074782E-6	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999963461554652	WITHOUT_CLASSIFICATION	3.653844534808062E-6	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999978594495571	WITHOUT_CLASSIFICATION	2.1405504429154528E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999970242680211	WITHOUT_CLASSIFICATION	2.975731979023432E-6	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999966159101285	WITHOUT_CLASSIFICATION	3.3840898715575223E-6	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999952888507612	WITHOUT_CLASSIFICATION	4.711149238797898E-6	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.999994102007443	WITHOUT_CLASSIFICATION	5.897992557021391E-6	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999966459552901	WITHOUT_CLASSIFICATION	3.354044709822075E-6	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999947217357775	WITHOUT_CLASSIFICATION	5.278264222465829E-6	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999964802364959	WITHOUT_CLASSIFICATION	3.5197635040879156E-6	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.999995840786248	WITHOUT_CLASSIFICATION	4.159213751945056E-6	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999974681310294	WITHOUT_CLASSIFICATION	2.5318689706438506E-6	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.999995751317876	WITHOUT_CLASSIFICATION	4.248682123946473E-6	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999955963228472	WITHOUT_CLASSIFICATION	4.40367715279217E-6	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999954455234205	WITHOUT_CLASSIFICATION	4.554476579574043E-6	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999951111239552	WITHOUT_CLASSIFICATION	4.8888760447651645E-6	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999949212905631	WITHOUT_CLASSIFICATION	5.078709436822125E-6	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999938441509827	WITHOUT_CLASSIFICATION	6.155849017338122E-6	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999965908808802	WITHOUT_CLASSIFICATION	3.4091191198675194E-6	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999950574688006	WITHOUT_CLASSIFICATION	4.942531199387167E-6	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999935693656784	WITHOUT_CLASSIFICATION	6.430634321521238E-6	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999952858064457	WITHOUT_CLASSIFICATION	4.714193554272996E-6	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999945284854557	WITHOUT_CLASSIFICATION	5.471514544359435E-6	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999964503377338	WITHOUT_CLASSIFICATION	3.5496622662790963E-6	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999974883236702	WITHOUT_CLASSIFICATION	2.5116763298267554E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999968358274592	WITHOUT_CLASSIFICATION	3.164172540787807E-6	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999960498770303	WITHOUT_CLASSIFICATION	3.950122969716562E-6	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999948730281694	WITHOUT_CLASSIFICATION	5.1269718305708975E-6	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999842105551898	WITHOUT_CLASSIFICATION	1.578944481010524E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999882356653806	WITHOUT_CLASSIFICATION	1.1764334619342857E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999878967260205	WITHOUT_CLASSIFICATION	1.2103273979514963E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999943778537354	WITHOUT_CLASSIFICATION	5.622146264543695E-6	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999943466193604	WITHOUT_CLASSIFICATION	5.653380639539384E-6	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999900359263294	WITHOUT_CLASSIFICATION	9.96407367061064E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.999994163010599	WITHOUT_CLASSIFICATION	5.836989401055445E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999907057467871	WITHOUT_CLASSIFICATION	9.294253213049953E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999908681126483	WITHOUT_CLASSIFICATION	9.131887351833575E-6	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999914271591388	WITHOUT_CLASSIFICATION	8.572840861263046E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.999997077706741	WITHOUT_CLASSIFICATION	2.922293259112323E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999910226287225	WITHOUT_CLASSIFICATION	8.977371277513752E-6	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999951652790419	WITHOUT_CLASSIFICATION	4.834720958162711E-6	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999940070108108	WITHOUT_CLASSIFICATION	5.992989189225801E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999949106158457	WITHOUT_CLASSIFICATION	5.089384154299665E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999965125095598	WITHOUT_CLASSIFICATION	3.487490440152194E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999952784496574	WITHOUT_CLASSIFICATION	4.721550342509296E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999973777586914	WITHOUT_CLASSIFICATION	2.622241308697854E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.999997155257665	WITHOUT_CLASSIFICATION	2.844742335110628E-6	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999927839324502	WITHOUT_CLASSIFICATION	7.216067549738533E-6	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999917132078856	WITHOUT_CLASSIFICATION	8.28679211450097E-6	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999918712847887	WITHOUT_CLASSIFICATION	8.128715211259426E-6	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999946992918207	WITHOUT_CLASSIFICATION	5.300708179222933E-6	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999928218412696	WITHOUT_CLASSIFICATION	7.1781587304877505E-6	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999946993572273	WITHOUT_CLASSIFICATION	5.300642772605389E-6	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999915056670527	WITHOUT_CLASSIFICATION	8.494332947223274E-6	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999911611189337	WITHOUT_CLASSIFICATION	8.838881066390941E-6	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999929102180319	WITHOUT_CLASSIFICATION	7.089781968093298E-6	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.999993744315986	WITHOUT_CLASSIFICATION	6.255684014033047E-6	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999912358581079	WITHOUT_CLASSIFICATION	8.764141892172978E-6	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999923912452338	WITHOUT_CLASSIFICATION	7.608754766175555E-6	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999933224525245	WITHOUT_CLASSIFICATION	6.6775474755802866E-6	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999908162979585	WITHOUT_CLASSIFICATION	9.183702041460672E-6	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999922051832268	WITHOUT_CLASSIFICATION	7.794816773125739E-6	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999957097754015	WITHOUT_CLASSIFICATION	4.290224598560697E-6	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999938708610991	WITHOUT_CLASSIFICATION	6.129138900758091E-6	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999931871625279	WITHOUT_CLASSIFICATION	6.812837471982975E-6	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999942040652503	WITHOUT_CLASSIFICATION	5.795934749748225E-6	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999901784692274	WITHOUT_CLASSIFICATION	9.821530772457879E-6	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999954006893175	WITHOUT_CLASSIFICATION	4.599310682577605E-6	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999948422159644	WITHOUT_CLASSIFICATION	5.15778403572192E-6	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999949957196254	WITHOUT_CLASSIFICATION	5.004280374679305E-6	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999939202551656	WITHOUT_CLASSIFICATION	6.079744834280277E-6	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999954275070704	WITHOUT_CLASSIFICATION	4.572492929598679E-6	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999931534505947	WITHOUT_CLASSIFICATION	6.846549405326443E-6	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999951624274006	WITHOUT_CLASSIFICATION	4.8375725994015625E-6	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999958262542228	WITHOUT_CLASSIFICATION	4.173745777131149E-6	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999958594232016	WITHOUT_CLASSIFICATION	4.140576798445868E-6	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999966140177773	WITHOUT_CLASSIFICATION	3.385982222728881E-6	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999924419541423	WITHOUT_CLASSIFICATION	7.558045857681244E-6	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.999996320498094	WITHOUT_CLASSIFICATION	3.6795019061262054E-6	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999978881248123	WITHOUT_CLASSIFICATION	2.1118751876793792E-6	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999964882449662	WITHOUT_CLASSIFICATION	3.511755033834781E-6	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.999998434032188	WITHOUT_CLASSIFICATION	1.5659678119378511E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999967364300485	WITHOUT_CLASSIFICATION	3.2635699515453354E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.999995807887303	WITHOUT_CLASSIFICATION	4.192112696953424E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999946145758906	WITHOUT_CLASSIFICATION	5.385424109435871E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999968679573663	WITHOUT_CLASSIFICATION	3.1320426338322673E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999948266413222	WITHOUT_CLASSIFICATION	5.1733586777429235E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999967567745518	WITHOUT_CLASSIFICATION	3.2432254483144895E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999936106656204	WITHOUT_CLASSIFICATION	6.389334379691452E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999949890016482	WITHOUT_CLASSIFICATION	5.010998351869867E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999955409245214	WITHOUT_CLASSIFICATION	4.459075478549739E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.999997084755651	WITHOUT_CLASSIFICATION	2.915244349014045E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999962660215579	WITHOUT_CLASSIFICATION	3.7339784420507785E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999971680325885	WITHOUT_CLASSIFICATION	2.8319674114214694E-6	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999967505737948	WITHOUT_CLASSIFICATION	3.2494262052646036E-6	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.999995699524096	WITHOUT_CLASSIFICATION	4.300475904009289E-6	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999967035090528	WITHOUT_CLASSIFICATION	3.2964909473201734E-6	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999964642634545	WITHOUT_CLASSIFICATION	3.5357365455874192E-6	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.99999705896472	WITHOUT_CLASSIFICATION	2.941035280017361E-6	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.999994917626814	WITHOUT_CLASSIFICATION	5.082373185938342E-6	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999970493954535	WITHOUT_CLASSIFICATION	2.9506045466138866E-6	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999956076260375	WITHOUT_CLASSIFICATION	4.392373962499113E-6	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999965758271688	WITHOUT_CLASSIFICATION	3.424172831189799E-6	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999960316100048	WITHOUT_CLASSIFICATION	3.9683899951212E-6	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999935029746276	WITHOUT_CLASSIFICATION	6.497025372421923E-6	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999970687981271	WITHOUT_CLASSIFICATION	2.931201872989984E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999972448967388	WITHOUT_CLASSIFICATION	2.75510326112261E-6	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999976591633564	WITHOUT_CLASSIFICATION	2.3408366435754587E-6	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.999994398749375	WITHOUT_CLASSIFICATION	5.601250624975307E-6	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999949396288941	WITHOUT_CLASSIFICATION	5.060371105903495E-6	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999959098202807	WITHOUT_CLASSIFICATION	4.090179719247551E-6	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999960263629402	WITHOUT_CLASSIFICATION	3.973637059923045E-6	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.999995973163012	WITHOUT_CLASSIFICATION	4.026836987968872E-6	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.999995800915195	WITHOUT_CLASSIFICATION	4.19908480499603E-6	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999959863605717	WITHOUT_CLASSIFICATION	4.013639428253449E-6	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999943763174259	WITHOUT_CLASSIFICATION	5.623682574055434E-6	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.999995945956623	WITHOUT_CLASSIFICATION	4.054043376953575E-6	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999937910311778	WITHOUT_CLASSIFICATION	6.2089688221762734E-6	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.999991409340887	WITHOUT_CLASSIFICATION	8.590659112988188E-6	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999951702350656	WITHOUT_CLASSIFICATION	4.829764934362225E-6	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999949710681404	WITHOUT_CLASSIFICATION	5.0289318596991265E-6	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999953865594101	WITHOUT_CLASSIFICATION	4.61344058993259E-6	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999975272928028	WITHOUT_CLASSIFICATION	2.472707197166677E-6	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999967913242807	WITHOUT_CLASSIFICATION	3.2086757193530022E-6	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999943494973706	WITHOUT_CLASSIFICATION	5.650502629396758E-6	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999972582371123	WITHOUT_CLASSIFICATION	2.741762887798464E-6	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999962014435674	WITHOUT_CLASSIFICATION	3.7985564327660382E-6	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999961280008052	WITHOUT_CLASSIFICATION	3.8719991948489775E-6	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999958263510431	WITHOUT_CLASSIFICATION	4.173648956866917E-6	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.999997822949637	WITHOUT_CLASSIFICATION	2.1770503629520862E-6	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999965443628361	WITHOUT_CLASSIFICATION	3.45563716389806E-6	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999953135981963	WITHOUT_CLASSIFICATION	4.68640180378438E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999972466020196	WITHOUT_CLASSIFICATION	2.753397980345228E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999981880339982	WITHOUT_CLASSIFICATION	1.8119660019184194E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.999997834781994	WITHOUT_CLASSIFICATION	2.16521800601392E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999983084641015	WITHOUT_CLASSIFICATION	1.6915358984488773E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999978517482063	WITHOUT_CLASSIFICATION	2.1482517935722446E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999968636727564	WITHOUT_CLASSIFICATION	3.1363272436633515E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999942961376608	WITHOUT_CLASSIFICATION	5.703862339187026E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.999995704955593	WITHOUT_CLASSIFICATION	4.295044406965074E-6	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999948579774144	WITHOUT_CLASSIFICATION	5.142022585686455E-6	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999945849167161	WITHOUT_CLASSIFICATION	5.415083283800123E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999949057498215	WITHOUT_CLASSIFICATION	5.094250178506782E-6	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999981188519128	WITHOUT_CLASSIFICATION	1.881148087123879E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999973807750645	WITHOUT_CLASSIFICATION	2.619224935504434E-6	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999975395098862	WITHOUT_CLASSIFICATION	2.4604901138127205E-6	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.99999794810878	WITHOUT_CLASSIFICATION	2.0518912200896607E-6	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999930882286999	WITHOUT_CLASSIFICATION	6.91177130013569E-6	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999976201923324	WITHOUT_CLASSIFICATION	2.3798076676243713E-6	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.999997559067808	WITHOUT_CLASSIFICATION	2.4409321919548312E-6	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999983552396268	WITHOUT_CLASSIFICATION	1.6447603731728045E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999972578571632	WITHOUT_CLASSIFICATION	2.7421428368139795E-6	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999969101380387	WITHOUT_CLASSIFICATION	3.0898619612008046E-6	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999980218793941	WITHOUT_CLASSIFICATION	1.9781206059295215E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999972666735597	WITHOUT_CLASSIFICATION	2.7333264402514027E-6	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999969449751637	WITHOUT_CLASSIFICATION	3.0550248364273974E-6	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999966010232856	WITHOUT_CLASSIFICATION	3.398976714292757E-6	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999966411446103	WITHOUT_CLASSIFICATION	3.358855389636739E-6	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999957327019231	WITHOUT_CLASSIFICATION	4.2672980769202835E-6	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999961420249633	WITHOUT_CLASSIFICATION	3.857975036661999E-6	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999978099652544	WITHOUT_CLASSIFICATION	2.1900347456003057E-6	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999979705645895	WITHOUT_CLASSIFICATION	2.029435410529826E-6	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999968538714102	WITHOUT_CLASSIFICATION	3.1461285898478436E-6	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999955342685914	WITHOUT_CLASSIFICATION	4.465731408626148E-6	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999944822093437	WITHOUT_CLASSIFICATION	5.517790656276079E-6	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999964215814302	WITHOUT_CLASSIFICATION	3.578418569724701E-6	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999953011866294	WITHOUT_CLASSIFICATION	4.698813370548382E-6	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999954289493973	WITHOUT_CLASSIFICATION	4.571050602678389E-6	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999927665097683	WITHOUT_CLASSIFICATION	7.233490231727879E-6	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.999993956037466	WITHOUT_CLASSIFICATION	6.0439625340148145E-6	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999943515644019	WITHOUT_CLASSIFICATION	5.6484355981808404E-6	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999964602655232	WITHOUT_CLASSIFICATION	3.5397344767863116E-6	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999946141496922	WITHOUT_CLASSIFICATION	5.385850307895032E-6	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999953123407584	WITHOUT_CLASSIFICATION	4.687659241607865E-6	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999950908091051	WITHOUT_CLASSIFICATION	4.909190894877537E-6	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999965981938541	WITHOUT_CLASSIFICATION	3.401806145828648E-6	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999962908540766	WITHOUT_CLASSIFICATION	3.709145923374561E-6	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999963661859812	WITHOUT_CLASSIFICATION	3.633814018684452E-6	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999939692954725	WITHOUT_CLASSIFICATION	6.030704527527034E-6	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999966130764585	WITHOUT_CLASSIFICATION	3.386923541533002E-6	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999943239511838	WITHOUT_CLASSIFICATION	5.6760488162091346E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.999996602938729	WITHOUT_CLASSIFICATION	3.3970612709053185E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999970872132541	WITHOUT_CLASSIFICATION	2.9127867460596204E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999956862986186	WITHOUT_CLASSIFICATION	4.313701381523991E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999962802504594	WITHOUT_CLASSIFICATION	3.71974954050013E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999938355329672	WITHOUT_CLASSIFICATION	6.164467032832954E-6	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999965202171084	WITHOUT_CLASSIFICATION	3.4797828915927244E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999945799336077	WITHOUT_CLASSIFICATION	5.420066392243263E-6	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999934024396837	WITHOUT_CLASSIFICATION	6.5975603162863494E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.99999457605259	WITHOUT_CLASSIFICATION	5.423947409941624E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999952717088819	WITHOUT_CLASSIFICATION	4.728291118126366E-6	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999963191066444	WITHOUT_CLASSIFICATION	3.6808933554367627E-6	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.999997803067278	WITHOUT_CLASSIFICATION	2.196932721929053E-6	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999954187933329	WITHOUT_CLASSIFICATION	4.581206667052679E-6	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999962089998805	WITHOUT_CLASSIFICATION	3.791000119552778E-6	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999952466818924	WITHOUT_CLASSIFICATION	4.753318107557993E-6	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999963543235912	WITHOUT_CLASSIFICATION	3.645676408663078E-6	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999968257953259	WITHOUT_CLASSIFICATION	3.174204674192757E-6	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999952284290381	WITHOUT_CLASSIFICATION	4.771570961816083E-6	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999940263642344	WITHOUT_CLASSIFICATION	5.973635765546973E-6	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999946540406951	WITHOUT_CLASSIFICATION	5.345959304815244E-6	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999944856542001	WITHOUT_CLASSIFICATION	5.5143457998646806E-6	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999960091521845	WITHOUT_CLASSIFICATION	3.9908478156174E-6	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999953742939932	WITHOUT_CLASSIFICATION	4.6257060067794164E-6	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999960296098005	WITHOUT_CLASSIFICATION	3.9703901994579075E-6	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999963138226926	WITHOUT_CLASSIFICATION	3.6861773073289735E-6	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999970815367296	WITHOUT_CLASSIFICATION	2.9184632703206046E-6	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.999996069794713	WITHOUT_CLASSIFICATION	3.9302052870418946E-6	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999964415586575	WITHOUT_CLASSIFICATION	3.558441342540718E-6	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999946985917908	WITHOUT_CLASSIFICATION	5.301408209131946E-6	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999941282893708	WITHOUT_CLASSIFICATION	5.8717106291842495E-6	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.999995663006375	WITHOUT_CLASSIFICATION	4.3369936250680364E-6	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999951608319573	WITHOUT_CLASSIFICATION	4.839168042783094E-6	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999969114847351	WITHOUT_CLASSIFICATION	3.0885152648728815E-6	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999958653245429	WITHOUT_CLASSIFICATION	4.134675457061833E-6	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999947956813687	WITHOUT_CLASSIFICATION	5.204318631246792E-6	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999947715550425	WITHOUT_CLASSIFICATION	5.228444957495062E-6	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999932832470741	WITHOUT_CLASSIFICATION	6.716752925796367E-6	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999946850668965	WITHOUT_CLASSIFICATION	5.31493310349533E-6	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999956843263602	WITHOUT_CLASSIFICATION	4.315673639825004E-6	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999962445003542	WITHOUT_CLASSIFICATION	3.755499645920342E-6	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999924697923331	WITHOUT_CLASSIFICATION	7.530207666891212E-6	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999949854361945	WITHOUT_CLASSIFICATION	5.014563805552142E-6	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999953563960354	WITHOUT_CLASSIFICATION	4.643603964632273E-6	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999942542568246	WITHOUT_CLASSIFICATION	5.745743175416106E-6	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999959927848926	WITHOUT_CLASSIFICATION	4.007215107387155E-6	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999930752508338	WITHOUT_CLASSIFICATION	6.924749166186087E-6	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999949089124313	WITHOUT_CLASSIFICATION	5.091087568642236E-6	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999927597517314	WITHOUT_CLASSIFICATION	7.240248268649455E-6	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999951116678074	WITHOUT_CLASSIFICATION	4.8883321925993336E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999936366891253	WITHOUT_CLASSIFICATION	6.3633108746250756E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999958774301655	WITHOUT_CLASSIFICATION	4.1225698345047204E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.999995321579539	WITHOUT_CLASSIFICATION	4.6784204611009E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999864547610722	WITHOUT_CLASSIFICATION	1.3545238927711102E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999939998255768	WITHOUT_CLASSIFICATION	6.000174423184865E-6	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999776844159336	WITHOUT_CLASSIFICATION	2.231558406651114E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999917237437332	WITHOUT_CLASSIFICATION	8.276256266874337E-6	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999926578437932	WITHOUT_CLASSIFICATION	7.342156206839368E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999976423877998	WITHOUT_CLASSIFICATION	2.35761220022265E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999971586908544	WITHOUT_CLASSIFICATION	2.8413091456593222E-6	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999960222964968	WITHOUT_CLASSIFICATION	3.977703503234727E-6	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999979796309506	WITHOUT_CLASSIFICATION	2.0203690493616602E-6	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999960707685748	WITHOUT_CLASSIFICATION	3.929231425244799E-6	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999910513314528	WITHOUT_CLASSIFICATION	8.948668547293629E-6	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999962998054364	WITHOUT_CLASSIFICATION	3.700194563568582E-6	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999955582848581	WITHOUT_CLASSIFICATION	4.441715141892595E-6	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.999995621637672	WITHOUT_CLASSIFICATION	4.378362328112219E-6	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999955664697462	WITHOUT_CLASSIFICATION	4.4335302538007955E-6	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999936276128395	WITHOUT_CLASSIFICATION	6.372387160523205E-6	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999969271274792	WITHOUT_CLASSIFICATION	3.072872520777075E-6	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999954286618205	WITHOUT_CLASSIFICATION	4.571338179534672E-6	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999967476626247	WITHOUT_CLASSIFICATION	3.2523373753060583E-6	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999898043682128	WITHOUT_CLASSIFICATION	1.0195631787161785E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999967235883568	WITHOUT_CLASSIFICATION	3.2764116433028415E-6	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.999994293699175	WITHOUT_CLASSIFICATION	5.706300825069861E-6	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999920851218661	WITHOUT_CLASSIFICATION	7.914878133936586E-6	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999942233749606	WITHOUT_CLASSIFICATION	5.77662503936125E-6	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999931893139001	WITHOUT_CLASSIFICATION	6.810686099842783E-6	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999948881525569	WITHOUT_CLASSIFICATION	5.111847443045166E-6	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999919177647062	WITHOUT_CLASSIFICATION	8.082235293890645E-6	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.999981358761378	WITHOUT_CLASSIFICATION	1.8641238622070454E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999875440724755	WITHOUT_CLASSIFICATION	1.2455927524420677E-5	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999933699744379	WITHOUT_CLASSIFICATION	6.630025562171584E-6	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999940020957194	WITHOUT_CLASSIFICATION	5.997904280624794E-6	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999935443976778	WITHOUT_CLASSIFICATION	6.455602322150578E-6	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999939505867863	WITHOUT_CLASSIFICATION	6.049413213738709E-6	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999918099895532	WITHOUT_CLASSIFICATION	8.190010446798955E-6	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999954514480893	WITHOUT_CLASSIFICATION	4.5485519107466945E-6	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999940771140785	WITHOUT_CLASSIFICATION	5.922885921546124E-6	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999931717596269	WITHOUT_CLASSIFICATION	6.828240373156054E-6	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999973297718915	WITHOUT_CLASSIFICATION	2.670228108539296E-6	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999948290527967	WITHOUT_CLASSIFICATION	5.170947203293828E-6	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999962609468764	WITHOUT_CLASSIFICATION	3.7390531236589436E-6	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999961564553033	WITHOUT_CLASSIFICATION	3.8435446967305855E-6	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999958043466082	WITHOUT_CLASSIFICATION	4.195653391815586E-6	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999935105863351	WITHOUT_CLASSIFICATION	6.489413664988138E-6	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999970295360731	WITHOUT_CLASSIFICATION	2.9704639269188677E-6	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999973897921801	WITHOUT_CLASSIFICATION	2.6102078197905266E-6	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999966803974633	WITHOUT_CLASSIFICATION	3.3196025367119154E-6	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999922245193684	WITHOUT_CLASSIFICATION	7.775480631583316E-6	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999883990906441	WITHOUT_CLASSIFICATION	1.1600909355843937E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999954763502047	WITHOUT_CLASSIFICATION	4.523649795310654E-6	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999959807787516	WITHOUT_CLASSIFICATION	4.0192212484519475E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9994632071755775	WITHOUT_CLASSIFICATION	5.36792824422578E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9998416957178691	WITHOUT_CLASSIFICATION	1.583042821308891E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9997011793036992	WITHOUT_CLASSIFICATION	2.9882069630086916E-4	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999886715782709	WITHOUT_CLASSIFICATION	1.1328421729088995E-5	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.999995548947543	WITHOUT_CLASSIFICATION	4.451052457011612E-6	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999962585359445	WITHOUT_CLASSIFICATION	3.741464055528687E-6	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999956446057665	WITHOUT_CLASSIFICATION	4.355394233462784E-6	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.999997233731257	WITHOUT_CLASSIFICATION	2.766268742982514E-6	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999970072733266	WITHOUT_CLASSIFICATION	2.9927266734199397E-6	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999975441902683	WITHOUT_CLASSIFICATION	2.45580973169765E-6	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999951890573932	WITHOUT_CLASSIFICATION	4.8109426068077075E-6	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999931645446928	WITHOUT_CLASSIFICATION	6.8354553072464635E-6	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999974761884983	WITHOUT_CLASSIFICATION	2.523811501761515E-6	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999971754775794	WITHOUT_CLASSIFICATION	2.8245224205780964E-6	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999921674617874	WITHOUT_CLASSIFICATION	7.83253821259412E-6	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999960744583084	WITHOUT_CLASSIFICATION	3.9255416915940035E-6	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999932318133808	WITHOUT_CLASSIFICATION	6.768186619164827E-6	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999955442544683	WITHOUT_CLASSIFICATION	4.455745531700302E-6	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999960758160149	WITHOUT_CLASSIFICATION	3.924183985034252E-6	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.999994162139127	WITHOUT_CLASSIFICATION	5.837860873153402E-6	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.999995892110022	WITHOUT_CLASSIFICATION	4.1078899780449935E-6	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999932209500607	WITHOUT_CLASSIFICATION	6.779049939297368E-6	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999959589757379	WITHOUT_CLASSIFICATION	4.041024262170037E-6	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999932881011018	WITHOUT_CLASSIFICATION	6.71189889831317E-6	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999885667515768	WITHOUT_CLASSIFICATION	1.1433248423305034E-5	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.999979610223825	WITHOUT_CLASSIFICATION	2.0389776175011085E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999978831239111	WITHOUT_CLASSIFICATION	2.1168760887626842E-6	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999992753826578	WITHOUT_CLASSIFICATION	7.246173421664939E-7	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999986196157287	WITHOUT_CLASSIFICATION	1.3803842713684565E-6	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9996723950691142	WITHOUT_CLASSIFICATION	3.276049308858034E-4	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999996350936873	WITHOUT_CLASSIFICATION	3.6490631274987813E-7	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999993939289147	WITHOUT_CLASSIFICATION	6.060710852749758E-7	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9999817625103975	WITHOUT_CLASSIFICATION	1.8237489602451987E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999779890838	WITHOUT_CLASSIFICATION	2.201091631356257E-8	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999081475782743	WITHOUT_CLASSIFICATION	9.185242172573436E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.999999996694034	WITHOUT_CLASSIFICATION	3.3059659640332563E-9	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.999999996694034	WITHOUT_CLASSIFICATION	3.3059659640332563E-9	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9929058416263891	WITHOUT_CLASSIFICATION	0.007094158373610885	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999949853097224	WITHOUT_CLASSIFICATION	5.014690277522758E-6	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999978818255084	WITHOUT_CLASSIFICATION	2.118174491467079E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999986384961724	WITHOUT_CLASSIFICATION	1.3615038275626239E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999995355820049	WITHOUT_CLASSIFICATION	4.6441799513607595E-7	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.999999527348721	WITHOUT_CLASSIFICATION	4.7265127893843084E-7	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999996304350545	WITHOUT_CLASSIFICATION	3.6956494560286043E-7	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999986938468919	WITHOUT_CLASSIFICATION	1.3061531080532695E-6	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999999855080455	WITHOUT_CLASSIFICATION	1.449195455416164E-8	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999999860440505	WITHOUT_CLASSIFICATION	1.3955949553838433E-8	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.99999970312108	WITHOUT_CLASSIFICATION	2.9687891992104885E-7	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999999658996472	WITHOUT_CLASSIFICATION	3.410035266741784E-8	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999999784817637	WITHOUT_CLASSIFICATION	2.1518236354379004E-8	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999999865601376	WITHOUT_CLASSIFICATION	1.3439862402444879E-8	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999994889244882	WITHOUT_CLASSIFICATION	5.110755119207354E-7	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999994889244882	WITHOUT_CLASSIFICATION	5.110755119207354E-7	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999974853244834	WITHOUT_CLASSIFICATION	2.514675516570277E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999999614586375	WITHOUT_CLASSIFICATION	3.854136249672229E-8	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999999982948997	WITHOUT_CLASSIFICATION	1.7051002175592748E-9	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999998972380616	WITHOUT_CLASSIFICATION	1.0276193833495423E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264538446	WITHOUT_CLASSIFICATION	6.973546155484354E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999617746991	WITHOUT_CLASSIFICATION	3.822530099566949E-8	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999996851423966	WITHOUT_CLASSIFICATION	3.1485760333226746E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999617746991	WITHOUT_CLASSIFICATION	3.822530099566949E-8	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999951011926433	WITHOUT_CLASSIFICATION	4.898807356634869E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999496433120534	WITHOUT_CLASSIFICATION	5.0356687946612366E-5	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9847998934162033	WITHOUT_CLASSIFICATION	0.01520010658379682	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.996676333397996	WITHOUT_CLASSIFICATION	0.003323666602004026	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999887370127258	WITHOUT_CLASSIFICATION	1.1262987274281598E-5	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999991333196407	WITHOUT_CLASSIFICATION	8.666803591899692E-7	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.99999999716452	WITHOUT_CLASSIFICATION	2.8354799712819698E-9	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999968255689738	WITHOUT_CLASSIFICATION	3.174431026236921E-6	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999991684938107	WITHOUT_CLASSIFICATION	8.31506189354528E-7	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.969944622425872	WITHOUT_CLASSIFICATION	0.03005537757412802	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999999451008491	WITHOUT_CLASSIFICATION	5.489915092866648E-8	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999979140974287	WITHOUT_CLASSIFICATION	2.085902571325039E-6	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999902894951984	WITHOUT_CLASSIFICATION	9.710504801682467E-6	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999240751353522	WITHOUT_CLASSIFICATION	7.592486464775923E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999999941807096	WITHOUT_CLASSIFICATION	5.819290347803176E-9	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999999941807096	WITHOUT_CLASSIFICATION	5.819290347803176E-9	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999989750435131	WITHOUT_CLASSIFICATION	1.024956486927633E-6	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999999669036473	WITHOUT_CLASSIFICATION	3.3096352651991356E-8	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.999999903883783	WITHOUT_CLASSIFICATION	9.611621697124027E-8	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9992781712581085	WITHOUT_CLASSIFICATION	7.21828741891432E-4	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999995750358481	WITHOUT_CLASSIFICATION	4.249641519069066E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999617746991	WITHOUT_CLASSIFICATION	3.822530099566949E-8	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.99999943616111	WITHOUT_CLASSIFICATION	5.638388900370246E-7	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999999001890482	WITHOUT_CLASSIFICATION	9.981095172823472E-8	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999992528717874	WITHOUT_CLASSIFICATION	7.471282126584228E-7	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999994321154544	WITHOUT_CLASSIFICATION	5.678845455937794E-7	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999999974198809	WITHOUT_CLASSIFICATION	2.5801190920802516E-9	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999999984513726	WITHOUT_CLASSIFICATION	1.5486274792218207E-9	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999998765028629	WITHOUT_CLASSIFICATION	1.2349713703393074E-7	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9999994893793871	WITHOUT_CLASSIFICATION	5.106206128991762E-7	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999999998865661	WITHOUT_CLASSIFICATION	1.1343397131469511E-10	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999999838679026	WITHOUT_CLASSIFICATION	1.6132097489828932E-8	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999999959039648	WITHOUT_CLASSIFICATION	4.0960351640067845E-9	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.999999997091984	WITHOUT_CLASSIFICATION	2.9080159826222456E-9	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9998463793726146	WITHOUT_CLASSIFICATION	1.5362062738537408E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999998450106907	WITHOUT_CLASSIFICATION	1.5498930930291563E-7	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9999714161209686	WITHOUT_CLASSIFICATION	2.8583879031449895E-5	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999990343866167	WITHOUT_CLASSIFICATION	9.656133832413198E-7	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999984726704018	WITHOUT_CLASSIFICATION	1.527329598242538E-6	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9998348616694946	WITHOUT_CLASSIFICATION	1.6513833050532052E-4	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999993818383531	WITHOUT_CLASSIFICATION	6.181616469338148E-7	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999998614409531	WITHOUT_CLASSIFICATION	1.3855904691563692E-7	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999999769718633	WITHOUT_CLASSIFICATION	2.3028136818621788E-8	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9997460109584633	WITHOUT_CLASSIFICATION	2.539890415367065E-4	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999999950571987	WITHOUT_CLASSIFICATION	4.942801200492654E-9	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999999494067072	WITHOUT_CLASSIFICATION	5.059329285519799E-8	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999988458691864	WITHOUT_CLASSIFICATION	1.1541308136692218E-6	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999999924120841	WITHOUT_CLASSIFICATION	7.587915920599804E-9	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999999663345019	WITHOUT_CLASSIFICATION	3.366549810299229E-8	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999980849283012	WITHOUT_CLASSIFICATION	1.91507169885853E-6	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9999830230445176	WITHOUT_CLASSIFICATION	1.6976955482419237E-5	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999999058539746	WITHOUT_CLASSIFICATION	9.414602534488418E-8	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999748311357053	WITHOUT_CLASSIFICATION	2.516886429471988E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999998812638132	WITHOUT_CLASSIFICATION	1.1873618677924837E-7	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999999963157905	WITHOUT_CLASSIFICATION	3.684209511650619E-9	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9983982838049644	WITHOUT_CLASSIFICATION	0.001601716195035645	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999985228172398	WITHOUT_CLASSIFICATION	1.4771827601914444E-6	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999999102327425	WITHOUT_CLASSIFICATION	8.976725755154211E-8	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999839503966179	WITHOUT_CLASSIFICATION	1.6049603382103662E-5	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999999683190812	WITHOUT_CLASSIFICATION	3.168091872129805E-8	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.999999943489734	WITHOUT_CLASSIFICATION	5.651026602303399E-8	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999999949659782	WITHOUT_CLASSIFICATION	5.034021713514743E-9	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999886715782709	WITHOUT_CLASSIFICATION	1.1328421729088995E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999997950754335	WITHOUT_CLASSIFICATION	2.049245664956513E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.999998989830622	WITHOUT_CLASSIFICATION	1.0101693780209007E-6	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999371557170907	WITHOUT_CLASSIFICATION	6.284428290924621E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.999999940334247	WITHOUT_CLASSIFICATION	5.966575296629902E-8	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999496433120534	WITHOUT_CLASSIFICATION	5.0356687946612366E-5	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999969595106653	WITHOUT_CLASSIFICATION	3.0404893346684903E-6	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999995581095159	WITHOUT_CLASSIFICATION	4.418904841386289E-7	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.999989142953826	WITHOUT_CLASSIFICATION	1.0857046173975E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999741372886	WITHOUT_CLASSIFICATION	2.5862711325870322E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999741372886	WITHOUT_CLASSIFICATION	2.5862711325870322E-8	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999940993571691	WITHOUT_CLASSIFICATION	5.900642830860693E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999940993571691	WITHOUT_CLASSIFICATION	5.900642830860693E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999940993571691	WITHOUT_CLASSIFICATION	5.900642830860693E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.999998830063064	WITHOUT_CLASSIFICATION	1.169936936011969E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.999998830063064	WITHOUT_CLASSIFICATION	1.169936936011969E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999942797426575	WITHOUT_CLASSIFICATION	5.720257342514619E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999942797426575	WITHOUT_CLASSIFICATION	5.720257342514619E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999995260937136	WITHOUT_CLASSIFICATION	4.739062863888198E-7	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.999982479983839	WITHOUT_CLASSIFICATION	1.75200161609447E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999997136559885	WITHOUT_CLASSIFICATION	2.8634401144209514E-7	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999997136559885	WITHOUT_CLASSIFICATION	2.8634401144209514E-7	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999998507279798	WITHOUT_CLASSIFICATION	1.4927202020246415E-7	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999998351654152	WITHOUT_CLASSIFICATION	1.6483458475753717E-7	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.999980667574795	WITHOUT_CLASSIFICATION	1.9332425204905896E-5	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999999605869435	WITHOUT_CLASSIFICATION	3.941305651544613E-8	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999910453932546	WITHOUT_CLASSIFICATION	8.954606745435877E-6	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999999502082865	WITHOUT_CLASSIFICATION	4.979171356908371E-8	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999999256433667	WITHOUT_CLASSIFICATION	7.435663329655412E-8	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999666562514171	WITHOUT_CLASSIFICATION	3.334374858290439E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999959280359441	WITHOUT_CLASSIFICATION	4.071964055927477E-6	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999938118252685	WITHOUT_CLASSIFICATION	6.188174731593724E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.999999896876865	WITHOUT_CLASSIFICATION	1.0312313505092429E-7	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.999999138134231	WITHOUT_CLASSIFICATION	8.618657690047389E-7	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9999876689943824	WITHOUT_CLASSIFICATION	1.2331005617543585E-5	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999866397638888	WITHOUT_CLASSIFICATION	1.336023611119391E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999986069102746	WITHOUT_CLASSIFICATION	1.3930897254304905E-6	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999564274602992	WITHOUT_CLASSIFICATION	4.357253970075713E-5	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999820568095522	WITHOUT_CLASSIFICATION	1.7943190447777595E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999877877074944	WITHOUT_CLASSIFICATION	1.2212292505726017E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999851589794534	WITHOUT_CLASSIFICATION	1.4841020546586958E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999547870593173	WITHOUT_CLASSIFICATION	4.521294068263243E-5	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999993212669663	WITHOUT_CLASSIFICATION	6.787330336333439E-7	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.999996801677045	WITHOUT_CLASSIFICATION	3.1983229549172134E-6	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999981313793019	WITHOUT_CLASSIFICATION	1.868620698153606E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999962036453264	WITHOUT_CLASSIFICATION	3.796354673480499E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999989992313842	WITHOUT_CLASSIFICATION	1.0007686156652611E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999997587256753	WITHOUT_CLASSIFICATION	2.4127432468925954E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999854607897587	WITHOUT_CLASSIFICATION	1.4539210241392652E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999896727707506	WITHOUT_CLASSIFICATION	1.0327229249461004E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999965512431503	WITHOUT_CLASSIFICATION	3.448756849533106E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999990908629378	WITHOUT_CLASSIFICATION	9.091370621231263E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999978081700841	WITHOUT_CLASSIFICATION	2.191829915910771E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628180853	WITHOUT_CLASSIFICATION	9.371819146544684E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529471419	WITHOUT_CLASSIFICATION	2.4705285815108624E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659417798	WITHOUT_CLASSIFICATION	2.3405822031411997E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529471419	WITHOUT_CLASSIFICATION	2.4705285815108624E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529471419	WITHOUT_CLASSIFICATION	2.4705285815108624E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529471419	WITHOUT_CLASSIFICATION	2.4705285815108624E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529471419	WITHOUT_CLASSIFICATION	2.4705285815108624E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529471419	WITHOUT_CLASSIFICATION	2.4705285815108624E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529471419	WITHOUT_CLASSIFICATION	2.4705285815108624E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659417798	WITHOUT_CLASSIFICATION	2.3405822031411997E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659417798	WITHOUT_CLASSIFICATION	2.3405822031411997E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659417798	WITHOUT_CLASSIFICATION	2.3405822031411997E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659417798	WITHOUT_CLASSIFICATION	2.3405822031411997E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659417798	WITHOUT_CLASSIFICATION	2.3405822031411997E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659417798	WITHOUT_CLASSIFICATION	2.3405822031411997E-7	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9997842361732472	WITHOUT_CLASSIFICATION	2.1576382675281562E-4	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9996720760623985	WITHOUT_CLASSIFICATION	3.2792393760148596E-4	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999981711556066	WITHOUT_CLASSIFICATION	1.8288443933205183E-6	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9997315602603091	WITHOUT_CLASSIFICATION	2.684397396909356E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999911090778832	WITHOUT_CLASSIFICATION	8.89092211678555E-6	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999917199317023	WITHOUT_CLASSIFICATION	8.280068297691211E-6	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999999821055394	WITHOUT_CLASSIFICATION	1.789446060207548E-8	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999997795683498	WITHOUT_CLASSIFICATION	2.204316501531273E-7	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999992772943785	WITHOUT_CLASSIFICATION	7.22705621433283E-7	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999995182756533	WITHOUT_CLASSIFICATION	4.817243468047116E-7	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999894813402931	WITHOUT_CLASSIFICATION	1.0518659706833767E-5	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999999579253661	WITHOUT_CLASSIFICATION	4.2074633940913186E-8	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.999999755382975	WITHOUT_CLASSIFICATION	2.446170249901409E-7	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.999999991510138	WITHOUT_CLASSIFICATION	8.489862030038954E-9	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999999591494362	WITHOUT_CLASSIFICATION	4.0850563756753856E-8	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999997898146653	WITHOUT_CLASSIFICATION	2.1018533464779022E-7	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999937729832847	WITHOUT_CLASSIFICATION	6.227016715227483E-6	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999976464404485	WITHOUT_CLASSIFICATION	2.353559551506579E-6	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999988518585976	WITHOUT_CLASSIFICATION	1.1481414023981638E-6	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999913770437432	WITHOUT_CLASSIFICATION	8.622956256785576E-6	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999998545545116	WITHOUT_CLASSIFICATION	1.4544548837124547E-7	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999992149552362	WITHOUT_CLASSIFICATION	7.85044763836883E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999996851423966	WITHOUT_CLASSIFICATION	3.1485760333226746E-7	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9986549026354574	WITHOUT_CLASSIFICATION	0.0013450973645425554	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9999489865848608	WITHOUT_CLASSIFICATION	5.101341513915551E-5	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999999138235514	WITHOUT_CLASSIFICATION	8.617644867175487E-8	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999996826531203	WITHOUT_CLASSIFICATION	3.1734687967792586E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999983076070172	WITHOUT_CLASSIFICATION	1.6923929828258572E-6	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999939937102579	WITHOUT_CLASSIFICATION	6.006289742089012E-6	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999620584826986	WITHOUT_CLASSIFICATION	3.7941517301454976E-5	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999970841061775	WITHOUT_CLASSIFICATION	2.9158938225515664E-6	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999995189454081	WITHOUT_CLASSIFICATION	4.810545919795849E-7	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.999953635093865	WITHOUT_CLASSIFICATION	4.636490613497006E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999997907542008	WITHOUT_CLASSIFICATION	2.0924579926117361E-7	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999998160823357	WITHOUT_CLASSIFICATION	1.8391766430153364E-7	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999998443427071	WITHOUT_CLASSIFICATION	1.5565729291856726E-7	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999999106129597	WITHOUT_CLASSIFICATION	8.938704030695792E-8	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999884757888706	WITHOUT_CLASSIFICATION	1.1524211129380304E-5	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999980679200905	WITHOUT_CLASSIFICATION	1.9320799095038774E-6	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999979753226571	WITHOUT_CLASSIFICATION	2.0246773429088207E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999933592464795	WITHOUT_CLASSIFICATION	6.640753520528547E-6	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999999919014444	WITHOUT_CLASSIFICATION	8.09855556089874E-9	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999999819249568	WITHOUT_CLASSIFICATION	1.8075043300440633E-8	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999999395957666	WITHOUT_CLASSIFICATION	6.040423334252416E-8	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999999395957666	WITHOUT_CLASSIFICATION	6.040423334252416E-8	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999998689878318	WITHOUT_CLASSIFICATION	1.310121682927575E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999998689878318	WITHOUT_CLASSIFICATION	1.310121682927575E-7	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999999453157221	WITHOUT_CLASSIFICATION	5.4684277748840726E-8	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999999453157221	WITHOUT_CLASSIFICATION	5.4684277748840726E-8	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999940245526006	WITHOUT_CLASSIFICATION	5.975447399429045E-6	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999999634325731	WITHOUT_CLASSIFICATION	3.6567426844162196E-8	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999997737868302	WITHOUT_CLASSIFICATION	2.2621316963291455E-7	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999999700502658	WITHOUT_CLASSIFICATION	2.9949734187730296E-8	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999983451409243	WITHOUT_CLASSIFICATION	1.6548590757401947E-6	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.999997291231977	WITHOUT_CLASSIFICATION	2.708768022966598E-6	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999999664233056	WITHOUT_CLASSIFICATION	3.3576694402043294E-8	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999919833141104	WITHOUT_CLASSIFICATION	8.016685889574221E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.999999935193295	WITHOUT_CLASSIFICATION	6.480670502244293E-8	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999953968104598	WITHOUT_CLASSIFICATION	4.603189540207197E-6	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999814412462902	WITHOUT_CLASSIFICATION	1.85587537097749E-5	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999989835818841	WITHOUT_CLASSIFICATION	1.0164181159600831E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9999988363925671	WITHOUT_CLASSIFICATION	1.1636074328208999E-6	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9997441864234569	WITHOUT_CLASSIFICATION	2.558135765431004E-4	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999973394049158	WITHOUT_CLASSIFICATION	2.660595084272928E-6	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.999999535907395	WITHOUT_CLASSIFICATION	4.640926050705833E-7	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999993826644238	WITHOUT_CLASSIFICATION	6.17335576233734E-7	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999618043730724	WITHOUT_CLASSIFICATION	3.8195626927621934E-5	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999998974017617	WITHOUT_CLASSIFICATION	1.0259823834463605E-7	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999996553863507	WITHOUT_CLASSIFICATION	3.446136492777668E-7	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999994677421943	WITHOUT_CLASSIFICATION	5.322578058145481E-7	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9999458796421884	WITHOUT_CLASSIFICATION	5.412035781163936E-5	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999993102992387	WITHOUT_CLASSIFICATION	6.897007612165379E-7	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999993323178198	WITHOUT_CLASSIFICATION	6.676821802024017E-7	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999998958059483	WITHOUT_CLASSIFICATION	1.0419405179848528E-7	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999979333226539	WITHOUT_CLASSIFICATION	2.0666773462014548E-6	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999992173310536	WITHOUT_CLASSIFICATION	7.826689463485899E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996756742893	WITHOUT_CLASSIFICATION	3.2432571068220234E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996756742893	WITHOUT_CLASSIFICATION	3.2432571068220234E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996756742893	WITHOUT_CLASSIFICATION	3.2432571068220234E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987445114	WITHOUT_CLASSIFICATION	1.255488571000452E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987445114	WITHOUT_CLASSIFICATION	1.255488571000452E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999998450106907	WITHOUT_CLASSIFICATION	1.5498930930291563E-7	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999998450106907	WITHOUT_CLASSIFICATION	1.5498930930291563E-7	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999999997564158	WITHOUT_CLASSIFICATION	2.4358407905622753E-10	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.8866085000645846	WITHOUT_CLASSIFICATION	0.11339149993541543	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999999584041698	WITHOUT_CLASSIFICATION	4.159583016162379E-8	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999995192295459	WITHOUT_CLASSIFICATION	4.807704541144377E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996756742893	WITHOUT_CLASSIFICATION	3.2432571068220234E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996756742893	WITHOUT_CLASSIFICATION	3.2432571068220234E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996756742893	WITHOUT_CLASSIFICATION	3.2432571068220234E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987445114	WITHOUT_CLASSIFICATION	1.255488571000452E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987445114	WITHOUT_CLASSIFICATION	1.255488571000452E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987445114	WITHOUT_CLASSIFICATION	1.255488571000452E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999998450106907	WITHOUT_CLASSIFICATION	1.5498930930291563E-7	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999998450106907	WITHOUT_CLASSIFICATION	1.5498930930291563E-7	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999999437191187	WITHOUT_CLASSIFICATION	5.628088125548552E-8	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999999838221396	WITHOUT_CLASSIFICATION	1.6177860385348847E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999984645788	WITHOUT_CLASSIFICATION	1.5354212599376906E-9	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999984645788	WITHOUT_CLASSIFICATION	1.5354212599376906E-9	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999984645788	WITHOUT_CLASSIFICATION	1.5354212599376906E-9	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999984645788	WITHOUT_CLASSIFICATION	1.5354212599376906E-9	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999984645788	WITHOUT_CLASSIFICATION	1.5354212599376906E-9	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999997243813462	WITHOUT_CLASSIFICATION	2.756186538030758E-7	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999991633230653	WITHOUT_CLASSIFICATION	8.366769347682526E-7	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.999580975113556	WITHOUT_CLASSIFICATION	4.1902488644401123E-4	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999996973458971	WITHOUT_CLASSIFICATION	3.0265410286945675E-7	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999993969800448	WITHOUT_CLASSIFICATION	6.030199552141223E-7	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999988870951051	WITHOUT_CLASSIFICATION	1.112904894897752E-6	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999952045415444	WITHOUT_CLASSIFICATION	4.79545845561775E-6	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999987213326456	WITHOUT_CLASSIFICATION	1.278667354516183E-6	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999999367538129	WITHOUT_CLASSIFICATION	6.324618709003812E-8	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999990875669537	WITHOUT_CLASSIFICATION	9.1243304640176E-7	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.999977425621275	WITHOUT_CLASSIFICATION	2.2574378725048065E-5	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999992814521863	WITHOUT_CLASSIFICATION	7.185478137015513E-7	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9995347137249013	WITHOUT_CLASSIFICATION	4.652862750987266E-4	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999966695098041	WITHOUT_CLASSIFICATION	3.3304901959424637E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9999952451970152	WITHOUT_CLASSIFICATION	4.754802984781571E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999989642504573	WITHOUT_CLASSIFICATION	1.0357495426640597E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999989642504573	WITHOUT_CLASSIFICATION	1.0357495426640597E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999989642504573	WITHOUT_CLASSIFICATION	1.0357495426640597E-6	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999792799094073	WITHOUT_CLASSIFICATION	2.072009059270309E-5	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999792806849941	WITHOUT_CLASSIFICATION	2.071931500588456E-5	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999997157142946	WITHOUT_CLASSIFICATION	2.8428570536794783E-7	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999996964232675	WITHOUT_CLASSIFICATION	3.035767325177771E-7	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999996837904294	WITHOUT_CLASSIFICATION	3.1620957057766183E-7	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999953532822811	WITHOUT_CLASSIFICATION	4.646717718944988E-6	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999983717150523	WITHOUT_CLASSIFICATION	1.6282849476318498E-6	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.999999924239341	WITHOUT_CLASSIFICATION	7.576065906600983E-8	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999998058329364	WITHOUT_CLASSIFICATION	1.9416706361129776E-7	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999946428479524	WITHOUT_CLASSIFICATION	5.3571520476061625E-6	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999972767962938	WITHOUT_CLASSIFICATION	2.723203706184668E-6	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999999046160428	WITHOUT_CLASSIFICATION	9.538395717648513E-8	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999987521771476	WITHOUT_CLASSIFICATION	1.2478228524469113E-6	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999999978234007	WITHOUT_CLASSIFICATION	2.1765994101607466E-9	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999999968830583	WITHOUT_CLASSIFICATION	3.1169417046862717E-9	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999941244183798	WITHOUT_CLASSIFICATION	5.875581620199926E-6	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.999998779517885	WITHOUT_CLASSIFICATION	1.2204821150295968E-6	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.999999981124021	WITHOUT_CLASSIFICATION	1.887597895419988E-8	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999997840574105	WITHOUT_CLASSIFICATION	2.1594258935960234E-7	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999618879686717	WITHOUT_CLASSIFICATION	3.811203132829026E-5	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9995049866312083	WITHOUT_CLASSIFICATION	4.950133687916001E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999978027017619	WITHOUT_CLASSIFICATION	2.1972982381136103E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9996620727284222	WITHOUT_CLASSIFICATION	3.3792727157772317E-4	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999991496624527	WITHOUT_CLASSIFICATION	8.503375473004755E-7	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999983804007816	WITHOUT_CLASSIFICATION	1.6195992184218148E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999982752259663	WITHOUT_CLASSIFICATION	1.72477403365818E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999991497738101	WITHOUT_CLASSIFICATION	8.502261898014668E-7	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999984483192916	WITHOUT_CLASSIFICATION	1.5516807083926726E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999887264691337	WITHOUT_CLASSIFICATION	1.1273530866337921E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999840669859917	WITHOUT_CLASSIFICATION	1.5933014008333506E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.999969074107904	WITHOUT_CLASSIFICATION	3.092589209600093E-5	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999820378950887	WITHOUT_CLASSIFICATION	1.796210491133676E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9999678299978599	WITHOUT_CLASSIFICATION	3.217000214007773E-5	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9999546561009157	WITHOUT_CLASSIFICATION	4.5343899084306696E-5	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9999522523061668	WITHOUT_CLASSIFICATION	4.77476938332704E-5	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.999976860848584	WITHOUT_CLASSIFICATION	2.3139151416042258E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999991813729001	WITHOUT_CLASSIFICATION	8.186270998676998E-7	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999987505948126	WITHOUT_CLASSIFICATION	1.2494051873477866E-6	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.999999997714515	WITHOUT_CLASSIFICATION	2.2854849898483385E-9	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9995837341169553	WITHOUT_CLASSIFICATION	4.1626588304468476E-4	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999666840346774	WITHOUT_CLASSIFICATION	3.33159653226268E-5	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9996253621125999	WITHOUT_CLASSIFICATION	3.746378874001881E-4	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999849301561035	WITHOUT_CLASSIFICATION	1.5069843896671879E-5	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999971463064773	WITHOUT_CLASSIFICATION	2.8536935226473347E-6	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999992253951224	WITHOUT_CLASSIFICATION	7.746048774901325E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9999897985849734	WITHOUT_CLASSIFICATION	1.0201415026628396E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999953590918094	WITHOUT_CLASSIFICATION	4.640908190620849E-6	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999953590918094	WITHOUT_CLASSIFICATION	4.640908190620849E-6	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999996278004922	WITHOUT_CLASSIFICATION	3.7219950772421663E-7	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999992401207664	WITHOUT_CLASSIFICATION	7.598792335915958E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9999861002602168	WITHOUT_CLASSIFICATION	1.3899739783146389E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999893869581905	WITHOUT_CLASSIFICATION	1.0613041809572165E-5	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999995124959892	WITHOUT_CLASSIFICATION	4.875040108993342E-7	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999998806305938	WITHOUT_CLASSIFICATION	1.1936940617299248E-7	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999999528984529	WITHOUT_CLASSIFICATION	4.7101547123444615E-8	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999767161303	WITHOUT_CLASSIFICATION	2.3283869824950964E-8	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999999208010547	WITHOUT_CLASSIFICATION	7.91989453146271E-8	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999989697046674	WITHOUT_CLASSIFICATION	1.0302953325466788E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999441798838	WITHOUT_CLASSIFICATION	5.582011617855493E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999441798838	WITHOUT_CLASSIFICATION	5.582011617855493E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999441798838	WITHOUT_CLASSIFICATION	5.582011617855493E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999441798838	WITHOUT_CLASSIFICATION	5.582011617855493E-8	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999991617463894	WITHOUT_CLASSIFICATION	8.382536105451106E-7	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999997862939289	WITHOUT_CLASSIFICATION	2.1370607105624292E-7	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999999255957668	WITHOUT_CLASSIFICATION	7.440423324064696E-8	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.999999263121824	WITHOUT_CLASSIFICATION	7.36878175935414E-7	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9999780429951473	WITHOUT_CLASSIFICATION	2.1957004852692602E-5	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.999991011386327	WITHOUT_CLASSIFICATION	8.988613673077025E-6	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9999894014255137	WITHOUT_CLASSIFICATION	1.0598574486231794E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999968819351818	WITHOUT_CLASSIFICATION	3.1180648181696687E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999968819351818	WITHOUT_CLASSIFICATION	3.1180648181696687E-6	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999916163846437	WITHOUT_CLASSIFICATION	8.383615356206648E-6	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999996151140648	WITHOUT_CLASSIFICATION	3.8488593518909214E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999730388793	WITHOUT_CLASSIFICATION	2.696112063965282E-8	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9998713331968107	WITHOUT_CLASSIFICATION	1.2866680318935443E-4	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9998713331968107	WITHOUT_CLASSIFICATION	1.2866680318935443E-4	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9999585985706699	WITHOUT_CLASSIFICATION	4.1401429330086055E-5	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999998253418321	WITHOUT_CLASSIFICATION	1.7465816787410645E-7	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999998253418321	WITHOUT_CLASSIFICATION	1.7465816787410645E-7	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9996490121680363	WITHOUT_CLASSIFICATION	3.509878319637402E-4	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.999999992107542	WITHOUT_CLASSIFICATION	7.892458114657815E-9	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999982052437902	WITHOUT_CLASSIFICATION	1.7947562096569473E-6	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9989354423635356	WITHOUT_CLASSIFICATION	0.0010645576364644684	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9999944689223874	WITHOUT_CLASSIFICATION	5.531077612625545E-6	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.999999996842459	WITHOUT_CLASSIFICATION	3.157541150669681E-9	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9999806191515491	WITHOUT_CLASSIFICATION	1.9380848450925854E-5	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999991979713428	WITHOUT_CLASSIFICATION	8.020286572082918E-7	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999999933635447	WITHOUT_CLASSIFICATION	6.636455275090348E-9	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999974117193573	WITHOUT_CLASSIFICATION	2.5882806425710045E-6	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999947212429845	WITHOUT_CLASSIFICATION	5.2787570154345124E-6	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999998054155763	WITHOUT_CLASSIFICATION	1.945844237208453E-7	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9999817271557356	WITHOUT_CLASSIFICATION	1.8272844264404546E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9999916497911685	WITHOUT_CLASSIFICATION	8.350208831492878E-6	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999995435189417	WITHOUT_CLASSIFICATION	4.564810583350229E-7	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9999882272645364	WITHOUT_CLASSIFICATION	1.177273546355442E-5	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999991100245691	WITHOUT_CLASSIFICATION	8.8997543091433E-7	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999998679494277	WITHOUT_CLASSIFICATION	1.3205057233407165E-7	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.999999978425541	WITHOUT_CLASSIFICATION	2.1574458993609695E-8	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9969676960542508	WITHOUT_CLASSIFICATION	0.0030323039457490213	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9994141554580368	WITHOUT_CLASSIFICATION	5.858445419632413E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9999979310257625	WITHOUT_CLASSIFICATION	2.0689742374197794E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999982221513326	WITHOUT_CLASSIFICATION	1.7778486672911009E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.99954243742818	WITHOUT_CLASSIFICATION	4.5756257181990843E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9997244299109201	WITHOUT_CLASSIFICATION	2.7557008907994334E-4	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9998442065781755	WITHOUT_CLASSIFICATION	1.557934218245067E-4	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999997011861779	WITHOUT_CLASSIFICATION	2.988138221795628E-7	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999895217418069	WITHOUT_CLASSIFICATION	1.0478258193153725E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999997223225776	WITHOUT_CLASSIFICATION	2.7767742243844236E-7	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999990222123962	WITHOUT_CLASSIFICATION	9.777876038493737E-7	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999851445642948	WITHOUT_CLASSIFICATION	1.4855435705325884E-5	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999993483787883	WITHOUT_CLASSIFICATION	6.516212116314496E-7	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.9971882833857997	DEFECT	0.0028117166142003326	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999856518093909	WITHOUT_CLASSIFICATION	1.4348190609171524E-5	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.999999994685783	WITHOUT_CLASSIFICATION	5.314216974245783E-9	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999816197400473	WITHOUT_CLASSIFICATION	1.8380259952768072E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999976120052204	WITHOUT_CLASSIFICATION	2.387994779526699E-6	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999999882004942	WITHOUT_CLASSIFICATION	1.1799505741085926E-8	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.999999983754184	WITHOUT_CLASSIFICATION	1.624581599242252E-8	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999816197400473	WITHOUT_CLASSIFICATION	1.8380259952768072E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999976120052204	WITHOUT_CLASSIFICATION	2.387994779526699E-6	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999918016327182	WITHOUT_CLASSIFICATION	8.198367281843433E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999970690827508	WITHOUT_CLASSIFICATION	2.9309172490991714E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999970690827508	WITHOUT_CLASSIFICATION	2.9309172490991714E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999991331931016	WITHOUT_CLASSIFICATION	8.668068982548251E-7	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9998624499537111	WITHOUT_CLASSIFICATION	1.3755004628885744E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999955131705174	WITHOUT_CLASSIFICATION	4.48682948266488E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.999998501004367	WITHOUT_CLASSIFICATION	1.4989956328618996E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.999862204594547	WITHOUT_CLASSIFICATION	1.3779540545296728E-4	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9905799442794258	WITHOUT_CLASSIFICATION	0.009420055720574269	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.99999939148048	WITHOUT_CLASSIFICATION	6.08519519911179E-7	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999999020279898	WITHOUT_CLASSIFICATION	9.79720102247644E-8	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999993116652868	WITHOUT_CLASSIFICATION	6.883347131578523E-7	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999961020153321	WITHOUT_CLASSIFICATION	3.897984668037007E-6	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.999998501346683	WITHOUT_CLASSIFICATION	1.4986533170599527E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999997736202705	WITHOUT_CLASSIFICATION	2.2637972939431138E-7	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9999950595374358	WITHOUT_CLASSIFICATION	4.940462564074233E-6	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999999191366373	WITHOUT_CLASSIFICATION	8.086336266482435E-8	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999999191366373	WITHOUT_CLASSIFICATION	8.086336266482435E-8	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999948897747699	WITHOUT_CLASSIFICATION	5.110225230126247E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999948897747699	WITHOUT_CLASSIFICATION	5.110225230126247E-6	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999998135904375	WITHOUT_CLASSIFICATION	1.8640956258030318E-7	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999998017640007	WITHOUT_CLASSIFICATION	1.9823599933980775E-7	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999993967583171	WITHOUT_CLASSIFICATION	6.032416829262785E-7	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999971806021929	WITHOUT_CLASSIFICATION	2.8193978071146678E-6	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999994611747044	WITHOUT_CLASSIFICATION	5.388252956432385E-7	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999999192954833	WITHOUT_CLASSIFICATION	8.070451673570703E-8	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999955131705174	WITHOUT_CLASSIFICATION	4.48682948266488E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.999998501004367	WITHOUT_CLASSIFICATION	1.4989956328618996E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999993116652868	WITHOUT_CLASSIFICATION	6.883347131578523E-7	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999961020153321	WITHOUT_CLASSIFICATION	3.897984668037007E-6	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999998600591771	WITHOUT_CLASSIFICATION	1.3994082298134785E-7	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999993991679138	WITHOUT_CLASSIFICATION	6.008320861594422E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999961616463069	WITHOUT_CLASSIFICATION	3.838353693118986E-6	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999997466256935	WITHOUT_CLASSIFICATION	2.533743065134492E-7	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999999555678326	WITHOUT_CLASSIFICATION	4.443216740962155E-8	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.999998456101916	WITHOUT_CLASSIFICATION	1.5438980840886845E-6	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9999373606811293	WITHOUT_CLASSIFICATION	6.263931887080076E-5	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999992236396469	WITHOUT_CLASSIFICATION	7.763603531756088E-7	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999956898291459	WITHOUT_CLASSIFICATION	4.310170854127947E-6	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.999999436654232	WITHOUT_CLASSIFICATION	5.633457680576789E-7	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9999995154661526	WITHOUT_CLASSIFICATION	4.845338474041673E-7	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999998910005118	WITHOUT_CLASSIFICATION	1.0899948818620921E-7	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999998944128016	WITHOUT_CLASSIFICATION	1.0558719842279564E-7	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9999488271339622	WITHOUT_CLASSIFICATION	5.1172866037883155E-5	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999955304712168	WITHOUT_CLASSIFICATION	4.46952878322872E-6	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999538865458284	WITHOUT_CLASSIFICATION	4.611345417158124E-5	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999990160302467	WITHOUT_CLASSIFICATION	9.839697533645444E-7	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.999998316587627	WITHOUT_CLASSIFICATION	1.683412372993576E-6	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999995509576586	WITHOUT_CLASSIFICATION	4.490423413956297E-7	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999999453788575	WITHOUT_CLASSIFICATION	5.4621142646149226E-8	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999999337065052	WITHOUT_CLASSIFICATION	6.629349487474739E-8	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999999337065052	WITHOUT_CLASSIFICATION	6.629349487474739E-8	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999941961481638	WITHOUT_CLASSIFICATION	5.803851836138992E-6	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999982435483524	WITHOUT_CLASSIFICATION	1.7564516475268669E-6	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9993448225757791	WITHOUT_CLASSIFICATION	6.551774242209385E-4	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999999508470415	WITHOUT_CLASSIFICATION	4.915295849752165E-8	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999999508470415	WITHOUT_CLASSIFICATION	4.915295849752165E-8	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999961616463069	WITHOUT_CLASSIFICATION	3.838353693118986E-6	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999995314422335	WITHOUT_CLASSIFICATION	4.6855776636713876E-7	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999999634049132	WITHOUT_CLASSIFICATION	3.6595086875041374E-8	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.999999972302306	WITHOUT_CLASSIFICATION	2.7697694003724426E-8	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999999403706324	WITHOUT_CLASSIFICATION	5.962936755710972E-8	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999999855931242	WITHOUT_CLASSIFICATION	1.4406875820516843E-8	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502207683	WITHOUT_CLASSIFICATION	5.549779231667723E-6	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999999622528384	WITHOUT_CLASSIFICATION	3.774716155589423E-8	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999999610474736	WITHOUT_CLASSIFICATION	3.895252655522819E-8	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999997308709757	WITHOUT_CLASSIFICATION	2.691290243080629E-7	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999996660491336	WITHOUT_CLASSIFICATION	3.339508664397157E-7	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999698481488961	WITHOUT_CLASSIFICATION	3.0151851103799383E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.999999332940196	WITHOUT_CLASSIFICATION	6.670598038866564E-7	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9999999191532057	WITHOUT_CLASSIFICATION	8.084679426537163E-8	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999948554228594	WITHOUT_CLASSIFICATION	5.144577140701654E-6	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999994766856326	WITHOUT_CLASSIFICATION	5.233143672983441E-7	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999978174753855	WITHOUT_CLASSIFICATION	2.1825246145230805E-6	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999997613776276	WITHOUT_CLASSIFICATION	2.386223724916828E-7	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999930440484652	WITHOUT_CLASSIFICATION	6.955951534673416E-6	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999999776698791	WITHOUT_CLASSIFICATION	2.2330120889699066E-8	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999999999638223	WITHOUT_CLASSIFICATION	3.617770812924533E-11	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999995949985245	WITHOUT_CLASSIFICATION	4.050014754578344E-7	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999961976953997	WITHOUT_CLASSIFICATION	3.8023046003338925E-6	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999996450953414	WITHOUT_CLASSIFICATION	3.549046586035741E-7	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999985623482	WITHOUT_CLASSIFICATION	1.43765179638808E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999995685063411	WITHOUT_CLASSIFICATION	4.3149365898356777E-7	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.999999647673876	WITHOUT_CLASSIFICATION	3.5232612415518967E-7	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999997675005624	WITHOUT_CLASSIFICATION	2.3249943759562904E-7	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999999995739304	WITHOUT_CLASSIFICATION	4.260696312081337E-10	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9999998183936508	WITHOUT_CLASSIFICATION	1.8160634906247468E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999967393751	WITHOUT_CLASSIFICATION	3.260624939630806E-9	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999967393751	WITHOUT_CLASSIFICATION	3.260624939630806E-9	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999999568830279	WITHOUT_CLASSIFICATION	4.311697203896404E-8	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999764884434	WITHOUT_CLASSIFICATION	2.3511556612834597E-8	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999764884434	WITHOUT_CLASSIFICATION	2.3511556612834597E-8	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999989082357443	WITHOUT_CLASSIFICATION	1.0917642556566774E-6	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999989082357443	WITHOUT_CLASSIFICATION	1.0917642556566774E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.99999991477436	WITHOUT_CLASSIFICATION	8.522563988174012E-8	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999999420629735	WITHOUT_CLASSIFICATION	5.793702654521202E-8	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999996892507856	WITHOUT_CLASSIFICATION	3.107492142578957E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999998221752627	WITHOUT_CLASSIFICATION	1.7782473730723838E-7	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999999889613643	WITHOUT_CLASSIFICATION	1.1038635551993974E-8	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999986094382918	WITHOUT_CLASSIFICATION	1.3905617082386501E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999986094382918	WITHOUT_CLASSIFICATION	1.3905617082386501E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999985623482	WITHOUT_CLASSIFICATION	1.43765179638808E-9	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999985623482	WITHOUT_CLASSIFICATION	1.43765179638808E-9	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999985623482	WITHOUT_CLASSIFICATION	1.43765179638808E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999995685063411	WITHOUT_CLASSIFICATION	4.3149365898356777E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999967393751	WITHOUT_CLASSIFICATION	3.260624939630806E-9	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999967393751	WITHOUT_CLASSIFICATION	3.260624939630806E-9	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999967393751	WITHOUT_CLASSIFICATION	3.260624939630806E-9	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.99999991477436	WITHOUT_CLASSIFICATION	8.522563988174012E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.99999991477436	WITHOUT_CLASSIFICATION	8.522563988174012E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.99999991477436	WITHOUT_CLASSIFICATION	8.522563988174012E-8	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999998221752627	WITHOUT_CLASSIFICATION	1.7782473730723838E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999998221752627	WITHOUT_CLASSIFICATION	1.7782473730723838E-7	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999994126295426	WITHOUT_CLASSIFICATION	5.873704574434069E-7	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999999821469315	WITHOUT_CLASSIFICATION	1.7853068436669796E-8	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999921309263	WITHOUT_CLASSIFICATION	7.869073822349634E-9	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.5716636720276113	DEFECT	0.4283363279723888	WITHOUT_CLASSIFICATION
// no digits, error	WITHOUT_CLASSIFICATION	0.9999991785441841	WITHOUT_CLASSIFICATION	8.214558159371179E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999996914106078	WITHOUT_CLASSIFICATION	3.085893921850408E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999996914106078	WITHOUT_CLASSIFICATION	3.085893921850408E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999995785734809	WITHOUT_CLASSIFICATION	4.214265192426509E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502207683	WITHOUT_CLASSIFICATION	5.549779231667723E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502207683	WITHOUT_CLASSIFICATION	5.549779231667723E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502207683	WITHOUT_CLASSIFICATION	5.549779231667723E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502207683	WITHOUT_CLASSIFICATION	5.549779231667723E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502207683	WITHOUT_CLASSIFICATION	5.549779231667723E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999411594085	WITHOUT_CLASSIFICATION	5.884059142687301E-8	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999411594085	WITHOUT_CLASSIFICATION	5.884059142687301E-8	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999411594085	WITHOUT_CLASSIFICATION	5.884059142687301E-8	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999999813862039	WITHOUT_CLASSIFICATION	1.8613796081805008E-8	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.999999980219971	WITHOUT_CLASSIFICATION	1.978002895383374E-8	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999995685063411	WITHOUT_CLASSIFICATION	4.3149365898356777E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.99999991477436	WITHOUT_CLASSIFICATION	8.522563988174012E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.99999991477436	WITHOUT_CLASSIFICATION	8.522563988174012E-8	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502207683	WITHOUT_CLASSIFICATION	5.549779231667723E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502207683	WITHOUT_CLASSIFICATION	5.549779231667723E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999411594085	WITHOUT_CLASSIFICATION	5.884059142687301E-8	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999995785734809	WITHOUT_CLASSIFICATION	4.214265192426509E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999965750316984	WITHOUT_CLASSIFICATION	3.424968301493442E-6	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999999039506727	WITHOUT_CLASSIFICATION	9.604932725074917E-8	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999954490742522	WITHOUT_CLASSIFICATION	4.5509257477693315E-6	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999979183188549	WITHOUT_CLASSIFICATION	2.0816811451624232E-6	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999998743297067	WITHOUT_CLASSIFICATION	1.2567029329040757E-7	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999999470422074	WITHOUT_CLASSIFICATION	5.2957792543947324E-8	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999862506223438	WITHOUT_CLASSIFICATION	1.374937765619009E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999986472355932	WITHOUT_CLASSIFICATION	1.3527644068118197E-6	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999999202138341	WITHOUT_CLASSIFICATION	7.978616584855819E-8	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.999999998833183	WITHOUT_CLASSIFICATION	1.1668170650777984E-9	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999999332385862	WITHOUT_CLASSIFICATION	6.676141379348097E-8	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999999875567412	WITHOUT_CLASSIFICATION	1.2443258646643713E-8	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999997478030572	WITHOUT_CLASSIFICATION	2.5219694273780733E-7	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999997021071217	WITHOUT_CLASSIFICATION	2.9789287831010595E-7	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999999034350759	WITHOUT_CLASSIFICATION	9.656492413129893E-8	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999984067234227	WITHOUT_CLASSIFICATION	1.5932765773414702E-6	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999999828818813	WITHOUT_CLASSIFICATION	1.711811878005848E-8	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9998084307627719	WITHOUT_CLASSIFICATION	1.9156923722810708E-4	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999705732149352	WITHOUT_CLASSIFICATION	2.9426785064710905E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999999289450152	WITHOUT_CLASSIFICATION	7.105498476658874E-8	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999528824723802	WITHOUT_CLASSIFICATION	4.7117527619756414E-5	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.999999997644509	WITHOUT_CLASSIFICATION	2.355490990108261E-9	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999998767822	WITHOUT_CLASSIFICATION	1.2321779278516403E-10	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.999999896270421	WITHOUT_CLASSIFICATION	1.0372957897355028E-7	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999798007391691	WITHOUT_CLASSIFICATION	2.0199260830917636E-5	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999977645541005	WITHOUT_CLASSIFICATION	2.235445899385799E-6	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.999998785071749	WITHOUT_CLASSIFICATION	1.2149282510181645E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999992343708787	WITHOUT_CLASSIFICATION	7.6562912135801E-7	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999996722987365	WITHOUT_CLASSIFICATION	3.277012634836947E-7	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999948141821197	WITHOUT_CLASSIFICATION	5.185817880247821E-6	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999999946982276	WITHOUT_CLASSIFICATION	5.3017723241042005E-9	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999999862096322	WITHOUT_CLASSIFICATION	1.3790367880077659E-8	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999980632058498	WITHOUT_CLASSIFICATION	1.9367941501677803E-6	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999990571776008	WITHOUT_CLASSIFICATION	9.428223991311935E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999965750316984	WITHOUT_CLASSIFICATION	3.424968301493442E-6	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999999874448109	WITHOUT_CLASSIFICATION	1.2555189190514685E-8	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9999999597913901	WITHOUT_CLASSIFICATION	4.02086099419857E-8	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9999599965974972	WITHOUT_CLASSIFICATION	4.00034025027799E-5	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999997647429331	WITHOUT_CLASSIFICATION	2.352570670170802E-7	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999997647429331	WITHOUT_CLASSIFICATION	2.352570670170802E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999989448023695	WITHOUT_CLASSIFICATION	1.055197630488724E-6	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999989448023695	WITHOUT_CLASSIFICATION	1.055197630488724E-6	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999993537413039	WITHOUT_CLASSIFICATION	6.462586960906648E-7	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9995987693385847	WITHOUT_CLASSIFICATION	4.012306614153713E-4	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.999999574075134	WITHOUT_CLASSIFICATION	4.2592486591770097E-7	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999998589839837	WITHOUT_CLASSIFICATION	1.4101601634504856E-7	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999999411451698	WITHOUT_CLASSIFICATION	5.885483026368664E-8	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999991478993174	WITHOUT_CLASSIFICATION	8.521006826623117E-7	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999448552434365	WITHOUT_CLASSIFICATION	5.5144756563440415E-5	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999987517366941	WITHOUT_CLASSIFICATION	1.2482633058548406E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999990452393532	WITHOUT_CLASSIFICATION	9.547606467735161E-7	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999995463726322	WITHOUT_CLASSIFICATION	4.536273677308036E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999990014302481	WITHOUT_CLASSIFICATION	9.985697519058877E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999999326901565	WITHOUT_CLASSIFICATION	6.730984349377816E-8	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999999326901565	WITHOUT_CLASSIFICATION	6.730984349377816E-8	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999960352431162	WITHOUT_CLASSIFICATION	3.964756883813541E-6	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.999999957859423	WITHOUT_CLASSIFICATION	4.2140576938346226E-8	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999998883909836	WITHOUT_CLASSIFICATION	1.1160901637657119E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999998883909836	WITHOUT_CLASSIFICATION	1.1160901637657119E-7	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999980135457059	WITHOUT_CLASSIFICATION	1.986454294038039E-6	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999847948404216	WITHOUT_CLASSIFICATION	1.5205159578422936E-5	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999846411029076	WITHOUT_CLASSIFICATION	1.5358897092333213E-5	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9999974079416102	WITHOUT_CLASSIFICATION	2.5920583897277197E-6	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999999684761822	WITHOUT_CLASSIFICATION	3.1523817832513846E-8	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999997351387859	WITHOUT_CLASSIFICATION	2.648612141072301E-7	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999993912206951	WITHOUT_CLASSIFICATION	6.087793049544638E-7	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999999772280194	WITHOUT_CLASSIFICATION	2.2771980672979853E-8	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9996822904597196	WITHOUT_CLASSIFICATION	3.1770954028042565E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999999335956594	WITHOUT_CLASSIFICATION	6.640434053642376E-8	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999999735060073	WITHOUT_CLASSIFICATION	2.6493992614949946E-8	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999996089748189	WITHOUT_CLASSIFICATION	3.910251812309766E-7	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999999718977167	WITHOUT_CLASSIFICATION	2.810228325639873E-8	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999997185363847	WITHOUT_CLASSIFICATION	2.8146361527664643E-7	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999998821243762	WITHOUT_CLASSIFICATION	1.1787562373834178E-7	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9999927142705222	WITHOUT_CLASSIFICATION	7.285729477877372E-6	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999925674565013	WITHOUT_CLASSIFICATION	7.432543498639601E-6	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999996358482703	WITHOUT_CLASSIFICATION	3.6415172966838127E-7	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999997871470561	WITHOUT_CLASSIFICATION	2.1285294382615286E-7	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999982804665996	WITHOUT_CLASSIFICATION	1.7195334004641506E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9703720926518453	WITHOUT_CLASSIFICATION	0.02962790734815458	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999987729963278	WITHOUT_CLASSIFICATION	1.2270036722783592E-6	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.999998425924189	WITHOUT_CLASSIFICATION	1.5740758109956656E-6	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999998589112619	WITHOUT_CLASSIFICATION	1.4108873814486508E-7	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999959874037863	WITHOUT_CLASSIFICATION	4.01259621380773E-6	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999672402627245	WITHOUT_CLASSIFICATION	3.275973727543404E-5	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999925938929484	WITHOUT_CLASSIFICATION	7.406107051668739E-6	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999995185013794	WITHOUT_CLASSIFICATION	4.814986205921768E-7	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999940950901542	WITHOUT_CLASSIFICATION	5.9049098458201075E-6	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999999721248434	WITHOUT_CLASSIFICATION	2.7875156661524725E-8	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999991699718802	WITHOUT_CLASSIFICATION	8.300281196741718E-7	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999999711541336	WITHOUT_CLASSIFICATION	2.884586641749867E-8	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999983629066247	WITHOUT_CLASSIFICATION	1.6370933753808092E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999933365666465	WITHOUT_CLASSIFICATION	6.663433353479863E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999933365666465	WITHOUT_CLASSIFICATION	6.663433353479863E-6	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999981950824035	WITHOUT_CLASSIFICATION	1.8049175964298867E-6	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999999354698607	WITHOUT_CLASSIFICATION	6.4530139253098E-8	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999999823953833	WITHOUT_CLASSIFICATION	1.7604616690530314E-8	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999912926442586	WITHOUT_CLASSIFICATION	8.707355741453073E-6	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9999482831734486	WITHOUT_CLASSIFICATION	5.1716826551309693E-5	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999999912729343	WITHOUT_CLASSIFICATION	8.727065759655906E-9	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9997678899936079	WITHOUT_CLASSIFICATION	2.3211000639203347E-4	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9967927535278012	WITHOUT_CLASSIFICATION	0.0032072464721988854	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9998082127653337	WITHOUT_CLASSIFICATION	1.917872346663216E-4	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999815384037821	WITHOUT_CLASSIFICATION	1.846159621787648E-5	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999996440809585	WITHOUT_CLASSIFICATION	3.5591904143838226E-7	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9987675519444177	WITHOUT_CLASSIFICATION	0.0012324480555823282	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999998654253839	WITHOUT_CLASSIFICATION	1.3457461608535163E-7	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9998690314956912	WITHOUT_CLASSIFICATION	1.309685043088557E-4	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999999974097447	WITHOUT_CLASSIFICATION	2.5902554595513287E-9	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999998258484453	WITHOUT_CLASSIFICATION	1.741515546192396E-7	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999999356062099	WITHOUT_CLASSIFICATION	6.439379006578548E-8	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.999996897134377	WITHOUT_CLASSIFICATION	3.102865622955918E-6	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999996846044295	WITHOUT_CLASSIFICATION	3.153955704956402E-7	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999928555687154	WITHOUT_CLASSIFICATION	7.144431284586852E-6	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.999999685046202	WITHOUT_CLASSIFICATION	3.1495379813716355E-7	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999999881850768	WITHOUT_CLASSIFICATION	1.1814923113567561E-8	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999952664322397	WITHOUT_CLASSIFICATION	4.733567760248083E-6	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.999995630024628	WITHOUT_CLASSIFICATION	4.369975371988574E-6	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.999997729438279	WITHOUT_CLASSIFICATION	2.2705617209347135E-6	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999969871339532	WITHOUT_CLASSIFICATION	3.0128660467708888E-6	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999999649838863	WITHOUT_CLASSIFICATION	3.501611372242768E-8	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999998645070417	WITHOUT_CLASSIFICATION	1.354929583443518E-7	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9985342862445967	WITHOUT_CLASSIFICATION	0.0014657137554032838	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9992230548847431	WITHOUT_CLASSIFICATION	7.769451152569429E-4	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999973108191477	WITHOUT_CLASSIFICATION	2.6891808523487307E-6	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999999991912093	WITHOUT_CLASSIFICATION	8.087907892704733E-10	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999988892791759	WITHOUT_CLASSIFICATION	1.110720824099624E-6	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999989739647139	WITHOUT_CLASSIFICATION	1.0260352860507264E-6	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999978288804688	WITHOUT_CLASSIFICATION	2.17111953103909E-6	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999999655284705	WITHOUT_CLASSIFICATION	3.447152957726439E-8	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.999994294205726	WITHOUT_CLASSIFICATION	5.705794273978014E-6	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999995191439076	WITHOUT_CLASSIFICATION	4.808560922669739E-7	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999992436923147	WITHOUT_CLASSIFICATION	7.563076851801328E-7	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.999999985825598	WITHOUT_CLASSIFICATION	1.4174401938504987E-8	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999997874746912	WITHOUT_CLASSIFICATION	2.1252530888127898E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999994441018071	WITHOUT_CLASSIFICATION	5.558981928688827E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999994441018071	WITHOUT_CLASSIFICATION	5.558981928688827E-7	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999978728827864	WITHOUT_CLASSIFICATION	2.1271172136426346E-6	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999999912737738	WITHOUT_CLASSIFICATION	8.726226145926266E-9	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999997081882553	WITHOUT_CLASSIFICATION	2.9181174462375177E-7	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999996214347673	WITHOUT_CLASSIFICATION	3.785652327187187E-7	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999999313452432	WITHOUT_CLASSIFICATION	6.865475681227613E-8	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999999877245921	WITHOUT_CLASSIFICATION	1.2275407903645413E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999909072836846	WITHOUT_CLASSIFICATION	9.092716315437743E-6	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.990740214446167	WITHOUT_CLASSIFICATION	0.009259785553833083	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999998790257743	WITHOUT_CLASSIFICATION	1.2097422576438787E-7	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999536043092	WITHOUT_CLASSIFICATION	4.6395690852816867E-8	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.999999575760495	WITHOUT_CLASSIFICATION	4.242395049915377E-7	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999994583746143	WITHOUT_CLASSIFICATION	5.416253855797636E-7	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999050295697933	WITHOUT_CLASSIFICATION	9.497043020666664E-5	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999999867735255	WITHOUT_CLASSIFICATION	1.3226474493163243E-8	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999999368870564	WITHOUT_CLASSIFICATION	6.311294364744891E-8	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9996680499998261	WITHOUT_CLASSIFICATION	3.3195000017389184E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999519957040038	WITHOUT_CLASSIFICATION	4.800429599614896E-5	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999998030559328	WITHOUT_CLASSIFICATION	1.9694406719430216E-7	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999999999620128	WITHOUT_CLASSIFICATION	3.798710496709762E-11	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.8277473281036679	WITHOUT_CLASSIFICATION	0.17225267189633212	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999998985869601	WITHOUT_CLASSIFICATION	1.0141303986540776E-7	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999875036635416	WITHOUT_CLASSIFICATION	1.24963364582723E-5	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999999999806648	WITHOUT_CLASSIFICATION	1.9335246195544553E-11	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999991605100317	WITHOUT_CLASSIFICATION	8.394899682624529E-7	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999496625187566	WITHOUT_CLASSIFICATION	5.033748124327516E-5	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999995191153996	WITHOUT_CLASSIFICATION	4.808846004125446E-7	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999999927360829	WITHOUT_CLASSIFICATION	7.26391706085534E-9	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999998893800623	WITHOUT_CLASSIFICATION	1.1061993757306607E-7	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999648439192894	WITHOUT_CLASSIFICATION	3.5156080710541996E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999989168545101	WITHOUT_CLASSIFICATION	1.0831454899186756E-6	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999472158454482	WITHOUT_CLASSIFICATION	5.2784154551675604E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999972042982046	WITHOUT_CLASSIFICATION	2.7957017953359972E-6	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999989168545101	WITHOUT_CLASSIFICATION	1.0831454899186756E-6	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.999998922731097	WITHOUT_CLASSIFICATION	1.0772689028814535E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9997244299109201	WITHOUT_CLASSIFICATION	2.7557008907994334E-4	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9548433120785486	WITHOUT_CLASSIFICATION	0.04515668792145141	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.5649471887354378	WITHOUT_CLASSIFICATION	0.4350528112645622	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999999288355497	WITHOUT_CLASSIFICATION	7.116445032953573E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999984645788	WITHOUT_CLASSIFICATION	1.5354212599376906E-9	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999999844936769	WITHOUT_CLASSIFICATION	1.5506323171291834E-8	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999973297259224	WITHOUT_CLASSIFICATION	2.6702740775222013E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9998624499537111	WITHOUT_CLASSIFICATION	1.3755004628885744E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999982804665996	WITHOUT_CLASSIFICATION	1.7195334004641506E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999921309263	WITHOUT_CLASSIFICATION	7.869073822349634E-9	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998423532888486	WITHOUT_CLASSIFICATION	1.576467111513918E-4	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999995971181255	WITHOUT_CLASSIFICATION	4.0288187454107976E-7	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999999749558846	WITHOUT_CLASSIFICATION	2.5044115401342345E-8	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.999988264343751	WITHOUT_CLASSIFICATION	1.1735656248958595E-5	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999999072151392	WITHOUT_CLASSIFICATION	9.278486083939562E-8	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9999924552483432	WITHOUT_CLASSIFICATION	7.54475165673344E-6	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999999856021342	WITHOUT_CLASSIFICATION	1.4397865745263086E-8	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9995486625240723	WITHOUT_CLASSIFICATION	4.513374759278326E-4	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999999192508746	WITHOUT_CLASSIFICATION	8.074912545028759E-8	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999993264501231	WITHOUT_CLASSIFICATION	6.735498768546902E-7	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999996081296728	WITHOUT_CLASSIFICATION	3.9187032726585325E-7	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999999751625072	WITHOUT_CLASSIFICATION	2.4837492848979367E-8	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999990335018123	WITHOUT_CLASSIFICATION	9.664981877231432E-7	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999999021908973	WITHOUT_CLASSIFICATION	9.780910262385792E-8	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999944764984823	WITHOUT_CLASSIFICATION	5.523501517733571E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999958868384	WITHOUT_CLASSIFICATION	4.113161599980553E-6	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999873370207288	WITHOUT_CLASSIFICATION	1.2662979271143832E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999985652488	WITHOUT_CLASSIFICATION	1.4347512204398588E-9	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999852210379864	WITHOUT_CLASSIFICATION	1.4778962013533831E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999852210379864	WITHOUT_CLASSIFICATION	1.4778962013533831E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997200397899	WITHOUT_CLASSIFICATION	2.7996021016249E-7	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999999714075867	WITHOUT_CLASSIFICATION	2.859241330954923E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999781156272	WITHOUT_CLASSIFICATION	2.1884372838847815E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728126695801	WITHOUT_CLASSIFICATION	0.0029271873304199665	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728126695801	WITHOUT_CLASSIFICATION	0.0029271873304199665	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728126695801	WITHOUT_CLASSIFICATION	0.0029271873304199665	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728126695801	WITHOUT_CLASSIFICATION	0.0029271873304199665	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999996773963414	WITHOUT_CLASSIFICATION	3.2260365853396875E-7	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999812843136	WITHOUT_CLASSIFICATION	1.8715686490480377E-8	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999997251441318	WITHOUT_CLASSIFICATION	2.7485586821477744E-7	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9994390731434769	WITHOUT_CLASSIFICATION	5.609268565230464E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999401172919	WITHOUT_CLASSIFICATION	5.988270813123561E-8	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999027531624238	WITHOUT_CLASSIFICATION	9.72468375761573E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999995554128482	WITHOUT_CLASSIFICATION	4.4458715180537515E-7	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999995554128482	WITHOUT_CLASSIFICATION	4.4458715180537515E-7	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9997943374152752	WITHOUT_CLASSIFICATION	2.056625847248776E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9998180809770025	WITHOUT_CLASSIFICATION	1.8191902299751752E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999980241736267	WITHOUT_CLASSIFICATION	1.975826373331988E-6	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9994878415250084	WITHOUT_CLASSIFICATION	5.121584749916714E-4	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999993766882366	WITHOUT_CLASSIFICATION	6.233117633264614E-7	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999999773318543	WITHOUT_CLASSIFICATION	2.2668145650089795E-8	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999999181438275	WITHOUT_CLASSIFICATION	8.185617243683422E-8	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.999998358243455	WITHOUT_CLASSIFICATION	1.6417565449915016E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999899252244955	WITHOUT_CLASSIFICATION	1.0074775504449307E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999899252244955	WITHOUT_CLASSIFICATION	1.0074775504449307E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999972042982046	WITHOUT_CLASSIFICATION	2.7957017953359972E-6	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999957516929889	WITHOUT_CLASSIFICATION	4.248307011135012E-6	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999931383261037	WITHOUT_CLASSIFICATION	6.861673896290477E-6	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.999995750640527	WITHOUT_CLASSIFICATION	4.249359472867124E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999999840985364	WITHOUT_CLASSIFICATION	1.5901463562681773E-8	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9997052892563678	WITHOUT_CLASSIFICATION	2.9471074363218876E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999998904682736	WITHOUT_CLASSIFICATION	1.095317264125507E-7	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999989901487089	WITHOUT_CLASSIFICATION	1.0098512910862547E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999990226672189	WITHOUT_CLASSIFICATION	9.773327811740608E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999990226672189	WITHOUT_CLASSIFICATION	9.773327811740608E-7	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999988449429421	WITHOUT_CLASSIFICATION	1.1550570578701933E-6	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999999642794797	WITHOUT_CLASSIFICATION	3.5720520258336623E-8	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999977474822054	WITHOUT_CLASSIFICATION	2.252517794726278E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999967673906529	WITHOUT_CLASSIFICATION	3.2326093469722494E-6	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999998098542403	WITHOUT_CLASSIFICATION	1.9014575967796272E-7	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.999798741940927	WITHOUT_CLASSIFICATION	2.0125805907301588E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.999997233973537	WITHOUT_CLASSIFICATION	2.7660264630172768E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999970748328	WITHOUT_CLASSIFICATION	2.92516726073142E-9	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999970748328	WITHOUT_CLASSIFICATION	2.92516726073142E-9	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999970748328	WITHOUT_CLASSIFICATION	2.92516726073142E-9	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999970748328	WITHOUT_CLASSIFICATION	2.92516726073142E-9	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999990655824628	WITHOUT_CLASSIFICATION	9.344175372006751E-7	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9999985164840113	WITHOUT_CLASSIFICATION	1.4835159887433962E-6	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999097383026281	WITHOUT_CLASSIFICATION	9.026169737196831E-5	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999997050025671	WITHOUT_CLASSIFICATION	2.9499743295481576E-7	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999947877201948	WITHOUT_CLASSIFICATION	5.21227980525762E-6	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9997702962592231	WITHOUT_CLASSIFICATION	2.2970374077687614E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999613409972	WITHOUT_CLASSIFICATION	3.865900266371112E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999836860105	WITHOUT_CLASSIFICATION	1.6313989499833123E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999836860105	WITHOUT_CLASSIFICATION	1.6313989499833123E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999836860105	WITHOUT_CLASSIFICATION	1.6313989499833123E-8	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999959113118413	WITHOUT_CLASSIFICATION	4.088688158734958E-6	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9995993182455211	WITHOUT_CLASSIFICATION	4.006817544788597E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999424832295	WITHOUT_CLASSIFICATION	5.751677037743411E-8	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999424832295	WITHOUT_CLASSIFICATION	5.751677037743411E-8	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999958776747391	WITHOUT_CLASSIFICATION	4.122325260861859E-6	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999999998043465	WITHOUT_CLASSIFICATION	1.9565342815161172E-10	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999999700450113	WITHOUT_CLASSIFICATION	2.995498877731089E-8	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9998112689288834	WITHOUT_CLASSIFICATION	1.8873107111670154E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999997960393568	WITHOUT_CLASSIFICATION	2.0396064323176374E-7	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999997553941504	WITHOUT_CLASSIFICATION	2.446058496407598E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999997658213468	WITHOUT_CLASSIFICATION	2.3417865317507457E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999997658213468	WITHOUT_CLASSIFICATION	2.3417865317507457E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999999553865078	WITHOUT_CLASSIFICATION	4.461349219443844E-7	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9975198074007344	WITHOUT_CLASSIFICATION	0.0024801925992654615	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999999870534297	WITHOUT_CLASSIFICATION	1.2946570220417544E-8	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9999989343200586	WITHOUT_CLASSIFICATION	1.0656799413672896E-6	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999914677721341	WITHOUT_CLASSIFICATION	8.53222786601692E-6	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.999999980387098	WITHOUT_CLASSIFICATION	1.9612901921481522E-8	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999997224887628	WITHOUT_CLASSIFICATION	2.775112372667366E-7	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999815758577989	WITHOUT_CLASSIFICATION	1.842414220111602E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.999612027570887	WITHOUT_CLASSIFICATION	3.879724291130617E-4	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999998374054346	WITHOUT_CLASSIFICATION	1.6259456549050362E-7	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999997915753498	WITHOUT_CLASSIFICATION	2.0842465029782575E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999951291890605	WITHOUT_CLASSIFICATION	4.870810939543271E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998886151255651	WITHOUT_CLASSIFICATION	1.1138487443482772E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999981794430886	WITHOUT_CLASSIFICATION	1.8205569114183318E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999967104831	WITHOUT_CLASSIFICATION	3.289516842191243E-9	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999999828434912	WITHOUT_CLASSIFICATION	1.7156508824249526E-8	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999701464267362	WITHOUT_CLASSIFICATION	2.985357326383895E-5	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.999999993590023	WITHOUT_CLASSIFICATION	6.409977009417639E-9	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999994337408942	WITHOUT_CLASSIFICATION	5.662591058478738E-7	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999978556519296	WITHOUT_CLASSIFICATION	2.1443480704669875E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999998453725615	WITHOUT_CLASSIFICATION	1.5462743844279124E-7	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999332896114501	WITHOUT_CLASSIFICATION	6.671038854983303E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297701	WITHOUT_CLASSIFICATION	2.1117022979640347E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297701	WITHOUT_CLASSIFICATION	2.1117022979640347E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297701	WITHOUT_CLASSIFICATION	2.1117022979640347E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297701	WITHOUT_CLASSIFICATION	2.1117022979640347E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297701	WITHOUT_CLASSIFICATION	2.1117022979640347E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297701	WITHOUT_CLASSIFICATION	2.1117022979640347E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297701	WITHOUT_CLASSIFICATION	2.1117022979640347E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297701	WITHOUT_CLASSIFICATION	2.1117022979640347E-7	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9991884123134473	WITHOUT_CLASSIFICATION	8.115876865527503E-4	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999273003247207	WITHOUT_CLASSIFICATION	7.269967527934571E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999912915596351	WITHOUT_CLASSIFICATION	8.70844036502624E-6	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9829357862358179	WITHOUT_CLASSIFICATION	0.017064213764182077	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999909072836846	WITHOUT_CLASSIFICATION	9.092716315437743E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999909072836846	WITHOUT_CLASSIFICATION	9.092716315437743E-6	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999999797833549	WITHOUT_CLASSIFICATION	2.0216645102534752E-8	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999998410032447	WITHOUT_CLASSIFICATION	1.589967552933066E-7	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999999971767313	WITHOUT_CLASSIFICATION	2.823268823895022E-9	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9999666109466577	WITHOUT_CLASSIFICATION	3.338905334220648E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.999996303095693	WITHOUT_CLASSIFICATION	3.6969043070656618E-6	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.999999250015912	WITHOUT_CLASSIFICATION	7.499840880155536E-7	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999993772932068	WITHOUT_CLASSIFICATION	6.227067932044718E-7	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9985686266684777	WITHOUT_CLASSIFICATION	0.0014313733315222776	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999997550006853	WITHOUT_CLASSIFICATION	2.4499931478283053E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999981019537268	WITHOUT_CLASSIFICATION	1.898046273253841E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999981019537268	WITHOUT_CLASSIFICATION	1.898046273253841E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999981019537268	WITHOUT_CLASSIFICATION	1.898046273253841E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.999999874288583	WITHOUT_CLASSIFICATION	1.2571141710767706E-7	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999971213539091	WITHOUT_CLASSIFICATION	2.8786460910202173E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999911570868117	WITHOUT_CLASSIFICATION	8.84291318828454E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999280898078	WITHOUT_CLASSIFICATION	7.19101922358689E-8	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353143992	WITHOUT_CLASSIFICATION	4.536468560083674E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999286580127	WITHOUT_CLASSIFICATION	7.134198739116271E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999869079564	WITHOUT_CLASSIFICATION	1.3092043547798995E-8	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999956301423361	WITHOUT_CLASSIFICATION	4.3698576638941014E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999996466231257	WITHOUT_CLASSIFICATION	3.5337687430298956E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999996466231257	WITHOUT_CLASSIFICATION	3.5337687430298956E-7	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999988783772854	WITHOUT_CLASSIFICATION	1.1216227146061717E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999335879046	WITHOUT_CLASSIFICATION	6.641209536798628E-8	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999902166115797	WITHOUT_CLASSIFICATION	9.783388420347707E-6	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.999566117329612	WITHOUT_CLASSIFICATION	4.3388267038806653E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996899430599	WITHOUT_CLASSIFICATION	3.100569400970216E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996899430599	WITHOUT_CLASSIFICATION	3.100569400970216E-7	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999999720083869	WITHOUT_CLASSIFICATION	2.79916131212263E-8	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9999924535610307	WITHOUT_CLASSIFICATION	7.546438969189806E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999621134849841	WITHOUT_CLASSIFICATION	3.7886515015836065E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941729697	WITHOUT_CLASSIFICATION	1.8305827030321507E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941729697	WITHOUT_CLASSIFICATION	1.8305827030321507E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941729697	WITHOUT_CLASSIFICATION	1.8305827030321507E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999999948871015	WITHOUT_CLASSIFICATION	5.1128984980544645E-8	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999993550121491	WITHOUT_CLASSIFICATION	6.449878509137168E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999993550121491	WITHOUT_CLASSIFICATION	6.449878509137168E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999997299256643	WITHOUT_CLASSIFICATION	2.7007433575196476E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999997299256643	WITHOUT_CLASSIFICATION	2.7007433575196476E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999997520877143	WITHOUT_CLASSIFICATION	2.4791228566990934E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.999999390881896	WITHOUT_CLASSIFICATION	6.091181038184294E-7	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999953022514201	WITHOUT_CLASSIFICATION	4.6977485799855475E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999953326507532	WITHOUT_CLASSIFICATION	4.6673492467623325E-6	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999881433111188	WITHOUT_CLASSIFICATION	1.185668888117323E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999880604208279	WITHOUT_CLASSIFICATION	1.1939579172086067E-5	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999999364917	WITHOUT_CLASSIFICATION	6.35082219103069E-11	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999986094382918	WITHOUT_CLASSIFICATION	1.3905617082386501E-6	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999999905007636	WITHOUT_CLASSIFICATION	9.499236301394875E-9	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.999995802495797	WITHOUT_CLASSIFICATION	4.197504203070985E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.5917902048896708	WITHOUT_CLASSIFICATION	0.4082097951103292	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999986264140321	WITHOUT_CLASSIFICATION	1.3735859678229424E-6	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999995892932093	WITHOUT_CLASSIFICATION	4.107067906618669E-7	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999991442396999	WITHOUT_CLASSIFICATION	8.557603000472644E-7	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999996580037717	WITHOUT_CLASSIFICATION	3.4199622840462753E-7	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.999999924740996	WITHOUT_CLASSIFICATION	7.525900396523341E-8	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999998232231881	WITHOUT_CLASSIFICATION	1.767768118630597E-7	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999988463642343	WITHOUT_CLASSIFICATION	1.15363576569845E-6	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999866692151885	WITHOUT_CLASSIFICATION	1.3330784811478655E-5	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999998230849778	WITHOUT_CLASSIFICATION	1.7691502222347026E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998423532888486	WITHOUT_CLASSIFICATION	1.576467111513918E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999475232550304	WITHOUT_CLASSIFICATION	5.247674496949439E-5	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999999409208921	WITHOUT_CLASSIFICATION	5.9079108066117966E-8	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999993186145366	WITHOUT_CLASSIFICATION	6.813854633343582E-7	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999999701435475	WITHOUT_CLASSIFICATION	2.985645261319455E-8	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999987947074088	WITHOUT_CLASSIFICATION	1.205292591099153E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999934322264185	WITHOUT_CLASSIFICATION	6.567773581457885E-6	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.999999996924956	WITHOUT_CLASSIFICATION	3.0750439381690878E-9	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999997157203989	WITHOUT_CLASSIFICATION	2.842796011298363E-7	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9999906698114227	WITHOUT_CLASSIFICATION	9.33018857722467E-6	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999999459792979	WITHOUT_CLASSIFICATION	5.402070221170596E-8	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999996160007264	WITHOUT_CLASSIFICATION	3.83999273591293E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999987434611567	WITHOUT_CLASSIFICATION	1.2565388432544099E-6	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999999288311836	WITHOUT_CLASSIFICATION	7.116881642444083E-8	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999999920260345	WITHOUT_CLASSIFICATION	7.973965514788098E-9	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9999957415916403	WITHOUT_CLASSIFICATION	4.258408359771982E-6	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999999944270807	WITHOUT_CLASSIFICATION	5.5729193704231295E-9	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999999806150681	WITHOUT_CLASSIFICATION	1.9384931903625517E-8	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999993964419348	WITHOUT_CLASSIFICATION	6.035580652677904E-7	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9997885226214914	WITHOUT_CLASSIFICATION	2.1147737850852369E-4	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.999996461700349	WITHOUT_CLASSIFICATION	3.5382996510463058E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.999997966632006	WITHOUT_CLASSIFICATION	2.0333679938693744E-6	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999999956883332	WITHOUT_CLASSIFICATION	4.311666846900812E-9	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999995363474328	WITHOUT_CLASSIFICATION	4.636525671151121E-7	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.999335058616945	WITHOUT_CLASSIFICATION	6.649413830550193E-4	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999844751464	WITHOUT_CLASSIFICATION	1.552485360288405E-8	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999999884960832	WITHOUT_CLASSIFICATION	1.1503916755291758E-8	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999999943073857	WITHOUT_CLASSIFICATION	5.69261419817309E-9	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999989741842215	WITHOUT_CLASSIFICATION	1.0258157785564694E-6	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999932025997926	WITHOUT_CLASSIFICATION	6.797400207349049E-6	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999981900164548	WITHOUT_CLASSIFICATION	1.809983545054674E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.999998672621931	WITHOUT_CLASSIFICATION	1.3273780690161825E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.999998672621931	WITHOUT_CLASSIFICATION	1.3273780690161825E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.999999780954328	WITHOUT_CLASSIFICATION	2.1904567203204851E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.999999780954328	WITHOUT_CLASSIFICATION	2.1904567203204851E-7	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999794866227484	WITHOUT_CLASSIFICATION	2.051337725165812E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999794866227484	WITHOUT_CLASSIFICATION	2.051337725165812E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999994646475828	WITHOUT_CLASSIFICATION	5.353524171126825E-7	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999994646475828	WITHOUT_CLASSIFICATION	5.353524171126825E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359217	WITHOUT_CLASSIFICATION	1.9664078197455988E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359217	WITHOUT_CLASSIFICATION	1.9664078197455988E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359217	WITHOUT_CLASSIFICATION	1.9664078197455988E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359217	WITHOUT_CLASSIFICATION	1.9664078197455988E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359217	WITHOUT_CLASSIFICATION	1.9664078197455988E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359217	WITHOUT_CLASSIFICATION	1.9664078197455988E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359217	WITHOUT_CLASSIFICATION	1.9664078197455988E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359217	WITHOUT_CLASSIFICATION	1.9664078197455988E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359217	WITHOUT_CLASSIFICATION	1.9664078197455988E-8	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999988979110817	WITHOUT_CLASSIFICATION	1.1020889184225164E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999988979110817	WITHOUT_CLASSIFICATION	1.1020889184225164E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999988979110817	WITHOUT_CLASSIFICATION	1.1020889184225164E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999995083056359	WITHOUT_CLASSIFICATION	4.916943640458461E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999991141961779	WITHOUT_CLASSIFICATION	8.858038220082314E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999991141961779	WITHOUT_CLASSIFICATION	8.858038220082314E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999991141961779	WITHOUT_CLASSIFICATION	8.858038220082314E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999997872923417	WITHOUT_CLASSIFICATION	2.1270765837297712E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999997872923417	WITHOUT_CLASSIFICATION	2.1270765837297712E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999997872923417	WITHOUT_CLASSIFICATION	2.1270765837297712E-7	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999865393739351	WITHOUT_CLASSIFICATION	1.3460626064905233E-5	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999998237851666	WITHOUT_CLASSIFICATION	1.7621483338490087E-7	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999453518256928	WITHOUT_CLASSIFICATION	5.464817430723379E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999940480081768	WITHOUT_CLASSIFICATION	5.951991823192418E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999940480081768	WITHOUT_CLASSIFICATION	5.951991823192418E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999940480081768	WITHOUT_CLASSIFICATION	5.951991823192418E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.999997744908821	WITHOUT_CLASSIFICATION	2.2550911790410164E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999912574920019	WITHOUT_CLASSIFICATION	8.742507998044333E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999912574920019	WITHOUT_CLASSIFICATION	8.742507998044333E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9998383463749049	WITHOUT_CLASSIFICATION	1.6165362509512176E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.999999994484438	WITHOUT_CLASSIFICATION	5.515561983746977E-9	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.999999994484438	WITHOUT_CLASSIFICATION	5.515561983746977E-9	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.7804970366624159	WITHOUT_CLASSIFICATION	0.21950296333758398	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999997950754335	WITHOUT_CLASSIFICATION	2.049245664956513E-7	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999998840767771	WITHOUT_CLASSIFICATION	1.159232228752687E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999996527359125	WITHOUT_CLASSIFICATION	3.472640875826151E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999996527359125	WITHOUT_CLASSIFICATION	3.472640875826151E-7	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999991649685276	WITHOUT_CLASSIFICATION	8.35031472394207E-7	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999996292793152	WITHOUT_CLASSIFICATION	3.707206847803352E-7	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999998551334112	WITHOUT_CLASSIFICATION	1.4486658873790663E-7	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9999992755998502	WITHOUT_CLASSIFICATION	7.244001497967627E-7	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9986988410172642	WITHOUT_CLASSIFICATION	0.0013011589827358208	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999996527359125	WITHOUT_CLASSIFICATION	3.472640875826151E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999996527359125	WITHOUT_CLASSIFICATION	3.472640875826151E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999996527359125	WITHOUT_CLASSIFICATION	3.472640875826151E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999996527359125	WITHOUT_CLASSIFICATION	3.472640875826151E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999996527359125	WITHOUT_CLASSIFICATION	3.472640875826151E-7	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999999299152372	WITHOUT_CLASSIFICATION	7.008476275714758E-8	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999998379065168	WITHOUT_CLASSIFICATION	1.6209348321260942E-7	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999997324914833	WITHOUT_CLASSIFICATION	2.6750851671079194E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999997457904957	WITHOUT_CLASSIFICATION	2.542095044086468E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9999911822426234	WITHOUT_CLASSIFICATION	8.817757376567558E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987093462	WITHOUT_CLASSIFICATION	6.012906537339366E-7	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9823809818096242	WITHOUT_CLASSIFICATION	0.017619018190375854	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.999426872805613	WITHOUT_CLASSIFICATION	5.731271943870772E-4	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999999310255108	WITHOUT_CLASSIFICATION	6.897448919368191E-8	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999999607759567	WITHOUT_CLASSIFICATION	3.9224043453646076E-8	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999947632621774	WITHOUT_CLASSIFICATION	5.236737822586921E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999875036635416	WITHOUT_CLASSIFICATION	1.24963364582723E-5	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999995262803747	WITHOUT_CLASSIFICATION	4.7371962532746204E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999976333429	WITHOUT_CLASSIFICATION	2.3666571210951203E-9	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999915871572463	WITHOUT_CLASSIFICATION	8.41284275363746E-6	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9999847037029415	WITHOUT_CLASSIFICATION	1.529629705849845E-5	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999999976951693	WITHOUT_CLASSIFICATION	2.30483065312923E-9	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999999999194332	WITHOUT_CLASSIFICATION	8.056672836380777E-11	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999990326438615	WITHOUT_CLASSIFICATION	9.67356138518809E-7	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999997221936785	WITHOUT_CLASSIFICATION	2.7780632153692605E-7	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.999999226418743	WITHOUT_CLASSIFICATION	7.735812569587763E-7	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.999990515184892	WITHOUT_CLASSIFICATION	9.484815107940431E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999536043092	WITHOUT_CLASSIFICATION	4.6395690852816867E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999777294515	WITHOUT_CLASSIFICATION	2.2270548545912827E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999777294515	WITHOUT_CLASSIFICATION	2.2270548545912827E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999777294515	WITHOUT_CLASSIFICATION	2.2270548545912827E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999777294515	WITHOUT_CLASSIFICATION	2.2270548545912827E-8	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999893084878388	WITHOUT_CLASSIFICATION	1.0691512161157473E-5	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9998963872805013	WITHOUT_CLASSIFICATION	1.0361271949862135E-4	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.999999616498781	WITHOUT_CLASSIFICATION	3.835012190891769E-7	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.999999616498781	WITHOUT_CLASSIFICATION	3.835012190891769E-7	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999988373908962	WITHOUT_CLASSIFICATION	1.1626091036771984E-6	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999973643315472	WITHOUT_CLASSIFICATION	2.635668452810591E-6	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999024223366	WITHOUT_CLASSIFICATION	9.75776634175049E-8	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999933476342	WITHOUT_CLASSIFICATION	6.6523657114543055E-9	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999711871750074	WITHOUT_CLASSIFICATION	2.8812824992635284E-5	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999994854810951	WITHOUT_CLASSIFICATION	5.145189049503528E-7	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999961015730784	WITHOUT_CLASSIFICATION	3.898426921577184E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999982944053243	WITHOUT_CLASSIFICATION	1.70559467572859E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999982944053243	WITHOUT_CLASSIFICATION	1.70559467572859E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999982944053243	WITHOUT_CLASSIFICATION	1.70559467572859E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999982944053243	WITHOUT_CLASSIFICATION	1.70559467572859E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9986616069894132	WITHOUT_CLASSIFICATION	0.001338393010586874	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995255006325	WITHOUT_CLASSIFICATION	4.744993674531986E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995255006325	WITHOUT_CLASSIFICATION	4.744993674531986E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995255006325	WITHOUT_CLASSIFICATION	4.744993674531986E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999999698823245	WITHOUT_CLASSIFICATION	3.0117675435859277E-8	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999986552266296	WITHOUT_CLASSIFICATION	1.3447733704643096E-6	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999997632326215	WITHOUT_CLASSIFICATION	2.3676737854135905E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728126695801	WITHOUT_CLASSIFICATION	0.0029271873304199665	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728126695801	WITHOUT_CLASSIFICATION	0.0029271873304199665	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999997554363529	WITHOUT_CLASSIFICATION	2.445636470408733E-7	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9998696555481483	WITHOUT_CLASSIFICATION	1.3034445185168984E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999596883248469	WITHOUT_CLASSIFICATION	4.031167515318521E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999596883248469	WITHOUT_CLASSIFICATION	4.031167515318521E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999652340533147	WITHOUT_CLASSIFICATION	3.476594668526041E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999652340533147	WITHOUT_CLASSIFICATION	3.476594668526041E-5	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999999869530034	WITHOUT_CLASSIFICATION	1.3046996676020985E-8	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999999854862371	WITHOUT_CLASSIFICATION	1.4513762937593798E-8	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999999947102063	WITHOUT_CLASSIFICATION	5.289793730116372E-9	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9961892266371667	WITHOUT_CLASSIFICATION	0.0038107733628333297	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999987633416786	WITHOUT_CLASSIFICATION	1.236658321457888E-6	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999999886615833	WITHOUT_CLASSIFICATION	1.1338416698071022E-8	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999907393111	WITHOUT_CLASSIFICATION	9.260688925753806E-9	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999969451484445	WITHOUT_CLASSIFICATION	3.0548515555647472E-6	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999999564688266	WITHOUT_CLASSIFICATION	4.3531173415498235E-8	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999994893802	WITHOUT_CLASSIFICATION	5.106197335350868E-10	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999994893802	WITHOUT_CLASSIFICATION	5.106197335350868E-10	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999997901283925	WITHOUT_CLASSIFICATION	2.0987160759987206E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999997901283925	WITHOUT_CLASSIFICATION	2.0987160759987206E-7	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9999868651002817	WITHOUT_CLASSIFICATION	1.3134899718412443E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999995648105124	WITHOUT_CLASSIFICATION	4.3518948755714234E-7	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999793678890719	WITHOUT_CLASSIFICATION	2.0632110928053566E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999984214212989	WITHOUT_CLASSIFICATION	1.5785787010469391E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999984214212989	WITHOUT_CLASSIFICATION	1.5785787010469391E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999984214212989	WITHOUT_CLASSIFICATION	1.5785787010469391E-6	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999967863368567	WITHOUT_CLASSIFICATION	3.2136631433350537E-6	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.999995233794416	WITHOUT_CLASSIFICATION	4.766205583887927E-6	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999943351159883	WITHOUT_CLASSIFICATION	5.664884011607197E-6	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999960528156453	WITHOUT_CLASSIFICATION	3.947184354726768E-6	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999933972454084	WITHOUT_CLASSIFICATION	6.60275459170146E-6	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999927631507439	WITHOUT_CLASSIFICATION	7.2368492560799555E-6	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999960393404759	WITHOUT_CLASSIFICATION	3.960659524115614E-6	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999995109895436	WITHOUT_CLASSIFICATION	4.890104563470327E-7	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9999689354369812	WITHOUT_CLASSIFICATION	3.1064563018742995E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999988732776389	WITHOUT_CLASSIFICATION	1.126722361086693E-6	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9999997854694728	WITHOUT_CLASSIFICATION	2.145305272843269E-7	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999999605418444	WITHOUT_CLASSIFICATION	3.9458155643597016E-8	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999993157941547	WITHOUT_CLASSIFICATION	6.842058452023728E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728126695801	WITHOUT_CLASSIFICATION	0.0029271873304199665	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.99999712934971	WITHOUT_CLASSIFICATION	2.8706502900021745E-6	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999916045718211	WITHOUT_CLASSIFICATION	8.3954281787907E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999852210379864	WITHOUT_CLASSIFICATION	1.4778962013533831E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150852039214	WITHOUT_CLASSIFICATION	8.49147960785856E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150852039214	WITHOUT_CLASSIFICATION	8.49147960785856E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150852039214	WITHOUT_CLASSIFICATION	8.49147960785856E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150852039214	WITHOUT_CLASSIFICATION	8.49147960785856E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150852039214	WITHOUT_CLASSIFICATION	8.49147960785856E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999825384127349	WITHOUT_CLASSIFICATION	1.7461587265138958E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150852039214	WITHOUT_CLASSIFICATION	8.49147960785856E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150852039214	WITHOUT_CLASSIFICATION	8.49147960785856E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150852039214	WITHOUT_CLASSIFICATION	8.49147960785856E-5	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.999999570618371	WITHOUT_CLASSIFICATION	4.293816290080276E-7	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999974846480945	WITHOUT_CLASSIFICATION	2.5153519055506146E-6	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.5766762082466351	DEFECT	0.4233237917533649	WITHOUT_CLASSIFICATION
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9999185054527169	WITHOUT_CLASSIFICATION	8.149454728313773E-5	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999894031835689	WITHOUT_CLASSIFICATION	1.059681643112479E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999966233790827	WITHOUT_CLASSIFICATION	3.3766209172850346E-6	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999999992879486	WITHOUT_CLASSIFICATION	7.120514281786242E-10	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999881536952017	WITHOUT_CLASSIFICATION	1.1846304798258687E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999954743617179	WITHOUT_CLASSIFICATION	4.525638282139122E-6	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999954743617179	WITHOUT_CLASSIFICATION	4.525638282139122E-6	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999842318638563	WITHOUT_CLASSIFICATION	1.5768136143658496E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999927732895075	WITHOUT_CLASSIFICATION	7.226710492498309E-6	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999951652790419	WITHOUT_CLASSIFICATION	4.834720958162711E-6	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999943398936485	WITHOUT_CLASSIFICATION	5.6601063515962935E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999957938860045	WITHOUT_CLASSIFICATION	4.206113995528085E-6	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999938430177719	WITHOUT_CLASSIFICATION	6.156982228133064E-6	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999962080865247	WITHOUT_CLASSIFICATION	3.791913475232728E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999952784496574	WITHOUT_CLASSIFICATION	4.721550342509296E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.999995475873804	WITHOUT_CLASSIFICATION	4.524126196081676E-6	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.999997198098472	WITHOUT_CLASSIFICATION	2.80190152808797E-6	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.999997320457232	WITHOUT_CLASSIFICATION	2.6795427679530715E-6	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999966150011436	WITHOUT_CLASSIFICATION	3.3849988563481973E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999966431102524	WITHOUT_CLASSIFICATION	3.356889747680736E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999946145758906	WITHOUT_CLASSIFICATION	5.385424109435871E-6	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999961767353986	WITHOUT_CLASSIFICATION	3.823264601325664E-6	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999968293337332	WITHOUT_CLASSIFICATION	3.1706662666749627E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999962798068387	WITHOUT_CLASSIFICATION	3.720193161285424E-6	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999976131175778	WITHOUT_CLASSIFICATION	2.38688242224288E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999963251725349	WITHOUT_CLASSIFICATION	3.6748274651650926E-6	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999917860859286	WITHOUT_CLASSIFICATION	8.213914071287798E-6	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.99999575202246	WITHOUT_CLASSIFICATION	4.247977539969844E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999920836660788	WITHOUT_CLASSIFICATION	7.916333921162433E-6	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999965824529328	WITHOUT_CLASSIFICATION	3.4175470672365404E-6	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.99999875277399	WITHOUT_CLASSIFICATION	1.2472260099642205E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999965481472897	WITHOUT_CLASSIFICATION	3.451852710376848E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999971680325885	WITHOUT_CLASSIFICATION	2.8319674114214694E-6	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999968458940897	WITHOUT_CLASSIFICATION	3.1541059102541747E-6	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999960825244866	WITHOUT_CLASSIFICATION	3.917475513502148E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999962639589718	WITHOUT_CLASSIFICATION	3.736041028190525E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999972466020196	WITHOUT_CLASSIFICATION	2.753397980345228E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.999997834781994	WITHOUT_CLASSIFICATION	2.16521800601392E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999975776738785	WITHOUT_CLASSIFICATION	2.4223261215696067E-6	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999955772339428	WITHOUT_CLASSIFICATION	4.422766057181946E-6	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.999996935687229	WITHOUT_CLASSIFICATION	3.0643127710775813E-6	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999962205721037	WITHOUT_CLASSIFICATION	3.7794278963377673E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999980742540486	WITHOUT_CLASSIFICATION	1.9257459513657433E-6	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999968298871598	WITHOUT_CLASSIFICATION	3.1701128401963655E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999949057498215	WITHOUT_CLASSIFICATION	5.094250178506782E-6	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999963559249491	WITHOUT_CLASSIFICATION	3.6440750508385168E-6	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999933443067966	WITHOUT_CLASSIFICATION	6.655693203355951E-6	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999968404323418	WITHOUT_CLASSIFICATION	3.1595676582504253E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999964715104335	WITHOUT_CLASSIFICATION	3.528489566543523E-6	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999924090604129	WITHOUT_CLASSIFICATION	7.5909395871118144E-6	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999956093840882	WITHOUT_CLASSIFICATION	4.390615911866952E-6	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999968097661104	WITHOUT_CLASSIFICATION	3.190233889743515E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999962802504594	WITHOUT_CLASSIFICATION	3.71974954050013E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999925725928609	WITHOUT_CLASSIFICATION	7.4274071390286255E-6	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.999994686824732	WITHOUT_CLASSIFICATION	5.313175268062728E-6	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999948089910373	WITHOUT_CLASSIFICATION	5.191008962660713E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999949370202581	WITHOUT_CLASSIFICATION	5.062979741884315E-6	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999930364231314	WITHOUT_CLASSIFICATION	6.9635768686014926E-6	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999920414018632	WITHOUT_CLASSIFICATION	7.958598136842716E-6	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999946287524645	WITHOUT_CLASSIFICATION	5.3712475356094416E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999926357986998	WITHOUT_CLASSIFICATION	7.364201300285315E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999926357986998	WITHOUT_CLASSIFICATION	7.364201300285315E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999936366891253	WITHOUT_CLASSIFICATION	6.3633108746250756E-6	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999958310211826	WITHOUT_CLASSIFICATION	4.1689788173164455E-6	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999934891010085	WITHOUT_CLASSIFICATION	6.510898991447119E-6	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999929042903527	WITHOUT_CLASSIFICATION	7.095709647370954E-6	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999971441976991	WITHOUT_CLASSIFICATION	2.8558023009489176E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999904344003495	WITHOUT_CLASSIFICATION	9.56559965043271E-6	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999939998255768	WITHOUT_CLASSIFICATION	6.000174423184865E-6	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999876115239771	WITHOUT_CLASSIFICATION	1.2388476022855501E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999911661014914	WITHOUT_CLASSIFICATION	8.833898508557882E-6	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999948494875424	WITHOUT_CLASSIFICATION	5.150512457629425E-6	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999993299635513	WITHOUT_CLASSIFICATION	6.700364485761045E-7	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999993299635513	WITHOUT_CLASSIFICATION	6.700364485761045E-7	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999988659643724	WITHOUT_CLASSIFICATION	1.1340356276244607E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9998291020682885	WITHOUT_CLASSIFICATION	1.7089793171144404E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9996242253623019	WITHOUT_CLASSIFICATION	3.757746376981733E-4	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999999999834565	WITHOUT_CLASSIFICATION	1.6543585664460925E-11	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999779890838	WITHOUT_CLASSIFICATION	2.201091631356257E-8	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999779890838	WITHOUT_CLASSIFICATION	2.201091631356257E-8	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999779890838	WITHOUT_CLASSIFICATION	2.201091631356257E-8	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999779890838	WITHOUT_CLASSIFICATION	2.201091631356257E-8	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.7152047891380466	WITHOUT_CLASSIFICATION	0.2847952108619534	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9972538430556352	WITHOUT_CLASSIFICATION	0.002746156944364722	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999973601331696	WITHOUT_CLASSIFICATION	2.6398668303718365E-6	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999969000742289	WITHOUT_CLASSIFICATION	3.099925771090503E-6	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.999996733661032	WITHOUT_CLASSIFICATION	3.266338967981578E-6	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999957903256471	WITHOUT_CLASSIFICATION	4.209674352840895E-6	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999961348218882	WITHOUT_CLASSIFICATION	3.86517811178066E-6	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.999993753505236	WITHOUT_CLASSIFICATION	6.246494763936432E-6	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9999892700658878	WITHOUT_CLASSIFICATION	1.0729934112167096E-5	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999951716855848	WITHOUT_CLASSIFICATION	4.828314415198298E-6	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999940226849228	WITHOUT_CLASSIFICATION	5.977315077186887E-6	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999927717042815	WITHOUT_CLASSIFICATION	7.228295718536332E-6	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.999993829019553	WITHOUT_CLASSIFICATION	6.170980446968824E-6	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999943245270464	WITHOUT_CLASSIFICATION	5.675472953547288E-6	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999936355972483	WITHOUT_CLASSIFICATION	6.364402751672517E-6	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999934484987196	WITHOUT_CLASSIFICATION	6.551501280465417E-6	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999962812036067	WITHOUT_CLASSIFICATION	3.7187963933260105E-6	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.999997465184461	WITHOUT_CLASSIFICATION	2.53481553901334E-6	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.999996002484869	WITHOUT_CLASSIFICATION	3.997515131027536E-6	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999952849541541	WITHOUT_CLASSIFICATION	4.715045845907672E-6	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999953862858723	WITHOUT_CLASSIFICATION	4.6137141277543545E-6	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999920416665282	WITHOUT_CLASSIFICATION	7.958333471744758E-6	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999903373802724	WITHOUT_CLASSIFICATION	9.662619727620414E-6	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999942708162082	WITHOUT_CLASSIFICATION	5.729183791862999E-6	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999946866698461	WITHOUT_CLASSIFICATION	5.313330153884339E-6	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999968020887803	WITHOUT_CLASSIFICATION	3.1979112197157653E-6	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999963042134694	WITHOUT_CLASSIFICATION	3.6957865305598887E-6	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999979161166513	WITHOUT_CLASSIFICATION	2.083883348657001E-6	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999982070688667	WITHOUT_CLASSIFICATION	1.7929311332968785E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999970616434379	WITHOUT_CLASSIFICATION	2.9383565620215632E-6	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999976152388002	WITHOUT_CLASSIFICATION	2.3847611998586733E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999969977293353	WITHOUT_CLASSIFICATION	3.002270664792751E-6	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999958443824578	WITHOUT_CLASSIFICATION	4.15561754212444E-6	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.999994647165488	WITHOUT_CLASSIFICATION	5.352834512013289E-6	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999957950268716	WITHOUT_CLASSIFICATION	4.204973128443169E-6	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999971977513702	WITHOUT_CLASSIFICATION	2.8022486298832167E-6	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999964397638359	WITHOUT_CLASSIFICATION	3.5602361640751608E-6	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999969097769629	WITHOUT_CLASSIFICATION	3.0902230371736673E-6	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999949264837507	WITHOUT_CLASSIFICATION	5.073516249318687E-6	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999940149827019	WITHOUT_CLASSIFICATION	5.985017298082455E-6	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999954720813387	WITHOUT_CLASSIFICATION	4.527918661329224E-6	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999952326904651	WITHOUT_CLASSIFICATION	4.7673095349599045E-6	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.999995137363292	WITHOUT_CLASSIFICATION	4.862636707926675E-6	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.999995038218699	WITHOUT_CLASSIFICATION	4.961781301044415E-6	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999959471864897	WITHOUT_CLASSIFICATION	4.052813510330685E-6	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999969771054902	WITHOUT_CLASSIFICATION	3.0228945097683755E-6	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.99999478843029	WITHOUT_CLASSIFICATION	5.211569709962911E-6	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999958720477605	WITHOUT_CLASSIFICATION	4.127952239536614E-6	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999920507597241	WITHOUT_CLASSIFICATION	7.949240276020098E-6	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999852151621808	WITHOUT_CLASSIFICATION	1.4784837819112499E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999936126103114	WITHOUT_CLASSIFICATION	6.387389688525689E-6	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999921655030721	WITHOUT_CLASSIFICATION	7.834496927834632E-6	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.999996953447083	WITHOUT_CLASSIFICATION	3.0465529171802333E-6	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.999996880328069	WITHOUT_CLASSIFICATION	3.1196719310169046E-6	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999953378625518	WITHOUT_CLASSIFICATION	4.662137448158882E-6	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999914355728856	WITHOUT_CLASSIFICATION	8.564427114437825E-6	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999953483574479	WITHOUT_CLASSIFICATION	4.651642552234004E-6	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999952736211024	WITHOUT_CLASSIFICATION	4.726378897664129E-6	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999947367302551	WITHOUT_CLASSIFICATION	5.26326974497034E-6	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999999893336545	WITHOUT_CLASSIFICATION	1.066634546707905E-8	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999999614586375	WITHOUT_CLASSIFICATION	3.854136249672229E-8	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264538446	WITHOUT_CLASSIFICATION	6.973546155484354E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264538446	WITHOUT_CLASSIFICATION	6.973546155484354E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264538446	WITHOUT_CLASSIFICATION	6.973546155484354E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264538446	WITHOUT_CLASSIFICATION	6.973546155484354E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264538446	WITHOUT_CLASSIFICATION	6.973546155484354E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264538446	WITHOUT_CLASSIFICATION	6.973546155484354E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264538446	WITHOUT_CLASSIFICATION	6.973546155484354E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999496433120534	WITHOUT_CLASSIFICATION	5.0356687946612366E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999496433120534	WITHOUT_CLASSIFICATION	5.0356687946612366E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999496433120534	WITHOUT_CLASSIFICATION	5.0356687946612366E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999496433120534	WITHOUT_CLASSIFICATION	5.0356687946612366E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999240751353522	WITHOUT_CLASSIFICATION	7.592486464775923E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999240751353522	WITHOUT_CLASSIFICATION	7.592486464775923E-5	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9999999816754892	WITHOUT_CLASSIFICATION	1.8324510899163388E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999741372886	WITHOUT_CLASSIFICATION	2.5862711325870322E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999741372886	WITHOUT_CLASSIFICATION	2.5862711325870322E-8	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999999332648284	WITHOUT_CLASSIFICATION	6.673517166011601E-8	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999997817959557	WITHOUT_CLASSIFICATION	2.1820404431308594E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628180853	WITHOUT_CLASSIFICATION	9.371819146544684E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628180853	WITHOUT_CLASSIFICATION	9.371819146544684E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628180853	WITHOUT_CLASSIFICATION	9.371819146544684E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628180853	WITHOUT_CLASSIFICATION	9.371819146544684E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628180853	WITHOUT_CLASSIFICATION	9.371819146544684E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628180853	WITHOUT_CLASSIFICATION	9.371819146544684E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628180853	WITHOUT_CLASSIFICATION	9.371819146544684E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529471419	WITHOUT_CLASSIFICATION	2.4705285815108624E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659417798	WITHOUT_CLASSIFICATION	2.3405822031411997E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999983076070172	WITHOUT_CLASSIFICATION	1.6923929828258572E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999983076070172	WITHOUT_CLASSIFICATION	1.6923929828258572E-6	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999996622701873	WITHOUT_CLASSIFICATION	3.3772981271358026E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999933592464795	WITHOUT_CLASSIFICATION	6.640753520528547E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999933592464795	WITHOUT_CLASSIFICATION	6.640753520528547E-6	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999999989671816	WITHOUT_CLASSIFICATION	1.032818324373826E-9	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.6617345761408856	DEFECT	0.3382654238591144	WITHOUT_CLASSIFICATION
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9999985120838278	WITHOUT_CLASSIFICATION	1.4879161721637492E-6	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9998611813410122	WITHOUT_CLASSIFICATION	1.388186589877779E-4	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999997555403749	WITHOUT_CLASSIFICATION	2.4445962509960697E-7	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999991193138462	WITHOUT_CLASSIFICATION	8.806861538429858E-7	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999987631845162	WITHOUT_CLASSIFICATION	1.2368154838801404E-6	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999998443901564	WITHOUT_CLASSIFICATION	1.5560984348647883E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999730388793	WITHOUT_CLASSIFICATION	2.696112063965282E-8	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.99998096136221	WITHOUT_CLASSIFICATION	1.9038637790047886E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999893869581905	WITHOUT_CLASSIFICATION	1.0613041809572165E-5	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999998115212494	WITHOUT_CLASSIFICATION	1.8847875051539808E-7	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999767161303	WITHOUT_CLASSIFICATION	2.3283869824950964E-8	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.999995896108733	WITHOUT_CLASSIFICATION	4.103891267053239E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999991331931016	WITHOUT_CLASSIFICATION	8.668068982548251E-7	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999935406306293	WITHOUT_CLASSIFICATION	6.459369370797785E-6	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9999999938907138	WITHOUT_CLASSIFICATION	6.1092862221795574E-9	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.999862204594547	WITHOUT_CLASSIFICATION	1.3779540545296728E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999993116652868	WITHOUT_CLASSIFICATION	6.883347131578523E-7	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999993116652868	WITHOUT_CLASSIFICATION	6.883347131578523E-7	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999996888993716	WITHOUT_CLASSIFICATION	3.1110062830744027E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999967393751	WITHOUT_CLASSIFICATION	3.260624939630806E-9	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999995331483605	WITHOUT_CLASSIFICATION	4.668516394878034E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502207683	WITHOUT_CLASSIFICATION	5.549779231667723E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999862506223438	WITHOUT_CLASSIFICATION	1.374937765619009E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999862506223438	WITHOUT_CLASSIFICATION	1.374937765619009E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999862506223438	WITHOUT_CLASSIFICATION	1.374937765619009E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999999332385862	WITHOUT_CLASSIFICATION	6.676141379348097E-8	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999528824723802	WITHOUT_CLASSIFICATION	4.7117527619756414E-5	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.999999889652921	WITHOUT_CLASSIFICATION	1.1034707896366051E-7	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.999996833368529	WITHOUT_CLASSIFICATION	3.166631470974362E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999977503286522	WITHOUT_CLASSIFICATION	2.249671347779211E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999999934810974	WITHOUT_CLASSIFICATION	6.5189026035458155E-9	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9999557099980818	WITHOUT_CLASSIFICATION	4.429000191819318E-5	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999995463726322	WITHOUT_CLASSIFICATION	4.536273677308036E-7	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999990452393532	WITHOUT_CLASSIFICATION	9.547606467735161E-7	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999998810933303	WITHOUT_CLASSIFICATION	1.1890666977339737E-7	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999994534106348	WITHOUT_CLASSIFICATION	5.465893651086566E-7	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999996273052053	WITHOUT_CLASSIFICATION	3.7269479459838707E-7	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9703720926518453	WITHOUT_CLASSIFICATION	0.02962790734815458	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9999069919392156	WITHOUT_CLASSIFICATION	9.300806078436464E-5	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999999999281403	WITHOUT_CLASSIFICATION	7.185974723562377E-11	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999998026022958	WITHOUT_CLASSIFICATION	1.9739770422115174E-7	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999991138944305	WITHOUT_CLASSIFICATION	8.861055694811615E-7	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999973108191477	WITHOUT_CLASSIFICATION	2.6891808523487307E-6	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999987343908145	WITHOUT_CLASSIFICATION	1.2656091855018924E-6	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9060756981711876	DEFECT	0.09392430182881248	WITHOUT_CLASSIFICATION
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9982334584422433	DEFECT	0.0017665415577566214	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9865057296555501	WITHOUT_CLASSIFICATION	0.01349427034444994	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.7931436873437014	DEFECT	0.2068563126562985	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9993007243371174	DEFECT	6.99275662882669E-4	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9028220870917254	WITHOUT_CLASSIFICATION	0.0971779129082747	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.6590520077681015	WITHOUT_CLASSIFICATION	0.34094799223189853	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.913107405825202	WITHOUT_CLASSIFICATION	0.086892594174798	DEFECT
// FIXME: not correct exception	DEFECT	0.9987978625613405	DEFECT	0.0012021374386594855	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9992131565679048	WITHOUT_CLASSIFICATION	7.868434320952331E-4	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9999094504124446	WITHOUT_CLASSIFICATION	9.054958755539188E-5	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.911300790003181	WITHOUT_CLASSIFICATION	0.088699209996819	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9992200915625546	WITHOUT_CLASSIFICATION	7.799084374452898E-4	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.8970202062317786	DEFECT	0.10297979376822147	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.858812395951123	WITHOUT_CLASSIFICATION	0.14118760404887695	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9444577294068747	WITHOUT_CLASSIFICATION	0.05554227059312536	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9444577294068747	WITHOUT_CLASSIFICATION	0.05554227059312536	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9971852567552826	WITHOUT_CLASSIFICATION	0.002814743244717353	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9896461870608638	WITHOUT_CLASSIFICATION	0.010353812939136267	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.7204066598308312	WITHOUT_CLASSIFICATION	0.2795933401691688	DEFECT
// ENEBO: Very wrong	DEFECT	0.9995481283692225	WITHOUT_CLASSIFICATION	4.518716307774576E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9995481283692225	WITHOUT_CLASSIFICATION	4.518716307774576E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.9714024123294255	DEFECT	0.02859758767057443	WITHOUT_CLASSIFICATION
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9822723784132039	DEFECT	0.017727621586796027	WITHOUT_CLASSIFICATION
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.8284103587229049	WITHOUT_CLASSIFICATION	0.17158964127709497	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.6566932001243663	WITHOUT_CLASSIFICATION	0.34330679987563384	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.6038806780393369	DEFECT	0.3961193219606632	WITHOUT_CLASSIFICATION
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.7449886923893532	DEFECT	0.25501130761064683	WITHOUT_CLASSIFICATION
// TODO: proper sign	DEFECT	0.9987454471675895	WITHOUT_CLASSIFICATION	0.0012545528324104873	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.9993704334608103	DEFECT	6.295665391897584E-4	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.5222499580109145	WITHOUT_CLASSIFICATION	0.47775004198908544	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.9629453071233876	DEFECT	0.0370546928766124	WITHOUT_CLASSIFICATION
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.9515730942301834	DEFECT	0.04842690576981663	WITHOUT_CLASSIFICATION
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9809301431484932	DEFECT	0.019069856851506754	WITHOUT_CLASSIFICATION
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.8713024235971082	WITHOUT_CLASSIFICATION	0.12869757640289176	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.8042540986465689	DEFECT	0.19574590135343106	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.6566324541215662	WITHOUT_CLASSIFICATION	0.3433675458784337	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.982182267327522	WITHOUT_CLASSIFICATION	0.01781773267247804	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.5747894521981243	DEFECT	0.42521054780187567	WITHOUT_CLASSIFICATION
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9992083685696537	DEFECT	7.916314303462884E-4	WITHOUT_CLASSIFICATION
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9982077876779137	WITHOUT_CLASSIFICATION	0.0017922123220863201	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9999929152558539	WITHOUT_CLASSIFICATION	7.084744146139172E-6	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.6376897696871358	WITHOUT_CLASSIFICATION	0.36231023031286413	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.6376897696871358	WITHOUT_CLASSIFICATION	0.36231023031286413	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.6965467959164343	WITHOUT_CLASSIFICATION	0.30345320408356574	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9981198693581405	WITHOUT_CLASSIFICATION	0.0018801306418596384	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9999869432333807	DEFECT	1.3056766619368659E-5	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9952115815751609	WITHOUT_CLASSIFICATION	0.00478841842483908	DEFECT
// FIXME: This is wrong	DEFECT	0.9299636944641971	DEFECT	0.07003630553580281	WITHOUT_CLASSIFICATION
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.5308298521271716	DEFECT	0.4691701478728284	WITHOUT_CLASSIFICATION
// XXX Wrong, but will have to do for now	DEFECT	0.9999499625587567	WITHOUT_CLASSIFICATION	5.003744124342309E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.7069986779482823	DEFECT	0.2930013220517177	WITHOUT_CLASSIFICATION
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9865293677904384	WITHOUT_CLASSIFICATION	0.013470632209561535	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9999546110305104	WITHOUT_CLASSIFICATION	4.5388969489612756E-5	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9998273035198668	DEFECT	1.7269648013318255E-4	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9635784946512704	WITHOUT_CLASSIFICATION	0.03642150534872953	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9635784946512704	WITHOUT_CLASSIFICATION	0.03642150534872953	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.999435718174502	DEFECT	5.642818254979272E-4	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8849277924107726	DEFECT	0.11507220758922747	WITHOUT_CLASSIFICATION
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9979077696239995	DEFECT	0.002092230376000537	WITHOUT_CLASSIFICATION
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9997416610759279	WITHOUT_CLASSIFICATION	2.5833892407214936E-4	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9964879138351093	DEFECT	0.0035120861648906296	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9992112794627939	DEFECT	7.887205372060068E-4	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.999800032523351	WITHOUT_CLASSIFICATION	1.99967476648938E-4	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9970925961054498	DEFECT	0.0029074038945502384	WITHOUT_CLASSIFICATION
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.6965467959164343	WITHOUT_CLASSIFICATION	0.30345320408356574	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.999937191526824	WITHOUT_CLASSIFICATION	6.280847317598102E-5	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9090009787803519	DEFECT	0.0909990212196482	WITHOUT_CLASSIFICATION
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9990379800071747	WITHOUT_CLASSIFICATION	9.620199928251824E-4	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.6566932001243663	WITHOUT_CLASSIFICATION	0.34330679987563384	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9155313187408838	WITHOUT_CLASSIFICATION	0.08446868125911627	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.865807907726676	DEFECT	0.1341920922733239	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.982182267327522	WITHOUT_CLASSIFICATION	0.01781773267247804	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9956142897057727	WITHOUT_CLASSIFICATION	0.004385710294227255	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9998273035198668	DEFECT	1.7269648013318255E-4	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.9985632453162937	DEFECT	0.0014367546837062634	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// TODO: don't require pop	DEFECT	0.7085550911830837	WITHOUT_CLASSIFICATION	0.2914449088169163	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.7069986779482823	DEFECT	0.2930013220517177	WITHOUT_CLASSIFICATION
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9975010739256599	WITHOUT_CLASSIFICATION	0.0024989260743401055	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9635784946512704	WITHOUT_CLASSIFICATION	0.03642150534872953	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9635784946512704	WITHOUT_CLASSIFICATION	0.03642150534872953	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8849277924107726	DEFECT	0.11507220758922747	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8849277924107726	DEFECT	0.11507220758922747	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8849277924107726	DEFECT	0.11507220758922747	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8849277924107726	DEFECT	0.11507220758922747	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8849277924107726	DEFECT	0.11507220758922747	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8849277924107726	DEFECT	0.11507220758922747	WITHOUT_CLASSIFICATION
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9990716990957739	WITHOUT_CLASSIFICATION	9.283009042260278E-4	DEFECT
