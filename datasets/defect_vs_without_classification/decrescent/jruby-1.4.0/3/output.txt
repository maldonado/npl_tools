// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999999959807753	WITHOUT_CLASSIFICATION	4.0192247896042455E-9	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999829234049149	WITHOUT_CLASSIFICATION	1.707659508513136E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997595761282403	WITHOUT_CLASSIFICATION	2.404238717597076E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997595761282403	WITHOUT_CLASSIFICATION	2.404238717597076E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999509152510665	WITHOUT_CLASSIFICATION	4.908474893350221E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999509152510665	WITHOUT_CLASSIFICATION	4.908474893350221E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998266794945326	WITHOUT_CLASSIFICATION	1.7332050546743635E-4	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999969202901992	WITHOUT_CLASSIFICATION	3.0797098008262204E-6	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999781154680928	WITHOUT_CLASSIFICATION	2.1884531907194216E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999764718111254	WITHOUT_CLASSIFICATION	2.3528188874595447E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9997136948833817	WITHOUT_CLASSIFICATION	2.8630511661829054E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9997136948833817	WITHOUT_CLASSIFICATION	2.8630511661829054E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999899119713823	WITHOUT_CLASSIFICATION	1.0088028617617931E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9995722579938424	WITHOUT_CLASSIFICATION	4.277420061575096E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9995722579938424	WITHOUT_CLASSIFICATION	4.277420061575096E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9998903914774432	WITHOUT_CLASSIFICATION	1.096085225569298E-4	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999182258900166	WITHOUT_CLASSIFICATION	8.177410998352964E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999056170180097	WITHOUT_CLASSIFICATION	9.438298199028116E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999056170180097	WITHOUT_CLASSIFICATION	9.438298199028116E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999056170180097	WITHOUT_CLASSIFICATION	9.438298199028116E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999056170180097	WITHOUT_CLASSIFICATION	9.438298199028116E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999056170180097	WITHOUT_CLASSIFICATION	9.438298199028116E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999056170180097	WITHOUT_CLASSIFICATION	9.438298199028116E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999056170180097	WITHOUT_CLASSIFICATION	9.438298199028116E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999741562811759	WITHOUT_CLASSIFICATION	2.5843718824098172E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999741562811759	WITHOUT_CLASSIFICATION	2.5843718824098172E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999741562811759	WITHOUT_CLASSIFICATION	2.5843718824098172E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999741562811759	WITHOUT_CLASSIFICATION	2.5843718824098172E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999741562811759	WITHOUT_CLASSIFICATION	2.5843718824098172E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999741562811759	WITHOUT_CLASSIFICATION	2.5843718824098172E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999741562811759	WITHOUT_CLASSIFICATION	2.5843718824098172E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999206355341684	WITHOUT_CLASSIFICATION	7.936446583167602E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999206355341684	WITHOUT_CLASSIFICATION	7.936446583167602E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999206355341684	WITHOUT_CLASSIFICATION	7.936446583167602E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999206355341684	WITHOUT_CLASSIFICATION	7.936446583167602E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999206355341684	WITHOUT_CLASSIFICATION	7.936446583167602E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999206355341684	WITHOUT_CLASSIFICATION	7.936446583167602E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998492399307184	WITHOUT_CLASSIFICATION	1.5076006928168222E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998492399307184	WITHOUT_CLASSIFICATION	1.5076006928168222E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998492399307184	WITHOUT_CLASSIFICATION	1.5076006928168222E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998492399307184	WITHOUT_CLASSIFICATION	1.5076006928168222E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998492399307184	WITHOUT_CLASSIFICATION	1.5076006928168222E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998492399307184	WITHOUT_CLASSIFICATION	1.5076006928168222E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9997747482308426	WITHOUT_CLASSIFICATION	2.2525176915748856E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9997747482308426	WITHOUT_CLASSIFICATION	2.2525176915748856E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9997747482308426	WITHOUT_CLASSIFICATION	2.2525176915748856E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9997747482308426	WITHOUT_CLASSIFICATION	2.2525176915748856E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9997747482308426	WITHOUT_CLASSIFICATION	2.2525176915748856E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9997747482308426	WITHOUT_CLASSIFICATION	2.2525176915748856E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9997747482308426	WITHOUT_CLASSIFICATION	2.2525176915748856E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998720932780087	WITHOUT_CLASSIFICATION	1.279067219911707E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998720932780087	WITHOUT_CLASSIFICATION	1.279067219911707E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998720932780087	WITHOUT_CLASSIFICATION	1.279067219911707E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998720932780087	WITHOUT_CLASSIFICATION	1.279067219911707E-4	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999808775844271	WITHOUT_CLASSIFICATION	1.9122415572787748E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999808775844271	WITHOUT_CLASSIFICATION	1.9122415572787748E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999944721358811	WITHOUT_CLASSIFICATION	5.527864118940944E-6	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999995067433182	WITHOUT_CLASSIFICATION	4.932566818924351E-7	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999965114275621	WITHOUT_CLASSIFICATION	3.488572437969849E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999998747706499	WITHOUT_CLASSIFICATION	1.2522935015602256E-7	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999995211507283	WITHOUT_CLASSIFICATION	4.788492716731347E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999869022392485	WITHOUT_CLASSIFICATION	1.3097760751534498E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999869022392485	WITHOUT_CLASSIFICATION	1.3097760751534498E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999869022392485	WITHOUT_CLASSIFICATION	1.3097760751534498E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999869022392485	WITHOUT_CLASSIFICATION	1.3097760751534498E-5	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9997872887109894	WITHOUT_CLASSIFICATION	2.1271128901057822E-4	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9998385682176898	WITHOUT_CLASSIFICATION	1.6143178231028374E-4	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999979380517459	WITHOUT_CLASSIFICATION	2.0619482540954814E-6	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999987918051729	WITHOUT_CLASSIFICATION	1.2081948271190565E-6	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.999999651698055	WITHOUT_CLASSIFICATION	3.4830194492404627E-7	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999864771521352	WITHOUT_CLASSIFICATION	1.352284786474719E-5	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999815469304226	WITHOUT_CLASSIFICATION	1.8453069577300597E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999998659762005	WITHOUT_CLASSIFICATION	1.340237995394851E-7	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.999998813414686	WITHOUT_CLASSIFICATION	1.186585313963455E-6	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9998795798403782	WITHOUT_CLASSIFICATION	1.204201596218115E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999979724867162	WITHOUT_CLASSIFICATION	2.027513283711573E-6	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999773781578216	WITHOUT_CLASSIFICATION	2.2621842178497342E-5	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999333328342964	WITHOUT_CLASSIFICATION	6.666716570351278E-5	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999999152044184	WITHOUT_CLASSIFICATION	8.479558148536819E-8	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999937518936224	WITHOUT_CLASSIFICATION	6.248106377668524E-6	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999627497136515	WITHOUT_CLASSIFICATION	3.7250286348489114E-5	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999030114259659	WITHOUT_CLASSIFICATION	9.698857403407213E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999869022392485	WITHOUT_CLASSIFICATION	1.3097760751534498E-5	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999936071578214	WITHOUT_CLASSIFICATION	6.392842178645147E-6	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999998558426004	WITHOUT_CLASSIFICATION	1.4415739967496257E-7	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999892452820265	WITHOUT_CLASSIFICATION	1.0754717973487948E-5	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999939170599755	WITHOUT_CLASSIFICATION	6.082940024466169E-6	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.999925460744489	WITHOUT_CLASSIFICATION	7.453925551109705E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999759701019831	WITHOUT_CLASSIFICATION	2.4029898016826834E-5	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999995432279	WITHOUT_CLASSIFICATION	4.5677210007530946E-7	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999999466577573	WITHOUT_CLASSIFICATION	5.334224261232874E-8	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999999714188824	WITHOUT_CLASSIFICATION	2.8581117492375624E-8	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9998862182368503	WITHOUT_CLASSIFICATION	1.1378176314974322E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9989594167507827	WITHOUT_CLASSIFICATION	0.0010405832492172602	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999940183701879	WITHOUT_CLASSIFICATION	5.981629812068917E-6	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999920190169553	WITHOUT_CLASSIFICATION	7.980983044647968E-6	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999999397922278	WITHOUT_CLASSIFICATION	6.020777218862684E-8	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999970617316059	WITHOUT_CLASSIFICATION	2.9382683942167394E-6	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.999986053099337	WITHOUT_CLASSIFICATION	1.3946900663091044E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999933652957667	WITHOUT_CLASSIFICATION	6.634704233324231E-6	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.999999758035622	WITHOUT_CLASSIFICATION	2.419643780319488E-7	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999729361938998	WITHOUT_CLASSIFICATION	2.7063806100062987E-5	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999993129716706	WITHOUT_CLASSIFICATION	6.870283294653954E-7	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9480476823356444	WITHOUT_CLASSIFICATION	0.05195231766435565	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999936184215784	WITHOUT_CLASSIFICATION	6.381578421553184E-6	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.999998639842198	WITHOUT_CLASSIFICATION	1.3601578019630532E-6	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999919609700464	WITHOUT_CLASSIFICATION	8.039029953643304E-6	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999223023556071	WITHOUT_CLASSIFICATION	7.769764439289915E-5	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9997378966113374	WITHOUT_CLASSIFICATION	2.6210338866263156E-4	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999935938514696	WITHOUT_CLASSIFICATION	6.406148530311904E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999992771550607	WITHOUT_CLASSIFICATION	7.228449393958298E-7	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999992190604059	WITHOUT_CLASSIFICATION	7.809395940279888E-7	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999964544693314	WITHOUT_CLASSIFICATION	3.545530668632604E-6	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999523483137057	WITHOUT_CLASSIFICATION	4.765168629425719E-5	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9999942043822856	WITHOUT_CLASSIFICATION	5.7956177145093E-6	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.999999255178741	WITHOUT_CLASSIFICATION	7.448212590411146E-7	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999732620151248	WITHOUT_CLASSIFICATION	2.6737984875230308E-5	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9984309163326736	WITHOUT_CLASSIFICATION	0.0015690836673264024	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999995120073821	WITHOUT_CLASSIFICATION	4.879926178137578E-7	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999969633024393	WITHOUT_CLASSIFICATION	3.0366975607095884E-6	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999689411601047	WITHOUT_CLASSIFICATION	3.105883989526609E-5	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999990292737959	WITHOUT_CLASSIFICATION	9.707262040470032E-7	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999989137848885	WITHOUT_CLASSIFICATION	1.086215111511542E-6	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999989933030501	WITHOUT_CLASSIFICATION	1.006696949948011E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999988229178544	WITHOUT_CLASSIFICATION	1.1770821455702527E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9932311085902172	WITHOUT_CLASSIFICATION	0.006768891409782805	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999993287005826	WITHOUT_CLASSIFICATION	6.712994173749922E-7	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999993287005826	WITHOUT_CLASSIFICATION	6.712994173749922E-7	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.999999922232645	WITHOUT_CLASSIFICATION	7.776735493926196E-8	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999992611112979	WITHOUT_CLASSIFICATION	7.388887021407787E-7	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999844124915976	WITHOUT_CLASSIFICATION	1.5587508402383288E-5	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9999568876022576	WITHOUT_CLASSIFICATION	4.311239774245998E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9998965165348433	WITHOUT_CLASSIFICATION	1.0348346515668811E-4	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9998320337965818	WITHOUT_CLASSIFICATION	1.6796620341817374E-4	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9999510143107908	WITHOUT_CLASSIFICATION	4.898568920923363E-5	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999687167773335	WITHOUT_CLASSIFICATION	3.128322266651749E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999988229178544	WITHOUT_CLASSIFICATION	1.1770821455702527E-6	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999994054339255	WITHOUT_CLASSIFICATION	5.945660744604884E-7	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999757159840005	WITHOUT_CLASSIFICATION	2.4284015999464316E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999991626903907	WITHOUT_CLASSIFICATION	8.373096094328906E-7	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999999985396547	WITHOUT_CLASSIFICATION	1.4603452402092514E-9	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999999904250054	WITHOUT_CLASSIFICATION	9.57499447515763E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999772343616	WITHOUT_CLASSIFICATION	2.2765638382272938E-8	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999772343616	WITHOUT_CLASSIFICATION	2.2765638382272938E-8	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999772343616	WITHOUT_CLASSIFICATION	2.2765638382272938E-8	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999967602209556	WITHOUT_CLASSIFICATION	3.2397790443188606E-6	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999999557985669	WITHOUT_CLASSIFICATION	4.4201433089071783E-8	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999997008576673	WITHOUT_CLASSIFICATION	2.9914233267005384E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9512448318697445	WITHOUT_CLASSIFICATION	0.04875516813025538	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9991643974266747	WITHOUT_CLASSIFICATION	8.356025733252047E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999998159606613	WITHOUT_CLASSIFICATION	1.8403933870228521E-7	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9990509842886183	WITHOUT_CLASSIFICATION	9.490157113817754E-4	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999993859290014	WITHOUT_CLASSIFICATION	6.140709985153682E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999979791779289	WITHOUT_CLASSIFICATION	2.0208220711105025E-6	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999979791779289	WITHOUT_CLASSIFICATION	2.0208220711105025E-6	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999973821675227	WITHOUT_CLASSIFICATION	2.6178324772961457E-6	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999868840869	WITHOUT_CLASSIFICATION	1.3115913260989415E-8	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999972370660479	WITHOUT_CLASSIFICATION	2.7629339520329294E-6	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999972370660479	WITHOUT_CLASSIFICATION	2.7629339520329294E-6	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999969248005822	WITHOUT_CLASSIFICATION	3.075199417766309E-6	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999998933588571	WITHOUT_CLASSIFICATION	1.0664114281395268E-7	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999872508077846	WITHOUT_CLASSIFICATION	1.2749192215341274E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999953834944489	WITHOUT_CLASSIFICATION	4.616505551077644E-6	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999881994519476	WITHOUT_CLASSIFICATION	1.1800548052434383E-5	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999973442620912	WITHOUT_CLASSIFICATION	2.655737908914376E-6	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999914742168563	WITHOUT_CLASSIFICATION	8.525783143709249E-6	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999646497429396	WITHOUT_CLASSIFICATION	3.535025706028155E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999998022215009	WITHOUT_CLASSIFICATION	1.9777849910438852E-7	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999978469803518	WITHOUT_CLASSIFICATION	2.153019648204133E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999988229178544	WITHOUT_CLASSIFICATION	1.1770821455702527E-6	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999963052176501	WITHOUT_CLASSIFICATION	3.694782349851637E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999997996678796	WITHOUT_CLASSIFICATION	2.0033212035616826E-7	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.999996681635872	WITHOUT_CLASSIFICATION	3.3183641280855823E-6	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9446218989472063	WITHOUT_CLASSIFICATION	0.055378101052793706	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999850701551841	WITHOUT_CLASSIFICATION	1.4929844815858726E-5	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999177212645476	WITHOUT_CLASSIFICATION	8.227873545238576E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9998925008588293	WITHOUT_CLASSIFICATION	1.074991411706797E-4	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9997880416761848	WITHOUT_CLASSIFICATION	2.1195832381518267E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999997418886766	WITHOUT_CLASSIFICATION	2.581113233788825E-7	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9995761612095994	WITHOUT_CLASSIFICATION	4.2383879040070913E-4	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9999978730765591	WITHOUT_CLASSIFICATION	2.1269234408094685E-6	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999993610726398	WITHOUT_CLASSIFICATION	6.38927360170915E-7	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9999967342644814	WITHOUT_CLASSIFICATION	3.265735518513797E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999988898347507	WITHOUT_CLASSIFICATION	1.110165249359376E-6	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9999922420879478	WITHOUT_CLASSIFICATION	7.757912052135591E-6	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.999993793342317	WITHOUT_CLASSIFICATION	6.206657682951403E-6	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999999426765123	WITHOUT_CLASSIFICATION	5.7323487652726054E-8	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999999712723444	WITHOUT_CLASSIFICATION	2.87276555584407E-8	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999972802401	WITHOUT_CLASSIFICATION	2.719759899965411E-6	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999999852812768	WITHOUT_CLASSIFICATION	1.4718723176410826E-8	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999961314849182	WITHOUT_CLASSIFICATION	3.86851508178375E-6	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.999999329112507	WITHOUT_CLASSIFICATION	6.7088749300005E-7	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999998137939878	WITHOUT_CLASSIFICATION	1.86206012046181E-7	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.999998525324825	WITHOUT_CLASSIFICATION	1.4746751749365353E-6	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999971301874304	WITHOUT_CLASSIFICATION	2.8698125696030292E-6	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999939647317784	WITHOUT_CLASSIFICATION	6.0352682215851535E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.999988030281272	WITHOUT_CLASSIFICATION	1.196971872790251E-5	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999991681216799	WITHOUT_CLASSIFICATION	8.318783201593129E-7	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999980765806353	WITHOUT_CLASSIFICATION	1.9234193645389137E-6	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999996145846937	WITHOUT_CLASSIFICATION	3.8541530640652355E-7	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.999997164743219	WITHOUT_CLASSIFICATION	2.835256781057108E-6	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999997240768561	WITHOUT_CLASSIFICATION	2.7592314390354166E-7	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999954991879197	WITHOUT_CLASSIFICATION	4.500812080233396E-6	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.999952449312288	WITHOUT_CLASSIFICATION	4.7550687711938256E-5	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999991798828807	WITHOUT_CLASSIFICATION	8.201171194064654E-7	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999892081941294	WITHOUT_CLASSIFICATION	1.079180587070647E-5	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999994265500182	WITHOUT_CLASSIFICATION	5.734499818448245E-7	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9997924993723435	WITHOUT_CLASSIFICATION	2.0750062765639035E-4	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999999540000654	WITHOUT_CLASSIFICATION	4.599993459164148E-8	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999963260022208	WITHOUT_CLASSIFICATION	3.673997779194585E-6	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999998421899816	WITHOUT_CLASSIFICATION	1.5781001835942064E-7	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999998833404007	WITHOUT_CLASSIFICATION	1.1665959929588882E-7	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999999672489055	WITHOUT_CLASSIFICATION	3.275109451921033E-8	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.999999657099898	WITHOUT_CLASSIFICATION	3.429001020581758E-7	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999609871130426	WITHOUT_CLASSIFICATION	3.901288695727995E-5	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999984491732371	WITHOUT_CLASSIFICATION	1.5508267628764772E-6	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999987536642124	WITHOUT_CLASSIFICATION	1.2463357876503171E-6	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.999995807418941	WITHOUT_CLASSIFICATION	4.192581059051065E-6	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999957869747882	WITHOUT_CLASSIFICATION	4.2130252117647685E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999986253397973	WITHOUT_CLASSIFICATION	1.3746602027342137E-6	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999927578292351	WITHOUT_CLASSIFICATION	7.24217076492459E-6	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.999983318206072	WITHOUT_CLASSIFICATION	1.6681793927991575E-5	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999856194908754	WITHOUT_CLASSIFICATION	1.4380509124715295E-5	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999992402454116	WITHOUT_CLASSIFICATION	7.597545882790231E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999904150649297	WITHOUT_CLASSIFICATION	9.584935070333636E-6	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9997631542115398	WITHOUT_CLASSIFICATION	2.3684578846018328E-4	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9999954799674591	WITHOUT_CLASSIFICATION	4.520032540902082E-6	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999594126914801	WITHOUT_CLASSIFICATION	4.058730851975181E-5	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999999180607076	WITHOUT_CLASSIFICATION	8.193929240642232E-8	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999999239631552	WITHOUT_CLASSIFICATION	7.603684485425916E-8	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999863486630237	WITHOUT_CLASSIFICATION	1.365133697626369E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999863486630237	WITHOUT_CLASSIFICATION	1.365133697626369E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999962832548247	WITHOUT_CLASSIFICATION	3.7167451753172282E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999962832548247	WITHOUT_CLASSIFICATION	3.7167451753172282E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999805681863558	WITHOUT_CLASSIFICATION	1.9431813644154212E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999805681863558	WITHOUT_CLASSIFICATION	1.9431813644154212E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999728429721157	WITHOUT_CLASSIFICATION	2.7157027884282764E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999728429721157	WITHOUT_CLASSIFICATION	2.7157027884282764E-5	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999982439744362	WITHOUT_CLASSIFICATION	1.7560255638292504E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999996178728034	WITHOUT_CLASSIFICATION	3.821271966494972E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.999997970984294	WITHOUT_CLASSIFICATION	2.0290157059870272E-6	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999583244714997	WITHOUT_CLASSIFICATION	4.167552850028474E-5	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.999953090886416	WITHOUT_CLASSIFICATION	4.690911358390742E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9998803763125287	WITHOUT_CLASSIFICATION	1.1962368747126601E-4	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999908776971251	WITHOUT_CLASSIFICATION	9.122302874954597E-6	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999997715180031	WITHOUT_CLASSIFICATION	2.2848199674939205E-7	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999998605050417	WITHOUT_CLASSIFICATION	1.3949495824127368E-7	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999996310802186	WITHOUT_CLASSIFICATION	3.6891978135783065E-7	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.999999959933266	WITHOUT_CLASSIFICATION	4.006673410017598E-8	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999998666142835	WITHOUT_CLASSIFICATION	1.3338571634789316E-7	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999995372757946	WITHOUT_CLASSIFICATION	4.6272420528117826E-7	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999999738973712	WITHOUT_CLASSIFICATION	2.610262879224057E-8	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999958812540242	WITHOUT_CLASSIFICATION	4.118745975859103E-6	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999975824505631	WITHOUT_CLASSIFICATION	2.41754943694894E-6	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999993031019699	WITHOUT_CLASSIFICATION	6.96898030112349E-7	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999990137141609	WITHOUT_CLASSIFICATION	9.862858391266193E-7	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999299097106379	WITHOUT_CLASSIFICATION	7.009028936207243E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9928990767476196	WITHOUT_CLASSIFICATION	0.007100923252380365	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.999999044617148	WITHOUT_CLASSIFICATION	9.55382852012872E-7	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999997596163928	WITHOUT_CLASSIFICATION	2.403836072808208E-7	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999992709683697	WITHOUT_CLASSIFICATION	7.290316302721616E-7	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999956849442104	WITHOUT_CLASSIFICATION	4.315055789562797E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999971997535025	WITHOUT_CLASSIFICATION	2.800246497340925E-6	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999992032771174	WITHOUT_CLASSIFICATION	7.967228826211654E-7	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999937502990652	WITHOUT_CLASSIFICATION	6.2497009347870315E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999989953069429	WITHOUT_CLASSIFICATION	1.0046930570796344E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999989953069429	WITHOUT_CLASSIFICATION	1.0046930570796344E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999999678936755	WITHOUT_CLASSIFICATION	3.210632453485121E-8	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999987562119582	WITHOUT_CLASSIFICATION	1.2437880416882149E-6	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999967518327612	WITHOUT_CLASSIFICATION	3.2481672389378497E-6	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9999512616946278	WITHOUT_CLASSIFICATION	4.8738305372258506E-5	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999972929300184	WITHOUT_CLASSIFICATION	2.70706998160174E-6	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999983449584635	WITHOUT_CLASSIFICATION	1.6550415364819464E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999837550071825	WITHOUT_CLASSIFICATION	1.6244992817477992E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999837550071825	WITHOUT_CLASSIFICATION	1.6244992817477992E-5	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.999999762168647	WITHOUT_CLASSIFICATION	2.37831353025828E-7	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9990564225680376	WITHOUT_CLASSIFICATION	9.435774319624527E-4	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999975121439262	WITHOUT_CLASSIFICATION	2.48785607384599E-6	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999975121439262	WITHOUT_CLASSIFICATION	2.48785607384599E-6	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9998804213010809	WITHOUT_CLASSIFICATION	1.1957869891903529E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9995933306155343	WITHOUT_CLASSIFICATION	4.066693844656715E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9995933306155343	WITHOUT_CLASSIFICATION	4.066693844656715E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999977137303319	WITHOUT_CLASSIFICATION	2.2862696680763127E-6	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999977137303319	WITHOUT_CLASSIFICATION	2.2862696680763127E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999730124157353	WITHOUT_CLASSIFICATION	2.698758426470227E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999730124157353	WITHOUT_CLASSIFICATION	2.698758426470227E-5	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9999786806162498	WITHOUT_CLASSIFICATION	2.1319383750247742E-5	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999988478832478	WITHOUT_CLASSIFICATION	1.1521167521405805E-6	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999998302214078	WITHOUT_CLASSIFICATION	1.6977859228468518E-7	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999981778710167	WITHOUT_CLASSIFICATION	1.8221289832343769E-6	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999998743883325	WITHOUT_CLASSIFICATION	1.256116674913272E-7	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999990087280223	WITHOUT_CLASSIFICATION	9.912719776785793E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999987016361178	WITHOUT_CLASSIFICATION	1.2983638822027115E-6	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999857765083824	WITHOUT_CLASSIFICATION	1.4223491617663388E-5	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999987016361178	WITHOUT_CLASSIFICATION	1.2983638822027115E-6	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9999962012144467	WITHOUT_CLASSIFICATION	3.798785553395041E-6	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999969388686217	WITHOUT_CLASSIFICATION	3.061131378266521E-6	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999999290043955	WITHOUT_CLASSIFICATION	7.099560450634122E-8	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999960766368067	WITHOUT_CLASSIFICATION	3.923363193276893E-6	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999999072981041	WITHOUT_CLASSIFICATION	9.270189593570714E-8	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.999907528574175	WITHOUT_CLASSIFICATION	9.247142582494122E-5	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999856021853473	WITHOUT_CLASSIFICATION	1.4397814652650253E-5	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999986251629901	WITHOUT_CLASSIFICATION	1.3748370098980326E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999670694697725	WITHOUT_CLASSIFICATION	3.2930530227409964E-5	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999986001098611	WITHOUT_CLASSIFICATION	1.399890138913045E-6	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999993315897251	WITHOUT_CLASSIFICATION	6.684102748884457E-7	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999988555594431	WITHOUT_CLASSIFICATION	1.144440556852385E-6	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999856371421302	WITHOUT_CLASSIFICATION	1.436285786973754E-5	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999996639576717	WITHOUT_CLASSIFICATION	3.360423283426254E-7	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999940278671118	WITHOUT_CLASSIFICATION	5.972132888141066E-6	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999998896995108	WITHOUT_CLASSIFICATION	1.103004892452956E-7	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999719994739829	WITHOUT_CLASSIFICATION	2.8000526017160825E-5	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999992083351517	WITHOUT_CLASSIFICATION	7.916648482222541E-7	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.999997596028377	WITHOUT_CLASSIFICATION	2.4039716230423913E-6	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999984638183814	WITHOUT_CLASSIFICATION	1.5361816185671815E-6	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9998935906447398	WITHOUT_CLASSIFICATION	1.0640935526018136E-4	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999996241172526	WITHOUT_CLASSIFICATION	3.7588274746593193E-7	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999943306912272	WITHOUT_CLASSIFICATION	5.669308772879342E-6	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.999973202003712	WITHOUT_CLASSIFICATION	2.679799628805493E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.999999666052503	WITHOUT_CLASSIFICATION	3.339474970462821E-7	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999998821918632	WITHOUT_CLASSIFICATION	1.1780813680831898E-7	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999999804095281	WITHOUT_CLASSIFICATION	1.9590471856807496E-8	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999999889067035	WITHOUT_CLASSIFICATION	1.1093296603841505E-8	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999976930121964	WITHOUT_CLASSIFICATION	2.306987803546521E-6	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.999998915415043	WITHOUT_CLASSIFICATION	1.0845849569544293E-6	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999986653742912	WITHOUT_CLASSIFICATION	1.3346257087920287E-6	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999991639539876	WITHOUT_CLASSIFICATION	8.360460123422358E-7	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999998021497739	WITHOUT_CLASSIFICATION	1.9785022620591102E-7	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999978934259622	WITHOUT_CLASSIFICATION	2.1065740378029547E-6	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999760439006564	WITHOUT_CLASSIFICATION	2.395609934354296E-5	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999960140272957	WITHOUT_CLASSIFICATION	3.985972704320756E-6	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.999998224709264	WITHOUT_CLASSIFICATION	1.7752907359648124E-6	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999956797176188	WITHOUT_CLASSIFICATION	4.320282381157885E-6	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999998891482996	WITHOUT_CLASSIFICATION	1.108517004626898E-7	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999975021248227	WITHOUT_CLASSIFICATION	2.4978751772740045E-6	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999998403436018	WITHOUT_CLASSIFICATION	1.5965639818737372E-7	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999745004772751	WITHOUT_CLASSIFICATION	2.5499522724828748E-5	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999988246652242	WITHOUT_CLASSIFICATION	1.1753347758157442E-6	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.99999864079977	WITHOUT_CLASSIFICATION	1.359200230014381E-6	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999998127172292	WITHOUT_CLASSIFICATION	1.872827709083324E-7	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999992904470688	WITHOUT_CLASSIFICATION	7.095529310856732E-7	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.999999671654527	WITHOUT_CLASSIFICATION	3.2834547300556484E-7	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999990348399124	WITHOUT_CLASSIFICATION	9.651600876427634E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999004840763	WITHOUT_CLASSIFICATION	9.951592368844173E-8	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9999995513943698	WITHOUT_CLASSIFICATION	4.48605630231228E-7	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999928479287427	WITHOUT_CLASSIFICATION	7.152071257283854E-6	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999999962873164	WITHOUT_CLASSIFICATION	3.712683628207045E-9	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.999928228971389	WITHOUT_CLASSIFICATION	7.177102861089179E-5	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999982813808821	WITHOUT_CLASSIFICATION	1.7186191179244631E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999799942145	WITHOUT_CLASSIFICATION	2.000578554213571E-8	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999799942145	WITHOUT_CLASSIFICATION	2.000578554213571E-8	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999962142976778	WITHOUT_CLASSIFICATION	3.7857023222077634E-6	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999921371816893	WITHOUT_CLASSIFICATION	7.862818310690348E-6	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999993532769152	WITHOUT_CLASSIFICATION	6.467230847754468E-7	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999987860799183	WITHOUT_CLASSIFICATION	1.2139200816779798E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9990364650495799	WITHOUT_CLASSIFICATION	9.635349504201423E-4	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999977801871864	WITHOUT_CLASSIFICATION	2.2198128135094705E-6	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9999849419334914	WITHOUT_CLASSIFICATION	1.5058066508554361E-5	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999998915499076	WITHOUT_CLASSIFICATION	1.0845009232551411E-7	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999985276883873	WITHOUT_CLASSIFICATION	1.4723116127034952E-6	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999997472948479	WITHOUT_CLASSIFICATION	2.5270515214401623E-7	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999994200654523	WITHOUT_CLASSIFICATION	5.799345475936711E-7	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999994200654523	WITHOUT_CLASSIFICATION	5.799345475936711E-7	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.999990361891058	WITHOUT_CLASSIFICATION	9.638108941975815E-6	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999970980162444	WITHOUT_CLASSIFICATION	2.9019837556208E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9997823607097523	WITHOUT_CLASSIFICATION	2.1763929024764845E-4	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999979893794388	WITHOUT_CLASSIFICATION	2.0106205610668426E-6	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999975287963586	WITHOUT_CLASSIFICATION	2.4712036413622317E-6	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999999293862244	WITHOUT_CLASSIFICATION	7.061377564712636E-8	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999996846013861	WITHOUT_CLASSIFICATION	3.153986138802776E-7	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999994489804173	WITHOUT_CLASSIFICATION	5.510195826192495E-7	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999995558450251	WITHOUT_CLASSIFICATION	4.4415497490346875E-7	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999997675508849	WITHOUT_CLASSIFICATION	2.3244911516395915E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999991498113154	WITHOUT_CLASSIFICATION	8.501886846164732E-7	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999968964076175	WITHOUT_CLASSIFICATION	3.103592382440692E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999962194986508	WITHOUT_CLASSIFICATION	3.780501349184388E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999962194986508	WITHOUT_CLASSIFICATION	3.780501349184388E-6	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999992357274927	WITHOUT_CLASSIFICATION	7.642725073006994E-7	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999992563388795	WITHOUT_CLASSIFICATION	7.436611204552603E-7	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999984889531497	WITHOUT_CLASSIFICATION	1.5110468503511935E-6	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9999919869894297	WITHOUT_CLASSIFICATION	8.013010570261327E-6	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999949319625611	WITHOUT_CLASSIFICATION	5.068037438989535E-6	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999996893250627	WITHOUT_CLASSIFICATION	3.1067493734804073E-7	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999665121625885	WITHOUT_CLASSIFICATION	3.348783741147463E-5	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999985836279087	WITHOUT_CLASSIFICATION	1.4163720912553802E-6	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9998113233949841	WITHOUT_CLASSIFICATION	1.8867660501592195E-4	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.999999916852174	WITHOUT_CLASSIFICATION	8.314782588137833E-8	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9997823607097523	WITHOUT_CLASSIFICATION	2.1763929024764845E-4	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9999639522374546	WITHOUT_CLASSIFICATION	3.604776254542676E-5	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9999534559712869	WITHOUT_CLASSIFICATION	4.654402871316377E-5	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999999035317053	WITHOUT_CLASSIFICATION	9.646829475615163E-8	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999985392794675	WITHOUT_CLASSIFICATION	1.4607205325711035E-6	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999999843356157	WITHOUT_CLASSIFICATION	1.5664384285372067E-8	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9998797647141358	WITHOUT_CLASSIFICATION	1.20235285864272E-4	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999993793949897	WITHOUT_CLASSIFICATION	6.206050102034809E-7	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999985449128019	WITHOUT_CLASSIFICATION	1.4550871980820618E-6	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999975836188634	WITHOUT_CLASSIFICATION	2.4163811366678665E-6	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999933166243311	WITHOUT_CLASSIFICATION	6.683375668823052E-6	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999949793082388	WITHOUT_CLASSIFICATION	5.020691761178853E-6	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999910703714191	WITHOUT_CLASSIFICATION	8.929628580877751E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999973361275388	WITHOUT_CLASSIFICATION	2.6638724611358056E-6	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9999088773781826	WITHOUT_CLASSIFICATION	9.11226218174838E-5	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999866551006006	WITHOUT_CLASSIFICATION	1.3344899399366138E-5	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999987519642305	WITHOUT_CLASSIFICATION	1.2480357695959144E-6	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999837819840603	WITHOUT_CLASSIFICATION	1.621801593961229E-5	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999995071690245	WITHOUT_CLASSIFICATION	4.928309754858899E-7	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999929730128237	WITHOUT_CLASSIFICATION	7.026987176247251E-6	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999955262875029	WITHOUT_CLASSIFICATION	4.47371249706568E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9998924238244509	WITHOUT_CLASSIFICATION	1.0757617554914312E-4	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999995192418534	WITHOUT_CLASSIFICATION	4.807581466506787E-7	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999939253286518	WITHOUT_CLASSIFICATION	6.074671348165443E-6	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9997140420533013	WITHOUT_CLASSIFICATION	2.8595794669873214E-4	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.999997595341819	WITHOUT_CLASSIFICATION	2.4046581809742797E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999999971518827	WITHOUT_CLASSIFICATION	2.848117307784461E-9	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.999946652434013	WITHOUT_CLASSIFICATION	5.334756598699234E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999736643041006	WITHOUT_CLASSIFICATION	2.6335695899335388E-5	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999988871045713	WITHOUT_CLASSIFICATION	1.1128954287365853E-6	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.99964194222698	WITHOUT_CLASSIFICATION	3.580577730200271E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999257777474873	WITHOUT_CLASSIFICATION	7.422225251277849E-5	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999257777474873	WITHOUT_CLASSIFICATION	7.422225251277849E-5	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999968674327967	WITHOUT_CLASSIFICATION	3.1325672034470915E-6	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999949434122404	WITHOUT_CLASSIFICATION	5.056587759599252E-6	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999999719861697	WITHOUT_CLASSIFICATION	2.8013830291794546E-8	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999947029839629	WITHOUT_CLASSIFICATION	5.297016037167244E-6	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999977230773651	WITHOUT_CLASSIFICATION	2.2769226348530023E-6	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999968514649034	WITHOUT_CLASSIFICATION	3.1485350965033983E-6	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999988229178544	WITHOUT_CLASSIFICATION	1.1770821455702527E-6	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999995286564417	WITHOUT_CLASSIFICATION	4.7134355833083304E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999902526203069	WITHOUT_CLASSIFICATION	9.747379693058258E-6	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999904221566577	WITHOUT_CLASSIFICATION	9.577843342269032E-6	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999964590979762	WITHOUT_CLASSIFICATION	3.540902023934559E-6	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.999999884906411	WITHOUT_CLASSIFICATION	1.1509358896929146E-7	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999873570197679	WITHOUT_CLASSIFICATION	1.2642980232039185E-5	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999963260022208	WITHOUT_CLASSIFICATION	3.673997779194585E-6	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999779283672815	WITHOUT_CLASSIFICATION	2.2071632718508882E-5	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999886802818733	WITHOUT_CLASSIFICATION	1.1319718126775496E-5	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9998797100481455	WITHOUT_CLASSIFICATION	1.2028995185454143E-4	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999999552624279	WITHOUT_CLASSIFICATION	4.473757213706798E-8	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999998054279619	WITHOUT_CLASSIFICATION	1.9457203814788362E-7	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9997065211710937	WITHOUT_CLASSIFICATION	2.9347882890632754E-4	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999998434793522	WITHOUT_CLASSIFICATION	1.565206477273158E-7	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999998434793522	WITHOUT_CLASSIFICATION	1.565206477273158E-7	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999995604581947	WITHOUT_CLASSIFICATION	4.395418052766098E-7	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.999999993069163	WITHOUT_CLASSIFICATION	6.930837034333393E-9	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999917200853328	WITHOUT_CLASSIFICATION	8.279914667181522E-6	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.999999574814529	WITHOUT_CLASSIFICATION	4.2518547097669796E-7	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999999002108995	WITHOUT_CLASSIFICATION	9.978910049048199E-8	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999995788796497	WITHOUT_CLASSIFICATION	4.2112035030141953E-7	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999997724141999	WITHOUT_CLASSIFICATION	2.275858001584866E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.999999995955751	WITHOUT_CLASSIFICATION	4.044248970076642E-9	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999986579603404	WITHOUT_CLASSIFICATION	1.3420396596440373E-6	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999999996763009	WITHOUT_CLASSIFICATION	3.2369905565165295E-10	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999992655680577	WITHOUT_CLASSIFICATION	7.344319421959073E-7	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999780588083262	WITHOUT_CLASSIFICATION	2.194119167369716E-5	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999999928038682	WITHOUT_CLASSIFICATION	7.196131850235699E-9	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999999918687625	WITHOUT_CLASSIFICATION	8.13123747874353E-9	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999998253316679	WITHOUT_CLASSIFICATION	1.7466833210185174E-7	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999791941515617	WITHOUT_CLASSIFICATION	2.080584843831387E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999993394346159	WITHOUT_CLASSIFICATION	6.605653839996557E-7	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999991435177881	WITHOUT_CLASSIFICATION	8.564822119859743E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999979885317207	WITHOUT_CLASSIFICATION	2.0114682792627987E-6	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999999021106268	WITHOUT_CLASSIFICATION	9.788937315032516E-8	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.998841087967473	WITHOUT_CLASSIFICATION	0.0011589120325270694	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999802259892697	WITHOUT_CLASSIFICATION	1.977401073034064E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999999587906905	WITHOUT_CLASSIFICATION	4.120930949550142E-8	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9264434960726657	WITHOUT_CLASSIFICATION	0.07355650392733419	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999493033118088	WITHOUT_CLASSIFICATION	5.069668819133365E-5	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9999934150583619	WITHOUT_CLASSIFICATION	6.584941638144386E-6	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999933920846764	WITHOUT_CLASSIFICATION	6.607915323662764E-6	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999980259900855	WITHOUT_CLASSIFICATION	1.9740099145543295E-6	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999926235306763	WITHOUT_CLASSIFICATION	7.376469323700484E-6	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999951727985388	WITHOUT_CLASSIFICATION	4.827201461285547E-6	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9999987499027129	WITHOUT_CLASSIFICATION	1.2500972870691936E-6	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999958864314895	WITHOUT_CLASSIFICATION	4.113568510470954E-6	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.999989961460177	WITHOUT_CLASSIFICATION	1.0038539822898377E-5	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999694135540075	WITHOUT_CLASSIFICATION	3.058644599248625E-5	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9999213038596663	WITHOUT_CLASSIFICATION	7.869614033369717E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9997788046942755	WITHOUT_CLASSIFICATION	2.2119530572458E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9992568942732895	WITHOUT_CLASSIFICATION	7.431057267104521E-4	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999994580223264	WITHOUT_CLASSIFICATION	5.419776736836056E-7	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999882343147534	WITHOUT_CLASSIFICATION	1.1765685246719373E-5	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999960287160715	WITHOUT_CLASSIFICATION	3.971283928503368E-6	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999966555723515	WITHOUT_CLASSIFICATION	3.3444276484265375E-6	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9999877264519592	WITHOUT_CLASSIFICATION	1.2273548040865555E-5	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9999916760139488	WITHOUT_CLASSIFICATION	8.323986051260152E-6	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.999941063892197	WITHOUT_CLASSIFICATION	5.893610780299455E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999846596546896	WITHOUT_CLASSIFICATION	1.534034531038987E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.999941063892197	WITHOUT_CLASSIFICATION	5.893610780299455E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9209192851252305	WITHOUT_CLASSIFICATION	0.07908071487476949	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.999920595358216	WITHOUT_CLASSIFICATION	7.940464178396289E-5	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999948958038927	WITHOUT_CLASSIFICATION	5.104196107393253E-6	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9696559238703757	WITHOUT_CLASSIFICATION	0.030344076129624222	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999949349334066	WITHOUT_CLASSIFICATION	5.065066593370692E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999566139336	WITHOUT_CLASSIFICATION	4.3386066506415664E-8	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999954672789999	WITHOUT_CLASSIFICATION	4.532721000183966E-6	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9997368869805915	WITHOUT_CLASSIFICATION	2.631130194084444E-4	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999999869959909	WITHOUT_CLASSIFICATION	1.3004009066781866E-8	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.992258195453617	WITHOUT_CLASSIFICATION	0.00774180454638299	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.99936579424212	WITHOUT_CLASSIFICATION	6.342057578799369E-4	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.999999851987683	WITHOUT_CLASSIFICATION	1.4801231684703506E-7	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999795851879679	WITHOUT_CLASSIFICATION	2.041481203205528E-5	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999998514690094	WITHOUT_CLASSIFICATION	1.4853099065068913E-7	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999811547857415	WITHOUT_CLASSIFICATION	1.8845214258611138E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.999827553791416	WITHOUT_CLASSIFICATION	1.7244620858410475E-4	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.999997228098756	WITHOUT_CLASSIFICATION	2.7719012439522468E-6	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999874393257044	WITHOUT_CLASSIFICATION	1.256067429559395E-5	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999941773296617	WITHOUT_CLASSIFICATION	5.8226703382255606E-6	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999967482961308	WITHOUT_CLASSIFICATION	3.2517038692218698E-6	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9993688692198247	WITHOUT_CLASSIFICATION	6.311307801753542E-4	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999979422294308	WITHOUT_CLASSIFICATION	2.0577705692540467E-6	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999885085269278	WITHOUT_CLASSIFICATION	1.1491473072243594E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999998859259605	WITHOUT_CLASSIFICATION	1.1407403959775814E-7	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999993562684251	WITHOUT_CLASSIFICATION	6.437315749293119E-7	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999920038110753	WITHOUT_CLASSIFICATION	7.996188924639241E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999806504257792	WITHOUT_CLASSIFICATION	1.934957422070863E-5	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999984614003	WITHOUT_CLASSIFICATION	1.5385996999232278E-6	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999979724867162	WITHOUT_CLASSIFICATION	2.027513283711573E-6	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9999999712348767	WITHOUT_CLASSIFICATION	2.8765123303105773E-8	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998866633424719	WITHOUT_CLASSIFICATION	1.1333665752812356E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997890719257354	WITHOUT_CLASSIFICATION	2.1092807426455063E-4	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9998498058662654	WITHOUT_CLASSIFICATION	1.501941337345494E-4	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999999087875105	WITHOUT_CLASSIFICATION	9.121248940636609E-8	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999998282841231	WITHOUT_CLASSIFICATION	1.717158768794635E-7	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.999999946539316	WITHOUT_CLASSIFICATION	5.3460684080588286E-8	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999978911099463	WITHOUT_CLASSIFICATION	2.1088900537564958E-6	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999840985627	WITHOUT_CLASSIFICATION	1.590143728098204E-8	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999987858917109	WITHOUT_CLASSIFICATION	1.2141082891000226E-6	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999896778144545	WITHOUT_CLASSIFICATION	1.0322185545575109E-5	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999840187547177	WITHOUT_CLASSIFICATION	1.598124528232788E-5	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999999239308304	WITHOUT_CLASSIFICATION	7.606916962700228E-8	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.999999928925962	WITHOUT_CLASSIFICATION	7.10740380550856E-8	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999903538371265	WITHOUT_CLASSIFICATION	9.646162873474211E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999903538371265	WITHOUT_CLASSIFICATION	9.646162873474211E-6	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999975217319069	WITHOUT_CLASSIFICATION	2.4782680930427115E-6	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999959049053722	WITHOUT_CLASSIFICATION	4.095094627863217E-6	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9961756227457388	WITHOUT_CLASSIFICATION	0.0038243772542612	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999876652372798	WITHOUT_CLASSIFICATION	1.2334762720110016E-5	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.999976183824899	WITHOUT_CLASSIFICATION	2.3816175101123122E-5	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999989714388572	WITHOUT_CLASSIFICATION	1.0285611427624718E-6	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.999998789374032	WITHOUT_CLASSIFICATION	1.2106259679943406E-6	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999998609496311	WITHOUT_CLASSIFICATION	1.3905036890204602E-7	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.999999966302928	WITHOUT_CLASSIFICATION	3.369707207998008E-8	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999999968385548	WITHOUT_CLASSIFICATION	3.1614451196203107E-9	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.999999957817794	WITHOUT_CLASSIFICATION	4.21822060156406E-8	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999995608428613	WITHOUT_CLASSIFICATION	4.3915713868479815E-7	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9989185879351443	WITHOUT_CLASSIFICATION	0.0010814120648557207	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999996054449797	WITHOUT_CLASSIFICATION	3.945550203056474E-7	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999992116166599	WITHOUT_CLASSIFICATION	7.883833400212758E-7	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999992606710281	WITHOUT_CLASSIFICATION	7.393289720262321E-7	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.99999978086374	WITHOUT_CLASSIFICATION	2.1913625998589865E-7	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999899995286051	WITHOUT_CLASSIFICATION	1.0000471394952743E-5	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999993188790272	WITHOUT_CLASSIFICATION	6.811209729276104E-7	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999994919439412	WITHOUT_CLASSIFICATION	5.08056058760345E-7	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9230349444051167	WITHOUT_CLASSIFICATION	0.07696505559488323	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9577273935216968	WITHOUT_CLASSIFICATION	0.04227260647830325	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999999964250158	WITHOUT_CLASSIFICATION	3.574984308831507E-9	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999999996827562	WITHOUT_CLASSIFICATION	3.1724380979746053E-10	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.990849071653118	WITHOUT_CLASSIFICATION	0.009150928346881925	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999753799808	WITHOUT_CLASSIFICATION	2.4620019237105474E-8	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999991657629478	WITHOUT_CLASSIFICATION	8.342370521840353E-7	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9993090095063323	WITHOUT_CLASSIFICATION	6.909904936678135E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999919732264951	WITHOUT_CLASSIFICATION	8.02677350483467E-6	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999991150222333	WITHOUT_CLASSIFICATION	8.849777667265612E-7	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.999999656876945	WITHOUT_CLASSIFICATION	3.4312305489583764E-7	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9999957760914501	WITHOUT_CLASSIFICATION	4.223908549947339E-6	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999999005640768	WITHOUT_CLASSIFICATION	9.943592325144753E-8	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999996763289246	WITHOUT_CLASSIFICATION	3.236710752889403E-7	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999989366500357	WITHOUT_CLASSIFICATION	1.063349964339763E-6	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999994350619777	WITHOUT_CLASSIFICATION	5.649380222522978E-7	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9997449127359823	WITHOUT_CLASSIFICATION	2.550872640175782E-4	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998216665710287	WITHOUT_CLASSIFICATION	1.7833342897137085E-4	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9995313897449574	WITHOUT_CLASSIFICATION	4.686102550427251E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998788039539462	WITHOUT_CLASSIFICATION	1.2119604605378372E-4	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999942658081451	WITHOUT_CLASSIFICATION	5.734191854842346E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9995886696277735	WITHOUT_CLASSIFICATION	4.1133037222651194E-4	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9998981032908053	WITHOUT_CLASSIFICATION	1.0189670919463553E-4	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999997780286017	WITHOUT_CLASSIFICATION	2.2197139828967535E-7	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999102068721718	WITHOUT_CLASSIFICATION	8.979312782817785E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999985730750939	WITHOUT_CLASSIFICATION	1.4269249061757866E-6	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999911481989141	WITHOUT_CLASSIFICATION	8.851801085851134E-6	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.999996892180119	WITHOUT_CLASSIFICATION	3.1078198809373278E-6	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999875116742419	WITHOUT_CLASSIFICATION	1.2488325758069772E-5	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.999998236012908	WITHOUT_CLASSIFICATION	1.7639870919044415E-6	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999885160806704	WITHOUT_CLASSIFICATION	1.1483919329625074E-5	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999976562623446	WITHOUT_CLASSIFICATION	2.3437376553670126E-6	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999998135152836	WITHOUT_CLASSIFICATION	1.8648471636081763E-7	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999946442996378	WITHOUT_CLASSIFICATION	5.355700362191938E-6	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999966462159716	WITHOUT_CLASSIFICATION	3.35378402833909E-6	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999625399284379	WITHOUT_CLASSIFICATION	3.7460071562057865E-5	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999996546994986	WITHOUT_CLASSIFICATION	3.4530050141175147E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999934119743842	WITHOUT_CLASSIFICATION	6.5880256157929115E-6	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999958703051839	WITHOUT_CLASSIFICATION	4.129694816086086E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999944078181328	WITHOUT_CLASSIFICATION	5.592181867195879E-6	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999993033680868	WITHOUT_CLASSIFICATION	6.966319132028927E-7	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999996821039893	WITHOUT_CLASSIFICATION	3.178960107035551E-7	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999997630567307	WITHOUT_CLASSIFICATION	2.369432693847146E-7	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999953506857407	WITHOUT_CLASSIFICATION	4.649314259253974E-6	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999991268942157	WITHOUT_CLASSIFICATION	8.731057842166857E-7	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999649638704232	WITHOUT_CLASSIFICATION	3.503612957679725E-5	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999854164508627	WITHOUT_CLASSIFICATION	1.4583549137306182E-4	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999999659587032	WITHOUT_CLASSIFICATION	3.404129680890197E-8	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999738792635076	WITHOUT_CLASSIFICATION	2.6120736492440545E-5	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.999997036761578	WITHOUT_CLASSIFICATION	2.963238421974629E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9999453370070086	WITHOUT_CLASSIFICATION	5.4662992991485004E-5	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999665221515619	WITHOUT_CLASSIFICATION	3.347784843809711E-5	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999992571408155	WITHOUT_CLASSIFICATION	7.428591845043212E-7	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9999875528620488	WITHOUT_CLASSIFICATION	1.2447137951319663E-5	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.999697879841419	WITHOUT_CLASSIFICATION	3.0212015858099194E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9998061560303574	WITHOUT_CLASSIFICATION	1.9384396964268035E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9996176704174239	WITHOUT_CLASSIFICATION	3.8232958257621084E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9997307655971209	WITHOUT_CLASSIFICATION	2.6923440287907724E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9997037601661217	WITHOUT_CLASSIFICATION	2.962398338783292E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9995263424648169	WITHOUT_CLASSIFICATION	4.7365753518318916E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9996903485669297	WITHOUT_CLASSIFICATION	3.096514330702888E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9997507838075674	WITHOUT_CLASSIFICATION	2.492161924324747E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9996989100881674	WITHOUT_CLASSIFICATION	3.010899118326681E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9996489316322298	WITHOUT_CLASSIFICATION	3.5106836777018974E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9996117896848338	WITHOUT_CLASSIFICATION	3.882103151663214E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9993056981235919	WITHOUT_CLASSIFICATION	6.943018764081052E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9995148279377442	WITHOUT_CLASSIFICATION	4.851720622558605E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9993347742806798	WITHOUT_CLASSIFICATION	6.652257193201461E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9995135358326376	WITHOUT_CLASSIFICATION	4.864641673624759E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9994379238074288	WITHOUT_CLASSIFICATION	5.620761925712069E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.999445765859806	WITHOUT_CLASSIFICATION	5.542341401940714E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9981976317314173	WITHOUT_CLASSIFICATION	0.001802368268582686	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.999290702006078	WITHOUT_CLASSIFICATION	7.092979939220231E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999999292996405	WITHOUT_CLASSIFICATION	7.07003594520837E-8	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999997607791415	WITHOUT_CLASSIFICATION	2.392208583949486E-7	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999678699138371	WITHOUT_CLASSIFICATION	3.213008616293511E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999994102939275	WITHOUT_CLASSIFICATION	5.897060724768604E-7	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9927681022962369	WITHOUT_CLASSIFICATION	0.007231897703763028	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999908154316337	WITHOUT_CLASSIFICATION	9.184568366216656E-6	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.999994935649792	WITHOUT_CLASSIFICATION	5.0643502079237145E-6	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9867906533685042	WITHOUT_CLASSIFICATION	0.013209346631495762	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.999999417957602	WITHOUT_CLASSIFICATION	5.820423980432673E-7	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999988579193494	WITHOUT_CLASSIFICATION	1.1420806506079153E-6	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.9811151304401637	WITHOUT_CLASSIFICATION	0.01888486955983628	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999992129401256	WITHOUT_CLASSIFICATION	7.870598742978462E-7	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999586224686524	WITHOUT_CLASSIFICATION	4.1377531347528104E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999985224343816	WITHOUT_CLASSIFICATION	1.4775656183745292E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999985224343816	WITHOUT_CLASSIFICATION	1.4775656183745292E-6	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9998770922689958	WITHOUT_CLASSIFICATION	1.229077310041754E-4	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999938080979772	WITHOUT_CLASSIFICATION	6.191902022709922E-6	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999960589005886	WITHOUT_CLASSIFICATION	3.941099411455838E-6	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999876537637288	WITHOUT_CLASSIFICATION	1.2346236271183253E-5	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999919989566081	WITHOUT_CLASSIFICATION	8.001043391903662E-6	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999857821193581	WITHOUT_CLASSIFICATION	1.4217880641950635E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999974272046801	WITHOUT_CLASSIFICATION	2.572795319903405E-6	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999970702277141	WITHOUT_CLASSIFICATION	2.9297722858864514E-6	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999999404118544	WITHOUT_CLASSIFICATION	5.958814573836767E-8	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999995233570151	WITHOUT_CLASSIFICATION	4.766429847402424E-7	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9999977072529719	WITHOUT_CLASSIFICATION	2.292747028099946E-6	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999999406029672	WITHOUT_CLASSIFICATION	5.939703291643638E-8	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999562066650245	WITHOUT_CLASSIFICATION	4.3793334975514895E-5	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9999973798387701	WITHOUT_CLASSIFICATION	2.620161229962582E-6	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999998749612377	WITHOUT_CLASSIFICATION	1.2503876231164255E-7	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999997667495432	WITHOUT_CLASSIFICATION	2.332504569990627E-7	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999759701019831	WITHOUT_CLASSIFICATION	2.4029898016826834E-5	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999984285333026	WITHOUT_CLASSIFICATION	1.5714666974734437E-6	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9914110439669311	WITHOUT_CLASSIFICATION	0.008588956033068855	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999107209893835	WITHOUT_CLASSIFICATION	8.927901061657638E-5	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999978812578156	WITHOUT_CLASSIFICATION	2.118742184457612E-6	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999935805333404	WITHOUT_CLASSIFICATION	6.419466659554285E-6	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.999991100394962	WITHOUT_CLASSIFICATION	8.899605037946785E-6	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999960157547122	WITHOUT_CLASSIFICATION	3.9842452878413345E-6	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999077301844893	WITHOUT_CLASSIFICATION	9.226981551068076E-5	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999995265045013	WITHOUT_CLASSIFICATION	4.734954987134924E-7	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999999141078775	WITHOUT_CLASSIFICATION	8.589212250161609E-8	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999998546288997	WITHOUT_CLASSIFICATION	1.4537110030662185E-7	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999986347042905	WITHOUT_CLASSIFICATION	1.365295709546525E-6	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9998453103942001	WITHOUT_CLASSIFICATION	1.5468960579992114E-4	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999973635443413	WITHOUT_CLASSIFICATION	2.6364556585987324E-6	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999137413957412	WITHOUT_CLASSIFICATION	8.625860425880358E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9998731210238706	WITHOUT_CLASSIFICATION	1.268789761293082E-4	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.999991732083912	WITHOUT_CLASSIFICATION	8.267916088024361E-6	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999815179217828	WITHOUT_CLASSIFICATION	1.8482078217255843E-5	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999861140849026	WITHOUT_CLASSIFICATION	1.3885915097387023E-5	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999997775489822	WITHOUT_CLASSIFICATION	2.2245101776862908E-7	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999994214995107	WITHOUT_CLASSIFICATION	5.785004891659218E-7	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999967398280672	WITHOUT_CLASSIFICATION	3.2601719327484E-6	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999996256899217	WITHOUT_CLASSIFICATION	3.743100783293693E-7	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999929152034956	WITHOUT_CLASSIFICATION	7.084796504343201E-6	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999976551726446	WITHOUT_CLASSIFICATION	2.3448273553350128E-6	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.999999920171138	WITHOUT_CLASSIFICATION	7.982886198669425E-8	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999941246753791	WITHOUT_CLASSIFICATION	5.8753246209978855E-6	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999941246753791	WITHOUT_CLASSIFICATION	5.8753246209978855E-6	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999786537080343	WITHOUT_CLASSIFICATION	2.1346291965689894E-5	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999987807577124	WITHOUT_CLASSIFICATION	1.2192422876167614E-6	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.999992922636818	WITHOUT_CLASSIFICATION	7.077363181996885E-6	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.999999865837661	WITHOUT_CLASSIFICATION	1.3416233892634585E-7	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999997884381094	WITHOUT_CLASSIFICATION	2.115618906090561E-7	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999970157413111	WITHOUT_CLASSIFICATION	2.9842586888747733E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999999931440665	WITHOUT_CLASSIFICATION	6.855933384228902E-9	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.999434667202857	WITHOUT_CLASSIFICATION	5.653327971430317E-4	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999848514559573	WITHOUT_CLASSIFICATION	1.5148544042702417E-5	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999926165835834	WITHOUT_CLASSIFICATION	7.383416416599876E-6	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999925926069558	WITHOUT_CLASSIFICATION	7.407393044126389E-6	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999999061583572	WITHOUT_CLASSIFICATION	9.384164275158762E-8	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9997304234219259	WITHOUT_CLASSIFICATION	2.6957657807417663E-4	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999992082199126	WITHOUT_CLASSIFICATION	7.917800874297721E-7	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9983795895083658	WITHOUT_CLASSIFICATION	0.00162041049163417	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999835579847557	WITHOUT_CLASSIFICATION	1.6442015244242225E-5	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999999088738402	WITHOUT_CLASSIFICATION	9.112615981514752E-8	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9999980599025542	WITHOUT_CLASSIFICATION	1.940097445850248E-6	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9982212980015774	WITHOUT_CLASSIFICATION	0.001778701998422496	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9997924993723435	WITHOUT_CLASSIFICATION	2.0750062765639035E-4	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999993680016696	WITHOUT_CLASSIFICATION	6.31998330367762E-7	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999993680016696	WITHOUT_CLASSIFICATION	6.31998330367762E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999996850216389	WITHOUT_CLASSIFICATION	3.149783610600703E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999996850216389	WITHOUT_CLASSIFICATION	3.149783610600703E-7	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999999650852003	WITHOUT_CLASSIFICATION	3.491479970781126E-8	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.99999929963843	WITHOUT_CLASSIFICATION	7.003615699269425E-7	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999633267529995	WITHOUT_CLASSIFICATION	3.6673247000562344E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999997118193079	WITHOUT_CLASSIFICATION	2.8818069206557745E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999998302214078	WITHOUT_CLASSIFICATION	1.6977859228468518E-7	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999990492412879	WITHOUT_CLASSIFICATION	9.507587121411262E-7	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9065508134511612	WITHOUT_CLASSIFICATION	0.09344918654883887	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999985054010141	WITHOUT_CLASSIFICATION	1.494598985977601E-6	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.999999992169077	WITHOUT_CLASSIFICATION	7.83092306828021E-9	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9993975783128847	WITHOUT_CLASSIFICATION	6.024216871153816E-4	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999996910837338	WITHOUT_CLASSIFICATION	3.089162661899723E-7	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999970000742814	WITHOUT_CLASSIFICATION	2.9999257187189634E-6	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999993671815273	WITHOUT_CLASSIFICATION	6.328184727781443E-7	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9987242231768501	WITHOUT_CLASSIFICATION	0.0012757768231499449	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999999148013934	WITHOUT_CLASSIFICATION	8.519860670507252E-8	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999998842561845	WITHOUT_CLASSIFICATION	1.157438156187141E-7	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999993760225334	WITHOUT_CLASSIFICATION	6.239774666517268E-7	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999995622715049	WITHOUT_CLASSIFICATION	4.3772849502085595E-7	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9999926438276686	WITHOUT_CLASSIFICATION	7.356172331432389E-6	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9997968061869192	WITHOUT_CLASSIFICATION	2.0319381308066462E-4	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999971151633342	WITHOUT_CLASSIFICATION	2.8848366657920743E-6	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.999999808532321	WITHOUT_CLASSIFICATION	1.9146767908868327E-7	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9999904551083627	WITHOUT_CLASSIFICATION	9.544891637288617E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999806504257792	WITHOUT_CLASSIFICATION	1.934957422070863E-5	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999989714388572	WITHOUT_CLASSIFICATION	1.0285611427624718E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999999311852313	WITHOUT_CLASSIFICATION	6.8814768622088E-8	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9999927885988444	WITHOUT_CLASSIFICATION	7.211401155499331E-6	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999972220230678	WITHOUT_CLASSIFICATION	2.777976932255092E-6	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9998315973769937	WITHOUT_CLASSIFICATION	1.6840262300642364E-4	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999986498824645	WITHOUT_CLASSIFICATION	1.3501175355274192E-6	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999986498824645	WITHOUT_CLASSIFICATION	1.3501175355274192E-6	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999847104555863	WITHOUT_CLASSIFICATION	1.5289544413589095E-5	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999885009820532	WITHOUT_CLASSIFICATION	1.1499017946690803E-5	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999983477370384	WITHOUT_CLASSIFICATION	1.6522629616126905E-6	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999994723050254	WITHOUT_CLASSIFICATION	5.276949746327244E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999570527842511	WITHOUT_CLASSIFICATION	4.294721574891367E-5	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999999914870911	WITHOUT_CLASSIFICATION	8.512908995740547E-9	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999992230049491	WITHOUT_CLASSIFICATION	7.769950508200237E-7	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999999120094512	WITHOUT_CLASSIFICATION	8.799054885735592E-8	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999999810640244	WITHOUT_CLASSIFICATION	1.893597553748191E-8	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999909348080931	WITHOUT_CLASSIFICATION	9.065191906910516E-6	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999999213373358	WITHOUT_CLASSIFICATION	7.866266414094256E-8	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999999593479223	WITHOUT_CLASSIFICATION	4.065207769661109E-8	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999999250188946	WITHOUT_CLASSIFICATION	7.498110541630146E-8	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999975683072004	WITHOUT_CLASSIFICATION	2.431692799658844E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999998234363627	WITHOUT_CLASSIFICATION	1.7656363723605178E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.999997970984294	WITHOUT_CLASSIFICATION	2.0290157059870272E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.99653013849232	WITHOUT_CLASSIFICATION	0.003469861507679993	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999989999746411	WITHOUT_CLASSIFICATION	1.0000253588635694E-6	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999964830381348	WITHOUT_CLASSIFICATION	3.5169618652152633E-6	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9998621639020435	WITHOUT_CLASSIFICATION	1.3783609795650823E-4	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999987627413538	WITHOUT_CLASSIFICATION	1.2372586461929474E-6	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999975260286723	WITHOUT_CLASSIFICATION	2.4739713277080838E-6	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999258422031192	WITHOUT_CLASSIFICATION	7.415779688088604E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999959066718881	WITHOUT_CLASSIFICATION	4.093328111922866E-6	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999817815401324	WITHOUT_CLASSIFICATION	1.8218459867527224E-5	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9998879690124068	WITHOUT_CLASSIFICATION	1.1203098759325745E-4	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999995390211639	WITHOUT_CLASSIFICATION	4.609788361191093E-7	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9997885971599902	WITHOUT_CLASSIFICATION	2.1140284000970531E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999997723782718	WITHOUT_CLASSIFICATION	2.2762172834875072E-7	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9999476855632691	WITHOUT_CLASSIFICATION	5.231443673099227E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999634697641623	WITHOUT_CLASSIFICATION	3.6530235837742494E-5	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999763359928712	WITHOUT_CLASSIFICATION	2.3664007128863437E-5	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999998350839095	WITHOUT_CLASSIFICATION	1.6491609047722834E-7	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999656771934793	WITHOUT_CLASSIFICATION	3.4322806520822364E-5	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9998623105216686	WITHOUT_CLASSIFICATION	1.3768947833133597E-4	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9998823081026126	WITHOUT_CLASSIFICATION	1.1769189738745147E-4	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999929390870538	WITHOUT_CLASSIFICATION	7.060912946208363E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9998945839659604	WITHOUT_CLASSIFICATION	1.054160340396445E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999992872368901	WITHOUT_CLASSIFICATION	7.127631098110123E-7	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999996103685003	WITHOUT_CLASSIFICATION	3.896314997397236E-7	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999998587061328	WITHOUT_CLASSIFICATION	1.4129386711383404E-7	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999999434504208	WITHOUT_CLASSIFICATION	5.654957918907194E-8	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999981739979865	WITHOUT_CLASSIFICATION	1.826002013435369E-6	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999960991484135	WITHOUT_CLASSIFICATION	3.9008515865200474E-6	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9999267964586261	WITHOUT_CLASSIFICATION	7.320354137385048E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.999999819620055	WITHOUT_CLASSIFICATION	1.8037994496747493E-7	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999997305493258	WITHOUT_CLASSIFICATION	2.6945067417731595E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.999999992241061	WITHOUT_CLASSIFICATION	7.758939106575777E-9	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999996595509623	WITHOUT_CLASSIFICATION	3.404490377499146E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999988801257581	WITHOUT_CLASSIFICATION	1.1198742418709772E-6	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9998744045202344	WITHOUT_CLASSIFICATION	1.2559547976566233E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999078532893967	WITHOUT_CLASSIFICATION	9.21467106032474E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9998776879698038	WITHOUT_CLASSIFICATION	1.2231203019611196E-4	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9998836239508943	WITHOUT_CLASSIFICATION	1.1637604910570106E-4	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999922158566473	WITHOUT_CLASSIFICATION	7.784143352659398E-6	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999830137968357	WITHOUT_CLASSIFICATION	1.6986203164338688E-5	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999756259607859	WITHOUT_CLASSIFICATION	2.437403921410451E-5	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9999538387316016	WITHOUT_CLASSIFICATION	4.61612683984324E-5	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999985652165874	WITHOUT_CLASSIFICATION	1.4347834125920205E-6	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999938410646675	WITHOUT_CLASSIFICATION	6.158935332612831E-6	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999398797021952	WITHOUT_CLASSIFICATION	6.01202978048216E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9998744045202344	WITHOUT_CLASSIFICATION	1.2559547976566233E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9998776879698038	WITHOUT_CLASSIFICATION	1.2231203019611196E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999078532893967	WITHOUT_CLASSIFICATION	9.21467106032474E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9997817150844288	WITHOUT_CLASSIFICATION	2.182849155711238E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.999978703797714	WITHOUT_CLASSIFICATION	2.1296202286023006E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999947817103255	WITHOUT_CLASSIFICATION	5.218289674557373E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999996465013736	WITHOUT_CLASSIFICATION	3.5349862631361477E-7	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999971289678335	WITHOUT_CLASSIFICATION	2.871032166424004E-6	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999998621945526	WITHOUT_CLASSIFICATION	1.3780544731478718E-7	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999980468593213	WITHOUT_CLASSIFICATION	1.9531406788471316E-6	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999998918564322	WITHOUT_CLASSIFICATION	1.0814356772938443E-7	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999943179859867	WITHOUT_CLASSIFICATION	5.682014013235865E-6	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999999460100703	WITHOUT_CLASSIFICATION	5.3989929771227015E-8	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999998495800986	WITHOUT_CLASSIFICATION	1.5041990142039627E-7	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.998704627800233	WITHOUT_CLASSIFICATION	0.0012953721997670733	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999990696432768	WITHOUT_CLASSIFICATION	9.303567233190659E-7	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999995589316905	WITHOUT_CLASSIFICATION	4.410683095148612E-7	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999456586918641	WITHOUT_CLASSIFICATION	5.4341308135746574E-5	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999992749832429	WITHOUT_CLASSIFICATION	7.250167570485123E-7	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999811714404865	WITHOUT_CLASSIFICATION	1.882855951346671E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999921364847754	WITHOUT_CLASSIFICATION	7.8635152246318E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999921364847754	WITHOUT_CLASSIFICATION	7.8635152246318E-6	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999975384028856	WITHOUT_CLASSIFICATION	2.4615971143634586E-6	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999999838579815	WITHOUT_CLASSIFICATION	1.614201846900234E-8	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999994465670473	WITHOUT_CLASSIFICATION	5.534329526411289E-7	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9999754808990873	WITHOUT_CLASSIFICATION	2.4519100912740583E-5	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999998273381762	WITHOUT_CLASSIFICATION	1.7266182391981003E-7	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999999493486963	WITHOUT_CLASSIFICATION	5.065130371052279E-8	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999999895074513	WITHOUT_CLASSIFICATION	1.0492548774983E-8	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999999322268145	WITHOUT_CLASSIFICATION	6.777318542376568E-8	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999996279690306	WITHOUT_CLASSIFICATION	3.7203096936098225E-7	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999997725134505	WITHOUT_CLASSIFICATION	2.274865494204056E-7	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999938304727168	WITHOUT_CLASSIFICATION	6.169527283154837E-6	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999876212388898	WITHOUT_CLASSIFICATION	1.2378761110134408E-5	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999981653046521	WITHOUT_CLASSIFICATION	1.8346953478366663E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999600260555689	WITHOUT_CLASSIFICATION	3.9973944431144914E-5	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999939262251939	WITHOUT_CLASSIFICATION	6.073774806066358E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999998693328139	WITHOUT_CLASSIFICATION	1.3066718593710447E-7	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.999999258730175	WITHOUT_CLASSIFICATION	7.412698249129665E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999717320396057	WITHOUT_CLASSIFICATION	2.8267960394419803E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999717320396057	WITHOUT_CLASSIFICATION	2.8267960394419803E-5	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999825839164405	WITHOUT_CLASSIFICATION	1.7416083559512737E-5	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999827622998138	WITHOUT_CLASSIFICATION	1.723770018620643E-5	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9997510699040966	WITHOUT_CLASSIFICATION	2.4893009590334686E-4	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999914682249283	WITHOUT_CLASSIFICATION	8.531775071726252E-6	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999994786035762	WITHOUT_CLASSIFICATION	5.213964237646794E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999717320396057	WITHOUT_CLASSIFICATION	2.8267960394419803E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999717320396057	WITHOUT_CLASSIFICATION	2.8267960394419803E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999990212856	WITHOUT_CLASSIFICATION	9.787144868349522E-10	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999990212856	WITHOUT_CLASSIFICATION	9.787144868349522E-10	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999947138066554	WITHOUT_CLASSIFICATION	5.286193344707448E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999908409921574	WITHOUT_CLASSIFICATION	9.159007842623525E-6	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999992034274328	WITHOUT_CLASSIFICATION	7.965725671543827E-7	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9980279834573151	WITHOUT_CLASSIFICATION	0.001972016542684793	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999895396726054	WITHOUT_CLASSIFICATION	1.04603273945842E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999895396726054	WITHOUT_CLASSIFICATION	1.04603273945842E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999996042210134	WITHOUT_CLASSIFICATION	3.957789865981298E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999714637365893	WITHOUT_CLASSIFICATION	2.853626341071125E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999958768568714	WITHOUT_CLASSIFICATION	4.12314312862482E-6	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999980559349704	WITHOUT_CLASSIFICATION	1.9440650295893264E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999989827627	WITHOUT_CLASSIFICATION	1.0172372757659257E-9	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999500292549	WITHOUT_CLASSIFICATION	4.9970745052163623E-8	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9997947567819169	WITHOUT_CLASSIFICATION	2.0524321808300773E-4	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999999068507264	WITHOUT_CLASSIFICATION	9.31492735746984E-8	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999931301869639	WITHOUT_CLASSIFICATION	6.869813036063217E-6	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999999996521781	WITHOUT_CLASSIFICATION	3.4782189160398405E-10	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9990287759901014	WITHOUT_CLASSIFICATION	9.712240098986198E-4	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999998361927147	WITHOUT_CLASSIFICATION	1.6380728519643388E-7	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999993015109351	WITHOUT_CLASSIFICATION	6.98489064959963E-7	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999999269464619	WITHOUT_CLASSIFICATION	7.305353811523238E-8	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999998693328139	WITHOUT_CLASSIFICATION	1.3066718593710447E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999717320396057	WITHOUT_CLASSIFICATION	2.8267960394419803E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999990212856	WITHOUT_CLASSIFICATION	9.787144868349522E-10	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999500292549	WITHOUT_CLASSIFICATION	4.9970745052163623E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999730563184617	WITHOUT_CLASSIFICATION	2.6943681538375966E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999730563184617	WITHOUT_CLASSIFICATION	2.6943681538375966E-5	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999711312963645	WITHOUT_CLASSIFICATION	2.8868703635433392E-5	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999999946893872	WITHOUT_CLASSIFICATION	5.31061286203161E-9	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999999766371572	WITHOUT_CLASSIFICATION	2.336284279508249E-8	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999998740995883	WITHOUT_CLASSIFICATION	1.2590041156554584E-7	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999993116695554	WITHOUT_CLASSIFICATION	6.883304445482714E-7	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999982105959474	WITHOUT_CLASSIFICATION	1.7894040526517307E-6	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9988730744962896	WITHOUT_CLASSIFICATION	0.0011269255037104178	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9998922038798899	WITHOUT_CLASSIFICATION	1.0779612011013264E-4	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.999999146201207	WITHOUT_CLASSIFICATION	8.537987931160529E-7	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999079526601	WITHOUT_CLASSIFICATION	9.204733987999872E-8	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999976355947813	WITHOUT_CLASSIFICATION	2.364405218657422E-6	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999997717155346	WITHOUT_CLASSIFICATION	2.2828446546623872E-7	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999978504430902	WITHOUT_CLASSIFICATION	2.149556909832766E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.999999258730175	WITHOUT_CLASSIFICATION	7.412698249129665E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999990212856	WITHOUT_CLASSIFICATION	9.787144868349522E-10	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999714637365893	WITHOUT_CLASSIFICATION	2.853626341071125E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999958768568714	WITHOUT_CLASSIFICATION	4.12314312862482E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999958768568714	WITHOUT_CLASSIFICATION	4.12314312862482E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999989827627	WITHOUT_CLASSIFICATION	1.0172372757659257E-9	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999500292549	WITHOUT_CLASSIFICATION	4.9970745052163623E-8	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999500292549	WITHOUT_CLASSIFICATION	4.9970745052163623E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999730563184617	WITHOUT_CLASSIFICATION	2.6943681538375966E-5	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999998174705921	WITHOUT_CLASSIFICATION	1.8252940787114604E-7	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9999656069430991	WITHOUT_CLASSIFICATION	3.439305690096016E-5	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999998146462925	WITHOUT_CLASSIFICATION	1.853537074794826E-7	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999997741814651	WITHOUT_CLASSIFICATION	2.2581853491435086E-7	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9997249470127095	WITHOUT_CLASSIFICATION	2.7505298729041996E-4	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9968437285445118	WITHOUT_CLASSIFICATION	0.0031562714554882482	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999998468234599	WITHOUT_CLASSIFICATION	1.53176540052115E-7	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999999133358185	WITHOUT_CLASSIFICATION	8.666418138305381E-8	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999999598810889	WITHOUT_CLASSIFICATION	4.011891106949196E-8	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999714637365893	WITHOUT_CLASSIFICATION	2.853626341071125E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999958768568714	WITHOUT_CLASSIFICATION	4.12314312862482E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999958768568714	WITHOUT_CLASSIFICATION	4.12314312862482E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999989827627	WITHOUT_CLASSIFICATION	1.0172372757659257E-9	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9998922038798899	WITHOUT_CLASSIFICATION	1.0779612011013264E-4	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999079526601	WITHOUT_CLASSIFICATION	9.204733987999872E-8	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999962162326498	WITHOUT_CLASSIFICATION	3.7837673502570966E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999994660752942	WITHOUT_CLASSIFICATION	5.339247057804593E-7	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999858952064673	WITHOUT_CLASSIFICATION	1.410479353258299E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999858952064673	WITHOUT_CLASSIFICATION	1.410479353258299E-5	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999990709146771	WITHOUT_CLASSIFICATION	9.290853230151249E-7	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.999998650333362	WITHOUT_CLASSIFICATION	1.3496666380001777E-6	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999956852239001	WITHOUT_CLASSIFICATION	4.314776099874873E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999995850457379	WITHOUT_CLASSIFICATION	4.14954262105767E-7	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999998838372841	WITHOUT_CLASSIFICATION	1.161627159209159E-7	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999998838372841	WITHOUT_CLASSIFICATION	1.161627159209159E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999927313512382	WITHOUT_CLASSIFICATION	7.268648761756566E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999927313512382	WITHOUT_CLASSIFICATION	7.268648761756566E-6	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999326461878	WITHOUT_CLASSIFICATION	6.735381224116873E-8	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999326461878	WITHOUT_CLASSIFICATION	6.735381224116873E-8	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999989229967972	WITHOUT_CLASSIFICATION	1.077003202866594E-6	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999040688478148	WITHOUT_CLASSIFICATION	9.593115218513765E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9999983334377521	WITHOUT_CLASSIFICATION	1.666562247848951E-6	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.999998257344749	WITHOUT_CLASSIFICATION	1.7426552510689532E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999997767904643	WITHOUT_CLASSIFICATION	2.2320953571763125E-7	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999983344816139	WITHOUT_CLASSIFICATION	1.6655183861667352E-6	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999999788334786	WITHOUT_CLASSIFICATION	2.116652138762354E-8	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999999644605532	WITHOUT_CLASSIFICATION	3.553944688243312E-8	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999999442699764	WITHOUT_CLASSIFICATION	5.573002358043369E-8	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999999065262846	WITHOUT_CLASSIFICATION	9.347371538891232E-8	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999994427444617	WITHOUT_CLASSIFICATION	5.572555382014704E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999998534045907	WITHOUT_CLASSIFICATION	1.4659540923124076E-7	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9980682736263865	WITHOUT_CLASSIFICATION	0.0019317263736134314	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999936079830134	WITHOUT_CLASSIFICATION	6.392016986641525E-6	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999936079830134	WITHOUT_CLASSIFICATION	6.392016986641525E-6	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9998922868170002	WITHOUT_CLASSIFICATION	1.0771318299986621E-4	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999990492412879	WITHOUT_CLASSIFICATION	9.507587121411262E-7	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9997925191135787	WITHOUT_CLASSIFICATION	2.0748088642131215E-4	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999998912018004	WITHOUT_CLASSIFICATION	1.0879819947802748E-7	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999998747310291	WITHOUT_CLASSIFICATION	1.2526897090405913E-7	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999998894068501	WITHOUT_CLASSIFICATION	1.1059314982833876E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999997261662137	WITHOUT_CLASSIFICATION	2.738337863532393E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999995797447868	WITHOUT_CLASSIFICATION	4.2025521310866213E-7	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999973690280148	WITHOUT_CLASSIFICATION	2.63097198524528E-6	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999764635452308	WITHOUT_CLASSIFICATION	2.3536454769240118E-5	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999997327372813	WITHOUT_CLASSIFICATION	2.6726271871776877E-7	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9999811080834973	WITHOUT_CLASSIFICATION	1.8891916502734466E-5	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999993410278252	WITHOUT_CLASSIFICATION	6.589721749100425E-7	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999999540631604	WITHOUT_CLASSIFICATION	4.593683947753127E-8	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999958518661254	WITHOUT_CLASSIFICATION	4.148133874571957E-6	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999993266023781	WITHOUT_CLASSIFICATION	6.733976219238184E-7	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999884438761367	WITHOUT_CLASSIFICATION	1.1556123863187752E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999999776290821	WITHOUT_CLASSIFICATION	2.237091795435985E-8	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999998048548652	WITHOUT_CLASSIFICATION	1.9514513475639484E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999998048548652	WITHOUT_CLASSIFICATION	1.9514513475639484E-7	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999972618695899	WITHOUT_CLASSIFICATION	2.738130410080364E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999952493074825	WITHOUT_CLASSIFICATION	4.7506925174092405E-6	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9998563822544555	WITHOUT_CLASSIFICATION	1.436177455444875E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9998563822544555	WITHOUT_CLASSIFICATION	1.436177455444875E-4	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999925072530923	WITHOUT_CLASSIFICATION	7.492746907607802E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9999895263212503	WITHOUT_CLASSIFICATION	1.047367874974894E-5	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999873061979863	WITHOUT_CLASSIFICATION	1.2693802013778245E-5	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999463906178033	WITHOUT_CLASSIFICATION	5.360938219667374E-5	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999994523815151	WITHOUT_CLASSIFICATION	5.47618484933618E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999994720726998	WITHOUT_CLASSIFICATION	5.27927300260431E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999994720726998	WITHOUT_CLASSIFICATION	5.27927300260431E-7	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999998391487167	WITHOUT_CLASSIFICATION	1.6085128322468895E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.999999641771059	WITHOUT_CLASSIFICATION	3.582289408852442E-7	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999991434066253	WITHOUT_CLASSIFICATION	8.565933747162434E-7	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999967751967672	WITHOUT_CLASSIFICATION	3.2248032328782015E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999952493074825	WITHOUT_CLASSIFICATION	4.7506925174092405E-6	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999893182148444	WITHOUT_CLASSIFICATION	1.0681785155730078E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999845505440125	WITHOUT_CLASSIFICATION	1.5449455987606032E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999845505440125	WITHOUT_CLASSIFICATION	1.5449455987606032E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999972237153535	WITHOUT_CLASSIFICATION	2.776284646434664E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999645567637	WITHOUT_CLASSIFICATION	3.544323639116291E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999645567637	WITHOUT_CLASSIFICATION	3.544323639116291E-8	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999946811686056	WITHOUT_CLASSIFICATION	5.318831394460973E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999946811686056	WITHOUT_CLASSIFICATION	5.318831394460973E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999946811686056	WITHOUT_CLASSIFICATION	5.318831394460973E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999645567637	WITHOUT_CLASSIFICATION	3.544323639116291E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999645567637	WITHOUT_CLASSIFICATION	3.544323639116291E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999972237153535	WITHOUT_CLASSIFICATION	2.776284646434664E-6	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.999997601001181	WITHOUT_CLASSIFICATION	2.398998818972737E-6	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999991075323309	WITHOUT_CLASSIFICATION	8.924676691398638E-7	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9999983137689049	WITHOUT_CLASSIFICATION	1.6862310951425407E-6	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999969997378974	WITHOUT_CLASSIFICATION	3.0002621026730742E-6	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999980627228864	WITHOUT_CLASSIFICATION	1.9372771137002984E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999998116672063	WITHOUT_CLASSIFICATION	1.883327936402328E-7	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.999999912981057	WITHOUT_CLASSIFICATION	8.70189430755846E-8	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.999995913682387	WITHOUT_CLASSIFICATION	4.086317612953021E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999997327372813	WITHOUT_CLASSIFICATION	2.6726271871776877E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999645567637	WITHOUT_CLASSIFICATION	3.544323639116291E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999645567637	WITHOUT_CLASSIFICATION	3.544323639116291E-8	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999994489340132	WITHOUT_CLASSIFICATION	5.510659868727228E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999987627223312	WITHOUT_CLASSIFICATION	1.237277668708654E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999995335353985	WITHOUT_CLASSIFICATION	4.664646015200515E-7	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9988210692004211	WITHOUT_CLASSIFICATION	0.001178930799578856	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999997689915838	WITHOUT_CLASSIFICATION	2.3100841622964064E-7	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.999999165562641	WITHOUT_CLASSIFICATION	8.344373588866513E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.999998203717631	WITHOUT_CLASSIFICATION	1.7962823689774365E-6	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999914443864006	WITHOUT_CLASSIFICATION	8.55561359937867E-6	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999991923806546	WITHOUT_CLASSIFICATION	8.076193455295993E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999345541902489	WITHOUT_CLASSIFICATION	6.544580975104942E-5	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999547750072124	WITHOUT_CLASSIFICATION	4.522499278755968E-5	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999994881603941	WITHOUT_CLASSIFICATION	5.118396059189916E-7	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999990434111773	WITHOUT_CLASSIFICATION	9.565888226793632E-7	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.999999962522435	WITHOUT_CLASSIFICATION	3.747756511297809E-8	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999999974143591	WITHOUT_CLASSIFICATION	2.5856408675268285E-9	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999929602139372	WITHOUT_CLASSIFICATION	7.039786062684743E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999929602139372	WITHOUT_CLASSIFICATION	7.039786062684743E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999929602139372	WITHOUT_CLASSIFICATION	7.039786062684743E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.999999813602298	WITHOUT_CLASSIFICATION	1.8639770210638917E-7	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999963881219497	WITHOUT_CLASSIFICATION	3.611878050257056E-6	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999998340411279	WITHOUT_CLASSIFICATION	1.6595887215847584E-7	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9999460403360035	WITHOUT_CLASSIFICATION	5.395966399644507E-5	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999999890355328	WITHOUT_CLASSIFICATION	1.0964467287882528E-8	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999999780170816	WITHOUT_CLASSIFICATION	2.198291836255134E-8	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999999201532	WITHOUT_CLASSIFICATION	7.984684091243151E-11	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999997980092746	WITHOUT_CLASSIFICATION	2.019907254180753E-7	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999999442314028	WITHOUT_CLASSIFICATION	5.576859716772286E-8	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999987553874066	WITHOUT_CLASSIFICATION	1.2446125933989853E-6	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999989266264789	WITHOUT_CLASSIFICATION	1.0733735210448918E-6	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.999949103844935	WITHOUT_CLASSIFICATION	5.089615506501348E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999998391487167	WITHOUT_CLASSIFICATION	1.6085128322468895E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999645567637	WITHOUT_CLASSIFICATION	3.544323639116291E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999645567637	WITHOUT_CLASSIFICATION	3.544323639116291E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999972237153535	WITHOUT_CLASSIFICATION	2.776284646434664E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999998116672063	WITHOUT_CLASSIFICATION	1.883327936402328E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999987627223312	WITHOUT_CLASSIFICATION	1.237277668708654E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9988210692004211	WITHOUT_CLASSIFICATION	0.001178930799578856	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.999999165562641	WITHOUT_CLASSIFICATION	8.344373588866513E-7	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999995335353985	WITHOUT_CLASSIFICATION	4.664646015200515E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.999998203717631	WITHOUT_CLASSIFICATION	1.7962823689774365E-6	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999345541902489	WITHOUT_CLASSIFICATION	6.544580975104942E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999991923806546	WITHOUT_CLASSIFICATION	8.076193455295993E-7	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999994881603941	WITHOUT_CLASSIFICATION	5.118396059189916E-7	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999994772780152	WITHOUT_CLASSIFICATION	5.22721984847605E-7	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999702070880505	WITHOUT_CLASSIFICATION	2.979291194951896E-5	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999986627211074	WITHOUT_CLASSIFICATION	1.3372788926540083E-6	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999998451381114	WITHOUT_CLASSIFICATION	1.5486188876022686E-7	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999997772123247	WITHOUT_CLASSIFICATION	2.2278767542729647E-7	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999997608572258	WITHOUT_CLASSIFICATION	2.391427741942115E-7	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999996113310842	WITHOUT_CLASSIFICATION	3.8866891580365266E-7	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9998033675956368	WITHOUT_CLASSIFICATION	1.966324043632188E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999943761746665	WITHOUT_CLASSIFICATION	5.623825333574142E-6	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999872403706913	WITHOUT_CLASSIFICATION	1.2759629308714405E-5	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999997710676308	WITHOUT_CLASSIFICATION	2.2893236920032506E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999320948177	WITHOUT_CLASSIFICATION	6.79051823186274E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999994844883507	WITHOUT_CLASSIFICATION	5.155116492778844E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999998614753813	WITHOUT_CLASSIFICATION	1.3852461870125005E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999960603686141	WITHOUT_CLASSIFICATION	3.939631385907637E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999534656878	WITHOUT_CLASSIFICATION	4.653431213099797E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999996617564489	WITHOUT_CLASSIFICATION	3.3824355106375867E-7	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999996365992168	WITHOUT_CLASSIFICATION	3.6340078328114995E-7	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999998935311254	WITHOUT_CLASSIFICATION	1.0646887459372114E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999998856101413	WITHOUT_CLASSIFICATION	1.1438985871008544E-7	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999715037374	WITHOUT_CLASSIFICATION	2.8496262663759813E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999931326607396	WITHOUT_CLASSIFICATION	6.867339260274845E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999931326607396	WITHOUT_CLASSIFICATION	6.867339260274845E-6	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999952804330761	WITHOUT_CLASSIFICATION	4.719566923854813E-6	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999999645431773	WITHOUT_CLASSIFICATION	3.545682267777846E-8	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999354406245086	WITHOUT_CLASSIFICATION	6.45593754915331E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999354406245086	WITHOUT_CLASSIFICATION	6.45593754915331E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999354406245086	WITHOUT_CLASSIFICATION	6.45593754915331E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999354406245086	WITHOUT_CLASSIFICATION	6.45593754915331E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997448608427237	WITHOUT_CLASSIFICATION	2.551391572762165E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997448608427237	WITHOUT_CLASSIFICATION	2.551391572762165E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997448608427237	WITHOUT_CLASSIFICATION	2.551391572762165E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9998260683779697	WITHOUT_CLASSIFICATION	1.739316220301851E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9998260683779697	WITHOUT_CLASSIFICATION	1.739316220301851E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9997102194141959	WITHOUT_CLASSIFICATION	2.897805858040533E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9998967046698287	WITHOUT_CLASSIFICATION	1.0329533017121875E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999999645431773	WITHOUT_CLASSIFICATION	3.545682267777846E-8	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999973626930663	WITHOUT_CLASSIFICATION	2.6373069336491917E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999354406245086	WITHOUT_CLASSIFICATION	6.45593754915331E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999354406245086	WITHOUT_CLASSIFICATION	6.45593754915331E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999354406245086	WITHOUT_CLASSIFICATION	6.45593754915331E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997448608427237	WITHOUT_CLASSIFICATION	2.551391572762165E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997448608427237	WITHOUT_CLASSIFICATION	2.551391572762165E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9998260683779697	WITHOUT_CLASSIFICATION	1.739316220301851E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9998967046698287	WITHOUT_CLASSIFICATION	1.0329533017121875E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999980122580936	WITHOUT_CLASSIFICATION	1.987741906443207E-6	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999980122580936	WITHOUT_CLASSIFICATION	1.987741906443207E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999979512183023	WITHOUT_CLASSIFICATION	2.048781697636474E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999979512183023	WITHOUT_CLASSIFICATION	2.048781697636474E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.999988188799063	WITHOUT_CLASSIFICATION	1.1811200937003577E-5	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.999988188799063	WITHOUT_CLASSIFICATION	1.1811200937003577E-5	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999988983761234	WITHOUT_CLASSIFICATION	1.1016238765169266E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999983165509773	WITHOUT_CLASSIFICATION	1.6834490226532549E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999983165509773	WITHOUT_CLASSIFICATION	1.6834490226532549E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.999996935057623	WITHOUT_CLASSIFICATION	3.0649423770457008E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.999996935057623	WITHOUT_CLASSIFICATION	3.0649423770457008E-6	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9999998978757184	WITHOUT_CLASSIFICATION	1.0212428160798591E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999975227023816	WITHOUT_CLASSIFICATION	2.477297618448624E-6	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999975227023816	WITHOUT_CLASSIFICATION	2.477297618448624E-6	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999996248077487	WITHOUT_CLASSIFICATION	3.7519225121484517E-7	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999981568123257	WITHOUT_CLASSIFICATION	1.8431876742049186E-6	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999977631252754	WITHOUT_CLASSIFICATION	2.2368747245085174E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999354406245086	WITHOUT_CLASSIFICATION	6.45593754915331E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999354406245086	WITHOUT_CLASSIFICATION	6.45593754915331E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999996248077487	WITHOUT_CLASSIFICATION	3.7519225121484517E-7	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999987435677838	WITHOUT_CLASSIFICATION	1.256432216192026E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999977990462061	WITHOUT_CLASSIFICATION	2.2009537939466124E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999977990462061	WITHOUT_CLASSIFICATION	2.2009537939466124E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999977990462061	WITHOUT_CLASSIFICATION	2.2009537939466124E-6	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999987904406351	WITHOUT_CLASSIFICATION	1.2095593648917936E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999974499168841	WITHOUT_CLASSIFICATION	2.550083115969531E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999959824305499	WITHOUT_CLASSIFICATION	4.017569450167243E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999959824305499	WITHOUT_CLASSIFICATION	4.017569450167243E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.999999970621575	WITHOUT_CLASSIFICATION	2.93784249962959E-8	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999761519865	WITHOUT_CLASSIFICATION	2.3848013463751495E-8	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999398631998	WITHOUT_CLASSIFICATION	6.01368002352988E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999997768720836	WITHOUT_CLASSIFICATION	2.2312791633928034E-7	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999995294255976	WITHOUT_CLASSIFICATION	4.7057440253804723E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999989852077632	WITHOUT_CLASSIFICATION	1.0147922367881538E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999989852077632	WITHOUT_CLASSIFICATION	1.0147922367881538E-6	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999998463025033	WITHOUT_CLASSIFICATION	1.5369749668947662E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997889632795709	WITHOUT_CLASSIFICATION	2.1103672042908903E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997889632795709	WITHOUT_CLASSIFICATION	2.1103672042908903E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999354406245086	WITHOUT_CLASSIFICATION	6.45593754915331E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999977990462061	WITHOUT_CLASSIFICATION	2.2009537939466124E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999974499168841	WITHOUT_CLASSIFICATION	2.550083115969531E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999959824305499	WITHOUT_CLASSIFICATION	4.017569450167243E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.999999970621575	WITHOUT_CLASSIFICATION	2.93784249962959E-8	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999761519865	WITHOUT_CLASSIFICATION	2.3848013463751495E-8	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999398631998	WITHOUT_CLASSIFICATION	6.01368002352988E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999997768720836	WITHOUT_CLASSIFICATION	2.2312791633928034E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997889632795709	WITHOUT_CLASSIFICATION	2.1103672042908903E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999994767977528	WITHOUT_CLASSIFICATION	5.232022472237543E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999999035401339	WITHOUT_CLASSIFICATION	9.645986613348541E-8	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999981752779988	WITHOUT_CLASSIFICATION	1.824722001277982E-6	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999998722399939	WITHOUT_CLASSIFICATION	1.2776000612613686E-7	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999982927202337	WITHOUT_CLASSIFICATION	1.70727976627182E-6	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999997084865193	WITHOUT_CLASSIFICATION	2.915134807769286E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999995011560823	WITHOUT_CLASSIFICATION	4.988439177445236E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999995011560823	WITHOUT_CLASSIFICATION	4.988439177445236E-7	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9999923977144713	WITHOUT_CLASSIFICATION	7.6022855286849E-6	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999963270359739	WITHOUT_CLASSIFICATION	3.6729640262765723E-6	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999956049399858	WITHOUT_CLASSIFICATION	4.395060014125704E-6	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999988867617897	WITHOUT_CLASSIFICATION	1.1132382102747551E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999894414347446	WITHOUT_CLASSIFICATION	1.055856525539832E-5	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999894414347446	WITHOUT_CLASSIFICATION	1.055856525539832E-5	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999998085048937	WITHOUT_CLASSIFICATION	1.91495106326128E-7	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999997398975	WITHOUT_CLASSIFICATION	2.6010249992695757E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999995411493829	WITHOUT_CLASSIFICATION	4.588506170602303E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999995411493829	WITHOUT_CLASSIFICATION	4.588506170602303E-7	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.999997651887483	WITHOUT_CLASSIFICATION	2.3481125170490275E-6	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.999999234859244	WITHOUT_CLASSIFICATION	7.651407559822566E-7	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999995294255976	WITHOUT_CLASSIFICATION	4.7057440253804723E-7	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999982898660972	WITHOUT_CLASSIFICATION	1.7101339027785712E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999993235462986	WITHOUT_CLASSIFICATION	6.764537013665032E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999944199547162	WITHOUT_CLASSIFICATION	5.580045283891165E-6	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999899596973254	WITHOUT_CLASSIFICATION	1.0040302674491374E-5	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999983891310937	WITHOUT_CLASSIFICATION	1.6108689062834619E-6	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999998997216772	WITHOUT_CLASSIFICATION	1.0027832275232876E-7	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999919304611791	WITHOUT_CLASSIFICATION	8.06953882099166E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999999847270787	WITHOUT_CLASSIFICATION	1.5272921274207146E-8	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999999834273193	WITHOUT_CLASSIFICATION	1.6572680634349376E-8	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999999834273193	WITHOUT_CLASSIFICATION	1.6572680634349376E-8	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999997799405236	WITHOUT_CLASSIFICATION	2.200594763308895E-7	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999997799405236	WITHOUT_CLASSIFICATION	2.200594763308895E-7	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999998246315347	WITHOUT_CLASSIFICATION	1.7536846539209958E-7	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999873433332161	WITHOUT_CLASSIFICATION	1.26566667838397E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999873433332161	WITHOUT_CLASSIFICATION	1.26566667838397E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999873433332161	WITHOUT_CLASSIFICATION	1.26566667838397E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994609845614	WITHOUT_CLASSIFICATION	5.390154386563229E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999998240071446	WITHOUT_CLASSIFICATION	1.7599285530889988E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999998240071446	WITHOUT_CLASSIFICATION	1.7599285530889988E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999980886820332	WITHOUT_CLASSIFICATION	1.9113179666883985E-6	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999871291507278	WITHOUT_CLASSIFICATION	1.287084927215825E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999998327843163	WITHOUT_CLASSIFICATION	1.672156837779567E-7	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999999065152443	WITHOUT_CLASSIFICATION	9.348475572045399E-8	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9997587505882035	WITHOUT_CLASSIFICATION	2.4124941179660923E-4	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999942294272727	WITHOUT_CLASSIFICATION	5.770572727394726E-6	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999268863722324	WITHOUT_CLASSIFICATION	7.311362776768381E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999994844883507	WITHOUT_CLASSIFICATION	5.155116492778844E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999994844883507	WITHOUT_CLASSIFICATION	5.155116492778844E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994609845614	WITHOUT_CLASSIFICATION	5.390154386563229E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999980886820332	WITHOUT_CLASSIFICATION	1.9113179666883985E-6	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999990189269492	WITHOUT_CLASSIFICATION	9.810730508235893E-7	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999871291507278	WITHOUT_CLASSIFICATION	1.287084927215825E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999998327843163	WITHOUT_CLASSIFICATION	1.672156837779567E-7	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999999448858923	WITHOUT_CLASSIFICATION	5.511410763565508E-8	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999996412871945	WITHOUT_CLASSIFICATION	3.587128055182192E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999641813236	WITHOUT_CLASSIFICATION	3.5818676405559925E-8	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999545684193923	WITHOUT_CLASSIFICATION	4.543158060760073E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999940959202188	WITHOUT_CLASSIFICATION	5.904079781084683E-6	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999995433342947	WITHOUT_CLASSIFICATION	4.566657053130459E-7	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999919337115438	WITHOUT_CLASSIFICATION	8.066288456226323E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999999448858923	WITHOUT_CLASSIFICATION	5.511410763565508E-8	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999983735839131	WITHOUT_CLASSIFICATION	1.6264160869173775E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999983735839131	WITHOUT_CLASSIFICATION	1.6264160869173775E-6	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999869369646515	WITHOUT_CLASSIFICATION	1.306303534854981E-5	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999988131069512	WITHOUT_CLASSIFICATION	1.1868930487920607E-6	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999760184295882	WITHOUT_CLASSIFICATION	2.3981570411859625E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999809575742995	WITHOUT_CLASSIFICATION	1.904242570049936E-5	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999996326172568	WITHOUT_CLASSIFICATION	3.673827432701277E-7	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999999953696415	WITHOUT_CLASSIFICATION	4.630358557835591E-9	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999980801050476	WITHOUT_CLASSIFICATION	1.919894952345246E-6	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999979107268513	WITHOUT_CLASSIFICATION	2.089273148812425E-6	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999857301395538	WITHOUT_CLASSIFICATION	1.4269860446132368E-5	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999989316037178	WITHOUT_CLASSIFICATION	1.0683962822298518E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999986824104694	WITHOUT_CLASSIFICATION	1.3175895305396606E-6	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999809575742995	WITHOUT_CLASSIFICATION	1.904242570049936E-5	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999996326172568	WITHOUT_CLASSIFICATION	3.673827432701277E-7	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999984618089852	WITHOUT_CLASSIFICATION	1.5381910148280193E-6	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999997666694581	WITHOUT_CLASSIFICATION	2.3333054190888156E-7	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999962150037403	WITHOUT_CLASSIFICATION	3.7849962596642215E-6	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9999997447754418	WITHOUT_CLASSIFICATION	2.552245581616349E-7	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999971065725521	WITHOUT_CLASSIFICATION	2.893427447814141E-6	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.999950618323829	WITHOUT_CLASSIFICATION	4.938167617094831E-5	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9998837129097677	WITHOUT_CLASSIFICATION	1.1628709023230964E-4	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999998347890574	WITHOUT_CLASSIFICATION	1.6521094248575107E-7	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999987514267076	WITHOUT_CLASSIFICATION	1.2485732924498292E-6	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999936112723871	WITHOUT_CLASSIFICATION	6.388727612939357E-6	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9999884123913795	WITHOUT_CLASSIFICATION	1.1587608620414933E-5	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999948167944519	WITHOUT_CLASSIFICATION	5.18320554810313E-6	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999882487927715	WITHOUT_CLASSIFICATION	1.1751207228512892E-5	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999966647921877	WITHOUT_CLASSIFICATION	3.335207812181289E-6	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9997702153955081	WITHOUT_CLASSIFICATION	2.29784604491815E-4	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999929745671221	WITHOUT_CLASSIFICATION	7.025432877980346E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999322089617221	WITHOUT_CLASSIFICATION	6.779103827795077E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999718944184	WITHOUT_CLASSIFICATION	2.810558173472522E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999998606386611	WITHOUT_CLASSIFICATION	1.3936133885621728E-7	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999996144353938	WITHOUT_CLASSIFICATION	3.8556460631966944E-7	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999322089617221	WITHOUT_CLASSIFICATION	6.779103827795077E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999718944184	WITHOUT_CLASSIFICATION	2.810558173472522E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999998606386611	WITHOUT_CLASSIFICATION	1.3936133885621728E-7	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999964598989994	WITHOUT_CLASSIFICATION	3.540101000664019E-6	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999994407372039	WITHOUT_CLASSIFICATION	5.592627959819338E-7	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999911554711418	WITHOUT_CLASSIFICATION	8.844528858301324E-6	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9998778549003395	WITHOUT_CLASSIFICATION	1.221450996604268E-4	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9978083775736173	WITHOUT_CLASSIFICATION	0.00219162242638264	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999919425216606	WITHOUT_CLASSIFICATION	8.057478339421974E-6	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999723307803497	WITHOUT_CLASSIFICATION	2.7669219650165737E-5	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999999971700366	WITHOUT_CLASSIFICATION	2.829963496290626E-9	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999981847209894	WITHOUT_CLASSIFICATION	1.8152790104715738E-6	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999981151285267	WITHOUT_CLASSIFICATION	1.8848714734270458E-6	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9970203080056697	WITHOUT_CLASSIFICATION	0.0029796919943302067	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999999297623483	WITHOUT_CLASSIFICATION	7.023765165809216E-8	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999985693850402	WITHOUT_CLASSIFICATION	1.4306149597609726E-6	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999998838453572	WITHOUT_CLASSIFICATION	1.1615464284018784E-7	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999985222038573	WITHOUT_CLASSIFICATION	1.4777961426337323E-6	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999998316586706	WITHOUT_CLASSIFICATION	1.6834132941847227E-7	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9999937303618016	WITHOUT_CLASSIFICATION	6.2696381983871E-6	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.999993861438016	WITHOUT_CLASSIFICATION	6.138561983970898E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.999999867331642	WITHOUT_CLASSIFICATION	1.3266835794108154E-7	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999515541192	WITHOUT_CLASSIFICATION	4.8445880781470384E-8	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999981256469294	WITHOUT_CLASSIFICATION	1.8743530706899088E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999963679981375	WITHOUT_CLASSIFICATION	3.632001862428249E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999963679981375	WITHOUT_CLASSIFICATION	3.632001862428249E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999981722871985	WITHOUT_CLASSIFICATION	1.8277128015033074E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999981722871985	WITHOUT_CLASSIFICATION	1.8277128015033074E-6	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999998770736344	WITHOUT_CLASSIFICATION	1.229263655745958E-7	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999998770736344	WITHOUT_CLASSIFICATION	1.229263655745958E-7	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999538219085	WITHOUT_CLASSIFICATION	4.6178091391623676E-8	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.999999998639816	WITHOUT_CLASSIFICATION	1.360183926411764E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999622754661	WITHOUT_CLASSIFICATION	3.772453392388831E-8	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999999753316327	WITHOUT_CLASSIFICATION	2.4668367388388916E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999873837434	WITHOUT_CLASSIFICATION	1.261625666989869E-8	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999910494118	WITHOUT_CLASSIFICATION	8.950588059999519E-9	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999999672207389	WITHOUT_CLASSIFICATION	3.277926110913732E-8	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.999999621542451	WITHOUT_CLASSIFICATION	3.784575489426747E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999994844883507	WITHOUT_CLASSIFICATION	5.155116492778844E-7	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999538219085	WITHOUT_CLASSIFICATION	4.6178091391623676E-8	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.999999998639816	WITHOUT_CLASSIFICATION	1.360183926411764E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999622754661	WITHOUT_CLASSIFICATION	3.772453392388831E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999873837434	WITHOUT_CLASSIFICATION	1.261625666989869E-8	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999910494118	WITHOUT_CLASSIFICATION	8.950588059999519E-9	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999951335377276	WITHOUT_CLASSIFICATION	4.866462272332094E-6	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999994757597914	WITHOUT_CLASSIFICATION	5.242402085786021E-7	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999483086903498	WITHOUT_CLASSIFICATION	5.169130965020564E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999483086903498	WITHOUT_CLASSIFICATION	5.169130965020564E-5	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999997079292117	WITHOUT_CLASSIFICATION	2.9207078834123235E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999840474991419	WITHOUT_CLASSIFICATION	1.595250085803395E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999959075188173	WITHOUT_CLASSIFICATION	4.092481182758919E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999982171027056	WITHOUT_CLASSIFICATION	1.7828972943007916E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999982171027056	WITHOUT_CLASSIFICATION	1.7828972943007916E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999926372790499	WITHOUT_CLASSIFICATION	7.362720950266272E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.999999770420124	WITHOUT_CLASSIFICATION	2.2957987605612435E-7	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999996260421158	WITHOUT_CLASSIFICATION	3.7395788422659576E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999989182980341	WITHOUT_CLASSIFICATION	1.0817019658256667E-6	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999966452757534	WITHOUT_CLASSIFICATION	3.354724246677659E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999998614753813	WITHOUT_CLASSIFICATION	1.3852461870125005E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999960603686141	WITHOUT_CLASSIFICATION	3.939631385907637E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999534656878	WITHOUT_CLASSIFICATION	4.653431213099797E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999996617564489	WITHOUT_CLASSIFICATION	3.3824355106375867E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999998856101413	WITHOUT_CLASSIFICATION	1.1438985871008544E-7	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999715037374	WITHOUT_CLASSIFICATION	2.8496262663759813E-8	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999926372790499	WITHOUT_CLASSIFICATION	7.362720950266272E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.999999770420124	WITHOUT_CLASSIFICATION	2.2957987605612435E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999989182980341	WITHOUT_CLASSIFICATION	1.0817019658256667E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999994195015927	WITHOUT_CLASSIFICATION	5.804984073997342E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999959075188173	WITHOUT_CLASSIFICATION	4.092481182758919E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999959075188173	WITHOUT_CLASSIFICATION	4.092481182758919E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999986824104694	WITHOUT_CLASSIFICATION	1.3175895305396606E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999986824104694	WITHOUT_CLASSIFICATION	1.3175895305396606E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998264555933047	WITHOUT_CLASSIFICATION	1.735444066953543E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998264555933047	WITHOUT_CLASSIFICATION	1.735444066953543E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999993709911655	WITHOUT_CLASSIFICATION	6.290088344359529E-7	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999991615690775	WITHOUT_CLASSIFICATION	8.384309225376854E-7	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999644334088259	WITHOUT_CLASSIFICATION	3.556659117414141E-5	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.999988819125043	WITHOUT_CLASSIFICATION	1.1180874957030915E-5	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9999997618480838	WITHOUT_CLASSIFICATION	2.3815191612588007E-7	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999996472184103	WITHOUT_CLASSIFICATION	3.5278158979069235E-7	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.999541324053802	WITHOUT_CLASSIFICATION	4.586759461980045E-4	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999999939702028	WITHOUT_CLASSIFICATION	6.029797212980694E-9	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999991112791758	WITHOUT_CLASSIFICATION	8.887208242099662E-7	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999999208717727	WITHOUT_CLASSIFICATION	7.912822736897337E-8	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999994965669621	WITHOUT_CLASSIFICATION	5.034330379319062E-7	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999879148932802	WITHOUT_CLASSIFICATION	1.2085106719869462E-5	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999997807259584	WITHOUT_CLASSIFICATION	2.192740415884147E-7	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999976487186846	WITHOUT_CLASSIFICATION	2.3512813154830124E-6	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999993356853333	WITHOUT_CLASSIFICATION	6.643146666368854E-7	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.999995304067619	WITHOUT_CLASSIFICATION	4.695932381032611E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999972413677068	WITHOUT_CLASSIFICATION	2.758632293034235E-6	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999996108825373	WITHOUT_CLASSIFICATION	3.891174626427444E-7	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999983801722918	WITHOUT_CLASSIFICATION	1.6198277081165573E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999960603686141	WITHOUT_CLASSIFICATION	3.939631385907637E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999996617564489	WITHOUT_CLASSIFICATION	3.3824355106375867E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999931326607396	WITHOUT_CLASSIFICATION	6.867339260274845E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999959824305499	WITHOUT_CLASSIFICATION	4.017569450167243E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999959824305499	WITHOUT_CLASSIFICATION	4.017569450167243E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999994195015927	WITHOUT_CLASSIFICATION	5.804984073997342E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999959075188173	WITHOUT_CLASSIFICATION	4.092481182758919E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999986824104694	WITHOUT_CLASSIFICATION	1.3175895305396606E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998264555933047	WITHOUT_CLASSIFICATION	1.735444066953543E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999984127632603	WITHOUT_CLASSIFICATION	1.5872367397516604E-6	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9993591052222431	WITHOUT_CLASSIFICATION	6.408947777568311E-4	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999999956726981	WITHOUT_CLASSIFICATION	4.327301874426148E-9	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9964993223525407	WITHOUT_CLASSIFICATION	0.003500677647459379	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999988858145089	WITHOUT_CLASSIFICATION	1.114185491126851E-6	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999988858145089	WITHOUT_CLASSIFICATION	1.114185491126851E-6	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.999997903462569	WITHOUT_CLASSIFICATION	2.0965374310378964E-6	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999999622228185	WITHOUT_CLASSIFICATION	3.777718152661517E-8	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999063349437	WITHOUT_CLASSIFICATION	9.366505622070268E-8	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999998915462803	WITHOUT_CLASSIFICATION	1.0845371965057833E-7	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999995906436354	WITHOUT_CLASSIFICATION	4.0935636458887504E-7	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999995906436354	WITHOUT_CLASSIFICATION	4.0935636458887504E-7	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999999833083456	WITHOUT_CLASSIFICATION	1.6691654440631847E-8	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999999887074316	WITHOUT_CLASSIFICATION	1.1292568425211603E-8	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999995870648695	WITHOUT_CLASSIFICATION	4.129351305278753E-7	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999878265487546	WITHOUT_CLASSIFICATION	1.2173451245362462E-5	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999998857328276	WITHOUT_CLASSIFICATION	1.1426717239069098E-7	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999997712908271	WITHOUT_CLASSIFICATION	2.2870917305913037E-7	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999635070804697	WITHOUT_CLASSIFICATION	3.6492919530250875E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999998568633515	WITHOUT_CLASSIFICATION	1.4313664860202807E-7	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.99914902707026	WITHOUT_CLASSIFICATION	8.509729297399754E-4	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9943018251712387	WITHOUT_CLASSIFICATION	0.005698174828761352	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9999962422285149	WITHOUT_CLASSIFICATION	3.7577714850719394E-6	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999974436733323	WITHOUT_CLASSIFICATION	2.5563266678024717E-6	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999999970951916	WITHOUT_CLASSIFICATION	2.9048085334317237E-9	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999991436616964	WITHOUT_CLASSIFICATION	8.563383035975962E-7	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9999992513462228	WITHOUT_CLASSIFICATION	7.486537771734675E-7	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999951269502316	WITHOUT_CLASSIFICATION	4.873049768450546E-6	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999998383774745	WITHOUT_CLASSIFICATION	1.6162252544994283E-7	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999904036164992	WITHOUT_CLASSIFICATION	9.596383500829384E-6	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999999104685199	WITHOUT_CLASSIFICATION	8.953148010727712E-8	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999992821669542	WITHOUT_CLASSIFICATION	7.178330457977367E-7	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999984831946931	WITHOUT_CLASSIFICATION	1.5168053068013247E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.999998957652582	WITHOUT_CLASSIFICATION	1.0423474179703837E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.999998957652582	WITHOUT_CLASSIFICATION	1.0423474179703837E-6	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999905211487315	WITHOUT_CLASSIFICATION	9.47885126847072E-6	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9999733210319567	WITHOUT_CLASSIFICATION	2.6678968043366907E-5	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999995797447868	WITHOUT_CLASSIFICATION	4.2025521310866213E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999995797447868	WITHOUT_CLASSIFICATION	4.2025521310866213E-7	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.758251638713642	WITHOUT_CLASSIFICATION	0.24174836128635802	DEFECT
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9998755887779122	WITHOUT_CLASSIFICATION	1.244112220877974E-4	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999726551475776	WITHOUT_CLASSIFICATION	2.7344852422421218E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999830633770097	WITHOUT_CLASSIFICATION	1.6936622990359487E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999830633770097	WITHOUT_CLASSIFICATION	1.6936622990359487E-5	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9999177564445798	WITHOUT_CLASSIFICATION	8.224355542018787E-5	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.999999111858819	WITHOUT_CLASSIFICATION	8.88141181154362E-7	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999996950561655	WITHOUT_CLASSIFICATION	3.049438345069781E-7	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999993063148367	WITHOUT_CLASSIFICATION	6.936851633188256E-7	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999985541526365	WITHOUT_CLASSIFICATION	1.4458473634675952E-6	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.99999988617691	WITHOUT_CLASSIFICATION	1.1382308983851516E-7	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999998589475494	WITHOUT_CLASSIFICATION	1.4105245056338576E-7	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999864047785844	WITHOUT_CLASSIFICATION	1.359522141559268E-5	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.999996312225009	WITHOUT_CLASSIFICATION	3.6877749909702608E-6	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9992609413702316	WITHOUT_CLASSIFICATION	7.390586297683293E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999777542654794	WITHOUT_CLASSIFICATION	2.2245734520677457E-5	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999994607079145	WITHOUT_CLASSIFICATION	5.392920856197824E-7	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999992712703485	WITHOUT_CLASSIFICATION	7.287296515451979E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.999886230706932	WITHOUT_CLASSIFICATION	1.1376929306789213E-4	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999982132551071	WITHOUT_CLASSIFICATION	1.7867448929131377E-6	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9979319815848341	WITHOUT_CLASSIFICATION	0.00206801841516593	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999999603218082	WITHOUT_CLASSIFICATION	3.9678191887815616E-8	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999866470047032	WITHOUT_CLASSIFICATION	1.3352995296898604E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999605114820024	WITHOUT_CLASSIFICATION	3.948851799750291E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999959254282762	WITHOUT_CLASSIFICATION	4.07457172379335E-6	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999998218515892	WITHOUT_CLASSIFICATION	1.781484106846201E-7	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999997546941319	WITHOUT_CLASSIFICATION	2.453058680977205E-7	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999851601861068	WITHOUT_CLASSIFICATION	1.4839813893259645E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999858399391981	WITHOUT_CLASSIFICATION	1.4160060802025798E-5	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999995100903794	WITHOUT_CLASSIFICATION	4.899096206504064E-7	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9962731083886127	WITHOUT_CLASSIFICATION	0.0037268916113873214	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9980637520672089	WITHOUT_CLASSIFICATION	0.0019362479327911034	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999997735438695	WITHOUT_CLASSIFICATION	2.2645613061286833E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999934756397117	WITHOUT_CLASSIFICATION	6.524360288326556E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999999679669278	WITHOUT_CLASSIFICATION	3.2033072240603596E-8	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999985918505	WITHOUT_CLASSIFICATION	1.4081495603903154E-9	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.999886230706932	WITHOUT_CLASSIFICATION	1.1376929306789213E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999997735438695	WITHOUT_CLASSIFICATION	2.2645613061286833E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999934756397117	WITHOUT_CLASSIFICATION	6.524360288326556E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999985918505	WITHOUT_CLASSIFICATION	1.4081495603903154E-9	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999998403664427	WITHOUT_CLASSIFICATION	1.5963355734349867E-7	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.999997847859966	WITHOUT_CLASSIFICATION	2.1521400339433816E-6	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999972364093127	WITHOUT_CLASSIFICATION	2.7635906873022856E-6	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999978054866121	WITHOUT_CLASSIFICATION	2.1945133879170253E-6	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999416566968	WITHOUT_CLASSIFICATION	5.834330311743379E-8	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999985521042613	WITHOUT_CLASSIFICATION	1.4478957387420012E-6	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.999998894608207	WITHOUT_CLASSIFICATION	1.1053917929962807E-6	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999994089294989	WITHOUT_CLASSIFICATION	5.910705010183594E-7	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999997015733552	WITHOUT_CLASSIFICATION	2.984266447977661E-7	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999533270296361	WITHOUT_CLASSIFICATION	4.667297036380549E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999914175065052	WITHOUT_CLASSIFICATION	8.582493494784532E-6	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999914175065052	WITHOUT_CLASSIFICATION	8.582493494784532E-6	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999981535647267	WITHOUT_CLASSIFICATION	1.8464352733292546E-6	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999996727907325	WITHOUT_CLASSIFICATION	3.272092674604152E-7	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999951598676372	WITHOUT_CLASSIFICATION	4.8401323627314425E-6	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999996049429877	WITHOUT_CLASSIFICATION	3.9505701222854596E-7	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999110992439347	WITHOUT_CLASSIFICATION	8.890075606535874E-5	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999611667794392	WITHOUT_CLASSIFICATION	3.883322056075608E-5	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999933609921856	WITHOUT_CLASSIFICATION	6.639007814396824E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9984121166701545	WITHOUT_CLASSIFICATION	0.0015878833298454626	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999999287216859	WITHOUT_CLASSIFICATION	7.127831409570306E-8	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999996035613915	WITHOUT_CLASSIFICATION	3.96438608393345E-7	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999993719777001	WITHOUT_CLASSIFICATION	6.280223000066394E-7	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999990675597517	WITHOUT_CLASSIFICATION	9.324402483499977E-7	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.99999995805419	WITHOUT_CLASSIFICATION	4.194581015523781E-8	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999994910446862	WITHOUT_CLASSIFICATION	5.089553137756163E-7	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.999999959528714	WITHOUT_CLASSIFICATION	4.047128597940758E-8	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999999916335888	WITHOUT_CLASSIFICATION	8.366411255416883E-9	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999999930886997	WITHOUT_CLASSIFICATION	6.911300351706604E-9	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999999491960576	WITHOUT_CLASSIFICATION	5.0803942242039345E-8	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999998207580745	WITHOUT_CLASSIFICATION	1.792419256262943E-7	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999996261959039	WITHOUT_CLASSIFICATION	3.7380409608309537E-7	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999915208486827	WITHOUT_CLASSIFICATION	8.479151317324772E-6	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999953712291372	WITHOUT_CLASSIFICATION	4.628770862913315E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999999857167594	WITHOUT_CLASSIFICATION	1.4283240684213482E-8	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999986265010321	WITHOUT_CLASSIFICATION	1.3734989678161046E-6	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999995230956475	WITHOUT_CLASSIFICATION	4.769043524768885E-7	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999987304457661	WITHOUT_CLASSIFICATION	1.2695542338418645E-6	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.9974122006993091	WITHOUT_CLASSIFICATION	0.0025877993006908984	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9998463758993689	WITHOUT_CLASSIFICATION	1.5362410063110218E-4	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999851540802938	WITHOUT_CLASSIFICATION	1.484591970615314E-5	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999994833297503	WITHOUT_CLASSIFICATION	5.166702495866384E-7	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.999996336806451	WITHOUT_CLASSIFICATION	3.6631935489623987E-6	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999999656689025	WITHOUT_CLASSIFICATION	3.433109747327008E-8	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999999424884286	WITHOUT_CLASSIFICATION	5.751157126209492E-8	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999997148111128	WITHOUT_CLASSIFICATION	2.8518888713260943E-7	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999998312673707	WITHOUT_CLASSIFICATION	1.6873262921304902E-7	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999745897015906	WITHOUT_CLASSIFICATION	2.5410298409419393E-5	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999998406624626	WITHOUT_CLASSIFICATION	1.5933753747215518E-7	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999992479872266	WITHOUT_CLASSIFICATION	7.520127732908326E-7	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999977569054446	WITHOUT_CLASSIFICATION	2.2430945555441327E-6	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999986421999912	WITHOUT_CLASSIFICATION	1.3578000087917498E-6	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9993037100591519	WITHOUT_CLASSIFICATION	6.962899408480767E-4	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.999962467313642	WITHOUT_CLASSIFICATION	3.753268635799965E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999862743970273	WITHOUT_CLASSIFICATION	1.37256029728118E-5	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999989174988474	WITHOUT_CLASSIFICATION	1.082501152610421E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999909190830093	WITHOUT_CLASSIFICATION	9.080916990730405E-6	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999804019416245	WITHOUT_CLASSIFICATION	1.9598058375446103E-5	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9999973820411068	WITHOUT_CLASSIFICATION	2.6179588932941276E-6	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999895682580714	WITHOUT_CLASSIFICATION	1.0431741928594701E-5	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9998506264987073	WITHOUT_CLASSIFICATION	1.4937350129278716E-4	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999999071140951	WITHOUT_CLASSIFICATION	9.288590483262538E-8	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999985994363428	WITHOUT_CLASSIFICATION	1.4005636571549892E-6	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999996957309871	WITHOUT_CLASSIFICATION	3.0426901284742383E-7	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999740137440971	WITHOUT_CLASSIFICATION	2.5986255902940458E-5	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999669585742452	WITHOUT_CLASSIFICATION	3.3041425754652986E-5	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9999956849017821	WITHOUT_CLASSIFICATION	4.315098217917258E-6	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999983735970636	WITHOUT_CLASSIFICATION	1.6264029364756078E-6	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999991739079572	WITHOUT_CLASSIFICATION	8.260920428297213E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999986216097971	WITHOUT_CLASSIFICATION	1.378390202967749E-6	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9950884819390234	WITHOUT_CLASSIFICATION	0.004911518060976615	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9997061463029938	WITHOUT_CLASSIFICATION	2.9385369700618563E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9997061463029938	WITHOUT_CLASSIFICATION	2.9385369700618563E-4	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999931323832746	WITHOUT_CLASSIFICATION	6.8676167253367215E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999972669884879	WITHOUT_CLASSIFICATION	2.7330115121390512E-6	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999660680304423	WITHOUT_CLASSIFICATION	3.3931969557636214E-5	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999875827039588	WITHOUT_CLASSIFICATION	1.241729604113584E-5	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999965256929105	WITHOUT_CLASSIFICATION	3.474307089540392E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9998316784615121	WITHOUT_CLASSIFICATION	1.6832153848787284E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9997571308498863	WITHOUT_CLASSIFICATION	2.42869150113601E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999998263719412	WITHOUT_CLASSIFICATION	1.7362805879507322E-7	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999998220724502	WITHOUT_CLASSIFICATION	1.779275497432422E-7	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999999994819532	WITHOUT_CLASSIFICATION	5.180468489679551E-10	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.999997674858713	WITHOUT_CLASSIFICATION	2.3251412870341053E-6	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999978313805192	WITHOUT_CLASSIFICATION	2.1686194807932025E-6	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999992889138221	WITHOUT_CLASSIFICATION	7.110861778468589E-7	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.99999998833577	WITHOUT_CLASSIFICATION	1.166422993210868E-8	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999808085249917	WITHOUT_CLASSIFICATION	1.9191475008263263E-5	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999877474825102	WITHOUT_CLASSIFICATION	1.2252517489825892E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999987687513711	WITHOUT_CLASSIFICATION	1.2312486288757069E-6	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999934596533789	WITHOUT_CLASSIFICATION	6.54034662098697E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9987657579748218	WITHOUT_CLASSIFICATION	0.0012342420251782876	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999996918331611	WITHOUT_CLASSIFICATION	3.081668389179612E-7	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999883699421808	WITHOUT_CLASSIFICATION	1.1630057819231405E-5	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999950825740754	WITHOUT_CLASSIFICATION	4.917425924596257E-6	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999977898821629	WITHOUT_CLASSIFICATION	2.210117837174139E-6	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999964228847952	WITHOUT_CLASSIFICATION	3.5771152049407695E-6	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999985081045707	WITHOUT_CLASSIFICATION	1.4918954293896255E-6	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999988470722097	WITHOUT_CLASSIFICATION	1.1529277904174282E-6	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999999846006036	WITHOUT_CLASSIFICATION	1.539939640009647E-8	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999754601378035	WITHOUT_CLASSIFICATION	2.4539862196464282E-5	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999998558723999	WITHOUT_CLASSIFICATION	1.441275999697115E-7	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9999961268147731	WITHOUT_CLASSIFICATION	3.873185226887168E-6	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999978024026644	WITHOUT_CLASSIFICATION	2.197597335598538E-6	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.999998998782956	WITHOUT_CLASSIFICATION	1.0012170441109673E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998422189902	WITHOUT_CLASSIFICATION	1.5778100984699722E-7	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999992969988386	WITHOUT_CLASSIFICATION	7.03001161297421E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998422189902	WITHOUT_CLASSIFICATION	1.5778100984699722E-7	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999943575777455	WITHOUT_CLASSIFICATION	5.6424222544817636E-6	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9993895401056834	WITHOUT_CLASSIFICATION	6.104598943165994E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9993895401056834	WITHOUT_CLASSIFICATION	6.104598943165994E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9993895401056834	WITHOUT_CLASSIFICATION	6.104598943165994E-4	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999998447081613	WITHOUT_CLASSIFICATION	1.5529183866317934E-7	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999998447081613	WITHOUT_CLASSIFICATION	1.5529183866317934E-7	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999999444451513	WITHOUT_CLASSIFICATION	5.5554848677540994E-8	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999324005686203	WITHOUT_CLASSIFICATION	6.759943137967886E-5	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999999530817902	WITHOUT_CLASSIFICATION	4.691820967297238E-8	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999999186438591	WITHOUT_CLASSIFICATION	8.135614089510283E-8	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999992353264928	WITHOUT_CLASSIFICATION	7.646735071987909E-7	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999997194029385	WITHOUT_CLASSIFICATION	2.805970614291904E-7	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.999999403084946	WITHOUT_CLASSIFICATION	5.969150540590313E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999996539125487	WITHOUT_CLASSIFICATION	3.460874511838445E-7	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999999976510777	WITHOUT_CLASSIFICATION	2.3489222737763353E-9	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.99999990097647	WITHOUT_CLASSIFICATION	9.902352995358006E-8	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999981296876382	WITHOUT_CLASSIFICATION	1.8703123618108078E-6	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9999163351741277	WITHOUT_CLASSIFICATION	8.366482587229605E-5	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999929326399585	WITHOUT_CLASSIFICATION	7.067360041443722E-6	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999996301850085	WITHOUT_CLASSIFICATION	3.698149915594691E-7	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999998330315204	WITHOUT_CLASSIFICATION	1.66968479538811E-7	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.999999514851147	WITHOUT_CLASSIFICATION	4.851488529341294E-7	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.999985961272111	WITHOUT_CLASSIFICATION	1.403872788896747E-5	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999974087006573	WITHOUT_CLASSIFICATION	2.5912993426274316E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999974087006573	WITHOUT_CLASSIFICATION	2.5912993426274316E-6	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999982313026151	WITHOUT_CLASSIFICATION	1.768697384833416E-6	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999997656410162	WITHOUT_CLASSIFICATION	2.3435898383263114E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999997656410162	WITHOUT_CLASSIFICATION	2.3435898383263114E-7	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9999264497037642	WITHOUT_CLASSIFICATION	7.355029623581086E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999993675751075	WITHOUT_CLASSIFICATION	6.324248924089407E-7	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999996183004602	WITHOUT_CLASSIFICATION	3.816995397665996E-7	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999976010756247	WITHOUT_CLASSIFICATION	2.398924375199486E-6	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999996382065681	WITHOUT_CLASSIFICATION	3.617934317975363E-7	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9999998616516307	WITHOUT_CLASSIFICATION	1.383483692895316E-7	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999989310557375	WITHOUT_CLASSIFICATION	1.0689442625876934E-6	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999823359200612	WITHOUT_CLASSIFICATION	1.7664079938707084E-5	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999998954597066	WITHOUT_CLASSIFICATION	1.0454029349176266E-7	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999973515970324	WITHOUT_CLASSIFICATION	2.6484029677012554E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999998542301088	WITHOUT_CLASSIFICATION	1.4576989114281726E-7	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999921723271051	WITHOUT_CLASSIFICATION	7.827672894810282E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999999311852313	WITHOUT_CLASSIFICATION	6.8814768622088E-8	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999983408500156	WITHOUT_CLASSIFICATION	1.6591499844155518E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999996539125487	WITHOUT_CLASSIFICATION	3.460874511838445E-7	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9999639932869394	WITHOUT_CLASSIFICATION	3.6006713060589586E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999993107877824	WITHOUT_CLASSIFICATION	6.892122177490824E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999179908613	WITHOUT_CLASSIFICATION	8.200913872771237E-8	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999179908613	WITHOUT_CLASSIFICATION	8.200913872771237E-8	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999474112118614	WITHOUT_CLASSIFICATION	5.258878813867457E-5	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9998849302175146	WITHOUT_CLASSIFICATION	1.1506978248553587E-4	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999987816856719	WITHOUT_CLASSIFICATION	1.218314328143781E-6	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999983058404075	WITHOUT_CLASSIFICATION	1.6941595924683948E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.999999810976694	WITHOUT_CLASSIFICATION	1.8902330598210202E-7	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999999493516851	WITHOUT_CLASSIFICATION	5.064831480663906E-8	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9997562373377065	WITHOUT_CLASSIFICATION	2.4376266229352456E-4	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9986283199212207	WITHOUT_CLASSIFICATION	0.0013716800787793326	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999991544664266	WITHOUT_CLASSIFICATION	8.455335732792935E-7	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9999841370049734	WITHOUT_CLASSIFICATION	1.5862995026645986E-5	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9999873830871812	WITHOUT_CLASSIFICATION	1.2616912818857215E-5	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9999950641494987	WITHOUT_CLASSIFICATION	4.935850501250083E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.6261328689305714	WITHOUT_CLASSIFICATION	0.3738671310694286	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999980381620699	WITHOUT_CLASSIFICATION	1.9618379301016395E-6	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.999999229249958	WITHOUT_CLASSIFICATION	7.707500420995647E-7	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9999972382925829	WITHOUT_CLASSIFICATION	2.761707417163003E-6	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999998053900899	WITHOUT_CLASSIFICATION	1.946099101733913E-7	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999999445488671	WITHOUT_CLASSIFICATION	5.545113294659541E-8	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999997693366279	WITHOUT_CLASSIFICATION	2.3066337209912422E-7	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999862357244281	WITHOUT_CLASSIFICATION	1.3764275571925124E-5	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999972326330472	WITHOUT_CLASSIFICATION	2.767366952814848E-6	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999991796661495	WITHOUT_CLASSIFICATION	8.203338504240694E-7	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.999999592037442	WITHOUT_CLASSIFICATION	4.079625579470088E-7	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999999632985553	WITHOUT_CLASSIFICATION	3.670144454760065E-8	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999894305764795	WITHOUT_CLASSIFICATION	1.0569423520438681E-5	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999975149577093	WITHOUT_CLASSIFICATION	2.485042290733293E-6	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9998590340298348	WITHOUT_CLASSIFICATION	1.409659701652959E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9477136434359635	WITHOUT_CLASSIFICATION	0.052286356564036435	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999998901553427	WITHOUT_CLASSIFICATION	1.0984465731850565E-7	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9999454245075802	WITHOUT_CLASSIFICATION	5.457549241980919E-5	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999757807112056	WITHOUT_CLASSIFICATION	2.421928879439742E-5	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999999978496732	WITHOUT_CLASSIFICATION	2.150326859647172E-9	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999007443655796	WITHOUT_CLASSIFICATION	9.925563442043452E-5	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9956460554514206	WITHOUT_CLASSIFICATION	0.004353944548579426	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.999999959102023	WITHOUT_CLASSIFICATION	4.089797691750698E-8	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999898450738095	WITHOUT_CLASSIFICATION	1.0154926190366472E-5	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9477136434359635	WITHOUT_CLASSIFICATION	0.052286356564036435	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.999996517059066	WITHOUT_CLASSIFICATION	3.4829409338899808E-6	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.999999959102023	WITHOUT_CLASSIFICATION	4.089797691750698E-8	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9999991378179565	WITHOUT_CLASSIFICATION	8.621820435631164E-7	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999998446043183	WITHOUT_CLASSIFICATION	1.5539568164345682E-7	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999996729800152	WITHOUT_CLASSIFICATION	3.2701998479350964E-7	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999966335361914	WITHOUT_CLASSIFICATION	3.3664638086248523E-6	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999996118937491	WITHOUT_CLASSIFICATION	3.88106250839338E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999918014367467	WITHOUT_CLASSIFICATION	8.198563253288152E-6	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999918014367467	WITHOUT_CLASSIFICATION	8.198563253288152E-6	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.999999949556315	WITHOUT_CLASSIFICATION	5.044368508196272E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999981813529644	WITHOUT_CLASSIFICATION	1.8186470356064143E-6	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999994172004786	WITHOUT_CLASSIFICATION	5.827995214308619E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999994172004786	WITHOUT_CLASSIFICATION	5.827995214308619E-7	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999257107612691	WITHOUT_CLASSIFICATION	7.428923873090575E-5	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9986174213416817	WITHOUT_CLASSIFICATION	0.0013825786583181983	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999100303308397	WITHOUT_CLASSIFICATION	8.996966916029889E-5	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999100303308397	WITHOUT_CLASSIFICATION	8.996966916029889E-5	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999643219746868	WITHOUT_CLASSIFICATION	3.5678025313158944E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999885105161453	WITHOUT_CLASSIFICATION	1.1489483854641737E-5	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999980509491927	WITHOUT_CLASSIFICATION	1.949050807292521E-6	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999989351044031	WITHOUT_CLASSIFICATION	1.0648955970248549E-6	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999933997659535	WITHOUT_CLASSIFICATION	6.600234046581844E-6	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999942889063913	WITHOUT_CLASSIFICATION	5.7110936087156335E-6	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999964803681337	WITHOUT_CLASSIFICATION	3.5196318661904087E-6	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999928283595131	WITHOUT_CLASSIFICATION	7.1716404868401065E-6	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999882319847069	WITHOUT_CLASSIFICATION	1.1768015293173442E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999971352190945	WITHOUT_CLASSIFICATION	2.864780905386658E-6	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999981138682552	WITHOUT_CLASSIFICATION	1.886131744807817E-6	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999861467333925	WITHOUT_CLASSIFICATION	1.3853266607445408E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999971508292987	WITHOUT_CLASSIFICATION	2.8491707011869297E-6	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.999996144767392	WITHOUT_CLASSIFICATION	3.855232608101945E-6	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999996617546237	WITHOUT_CLASSIFICATION	3.3824537622987713E-7	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999995938210067	WITHOUT_CLASSIFICATION	4.061789934071353E-7	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9997803614555649	WITHOUT_CLASSIFICATION	2.1963854443514852E-4	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999980211091011	WITHOUT_CLASSIFICATION	1.978890898851487E-6	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999931708916489	WITHOUT_CLASSIFICATION	6.8291083511363756E-6	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999755242657452	WITHOUT_CLASSIFICATION	2.447573425488565E-5	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999993458520369	WITHOUT_CLASSIFICATION	6.541479631333077E-7	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999988202250909	WITHOUT_CLASSIFICATION	1.1797749091305763E-6	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999831159043073	WITHOUT_CLASSIFICATION	1.6884095692649608E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999737313231906	WITHOUT_CLASSIFICATION	2.6268676809406716E-5	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999445936062984	WITHOUT_CLASSIFICATION	5.5406393701534696E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999725532756527	WITHOUT_CLASSIFICATION	2.7446724347302643E-5	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999957101277354	WITHOUT_CLASSIFICATION	4.289872264587696E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999857224045958	WITHOUT_CLASSIFICATION	1.427759540408681E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999944078181328	WITHOUT_CLASSIFICATION	5.592181867195879E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999944078181328	WITHOUT_CLASSIFICATION	5.592181867195879E-6	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999978130767174	WITHOUT_CLASSIFICATION	2.1869232825839497E-6	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999993897280797	WITHOUT_CLASSIFICATION	6.102719202712297E-7	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999902606023702	WITHOUT_CLASSIFICATION	9.739397629793286E-6	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9998654135972971	WITHOUT_CLASSIFICATION	1.3458640270299775E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999867885482708	WITHOUT_CLASSIFICATION	1.3211451729223724E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.99999010600179	WITHOUT_CLASSIFICATION	9.893998210146572E-6	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999985284875441	WITHOUT_CLASSIFICATION	1.4715124559162294E-6	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999987689264704	WITHOUT_CLASSIFICATION	1.2310735295413245E-6	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999375362118385	WITHOUT_CLASSIFICATION	6.246378816158023E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999877640698	WITHOUT_CLASSIFICATION	1.2235930178311528E-8	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999998142475922	WITHOUT_CLASSIFICATION	1.8575240779935243E-7	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999998663765	WITHOUT_CLASSIFICATION	1.3362349993709104E-7	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999973454857157	WITHOUT_CLASSIFICATION	2.654514284305974E-6	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999947986521248	WITHOUT_CLASSIFICATION	5.201347875143097E-6	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999991960920278	WITHOUT_CLASSIFICATION	8.039079722815864E-7	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999997935310719	WITHOUT_CLASSIFICATION	2.064689281277768E-7	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999937954935185	WITHOUT_CLASSIFICATION	6.204506481453779E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999986707900095	WITHOUT_CLASSIFICATION	1.329209990533057E-6	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999949868366229	WITHOUT_CLASSIFICATION	5.0131633770784E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.999988684490813	WITHOUT_CLASSIFICATION	1.131550918700099E-5	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999998602605328	WITHOUT_CLASSIFICATION	1.3973946717781546E-7	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999809750472565	WITHOUT_CLASSIFICATION	1.902495274354684E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999998670411469	WITHOUT_CLASSIFICATION	1.329588530760109E-7	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999999633970035	WITHOUT_CLASSIFICATION	3.660299640632317E-8	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.999998348259117	WITHOUT_CLASSIFICATION	1.65174088287536E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999990721188912	WITHOUT_CLASSIFICATION	9.278811089677479E-7	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999818862276876	WITHOUT_CLASSIFICATION	1.81137723124151E-5	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999997741753762	WITHOUT_CLASSIFICATION	2.258246238295296E-7	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999917689031461	WITHOUT_CLASSIFICATION	8.231096853929051E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999999208296748	WITHOUT_CLASSIFICATION	7.917032512186954E-8	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999885942325125	WITHOUT_CLASSIFICATION	1.1405767487533838E-5	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.999999791539287	WITHOUT_CLASSIFICATION	2.0846071306041586E-7	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999999472261126	WITHOUT_CLASSIFICATION	5.277388735417369E-8	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999972031662948	WITHOUT_CLASSIFICATION	2.796833705230414E-6	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999996367933668	WITHOUT_CLASSIFICATION	3.632066331487014E-7	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9999968463567582	WITHOUT_CLASSIFICATION	3.153643241738136E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999981985328535	WITHOUT_CLASSIFICATION	1.8014671464928822E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999984440087584	WITHOUT_CLASSIFICATION	1.555991241698772E-6	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.999999996321251	WITHOUT_CLASSIFICATION	3.6787488774861062E-9	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999997651580921	WITHOUT_CLASSIFICATION	2.3484190783881015E-7	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9996157855238929	WITHOUT_CLASSIFICATION	3.84214476107055E-4	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999999962109197	WITHOUT_CLASSIFICATION	3.7890803354357044E-9	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.999877338476845	WITHOUT_CLASSIFICATION	1.2266152315501796E-4	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.999877338476845	WITHOUT_CLASSIFICATION	1.2266152315501796E-4	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999999803142288	WITHOUT_CLASSIFICATION	1.9685771231304586E-8	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999437737718256	WITHOUT_CLASSIFICATION	5.6226228174331704E-5	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999967560193008	WITHOUT_CLASSIFICATION	3.2439806992952716E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999992246715553	WITHOUT_CLASSIFICATION	7.753284447193568E-7	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.999999867331642	WITHOUT_CLASSIFICATION	1.3266835794108154E-7	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999515541192	WITHOUT_CLASSIFICATION	4.8445880781470384E-8	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999974211658728	WITHOUT_CLASSIFICATION	2.5788341272616222E-6	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999954445892603	WITHOUT_CLASSIFICATION	4.5554107397335455E-6	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9401749407081054	WITHOUT_CLASSIFICATION	0.05982505929189463	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999356359641909	WITHOUT_CLASSIFICATION	6.436403580909322E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999993860939256	WITHOUT_CLASSIFICATION	6.139060744521872E-7	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999995535910499	WITHOUT_CLASSIFICATION	4.464089501483477E-7	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999998720030603	WITHOUT_CLASSIFICATION	1.2799693977952156E-7	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999999468173154	WITHOUT_CLASSIFICATION	5.3182684726602325E-8	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999999634388613	WITHOUT_CLASSIFICATION	3.656113876041033E-8	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999998748473236	WITHOUT_CLASSIFICATION	1.2515267642376254E-7	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.999999877799288	WITHOUT_CLASSIFICATION	1.2220071207033517E-7	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999962859746855	WITHOUT_CLASSIFICATION	3.714025314567334E-6	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999991493566187	WITHOUT_CLASSIFICATION	8.506433812716578E-7	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999961922794375	WITHOUT_CLASSIFICATION	3.8077205624650654E-6	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999997618220652	WITHOUT_CLASSIFICATION	2.381779348796996E-7	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999935545752011	WITHOUT_CLASSIFICATION	6.445424798950709E-6	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999997417737704	WITHOUT_CLASSIFICATION	2.582262296702991E-7	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999998263775074	WITHOUT_CLASSIFICATION	1.7362249262234788E-7	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999564961499	WITHOUT_CLASSIFICATION	4.3503850058919707E-8	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999996821179915	WITHOUT_CLASSIFICATION	3.17882008453518E-7	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999998304677223	WITHOUT_CLASSIFICATION	1.6953227773219668E-7	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999999067769346	WITHOUT_CLASSIFICATION	9.322306537584554E-8	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999998673602624	WITHOUT_CLASSIFICATION	1.326397375431744E-7	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999998249220127	WITHOUT_CLASSIFICATION	1.7507798743504245E-7	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999996415888178	WITHOUT_CLASSIFICATION	3.584111821664665E-7	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999997526240928	WITHOUT_CLASSIFICATION	2.4737590721796864E-7	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999971165708967	WITHOUT_CLASSIFICATION	2.8834291033974524E-6	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999977771899219	WITHOUT_CLASSIFICATION	2.2228100781582957E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999984440087584	WITHOUT_CLASSIFICATION	1.555991241698772E-6	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999992284133884	WITHOUT_CLASSIFICATION	7.715866115151816E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999699216057	WITHOUT_CLASSIFICATION	3.007839425810616E-8	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999699216057	WITHOUT_CLASSIFICATION	3.007839425810616E-8	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999916816418093	WITHOUT_CLASSIFICATION	8.318358190683552E-6	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.999993269731454	WITHOUT_CLASSIFICATION	6.730268546088125E-6	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999996327757845	WITHOUT_CLASSIFICATION	3.672242155688901E-7	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.99999908588114	WITHOUT_CLASSIFICATION	9.141188601713163E-7	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999988141540782	WITHOUT_CLASSIFICATION	1.1858459218942664E-6	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999993098165649	WITHOUT_CLASSIFICATION	6.901834350436685E-7	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999995270793497	WITHOUT_CLASSIFICATION	4.7292065030168635E-7	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999969931636764	WITHOUT_CLASSIFICATION	3.006836323537953E-6	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999978030319462	WITHOUT_CLASSIFICATION	2.196968053878332E-6	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999983975733601	WITHOUT_CLASSIFICATION	1.6024266400264814E-6	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999904287909555	WITHOUT_CLASSIFICATION	9.571209044480587E-6	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999971107283823	WITHOUT_CLASSIFICATION	2.8892716177640304E-6	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999984629300877	WITHOUT_CLASSIFICATION	1.5370699123029856E-6	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999990609894386	WITHOUT_CLASSIFICATION	9.390105613821098E-7	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999995960455255	WITHOUT_CLASSIFICATION	4.0395447455242916E-7	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.999956434558998	WITHOUT_CLASSIFICATION	4.356544100197678E-5	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.999980570816614	WITHOUT_CLASSIFICATION	1.9429183386100166E-5	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999943026014795	WITHOUT_CLASSIFICATION	5.697398520534441E-6	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999973705938034	WITHOUT_CLASSIFICATION	2.629406196514943E-6	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999980821609934	WITHOUT_CLASSIFICATION	1.917839006530067E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999842516412477	WITHOUT_CLASSIFICATION	1.5748358752372006E-5	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999990463829429	WITHOUT_CLASSIFICATION	9.536170570511527E-7	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999998647171195	WITHOUT_CLASSIFICATION	1.3528288051261015E-7	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999975908815276	WITHOUT_CLASSIFICATION	2.4091184723538912E-6	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999932475652591	WITHOUT_CLASSIFICATION	6.752434740968077E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999988773023262	WITHOUT_CLASSIFICATION	1.1226976737742385E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999976322287605	WITHOUT_CLASSIFICATION	2.367771239591168E-6	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999884552253	WITHOUT_CLASSIFICATION	1.1544774680606864E-8	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999986266232797	WITHOUT_CLASSIFICATION	1.3733767203748422E-6	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.999999946298728	WITHOUT_CLASSIFICATION	5.370127199370455E-8	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999999851050596	WITHOUT_CLASSIFICATION	1.489494041221221E-8	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999956539681314	WITHOUT_CLASSIFICATION	4.346031868611424E-6	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999985374606626	WITHOUT_CLASSIFICATION	1.4625393373504561E-6	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999984231217789	WITHOUT_CLASSIFICATION	1.576878221099238E-6	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999994579650562	WITHOUT_CLASSIFICATION	5.420349438212872E-7	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999967223892222	WITHOUT_CLASSIFICATION	3.2776107779138725E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999987810556749	WITHOUT_CLASSIFICATION	1.2189443250983543E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999988773023262	WITHOUT_CLASSIFICATION	1.1226976737742385E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999976322287605	WITHOUT_CLASSIFICATION	2.367771239591168E-6	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999884552253	WITHOUT_CLASSIFICATION	1.1544774680606864E-8	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.999999946298728	WITHOUT_CLASSIFICATION	5.370127199370455E-8	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.999870300835971	WITHOUT_CLASSIFICATION	1.2969916402902202E-4	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.999999504379689	WITHOUT_CLASSIFICATION	4.956203111260984E-7	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999883497268368	WITHOUT_CLASSIFICATION	1.1650273163120208E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999978659177672	WITHOUT_CLASSIFICATION	2.1340822328249406E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999985026337943	WITHOUT_CLASSIFICATION	1.4973662057032302E-6	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999990330114115	WITHOUT_CLASSIFICATION	9.669885885337647E-7	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999999213881305	WITHOUT_CLASSIFICATION	7.86118694885986E-8	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999689758121945	WITHOUT_CLASSIFICATION	3.102418780553255E-5	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999996318837797	WITHOUT_CLASSIFICATION	3.6811622026150495E-7	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999993550202816	WITHOUT_CLASSIFICATION	6.449797183661676E-7	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999996388639893	WITHOUT_CLASSIFICATION	3.6113601064803753E-7	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999997148826183	WITHOUT_CLASSIFICATION	2.8511738169885457E-7	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999960001655417	WITHOUT_CLASSIFICATION	3.999834458274959E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999997968080514	WITHOUT_CLASSIFICATION	2.03191948487509E-7	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999987610157401	WITHOUT_CLASSIFICATION	1.2389842598686546E-6	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999986489245454	WITHOUT_CLASSIFICATION	1.3510754546325E-6	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999996632586396	WITHOUT_CLASSIFICATION	3.3674136038832103E-7	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999921473500505	WITHOUT_CLASSIFICATION	7.852649949642014E-6	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999992855297535	WITHOUT_CLASSIFICATION	7.144702466393806E-7	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999987810556749	WITHOUT_CLASSIFICATION	1.2189443250983543E-6	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.999999504379689	WITHOUT_CLASSIFICATION	4.956203111260984E-7	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999883497268368	WITHOUT_CLASSIFICATION	1.1650273163120208E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999985026337943	WITHOUT_CLASSIFICATION	1.4973662057032302E-6	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999990330114115	WITHOUT_CLASSIFICATION	9.669885885337647E-7	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999999213881305	WITHOUT_CLASSIFICATION	7.86118694885986E-8	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999689758121945	WITHOUT_CLASSIFICATION	3.102418780553255E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999975681104184	WITHOUT_CLASSIFICATION	2.431889581571749E-6	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999959969578917	WITHOUT_CLASSIFICATION	4.003042108384144E-6	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999998688530846	WITHOUT_CLASSIFICATION	1.3114691540744314E-7	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999999678041191	WITHOUT_CLASSIFICATION	3.219588089862635E-8	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999309898970269	WITHOUT_CLASSIFICATION	6.901010297305266E-5	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999309898970269	WITHOUT_CLASSIFICATION	6.901010297305266E-5	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.999997959376114	WITHOUT_CLASSIFICATION	2.040623886062074E-6	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999999921082164	WITHOUT_CLASSIFICATION	7.891783630150767E-9	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999998412562553	WITHOUT_CLASSIFICATION	1.5874374471713426E-7	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999973874115878	WITHOUT_CLASSIFICATION	2.6125884121001334E-6	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.999999991785809	WITHOUT_CLASSIFICATION	8.214191063597028E-9	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999965016751885	WITHOUT_CLASSIFICATION	3.4983248114606973E-6	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999998355582964	WITHOUT_CLASSIFICATION	1.6444170358752407E-7	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.999999631624958	WITHOUT_CLASSIFICATION	3.683750419880056E-7	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999992696874717	WITHOUT_CLASSIFICATION	7.303125284350564E-7	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999999325319422	WITHOUT_CLASSIFICATION	6.746805779474042E-8	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999999376227907	WITHOUT_CLASSIFICATION	6.237720930372135E-8	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999997841147784	WITHOUT_CLASSIFICATION	2.1588522158567793E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999887506342562	WITHOUT_CLASSIFICATION	1.1249365743708179E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999987132096219	WITHOUT_CLASSIFICATION	1.2867903781674255E-6	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999999887037323	WITHOUT_CLASSIFICATION	1.1296267823605136E-8	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999999192731789	WITHOUT_CLASSIFICATION	8.072682109415399E-8	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999999850891184	WITHOUT_CLASSIFICATION	1.491088163249125E-8	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999999739933514	WITHOUT_CLASSIFICATION	2.600664855726346E-8	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999990797995418	WITHOUT_CLASSIFICATION	9.20200458085297E-7	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999999813659232	WITHOUT_CLASSIFICATION	1.863407687468265E-8	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9999838010492362	WITHOUT_CLASSIFICATION	1.6198950763769546E-5	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999978186851799	WITHOUT_CLASSIFICATION	2.181314820022802E-6	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999998482400203	WITHOUT_CLASSIFICATION	1.5175997962423812E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9968947630407177	WITHOUT_CLASSIFICATION	0.0031052369592824416	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998695159699	WITHOUT_CLASSIFICATION	1.3048403016683775E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999996530753336	WITHOUT_CLASSIFICATION	3.469246664045051E-7	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999997674093388	WITHOUT_CLASSIFICATION	2.3259066120746898E-7	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999499358637806	WITHOUT_CLASSIFICATION	5.0064136219510695E-5	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999826234664093	WITHOUT_CLASSIFICATION	1.7376533590755603E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998695159699	WITHOUT_CLASSIFICATION	1.3048403016683775E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999996530753336	WITHOUT_CLASSIFICATION	3.469246664045051E-7	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999987132096219	WITHOUT_CLASSIFICATION	1.2867903781674255E-6	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999997233419061	WITHOUT_CLASSIFICATION	2.7665809383443683E-7	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999988581737462	WITHOUT_CLASSIFICATION	1.141826253748202E-6	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9987409382757415	WITHOUT_CLASSIFICATION	0.0012590617242584478	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999401827167823	WITHOUT_CLASSIFICATION	5.98172832177946E-5	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999998720172659	WITHOUT_CLASSIFICATION	1.2798273413505602E-7	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999765450059191	WITHOUT_CLASSIFICATION	2.345499408082161E-5	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9999985654591838	WITHOUT_CLASSIFICATION	1.4345408162636998E-6	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999999136472155	WITHOUT_CLASSIFICATION	8.635278443066025E-8	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9920551911758211	WITHOUT_CLASSIFICATION	0.007944808824178836	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999779868464751	WITHOUT_CLASSIFICATION	2.2013153524880062E-5	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9991271837873538	WITHOUT_CLASSIFICATION	8.728162126462139E-4	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999973880088088	WITHOUT_CLASSIFICATION	2.611991191174002E-6	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999983430385668	WITHOUT_CLASSIFICATION	1.6569614331934193E-6	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999994753655	WITHOUT_CLASSIFICATION	5.246344999294279E-7	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999968731040934	WITHOUT_CLASSIFICATION	3.12689590669041E-6	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9999862962524337	WITHOUT_CLASSIFICATION	1.3703747566168734E-5	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9998497461671112	WITHOUT_CLASSIFICATION	1.5025383288873903E-4	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999851160036859	WITHOUT_CLASSIFICATION	1.4883996314224037E-5	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999995794014	WITHOUT_CLASSIFICATION	4.2059850829720906E-10	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999959778870859	WITHOUT_CLASSIFICATION	4.022112914071984E-6	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999698694944	WITHOUT_CLASSIFICATION	3.01305057046026E-8	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999769301420195	WITHOUT_CLASSIFICATION	2.306985798043231E-5	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999957477626973	WITHOUT_CLASSIFICATION	4.2522373026618755E-6	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999999382066856	WITHOUT_CLASSIFICATION	6.17933143190657E-8	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999999974003229	WITHOUT_CLASSIFICATION	2.5996771808727017E-9	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999974275618976	WITHOUT_CLASSIFICATION	2.572438102474207E-6	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999977587995434	WITHOUT_CLASSIFICATION	2.2412004565113222E-6	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999954123046774	WITHOUT_CLASSIFICATION	4.587695322659019E-6	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999811791716317	WITHOUT_CLASSIFICATION	1.8820828368404408E-5	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9990148758998803	WITHOUT_CLASSIFICATION	9.85124100119756E-4	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999994531470632	WITHOUT_CLASSIFICATION	5.468529367818508E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997591470712	WITHOUT_CLASSIFICATION	2.4085292873060633E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997591470712	WITHOUT_CLASSIFICATION	2.4085292873060633E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999887506342562	WITHOUT_CLASSIFICATION	1.1249365743708179E-5	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.999999942628212	WITHOUT_CLASSIFICATION	5.73717880343056E-8	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999971613903756	WITHOUT_CLASSIFICATION	2.8386096244358416E-6	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999945811174786	WITHOUT_CLASSIFICATION	5.41888252141332E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999979646060362	WITHOUT_CLASSIFICATION	2.035393963746835E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999979646060362	WITHOUT_CLASSIFICATION	2.035393963746835E-6	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999996282892981	WITHOUT_CLASSIFICATION	3.7171070178377143E-7	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999999978625606	WITHOUT_CLASSIFICATION	2.1374394276270597E-9	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999998790342698	WITHOUT_CLASSIFICATION	1.2096573029369443E-7	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999998421438965	WITHOUT_CLASSIFICATION	1.5785610352295466E-7	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999912347331951	WITHOUT_CLASSIFICATION	8.765266804882835E-6	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999999705459279	WITHOUT_CLASSIFICATION	2.9454071984378893E-8	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999938046512019	WITHOUT_CLASSIFICATION	6.195348798159529E-6	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999999895944397	WITHOUT_CLASSIFICATION	1.0405560351429224E-8	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.999998961570086	WITHOUT_CLASSIFICATION	1.038429913923914E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999996642947125	WITHOUT_CLASSIFICATION	3.357052874715627E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999929005680169	WITHOUT_CLASSIFICATION	7.099431983063142E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999992774484355	WITHOUT_CLASSIFICATION	7.22551564543587E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999795508025034	WITHOUT_CLASSIFICATION	2.0449197496566224E-5	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999784107499754	WITHOUT_CLASSIFICATION	2.158925002460223E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999985609115485	WITHOUT_CLASSIFICATION	1.4390884515028467E-6	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999990523199314	WITHOUT_CLASSIFICATION	9.476800686395096E-7	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999765654976	WITHOUT_CLASSIFICATION	2.3434502440404714E-8	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999765654976	WITHOUT_CLASSIFICATION	2.3434502440404714E-8	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999957443518579	WITHOUT_CLASSIFICATION	4.2556481420352805E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999957443518579	WITHOUT_CLASSIFICATION	4.2556481420352805E-6	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999999875617632	WITHOUT_CLASSIFICATION	1.2438236850065447E-8	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999818204424844	WITHOUT_CLASSIFICATION	1.817955751563012E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9990299464467756	WITHOUT_CLASSIFICATION	9.700535532244337E-4	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999999954758727	WITHOUT_CLASSIFICATION	4.524127249284214E-9	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999915332375813	WITHOUT_CLASSIFICATION	8.466762418704445E-6	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999802130795556	WITHOUT_CLASSIFICATION	1.978692044432778E-5	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999999602449496	WITHOUT_CLASSIFICATION	3.9755050400670106E-8	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999992774484355	WITHOUT_CLASSIFICATION	7.22551564543587E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999795508025034	WITHOUT_CLASSIFICATION	2.0449197496566224E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999985609115485	WITHOUT_CLASSIFICATION	1.4390884515028467E-6	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999493649220408	WITHOUT_CLASSIFICATION	5.063507795912613E-5	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9996836732110802	WITHOUT_CLASSIFICATION	3.163267889198376E-4	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9938110198744596	WITHOUT_CLASSIFICATION	0.006188980125540408	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9999985836708712	WITHOUT_CLASSIFICATION	1.4163291287975096E-6	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999986455437544	WITHOUT_CLASSIFICATION	1.3544562455772226E-6	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9999956687401028	WITHOUT_CLASSIFICATION	4.331259897149043E-6	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999991855540574	WITHOUT_CLASSIFICATION	8.144459426538661E-7	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999996270220607	WITHOUT_CLASSIFICATION	3.7297793925269543E-7	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999995671899451	WITHOUT_CLASSIFICATION	4.328100549186196E-7	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999998440114249	WITHOUT_CLASSIFICATION	1.5598857501887317E-7	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999726606583146	WITHOUT_CLASSIFICATION	2.7339341685395974E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9995348877361356	WITHOUT_CLASSIFICATION	4.6511226386438347E-4	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999547597362577	WITHOUT_CLASSIFICATION	4.524026374236859E-5	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9995784848157234	WITHOUT_CLASSIFICATION	4.215151842765979E-4	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999638155960401	WITHOUT_CLASSIFICATION	3.618440395993041E-5	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999997840053652	WITHOUT_CLASSIFICATION	2.1599463479109488E-7	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9999663137591616	WITHOUT_CLASSIFICATION	3.368624083843279E-5	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999994490904379	WITHOUT_CLASSIFICATION	5.509095619823135E-7	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999955545499479	WITHOUT_CLASSIFICATION	4.445450052117262E-6	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999990244791007	WITHOUT_CLASSIFICATION	9.75520899363505E-7	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999993288803731	WITHOUT_CLASSIFICATION	6.711196268397317E-7	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999721630983669	WITHOUT_CLASSIFICATION	2.7836901633128987E-5	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999158711568178	WITHOUT_CLASSIFICATION	8.412884318229504E-5	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999995056675934	WITHOUT_CLASSIFICATION	4.943324065221779E-7	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999997676457387	WITHOUT_CLASSIFICATION	2.3235426131909792E-7	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999506679328068	WITHOUT_CLASSIFICATION	4.93320671932021E-5	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.999841076766362	WITHOUT_CLASSIFICATION	1.589232336379764E-4	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999806218576128	WITHOUT_CLASSIFICATION	1.9378142387141906E-5	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999990926765107	WITHOUT_CLASSIFICATION	9.073234892554203E-7	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.993377085212588	WITHOUT_CLASSIFICATION	0.006622914787411896	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999774686794928	WITHOUT_CLASSIFICATION	2.253132050731902E-5	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9996555404467287	WITHOUT_CLASSIFICATION	3.444595532713592E-4	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999940928781154	WITHOUT_CLASSIFICATION	5.9071218845789215E-6	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999869073058714	WITHOUT_CLASSIFICATION	1.309269412858636E-5	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9997595440086577	WITHOUT_CLASSIFICATION	2.4045599134237938E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.999999935322386	WITHOUT_CLASSIFICATION	6.467761405641191E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999988232215351	WITHOUT_CLASSIFICATION	1.176778464911734E-6	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9998510976185723	WITHOUT_CLASSIFICATION	1.489023814276373E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999699492769121	WITHOUT_CLASSIFICATION	3.0050723087872997E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999983666440178	WITHOUT_CLASSIFICATION	1.6333559822102792E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999823614839174	WITHOUT_CLASSIFICATION	1.7638516082636278E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999971613903756	WITHOUT_CLASSIFICATION	2.8386096244358416E-6	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999988232215351	WITHOUT_CLASSIFICATION	1.176778464911734E-6	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999870094857128	WITHOUT_CLASSIFICATION	1.2990514287181139E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999522035269253	WITHOUT_CLASSIFICATION	4.779647307479178E-5	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9995912139015022	WITHOUT_CLASSIFICATION	4.087860984977803E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9995565472195209	WITHOUT_CLASSIFICATION	4.4345278047903356E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9995565472195209	WITHOUT_CLASSIFICATION	4.4345278047903356E-4	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999999399071509	WITHOUT_CLASSIFICATION	6.009284920937147E-8	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.999999921201772	WITHOUT_CLASSIFICATION	7.879822800198372E-8	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999962911557003	WITHOUT_CLASSIFICATION	3.70884429979901E-6	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999999802006473	WITHOUT_CLASSIFICATION	1.979935268044357E-8	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999807420149297	WITHOUT_CLASSIFICATION	1.925798507034322E-5	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999992984810055	WITHOUT_CLASSIFICATION	7.015189944849831E-7	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999999643928186	WITHOUT_CLASSIFICATION	3.5607181406784295E-8	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999990425977661	WITHOUT_CLASSIFICATION	9.574022339657504E-7	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999996047573264	WITHOUT_CLASSIFICATION	3.952426736346393E-7	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999996047573264	WITHOUT_CLASSIFICATION	3.952426736346393E-7	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999997654372057	WITHOUT_CLASSIFICATION	2.3456279435002088E-7	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999753808896843	WITHOUT_CLASSIFICATION	2.4619110315766876E-5	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999999830518285	WITHOUT_CLASSIFICATION	1.6948171491048798E-8	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999999950528773	WITHOUT_CLASSIFICATION	4.947122688291728E-9	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999993333629787	WITHOUT_CLASSIFICATION	6.666370212061426E-7	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999920012803066	WITHOUT_CLASSIFICATION	7.998719693317772E-6	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999962914285142	WITHOUT_CLASSIFICATION	3.7085714857348135E-6	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999995178204187	WITHOUT_CLASSIFICATION	4.821795812929435E-7	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999999618588857	WITHOUT_CLASSIFICATION	3.8141114238872894E-8	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9997411975466164	WITHOUT_CLASSIFICATION	2.588024533836008E-4	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.999998863306896	WITHOUT_CLASSIFICATION	1.1366931039201428E-6	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999993851465206	WITHOUT_CLASSIFICATION	6.148534794337543E-7	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999997198998414	WITHOUT_CLASSIFICATION	2.8010015861253766E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999984293766022	WITHOUT_CLASSIFICATION	1.5706233978098504E-6	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999984293766022	WITHOUT_CLASSIFICATION	1.5706233978098504E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.999998650333362	WITHOUT_CLASSIFICATION	1.3496666380001777E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999689758121945	WITHOUT_CLASSIFICATION	3.102418780553255E-5	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999792271525907	WITHOUT_CLASSIFICATION	2.077284740937009E-5	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999974868024094	WITHOUT_CLASSIFICATION	2.5131975905621227E-6	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.999998904645626	WITHOUT_CLASSIFICATION	1.0953543739219542E-6	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999546841305139	WITHOUT_CLASSIFICATION	4.531586948596269E-5	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999992031737094	WITHOUT_CLASSIFICATION	7.96826290709837E-7	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999980491070171	WITHOUT_CLASSIFICATION	1.950892982853681E-6	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999980492723755	WITHOUT_CLASSIFICATION	1.9507276245584264E-6	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999996748015758	WITHOUT_CLASSIFICATION	3.2519842414728445E-7	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999910939232999	WITHOUT_CLASSIFICATION	8.906076700043124E-6	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999995129890505	WITHOUT_CLASSIFICATION	4.870109494213937E-7	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999906055318203	WITHOUT_CLASSIFICATION	9.394468179687857E-6	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999997457433122	WITHOUT_CLASSIFICATION	2.5425668785462136E-7	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999831376281585	WITHOUT_CLASSIFICATION	1.6862371841557384E-5	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999992951065189	WITHOUT_CLASSIFICATION	7.048934810860064E-7	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999994389433324	WITHOUT_CLASSIFICATION	5.610566675436057E-7	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999976338469952	WITHOUT_CLASSIFICATION	2.3661530047796643E-6	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999996966924984	WITHOUT_CLASSIFICATION	3.033075015891374E-7	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9999579739626071	WITHOUT_CLASSIFICATION	4.202603739293499E-5	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9997753578467454	WITHOUT_CLASSIFICATION	2.2464215325442797E-4	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999899404514458	WITHOUT_CLASSIFICATION	1.0059548554203919E-5	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999960561596963	WITHOUT_CLASSIFICATION	3.943840303636056E-6	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9997277615327977	WITHOUT_CLASSIFICATION	2.7223846720233525E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.9587110731856199	WITHOUT_CLASSIFICATION	0.04128892681438008	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9999960969752003	WITHOUT_CLASSIFICATION	3.903024799768973E-6	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.999999964181776	WITHOUT_CLASSIFICATION	3.581822414623226E-8	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999999537694907	WITHOUT_CLASSIFICATION	4.623050930836827E-8	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999999642295452	WITHOUT_CLASSIFICATION	3.577045486565363E-8	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.999919533167047	WITHOUT_CLASSIFICATION	8.046683295302856E-5	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999999681271285	WITHOUT_CLASSIFICATION	3.1872871489111855E-8	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999996429225965	WITHOUT_CLASSIFICATION	3.570774035309248E-7	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999998129268989	WITHOUT_CLASSIFICATION	1.8707310097447344E-7	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999999445386344	WITHOUT_CLASSIFICATION	5.5461365676356076E-8	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999993440243948	WITHOUT_CLASSIFICATION	6.559756051063716E-7	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999999925572991	WITHOUT_CLASSIFICATION	7.442700894150665E-9	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999994335894107	WITHOUT_CLASSIFICATION	5.664105893566352E-7	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999370981010425	WITHOUT_CLASSIFICATION	6.290189895746001E-5	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999909934303233	WITHOUT_CLASSIFICATION	9.006569676674054E-6	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999711588766623	WITHOUT_CLASSIFICATION	2.8841123337619645E-5	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999999531469882	WITHOUT_CLASSIFICATION	4.68530118669221E-8	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9999211154086376	WITHOUT_CLASSIFICATION	7.888459136245216E-5	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.999999926015632	WITHOUT_CLASSIFICATION	7.398436792994224E-8	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999936913246014	WITHOUT_CLASSIFICATION	6.308675398636928E-6	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999302259180701	WITHOUT_CLASSIFICATION	6.977408192990073E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999633267529995	WITHOUT_CLASSIFICATION	3.6673247000562344E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999997118193079	WITHOUT_CLASSIFICATION	2.8818069206557745E-7	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.999999146201207	WITHOUT_CLASSIFICATION	8.537987931160529E-7	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999997741814651	WITHOUT_CLASSIFICATION	2.2581853491435086E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998695159699	WITHOUT_CLASSIFICATION	1.3048403016683775E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998695159699	WITHOUT_CLASSIFICATION	1.3048403016683775E-7	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999999330448329	WITHOUT_CLASSIFICATION	6.695516711024669E-8	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9999894166554123	WITHOUT_CLASSIFICATION	1.0583344587683335E-5	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999972937074352	WITHOUT_CLASSIFICATION	2.7062925648161924E-6	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.8633628746607156	WITHOUT_CLASSIFICATION	0.1366371253392844	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999996600107631	WITHOUT_CLASSIFICATION	3.399892368285989E-7	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999999058425569	WITHOUT_CLASSIFICATION	9.415744306611878E-8	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999883338973913	WITHOUT_CLASSIFICATION	1.1666102608714524E-5	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9999993316509196	WITHOUT_CLASSIFICATION	6.683490805308309E-7	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9990353931391828	WITHOUT_CLASSIFICATION	9.646068608171383E-4	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999993106182318	WITHOUT_CLASSIFICATION	6.893817682011317E-7	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.999999392725401	WITHOUT_CLASSIFICATION	6.072745989996095E-7	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.999999392725401	WITHOUT_CLASSIFICATION	6.072745989996095E-7	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.999999392725401	WITHOUT_CLASSIFICATION	6.072745989996095E-7	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999296730082528	WITHOUT_CLASSIFICATION	7.032699174722275E-5	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999995910407573	WITHOUT_CLASSIFICATION	4.089592426018304E-7	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999993977092567	WITHOUT_CLASSIFICATION	6.0229074327396E-7	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999961894306563	WITHOUT_CLASSIFICATION	3.8105693436597017E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999961894306563	WITHOUT_CLASSIFICATION	3.8105693436597017E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.999934707064772	WITHOUT_CLASSIFICATION	6.529293522787092E-5	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999883337223607	WITHOUT_CLASSIFICATION	1.166627763923834E-5	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999991864979867	WITHOUT_CLASSIFICATION	8.135020133448109E-7	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999993034581747	WITHOUT_CLASSIFICATION	6.96541825403866E-7	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999962585388485	WITHOUT_CLASSIFICATION	3.7414611515704063E-6	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999583357865554	WITHOUT_CLASSIFICATION	4.1664213444637995E-5	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999998021848665	WITHOUT_CLASSIFICATION	1.9781513351195604E-7	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999761911478606	WITHOUT_CLASSIFICATION	2.3808852139396612E-5	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9925631147667363	WITHOUT_CLASSIFICATION	0.007436885233263616	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999982527583882	WITHOUT_CLASSIFICATION	1.7472416119356676E-6	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999982527583882	WITHOUT_CLASSIFICATION	1.7472416119356676E-6	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999965271085048	WITHOUT_CLASSIFICATION	3.4728914951105416E-6	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999825431226887	WITHOUT_CLASSIFICATION	1.745687731126647E-5	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.999999303514242	WITHOUT_CLASSIFICATION	6.964857580100904E-7	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999323161452874	WITHOUT_CLASSIFICATION	6.768385471262988E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999811176454816	WITHOUT_CLASSIFICATION	1.8882354518413547E-5	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.999999949812679	WITHOUT_CLASSIFICATION	5.018732099856853E-8	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999963084031003	WITHOUT_CLASSIFICATION	3.6915968997746466E-6	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999911871341323	WITHOUT_CLASSIFICATION	8.812865867831334E-6	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999757574428166	WITHOUT_CLASSIFICATION	2.4242557183364913E-5	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999827979917543	WITHOUT_CLASSIFICATION	1.720200824578927E-5	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999721696251567	WITHOUT_CLASSIFICATION	2.783037484334673E-5	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999762993356276	WITHOUT_CLASSIFICATION	2.370066437243789E-5	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999909641093311	WITHOUT_CLASSIFICATION	9.0358906688321E-6	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999894859831573	WITHOUT_CLASSIFICATION	1.0514016842738995E-5	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9999282996854821	WITHOUT_CLASSIFICATION	7.170031451786204E-5	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999961766541897	WITHOUT_CLASSIFICATION	3.823345810243301E-6	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.999791819883575	WITHOUT_CLASSIFICATION	2.081801164250811E-4	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9998903655926662	WITHOUT_CLASSIFICATION	1.096344073339025E-4	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999921720982512	WITHOUT_CLASSIFICATION	7.827901748770342E-6	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9998063884906032	WITHOUT_CLASSIFICATION	1.9361150939682108E-4	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9898360224983804	WITHOUT_CLASSIFICATION	0.010163977501619549	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999983994405286	WITHOUT_CLASSIFICATION	1.600559471422741E-6	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999978556271489	WITHOUT_CLASSIFICATION	2.144372851074035E-6	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999848342125951	WITHOUT_CLASSIFICATION	1.516578740500719E-5	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999791496438523	WITHOUT_CLASSIFICATION	2.0850356147681928E-5	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999810788073377	WITHOUT_CLASSIFICATION	1.892119266234306E-5	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.99999649021443	WITHOUT_CLASSIFICATION	3.5097855698689418E-6	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9999988210982775	WITHOUT_CLASSIFICATION	1.1789017224401587E-6	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9967204992154736	WITHOUT_CLASSIFICATION	0.0032795007845265426	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.999903611075294	WITHOUT_CLASSIFICATION	9.638892470600475E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999119908492045	WITHOUT_CLASSIFICATION	8.80091507954941E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.99999489650778	WITHOUT_CLASSIFICATION	5.103492219994491E-6	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999986968730573	WITHOUT_CLASSIFICATION	1.3031269427824604E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999119908492045	WITHOUT_CLASSIFICATION	8.80091507954941E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999922365388163	WITHOUT_CLASSIFICATION	7.763461183689057E-6	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.999989399157958	WITHOUT_CLASSIFICATION	1.0600842042063892E-5	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999851713604748	WITHOUT_CLASSIFICATION	1.4828639525068748E-5	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999989306160083	WITHOUT_CLASSIFICATION	1.069383991699417E-6	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999964764879188	WITHOUT_CLASSIFICATION	3.523512081237918E-6	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9996377063353447	WITHOUT_CLASSIFICATION	3.622936646553599E-4	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999985541993842	WITHOUT_CLASSIFICATION	1.4458006157709616E-6	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999735543315456	WITHOUT_CLASSIFICATION	2.6445668454445152E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9994425014521997	WITHOUT_CLASSIFICATION	5.574985478003489E-4	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.999868858410664	WITHOUT_CLASSIFICATION	1.3114158933596966E-4	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9996720372639751	WITHOUT_CLASSIFICATION	3.2796273602481114E-4	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9998519193618218	WITHOUT_CLASSIFICATION	1.480806381781203E-4	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.999925573970558	WITHOUT_CLASSIFICATION	7.442602944200276E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9995462403621665	WITHOUT_CLASSIFICATION	4.537596378333995E-4	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999928536649588	WITHOUT_CLASSIFICATION	7.146335041214785E-6	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999916997938517	WITHOUT_CLASSIFICATION	8.30020614825308E-6	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999611993788833	WITHOUT_CLASSIFICATION	3.880062111670798E-5	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999745338416763	WITHOUT_CLASSIFICATION	2.546615832359611E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999992705426217	WITHOUT_CLASSIFICATION	7.294573783910561E-7	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999230590226293	WITHOUT_CLASSIFICATION	7.694097737066375E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999858206307918	WITHOUT_CLASSIFICATION	1.4179369208124622E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999964240186316	WITHOUT_CLASSIFICATION	3.5759813683956265E-6	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9998275321842075	WITHOUT_CLASSIFICATION	1.7246781579253751E-4	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999558184107147	WITHOUT_CLASSIFICATION	4.418158928536705E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999779605647358	WITHOUT_CLASSIFICATION	2.203943526426168E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999992474127823	WITHOUT_CLASSIFICATION	7.525872177584753E-7	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9998095729004267	WITHOUT_CLASSIFICATION	1.9042709957336378E-4	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999994256505659	WITHOUT_CLASSIFICATION	5.743494342294169E-7	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999996059334622	WITHOUT_CLASSIFICATION	3.9406653783727287E-7	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999993562919804	WITHOUT_CLASSIFICATION	6.437080195805625E-7	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9999916097002467	WITHOUT_CLASSIFICATION	8.390299753390884E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9942790040479403	WITHOUT_CLASSIFICATION	0.005720995952059657	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9738887460504932	WITHOUT_CLASSIFICATION	0.02611125394950681	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999380905756057	WITHOUT_CLASSIFICATION	6.190942439426727E-5	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999890302450756	WITHOUT_CLASSIFICATION	1.0969754924382048E-5	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999974826347561	WITHOUT_CLASSIFICATION	2.5173652438964104E-6	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.999993593555462	WITHOUT_CLASSIFICATION	6.4064445379802885E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9999499669637694	WITHOUT_CLASSIFICATION	5.0033036230716324E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999999735996083	WITHOUT_CLASSIFICATION	2.6400391655243106E-8	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999974584719177	WITHOUT_CLASSIFICATION	2.5415280822904444E-6	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999921263331224	WITHOUT_CLASSIFICATION	7.8736668776231E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999971172131921	WITHOUT_CLASSIFICATION	2.882786807864334E-6	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999984952461032	WITHOUT_CLASSIFICATION	1.5047538967661985E-6	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999890125237836	WITHOUT_CLASSIFICATION	1.0987476216446988E-5	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.999999424791238	WITHOUT_CLASSIFICATION	5.752087618923839E-7	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999987804023187	WITHOUT_CLASSIFICATION	1.2195976812706098E-6	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999977614238965	WITHOUT_CLASSIFICATION	2.2385761034527818E-6	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999974311308029	WITHOUT_CLASSIFICATION	2.568869197106102E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999768276651677	WITHOUT_CLASSIFICATION	2.3172334832279735E-5	DEFECT
// space	WITHOUT_CLASSIFICATION	0.999999511951758	WITHOUT_CLASSIFICATION	4.880482421207727E-7	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999916894041592	WITHOUT_CLASSIFICATION	8.310595840837466E-6	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999771502095937	WITHOUT_CLASSIFICATION	2.284979040624855E-5	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999140821865301	WITHOUT_CLASSIFICATION	8.591781346997017E-5	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999768276651677	WITHOUT_CLASSIFICATION	2.3172334832279735E-5	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.8530995799780041	WITHOUT_CLASSIFICATION	0.14690042002199585	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.8530995799780041	WITHOUT_CLASSIFICATION	0.14690042002199585	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999997788510048	WITHOUT_CLASSIFICATION	2.2114899532534506E-7	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999989124661866	WITHOUT_CLASSIFICATION	1.0875338134908832E-6	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999993509068593	WITHOUT_CLASSIFICATION	6.490931406547557E-7	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999998960308211	WITHOUT_CLASSIFICATION	1.0396917888866198E-7	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.99999925276653	WITHOUT_CLASSIFICATION	7.472334699634069E-7	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999977765881731	WITHOUT_CLASSIFICATION	2.223411826851769E-6	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999958255817973	WITHOUT_CLASSIFICATION	4.1744182026477015E-6	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.7259887082223012	WITHOUT_CLASSIFICATION	0.27401129177769884	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.999998895335098	WITHOUT_CLASSIFICATION	1.1046649019008348E-6	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9999867843741806	WITHOUT_CLASSIFICATION	1.3215625819281527E-5	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999999461314429	WITHOUT_CLASSIFICATION	5.386855691980199E-8	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999591711569921	WITHOUT_CLASSIFICATION	4.0828843007958656E-5	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9994948984664143	WITHOUT_CLASSIFICATION	5.051015335856927E-4	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999997392378807	WITHOUT_CLASSIFICATION	2.6076211938790035E-7	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999335693066962	WITHOUT_CLASSIFICATION	6.643069330388088E-5	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999611300525674	WITHOUT_CLASSIFICATION	3.8869947432623705E-5	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.999998357611516	WITHOUT_CLASSIFICATION	1.6423884839215742E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999498213223397	WITHOUT_CLASSIFICATION	5.017867766040626E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999498213223397	WITHOUT_CLASSIFICATION	5.017867766040626E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999498213223397	WITHOUT_CLASSIFICATION	5.017867766040626E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999498213223397	WITHOUT_CLASSIFICATION	5.017867766040626E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999498213223397	WITHOUT_CLASSIFICATION	5.017867766040626E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999834575400894	WITHOUT_CLASSIFICATION	1.6542459910520737E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999945362338929	WITHOUT_CLASSIFICATION	5.463766107031933E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9997206862861087	WITHOUT_CLASSIFICATION	2.793137138912598E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.999990785683003	WITHOUT_CLASSIFICATION	9.214316996977445E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9988775186597347	WITHOUT_CLASSIFICATION	0.0011224813402653587	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999999094789679	WITHOUT_CLASSIFICATION	9.052103209674006E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999952157784169	WITHOUT_CLASSIFICATION	4.78422158311956E-6	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999982045088123	WITHOUT_CLASSIFICATION	1.7954911877467206E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999983067723073	WITHOUT_CLASSIFICATION	1.6932276927684057E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999904287756798	WITHOUT_CLASSIFICATION	9.571224320225286E-6	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999862703868618	WITHOUT_CLASSIFICATION	1.3729613138209067E-5	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999844889263635	WITHOUT_CLASSIFICATION	1.5511073636568273E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999921529605764	WITHOUT_CLASSIFICATION	7.847039423689217E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999895779528413	WITHOUT_CLASSIFICATION	1.042204715879358E-5	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999891136316286	WITHOUT_CLASSIFICATION	1.0886368371480123E-5	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999818128319103	WITHOUT_CLASSIFICATION	1.818716808958029E-5	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999888091799901	WITHOUT_CLASSIFICATION	1.1190820009948074E-5	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999895567442013	WITHOUT_CLASSIFICATION	1.0443255798703657E-5	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999879079559103	WITHOUT_CLASSIFICATION	1.209204408960758E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999873713784944	WITHOUT_CLASSIFICATION	1.2628621505678684E-5	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999801537077	WITHOUT_CLASSIFICATION	1.984629230001921E-5	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999885566345977	WITHOUT_CLASSIFICATION	1.1443365402240318E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999764718111254	WITHOUT_CLASSIFICATION	2.3528188874595447E-5	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999870331594499	WITHOUT_CLASSIFICATION	1.2966840550123666E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999786035734939	WITHOUT_CLASSIFICATION	2.139642650605216E-5	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999851878497812	WITHOUT_CLASSIFICATION	1.4812150218765947E-5	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999889797993827	WITHOUT_CLASSIFICATION	1.1020200617212568E-5	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999866418214455	WITHOUT_CLASSIFICATION	1.3358178554522403E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999820672543139	WITHOUT_CLASSIFICATION	1.793274568612395E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999770496848136	WITHOUT_CLASSIFICATION	2.2950315186371752E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.999979102982309	WITHOUT_CLASSIFICATION	2.0897017691013425E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999870285998327	WITHOUT_CLASSIFICATION	1.2971400167377662E-5	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999862717031194	WITHOUT_CLASSIFICATION	1.372829688055272E-5	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999849338268317	WITHOUT_CLASSIFICATION	1.5066173168263799E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999673841953706	WITHOUT_CLASSIFICATION	3.261580462934465E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999817581250472	WITHOUT_CLASSIFICATION	1.8241874952746292E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.999986572783619	WITHOUT_CLASSIFICATION	1.34272163810781E-5	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999862874431428	WITHOUT_CLASSIFICATION	1.3712556857225757E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999879251993845	WITHOUT_CLASSIFICATION	1.2074800615522315E-5	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999852142939021	WITHOUT_CLASSIFICATION	1.4785706098039338E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999861724078697	WITHOUT_CLASSIFICATION	1.3827592130389241E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.999984039229128	WITHOUT_CLASSIFICATION	1.5960770871886838E-5	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999755198992452	WITHOUT_CLASSIFICATION	2.4480100754868207E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999844466694747	WITHOUT_CLASSIFICATION	1.5553330525282974E-5	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999730544991433	WITHOUT_CLASSIFICATION	2.6945500856702236E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.999959425143538	WITHOUT_CLASSIFICATION	4.0574856461986037E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999690464228639	WITHOUT_CLASSIFICATION	3.095357713612285E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999871815129349	WITHOUT_CLASSIFICATION	1.2818487065196667E-5	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999806452101896	WITHOUT_CLASSIFICATION	1.935478981042584E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999648995507047	WITHOUT_CLASSIFICATION	3.5100449295441685E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9997206862861087	WITHOUT_CLASSIFICATION	2.793137138912598E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999787951416059	WITHOUT_CLASSIFICATION	2.1204858394000936E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999747241630631	WITHOUT_CLASSIFICATION	2.5275836937005564E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999775465008537	WITHOUT_CLASSIFICATION	2.2453499146267704E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999753583403926	WITHOUT_CLASSIFICATION	2.46416596073443E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999777568833529	WITHOUT_CLASSIFICATION	2.2243116647132864E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999754420150807	WITHOUT_CLASSIFICATION	2.4557984919226247E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999764608287898	WITHOUT_CLASSIFICATION	2.353917121024157E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999758543990064	WITHOUT_CLASSIFICATION	2.4145600993604983E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999728641525956	WITHOUT_CLASSIFICATION	2.7135847404383433E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999769709806765	WITHOUT_CLASSIFICATION	2.3029019323463595E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999778950331621	WITHOUT_CLASSIFICATION	2.210496683789811E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999756963674326	WITHOUT_CLASSIFICATION	2.4303632567446785E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999735333666895	WITHOUT_CLASSIFICATION	2.6466633310509382E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.99998014897469	WITHOUT_CLASSIFICATION	1.9851025309933305E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999853669771306	WITHOUT_CLASSIFICATION	1.4633022869557599E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.999989158744871	WITHOUT_CLASSIFICATION	1.0841255129016283E-5	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999859194720802	WITHOUT_CLASSIFICATION	1.4080527919910909E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999863382863263	WITHOUT_CLASSIFICATION	1.3661713673741786E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999841320851418	WITHOUT_CLASSIFICATION	1.5867914858191945E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999833655344097	WITHOUT_CLASSIFICATION	1.6634465590274664E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999844720927831	WITHOUT_CLASSIFICATION	1.5527907216982502E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999843233617443	WITHOUT_CLASSIFICATION	1.5676638255707282E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999775787316315	WITHOUT_CLASSIFICATION	2.2421268368525933E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999844772843393	WITHOUT_CLASSIFICATION	1.5522715660823088E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999856146554905	WITHOUT_CLASSIFICATION	1.4385344509436966E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999869078479996	WITHOUT_CLASSIFICATION	1.3092152000387023E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999724915353452	WITHOUT_CLASSIFICATION	2.7508464654894857E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999835765390093	WITHOUT_CLASSIFICATION	1.6423460990770708E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999924446275336	WITHOUT_CLASSIFICATION	7.555372466439671E-6	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999912637202417	WITHOUT_CLASSIFICATION	8.73627975822582E-6	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999791328107901	WITHOUT_CLASSIFICATION	2.0867189209835342E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999809997406455	WITHOUT_CLASSIFICATION	1.9000259354492405E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999819117517589	WITHOUT_CLASSIFICATION	1.8088248241057007E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999816978772706	WITHOUT_CLASSIFICATION	1.830212272942013E-5	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999828154696926	WITHOUT_CLASSIFICATION	1.7184530307478516E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999881755554312	WITHOUT_CLASSIFICATION	1.1824444568842986E-5	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999875198551349	WITHOUT_CLASSIFICATION	1.2480144865021852E-5	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999836347599232	WITHOUT_CLASSIFICATION	1.6365240076835768E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999840512766361	WITHOUT_CLASSIFICATION	1.5948723363803563E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999894663104398	WITHOUT_CLASSIFICATION	1.0533689560179653E-5	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999893481640076	WITHOUT_CLASSIFICATION	1.0651835992384822E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999880335004172	WITHOUT_CLASSIFICATION	1.1966499582745322E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999786418570431	WITHOUT_CLASSIFICATION	2.1358142956836064E-5	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999823012206002	WITHOUT_CLASSIFICATION	1.76987793997661E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.999980540998118	WITHOUT_CLASSIFICATION	1.9459001882141647E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999888807485487	WITHOUT_CLASSIFICATION	1.1119251451152509E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999906137111646	WITHOUT_CLASSIFICATION	9.38628883532175E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999872060573025	WITHOUT_CLASSIFICATION	1.2793942697549013E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999881801368059	WITHOUT_CLASSIFICATION	1.1819863194031805E-5	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999809470992049	WITHOUT_CLASSIFICATION	1.905290079508692E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999832838895285	WITHOUT_CLASSIFICATION	1.671611047146914E-5	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999827104866289	WITHOUT_CLASSIFICATION	1.7289513371115715E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999846347072358	WITHOUT_CLASSIFICATION	1.5365292764207638E-5	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.999989780403395	WITHOUT_CLASSIFICATION	1.0219596604851364E-5	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999874255198901	WITHOUT_CLASSIFICATION	1.257448010985027E-5	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999833177955647	WITHOUT_CLASSIFICATION	1.6682204435297525E-5	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999877220833921	WITHOUT_CLASSIFICATION	1.227791660777324E-5	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999879896859509	WITHOUT_CLASSIFICATION	1.2010314049119055E-5	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999861278335151	WITHOUT_CLASSIFICATION	1.387216648487708E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999851860322951	WITHOUT_CLASSIFICATION	1.4813967704738992E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999773072293842	WITHOUT_CLASSIFICATION	2.2692770615791718E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999873845741993	WITHOUT_CLASSIFICATION	1.2615425800626776E-5	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999696637420166	WITHOUT_CLASSIFICATION	3.033625798342744E-5	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999815732538369	WITHOUT_CLASSIFICATION	1.842674616307924E-5	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999888831640829	WITHOUT_CLASSIFICATION	1.111683591707516E-5	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999872691657419	WITHOUT_CLASSIFICATION	1.273083425801773E-5	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999917717195653	WITHOUT_CLASSIFICATION	8.228280434620472E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999881942557367	WITHOUT_CLASSIFICATION	1.1805744263222571E-5	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999862518082075	WITHOUT_CLASSIFICATION	1.3748191792518292E-5	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999878040566632	WITHOUT_CLASSIFICATION	1.2195943336756777E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999860142250654	WITHOUT_CLASSIFICATION	1.3985774934578906E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999855030054372	WITHOUT_CLASSIFICATION	1.4496994562889047E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999866801813253	WITHOUT_CLASSIFICATION	1.331981867477127E-5	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999770751846841	WITHOUT_CLASSIFICATION	2.2924815315873747E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999848167390569	WITHOUT_CLASSIFICATION	1.5183260943143431E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999822401339054	WITHOUT_CLASSIFICATION	1.7759866094752242E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999760425967558	WITHOUT_CLASSIFICATION	2.3957403244267104E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999804927985078	WITHOUT_CLASSIFICATION	1.9507201492349513E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999782238283248	WITHOUT_CLASSIFICATION	2.177617167525856E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999746872741644	WITHOUT_CLASSIFICATION	2.5312725835555103E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999837973217719	WITHOUT_CLASSIFICATION	1.6202678228105955E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999819362357611	WITHOUT_CLASSIFICATION	1.8063764238881383E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999844260312303	WITHOUT_CLASSIFICATION	1.5573968769759737E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999823023159474	WITHOUT_CLASSIFICATION	1.7697684052585047E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999782210946163	WITHOUT_CLASSIFICATION	2.1778905383730726E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999845832296705	WITHOUT_CLASSIFICATION	1.5416770329399206E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999847372707084	WITHOUT_CLASSIFICATION	1.5262729291730264E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.99998571283817	WITHOUT_CLASSIFICATION	1.4287161830154678E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999728460558974	WITHOUT_CLASSIFICATION	2.7153944102490852E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999850239664182	WITHOUT_CLASSIFICATION	1.4976033581899441E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999837890115908	WITHOUT_CLASSIFICATION	1.6210988409186982E-5	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.999984048279971	WITHOUT_CLASSIFICATION	1.5951720028967375E-5	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999831229667175	WITHOUT_CLASSIFICATION	1.6877033282448627E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.999985129797085	WITHOUT_CLASSIFICATION	1.4870202914894294E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999904392869338	WITHOUT_CLASSIFICATION	9.560713066159882E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999860335103743	WITHOUT_CLASSIFICATION	1.3966489625780997E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999857602023223	WITHOUT_CLASSIFICATION	1.423979767768318E-5	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999914327447884	WITHOUT_CLASSIFICATION	8.567255211657688E-6	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999873081756864	WITHOUT_CLASSIFICATION	1.2691824313567264E-5	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999808051584136	WITHOUT_CLASSIFICATION	1.9194841586380798E-5	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999874517696056	WITHOUT_CLASSIFICATION	1.2548230394416638E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999834404220087	WITHOUT_CLASSIFICATION	1.6559577991246358E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999882118829094	WITHOUT_CLASSIFICATION	1.17881170905231E-5	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999884147861892	WITHOUT_CLASSIFICATION	1.1585213810948118E-5	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.999985126206396	WITHOUT_CLASSIFICATION	1.4873793604116067E-5	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999946720818506	WITHOUT_CLASSIFICATION	5.327918149540281E-6	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999924577693361	WITHOUT_CLASSIFICATION	7.542230663832517E-6	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999926143651536	WITHOUT_CLASSIFICATION	7.385634846443621E-6	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999911312564244	WITHOUT_CLASSIFICATION	8.868743575712576E-6	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999819752088516	WITHOUT_CLASSIFICATION	1.80247911484297E-5	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999882107165852	WITHOUT_CLASSIFICATION	1.1789283414911362E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999904521169312	WITHOUT_CLASSIFICATION	9.54788306882805E-6	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999927151667113	WITHOUT_CLASSIFICATION	7.28483328878886E-6	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999912854841231	WITHOUT_CLASSIFICATION	8.71451587687064E-6	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999942531024774	WITHOUT_CLASSIFICATION	5.746897522616355E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.999993024249894	WITHOUT_CLASSIFICATION	6.975750105980835E-6	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999926279865905	WITHOUT_CLASSIFICATION	7.37201340951497E-6	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999885618291223	WITHOUT_CLASSIFICATION	1.1438170877669344E-5	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999914296344812	WITHOUT_CLASSIFICATION	8.570365518820473E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999925541833776	WITHOUT_CLASSIFICATION	7.4458166224446985E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999927164689723	WITHOUT_CLASSIFICATION	7.283531027794578E-6	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999876597971717	WITHOUT_CLASSIFICATION	1.2340202828285953E-5	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999923196827966	WITHOUT_CLASSIFICATION	7.680317203372534E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999902773681282	WITHOUT_CLASSIFICATION	9.722631871816144E-6	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999898537012379	WITHOUT_CLASSIFICATION	1.0146298762091896E-5	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999891167970472	WITHOUT_CLASSIFICATION	1.0883202952918522E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.999986973566674	WITHOUT_CLASSIFICATION	1.3026433325905889E-5	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999920164286729	WITHOUT_CLASSIFICATION	7.98357132705543E-6	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999844549489089	WITHOUT_CLASSIFICATION	1.5545051091187333E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999905448006692	WITHOUT_CLASSIFICATION	9.455199330867198E-6	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.99999126172629	WITHOUT_CLASSIFICATION	8.738273710002512E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999898572830126	WITHOUT_CLASSIFICATION	1.0142716987365421E-5	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.999990994759455	WITHOUT_CLASSIFICATION	9.005240544974821E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999795119814738	WITHOUT_CLASSIFICATION	2.048801852619551E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999848981143755	WITHOUT_CLASSIFICATION	1.5101885624349541E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999900759873224	WITHOUT_CLASSIFICATION	9.924012677721E-6	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999861153273593	WITHOUT_CLASSIFICATION	1.3884672640633604E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999859808310186	WITHOUT_CLASSIFICATION	1.4019168981357616E-5	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999839584806114	WITHOUT_CLASSIFICATION	1.604151938862763E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999855955035244	WITHOUT_CLASSIFICATION	1.4404496475650403E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.999986349081539	WITHOUT_CLASSIFICATION	1.3650918460877902E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999798181428508	WITHOUT_CLASSIFICATION	2.0181857149255638E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999841864533379	WITHOUT_CLASSIFICATION	1.581354666211863E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.999982234735954	WITHOUT_CLASSIFICATION	1.7765264045975728E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999845912003055	WITHOUT_CLASSIFICATION	1.540879969461756E-5	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999845565244093	WITHOUT_CLASSIFICATION	1.5443475590586926E-5	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999846919147075	WITHOUT_CLASSIFICATION	1.5308085292419418E-5	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999843677485313	WITHOUT_CLASSIFICATION	1.5632251468734218E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999856371075168	WITHOUT_CLASSIFICATION	1.4362892483231855E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.999981620311711	WITHOUT_CLASSIFICATION	1.8379688288980523E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.999987198241556	WITHOUT_CLASSIFICATION	1.2801758443967945E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999909492056595	WITHOUT_CLASSIFICATION	9.050794340536044E-6	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999849743304048	WITHOUT_CLASSIFICATION	1.5025669595213856E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999842673557885	WITHOUT_CLASSIFICATION	1.5732644211506684E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999860619404368	WITHOUT_CLASSIFICATION	1.393805956325383E-5	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999859502994847	WITHOUT_CLASSIFICATION	1.4049700515442586E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999885782375764	WITHOUT_CLASSIFICATION	1.1421762423553508E-5	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999769940895611	WITHOUT_CLASSIFICATION	2.300591043886211E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999836715341285	WITHOUT_CLASSIFICATION	1.6328465871592145E-5	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999907964185366	WITHOUT_CLASSIFICATION	9.203581463312627E-6	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999900532016007	WITHOUT_CLASSIFICATION	9.946798399173477E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.999990042476868	WITHOUT_CLASSIFICATION	9.957523132009453E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.999982143464686	WITHOUT_CLASSIFICATION	1.785653531402971E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999831543432319	WITHOUT_CLASSIFICATION	1.6845656768105394E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999888683383074	WITHOUT_CLASSIFICATION	1.11316616927676E-5	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999899599316459	WITHOUT_CLASSIFICATION	1.0040068354219292E-5	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999873999786782	WITHOUT_CLASSIFICATION	1.2600021321701083E-5	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999888035003586	WITHOUT_CLASSIFICATION	1.1196499641483288E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999850994466373	WITHOUT_CLASSIFICATION	1.4900553362754705E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999841429051821	WITHOUT_CLASSIFICATION	1.585709481791034E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999796713594624	WITHOUT_CLASSIFICATION	2.0328640537536998E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999823977743505	WITHOUT_CLASSIFICATION	1.760222564951209E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999906495841615	WITHOUT_CLASSIFICATION	9.350415838483104E-6	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.99999019277893	WITHOUT_CLASSIFICATION	9.807221070017177E-6	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999880950552168	WITHOUT_CLASSIFICATION	1.1904944783162256E-5	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999817649907402	WITHOUT_CLASSIFICATION	1.823500925982256E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999888495273777	WITHOUT_CLASSIFICATION	1.1150472622388457E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999876548921902	WITHOUT_CLASSIFICATION	1.2345107809709718E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999701947089624	WITHOUT_CLASSIFICATION	2.980529103764997E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999904079117532	WITHOUT_CLASSIFICATION	9.59208824677271E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.999987541874518	WITHOUT_CLASSIFICATION	1.24581254820259E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999868603056415	WITHOUT_CLASSIFICATION	1.3139694358476125E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999876863559114	WITHOUT_CLASSIFICATION	1.2313644088734349E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999849437632858	WITHOUT_CLASSIFICATION	1.5056236714212027E-5	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999872000877608	WITHOUT_CLASSIFICATION	1.2799912239120396E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999863849468246	WITHOUT_CLASSIFICATION	1.3615053175388329E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999855826556452	WITHOUT_CLASSIFICATION	1.4417344354799613E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999845319663307	WITHOUT_CLASSIFICATION	1.5468033669180476E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999895389775773	WITHOUT_CLASSIFICATION	1.0461022422807133E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999877252991377	WITHOUT_CLASSIFICATION	1.2274700862239943E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999877535793721	WITHOUT_CLASSIFICATION	1.22464206279717E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999851236892973	WITHOUT_CLASSIFICATION	1.4876310702815753E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999841547753414	WITHOUT_CLASSIFICATION	1.5845224658605567E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999839437363389	WITHOUT_CLASSIFICATION	1.6056263661129933E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999876539137498	WITHOUT_CLASSIFICATION	1.2346086250187446E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999869116544481	WITHOUT_CLASSIFICATION	1.3088345551817008E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999861079504948	WITHOUT_CLASSIFICATION	1.3892049505184311E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999846180151245	WITHOUT_CLASSIFICATION	1.538198487551342E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999852108236675	WITHOUT_CLASSIFICATION	1.4789176332525352E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999832932716949	WITHOUT_CLASSIFICATION	1.6706728305133523E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999892062973164	WITHOUT_CLASSIFICATION	1.0793702683688139E-5	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999896752993822	WITHOUT_CLASSIFICATION	1.0324700617758933E-5	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999902211634485	WITHOUT_CLASSIFICATION	9.77883655156816E-6	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999886672368508	WITHOUT_CLASSIFICATION	1.1332763149139939E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999854397970374	WITHOUT_CLASSIFICATION	1.4560202962686657E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999836702989029	WITHOUT_CLASSIFICATION	1.6329701097108546E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999897491193392	WITHOUT_CLASSIFICATION	1.0250880660802373E-5	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999821503539833	WITHOUT_CLASSIFICATION	1.7849646016694865E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999910898061133	WITHOUT_CLASSIFICATION	8.91019388665752E-6	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999897475224275	WITHOUT_CLASSIFICATION	1.025247757241964E-5	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999884954846968	WITHOUT_CLASSIFICATION	1.1504515303171976E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999805597383422	WITHOUT_CLASSIFICATION	1.944026165779602E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999832527084335	WITHOUT_CLASSIFICATION	1.6747291566599014E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999550804472459	WITHOUT_CLASSIFICATION	4.491955275406095E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.999988542107439	WITHOUT_CLASSIFICATION	1.1457892561064166E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999786116618902	WITHOUT_CLASSIFICATION	2.1388338109748325E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999804828522642	WITHOUT_CLASSIFICATION	1.951714773584035E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999859753348467	WITHOUT_CLASSIFICATION	1.402466515328469E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.999979446526417	WITHOUT_CLASSIFICATION	2.0553473583014304E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999864819649622	WITHOUT_CLASSIFICATION	1.351803503775263E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999759231596813	WITHOUT_CLASSIFICATION	2.407684031876517E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999800274058754	WITHOUT_CLASSIFICATION	1.997259412454295E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999868036413831	WITHOUT_CLASSIFICATION	1.3196358616770726E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999844174101838	WITHOUT_CLASSIFICATION	1.5582589816193686E-5	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999874316057706	WITHOUT_CLASSIFICATION	1.2568394229367234E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999887305305305	WITHOUT_CLASSIFICATION	1.1269469469423894E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999805365649218	WITHOUT_CLASSIFICATION	1.946343507821726E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999970040372972	WITHOUT_CLASSIFICATION	2.99596270287559E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9990725385534582	WITHOUT_CLASSIFICATION	9.27461446541838E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.999857020009729	WITHOUT_CLASSIFICATION	1.429799902710072E-4	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9999604472013587	WITHOUT_CLASSIFICATION	3.95527986413224E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9993786347173237	WITHOUT_CLASSIFICATION	6.213652826763583E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.999693139443047	WITHOUT_CLASSIFICATION	3.0686055695292784E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9998882675195745	WITHOUT_CLASSIFICATION	1.1173248042545595E-4	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9998804973914678	WITHOUT_CLASSIFICATION	1.1950260853216838E-4	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9999979521794392	WITHOUT_CLASSIFICATION	2.047820560860718E-6	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999450046850109	WITHOUT_CLASSIFICATION	5.4995314989148335E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9999186504030633	WITHOUT_CLASSIFICATION	8.134959693669297E-5	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999703859264293	WITHOUT_CLASSIFICATION	2.9614073570677533E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999869721945523	WITHOUT_CLASSIFICATION	1.3027805447746942E-5	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9984894898006689	WITHOUT_CLASSIFICATION	0.001510510199331116	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999951711814556	WITHOUT_CLASSIFICATION	4.828818544339597E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9997281022170967	WITHOUT_CLASSIFICATION	2.7189778290321573E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9998762472844689	WITHOUT_CLASSIFICATION	1.237527155311632E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.999902767967599	WITHOUT_CLASSIFICATION	9.723203240093661E-5	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999988808928298	WITHOUT_CLASSIFICATION	1.1191071700831538E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999936279821	WITHOUT_CLASSIFICATION	6.3720179474823714E-9	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9996190122418542	WITHOUT_CLASSIFICATION	3.8098775814574546E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999933025941508	WITHOUT_CLASSIFICATION	6.6974058492206165E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999996211783919	WITHOUT_CLASSIFICATION	3.788216081971054E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999863468463	WITHOUT_CLASSIFICATION	1.3653153775416903E-8	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999863468463	WITHOUT_CLASSIFICATION	1.3653153775416903E-8	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9999803387232604	WITHOUT_CLASSIFICATION	1.966127673951506E-5	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9999814449355028	WITHOUT_CLASSIFICATION	1.8555064497155593E-5	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9997936811515131	WITHOUT_CLASSIFICATION	2.0631884848690531E-4	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999612611313318	WITHOUT_CLASSIFICATION	3.873886866827867E-5	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9998303708938464	WITHOUT_CLASSIFICATION	1.6962910615370746E-4	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999564673098533	WITHOUT_CLASSIFICATION	4.353269014666697E-5	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9998155359567586	WITHOUT_CLASSIFICATION	1.844640432413212E-4	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999869269892693	WITHOUT_CLASSIFICATION	1.3073010730722493E-5	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9999591315794127	WITHOUT_CLASSIFICATION	4.0868420587235194E-5	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999967481553156	WITHOUT_CLASSIFICATION	3.2518446845204457E-6	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999989310514474	WITHOUT_CLASSIFICATION	1.068948552508809E-6	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9989077511033505	WITHOUT_CLASSIFICATION	0.001092248896649497	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9999594660511119	WITHOUT_CLASSIFICATION	4.0533948888162997E-5	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999916548216634	WITHOUT_CLASSIFICATION	8.345178336667508E-6	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999967884356655	WITHOUT_CLASSIFICATION	3.2115643344291136E-6	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999799058743742	WITHOUT_CLASSIFICATION	2.0094125625721893E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999995717930364	WITHOUT_CLASSIFICATION	4.2820696362774865E-7	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9998069251086408	WITHOUT_CLASSIFICATION	1.9307489135928513E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9996610809624311	WITHOUT_CLASSIFICATION	3.3891903756892933E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9991687001686407	WITHOUT_CLASSIFICATION	8.31299831359286E-4	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999999731412887	WITHOUT_CLASSIFICATION	2.6858711175718775E-8	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999957360093487	WITHOUT_CLASSIFICATION	4.263990651301123E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.6877937899706613	DEFECT	0.31220621002933874	WITHOUT_CLASSIFICATION
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999994569020875	WITHOUT_CLASSIFICATION	5.430979125102517E-7	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.6877937899706613	DEFECT	0.31220621002933874	WITHOUT_CLASSIFICATION
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9999958604664201	WITHOUT_CLASSIFICATION	4.139533579947509E-6	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999989123616726	WITHOUT_CLASSIFICATION	1.0876383274852167E-6	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.7476027324462722	WITHOUT_CLASSIFICATION	0.2523972675537279	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999650665509746	WITHOUT_CLASSIFICATION	3.493344902539503E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9999721994894981	WITHOUT_CLASSIFICATION	2.7800510501868746E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999795650935785	WITHOUT_CLASSIFICATION	2.0434906421500006E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999795650935785	WITHOUT_CLASSIFICATION	2.0434906421500006E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999795650935785	WITHOUT_CLASSIFICATION	2.0434906421500006E-5	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9999974480591683	WITHOUT_CLASSIFICATION	2.551940831634587E-6	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999896665115163	WITHOUT_CLASSIFICATION	1.0333488483671221E-5	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999999163072208	WITHOUT_CLASSIFICATION	8.369277910438669E-8	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.999877387626456	WITHOUT_CLASSIFICATION	1.2261237354398817E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.999877387626456	WITHOUT_CLASSIFICATION	1.2261237354398817E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.999877387626456	WITHOUT_CLASSIFICATION	1.2261237354398817E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.999877387626456	WITHOUT_CLASSIFICATION	1.2261237354398817E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.999877387626456	WITHOUT_CLASSIFICATION	1.2261237354398817E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.999877387626456	WITHOUT_CLASSIFICATION	1.2261237354398817E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997595761282403	WITHOUT_CLASSIFICATION	2.404238717597076E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997595761282403	WITHOUT_CLASSIFICATION	2.404238717597076E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997595761282403	WITHOUT_CLASSIFICATION	2.404238717597076E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997595761282403	WITHOUT_CLASSIFICATION	2.404238717597076E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997595761282403	WITHOUT_CLASSIFICATION	2.404238717597076E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999509152510665	WITHOUT_CLASSIFICATION	4.908474893350221E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999509152510665	WITHOUT_CLASSIFICATION	4.908474893350221E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999509152510665	WITHOUT_CLASSIFICATION	4.908474893350221E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999509152510665	WITHOUT_CLASSIFICATION	4.908474893350221E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999509152510665	WITHOUT_CLASSIFICATION	4.908474893350221E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998266794945326	WITHOUT_CLASSIFICATION	1.7332050546743635E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998266794945326	WITHOUT_CLASSIFICATION	1.7332050546743635E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998266794945326	WITHOUT_CLASSIFICATION	1.7332050546743635E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998266794945326	WITHOUT_CLASSIFICATION	1.7332050546743635E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998266794945326	WITHOUT_CLASSIFICATION	1.7332050546743635E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998266794945326	WITHOUT_CLASSIFICATION	1.7332050546743635E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9997136948833817	WITHOUT_CLASSIFICATION	2.8630511661829054E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9997136948833817	WITHOUT_CLASSIFICATION	2.8630511661829054E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9997136948833817	WITHOUT_CLASSIFICATION	2.8630511661829054E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9997136948833817	WITHOUT_CLASSIFICATION	2.8630511661829054E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9997136948833817	WITHOUT_CLASSIFICATION	2.8630511661829054E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9995722579938424	WITHOUT_CLASSIFICATION	4.277420061575096E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9995722579938424	WITHOUT_CLASSIFICATION	4.277420061575096E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9995722579938424	WITHOUT_CLASSIFICATION	4.277420061575096E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9995722579938424	WITHOUT_CLASSIFICATION	4.277420061575096E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9995722579938424	WITHOUT_CLASSIFICATION	4.277420061575096E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9997206862861087	WITHOUT_CLASSIFICATION	2.793137138912598E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9997206862861087	WITHOUT_CLASSIFICATION	2.793137138912598E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9997206862861087	WITHOUT_CLASSIFICATION	2.793137138912598E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9997206862861087	WITHOUT_CLASSIFICATION	2.793137138912598E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9997206862861087	WITHOUT_CLASSIFICATION	2.793137138912598E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.999990785683003	WITHOUT_CLASSIFICATION	9.214316996977445E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999999094789679	WITHOUT_CLASSIFICATION	9.052103209674006E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999952157784169	WITHOUT_CLASSIFICATION	4.78422158311956E-6	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999982045088123	WITHOUT_CLASSIFICATION	1.7954911877467206E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999983067723073	WITHOUT_CLASSIFICATION	1.6932276927684057E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999885105161453	WITHOUT_CLASSIFICATION	1.1489483854641737E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999873713784944	WITHOUT_CLASSIFICATION	1.2628621505678684E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999786035734939	WITHOUT_CLASSIFICATION	2.139642650605216E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999820672543139	WITHOUT_CLASSIFICATION	1.793274568612395E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999770496848136	WITHOUT_CLASSIFICATION	2.2950315186371752E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999813128186583	WITHOUT_CLASSIFICATION	1.8687181341635E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.999979102982309	WITHOUT_CLASSIFICATION	2.0897017691013425E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999832623984042	WITHOUT_CLASSIFICATION	1.6737601595769727E-5	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999830681797406	WITHOUT_CLASSIFICATION	1.693182025943179E-5	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999827994839781	WITHOUT_CLASSIFICATION	1.7200516021876963E-5	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999847269034673	WITHOUT_CLASSIFICATION	1.5273096532685573E-5	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999862374097401	WITHOUT_CLASSIFICATION	1.376259025985707E-5	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999906823668673	WITHOUT_CLASSIFICATION	9.317633132701329E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999896714075706	WITHOUT_CLASSIFICATION	1.0328592429312035E-5	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999883584218219	WITHOUT_CLASSIFICATION	1.164157817802105E-5	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999786417215334	WITHOUT_CLASSIFICATION	2.135827846657657E-5	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999805016257801	WITHOUT_CLASSIFICATION	1.949837421998076E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999861175031967	WITHOUT_CLASSIFICATION	1.3882496803470318E-5	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999834359624826	WITHOUT_CLASSIFICATION	1.6564037517384835E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999862445205935	WITHOUT_CLASSIFICATION	1.3755479406606796E-5	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.99998763948672	WITHOUT_CLASSIFICATION	1.2360513280011247E-5	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999877736563536	WITHOUT_CLASSIFICATION	1.2226343646531945E-5	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999782964360874	WITHOUT_CLASSIFICATION	2.1703563912599734E-5	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999877051459815	WITHOUT_CLASSIFICATION	1.2294854018605698E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999801060358781	WITHOUT_CLASSIFICATION	1.9893964122019126E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999770833257133	WITHOUT_CLASSIFICATION	2.291667428669281E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999853018683489	WITHOUT_CLASSIFICATION	1.4698131651257017E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999785117262711	WITHOUT_CLASSIFICATION	2.1488273728968242E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999847033151048	WITHOUT_CLASSIFICATION	1.529668489520054E-5	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999822724524566	WITHOUT_CLASSIFICATION	1.7727547543352037E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999773892724334	WITHOUT_CLASSIFICATION	2.261072756666753E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.999984651823578	WITHOUT_CLASSIFICATION	1.5348176421986323E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.999983190598031	WITHOUT_CLASSIFICATION	1.6809401969064535E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999860073714405	WITHOUT_CLASSIFICATION	1.3992628559550152E-5	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999883858528843	WITHOUT_CLASSIFICATION	1.161414711582195E-5	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999856407016104	WITHOUT_CLASSIFICATION	1.4359298389675215E-5	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999860722948566	WITHOUT_CLASSIFICATION	1.3927705143345653E-5	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999861322486648	WITHOUT_CLASSIFICATION	1.3867751335115813E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999546450295753	WITHOUT_CLASSIFICATION	4.5354970424750675E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999602075741647	WITHOUT_CLASSIFICATION	3.9792425835299126E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999588857223911	WITHOUT_CLASSIFICATION	4.1114277608943686E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999722684602219	WITHOUT_CLASSIFICATION	2.7731539778033132E-5	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999790547081411	WITHOUT_CLASSIFICATION	2.0945291858914868E-5	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999683856739107	WITHOUT_CLASSIFICATION	3.1614326089352365E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999747241630631	WITHOUT_CLASSIFICATION	2.5275836937005564E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999775465008537	WITHOUT_CLASSIFICATION	2.2453499146267704E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999753583403926	WITHOUT_CLASSIFICATION	2.46416596073443E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999758543990064	WITHOUT_CLASSIFICATION	2.4145600993604983E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.999989158744871	WITHOUT_CLASSIFICATION	1.0841255129016283E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999724915353452	WITHOUT_CLASSIFICATION	2.7508464654894857E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.999986992415827	WITHOUT_CLASSIFICATION	1.3007584172877739E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999835765390093	WITHOUT_CLASSIFICATION	1.6423460990770708E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999786418570431	WITHOUT_CLASSIFICATION	2.1358142956836064E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.999980540998118	WITHOUT_CLASSIFICATION	1.9459001882141647E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999818160481566	WITHOUT_CLASSIFICATION	1.8183951843355852E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999888807485487	WITHOUT_CLASSIFICATION	1.1119251451152509E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999906137111646	WITHOUT_CLASSIFICATION	9.38628883532175E-6	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999776284423394	WITHOUT_CLASSIFICATION	2.2371557660597414E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999747451486984	WITHOUT_CLASSIFICATION	2.5254851301503184E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.999963068484401	WITHOUT_CLASSIFICATION	3.693151559901171E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999749252693042	WITHOUT_CLASSIFICATION	2.5074730695763774E-5	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999806212369697	WITHOUT_CLASSIFICATION	1.9378763030313643E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999860203077816	WITHOUT_CLASSIFICATION	1.3979692218507762E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999799466200033	WITHOUT_CLASSIFICATION	2.0053379996663346E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999766421733199	WITHOUT_CLASSIFICATION	2.3357826680058216E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999727100988018	WITHOUT_CLASSIFICATION	2.7289901198111154E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999717922337538	WITHOUT_CLASSIFICATION	2.8207766246221996E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999585855633575	WITHOUT_CLASSIFICATION	4.141443664245311E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999739057312849	WITHOUT_CLASSIFICATION	2.609426871507934E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999734744878047	WITHOUT_CLASSIFICATION	2.652551219534604E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.999975196864043	WITHOUT_CLASSIFICATION	2.4803135957070352E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999780308259468	WITHOUT_CLASSIFICATION	2.1969174053159546E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999854133050942	WITHOUT_CLASSIFICATION	1.4586694905703966E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999857312277671	WITHOUT_CLASSIFICATION	1.4268772232996756E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999824003753157	WITHOUT_CLASSIFICATION	1.7599624684284154E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999826981120082	WITHOUT_CLASSIFICATION	1.730188799176809E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999801766364833	WITHOUT_CLASSIFICATION	1.9823363516634142E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999870775185848	WITHOUT_CLASSIFICATION	1.2922481415234677E-5	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999850013264662	WITHOUT_CLASSIFICATION	1.4998673533832739E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999849661892521	WITHOUT_CLASSIFICATION	1.5033810747794995E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999720667512043	WITHOUT_CLASSIFICATION	2.7933248795639454E-5	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999840383413717	WITHOUT_CLASSIFICATION	1.5961658628199466E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999835966966379	WITHOUT_CLASSIFICATION	1.6403303362093182E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999869452228144	WITHOUT_CLASSIFICATION	1.3054777185546905E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999851748770243	WITHOUT_CLASSIFICATION	1.4825122975605588E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999844501205779	WITHOUT_CLASSIFICATION	1.554987942216402E-5	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999889491234151	WITHOUT_CLASSIFICATION	1.1050876585054978E-5	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999837020582752	WITHOUT_CLASSIFICATION	1.6297941724727757E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999878541073101	WITHOUT_CLASSIFICATION	1.2145892689975954E-5	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999892162444484	WITHOUT_CLASSIFICATION	1.0783755551600002E-5	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999838159193302	WITHOUT_CLASSIFICATION	1.618408066981787E-5	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999919289060866	WITHOUT_CLASSIFICATION	8.071093913486965E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999888027969361	WITHOUT_CLASSIFICATION	1.1197203063960488E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999773072293842	WITHOUT_CLASSIFICATION	2.2692770615791718E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999792925376009	WITHOUT_CLASSIFICATION	2.0707462399184555E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999873845741993	WITHOUT_CLASSIFICATION	1.2615425800626776E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999860142250654	WITHOUT_CLASSIFICATION	1.3985774934578906E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999866801813253	WITHOUT_CLASSIFICATION	1.331981867477127E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999746872741644	WITHOUT_CLASSIFICATION	2.5312725835555103E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999844260312303	WITHOUT_CLASSIFICATION	1.5573968769759737E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999845832296705	WITHOUT_CLASSIFICATION	1.5416770329399206E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999837890115908	WITHOUT_CLASSIFICATION	1.6210988409186982E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999860335103743	WITHOUT_CLASSIFICATION	1.3966489625780997E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999875987930243	WITHOUT_CLASSIFICATION	1.240120697559155E-5	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999790757815208	WITHOUT_CLASSIFICATION	2.0924218479233625E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999810202974321	WITHOUT_CLASSIFICATION	1.897970256793133E-5	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.999981931321839	WITHOUT_CLASSIFICATION	1.8068678160976716E-5	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999783281009375	WITHOUT_CLASSIFICATION	2.167189906251949E-5	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999862817687641	WITHOUT_CLASSIFICATION	1.3718231235838215E-5	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999830330824273	WITHOUT_CLASSIFICATION	1.6966917572628582E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.999986646253135	WITHOUT_CLASSIFICATION	1.335374686500589E-5	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999864964772145	WITHOUT_CLASSIFICATION	1.3503522785447715E-5	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.999986148588046	WITHOUT_CLASSIFICATION	1.3851411953880903E-5	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999848298600337	WITHOUT_CLASSIFICATION	1.5170139966441564E-5	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999799663934432	WITHOUT_CLASSIFICATION	2.0033606556839646E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999879143124719	WITHOUT_CLASSIFICATION	1.2085687528142788E-5	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999886124948811	WITHOUT_CLASSIFICATION	1.1387505118939703E-5	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999858036301122	WITHOUT_CLASSIFICATION	1.4196369887715286E-5	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999701327893992	WITHOUT_CLASSIFICATION	2.9867210600814447E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999820749932595	WITHOUT_CLASSIFICATION	1.7925006740488056E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999809335516499	WITHOUT_CLASSIFICATION	1.9066448350188952E-5	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999879273451223	WITHOUT_CLASSIFICATION	1.207265487764871E-5	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999770200402011	WITHOUT_CLASSIFICATION	2.2979959798926824E-5	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999787753398481	WITHOUT_CLASSIFICATION	2.1224660151961635E-5	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999865495845303	WITHOUT_CLASSIFICATION	1.3450415469671585E-5	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999847927662738	WITHOUT_CLASSIFICATION	1.5207233726147242E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999844802756664	WITHOUT_CLASSIFICATION	1.551972433363575E-5	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999779723236627	WITHOUT_CLASSIFICATION	2.202767633734426E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999763414573897	WITHOUT_CLASSIFICATION	2.3658542610346696E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999849092371549	WITHOUT_CLASSIFICATION	1.5090762845258702E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999864452194762	WITHOUT_CLASSIFICATION	1.3554780523814878E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999837039417384	WITHOUT_CLASSIFICATION	1.629605826160617E-5	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999920511673742	WITHOUT_CLASSIFICATION	7.948832625824687E-6	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999880780764745	WITHOUT_CLASSIFICATION	1.192192352557868E-5	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999819772624277	WITHOUT_CLASSIFICATION	1.802273757238651E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999891595635079	WITHOUT_CLASSIFICATION	1.0840436492039956E-5	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999894205369351	WITHOUT_CLASSIFICATION	1.0579463064881456E-5	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999875733779442	WITHOUT_CLASSIFICATION	1.2426622055715834E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999882792555592	WITHOUT_CLASSIFICATION	1.1720744440822063E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999920400493005	WITHOUT_CLASSIFICATION	7.95995069938977E-6	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999887540528	WITHOUT_CLASSIFICATION	1.1245947200002052E-5	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999874670029103	WITHOUT_CLASSIFICATION	1.253299708965693E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999895162816784	WITHOUT_CLASSIFICATION	1.0483718321651002E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.999993024249894	WITHOUT_CLASSIFICATION	6.975750105980835E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999889256649269	WITHOUT_CLASSIFICATION	1.1074335073170928E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999925541833776	WITHOUT_CLASSIFICATION	7.4458166224446985E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999902773681282	WITHOUT_CLASSIFICATION	9.722631871816144E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.999986973566674	WITHOUT_CLASSIFICATION	1.3026433325905889E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999795119814738	WITHOUT_CLASSIFICATION	2.048801852619551E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999848981143755	WITHOUT_CLASSIFICATION	1.5101885624349541E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.999986349081539	WITHOUT_CLASSIFICATION	1.3650918460877902E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999798181428508	WITHOUT_CLASSIFICATION	2.0181857149255638E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999840846073638	WITHOUT_CLASSIFICATION	1.591539263616805E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999919160673112	WITHOUT_CLASSIFICATION	8.083932688836652E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999892204246431	WITHOUT_CLASSIFICATION	1.0779575356962316E-5	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999898431545571	WITHOUT_CLASSIFICATION	1.0156845442956988E-5	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999915511652586	WITHOUT_CLASSIFICATION	8.448834741274925E-6	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999896267854149	WITHOUT_CLASSIFICATION	1.037321458500153E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999920544404304	WITHOUT_CLASSIFICATION	7.945559569619417E-6	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999922246705493	WITHOUT_CLASSIFICATION	7.775329450739726E-6	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999911106510974	WITHOUT_CLASSIFICATION	8.889348902608987E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999908574456885	WITHOUT_CLASSIFICATION	9.142554311598146E-6	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999895983086405	WITHOUT_CLASSIFICATION	1.040169135936823E-5	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999915088849555	WITHOUT_CLASSIFICATION	8.491115044539393E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.999991172030659	WITHOUT_CLASSIFICATION	8.827969341000004E-6	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999902854406117	WITHOUT_CLASSIFICATION	9.71455938820474E-6	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999883442612323	WITHOUT_CLASSIFICATION	1.1655738767759947E-5	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.999985707906803	WITHOUT_CLASSIFICATION	1.42920931970851E-5	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999912386084369	WITHOUT_CLASSIFICATION	8.761391563212072E-6	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.999990008894057	WITHOUT_CLASSIFICATION	9.9911059429212E-6	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999845516503049	WITHOUT_CLASSIFICATION	1.5448349695157026E-5	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999908191467546	WITHOUT_CLASSIFICATION	9.180853245508712E-6	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999906661949148	WITHOUT_CLASSIFICATION	9.33380508517438E-6	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999871107750699	WITHOUT_CLASSIFICATION	1.2889224930152608E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.999985291147966	WITHOUT_CLASSIFICATION	1.4708852034068754E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999853017255715	WITHOUT_CLASSIFICATION	1.469827442844372E-5	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999849821422194	WITHOUT_CLASSIFICATION	1.5017857780566529E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999860198778032	WITHOUT_CLASSIFICATION	1.3980122196850181E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999783523930862	WITHOUT_CLASSIFICATION	2.1647606913744434E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.999974089382366	WITHOUT_CLASSIFICATION	2.5910617634099522E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999845181037345	WITHOUT_CLASSIFICATION	1.5481896265605704E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999878364942468	WITHOUT_CLASSIFICATION	1.2163505753150174E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999869388732063	WITHOUT_CLASSIFICATION	1.3061126793634995E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999878734351809	WITHOUT_CLASSIFICATION	1.2126564819085613E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999851056739293	WITHOUT_CLASSIFICATION	1.489432607069257E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.999981313450114	WITHOUT_CLASSIFICATION	1.8686549886077655E-5	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999832626540172	WITHOUT_CLASSIFICATION	1.6737345982737373E-5	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999820383064456	WITHOUT_CLASSIFICATION	1.7961693554389727E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.999977460796551	WITHOUT_CLASSIFICATION	2.253920344901412E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999844316940979	WITHOUT_CLASSIFICATION	1.5568305902112757E-5	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999830296900145	WITHOUT_CLASSIFICATION	1.697030998553548E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999885782375764	WITHOUT_CLASSIFICATION	1.1421762423553508E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.999990042476868	WITHOUT_CLASSIFICATION	9.957523132009453E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.999982143464686	WITHOUT_CLASSIFICATION	1.785653531402971E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999875243536781	WITHOUT_CLASSIFICATION	1.2475646321947925E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999796713594624	WITHOUT_CLASSIFICATION	2.0328640537536998E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999906495841615	WITHOUT_CLASSIFICATION	9.350415838483104E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999876548921902	WITHOUT_CLASSIFICATION	1.2345107809709718E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999701947089624	WITHOUT_CLASSIFICATION	2.980529103764997E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999841547753414	WITHOUT_CLASSIFICATION	1.5845224658605567E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999839437363389	WITHOUT_CLASSIFICATION	1.6056263661129933E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999859978257607	WITHOUT_CLASSIFICATION	1.4002174239356973E-5	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.999992107304903	WITHOUT_CLASSIFICATION	7.892695096951697E-6	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999890502927142	WITHOUT_CLASSIFICATION	1.0949707285830542E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999882296659856	WITHOUT_CLASSIFICATION	1.1770334014477061E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999856749186474	WITHOUT_CLASSIFICATION	1.4325081352545178E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999863625246059	WITHOUT_CLASSIFICATION	1.3637475394152512E-5	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999912557169659	WITHOUT_CLASSIFICATION	8.744283034150827E-6	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999824275482184	WITHOUT_CLASSIFICATION	1.757245178159418E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999839577834713	WITHOUT_CLASSIFICATION	1.6042216528649733E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999863720054177	WITHOUT_CLASSIFICATION	1.3627994582176593E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999840789878451	WITHOUT_CLASSIFICATION	1.5921012154902483E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999894620124236	WITHOUT_CLASSIFICATION	1.0537987576429962E-5	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999884587363757	WITHOUT_CLASSIFICATION	1.1541263624362019E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999913623732648	WITHOUT_CLASSIFICATION	8.637626735114531E-6	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999905800248704	WITHOUT_CLASSIFICATION	9.419975129696942E-6	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999902012515764	WITHOUT_CLASSIFICATION	9.798748423511564E-6	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999895333727125	WITHOUT_CLASSIFICATION	1.0466627287596174E-5	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999879080814997	WITHOUT_CLASSIFICATION	1.2091918500114994E-5	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999846677271634	WITHOUT_CLASSIFICATION	1.533227283656635E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999866584862045	WITHOUT_CLASSIFICATION	1.3341513795497975E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999869620470675	WITHOUT_CLASSIFICATION	1.3037952932386285E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999871817086395	WITHOUT_CLASSIFICATION	1.2818291360602615E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999899308600525	WITHOUT_CLASSIFICATION	1.006913994757628E-5	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.999990387622844	WITHOUT_CLASSIFICATION	9.61237715596293E-6	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999886234097987	WITHOUT_CLASSIFICATION	1.1376590201404948E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999807943711637	WITHOUT_CLASSIFICATION	1.9205628836304636E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999824746073372	WITHOUT_CLASSIFICATION	1.7525392662796872E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999820726779888	WITHOUT_CLASSIFICATION	1.7927322011222753E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999895914067704	WITHOUT_CLASSIFICATION	1.0408593229606622E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999871881720978	WITHOUT_CLASSIFICATION	1.281182790217509E-5	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999880907631274	WITHOUT_CLASSIFICATION	1.1909236872579306E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999847545423249	WITHOUT_CLASSIFICATION	1.5245457674925001E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999855167652507	WITHOUT_CLASSIFICATION	1.4483234749301752E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.999977780765301	WITHOUT_CLASSIFICATION	2.2219234698934087E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999856598389854	WITHOUT_CLASSIFICATION	1.4340161014687359E-5	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999764249165609	WITHOUT_CLASSIFICATION	2.3575083439040488E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999878725045074	WITHOUT_CLASSIFICATION	1.2127495492651272E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999874623518428	WITHOUT_CLASSIFICATION	1.2537648157215728E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999856849946117	WITHOUT_CLASSIFICATION	1.4315005388229479E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999843745927937	WITHOUT_CLASSIFICATION	1.562540720633413E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999852108236675	WITHOUT_CLASSIFICATION	1.4789176332525352E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999832932716949	WITHOUT_CLASSIFICATION	1.6706728305133523E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999805597383422	WITHOUT_CLASSIFICATION	1.944026165779602E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999889077211889	WITHOUT_CLASSIFICATION	1.1092278811150618E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999550804472459	WITHOUT_CLASSIFICATION	4.491955275406095E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999786116618902	WITHOUT_CLASSIFICATION	2.1388338109748325E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999859753348467	WITHOUT_CLASSIFICATION	1.402466515328469E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999887305305305	WITHOUT_CLASSIFICATION	1.1269469469423894E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999805365649218	WITHOUT_CLASSIFICATION	1.946343507821726E-5	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999904890408643	WITHOUT_CLASSIFICATION	9.510959135808438E-6	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.999992246072197	WITHOUT_CLASSIFICATION	7.75392780295218E-6	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999834605664614	WITHOUT_CLASSIFICATION	1.6539433538583355E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999745078518542	WITHOUT_CLASSIFICATION	2.5492148145740114E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999901623463286	WITHOUT_CLASSIFICATION	9.837653671302234E-6	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999885800250369	WITHOUT_CLASSIFICATION	1.1419974963080638E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999904514363093	WITHOUT_CLASSIFICATION	9.548563690751129E-6	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.999987280774185	WITHOUT_CLASSIFICATION	1.2719225815087474E-5	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999871319773878	WITHOUT_CLASSIFICATION	1.2868022612160506E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999899276889077	WITHOUT_CLASSIFICATION	1.0072311092398139E-5	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999898147172686	WITHOUT_CLASSIFICATION	1.0185282731446038E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999902449290402	WITHOUT_CLASSIFICATION	9.7550709598562E-6	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999781216221761	WITHOUT_CLASSIFICATION	2.18783778238864E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999923238397103	WITHOUT_CLASSIFICATION	7.676160289825267E-6	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999877735275131	WITHOUT_CLASSIFICATION	1.2226472486843808E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.999975250922108	WITHOUT_CLASSIFICATION	2.474907789198048E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.999987050809698	WITHOUT_CLASSIFICATION	1.2949190302084752E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999872579842245	WITHOUT_CLASSIFICATION	1.274201577546932E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.999986642438098	WITHOUT_CLASSIFICATION	1.3357561902074582E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999863158596163	WITHOUT_CLASSIFICATION	1.3684140383703961E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999776677871001	WITHOUT_CLASSIFICATION	2.233221289987616E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999711957145709	WITHOUT_CLASSIFICATION	2.8804285429057648E-5	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999878895838764	WITHOUT_CLASSIFICATION	1.2110416123699782E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999886058774291	WITHOUT_CLASSIFICATION	1.1394122570871047E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.999988230210475	WITHOUT_CLASSIFICATION	1.1769789524913065E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999780180317659	WITHOUT_CLASSIFICATION	2.198196823412842E-5	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999794583956415	WITHOUT_CLASSIFICATION	2.054160435845139E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999874390630124	WITHOUT_CLASSIFICATION	1.2560936987704548E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999870381675988	WITHOUT_CLASSIFICATION	1.2961832401198535E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999866484777	WITHOUT_CLASSIFICATION	1.3351522299942098E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.999984297130056	WITHOUT_CLASSIFICATION	1.5702869944009313E-5	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999816552094857	WITHOUT_CLASSIFICATION	1.8344790514290427E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999839051532636	WITHOUT_CLASSIFICATION	1.6094846736365633E-5	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999833530608535	WITHOUT_CLASSIFICATION	1.6646939146502715E-5	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999819069824516	WITHOUT_CLASSIFICATION	1.809301754846426E-5	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999700011500414	WITHOUT_CLASSIFICATION	2.9998849958556956E-5	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999847773308388	WITHOUT_CLASSIFICATION	1.5222669161190015E-5	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.999986925992584	WITHOUT_CLASSIFICATION	1.3074007416002598E-5	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999879240260284	WITHOUT_CLASSIFICATION	1.2075973971499152E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9998882675195745	WITHOUT_CLASSIFICATION	1.1173248042545595E-4	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9998804973914678	WITHOUT_CLASSIFICATION	1.1950260853216838E-4	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999869721945523	WITHOUT_CLASSIFICATION	1.3027805447746942E-5	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999951711814556	WITHOUT_CLASSIFICATION	4.828818544339597E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9997281022170967	WITHOUT_CLASSIFICATION	2.7189778290321573E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9998762472844689	WITHOUT_CLASSIFICATION	1.237527155311632E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.999902767967599	WITHOUT_CLASSIFICATION	9.723203240093661E-5	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997861419948493	WITHOUT_CLASSIFICATION	2.138580051507219E-4	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.999982673242252	WITHOUT_CLASSIFICATION	1.73267577479476E-5	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999853889982984	WITHOUT_CLASSIFICATION	1.4611001701653451E-5	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999772774907022	WITHOUT_CLASSIFICATION	2.272250929786894E-5	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999886573404676	WITHOUT_CLASSIFICATION	1.134265953225925E-5	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999876838048583	WITHOUT_CLASSIFICATION	1.2316195141614776E-5	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999888436349659	WITHOUT_CLASSIFICATION	1.1156365034130228E-5	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999772538190708	WITHOUT_CLASSIFICATION	2.274618092919128E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999789980186532	WITHOUT_CLASSIFICATION	2.1001981346783313E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999911592291723	WITHOUT_CLASSIFICATION	8.840770827701861E-6	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999869198668918	WITHOUT_CLASSIFICATION	1.3080133108207555E-5	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999815761340841	WITHOUT_CLASSIFICATION	1.8423865915794966E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999873227803389	WITHOUT_CLASSIFICATION	1.2677219661094126E-5	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999761304772733	WITHOUT_CLASSIFICATION	2.3869522726687827E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999854897501009	WITHOUT_CLASSIFICATION	1.4510249899105686E-5	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999880507175682	WITHOUT_CLASSIFICATION	1.194928243178201E-5	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999879166939617	WITHOUT_CLASSIFICATION	1.2083306038395888E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999866888286202	WITHOUT_CLASSIFICATION	1.3311171379807098E-5	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999790701332744	WITHOUT_CLASSIFICATION	2.0929866725734514E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999794020062233	WITHOUT_CLASSIFICATION	2.0597993776670668E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999832336434606	WITHOUT_CLASSIFICATION	1.6766356539265656E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999374755342437	WITHOUT_CLASSIFICATION	6.252446575621925E-5	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999188196035761	WITHOUT_CLASSIFICATION	8.118039642387076E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.999984909454448	WITHOUT_CLASSIFICATION	1.509054555198857E-5	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999980018966622	WITHOUT_CLASSIFICATION	1.9981033377700704E-6	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999958043173529	WITHOUT_CLASSIFICATION	4.195682647057014E-6	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9992914033196909	WITHOUT_CLASSIFICATION	7.085966803091964E-4	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999987021984797	WITHOUT_CLASSIFICATION	1.2978015202424927E-6	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999997920407008	WITHOUT_CLASSIFICATION	2.0795929915364449E-7	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9999692751496541	WITHOUT_CLASSIFICATION	3.072485034598645E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999936279821	WITHOUT_CLASSIFICATION	6.3720179474823714E-9	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9996190122418542	WITHOUT_CLASSIFICATION	3.8098775814574546E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999863468463	WITHOUT_CLASSIFICATION	1.3653153775416903E-8	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999863468463	WITHOUT_CLASSIFICATION	1.3653153775416903E-8	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9659550241020876	WITHOUT_CLASSIFICATION	0.034044975897912465	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999471164273874	WITHOUT_CLASSIFICATION	5.288357261250559E-5	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.999996800993781	WITHOUT_CLASSIFICATION	3.199006218908456E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999898588548766	WITHOUT_CLASSIFICATION	1.0141145123392898E-5	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999988684436961	WITHOUT_CLASSIFICATION	1.1315563038100181E-6	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999989380589295	WITHOUT_CLASSIFICATION	1.0619410705071867E-6	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999931899659381	WITHOUT_CLASSIFICATION	6.8100340618583305E-6	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999997412937051	WITHOUT_CLASSIFICATION	2.5870629498948363E-7	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999998702784318	WITHOUT_CLASSIFICATION	1.2972156813138627E-7	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999999923971473	WITHOUT_CLASSIFICATION	7.602852638202658E-9	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.99999868943822	WITHOUT_CLASSIFICATION	1.3105617800364157E-6	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999999282183091	WITHOUT_CLASSIFICATION	7.178169090574379E-8	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999999714422375	WITHOUT_CLASSIFICATION	2.8557762482964502E-8	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999999856451092	WITHOUT_CLASSIFICATION	1.435489069106848E-8	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999991149260179	WITHOUT_CLASSIFICATION	8.850739821955478E-7	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999991149260179	WITHOUT_CLASSIFICATION	8.850739821955478E-7	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999991885153476	WITHOUT_CLASSIFICATION	8.114846524937879E-7	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999991405612814	WITHOUT_CLASSIFICATION	8.594387186184677E-7	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999999945952914	WITHOUT_CLASSIFICATION	5.404708561329943E-9	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999976480204823	WITHOUT_CLASSIFICATION	2.351979517738734E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999967200036319	WITHOUT_CLASSIFICATION	3.2799963680415676E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999995622699853	WITHOUT_CLASSIFICATION	4.3773001466148814E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999983212212011	WITHOUT_CLASSIFICATION	1.678778798852838E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999995622699853	WITHOUT_CLASSIFICATION	4.3773001466148814E-7	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9987903276548169	WITHOUT_CLASSIFICATION	0.0012096723451831112	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9998365527272488	WITHOUT_CLASSIFICATION	1.6344727275111864E-4	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9993309768678439	WITHOUT_CLASSIFICATION	6.690231321560984E-4	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9997539206150213	WITHOUT_CLASSIFICATION	2.460793849787137E-4	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999681929007541	WITHOUT_CLASSIFICATION	3.180709924586117E-5	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999959056165179	WITHOUT_CLASSIFICATION	4.094383482178544E-6	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999999638790529	WITHOUT_CLASSIFICATION	3.612094702130868E-8	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999628445161467	WITHOUT_CLASSIFICATION	3.715548385327714E-5	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999890912490954	WITHOUT_CLASSIFICATION	1.0908750904591643E-5	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.6892171835722758	WITHOUT_CLASSIFICATION	0.3107828164277241	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999693609989576	WITHOUT_CLASSIFICATION	3.063900104237424E-5	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999706865091234	WITHOUT_CLASSIFICATION	2.9313490876608037E-5	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999273067002337	WITHOUT_CLASSIFICATION	7.269329976634493E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9992849249124993	WITHOUT_CLASSIFICATION	7.150750875006926E-4	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999999254488682	WITHOUT_CLASSIFICATION	7.455113177990085E-8	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999999254488682	WITHOUT_CLASSIFICATION	7.455113177990085E-8	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999973453757126	WITHOUT_CLASSIFICATION	2.654624287399508E-6	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.999999133863717	WITHOUT_CLASSIFICATION	8.661362829386454E-7	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.999999091517576	WITHOUT_CLASSIFICATION	9.084824239461777E-7	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9998128501322352	WITHOUT_CLASSIFICATION	1.8714986776466398E-4	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999977721514519	WITHOUT_CLASSIFICATION	2.2278485481210525E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999995622699853	WITHOUT_CLASSIFICATION	4.3773001466148814E-7	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999957819502967	WITHOUT_CLASSIFICATION	4.21804970333782E-6	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999996569353048	WITHOUT_CLASSIFICATION	3.430646951943913E-7	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999810128623032	WITHOUT_CLASSIFICATION	1.8987137696775483E-5	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999943569237386	WITHOUT_CLASSIFICATION	5.643076261445804E-6	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999999256591656	WITHOUT_CLASSIFICATION	7.434083443985815E-8	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999998071332766	WITHOUT_CLASSIFICATION	1.9286672335280614E-7	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999988976062585	WITHOUT_CLASSIFICATION	1.1023937415041113E-6	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.999996694577721	WITHOUT_CLASSIFICATION	3.3054222790579114E-6	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999998399713094	WITHOUT_CLASSIFICATION	1.600286907494793E-7	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999998393160321	WITHOUT_CLASSIFICATION	1.6068396786962707E-7	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.999999994485035	WITHOUT_CLASSIFICATION	5.514965114281737E-9	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999999888363267	WITHOUT_CLASSIFICATION	1.116367340340357E-8	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9999906639472065	WITHOUT_CLASSIFICATION	9.336052793496676E-6	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999803043356	WITHOUT_CLASSIFICATION	1.9695664417742867E-8	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9997927595606291	WITHOUT_CLASSIFICATION	2.0724043937101112E-4	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999984476756348	WITHOUT_CLASSIFICATION	1.5523243652116184E-6	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.999997341493779	WITHOUT_CLASSIFICATION	2.6585062209641727E-6	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9999899753822853	WITHOUT_CLASSIFICATION	1.0024617714711119E-5	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999927390512102	WITHOUT_CLASSIFICATION	7.260948789832381E-6	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999991703290398	WITHOUT_CLASSIFICATION	8.296709600912577E-7	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.999999922039422	WITHOUT_CLASSIFICATION	7.796057796705413E-8	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.999675447723705	WITHOUT_CLASSIFICATION	3.2455227629505056E-4	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999999985642293	WITHOUT_CLASSIFICATION	1.435770792076124E-9	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999991810976885	WITHOUT_CLASSIFICATION	8.189023116325566E-7	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999964795996177	WITHOUT_CLASSIFICATION	3.5204003824244373E-6	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999997969800436	WITHOUT_CLASSIFICATION	2.0301995636420566E-7	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999997309801957	WITHOUT_CLASSIFICATION	2.6901980427756697E-7	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999961803257175	WITHOUT_CLASSIFICATION	3.819674282517925E-6	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.999996595854807	WITHOUT_CLASSIFICATION	3.404145192949238E-6	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999999202274885	WITHOUT_CLASSIFICATION	7.977251157058626E-8	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999922363858972	WITHOUT_CLASSIFICATION	7.763614102784034E-6	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999995667087436	WITHOUT_CLASSIFICATION	4.332912565056867E-7	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999999777245564	WITHOUT_CLASSIFICATION	2.2275443587332134E-8	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.999731325881968	WITHOUT_CLASSIFICATION	2.68674118031968E-4	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999799009262371	WITHOUT_CLASSIFICATION	2.0099073762879666E-5	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999997298313935	WITHOUT_CLASSIFICATION	2.701686064260592E-7	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999967973879444	WITHOUT_CLASSIFICATION	3.2026120554530367E-6	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999997628497594	WITHOUT_CLASSIFICATION	2.3715024063796468E-7	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999995453108749	WITHOUT_CLASSIFICATION	4.546891251414923E-7	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999999878123993	WITHOUT_CLASSIFICATION	1.2187600708754211E-8	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997861419948493	WITHOUT_CLASSIFICATION	2.138580051507219E-4	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999835904127089	WITHOUT_CLASSIFICATION	1.640958729114299E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.99999929963843	WITHOUT_CLASSIFICATION	7.003615699269425E-7	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999633267529995	WITHOUT_CLASSIFICATION	3.6673247000562344E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999997118193079	WITHOUT_CLASSIFICATION	2.8818069206557745E-7	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9998365527272488	WITHOUT_CLASSIFICATION	1.6344727275111864E-4	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.999960909867235	WITHOUT_CLASSIFICATION	3.9090132765016354E-5	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999899764176383	WITHOUT_CLASSIFICATION	1.0023582361660714E-5	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9996426227009058	WITHOUT_CLASSIFICATION	3.5737729909428973E-4	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998919527725	WITHOUT_CLASSIFICATION	1.0804722753698272E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998919527725	WITHOUT_CLASSIFICATION	1.0804722753698272E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.999975758662667	WITHOUT_CLASSIFICATION	2.424133733293944E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.999975758662667	WITHOUT_CLASSIFICATION	2.424133733293944E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.999975758662667	WITHOUT_CLASSIFICATION	2.424133733293944E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999969003358339	WITHOUT_CLASSIFICATION	3.0996641660651626E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999969003358339	WITHOUT_CLASSIFICATION	3.0996641660651626E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999827223117729	WITHOUT_CLASSIFICATION	1.7277688227214463E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999827223117729	WITHOUT_CLASSIFICATION	1.7277688227214463E-5	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999978904257948	WITHOUT_CLASSIFICATION	2.109574205304354E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9999763442238021	WITHOUT_CLASSIFICATION	2.365577619793785E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999992293046157	WITHOUT_CLASSIFICATION	7.706953843552281E-7	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999992293046157	WITHOUT_CLASSIFICATION	7.706953843552281E-7	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999967189396671	WITHOUT_CLASSIFICATION	3.2810603329210047E-6	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.999999931874125	WITHOUT_CLASSIFICATION	6.812587500903784E-8	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9997871664951535	WITHOUT_CLASSIFICATION	2.1283350484635447E-4	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999999763603153	WITHOUT_CLASSIFICATION	2.3639684660021698E-8	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999955092955136	WITHOUT_CLASSIFICATION	4.490704486390131E-6	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999999887050179	WITHOUT_CLASSIFICATION	1.1294982065594473E-8	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999995039468911	WITHOUT_CLASSIFICATION	4.960531089806644E-7	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999857186736729	WITHOUT_CLASSIFICATION	1.4281326327173953E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999778097365153	WITHOUT_CLASSIFICATION	2.2190263484753468E-5	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.999993080589084	WITHOUT_CLASSIFICATION	6.919410915973837E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999995918992692	WITHOUT_CLASSIFICATION	4.081007307942213E-7	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.999999378421102	WITHOUT_CLASSIFICATION	6.21578898029685E-7	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9998706554173007	WITHOUT_CLASSIFICATION	1.2934458269933636E-4	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999788163132587	WITHOUT_CLASSIFICATION	2.118368674140045E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999995076601756	WITHOUT_CLASSIFICATION	4.923398243319083E-7	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999811299579627	WITHOUT_CLASSIFICATION	1.8870042037196055E-5	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999873974745784	WITHOUT_CLASSIFICATION	1.2602525421562885E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999936513201164	WITHOUT_CLASSIFICATION	6.348679883630303E-6	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999928700274701	WITHOUT_CLASSIFICATION	7.1299725299712005E-6	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999331707190892	WITHOUT_CLASSIFICATION	6.682928091081858E-5	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999809365542365	WITHOUT_CLASSIFICATION	1.9063445763546918E-5	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999546753415068	WITHOUT_CLASSIFICATION	4.5324658493189814E-5	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999948528417457	WITHOUT_CLASSIFICATION	5.147158254279192E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999995395081878	WITHOUT_CLASSIFICATION	4.6049181229080205E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999993694421574	WITHOUT_CLASSIFICATION	6.30557842630816E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999990692982064	WITHOUT_CLASSIFICATION	9.307017937193474E-7	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999994478922448	WITHOUT_CLASSIFICATION	5.52107755236624E-7	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999991787662916	WITHOUT_CLASSIFICATION	8.212337082776384E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999995621428608	WITHOUT_CLASSIFICATION	4.378571392050157E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999994004361249	WITHOUT_CLASSIFICATION	5.995638750059204E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999991150452117	WITHOUT_CLASSIFICATION	8.849547883214172E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997679078672	WITHOUT_CLASSIFICATION	2.3209213282245077E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999682192988	WITHOUT_CLASSIFICATION	3.1780701198718235E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997891141711	WITHOUT_CLASSIFICATION	2.1088582893800615E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999682192988	WITHOUT_CLASSIFICATION	3.1780701198718235E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999682192988	WITHOUT_CLASSIFICATION	3.1780701198718235E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999682192988	WITHOUT_CLASSIFICATION	3.1780701198718235E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999682192988	WITHOUT_CLASSIFICATION	3.1780701198718235E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999682192988	WITHOUT_CLASSIFICATION	3.1780701198718235E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999682192988	WITHOUT_CLASSIFICATION	3.1780701198718235E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997891141711	WITHOUT_CLASSIFICATION	2.1088582893800615E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997891141711	WITHOUT_CLASSIFICATION	2.1088582893800615E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997891141711	WITHOUT_CLASSIFICATION	2.1088582893800615E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997891141711	WITHOUT_CLASSIFICATION	2.1088582893800615E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997891141711	WITHOUT_CLASSIFICATION	2.1088582893800615E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997891141711	WITHOUT_CLASSIFICATION	2.1088582893800615E-7	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9998888627058179	WITHOUT_CLASSIFICATION	1.111372941821403E-4	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999902503163124	WITHOUT_CLASSIFICATION	9.749683687729598E-6	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.999998641410437	WITHOUT_CLASSIFICATION	1.3585895629155865E-6	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999718357176899	WITHOUT_CLASSIFICATION	2.8164282310088914E-5	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.999972676218493	WITHOUT_CLASSIFICATION	2.7323781506959562E-5	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999929210655357	WITHOUT_CLASSIFICATION	7.078934464370632E-6	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999999810537266	WITHOUT_CLASSIFICATION	1.894627342923915E-8	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999997561587535	WITHOUT_CLASSIFICATION	2.4384124650899873E-7	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999982747885041	WITHOUT_CLASSIFICATION	1.7252114959030027E-6	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999959954605431	WITHOUT_CLASSIFICATION	4.004539456943413E-6	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999868529973641	WITHOUT_CLASSIFICATION	1.3147002635789456E-5	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999971217905393	WITHOUT_CLASSIFICATION	2.878209460719131E-6	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999966055524632	WITHOUT_CLASSIFICATION	3.3944475368737155E-6	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999999616870661	WITHOUT_CLASSIFICATION	3.8312933909246295E-8	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.999999981843674	WITHOUT_CLASSIFICATION	1.8156325999863795E-8	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999985449353479	WITHOUT_CLASSIFICATION	1.4550646521886757E-6	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9998852271834957	WITHOUT_CLASSIFICATION	1.1477281650432339E-4	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999884812217673	WITHOUT_CLASSIFICATION	1.1518778232737244E-5	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999898579621865	WITHOUT_CLASSIFICATION	1.0142037813528822E-5	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999842300864964	WITHOUT_CLASSIFICATION	1.57699135036495E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999987014723198	WITHOUT_CLASSIFICATION	1.298527680133622E-6	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999995163831403	WITHOUT_CLASSIFICATION	4.836168597382269E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999983212212011	WITHOUT_CLASSIFICATION	1.678778798852838E-6	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9846017117222085	WITHOUT_CLASSIFICATION	0.015398288277791489	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9997920260967372	WITHOUT_CLASSIFICATION	2.0797390326278892E-4	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999717315104288	WITHOUT_CLASSIFICATION	2.8268489571081955E-5	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.999999574417664	WITHOUT_CLASSIFICATION	4.2558233600786484E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.999977710179391	WITHOUT_CLASSIFICATION	2.2289820609027358E-5	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999918905669034	WITHOUT_CLASSIFICATION	8.109433096547708E-6	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999517551510533	WITHOUT_CLASSIFICATION	4.824484894668193E-5	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999969314678816	WITHOUT_CLASSIFICATION	3.068532118405663E-6	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.999995797899993	WITHOUT_CLASSIFICATION	4.20210000695805E-6	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999541050329775	WITHOUT_CLASSIFICATION	4.589496702240258E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999989500272065	WITHOUT_CLASSIFICATION	1.0499727935399998E-6	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.99999983867166	WITHOUT_CLASSIFICATION	1.6132834005544724E-7	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999999883383336	WITHOUT_CLASSIFICATION	1.166166639381427E-8	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999924562412826	WITHOUT_CLASSIFICATION	7.543758717394059E-6	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9998692321387829	WITHOUT_CLASSIFICATION	1.3076786121708853E-4	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999995373326993	WITHOUT_CLASSIFICATION	4.626673007116409E-7	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999928616558171	WITHOUT_CLASSIFICATION	7.138344182843228E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999988346067585	WITHOUT_CLASSIFICATION	1.1653932414518832E-6	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999999747536535	WITHOUT_CLASSIFICATION	2.524634643664968E-8	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999999794477326	WITHOUT_CLASSIFICATION	2.0552267439032235E-8	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.999999361298938	WITHOUT_CLASSIFICATION	6.387010621662815E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.999999361298938	WITHOUT_CLASSIFICATION	6.387010621662815E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999997731772504	WITHOUT_CLASSIFICATION	2.2682274946664573E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999997731772504	WITHOUT_CLASSIFICATION	2.2682274946664573E-7	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999999220264107	WITHOUT_CLASSIFICATION	7.797358929946236E-8	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999999220264107	WITHOUT_CLASSIFICATION	7.797358929946236E-8	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999887424301392	WITHOUT_CLASSIFICATION	1.1257569860835431E-5	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.999999842309829	WITHOUT_CLASSIFICATION	1.5769017110862265E-7	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999997692838014	WITHOUT_CLASSIFICATION	2.307161985960393E-7	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.99999209861973	WITHOUT_CLASSIFICATION	7.90138026994343E-6	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999976003818125	WITHOUT_CLASSIFICATION	2.3996181874403003E-6	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9999926128635441	WITHOUT_CLASSIFICATION	7.387136455913287E-6	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999999253915928	WITHOUT_CLASSIFICATION	7.460840727871182E-8	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999988086508025	WITHOUT_CLASSIFICATION	1.1913491975198715E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999989647174653	WITHOUT_CLASSIFICATION	1.0352825346705124E-6	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999604508147723	WITHOUT_CLASSIFICATION	3.954918522778231E-5	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9997910144422414	WITHOUT_CLASSIFICATION	2.0898555775857275E-4	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999909590007838	WITHOUT_CLASSIFICATION	9.040999216238029E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.999997623170761	WITHOUT_CLASSIFICATION	2.3768292390230716E-6	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9951605479713066	WITHOUT_CLASSIFICATION	0.004839452028693324	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999881472275437	WITHOUT_CLASSIFICATION	1.1852772456301681E-5	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999972186713479	WITHOUT_CLASSIFICATION	2.78132865208445E-6	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999935936407802	WITHOUT_CLASSIFICATION	6.406359219795927E-6	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999506945287235	WITHOUT_CLASSIFICATION	4.930547127633914E-5	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999995078362096	WITHOUT_CLASSIFICATION	4.921637904662921E-7	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999940692834777	WITHOUT_CLASSIFICATION	5.930716522336333E-6	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999963465744449	WITHOUT_CLASSIFICATION	3.653425554957169E-6	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9997568089192223	WITHOUT_CLASSIFICATION	2.4319108077764813E-4	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999883101393326	WITHOUT_CLASSIFICATION	1.168986066729881E-5	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999962072274692	WITHOUT_CLASSIFICATION	3.7927725309062245E-6	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999990444823619	WITHOUT_CLASSIFICATION	9.555176381770608E-7	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999840951919253	WITHOUT_CLASSIFICATION	1.590480807473409E-5	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999928053036055	WITHOUT_CLASSIFICATION	7.194696394451938E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999989567303945	WITHOUT_CLASSIFICATION	1.043269605443852E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999989567303945	WITHOUT_CLASSIFICATION	1.043269605443852E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999989567303945	WITHOUT_CLASSIFICATION	1.043269605443852E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999375554696	WITHOUT_CLASSIFICATION	6.244453045987043E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999375554696	WITHOUT_CLASSIFICATION	6.244453045987043E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999803043356	WITHOUT_CLASSIFICATION	1.9695664417742867E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999803043356	WITHOUT_CLASSIFICATION	1.9695664417742867E-8	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999999995747704	WITHOUT_CLASSIFICATION	4.2522959609588956E-10	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9326034604254247	WITHOUT_CLASSIFICATION	0.06739653957457518	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999999718792558	WITHOUT_CLASSIFICATION	2.812074428601618E-8	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999986084843466	WITHOUT_CLASSIFICATION	1.3915156532861585E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999989567303945	WITHOUT_CLASSIFICATION	1.043269605443852E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999989567303945	WITHOUT_CLASSIFICATION	1.043269605443852E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999989567303945	WITHOUT_CLASSIFICATION	1.043269605443852E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999375554696	WITHOUT_CLASSIFICATION	6.244453045987043E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999375554696	WITHOUT_CLASSIFICATION	6.244453045987043E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999375554696	WITHOUT_CLASSIFICATION	6.244453045987043E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999803043356	WITHOUT_CLASSIFICATION	1.9695664417742867E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999803043356	WITHOUT_CLASSIFICATION	1.9695664417742867E-8	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999989357231821	WITHOUT_CLASSIFICATION	1.0642768178017321E-6	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999999813967786	WITHOUT_CLASSIFICATION	1.8603221468206235E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999799964474	WITHOUT_CLASSIFICATION	2.0003552513427513E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999799964474	WITHOUT_CLASSIFICATION	2.0003552513427513E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999799964474	WITHOUT_CLASSIFICATION	2.0003552513427513E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999799964474	WITHOUT_CLASSIFICATION	2.0003552513427513E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999799964474	WITHOUT_CLASSIFICATION	2.0003552513427513E-8	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999995650885399	WITHOUT_CLASSIFICATION	4.3491146010934674E-7	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999950194725787	WITHOUT_CLASSIFICATION	4.9805274213069786E-6	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9997500213200059	WITHOUT_CLASSIFICATION	2.499786799941226E-4	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999897900484324	WITHOUT_CLASSIFICATION	1.0209951567630918E-5	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999996238063692	WITHOUT_CLASSIFICATION	3.7619363082407483E-7	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999980960631891	WITHOUT_CLASSIFICATION	1.9039368108874762E-6	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999663323955585	WITHOUT_CLASSIFICATION	3.3667604441385745E-5	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999975658236044	WITHOUT_CLASSIFICATION	2.43417639548114E-6	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999993839763688	WITHOUT_CLASSIFICATION	6.160236311825355E-7	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999971481335328	WITHOUT_CLASSIFICATION	2.851866467236389E-6	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9999716579569441	WITHOUT_CLASSIFICATION	2.834204305598046E-5	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999928825456667	WITHOUT_CLASSIFICATION	7.117454333424341E-6	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9999394105313937	WITHOUT_CLASSIFICATION	6.0589468606289364E-5	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999937499627568	WITHOUT_CLASSIFICATION	6.250037243109627E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9999738469195768	WITHOUT_CLASSIFICATION	2.6153080423269557E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.999997979950852	WITHOUT_CLASSIFICATION	2.020049148039421E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.999997979950852	WITHOUT_CLASSIFICATION	2.020049148039421E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.999997979950852	WITHOUT_CLASSIFICATION	2.020049148039421E-6	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999797088605177	WITHOUT_CLASSIFICATION	2.0291139482328386E-5	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.999979715401644	WITHOUT_CLASSIFICATION	2.0284598355956323E-5	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999986717219145	WITHOUT_CLASSIFICATION	1.3282780854190264E-6	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999968748615307	WITHOUT_CLASSIFICATION	3.125138469312266E-6	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999989959685518	WITHOUT_CLASSIFICATION	1.004031448161382E-6	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999961306495531	WITHOUT_CLASSIFICATION	3.869350447002376E-6	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999972770429608	WITHOUT_CLASSIFICATION	2.722957039187556E-6	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999999238533976	WITHOUT_CLASSIFICATION	7.614660237048768E-8	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999995192939638	WITHOUT_CLASSIFICATION	4.807060362181356E-7	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999986158468228	WITHOUT_CLASSIFICATION	1.3841531770905742E-6	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999984583555193	WITHOUT_CLASSIFICATION	1.5416444808255871E-6	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999999658560258	WITHOUT_CLASSIFICATION	3.4143974163366314E-8	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999993551136677	WITHOUT_CLASSIFICATION	6.44886332293619E-7	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999999764473004	WITHOUT_CLASSIFICATION	2.355269952439381E-8	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999999908447461	WITHOUT_CLASSIFICATION	9.15525392056816E-9	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999824253678078	WITHOUT_CLASSIFICATION	1.7574632192115028E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999844474572235	WITHOUT_CLASSIFICATION	1.555254277657316E-5	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999999809200212	WITHOUT_CLASSIFICATION	1.9079978752003397E-8	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999994684290141	WITHOUT_CLASSIFICATION	5.315709859269266E-7	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999909128948893	WITHOUT_CLASSIFICATION	9.087105110662766E-6	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9999124464792222	WITHOUT_CLASSIFICATION	8.755352077778202E-5	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999959502798087	WITHOUT_CLASSIFICATION	4.049720191299123E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9993423945844908	WITHOUT_CLASSIFICATION	6.576054155092147E-4	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999997940478188	WITHOUT_CLASSIFICATION	2.059521811752091E-7	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999986167075944	WITHOUT_CLASSIFICATION	1.3832924056329348E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999948914809703	WITHOUT_CLASSIFICATION	5.108519029786979E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999979490942436	WITHOUT_CLASSIFICATION	2.0509057564873597E-6	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.999996755008058	WITHOUT_CLASSIFICATION	3.244991941932307E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999843261097694	WITHOUT_CLASSIFICATION	1.5673890230581425E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999405565726179	WITHOUT_CLASSIFICATION	5.9443427381981937E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9998288973949466	WITHOUT_CLASSIFICATION	1.7110260505338228E-4	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999102677535682	WITHOUT_CLASSIFICATION	8.973224643187216E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9998990686510885	WITHOUT_CLASSIFICATION	1.0093134891154652E-4	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9998450750536685	WITHOUT_CLASSIFICATION	1.5492494633140134E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9998995998468144	WITHOUT_CLASSIFICATION	1.0040015318557975E-4	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.999916774520625	WITHOUT_CLASSIFICATION	8.32254793748915E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999998798394113	WITHOUT_CLASSIFICATION	1.2016058875740164E-7	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999988874577351	WITHOUT_CLASSIFICATION	1.1125422648514286E-6	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999908783372	WITHOUT_CLASSIFICATION	9.121662751090752E-9	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9957626784746229	WITHOUT_CLASSIFICATION	0.0042373215253771485	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999908857901143	WITHOUT_CLASSIFICATION	9.114209885754802E-6	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9587490684325934	WITHOUT_CLASSIFICATION	0.041250931567406536	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999755883988384	WITHOUT_CLASSIFICATION	2.4411601161609497E-5	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999837957356082	WITHOUT_CLASSIFICATION	1.6204264391765838E-5	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999946463174534	WITHOUT_CLASSIFICATION	5.353682546624671E-6	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9999655125992768	WITHOUT_CLASSIFICATION	3.4487400723249034E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999061537620825	WITHOUT_CLASSIFICATION	9.384623791748668E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999061537620825	WITHOUT_CLASSIFICATION	9.384623791748668E-5	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999995932473057	WITHOUT_CLASSIFICATION	4.0675269432394086E-7	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999966525273624	WITHOUT_CLASSIFICATION	3.3474726375158717E-6	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9999586284817135	WITHOUT_CLASSIFICATION	4.137151828655857E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999698286630598	WITHOUT_CLASSIFICATION	3.0171336940183077E-5	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999951121290946	WITHOUT_CLASSIFICATION	4.887870905350037E-6	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999961439636056	WITHOUT_CLASSIFICATION	3.856036394495942E-6	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999999422717178	WITHOUT_CLASSIFICATION	5.772828210142576E-8	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999994435031361	WITHOUT_CLASSIFICATION	5.564968638868135E-7	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999997224825995	WITHOUT_CLASSIFICATION	2.775174005549377E-7	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999985565616774	WITHOUT_CLASSIFICATION	1.4434383226455277E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999268907976	WITHOUT_CLASSIFICATION	7.310920238994852E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999268907976	WITHOUT_CLASSIFICATION	7.310920238994852E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999268907976	WITHOUT_CLASSIFICATION	7.310920238994852E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999268907976	WITHOUT_CLASSIFICATION	7.310920238994852E-8	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999951418097548	WITHOUT_CLASSIFICATION	4.8581902452780305E-6	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.999999216166912	WITHOUT_CLASSIFICATION	7.838330879888847E-7	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999987224786944	WITHOUT_CLASSIFICATION	1.2775213056727806E-6	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999980479888881	WITHOUT_CLASSIFICATION	1.9520111118499386E-6	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9998887758177405	WITHOUT_CLASSIFICATION	1.1122418225954573E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9996536370923071	WITHOUT_CLASSIFICATION	3.463629076928339E-4	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9998586895142753	WITHOUT_CLASSIFICATION	1.4131048572473977E-4	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999991272720545	WITHOUT_CLASSIFICATION	8.727279454854046E-7	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999991272720545	WITHOUT_CLASSIFICATION	8.727279454854046E-7	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9996297877332132	WITHOUT_CLASSIFICATION	3.70212266786888E-4	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.999998142485325	WITHOUT_CLASSIFICATION	1.8575146750225084E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999965996278	WITHOUT_CLASSIFICATION	3.4003721597926014E-9	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9973855096668363	WITHOUT_CLASSIFICATION	0.002614490333163853	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9973855096668363	WITHOUT_CLASSIFICATION	0.002614490333163853	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9843470436951269	WITHOUT_CLASSIFICATION	0.015652956304873088	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999958771742694	WITHOUT_CLASSIFICATION	4.122825730587452E-6	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999958771742694	WITHOUT_CLASSIFICATION	4.122825730587452E-6	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9710154605890952	WITHOUT_CLASSIFICATION	0.028984539410904755	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999968261809858	WITHOUT_CLASSIFICATION	3.1738190141031734E-6	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999390746575977	WITHOUT_CLASSIFICATION	6.092534240221722E-5	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9504782500677619	WITHOUT_CLASSIFICATION	0.04952174993223804	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9999228241559768	WITHOUT_CLASSIFICATION	7.717584402326364E-5	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999999686704782	WITHOUT_CLASSIFICATION	3.1329521709774295E-8	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9997909230632387	WITHOUT_CLASSIFICATION	2.0907693676132296E-4	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999987712145919	WITHOUT_CLASSIFICATION	1.2287854081073993E-6	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.999999353741816	WITHOUT_CLASSIFICATION	6.462581840229807E-7	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999903703068121	WITHOUT_CLASSIFICATION	9.62969318788633E-6	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999973899361722	WITHOUT_CLASSIFICATION	2.6100638279091704E-6	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999995831401343	WITHOUT_CLASSIFICATION	4.1685986583230254E-7	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9999181319726055	WITHOUT_CLASSIFICATION	8.186802739448789E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9999631105005342	WITHOUT_CLASSIFICATION	3.688949946572327E-5	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999977013421398	WITHOUT_CLASSIFICATION	2.298657860190675E-6	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9998620054698596	WITHOUT_CLASSIFICATION	1.3799453014032772E-4	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999863397782958	WITHOUT_CLASSIFICATION	1.3660221704300094E-5	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.99999990828053	WITHOUT_CLASSIFICATION	9.171947005749039E-8	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999992853246958	WITHOUT_CLASSIFICATION	7.146753041294458E-7	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9967890019536059	WITHOUT_CLASSIFICATION	0.003210998046394179	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9971348608983961	WITHOUT_CLASSIFICATION	0.0028651391016039835	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9999953032819825	WITHOUT_CLASSIFICATION	4.696718017502322E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999983397820784	WITHOUT_CLASSIFICATION	1.660217921684605E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9995048405807915	WITHOUT_CLASSIFICATION	4.951594192084083E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9813945431473262	WITHOUT_CLASSIFICATION	0.01860545685267388	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9864481125168123	WITHOUT_CLASSIFICATION	0.013551887483187693	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999998190322078	WITHOUT_CLASSIFICATION	1.8096779211338208E-7	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999605448717067	WITHOUT_CLASSIFICATION	3.945512829321845E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.999999661998477	WITHOUT_CLASSIFICATION	3.380015229399864E-7	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999952765256223	WITHOUT_CLASSIFICATION	4.7234743777387155E-6	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999060711005041	WITHOUT_CLASSIFICATION	9.39288994958414E-5	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999872850232826	WITHOUT_CLASSIFICATION	1.2714976717497576E-5	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.9797550854127172	DEFECT	0.020244914587282885	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9998389915848837	WITHOUT_CLASSIFICATION	1.6100841511645694E-4	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999995863821709	WITHOUT_CLASSIFICATION	4.1361782909184816E-7	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9998375271468098	WITHOUT_CLASSIFICATION	1.624728531901168E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999927974301461	WITHOUT_CLASSIFICATION	7.202569853808259E-6	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.999999897852452	WITHOUT_CLASSIFICATION	1.0214754795115058E-7	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999991811311565	WITHOUT_CLASSIFICATION	8.188688436176009E-7	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9998375271468098	WITHOUT_CLASSIFICATION	1.624728531901168E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999927974301461	WITHOUT_CLASSIFICATION	7.202569853808259E-6	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999962706817962	WITHOUT_CLASSIFICATION	3.7293182038685206E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999893164865394	WITHOUT_CLASSIFICATION	1.0683513460639286E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999893164865394	WITHOUT_CLASSIFICATION	1.0683513460639286E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999978141702539	WITHOUT_CLASSIFICATION	2.1858297460649585E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9980776031259257	WITHOUT_CLASSIFICATION	0.0019223968740742295	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999770256328611	WITHOUT_CLASSIFICATION	2.2974367138866164E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999835430239666	WITHOUT_CLASSIFICATION	1.6456976033320144E-5	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999803300449491	WITHOUT_CLASSIFICATION	1.9669955050817545E-5	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9077643488061381	WITHOUT_CLASSIFICATION	0.09223565119386196	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999974106061345	WITHOUT_CLASSIFICATION	2.5893938654689355E-6	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999999638960791	WITHOUT_CLASSIFICATION	3.610392087832127E-8	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999997511244806	WITHOUT_CLASSIFICATION	2.48875519396927E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999636649864198	WITHOUT_CLASSIFICATION	3.633501358022201E-5	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.999996158761648	WITHOUT_CLASSIFICATION	3.84123835194963E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999988591213146	WITHOUT_CLASSIFICATION	1.1408786853314902E-6	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9998878351506745	WITHOUT_CLASSIFICATION	1.1216484932560703E-4	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.999999921717626	WITHOUT_CLASSIFICATION	7.828237403104171E-8	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.999999921717626	WITHOUT_CLASSIFICATION	7.828237403104171E-8	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999929402926817	WITHOUT_CLASSIFICATION	7.059707318274382E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999929402926817	WITHOUT_CLASSIFICATION	7.059707318274382E-6	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999992357374126	WITHOUT_CLASSIFICATION	7.64262587361335E-7	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999993986032482	WITHOUT_CLASSIFICATION	6.013967518811678E-7	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999968212032572	WITHOUT_CLASSIFICATION	3.17879674296132E-6	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999917156943223	WITHOUT_CLASSIFICATION	8.28430567764268E-6	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999927898138685	WITHOUT_CLASSIFICATION	7.210186131474349E-6	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999982790215537	WITHOUT_CLASSIFICATION	1.7209784462731775E-6	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999770256328611	WITHOUT_CLASSIFICATION	2.2974367138866164E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999835430239666	WITHOUT_CLASSIFICATION	1.6456976033320144E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999997511244806	WITHOUT_CLASSIFICATION	2.48875519396927E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999636649864198	WITHOUT_CLASSIFICATION	3.633501358022201E-5	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999969840871189	WITHOUT_CLASSIFICATION	3.0159128810387922E-6	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999992666947751	WITHOUT_CLASSIFICATION	7.33305224877225E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999636531166562	WITHOUT_CLASSIFICATION	3.6346883343746485E-5	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999960715718007	WITHOUT_CLASSIFICATION	3.92842819933496E-6	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999996617378945	WITHOUT_CLASSIFICATION	3.382621055488751E-7	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999955555985262	WITHOUT_CLASSIFICATION	4.44440147391218E-6	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9972096027482813	WITHOUT_CLASSIFICATION	0.002790397251718753	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999865549094914	WITHOUT_CLASSIFICATION	1.3445090508607955E-5	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999875973251046	WITHOUT_CLASSIFICATION	1.2402674895493133E-5	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999990015653943	WITHOUT_CLASSIFICATION	9.98434605678124E-7	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9997663387341502	WITHOUT_CLASSIFICATION	2.3366126584979132E-4	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999975418696253	WITHOUT_CLASSIFICATION	2.4581303745735994E-6	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999973206998879	WITHOUT_CLASSIFICATION	2.6793001120956206E-6	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9993887093919194	WITHOUT_CLASSIFICATION	6.11290608080706E-4	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999829445428184	WITHOUT_CLASSIFICATION	1.7055457181589734E-5	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9997719337853992	WITHOUT_CLASSIFICATION	2.2806621460073673E-4	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999982834560233	WITHOUT_CLASSIFICATION	1.7165439767881886E-6	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9999980761015961	WITHOUT_CLASSIFICATION	1.923898403922401E-6	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999997475198459	WITHOUT_CLASSIFICATION	2.5248015411618854E-7	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999995078950207	WITHOUT_CLASSIFICATION	4.921049792632218E-7	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999993951563806	WITHOUT_CLASSIFICATION	6.048436193728174E-7	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999993951563806	WITHOUT_CLASSIFICATION	6.048436193728174E-7	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999481508969732	WITHOUT_CLASSIFICATION	5.1849103026852E-5	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999979330294094	WITHOUT_CLASSIFICATION	2.0669705905444708E-6	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9634247348253435	WITHOUT_CLASSIFICATION	0.03657526517465652	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999995738140044	WITHOUT_CLASSIFICATION	4.261859955663755E-7	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999995738140044	WITHOUT_CLASSIFICATION	4.261859955663755E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999636531166562	WITHOUT_CLASSIFICATION	3.6346883343746485E-5	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999980539853331	WITHOUT_CLASSIFICATION	1.9460146669017675E-6	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999992834090026	WITHOUT_CLASSIFICATION	7.165909975362594E-7	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999988975532694	WITHOUT_CLASSIFICATION	1.1024467304962922E-6	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999988614196618	WITHOUT_CLASSIFICATION	1.1385803382008421E-6	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999995424149171	WITHOUT_CLASSIFICATION	4.5758508289648216E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999740791372123	WITHOUT_CLASSIFICATION	2.5920862787767516E-5	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.999999363896347	WITHOUT_CLASSIFICATION	6.361036529201739E-7	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999998009330657	WITHOUT_CLASSIFICATION	1.9906693433663238E-7	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999991051391396	WITHOUT_CLASSIFICATION	8.94860860364187E-7	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999867371309611	WITHOUT_CLASSIFICATION	1.326286903882467E-5	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999394537853947	WITHOUT_CLASSIFICATION	6.054621460523294E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999782679450505	WITHOUT_CLASSIFICATION	2.173205494948645E-5	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9999995168115983	WITHOUT_CLASSIFICATION	4.831884017563771E-7	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999920506116171	WITHOUT_CLASSIFICATION	7.949388382989348E-6	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.999998265501615	WITHOUT_CLASSIFICATION	1.7344983850193094E-6	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999993377291254	WITHOUT_CLASSIFICATION	6.622708745792767E-7	DEFECT
// states	WITHOUT_CLASSIFICATION	0.999998512896737	WITHOUT_CLASSIFICATION	1.4871032630074742E-6	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999798506874934	WITHOUT_CLASSIFICATION	2.0149312506655288E-5	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999973980498291	WITHOUT_CLASSIFICATION	2.601950170859912E-6	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.99999950620346	WITHOUT_CLASSIFICATION	4.937965400207779E-7	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999988264608694	WITHOUT_CLASSIFICATION	1.1735391306053327E-6	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999484838735394	WITHOUT_CLASSIFICATION	5.1516126460596104E-5	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999933161778123	WITHOUT_CLASSIFICATION	6.6838221877580746E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999902703742	WITHOUT_CLASSIFICATION	9.729625866983691E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999980812474015	WITHOUT_CLASSIFICATION	1.918752598400183E-6	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999975666576933	WITHOUT_CLASSIFICATION	2.433342306597561E-6	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999996607065308	WITHOUT_CLASSIFICATION	3.3929346919524596E-7	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999976267226552	WITHOUT_CLASSIFICATION	2.373277344793848E-6	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.999989789891265	WITHOUT_CLASSIFICATION	1.0210108734957494E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999578186003	WITHOUT_CLASSIFICATION	4.218139971864158E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999578186003	WITHOUT_CLASSIFICATION	4.218139971864158E-8	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999992937760297	WITHOUT_CLASSIFICATION	7.062239703296092E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.999999876373334	WITHOUT_CLASSIFICATION	1.2362666609933913E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.999999876373334	WITHOUT_CLASSIFICATION	1.2362666609933913E-7	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999819002291948	WITHOUT_CLASSIFICATION	1.8099770805192217E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999819002291948	WITHOUT_CLASSIFICATION	1.8099770805192217E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999977102206923	WITHOUT_CLASSIFICATION	2.289779307636111E-6	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999998950735121	WITHOUT_CLASSIFICATION	1.0492648786532842E-7	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999968526907227	WITHOUT_CLASSIFICATION	3.1473092772076307E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999965226523126	WITHOUT_CLASSIFICATION	3.4773476872885918E-6	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999999129925252	WITHOUT_CLASSIFICATION	8.700747484866345E-8	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999959824305499	WITHOUT_CLASSIFICATION	4.017569450167243E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999959824305499	WITHOUT_CLASSIFICATION	4.017569450167243E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999902703742	WITHOUT_CLASSIFICATION	9.729625866983691E-9	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999902703742	WITHOUT_CLASSIFICATION	9.729625866983691E-9	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999902703742	WITHOUT_CLASSIFICATION	9.729625866983691E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999980812474015	WITHOUT_CLASSIFICATION	1.918752598400183E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999578186003	WITHOUT_CLASSIFICATION	4.218139971864158E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999578186003	WITHOUT_CLASSIFICATION	4.218139971864158E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999578186003	WITHOUT_CLASSIFICATION	4.218139971864158E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999977102206923	WITHOUT_CLASSIFICATION	2.289779307636111E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999977102206923	WITHOUT_CLASSIFICATION	2.289779307636111E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999977102206923	WITHOUT_CLASSIFICATION	2.289779307636111E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999965226523126	WITHOUT_CLASSIFICATION	3.4773476872885918E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999965226523126	WITHOUT_CLASSIFICATION	3.4773476872885918E-6	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999977478473626	WITHOUT_CLASSIFICATION	2.2521526374482827E-6	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999992724379477	WITHOUT_CLASSIFICATION	7.275620522173284E-7	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999995373842744	WITHOUT_CLASSIFICATION	4.626157256309324E-7	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.5439484475873922	WITHOUT_CLASSIFICATION	0.45605155241260764	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999982282109157	WITHOUT_CLASSIFICATION	1.7717890842801493E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999969446598116	WITHOUT_CLASSIFICATION	3.0553401883425468E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999969446598116	WITHOUT_CLASSIFICATION	3.0553401883425468E-6	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999992188607116	WITHOUT_CLASSIFICATION	7.811392883125176E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999740791372123	WITHOUT_CLASSIFICATION	2.5920862787767516E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999740791372123	WITHOUT_CLASSIFICATION	2.5920862787767516E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999740791372123	WITHOUT_CLASSIFICATION	2.5920862787767516E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999740791372123	WITHOUT_CLASSIFICATION	2.5920862787767516E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999740791372123	WITHOUT_CLASSIFICATION	2.5920862787767516E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999056965867	WITHOUT_CLASSIFICATION	9.43034133675661E-8	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999056965867	WITHOUT_CLASSIFICATION	9.43034133675661E-8	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999056965867	WITHOUT_CLASSIFICATION	9.43034133675661E-8	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999999880547923	WITHOUT_CLASSIFICATION	1.1945207750550556E-8	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999999204213117	WITHOUT_CLASSIFICATION	7.957868822908972E-8	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999980812474015	WITHOUT_CLASSIFICATION	1.918752598400183E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999977102206923	WITHOUT_CLASSIFICATION	2.289779307636111E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999977102206923	WITHOUT_CLASSIFICATION	2.289779307636111E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999740791372123	WITHOUT_CLASSIFICATION	2.5920862787767516E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999740791372123	WITHOUT_CLASSIFICATION	2.5920862787767516E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999056965867	WITHOUT_CLASSIFICATION	9.43034133675661E-8	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999992188607116	WITHOUT_CLASSIFICATION	7.811392883125176E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999124534840937	WITHOUT_CLASSIFICATION	8.754651590633033E-5	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.999999255062461	WITHOUT_CLASSIFICATION	7.449375389020679E-7	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999957906618083	WITHOUT_CLASSIFICATION	4.209338191692352E-6	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999958536129461	WITHOUT_CLASSIFICATION	4.146387053885694E-6	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999992124487204	WITHOUT_CLASSIFICATION	7.875512796199238E-7	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999999255490883	WITHOUT_CLASSIFICATION	7.445091160909825E-8	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999336030757277	WITHOUT_CLASSIFICATION	6.639692427226528E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999981472195223	WITHOUT_CLASSIFICATION	1.8527804777395645E-6	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999999270904462	WITHOUT_CLASSIFICATION	7.290955385293805E-8	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999999770907889	WITHOUT_CLASSIFICATION	2.290921116730299E-8	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999927229842691	WITHOUT_CLASSIFICATION	7.277015730872923E-6	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.999999731024567	WITHOUT_CLASSIFICATION	2.6897543299897993E-7	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999997355235769	WITHOUT_CLASSIFICATION	2.6447642310054487E-7	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999924250851706	WITHOUT_CLASSIFICATION	7.574914829435457E-6	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999995021830093	WITHOUT_CLASSIFICATION	4.978169906919457E-7	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999738569890775	WITHOUT_CLASSIFICATION	2.614301092249015E-5	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999999648392135	WITHOUT_CLASSIFICATION	3.516078651844439E-8	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9998977567473772	WITHOUT_CLASSIFICATION	1.0224325262276828E-4	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999725800485343	WITHOUT_CLASSIFICATION	2.7419951465712302E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999995726498973	WITHOUT_CLASSIFICATION	4.2735010283602477E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9997915365865864	WITHOUT_CLASSIFICATION	2.084634134136181E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999998415080587	WITHOUT_CLASSIFICATION	1.5849194138254765E-7	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999996643895	WITHOUT_CLASSIFICATION	3.3561062862234254E-10	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999998089471144	WITHOUT_CLASSIFICATION	1.91052885549431E-7	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999937149783923	WITHOUT_CLASSIFICATION	6.2850216077027876E-6	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999322498795081	WITHOUT_CLASSIFICATION	6.775012049190375E-5	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999987761078546	WITHOUT_CLASSIFICATION	1.2238921454816742E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999992842192317	WITHOUT_CLASSIFICATION	7.157807682271302E-7	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.999995961252431	WITHOUT_CLASSIFICATION	4.038747568985103E-6	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.99999635381161	WITHOUT_CLASSIFICATION	3.6461883899861137E-6	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999999973896744	WITHOUT_CLASSIFICATION	2.610325672982808E-9	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999997984456995	WITHOUT_CLASSIFICATION	2.015543003822973E-7	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.999990792281624	WITHOUT_CLASSIFICATION	9.207718376045987E-6	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999969528399307	WITHOUT_CLASSIFICATION	3.0471600692087645E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999124534840937	WITHOUT_CLASSIFICATION	8.754651590633033E-5	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999996795920567	WITHOUT_CLASSIFICATION	3.204079432265045E-7	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9999999800158341	WITHOUT_CLASSIFICATION	1.9984165905660788E-8	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9997536990548034	WITHOUT_CLASSIFICATION	2.463009451965451E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999989602185158	WITHOUT_CLASSIFICATION	1.03978148433388E-6	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999989602185158	WITHOUT_CLASSIFICATION	1.03978148433388E-6	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999976779146714	WITHOUT_CLASSIFICATION	2.322085328570069E-6	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999976779146714	WITHOUT_CLASSIFICATION	2.322085328570069E-6	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.999997860941971	WITHOUT_CLASSIFICATION	2.1390580289854574E-6	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9984232101125144	WITHOUT_CLASSIFICATION	0.0015767898874855407	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999992998457311	WITHOUT_CLASSIFICATION	7.001542688269384E-7	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999995118139131	WITHOUT_CLASSIFICATION	4.88186086919577E-7	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999999357216175	WITHOUT_CLASSIFICATION	6.427838248427262E-8	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.999996963437245	WITHOUT_CLASSIFICATION	3.0365627550815125E-6	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999563032013951	WITHOUT_CLASSIFICATION	4.3696798604899715E-5	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999669281358261	WITHOUT_CLASSIFICATION	3.307186417394812E-5	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999996174681816	WITHOUT_CLASSIFICATION	3.8253181841142355E-7	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.999986841791219	WITHOUT_CLASSIFICATION	1.3158208781003052E-5	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.999998815442439	WITHOUT_CLASSIFICATION	1.184557561022257E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999995801813918	WITHOUT_CLASSIFICATION	4.1981860823667937E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999995801813918	WITHOUT_CLASSIFICATION	4.1981860823667937E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999984527081968	WITHOUT_CLASSIFICATION	1.5472918031809546E-6	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999929357670422	WITHOUT_CLASSIFICATION	7.064232957924312E-6	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999980613059768	WITHOUT_CLASSIFICATION	1.9386940232621175E-6	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999980613059768	WITHOUT_CLASSIFICATION	1.9386940232621175E-6	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999725285928164	WITHOUT_CLASSIFICATION	2.7471407183634583E-5	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.999997784991717	WITHOUT_CLASSIFICATION	2.2150082830327497E-6	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999967058096185	WITHOUT_CLASSIFICATION	3.294190381450314E-6	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9999981485148964	WITHOUT_CLASSIFICATION	1.8514851035619566E-6	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999997045399759	WITHOUT_CLASSIFICATION	2.9546002412712695E-7	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999994663148216	WITHOUT_CLASSIFICATION	5.336851782726389E-7	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999991697780853	WITHOUT_CLASSIFICATION	8.302219146278547E-7	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999999890782365	WITHOUT_CLASSIFICATION	1.0921763428930653E-8	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9997739037360986	WITHOUT_CLASSIFICATION	2.2609626390137608E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999996728786397	WITHOUT_CLASSIFICATION	3.2712136030462835E-7	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999996031227377	WITHOUT_CLASSIFICATION	3.968772623919341E-7	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999949822972768	WITHOUT_CLASSIFICATION	5.017702723199607E-6	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999986000395896	WITHOUT_CLASSIFICATION	1.3999604103982788E-6	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999974163513768	WITHOUT_CLASSIFICATION	2.5836486231352826E-6	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999999371379895	WITHOUT_CLASSIFICATION	6.286201052298549E-8	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9998753061391098	WITHOUT_CLASSIFICATION	1.2469386089021246E-4	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999960887507565	WITHOUT_CLASSIFICATION	3.911249243405686E-6	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.999999335665644	WITHOUT_CLASSIFICATION	6.643343559505965E-7	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999988317579948	WITHOUT_CLASSIFICATION	1.1682420052778324E-6	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999983133716549	WITHOUT_CLASSIFICATION	1.6866283451232987E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9467807498708781	WITHOUT_CLASSIFICATION	0.05321925012912194	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999968195241585	WITHOUT_CLASSIFICATION	3.1804758413957395E-6	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.999996653551055	WITHOUT_CLASSIFICATION	3.34644894493282E-6	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999997982266161	WITHOUT_CLASSIFICATION	2.0177338384245577E-7	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999988974231172	WITHOUT_CLASSIFICATION	1.102576882810313E-6	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9995675088504007	WITHOUT_CLASSIFICATION	4.324911495992864E-4	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999970147889511	WITHOUT_CLASSIFICATION	2.985211048969014E-6	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999990505025984	WITHOUT_CLASSIFICATION	9.494974016392931E-7	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999948249767727	WITHOUT_CLASSIFICATION	5.17502322720941E-6	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999999018048509	WITHOUT_CLASSIFICATION	9.819514917039979E-8	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999949147988517	WITHOUT_CLASSIFICATION	5.085201148372458E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999992115687991	WITHOUT_CLASSIFICATION	7.88431201027059E-7	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999934218195057	WITHOUT_CLASSIFICATION	6.578180494321417E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999990072011831	WITHOUT_CLASSIFICATION	9.927988169649403E-7	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999990072011831	WITHOUT_CLASSIFICATION	9.927988169649403E-7	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999904157221028	WITHOUT_CLASSIFICATION	9.584277897213813E-6	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999990006213524	WITHOUT_CLASSIFICATION	9.99378647633349E-7	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999995855024014	WITHOUT_CLASSIFICATION	4.1449759861785387E-7	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999728847755951	WITHOUT_CLASSIFICATION	2.7115224404858557E-5	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9999562321800728	WITHOUT_CLASSIFICATION	4.3767819927109636E-5	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999999458948974	WITHOUT_CLASSIFICATION	5.410510265490119E-8	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9999155600986047	WITHOUT_CLASSIFICATION	8.443990139533146E-5	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9993616746142374	WITHOUT_CLASSIFICATION	6.383253857626345E-4	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9999233256598603	WITHOUT_CLASSIFICATION	7.667434013962831E-5	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999199523947015	WITHOUT_CLASSIFICATION	8.004760529846475E-5	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999993265043582	WITHOUT_CLASSIFICATION	6.734956418237628E-7	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.999469003829153	WITHOUT_CLASSIFICATION	5.309961708469512E-4	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999998580368719	WITHOUT_CLASSIFICATION	1.4196312813109603E-7	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.999580779018971	WITHOUT_CLASSIFICATION	4.192209810290947E-4	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999999940784263	WITHOUT_CLASSIFICATION	5.921573690828559E-9	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999992386020121	WITHOUT_CLASSIFICATION	7.613979879519383E-7	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.99999356330626	WITHOUT_CLASSIFICATION	6.436693739924634E-6	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999993904386697	WITHOUT_CLASSIFICATION	6.095613303552137E-7	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999998407892058	WITHOUT_CLASSIFICATION	1.5921079419566393E-7	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999943871705492	WITHOUT_CLASSIFICATION	5.6128294507895226E-6	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999993867428769	WITHOUT_CLASSIFICATION	6.132571231545823E-7	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999992032771174	WITHOUT_CLASSIFICATION	7.967228826211654E-7	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999059023940293	WITHOUT_CLASSIFICATION	9.409760597065128E-5	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999962910117287	WITHOUT_CLASSIFICATION	3.7089882713929325E-6	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999857747389789	WITHOUT_CLASSIFICATION	1.4225261021122965E-5	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999998655150204	WITHOUT_CLASSIFICATION	1.3448497965131855E-7	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999999726291837	WITHOUT_CLASSIFICATION	2.737081629600053E-8	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999982542023359	WITHOUT_CLASSIFICATION	1.7457976641260689E-6	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9986376427297475	WITHOUT_CLASSIFICATION	0.0013623572702523691	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.988571055471766	WITHOUT_CLASSIFICATION	0.011428944528233915	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.999978417632194	WITHOUT_CLASSIFICATION	2.1582367805996073E-5	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999999640587989	WITHOUT_CLASSIFICATION	3.594120109978479E-8	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999938265189939	WITHOUT_CLASSIFICATION	6.173481006098811E-6	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999988950532642	WITHOUT_CLASSIFICATION	1.104946735731332E-6	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999918084913454	WITHOUT_CLASSIFICATION	8.191508654570598E-6	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999993734386098	WITHOUT_CLASSIFICATION	6.265613901134278E-7	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999930994714311	WITHOUT_CLASSIFICATION	6.900528568944273E-6	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999982446112217	WITHOUT_CLASSIFICATION	1.7553887783821545E-6	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999989022117655	WITHOUT_CLASSIFICATION	1.0977882344953823E-6	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999998090837628	WITHOUT_CLASSIFICATION	1.9091623725232712E-7	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999985840015815	WITHOUT_CLASSIFICATION	1.4159984184594466E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999956879306856	WITHOUT_CLASSIFICATION	4.312069314339814E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999956879306856	WITHOUT_CLASSIFICATION	4.312069314339814E-6	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999968422926943	WITHOUT_CLASSIFICATION	3.1577073056339597E-6	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999997701479479	WITHOUT_CLASSIFICATION	2.2985205204181165E-7	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999976877258424	WITHOUT_CLASSIFICATION	2.3122741575152434E-6	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999951844499193	WITHOUT_CLASSIFICATION	4.815550080677792E-6	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999993628947437	WITHOUT_CLASSIFICATION	6.371052562997802E-7	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999999809707654	WITHOUT_CLASSIFICATION	1.902923468065697E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999931326607396	WITHOUT_CLASSIFICATION	6.867339260274845E-6	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9086907840253211	WITHOUT_CLASSIFICATION	0.09130921597467889	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999980156752681	WITHOUT_CLASSIFICATION	1.984324731754062E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999461069748	WITHOUT_CLASSIFICATION	5.3893025152550954E-8	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999967751967672	WITHOUT_CLASSIFICATION	3.2248032328782015E-6	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999973626930663	WITHOUT_CLASSIFICATION	2.6373069336491917E-6	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999623371343311	WITHOUT_CLASSIFICATION	3.766286566882435E-5	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999991985888722	WITHOUT_CLASSIFICATION	8.014111279083392E-7	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999889433396966	WITHOUT_CLASSIFICATION	1.1056660303466366E-5	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9995020186143313	WITHOUT_CLASSIFICATION	4.979813856686505E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999522035269253	WITHOUT_CLASSIFICATION	4.779647307479178E-5	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999956443779279	WITHOUT_CLASSIFICATION	4.355622072130356E-6	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.999999995113997	WITHOUT_CLASSIFICATION	4.886003103977756E-9	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.9709158884356117	WITHOUT_CLASSIFICATION	0.029084111564388337	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999996531517342	WITHOUT_CLASSIFICATION	3.468482657429476E-7	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999473341252615	WITHOUT_CLASSIFICATION	5.2665874738452657E-5	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999999996450072	WITHOUT_CLASSIFICATION	3.549928251718459E-10	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.99999760655075	WITHOUT_CLASSIFICATION	2.393449250042599E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.999998961570086	WITHOUT_CLASSIFICATION	1.038429913923914E-6	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999974723230608	WITHOUT_CLASSIFICATION	2.5276769392551063E-6	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999998028113843	WITHOUT_CLASSIFICATION	1.971886157846484E-7	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999998476006386	WITHOUT_CLASSIFICATION	1.5239936144781197E-7	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9996682336949865	WITHOUT_CLASSIFICATION	3.317663050135333E-4	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999978943614825	WITHOUT_CLASSIFICATION	2.1056385174790633E-6	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9995270664317238	WITHOUT_CLASSIFICATION	4.729335682762356E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999660667321165	WITHOUT_CLASSIFICATION	3.3933267883438775E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999978943614825	WITHOUT_CLASSIFICATION	2.1056385174790633E-6	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999948026805683	WITHOUT_CLASSIFICATION	5.197319431703315E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9813945431473262	WITHOUT_CLASSIFICATION	0.01860545685267388	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9945111219484362	WITHOUT_CLASSIFICATION	0.005488878051563787	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.500880575002703	DEFECT	0.499119424997297	WITHOUT_CLASSIFICATION
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999999766561276	WITHOUT_CLASSIFICATION	2.334387241184473E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999799964474	WITHOUT_CLASSIFICATION	2.0003552513427513E-8	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999999218462757	WITHOUT_CLASSIFICATION	7.815372420554212E-8	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999854966807452	WITHOUT_CLASSIFICATION	1.4503319254800976E-5	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9980776031259257	WITHOUT_CLASSIFICATION	0.0019223968740742295	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999983133716549	WITHOUT_CLASSIFICATION	1.6866283451232987E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999995373842744	WITHOUT_CLASSIFICATION	4.626157256309324E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999730563184617	WITHOUT_CLASSIFICATION	2.6943681538375966E-5	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999992608245375	WITHOUT_CLASSIFICATION	7.391754625204731E-7	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999994292341945	WITHOUT_CLASSIFICATION	5.707658055179942E-7	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9996838891662231	WITHOUT_CLASSIFICATION	3.161108337769988E-4	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999991367246617	WITHOUT_CLASSIFICATION	8.63275338291597E-7	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9999951450199809	WITHOUT_CLASSIFICATION	4.854980019045631E-6	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999990344850983	WITHOUT_CLASSIFICATION	9.655149016876326E-7	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9997741142265498	WITHOUT_CLASSIFICATION	2.2588577345004394E-4	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999897031815596	WITHOUT_CLASSIFICATION	1.029681844049563E-5	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.99999559970272	WITHOUT_CLASSIFICATION	4.400297279984776E-6	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.999996916638282	WITHOUT_CLASSIFICATION	3.0833617179832193E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999998632708508	WITHOUT_CLASSIFICATION	1.367291493313112E-7	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999963847963242	WITHOUT_CLASSIFICATION	3.6152036757426967E-6	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999977758271781	WITHOUT_CLASSIFICATION	2.224172821869961E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999813128186583	WITHOUT_CLASSIFICATION	1.8687181341635E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.999984039229128	WITHOUT_CLASSIFICATION	1.5960770871886838E-5	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999516386142784	WITHOUT_CLASSIFICATION	4.836138572165272E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.999999995955751	WITHOUT_CLASSIFICATION	4.044248970076642E-9	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999934119743842	WITHOUT_CLASSIFICATION	6.5880256157929115E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999934119743842	WITHOUT_CLASSIFICATION	6.5880256157929115E-6	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999998048548652	WITHOUT_CLASSIFICATION	1.9514513475639484E-7	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999984925240222	WITHOUT_CLASSIFICATION	1.507475977827639E-6	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999981813529644	WITHOUT_CLASSIFICATION	1.8186470356064143E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9968947630407177	WITHOUT_CLASSIFICATION	0.0031052369592824416	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9968947630407177	WITHOUT_CLASSIFICATION	0.0031052369592824416	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9968947630407177	WITHOUT_CLASSIFICATION	0.0031052369592824416	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9968947630407177	WITHOUT_CLASSIFICATION	0.0031052369592824416	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.99999707263647	WITHOUT_CLASSIFICATION	2.9273635300400085E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.999999962522435	WITHOUT_CLASSIFICATION	3.747756511297809E-8	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999978422455529	WITHOUT_CLASSIFICATION	2.1577544471055436E-6	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9997564504360312	WITHOUT_CLASSIFICATION	2.435495639688847E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998695159699	WITHOUT_CLASSIFICATION	1.3048403016683775E-7	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9996618612474144	WITHOUT_CLASSIFICATION	3.381387525856733E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999954991879197	WITHOUT_CLASSIFICATION	4.500812080233396E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999954991879197	WITHOUT_CLASSIFICATION	4.500812080233396E-6	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9987294317106957	WITHOUT_CLASSIFICATION	0.0012705682893043553	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9995423711057573	WITHOUT_CLASSIFICATION	4.57628894242705E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999975182357773	WITHOUT_CLASSIFICATION	2.4817642227650102E-6	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9815710380602662	WITHOUT_CLASSIFICATION	0.018428961939733757	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999990434111773	WITHOUT_CLASSIFICATION	9.565888226793632E-7	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999997064440787	WITHOUT_CLASSIFICATION	2.935559212822187E-7	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.99999697315416	WITHOUT_CLASSIFICATION	3.0268458399565707E-6	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999943852337155	WITHOUT_CLASSIFICATION	5.614766284404891E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999498213223397	WITHOUT_CLASSIFICATION	5.017867766040626E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999498213223397	WITHOUT_CLASSIFICATION	5.017867766040626E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999660667321165	WITHOUT_CLASSIFICATION	3.3933267883438775E-5	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999845589112187	WITHOUT_CLASSIFICATION	1.544108878121431E-5	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999772427299483	WITHOUT_CLASSIFICATION	2.2757270051779254E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.999996354601394	WITHOUT_CLASSIFICATION	3.6453986059623084E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999999834139673	WITHOUT_CLASSIFICATION	1.6586032646288432E-8	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9994694905710426	WITHOUT_CLASSIFICATION	5.305094289573971E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999966974824759	WITHOUT_CLASSIFICATION	3.3025175241530866E-6	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999990502721677	WITHOUT_CLASSIFICATION	9.497278323743233E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999981256469294	WITHOUT_CLASSIFICATION	1.8743530706899088E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999981256469294	WITHOUT_CLASSIFICATION	1.8743530706899088E-6	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999980686440977	WITHOUT_CLASSIFICATION	1.9313559022386835E-6	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999997557710719	WITHOUT_CLASSIFICATION	2.442289281146783E-7	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999779245639064	WITHOUT_CLASSIFICATION	2.207543609353466E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999963679981375	WITHOUT_CLASSIFICATION	3.632001862428249E-6	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999994590535386	WITHOUT_CLASSIFICATION	5.409464613935446E-7	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9993866063693696	WITHOUT_CLASSIFICATION	6.133936306304726E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999939262251939	WITHOUT_CLASSIFICATION	6.073774806066358E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999320948177	WITHOUT_CLASSIFICATION	6.79051823186274E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999320948177	WITHOUT_CLASSIFICATION	6.79051823186274E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999320948177	WITHOUT_CLASSIFICATION	6.79051823186274E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999320948177	WITHOUT_CLASSIFICATION	6.79051823186274E-8	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999830633770097	WITHOUT_CLASSIFICATION	1.6936622990359487E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9975821961615458	WITHOUT_CLASSIFICATION	0.002417803838454178	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9997803614555649	WITHOUT_CLASSIFICATION	2.1963854443514852E-4	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999992898435447	WITHOUT_CLASSIFICATION	7.101564553691063E-7	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999830206928653	WITHOUT_CLASSIFICATION	1.6979307134699415E-5	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9991319380283413	WITHOUT_CLASSIFICATION	8.680619716587704E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999998693328139	WITHOUT_CLASSIFICATION	1.3066718593710447E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999994844883507	WITHOUT_CLASSIFICATION	5.155116492778844E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999994844883507	WITHOUT_CLASSIFICATION	5.155116492778844E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999994844883507	WITHOUT_CLASSIFICATION	5.155116492778844E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999840474991419	WITHOUT_CLASSIFICATION	1.595250085803395E-5	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9995210131162501	WITHOUT_CLASSIFICATION	4.7898688375001244E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998422189902	WITHOUT_CLASSIFICATION	1.5778100984699722E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998422189902	WITHOUT_CLASSIFICATION	1.5778100984699722E-7	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999737313231906	WITHOUT_CLASSIFICATION	2.6268676809406716E-5	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999999386017514	WITHOUT_CLASSIFICATION	6.139824865303497E-8	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999997945181157	WITHOUT_CLASSIFICATION	2.0548188426922872E-7	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9998213201485876	WITHOUT_CLASSIFICATION	1.7867985141244974E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999999054904659	WITHOUT_CLASSIFICATION	9.450953417427242E-8	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.999999258730175	WITHOUT_CLASSIFICATION	7.412698249129665E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999998614753813	WITHOUT_CLASSIFICATION	1.3852461870125005E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999998614753813	WITHOUT_CLASSIFICATION	1.3852461870125005E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999982171027056	WITHOUT_CLASSIFICATION	1.7828972943007916E-6	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9966884784863628	WITHOUT_CLASSIFICATION	0.003311521513637293	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999999709366507	WITHOUT_CLASSIFICATION	2.9063349318299668E-8	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9999952102829763	WITHOUT_CLASSIFICATION	4.789717023679632E-6	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999976911491273	WITHOUT_CLASSIFICATION	2.3088508728226745E-6	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999985404494149	WITHOUT_CLASSIFICATION	1.4595505851711442E-6	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999996966434599	WITHOUT_CLASSIFICATION	3.0335654001255237E-7	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999206355341684	WITHOUT_CLASSIFICATION	7.936446583167602E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9988775186597347	WITHOUT_CLASSIFICATION	0.0011224813402653587	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999998798079542	WITHOUT_CLASSIFICATION	1.2019204574481894E-7	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999999148589493	WITHOUT_CLASSIFICATION	8.514105064912536E-8	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999960603686141	WITHOUT_CLASSIFICATION	3.939631385907637E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998264555933047	WITHOUT_CLASSIFICATION	1.735444066953543E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999976561052855	WITHOUT_CLASSIFICATION	2.3438947145853233E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999877640698	WITHOUT_CLASSIFICATION	1.2235930178311528E-8	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999999964702775	WITHOUT_CLASSIFICATION	3.529722572347403E-9	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9998784841864468	WITHOUT_CLASSIFICATION	1.2151581355335541E-4	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999997837947228	WITHOUT_CLASSIFICATION	2.1620527729964783E-7	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999998935311254	WITHOUT_CLASSIFICATION	1.0646887459372114E-7	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999886386797342	WITHOUT_CLASSIFICATION	1.136132026579867E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999999679669278	WITHOUT_CLASSIFICATION	3.2033072240603596E-8	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.999870300835971	WITHOUT_CLASSIFICATION	1.2969916402902202E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997591470712	WITHOUT_CLASSIFICATION	2.4085292873060633E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997591470712	WITHOUT_CLASSIFICATION	2.4085292873060633E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997591470712	WITHOUT_CLASSIFICATION	2.4085292873060633E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997591470712	WITHOUT_CLASSIFICATION	2.4085292873060633E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997591470712	WITHOUT_CLASSIFICATION	2.4085292873060633E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997591470712	WITHOUT_CLASSIFICATION	2.4085292873060633E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997591470712	WITHOUT_CLASSIFICATION	2.4085292873060633E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997591470712	WITHOUT_CLASSIFICATION	2.4085292873060633E-7	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9990299464467756	WITHOUT_CLASSIFICATION	9.700535532244337E-4	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999584040710936	WITHOUT_CLASSIFICATION	4.1595928906439084E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999510041485689	WITHOUT_CLASSIFICATION	4.8995851431190296E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9209192851252305	WITHOUT_CLASSIFICATION	0.07908071487476949	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999931326607396	WITHOUT_CLASSIFICATION	6.867339260274845E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999931326607396	WITHOUT_CLASSIFICATION	6.867339260274845E-6	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.999999807764007	WITHOUT_CLASSIFICATION	1.9223599304131716E-7	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999995192274326	WITHOUT_CLASSIFICATION	4.807725674539631E-7	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999999325052872	WITHOUT_CLASSIFICATION	6.749471278234762E-8	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.999991542443835	WITHOUT_CLASSIFICATION	8.457556165001235E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999967223892222	WITHOUT_CLASSIFICATION	3.2776107779138725E-6	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.999998236568374	WITHOUT_CLASSIFICATION	1.7634316259450192E-6	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999979710723896	WITHOUT_CLASSIFICATION	2.0289276103145763E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9928990767476196	WITHOUT_CLASSIFICATION	0.007100923252380365	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999988579193494	WITHOUT_CLASSIFICATION	1.1420806506079153E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999717320396057	WITHOUT_CLASSIFICATION	2.8267960394419803E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999717320396057	WITHOUT_CLASSIFICATION	2.8267960394419803E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999717320396057	WITHOUT_CLASSIFICATION	2.8267960394419803E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999988858145089	WITHOUT_CLASSIFICATION	1.114185491126851E-6	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999921723271051	WITHOUT_CLASSIFICATION	7.827672894810282E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999971997535025	WITHOUT_CLASSIFICATION	2.800246497340925E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999566139336	WITHOUT_CLASSIFICATION	4.3386066506415664E-8	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999415454482478	WITHOUT_CLASSIFICATION	5.845455175218374E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999063349437	WITHOUT_CLASSIFICATION	9.366505622070268E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999416566968	WITHOUT_CLASSIFICATION	5.834330311743379E-8	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999896178527279	WITHOUT_CLASSIFICATION	1.0382147272118845E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999990721188912	WITHOUT_CLASSIFICATION	9.278811089677479E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999990721188912	WITHOUT_CLASSIFICATION	9.278811089677479E-7	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999978659177672	WITHOUT_CLASSIFICATION	2.1340822328249406E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999971613903756	WITHOUT_CLASSIFICATION	2.8386096244358416E-6	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9998742983317886	WITHOUT_CLASSIFICATION	1.2570166821131328E-4	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9992626541554502	WITHOUT_CLASSIFICATION	7.373458445497721E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999989953069429	WITHOUT_CLASSIFICATION	1.0046930570796344E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999989953069429	WITHOUT_CLASSIFICATION	1.0046930570796344E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999994106217517	WITHOUT_CLASSIFICATION	5.893782482514792E-7	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9999979879555225	WITHOUT_CLASSIFICATION	2.01204447746631E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999714637365893	WITHOUT_CLASSIFICATION	2.853626341071125E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999354406245086	WITHOUT_CLASSIFICATION	6.45593754915331E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999354406245086	WITHOUT_CLASSIFICATION	6.45593754915331E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999354406245086	WITHOUT_CLASSIFICATION	6.45593754915331E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999995906436354	WITHOUT_CLASSIFICATION	4.0935636458887504E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999993107877824	WITHOUT_CLASSIFICATION	6.892122177490824E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999993107877824	WITHOUT_CLASSIFICATION	6.892122177490824E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999996433289792	WITHOUT_CLASSIFICATION	3.566710208744515E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999996433289792	WITHOUT_CLASSIFICATION	3.566710208744515E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999975681104184	WITHOUT_CLASSIFICATION	2.431889581571749E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999979646060362	WITHOUT_CLASSIFICATION	2.035393963746835E-6	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.999996772128161	WITHOUT_CLASSIFICATION	3.2278718390410172E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999730124157353	WITHOUT_CLASSIFICATION	2.698758426470227E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999885085269278	WITHOUT_CLASSIFICATION	1.1491473072243594E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999975809879158	WITHOUT_CLASSIFICATION	2.419012084176978E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999989827627	WITHOUT_CLASSIFICATION	1.0172372757659257E-9	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999959824305499	WITHOUT_CLASSIFICATION	4.017569450167243E-6	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999999655230091	WITHOUT_CLASSIFICATION	3.447699095895702E-8	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999248661745616	WITHOUT_CLASSIFICATION	7.51338254383352E-5	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.6261328689305714	WITHOUT_CLASSIFICATION	0.3738671310694286	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999997741753762	WITHOUT_CLASSIFICATION	2.258246238295296E-7	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999990811309678	WITHOUT_CLASSIFICATION	9.188690320779612E-7	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999938046512019	WITHOUT_CLASSIFICATION	6.195348798159529E-6	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999948374424024	WITHOUT_CLASSIFICATION	5.1625575975646675E-6	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999996643472653	WITHOUT_CLASSIFICATION	3.3565273467054223E-7	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999995089382704	WITHOUT_CLASSIFICATION	4.910617295646797E-7	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999670694697725	WITHOUT_CLASSIFICATION	3.2930530227409964E-5	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.999716726137652	WITHOUT_CLASSIFICATION	2.832738623480969E-4	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999999107927229	WITHOUT_CLASSIFICATION	8.920727719686186E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999730563184617	WITHOUT_CLASSIFICATION	2.6943681538375966E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997889632795709	WITHOUT_CLASSIFICATION	2.1103672042908903E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999983383042834	WITHOUT_CLASSIFICATION	1.6616957166125393E-6	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999988637137149	WITHOUT_CLASSIFICATION	1.1362862850675512E-6	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999997945943566	WITHOUT_CLASSIFICATION	2.0540564340273043E-7	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999868862740044	WITHOUT_CLASSIFICATION	1.311372599547119E-5	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999699492769121	WITHOUT_CLASSIFICATION	3.0050723087872997E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999999795552451	WITHOUT_CLASSIFICATION	2.0444754881317307E-8	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999990689931952	WITHOUT_CLASSIFICATION	9.310068048600295E-7	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9995669917655052	WITHOUT_CLASSIFICATION	4.330082344947832E-4	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999986648922303	WITHOUT_CLASSIFICATION	1.335107769676329E-6	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999967621272237	WITHOUT_CLASSIFICATION	3.237872776327722E-6	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999999035401339	WITHOUT_CLASSIFICATION	9.645986613348541E-8	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999976311696342	WITHOUT_CLASSIFICATION	2.3688303657205277E-6	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999996241172526	WITHOUT_CLASSIFICATION	3.7588274746593193E-7	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9988302850708121	WITHOUT_CLASSIFICATION	0.0011697149291879578	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999999376607563	WITHOUT_CLASSIFICATION	6.233924360795464E-8	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999997166307494	WITHOUT_CLASSIFICATION	2.8336925061818165E-7	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999997084865193	WITHOUT_CLASSIFICATION	2.915134807769286E-7	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9984121166701545	WITHOUT_CLASSIFICATION	0.0015878833298454626	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9972130327060947	WITHOUT_CLASSIFICATION	0.0027869672939053497	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999885942325125	WITHOUT_CLASSIFICATION	1.1405767487533838E-5	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999999890399309	WITHOUT_CLASSIFICATION	1.0960069151835534E-8	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999976025339808	WITHOUT_CLASSIFICATION	2.3974660190937377E-6	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9986414757149676	WITHOUT_CLASSIFICATION	0.0013585242850322628	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999997741814651	WITHOUT_CLASSIFICATION	2.2581853491435086E-7	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999999694359887	WITHOUT_CLASSIFICATION	3.0564011349421944E-8	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.999998829420794	WITHOUT_CLASSIFICATION	1.1705792059476549E-6	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999759546037942	WITHOUT_CLASSIFICATION	2.404539620582518E-5	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998866633424719	WITHOUT_CLASSIFICATION	1.1333665752812356E-4	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999999588316866	WITHOUT_CLASSIFICATION	4.1168313400282974E-8	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999995850457379	WITHOUT_CLASSIFICATION	4.14954262105767E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999995850457379	WITHOUT_CLASSIFICATION	4.14954262105767E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999993235462986	WITHOUT_CLASSIFICATION	6.764537013665032E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999993235462986	WITHOUT_CLASSIFICATION	6.764537013665032E-7	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.999962467313642	WITHOUT_CLASSIFICATION	3.753268635799965E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.999962467313642	WITHOUT_CLASSIFICATION	3.753268635799965E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999989137848885	WITHOUT_CLASSIFICATION	1.086215111511542E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999989137848885	WITHOUT_CLASSIFICATION	1.086215111511542E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999996850216389	WITHOUT_CLASSIFICATION	3.149783610600703E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999996850216389	WITHOUT_CLASSIFICATION	3.149783610600703E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999996850216389	WITHOUT_CLASSIFICATION	3.149783610600703E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999996850216389	WITHOUT_CLASSIFICATION	3.149783610600703E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999996850216389	WITHOUT_CLASSIFICATION	3.149783610600703E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999996850216389	WITHOUT_CLASSIFICATION	3.149783610600703E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999996850216389	WITHOUT_CLASSIFICATION	3.149783610600703E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999996850216389	WITHOUT_CLASSIFICATION	3.149783610600703E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999996850216389	WITHOUT_CLASSIFICATION	3.149783610600703E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999944199547162	WITHOUT_CLASSIFICATION	5.580045283891165E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999944199547162	WITHOUT_CLASSIFICATION	5.580045283891165E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999944199547162	WITHOUT_CLASSIFICATION	5.580045283891165E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999996642947125	WITHOUT_CLASSIFICATION	3.357052874715627E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999988229178544	WITHOUT_CLASSIFICATION	1.1770821455702527E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999988229178544	WITHOUT_CLASSIFICATION	1.1770821455702527E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999988229178544	WITHOUT_CLASSIFICATION	1.1770821455702527E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999004840763	WITHOUT_CLASSIFICATION	9.951592368844173E-8	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999004840763	WITHOUT_CLASSIFICATION	9.951592368844173E-8	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999004840763	WITHOUT_CLASSIFICATION	9.951592368844173E-8	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997890719257354	WITHOUT_CLASSIFICATION	2.1092807426455063E-4	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999996958577585	WITHOUT_CLASSIFICATION	3.0414224154771977E-7	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998492399307184	WITHOUT_CLASSIFICATION	1.5076006928168222E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998720932780087	WITHOUT_CLASSIFICATION	1.279067219911707E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998720932780087	WITHOUT_CLASSIFICATION	1.279067219911707E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998720932780087	WITHOUT_CLASSIFICATION	1.279067219911707E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999984978772196	WITHOUT_CLASSIFICATION	1.5021227803306944E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999860641579563	WITHOUT_CLASSIFICATION	1.3935842043819453E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999860641579563	WITHOUT_CLASSIFICATION	1.3935842043819453E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9932311085902172	WITHOUT_CLASSIFICATION	0.006768891409782805	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999999724724093	WITHOUT_CLASSIFICATION	2.752759067937478E-8	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999999724724093	WITHOUT_CLASSIFICATION	2.752759067937478E-8	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.9467311734422099	WITHOUT_CLASSIFICATION	0.05326882655779014	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999835904127089	WITHOUT_CLASSIFICATION	1.640958729114299E-5	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999958799405919	WITHOUT_CLASSIFICATION	4.120059408106835E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994609845614	WITHOUT_CLASSIFICATION	5.390154386563229E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994609845614	WITHOUT_CLASSIFICATION	5.390154386563229E-7	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9998965165348433	WITHOUT_CLASSIFICATION	1.0348346515668811E-4	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999961888672443	WITHOUT_CLASSIFICATION	3.811132755574248E-6	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999963030842455	WITHOUT_CLASSIFICATION	3.696915754444425E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9999998717025985	WITHOUT_CLASSIFICATION	1.2829740143690568E-7	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9981149463110267	WITHOUT_CLASSIFICATION	0.0018850536889732932	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994609845614	WITHOUT_CLASSIFICATION	5.390154386563229E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994609845614	WITHOUT_CLASSIFICATION	5.390154386563229E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994609845614	WITHOUT_CLASSIFICATION	5.390154386563229E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994609845614	WITHOUT_CLASSIFICATION	5.390154386563229E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994609845614	WITHOUT_CLASSIFICATION	5.390154386563229E-7	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999997693366279	WITHOUT_CLASSIFICATION	2.3066337209912422E-7	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999981985328535	WITHOUT_CLASSIFICATION	1.8014671464928822E-6	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999997488771614	WITHOUT_CLASSIFICATION	2.511228386500399E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999929005680169	WITHOUT_CLASSIFICATION	7.099431983063142E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9996297435789456	WITHOUT_CLASSIFICATION	3.702564210543523E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999973510131803	WITHOUT_CLASSIFICATION	2.6489868196349885E-6	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9510994680850495	WITHOUT_CLASSIFICATION	0.04890053191495043	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9998315973769937	WITHOUT_CLASSIFICATION	1.6840262300642364E-4	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999990189269492	WITHOUT_CLASSIFICATION	9.810730508235893E-7	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999992821669542	WITHOUT_CLASSIFICATION	7.178330457977367E-7	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999862357244281	WITHOUT_CLASSIFICATION	1.3764275571925124E-5	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999473341252615	WITHOUT_CLASSIFICATION	5.2665874738452657E-5	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999999228289751	WITHOUT_CLASSIFICATION	7.717102491887151E-8	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999868840869	WITHOUT_CLASSIFICATION	1.3115913260989415E-8	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999311275294328	WITHOUT_CLASSIFICATION	6.887247056725186E-5	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.999658538861654	WITHOUT_CLASSIFICATION	3.4146113834603996E-4	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999999609564947	WITHOUT_CLASSIFICATION	3.9043505417702234E-8	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.999999999958399	WITHOUT_CLASSIFICATION	4.160106538855725E-11	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999939400672668	WITHOUT_CLASSIFICATION	6.0599327331813695E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999996846013861	WITHOUT_CLASSIFICATION	3.153986138802776E-7	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.999990088723724	WITHOUT_CLASSIFICATION	9.911276276083532E-6	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999909348080931	WITHOUT_CLASSIFICATION	9.065191906910516E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999461069748	WITHOUT_CLASSIFICATION	5.3893025152550954E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999641813236	WITHOUT_CLASSIFICATION	3.5818676405559925E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999641813236	WITHOUT_CLASSIFICATION	3.5818676405559925E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999641813236	WITHOUT_CLASSIFICATION	3.5818676405559925E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999641813236	WITHOUT_CLASSIFICATION	3.5818676405559925E-8	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999823370604068	WITHOUT_CLASSIFICATION	1.766293959321932E-5	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9998925292728811	WITHOUT_CLASSIFICATION	1.0747072711892375E-4	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999981462524065	WITHOUT_CLASSIFICATION	1.8537475935993873E-6	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999981462524065	WITHOUT_CLASSIFICATION	1.8537475935993873E-6	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999929745671221	WITHOUT_CLASSIFICATION	7.025432877980346E-6	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999980750790998	WITHOUT_CLASSIFICATION	1.9249209001449375E-6	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.999996517059066	WITHOUT_CLASSIFICATION	3.4829409338899808E-6	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999869841166	WITHOUT_CLASSIFICATION	1.301588332790861E-8	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999818204424844	WITHOUT_CLASSIFICATION	1.817955751563012E-5	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999944723266077	WITHOUT_CLASSIFICATION	5.5276733923654435E-6	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999851276330058	WITHOUT_CLASSIFICATION	1.487236699419053E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999945101126886	WITHOUT_CLASSIFICATION	5.489887311418285E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999945101126886	WITHOUT_CLASSIFICATION	5.489887311418285E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999945101126886	WITHOUT_CLASSIFICATION	5.489887311418285E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999945101126886	WITHOUT_CLASSIFICATION	5.489887311418285E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9998746247918574	WITHOUT_CLASSIFICATION	1.2537520814261198E-4	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999991657629478	WITHOUT_CLASSIFICATION	8.342370521840353E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999991657629478	WITHOUT_CLASSIFICATION	8.342370521840353E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999991657629478	WITHOUT_CLASSIFICATION	8.342370521840353E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999997261662137	WITHOUT_CLASSIFICATION	2.738337863532393E-7	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999988605270451	WITHOUT_CLASSIFICATION	1.1394729548333366E-6	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999993393442157	WITHOUT_CLASSIFICATION	6.606557842483362E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9968947630407177	WITHOUT_CLASSIFICATION	0.0031052369592824416	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9968947630407177	WITHOUT_CLASSIFICATION	0.0031052369592824416	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999660687974524	WITHOUT_CLASSIFICATION	3.393120254747652E-5	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9999743449022744	WITHOUT_CLASSIFICATION	2.565509772558244E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9998107741085401	WITHOUT_CLASSIFICATION	1.8922589145993086E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9998107741085401	WITHOUT_CLASSIFICATION	1.8922589145993086E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.99653013849232	WITHOUT_CLASSIFICATION	0.003469861507679993	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.99653013849232	WITHOUT_CLASSIFICATION	0.003469861507679993	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999998983263589	WITHOUT_CLASSIFICATION	1.0167364103918306E-7	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.999999959632179	WITHOUT_CLASSIFICATION	4.0367820953297264E-8	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999999406741016	WITHOUT_CLASSIFICATION	5.932589844015829E-8	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.965067569598133	WITHOUT_CLASSIFICATION	0.034932430401866985	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999522131075318	WITHOUT_CLASSIFICATION	4.778689246814433E-5	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999999489533266	WITHOUT_CLASSIFICATION	5.1046673528696365E-8	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999997996678796	WITHOUT_CLASSIFICATION	2.0033212035616826E-7	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999410073754328	WITHOUT_CLASSIFICATION	5.89926245670764E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999997709166922	WITHOUT_CLASSIFICATION	2.2908330775088358E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.999999992241061	WITHOUT_CLASSIFICATION	7.758939106575777E-9	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.999999992241061	WITHOUT_CLASSIFICATION	7.758939106575777E-9	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999988898347507	WITHOUT_CLASSIFICATION	1.110165249359376E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999988898347507	WITHOUT_CLASSIFICATION	1.110165249359376E-6	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9999773017671745	WITHOUT_CLASSIFICATION	2.2698232825430266E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999985730750939	WITHOUT_CLASSIFICATION	1.4269249061757866E-6	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9998836239508943	WITHOUT_CLASSIFICATION	1.1637604910570106E-4	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999945362338929	WITHOUT_CLASSIFICATION	5.463766107031933E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999945362338929	WITHOUT_CLASSIFICATION	5.463766107031933E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999945362338929	WITHOUT_CLASSIFICATION	5.463766107031933E-6	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.99998224796281	WITHOUT_CLASSIFICATION	1.7752037189973613E-5	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999873033273635	WITHOUT_CLASSIFICATION	1.2696672636454548E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.999983351470265	WITHOUT_CLASSIFICATION	1.664852973507533E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999820508716808	WITHOUT_CLASSIFICATION	1.79491283191297E-5	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999798829983123	WITHOUT_CLASSIFICATION	2.011700168764369E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999787951416059	WITHOUT_CLASSIFICATION	2.1204858394000936E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999839807110696	WITHOUT_CLASSIFICATION	1.601928893033792E-5	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999941035110314	WITHOUT_CLASSIFICATION	5.896488968615374E-6	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9999179533001429	WITHOUT_CLASSIFICATION	8.204669985711372E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999994407372039	WITHOUT_CLASSIFICATION	5.592627959819338E-7	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9999999153818303	WITHOUT_CLASSIFICATION	8.461816968651193E-8	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999889253983519	WITHOUT_CLASSIFICATION	1.1074601648011494E-5	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999955875786959	WITHOUT_CLASSIFICATION	4.4124213041600796E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9968947630407177	WITHOUT_CLASSIFICATION	0.0031052369592824416	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999452885090281	WITHOUT_CLASSIFICATION	5.471149097199906E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9997065211710937	WITHOUT_CLASSIFICATION	2.9347882890632754E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999934119743842	WITHOUT_CLASSIFICATION	6.5880256157929115E-6	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999900949318347	WITHOUT_CLASSIFICATION	9.90506816529971E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999900949318347	WITHOUT_CLASSIFICATION	9.90506816529971E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999900949318347	WITHOUT_CLASSIFICATION	9.90506816529971E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999900949318347	WITHOUT_CLASSIFICATION	9.90506816529971E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999900949318347	WITHOUT_CLASSIFICATION	9.90506816529971E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.999877387626456	WITHOUT_CLASSIFICATION	1.2261237354398817E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999900949318347	WITHOUT_CLASSIFICATION	9.90506816529971E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999900949318347	WITHOUT_CLASSIFICATION	9.90506816529971E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999900949318347	WITHOUT_CLASSIFICATION	9.90506816529971E-5	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999893692854911	WITHOUT_CLASSIFICATION	1.0630714509003077E-5	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9990748613749109	WITHOUT_CLASSIFICATION	9.251386250891642E-4	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9891314806302913	DEFECT	0.01086851936970871	WITHOUT_CLASSIFICATION
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9998878525154627	WITHOUT_CLASSIFICATION	1.1214748453726266E-4	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999925457096797	WITHOUT_CLASSIFICATION	7.454290320323848E-6	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999771502095937	WITHOUT_CLASSIFICATION	2.284979040624855E-5	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999999692151494	WITHOUT_CLASSIFICATION	3.078485050911199E-8	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999599203920692	WITHOUT_CLASSIFICATION	4.007960793072721E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.999987440238819	WITHOUT_CLASSIFICATION	1.255976118097358E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.999987440238819	WITHOUT_CLASSIFICATION	1.255976118097358E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999544862365113	WITHOUT_CLASSIFICATION	4.5513763488831845E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999825347789186	WITHOUT_CLASSIFICATION	1.7465221081336966E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.999986992415827	WITHOUT_CLASSIFICATION	1.3007584172877739E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999830090003211	WITHOUT_CLASSIFICATION	1.6990999678795803E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999816978772706	WITHOUT_CLASSIFICATION	1.830212272942013E-5	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999827229253069	WITHOUT_CLASSIFICATION	1.7277074693134775E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999890737416022	WITHOUT_CLASSIFICATION	1.0926258397880441E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999818160481566	WITHOUT_CLASSIFICATION	1.8183951843355852E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999872060573025	WITHOUT_CLASSIFICATION	1.2793942697549013E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999836909964429	WITHOUT_CLASSIFICATION	1.6309003557128207E-5	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999835253774978	WITHOUT_CLASSIFICATION	1.6474622502257964E-5	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999849666575307	WITHOUT_CLASSIFICATION	1.5033342469456295E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999851860322951	WITHOUT_CLASSIFICATION	1.4813967704738992E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999792925376009	WITHOUT_CLASSIFICATION	2.0707462399184555E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999867796811607	WITHOUT_CLASSIFICATION	1.3220318839469001E-5	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999872132537415	WITHOUT_CLASSIFICATION	1.2786746258458963E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999855030054372	WITHOUT_CLASSIFICATION	1.4496994562889047E-5	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999906710719876	WITHOUT_CLASSIFICATION	9.328928012473144E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999821061357721	WITHOUT_CLASSIFICATION	1.7893864227843704E-5	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999653146211761	WITHOUT_CLASSIFICATION	3.4685378823957376E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999871133096675	WITHOUT_CLASSIFICATION	1.2886690332585138E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999728460558974	WITHOUT_CLASSIFICATION	2.7153944102490852E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.999989165663341	WITHOUT_CLASSIFICATION	1.083433665900472E-5	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999941970337887	WITHOUT_CLASSIFICATION	5.802966211281711E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999866682491284	WITHOUT_CLASSIFICATION	1.3331750871639534E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999875987930243	WITHOUT_CLASSIFICATION	1.240120697559155E-5	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999908259358297	WITHOUT_CLASSIFICATION	9.174064170345614E-6	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999832203658268	WITHOUT_CLASSIFICATION	1.6779634173262735E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999904521169312	WITHOUT_CLASSIFICATION	9.54788306882805E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999895162816784	WITHOUT_CLASSIFICATION	1.0483718321651002E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999889256649269	WITHOUT_CLASSIFICATION	1.1074335073170928E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999927164689723	WITHOUT_CLASSIFICATION	7.283531027794578E-6	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999864809028423	WITHOUT_CLASSIFICATION	1.3519097157788573E-5	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999908389510513	WITHOUT_CLASSIFICATION	9.161048948689045E-6	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999841545633192	WITHOUT_CLASSIFICATION	1.5845436680867754E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999900759873224	WITHOUT_CLASSIFICATION	9.924012677721E-6	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999859555103552	WITHOUT_CLASSIFICATION	1.404448964485317E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999840846073638	WITHOUT_CLASSIFICATION	1.591539263616805E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999855802302171	WITHOUT_CLASSIFICATION	1.4419769782838462E-5	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999849190010683	WITHOUT_CLASSIFICATION	1.5080998931650829E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999906972969649	WITHOUT_CLASSIFICATION	9.302703035113952E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999842673557885	WITHOUT_CLASSIFICATION	1.5732644211506684E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999764930226652	WITHOUT_CLASSIFICATION	2.3506977334699456E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999905606281483	WITHOUT_CLASSIFICATION	9.439371851668593E-6	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999886549517201	WITHOUT_CLASSIFICATION	1.1345048279862154E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999875243536781	WITHOUT_CLASSIFICATION	1.2475646321947925E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999841429051821	WITHOUT_CLASSIFICATION	1.585709481791034E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999899595565068	WITHOUT_CLASSIFICATION	1.0040443493137685E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999806489151694	WITHOUT_CLASSIFICATION	1.9351084830598602E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.999987541874518	WITHOUT_CLASSIFICATION	1.24581254820259E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999825168723586	WITHOUT_CLASSIFICATION	1.7483127641457783E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.999975390873428	WITHOUT_CLASSIFICATION	2.4609126571980423E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999737003698519	WITHOUT_CLASSIFICATION	2.6299630148176922E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999855767452287	WITHOUT_CLASSIFICATION	1.4423254771336898E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999855767452287	WITHOUT_CLASSIFICATION	1.4423254771336898E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999843745927937	WITHOUT_CLASSIFICATION	1.562540720633413E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999829387183825	WITHOUT_CLASSIFICATION	1.706128161749451E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999843134452121	WITHOUT_CLASSIFICATION	1.5686554787834832E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.999976992349208	WITHOUT_CLASSIFICATION	2.300765079206196E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999897585648373	WITHOUT_CLASSIFICATION	1.024143516267413E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999832527084335	WITHOUT_CLASSIFICATION	1.6747291566599014E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999889077211889	WITHOUT_CLASSIFICATION	1.1092278811150618E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999774126960984	WITHOUT_CLASSIFICATION	2.2587303901576097E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999759231596813	WITHOUT_CLASSIFICATION	2.407684031876517E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999855700067055	WITHOUT_CLASSIFICATION	1.4429993294443638E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999921552408741	WITHOUT_CLASSIFICATION	7.844759125884278E-6	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999921552408741	WITHOUT_CLASSIFICATION	7.844759125884278E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999970040372972	WITHOUT_CLASSIFICATION	2.99596270287559E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9993786347173237	WITHOUT_CLASSIFICATION	6.213652826763583E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.999693139443047	WITHOUT_CLASSIFICATION	3.0686055695292784E-4	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999999996928733	WITHOUT_CLASSIFICATION	3.0712667570463156E-10	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999936279821	WITHOUT_CLASSIFICATION	6.3720179474823714E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999936279821	WITHOUT_CLASSIFICATION	6.3720179474823714E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999936279821	WITHOUT_CLASSIFICATION	6.3720179474823714E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999936279821	WITHOUT_CLASSIFICATION	6.3720179474823714E-9	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.6877937899706613	DEFECT	0.31220621002933874	WITHOUT_CLASSIFICATION
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.5271525712428795	WITHOUT_CLASSIFICATION	0.4728474287571204	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999911533910941	WITHOUT_CLASSIFICATION	8.846608905843052E-6	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999875680565492	WITHOUT_CLASSIFICATION	1.2431943450681001E-5	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999897203273512	WITHOUT_CLASSIFICATION	1.0279672648770245E-5	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999864784091222	WITHOUT_CLASSIFICATION	1.3521590877744617E-5	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999852509261746	WITHOUT_CLASSIFICATION	1.4749073825376953E-5	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.999974629106197	WITHOUT_CLASSIFICATION	2.5370893802878176E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9999534806349959	WITHOUT_CLASSIFICATION	4.651936500421189E-5	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999825227001338	WITHOUT_CLASSIFICATION	1.7477299866133693E-5	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999778305524184	WITHOUT_CLASSIFICATION	2.2169447581679876E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999570342450194	WITHOUT_CLASSIFICATION	4.296575498069012E-5	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999836306402782	WITHOUT_CLASSIFICATION	1.6369359721853767E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999848389194198	WITHOUT_CLASSIFICATION	1.5161080580147216E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999823658706324	WITHOUT_CLASSIFICATION	1.7634129367611774E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999850300737672	WITHOUT_CLASSIFICATION	1.4969926232851346E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999895701723798	WITHOUT_CLASSIFICATION	1.0429827620122382E-5	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999893264406811	WITHOUT_CLASSIFICATION	1.0673559318846907E-5	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999830273832837	WITHOUT_CLASSIFICATION	1.697261671631151E-5	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999820112616077	WITHOUT_CLASSIFICATION	1.7988738392359553E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999764093665382	WITHOUT_CLASSIFICATION	2.3590633461779382E-5	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999724230214997	WITHOUT_CLASSIFICATION	2.7576978500215602E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999642041198801	WITHOUT_CLASSIFICATION	3.579588011992152E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999753819373567	WITHOUT_CLASSIFICATION	2.4618062643408727E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999766908357441	WITHOUT_CLASSIFICATION	2.3309164255829922E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999899740085325	WITHOUT_CLASSIFICATION	1.002599146750796E-5	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.999983984770405	WITHOUT_CLASSIFICATION	1.6015229595000996E-5	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999898670646022	WITHOUT_CLASSIFICATION	1.0132935397761112E-5	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999913499114513	WITHOUT_CLASSIFICATION	8.650088548618308E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999915873616095	WITHOUT_CLASSIFICATION	8.412638390556362E-6	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.999991016758319	WITHOUT_CLASSIFICATION	8.983241681005021E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999853681914529	WITHOUT_CLASSIFICATION	1.4631808547048668E-5	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999852394973912	WITHOUT_CLASSIFICATION	1.4760502608868163E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999855076797698	WITHOUT_CLASSIFICATION	1.4492320230229428E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999838084052044	WITHOUT_CLASSIFICATION	1.619159479562207E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.999990238637804	WITHOUT_CLASSIFICATION	9.761362196068099E-6	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999895173154058	WITHOUT_CLASSIFICATION	1.0482684594356683E-5	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999915022019272	WITHOUT_CLASSIFICATION	8.497798072730353E-6	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999819945732903	WITHOUT_CLASSIFICATION	1.8005426709684898E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999834001579091	WITHOUT_CLASSIFICATION	1.659984209091055E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999822266706916	WITHOUT_CLASSIFICATION	1.777332930843624E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.999987851034763	WITHOUT_CLASSIFICATION	1.214896523711326E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999901680210419	WITHOUT_CLASSIFICATION	9.83197895798362E-6	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999859092738953	WITHOUT_CLASSIFICATION	1.4090726104729764E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999849718366943	WITHOUT_CLASSIFICATION	1.5028163305674623E-5	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999878564652083	WITHOUT_CLASSIFICATION	1.2143534791670053E-5	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999899243202152	WITHOUT_CLASSIFICATION	1.0075679784767482E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999885576356355	WITHOUT_CLASSIFICATION	1.144236436436853E-5	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999773821660959	WITHOUT_CLASSIFICATION	2.261783390413223E-5	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999789964830864	WITHOUT_CLASSIFICATION	2.1003516913549798E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999862936786453	WITHOUT_CLASSIFICATION	1.3706321354717487E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999855481754006	WITHOUT_CLASSIFICATION	1.4451824599373685E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999806007226865	WITHOUT_CLASSIFICATION	1.9399277313475665E-5	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999878014574167	WITHOUT_CLASSIFICATION	1.2198542583294159E-5	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999796524824582	WITHOUT_CLASSIFICATION	2.0347517541799117E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999722514892659	WITHOUT_CLASSIFICATION	2.7748510734073316E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999812733088276	WITHOUT_CLASSIFICATION	1.872669117247191E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999819643444668	WITHOUT_CLASSIFICATION	1.8035655533180292E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999737300421819	WITHOUT_CLASSIFICATION	2.626995781814699E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.999998986826642	WITHOUT_CLASSIFICATION	1.0131733580087073E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999991405612814	WITHOUT_CLASSIFICATION	8.594387186184677E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999967200036319	WITHOUT_CLASSIFICATION	3.2799963680415676E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999967200036319	WITHOUT_CLASSIFICATION	3.2799963680415676E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999967200036319	WITHOUT_CLASSIFICATION	3.2799963680415676E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999967200036319	WITHOUT_CLASSIFICATION	3.2799963680415676E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999967200036319	WITHOUT_CLASSIFICATION	3.2799963680415676E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999967200036319	WITHOUT_CLASSIFICATION	3.2799963680415676E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999967200036319	WITHOUT_CLASSIFICATION	3.2799963680415676E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9998365527272488	WITHOUT_CLASSIFICATION	1.6344727275111864E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9998365527272488	WITHOUT_CLASSIFICATION	1.6344727275111864E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9998365527272488	WITHOUT_CLASSIFICATION	1.6344727275111864E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9998365527272488	WITHOUT_CLASSIFICATION	1.6344727275111864E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9992849249124993	WITHOUT_CLASSIFICATION	7.150750875006926E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9992849249124993	WITHOUT_CLASSIFICATION	7.150750875006926E-4	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9986208970052656	WITHOUT_CLASSIFICATION	0.0013791029947344225	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998919527725	WITHOUT_CLASSIFICATION	1.0804722753698272E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998919527725	WITHOUT_CLASSIFICATION	1.0804722753698272E-7	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999999081945204	WITHOUT_CLASSIFICATION	9.180547964193158E-8	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999995635099076	WITHOUT_CLASSIFICATION	4.3649009238687746E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997679078672	WITHOUT_CLASSIFICATION	2.3209213282245077E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997679078672	WITHOUT_CLASSIFICATION	2.3209213282245077E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997679078672	WITHOUT_CLASSIFICATION	2.3209213282245077E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997679078672	WITHOUT_CLASSIFICATION	2.3209213282245077E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997679078672	WITHOUT_CLASSIFICATION	2.3209213282245077E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997679078672	WITHOUT_CLASSIFICATION	2.3209213282245077E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997679078672	WITHOUT_CLASSIFICATION	2.3209213282245077E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999682192988	WITHOUT_CLASSIFICATION	3.1780701198718235E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997891141711	WITHOUT_CLASSIFICATION	2.1088582893800615E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.999977710179391	WITHOUT_CLASSIFICATION	2.2289820609027358E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.999977710179391	WITHOUT_CLASSIFICATION	2.2289820609027358E-5	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999998858820627	WITHOUT_CLASSIFICATION	1.1411793726406496E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999988346067585	WITHOUT_CLASSIFICATION	1.1653932414518832E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999988346067585	WITHOUT_CLASSIFICATION	1.1653932414518832E-6	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999990956529844	WITHOUT_CLASSIFICATION	9.043470156147126E-7	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9992024857054349	WITHOUT_CLASSIFICATION	7.975142945651465E-4	DEFECT
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9999982220269559	WITHOUT_CLASSIFICATION	1.7779730442112337E-6	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9957698559478676	WITHOUT_CLASSIFICATION	0.004230144052132436	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.99999978445239	WITHOUT_CLASSIFICATION	2.1554760990719548E-7	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.999998395693819	WITHOUT_CLASSIFICATION	1.6043061810606684E-6	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999285467131268	WITHOUT_CLASSIFICATION	7.145328687324241E-5	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999986573191351	WITHOUT_CLASSIFICATION	1.3426808648452024E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999965996278	WITHOUT_CLASSIFICATION	3.4003721597926014E-9	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9995905533482097	WITHOUT_CLASSIFICATION	4.094466517902465E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999698286630598	WITHOUT_CLASSIFICATION	3.0171336940183077E-5	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9998098123538455	WITHOUT_CLASSIFICATION	1.9018764615451675E-4	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999994435031361	WITHOUT_CLASSIFICATION	5.564968638868135E-7	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999138903898633	WITHOUT_CLASSIFICATION	8.610961013668544E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999978141702539	WITHOUT_CLASSIFICATION	2.1858297460649585E-6	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999873254007375	WITHOUT_CLASSIFICATION	1.2674599262596164E-5	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9999999453249458	WITHOUT_CLASSIFICATION	5.46750541735994E-8	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999803300449491	WITHOUT_CLASSIFICATION	1.9669955050817545E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999997511244806	WITHOUT_CLASSIFICATION	2.48875519396927E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999997511244806	WITHOUT_CLASSIFICATION	2.48875519396927E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999619438782111	WITHOUT_CLASSIFICATION	3.805612178878401E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999578186003	WITHOUT_CLASSIFICATION	4.218139971864158E-8	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999901989913517	WITHOUT_CLASSIFICATION	9.80100864839201E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999740791372123	WITHOUT_CLASSIFICATION	2.5920862787767516E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999336030757277	WITHOUT_CLASSIFICATION	6.639692427226528E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999336030757277	WITHOUT_CLASSIFICATION	6.639692427226528E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999336030757277	WITHOUT_CLASSIFICATION	6.639692427226528E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999927229842691	WITHOUT_CLASSIFICATION	7.277015730872923E-6	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9997915365865864	WITHOUT_CLASSIFICATION	2.084634134136181E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999991466795439	WITHOUT_CLASSIFICATION	8.533204560623886E-7	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999853757273867	WITHOUT_CLASSIFICATION	1.462427261333588E-5	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999980420516575	WITHOUT_CLASSIFICATION	1.9579483424169818E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999992438674882	WITHOUT_CLASSIFICATION	7.561325119073912E-7	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9996125806062299	WITHOUT_CLASSIFICATION	3.874193937700901E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.999986841791219	WITHOUT_CLASSIFICATION	1.3158208781003052E-5	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999996174681816	WITHOUT_CLASSIFICATION	3.8253181841142355E-7	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999999859917577	WITHOUT_CLASSIFICATION	1.4008242252091735E-8	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999991033840347	WITHOUT_CLASSIFICATION	8.966159652693415E-7	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999710194674271	WITHOUT_CLASSIFICATION	2.8980532573034678E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9467807498708781	WITHOUT_CLASSIFICATION	0.05321925012912194	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.999979621430972	WITHOUT_CLASSIFICATION	2.0378569028104523E-5	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999999983559695	WITHOUT_CLASSIFICATION	1.6440303880832782E-9	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999996946816209	WITHOUT_CLASSIFICATION	3.0531837916560186E-7	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999759426802263	WITHOUT_CLASSIFICATION	2.4057319773850174E-5	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.999978417632194	WITHOUT_CLASSIFICATION	2.1582367805996073E-5	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.999991534866266	WITHOUT_CLASSIFICATION	8.465133734034378E-6	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.6417496591666272	DEFECT	0.3582503408333727	WITHOUT_CLASSIFICATION
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.8492655402874366	DEFECT	0.1507344597125634	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9957972918375668	WITHOUT_CLASSIFICATION	0.004202708162433167	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9916218158626907	DEFECT	0.008378184137309341	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9969193152927315	DEFECT	0.003080684707268444	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.8236938911024059	WITHOUT_CLASSIFICATION	0.17630610889759407	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.6776134835053897	WITHOUT_CLASSIFICATION	0.3223865164946102	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9964205413459213	WITHOUT_CLASSIFICATION	0.0035794586540786114	DEFECT
// FIXME: not correct exception	DEFECT	0.9904245646881418	DEFECT	0.009575435311858149	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9963292910146254	WITHOUT_CLASSIFICATION	0.003670708985374602	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9995405709389031	WITHOUT_CLASSIFICATION	4.594290610968106E-4	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9945750618916483	WITHOUT_CLASSIFICATION	0.005424938108351672	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9991901746780274	WITHOUT_CLASSIFICATION	8.098253219725729E-4	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.8062283355777697	WITHOUT_CLASSIFICATION	0.19377166442223026	DEFECT
// TODO: sys fail	DEFECT	0.9741316797298157	WITHOUT_CLASSIFICATION	0.02586832027018431	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9956593273304291	WITHOUT_CLASSIFICATION	0.0043406726695710395	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9956593273304291	WITHOUT_CLASSIFICATION	0.0043406726695710395	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9992847909688958	WITHOUT_CLASSIFICATION	7.152090311042506E-4	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9956253050384978	WITHOUT_CLASSIFICATION	0.004374694961502173	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.8224930676324118	WITHOUT_CLASSIFICATION	0.17750693236758816	DEFECT
// ENEBO: Very wrong	DEFECT	0.9996586152540685	WITHOUT_CLASSIFICATION	3.413847459315362E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9996586152540685	WITHOUT_CLASSIFICATION	3.413847459315362E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.8734876420781887	WITHOUT_CLASSIFICATION	0.1265123579218112	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9023205576326412	DEFECT	0.09767944236735882	WITHOUT_CLASSIFICATION
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9227549644021131	WITHOUT_CLASSIFICATION	0.07724503559788691	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.942424551594708	WITHOUT_CLASSIFICATION	0.05757544840529212	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.8669193572604361	WITHOUT_CLASSIFICATION	0.13308064273956377	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.7156875202775506	WITHOUT_CLASSIFICATION	0.2843124797224494	DEFECT
// TODO: proper sign	DEFECT	0.999548279881946	WITHOUT_CLASSIFICATION	4.5172011805397894E-4	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.9997970461704531	DEFECT	2.0295382954693347E-4	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.6115417731465719	DEFECT	0.388458226853428	WITHOUT_CLASSIFICATION
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.9984842395007923	DEFECT	0.0015157604992075834	WITHOUT_CLASSIFICATION
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.8205666625852017	DEFECT	0.17943333741479836	WITHOUT_CLASSIFICATION
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9488213266769278	DEFECT	0.05117867332307218	WITHOUT_CLASSIFICATION
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.5644072386007914	WITHOUT_CLASSIFICATION	0.43559276139920866	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.9215398621171107	WITHOUT_CLASSIFICATION	0.0784601378828892	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.7925053172144628	DEFECT	0.2074946827855372	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9028495627361436	WITHOUT_CLASSIFICATION	0.09715043726385646	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.8522570652036169	WITHOUT_CLASSIFICATION	0.14774293479638306	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.8598797278242651	DEFECT	0.140120272175735	WITHOUT_CLASSIFICATION
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9921830828308628	WITHOUT_CLASSIFICATION	0.007816917169137263	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9999574886592407	WITHOUT_CLASSIFICATION	4.251134075934122E-5	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9882066189051807	WITHOUT_CLASSIFICATION	0.011793381094819288	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9882066189051807	WITHOUT_CLASSIFICATION	0.011793381094819288	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.978268296662214	WITHOUT_CLASSIFICATION	0.02173170333778589	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9999037940858989	WITHOUT_CLASSIFICATION	9.620591410101843E-5	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9956555523681224	DEFECT	0.00434444763187758	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9830013415489651	WITHOUT_CLASSIFICATION	0.01699865845103487	DEFECT
// FIXME: This is wrong	DEFECT	0.7884979393677436	DEFECT	0.21150206063225652	WITHOUT_CLASSIFICATION
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.866473362651942	DEFECT	0.133526637348058	WITHOUT_CLASSIFICATION
// XXX Wrong, but will have to do for now	DEFECT	0.9998761242069278	WITHOUT_CLASSIFICATION	1.2387579307212573E-4	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.8047747281502853	DEFECT	0.19522527184971478	WITHOUT_CLASSIFICATION
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.995167806487698	WITHOUT_CLASSIFICATION	0.004832193512301949	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9996573903734058	WITHOUT_CLASSIFICATION	3.426096265941069E-4	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9977330865586453	DEFECT	0.0022669134413546826	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9637260807046327	WITHOUT_CLASSIFICATION	0.0362739192953672	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9637260807046327	WITHOUT_CLASSIFICATION	0.0362739192953672	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9995852771737536	DEFECT	4.147228262463811E-4	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9832496065053551	WITHOUT_CLASSIFICATION	0.016750393494644848	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9793452128092897	DEFECT	0.020654787190710355	WITHOUT_CLASSIFICATION
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9988064522639247	WITHOUT_CLASSIFICATION	0.0011935477360752688	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.8404822979971153	DEFECT	0.1595177020028847	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9951283700333776	DEFECT	0.004871629966622427	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9997053399138128	WITHOUT_CLASSIFICATION	2.9466008618719884E-4	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9989934060671464	DEFECT	0.0010065939328536698	WITHOUT_CLASSIFICATION
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.978268296662214	WITHOUT_CLASSIFICATION	0.02173170333778589	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9978261046931453	WITHOUT_CLASSIFICATION	0.0021738953068546896	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.8049346586400539	DEFECT	0.1950653413599461	WITHOUT_CLASSIFICATION
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9989951102385841	WITHOUT_CLASSIFICATION	0.0010048897614158498	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.942424551594708	WITHOUT_CLASSIFICATION	0.05757544840529212	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.7711108380031697	WITHOUT_CLASSIFICATION	0.22888916199683032	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.9919106895701979	DEFECT	0.00808931042980202	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9028495627361436	WITHOUT_CLASSIFICATION	0.09715043726385646	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9981017458574946	WITHOUT_CLASSIFICATION	0.0018982541425053955	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9977330865586453	DEFECT	0.0022669134413546826	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.6478438751937525	DEFECT	0.35215612480624753	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// TODO: don't require pop	DEFECT	0.9466653377892499	WITHOUT_CLASSIFICATION	0.05333466221075022	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.8047747281502853	DEFECT	0.19522527184971478	WITHOUT_CLASSIFICATION
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.8949234255432718	WITHOUT_CLASSIFICATION	0.10507657445672819	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9637260807046327	WITHOUT_CLASSIFICATION	0.0362739192953672	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9637260807046327	WITHOUT_CLASSIFICATION	0.0362739192953672	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9832496065053551	WITHOUT_CLASSIFICATION	0.016750393494644848	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9832496065053551	WITHOUT_CLASSIFICATION	0.016750393494644848	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9832496065053551	WITHOUT_CLASSIFICATION	0.016750393494644848	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9832496065053551	WITHOUT_CLASSIFICATION	0.016750393494644848	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9832496065053551	WITHOUT_CLASSIFICATION	0.016750393494644848	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9832496065053551	WITHOUT_CLASSIFICATION	0.016750393494644848	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.988812193474402	WITHOUT_CLASSIFICATION	0.011187806525598065	DEFECT
