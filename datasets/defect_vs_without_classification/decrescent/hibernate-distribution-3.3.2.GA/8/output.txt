//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999962499194	WITHOUT_CLASSIFICATION	3.750080593024285E-9	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999987684476089	WITHOUT_CLASSIFICATION	1.2315523911763933E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999987684476089	WITHOUT_CLASSIFICATION	1.2315523911763933E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999987684476089	WITHOUT_CLASSIFICATION	1.2315523911763933E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999987684476089	WITHOUT_CLASSIFICATION	1.2315523911763933E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999987684476089	WITHOUT_CLASSIFICATION	1.2315523911763933E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999987684476089	WITHOUT_CLASSIFICATION	1.2315523911763933E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999987684476089	WITHOUT_CLASSIFICATION	1.2315523911763933E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999987174733457	WITHOUT_CLASSIFICATION	1.2825266543005403E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999987174733457	WITHOUT_CLASSIFICATION	1.2825266543005403E-6	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999968874151538	WITHOUT_CLASSIFICATION	3.1125848460984963E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998623742716	WITHOUT_CLASSIFICATION	1.376257283761532E-7	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999999824882163	WITHOUT_CLASSIFICATION	1.7511783724675073E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999943548887813	WITHOUT_CLASSIFICATION	5.6451112187134425E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999943548887813	WITHOUT_CLASSIFICATION	5.6451112187134425E-6	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999934310743	WITHOUT_CLASSIFICATION	6.5689257356503076E-9	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995044583159	WITHOUT_CLASSIFICATION	4.955416841758933E-7	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999998026106498	WITHOUT_CLASSIFICATION	1.9738935013907237E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999963496235089	WITHOUT_CLASSIFICATION	3.6503764910223576E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970063737257	WITHOUT_CLASSIFICATION	2.9936262743807263E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970063737257	WITHOUT_CLASSIFICATION	2.9936262743807263E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999870974976796	WITHOUT_CLASSIFICATION	1.2902502320363625E-5	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999794966569	WITHOUT_CLASSIFICATION	2.0503343179404495E-8	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9998519492917969	WITHOUT_CLASSIFICATION	1.4805070820312976E-4	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999909506085187	WITHOUT_CLASSIFICATION	9.049391481162225E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999350028226	WITHOUT_CLASSIFICATION	6.499717741671264E-8	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999995416895011	WITHOUT_CLASSIFICATION	4.5831049885318583E-7	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999863299115846	WITHOUT_CLASSIFICATION	1.367008841548902E-5	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999996403862312	WITHOUT_CLASSIFICATION	3.596137688298193E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999984644061942	WITHOUT_CLASSIFICATION	1.5355938057903514E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934878483224169	WITHOUT_CLASSIFICATION	0.006512151677583079	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999997839524127	WITHOUT_CLASSIFICATION	2.1604758727879114E-7	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999996125589521	WITHOUT_CLASSIFICATION	3.8744104786528563E-7	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999996196482389	WITHOUT_CLASSIFICATION	3.803517609948471E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999996087372055	WITHOUT_CLASSIFICATION	3.9126279446566827E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999996087372055	WITHOUT_CLASSIFICATION	3.9126279446566827E-7	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999971285146695	WITHOUT_CLASSIFICATION	2.8714853304936083E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999964740404953	WITHOUT_CLASSIFICATION	3.5259595046000947E-6	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999658577422	WITHOUT_CLASSIFICATION	3.414225783800297E-8	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999994050822827	WITHOUT_CLASSIFICATION	5.949177173736996E-7	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999999380578847	WITHOUT_CLASSIFICATION	6.194211532213349E-8	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5243675412595735	WITHOUT_CLASSIFICATION	0.4756324587404266	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5243675412595735	WITHOUT_CLASSIFICATION	0.4756324587404266	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999997484628758	WITHOUT_CLASSIFICATION	2.515371242067234E-7	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998631742260492	WITHOUT_CLASSIFICATION	1.36825773950763E-4	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999474544562	WITHOUT_CLASSIFICATION	5.2545543698070136E-8	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999990254493213	WITHOUT_CLASSIFICATION	9.745506787073777E-7	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999943962225354	WITHOUT_CLASSIFICATION	5.603777464610584E-6	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999872654165	WITHOUT_CLASSIFICATION	1.2734583497038256E-7	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985766551398	WITHOUT_CLASSIFICATION	1.423344860230337E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999994121340743	WITHOUT_CLASSIFICATION	5.878659258030829E-7	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999633681710708	WITHOUT_CLASSIFICATION	3.6631828929300196E-5	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9899105519610935	WITHOUT_CLASSIFICATION	0.010089448038906584	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999877340775992	WITHOUT_CLASSIFICATION	1.226592240072684E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999633681710708	WITHOUT_CLASSIFICATION	3.6631828929300196E-5	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999877340775992	WITHOUT_CLASSIFICATION	1.226592240072684E-5	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999973724529058	WITHOUT_CLASSIFICATION	2.6275470941939453E-6	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999997747749665	WITHOUT_CLASSIFICATION	2.2522503357173193E-7	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999994294834137	WITHOUT_CLASSIFICATION	5.705165862728329E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999982150553455	WITHOUT_CLASSIFICATION	1.78494465442195E-6	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999343817773	WITHOUT_CLASSIFICATION	6.561822269933643E-8	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999951355476	WITHOUT_CLASSIFICATION	4.864452306375792E-9	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999768722807034	WITHOUT_CLASSIFICATION	2.312771929658384E-5	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999326244943559	WITHOUT_CLASSIFICATION	6.73755056441403E-5	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999998861748571	WITHOUT_CLASSIFICATION	1.1382514284346179E-7	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999999329085005	WITHOUT_CLASSIFICATION	6.709149939464995E-8	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999971078780789	WITHOUT_CLASSIFICATION	2.8921219210666336E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.999995022288254	WITHOUT_CLASSIFICATION	4.977711745964919E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999997292559395	WITHOUT_CLASSIFICATION	2.707440604716441E-7	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999987006754367	WITHOUT_CLASSIFICATION	1.2993245633060466E-6	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999996765035141	WITHOUT_CLASSIFICATION	3.234964859562277E-7	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999976049808694	WITHOUT_CLASSIFICATION	2.3950191306097825E-6	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999994886046403	WITHOUT_CLASSIFICATION	5.113953597855546E-7	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999980865395622	WITHOUT_CLASSIFICATION	1.9134604377252147E-6	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999370930706	WITHOUT_CLASSIFICATION	6.290692952399072E-8	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999430901925	WITHOUT_CLASSIFICATION	5.690980754516215E-8	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999998792110255	WITHOUT_CLASSIFICATION	1.207889745409964E-7	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999989449648	WITHOUT_CLASSIFICATION	1.0550352193670785E-9	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999920500717	WITHOUT_CLASSIFICATION	7.94992829735291E-9	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999970949506719	WITHOUT_CLASSIFICATION	2.9050493280774645E-6	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999870264146046	WITHOUT_CLASSIFICATION	1.2973585395396678E-5	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999998476872245	WITHOUT_CLASSIFICATION	1.5231277540945022E-7	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999998337331	WITHOUT_CLASSIFICATION	1.662668296656966E-10	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999916966318	WITHOUT_CLASSIFICATION	8.303368168870768E-9	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999999943890569	WITHOUT_CLASSIFICATION	5.610943092541486E-8	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999999995720085	WITHOUT_CLASSIFICATION	4.2799149383395305E-9	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999759084964	WITHOUT_CLASSIFICATION	2.4091503491192896E-8	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999963134426	WITHOUT_CLASSIFICATION	3.6865573941750046E-9	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999947932244786	WITHOUT_CLASSIFICATION	5.206775521384666E-6	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999990984087075	WITHOUT_CLASSIFICATION	9.01591292531797E-7	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999954720363933	WITHOUT_CLASSIFICATION	4.527963606747575E-6	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999614920259	WITHOUT_CLASSIFICATION	3.8507974109855165E-8	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999990984087075	WITHOUT_CLASSIFICATION	9.01591292531797E-7	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.99999709584093	WITHOUT_CLASSIFICATION	2.9041590701335293E-6	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999674126904571	WITHOUT_CLASSIFICATION	3.2587309542901394E-5	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999984492098658	WITHOUT_CLASSIFICATION	1.5507901341747817E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999996640166551	WITHOUT_CLASSIFICATION	3.3598334489691194E-7	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999999419595414	WITHOUT_CLASSIFICATION	5.804045863343414E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992119098304	WITHOUT_CLASSIFICATION	7.880901694396205E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992119098304	WITHOUT_CLASSIFICATION	7.880901694396205E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999874677402041	WITHOUT_CLASSIFICATION	1.2532259795895298E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999997363871307	WITHOUT_CLASSIFICATION	2.63612869284755E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999931733082633	WITHOUT_CLASSIFICATION	6.826691736694598E-6	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999994507077	WITHOUT_CLASSIFICATION	5.492922208689308E-10	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999996877071607	WITHOUT_CLASSIFICATION	3.122928391999943E-7	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999956594513	WITHOUT_CLASSIFICATION	4.340548720562889E-9	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999993296282754	WITHOUT_CLASSIFICATION	6.703717246079756E-7	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999875783899156	WITHOUT_CLASSIFICATION	1.242161008444207E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999938337326	WITHOUT_CLASSIFICATION	6.166267282373093E-9	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999803691639	WITHOUT_CLASSIFICATION	1.9630836042956104E-8	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999972006755	WITHOUT_CLASSIFICATION	2.7993245896465074E-9	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999972006755	WITHOUT_CLASSIFICATION	2.7993245896465074E-9	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999751628622654	WITHOUT_CLASSIFICATION	2.48371377346249E-5	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999987646619326	WITHOUT_CLASSIFICATION	1.2353380673785854E-6	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999998896290836	WITHOUT_CLASSIFICATION	1.1037091642689909E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999972006755	WITHOUT_CLASSIFICATION	2.7993245896465074E-9	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999751628622654	WITHOUT_CLASSIFICATION	2.48371377346249E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999751628622654	WITHOUT_CLASSIFICATION	2.48371377346249E-5	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999930971403	WITHOUT_CLASSIFICATION	6.90285979807543E-9	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999980775652608	WITHOUT_CLASSIFICATION	1.922434739177908E-6	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999992208048731	WITHOUT_CLASSIFICATION	7.791951268633503E-7	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999999994701425	WITHOUT_CLASSIFICATION	5.298575048269747E-9	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999958609416816	WITHOUT_CLASSIFICATION	4.13905831843494E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999958609416816	WITHOUT_CLASSIFICATION	4.13905831843494E-6	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999998900686415	WITHOUT_CLASSIFICATION	1.0993135849048869E-7	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999983864432681	WITHOUT_CLASSIFICATION	1.6135567318675042E-6	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999993117606136	WITHOUT_CLASSIFICATION	6.882393863436337E-7	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999993587192681	WITHOUT_CLASSIFICATION	6.412807319205814E-7	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999993587192681	WITHOUT_CLASSIFICATION	6.412807319205814E-7	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999978280989641	WITHOUT_CLASSIFICATION	2.171901035984676E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999573658300053	WITHOUT_CLASSIFICATION	4.263416999479099E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999546633722187	WITHOUT_CLASSIFICATION	4.533662778133023E-5	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999942058317	WITHOUT_CLASSIFICATION	5.79416828230407E-9	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999888805137	WITHOUT_CLASSIFICATION	1.1119486370277375E-8	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999999967837425	WITHOUT_CLASSIFICATION	3.216257501868309E-8	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999724695187646	WITHOUT_CLASSIFICATION	2.7530481235340042E-5	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999999046011037	WITHOUT_CLASSIFICATION	9.539889632630393E-8	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999994130201559	WITHOUT_CLASSIFICATION	5.869798440559896E-7	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999546633722187	WITHOUT_CLASSIFICATION	4.533662778133023E-5	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999756216769305	WITHOUT_CLASSIFICATION	2.437832306945885E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999972327984686	WITHOUT_CLASSIFICATION	2.7672015312373675E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999972327984686	WITHOUT_CLASSIFICATION	2.7672015312373675E-6	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999998052483103	WITHOUT_CLASSIFICATION	1.9475168965523992E-7	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999999732408794	WITHOUT_CLASSIFICATION	2.675912059311219E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999993974457005	WITHOUT_CLASSIFICATION	6.0255429950861834E-6	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999898446029616	WITHOUT_CLASSIFICATION	1.0155397038384502E-5	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999999905628689	WITHOUT_CLASSIFICATION	9.437131103133832E-8	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9999861040540087	WITHOUT_CLASSIFICATION	1.3895945991379084E-5	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9995247976770973	WITHOUT_CLASSIFICATION	4.752023229026436E-4	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999992849286	WITHOUT_CLASSIFICATION	7.150715207742632E-10	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999998941938947	WITHOUT_CLASSIFICATION	1.058061053484686E-7	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999998941938947	WITHOUT_CLASSIFICATION	1.058061053484686E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999994118328921	WITHOUT_CLASSIFICATION	5.881671078937042E-7	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999962499194	WITHOUT_CLASSIFICATION	3.750080593024285E-9	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999997939192702	WITHOUT_CLASSIFICATION	2.0608072991071087E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999987684476089	WITHOUT_CLASSIFICATION	1.2315523911763933E-6	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.999999835762615	WITHOUT_CLASSIFICATION	1.6423738503125444E-7	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999987174733457	WITHOUT_CLASSIFICATION	1.2825266543005403E-6	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999994074253791	WITHOUT_CLASSIFICATION	5.925746208938251E-7	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999999657552565	WITHOUT_CLASSIFICATION	3.4244743484166005E-8	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999999567619753	WITHOUT_CLASSIFICATION	4.3238024662208076E-8	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999990481876556	WITHOUT_CLASSIFICATION	9.518123443173246E-7	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999695237720505	WITHOUT_CLASSIFICATION	3.0476227949567694E-5	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999982819678498	WITHOUT_CLASSIFICATION	1.718032150199775E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999954368488706	WITHOUT_CLASSIFICATION	4.563151129402675E-6	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999997618311275	WITHOUT_CLASSIFICATION	2.3816887255950876E-7	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998623742716	WITHOUT_CLASSIFICATION	1.376257283761532E-7	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996607301121	WITHOUT_CLASSIFICATION	3.3926988780288316E-7	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996607301121	WITHOUT_CLASSIFICATION	3.3926988780288316E-7	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999998580489369	WITHOUT_CLASSIFICATION	1.419510632209835E-7	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999943360442013	WITHOUT_CLASSIFICATION	5.663955798738341E-6	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999992851316825	WITHOUT_CLASSIFICATION	7.148683175938652E-7	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999996892071017	WITHOUT_CLASSIFICATION	3.107928983998568E-7	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999996739706716	WITHOUT_CLASSIFICATION	3.260293284311105E-7	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999866118815	WITHOUT_CLASSIFICATION	1.3388118449457021E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999943548887813	WITHOUT_CLASSIFICATION	5.6451112187134425E-6	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999997896971683	WITHOUT_CLASSIFICATION	2.103028318178012E-7	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999991501172916	WITHOUT_CLASSIFICATION	8.498827084562416E-7	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999996401251142	WITHOUT_CLASSIFICATION	3.5987488577238906E-7	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999996846092967	WITHOUT_CLASSIFICATION	3.153907033772971E-7	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999986392645868	WITHOUT_CLASSIFICATION	1.3607354132311241E-6	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999983083816437	WITHOUT_CLASSIFICATION	1.691618356248355E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999660321548	WITHOUT_CLASSIFICATION	3.396784518775914E-8	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999017543529	WITHOUT_CLASSIFICATION	9.824564709033558E-8	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999998487634647	WITHOUT_CLASSIFICATION	1.5123653530884026E-7	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999888559841144	WITHOUT_CLASSIFICATION	1.114401588572514E-5	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999987839384872	WITHOUT_CLASSIFICATION	1.216061512780557E-6	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999999295394952	WITHOUT_CLASSIFICATION	7.046050476842518E-8	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999987684476089	WITHOUT_CLASSIFICATION	1.2315523911763933E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999987684476089	WITHOUT_CLASSIFICATION	1.2315523911763933E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999987174733457	WITHOUT_CLASSIFICATION	1.2825266543005403E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999987174733457	WITHOUT_CLASSIFICATION	1.2825266543005403E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999954368488706	WITHOUT_CLASSIFICATION	4.563151129402675E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996607301121	WITHOUT_CLASSIFICATION	3.3926988780288316E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999660321548	WITHOUT_CLASSIFICATION	3.396784518775914E-8	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999934310743	WITHOUT_CLASSIFICATION	6.5689257356503076E-9	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999994710630778	WITHOUT_CLASSIFICATION	5.289369221041995E-7	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9998961529479583	WITHOUT_CLASSIFICATION	1.0384705204168178E-4	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999924733565927	WITHOUT_CLASSIFICATION	7.526643407335812E-6	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999976541845894	WITHOUT_CLASSIFICATION	2.3458154105905787E-6	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999958399419667	WITHOUT_CLASSIFICATION	4.1600580332515475E-6	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999986272100303	WITHOUT_CLASSIFICATION	1.3727899697634305E-6	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999907781384442	WITHOUT_CLASSIFICATION	9.221861555804685E-5	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9999840622691849	WITHOUT_CLASSIFICATION	1.593773081504942E-5	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999999301155585	WITHOUT_CLASSIFICATION	6.988444141507762E-8	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999991554062426	WITHOUT_CLASSIFICATION	8.445937574721558E-7	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999991554062426	WITHOUT_CLASSIFICATION	8.445937574721558E-7	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999970159144	WITHOUT_CLASSIFICATION	2.984085606050409E-9	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999993095307969	WITHOUT_CLASSIFICATION	6.904692030832366E-7	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999916678619508	WITHOUT_CLASSIFICATION	8.332138049203273E-6	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.999988956679019	WITHOUT_CLASSIFICATION	1.1043320980913724E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999968317993	WITHOUT_CLASSIFICATION	3.1682007023104984E-9	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.999999946356659	WITHOUT_CLASSIFICATION	5.3643341015223126E-8	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.99999996683553	WITHOUT_CLASSIFICATION	3.316446988892457E-8	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995044583159	WITHOUT_CLASSIFICATION	4.955416841758933E-7	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999954103211377	WITHOUT_CLASSIFICATION	4.589678862310078E-6	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999994060195336	WITHOUT_CLASSIFICATION	5.939804664796343E-7	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999994060195336	WITHOUT_CLASSIFICATION	5.939804664796343E-7	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999420455696	WITHOUT_CLASSIFICATION	5.795443049363579E-8	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999998239822959	WITHOUT_CLASSIFICATION	1.7601770396278446E-7	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999994588973105	WITHOUT_CLASSIFICATION	5.411026895898075E-7	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999944677214402	WITHOUT_CLASSIFICATION	5.5322785597806825E-6	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999964263206645	WITHOUT_CLASSIFICATION	3.5736793353159012E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999987174733457	WITHOUT_CLASSIFICATION	1.2825266543005403E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999954368488706	WITHOUT_CLASSIFICATION	4.563151129402675E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998623742716	WITHOUT_CLASSIFICATION	1.376257283761532E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999660321548	WITHOUT_CLASSIFICATION	3.396784518775914E-8	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999660321548	WITHOUT_CLASSIFICATION	3.396784518775914E-8	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997382233683	WITHOUT_CLASSIFICATION	2.6177663172531687E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997382233683	WITHOUT_CLASSIFICATION	2.6177663172531687E-7	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999999234938223	WITHOUT_CLASSIFICATION	7.650617765650824E-8	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999981147538143	WITHOUT_CLASSIFICATION	1.8852461857044372E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999981147538143	WITHOUT_CLASSIFICATION	1.8852461857044372E-6	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999997824959452	WITHOUT_CLASSIFICATION	2.1750405479221612E-7	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999989414849689	WITHOUT_CLASSIFICATION	1.0585150311166836E-6	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999999169596108	WITHOUT_CLASSIFICATION	8.304038922807917E-8	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999990965656892	WITHOUT_CLASSIFICATION	9.034343107377355E-7	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999893678471319	WITHOUT_CLASSIFICATION	1.0632152868207799E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999963496235089	WITHOUT_CLASSIFICATION	3.6503764910223576E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999963496235089	WITHOUT_CLASSIFICATION	3.6503764910223576E-6	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.999985347216118	WITHOUT_CLASSIFICATION	1.4652783882025322E-5	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999907418352747	WITHOUT_CLASSIFICATION	9.25816472522651E-6	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999998965698335	WITHOUT_CLASSIFICATION	1.0343016648319323E-7	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999976053428633	WITHOUT_CLASSIFICATION	2.394657136703511E-6	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999999208601055	WITHOUT_CLASSIFICATION	7.913989450271432E-8	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999991185166027	WITHOUT_CLASSIFICATION	8.814833972348582E-7	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970063737257	WITHOUT_CLASSIFICATION	2.9936262743807263E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999919164480822	WITHOUT_CLASSIFICATION	8.083551917915557E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999919164480822	WITHOUT_CLASSIFICATION	8.083551917915557E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999870974976796	WITHOUT_CLASSIFICATION	1.2902502320363625E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999870974976796	WITHOUT_CLASSIFICATION	1.2902502320363625E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999953855726254	WITHOUT_CLASSIFICATION	4.614427374676928E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999953855726254	WITHOUT_CLASSIFICATION	4.614427374676928E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999946934124	WITHOUT_CLASSIFICATION	5.306587575248814E-9	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999946934124	WITHOUT_CLASSIFICATION	5.306587575248814E-9	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999963496235089	WITHOUT_CLASSIFICATION	3.6503764910223576E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970063737257	WITHOUT_CLASSIFICATION	2.9936262743807263E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999919164480822	WITHOUT_CLASSIFICATION	8.083551917915557E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999919164480822	WITHOUT_CLASSIFICATION	8.083551917915557E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999870974976796	WITHOUT_CLASSIFICATION	1.2902502320363625E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999953855726254	WITHOUT_CLASSIFICATION	4.614427374676928E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999953855726254	WITHOUT_CLASSIFICATION	4.614427374676928E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999946934124	WITHOUT_CLASSIFICATION	5.306587575248814E-9	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999992577812667	WITHOUT_CLASSIFICATION	7.422187333364921E-7	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999998560915765	WITHOUT_CLASSIFICATION	1.4390842348914127E-6	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999908186941633	WITHOUT_CLASSIFICATION	9.1813058368216E-6	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999981744276925	WITHOUT_CLASSIFICATION	1.8255723075136562E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999999606117718	WITHOUT_CLASSIFICATION	3.938822823312713E-8	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999977517107229	WITHOUT_CLASSIFICATION	2.248289277012279E-6	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999451512550572	WITHOUT_CLASSIFICATION	5.484874494277112E-5	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9881199168284029	WITHOUT_CLASSIFICATION	0.011880083171597021	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9996466137217154	WITHOUT_CLASSIFICATION	3.533862782846353E-4	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999427437433	WITHOUT_CLASSIFICATION	5.725625671324055E-8	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999968569957246	WITHOUT_CLASSIFICATION	3.143004275431704E-6	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999998104830191	WITHOUT_CLASSIFICATION	1.895169809929736E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999874677402041	WITHOUT_CLASSIFICATION	1.2532259795895298E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999977517107229	WITHOUT_CLASSIFICATION	2.248289277012279E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999374646433185	WITHOUT_CLASSIFICATION	6.253535668155445E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999374646433185	WITHOUT_CLASSIFICATION	6.253535668155445E-5	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999734821419628	WITHOUT_CLASSIFICATION	2.6517858037233333E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999826514379	WITHOUT_CLASSIFICATION	1.7348562104899458E-7	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999826514379	WITHOUT_CLASSIFICATION	1.7348562104899458E-7	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.999985477052125	WITHOUT_CLASSIFICATION	1.452294787487966E-5	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999854064815296	WITHOUT_CLASSIFICATION	1.4593518470430958E-5	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999838435527425	WITHOUT_CLASSIFICATION	1.6156447257547488E-5	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999996327690358	WITHOUT_CLASSIFICATION	3.6723096421450515E-7	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999996327690358	WITHOUT_CLASSIFICATION	3.6723096421450515E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999350028226	WITHOUT_CLASSIFICATION	6.499717741671264E-8	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999938303273515	WITHOUT_CLASSIFICATION	6.169672648637948E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999938303273515	WITHOUT_CLASSIFICATION	6.169672648637948E-6	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999985131357847	WITHOUT_CLASSIFICATION	1.4868642152604048E-6	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999172208345	WITHOUT_CLASSIFICATION	8.277916551102462E-8	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999995052652018	WITHOUT_CLASSIFICATION	4.947347982267318E-7	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999990511880752	WITHOUT_CLASSIFICATION	9.488119247124166E-7	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999993690147732	WITHOUT_CLASSIFICATION	6.30985226898112E-7	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999972616456785	WITHOUT_CLASSIFICATION	2.7383543215274336E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999995416895011	WITHOUT_CLASSIFICATION	4.5831049885318583E-7	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999985462365851	WITHOUT_CLASSIFICATION	1.453763414856787E-6	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9966612401196405	WITHOUT_CLASSIFICATION	0.003338759880359483	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.999993290213619	WITHOUT_CLASSIFICATION	6.709786381001895E-6	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999992448852653	WITHOUT_CLASSIFICATION	7.551147347153311E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999984644061942	WITHOUT_CLASSIFICATION	1.5355938057903514E-6	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999332304358	WITHOUT_CLASSIFICATION	6.67695642127078E-8	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999996101612105	WITHOUT_CLASSIFICATION	3.898387893576493E-7	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999431600702	WITHOUT_CLASSIFICATION	5.683992989197494E-8	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999984644061942	WITHOUT_CLASSIFICATION	1.5355938057903514E-6	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999995476326784	WITHOUT_CLASSIFICATION	4.523673216251363E-7	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999996468228757	WITHOUT_CLASSIFICATION	3.5317712428723706E-7	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999998617713964	WITHOUT_CLASSIFICATION	1.3822860364421443E-7	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9999889868667969	WITHOUT_CLASSIFICATION	1.1013133203094314E-5	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999945621745953	WITHOUT_CLASSIFICATION	5.437825404825941E-6	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999991752174359	WITHOUT_CLASSIFICATION	8.247825639891624E-7	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999999021517513	WITHOUT_CLASSIFICATION	9.78482487381828E-8	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999996125589521	WITHOUT_CLASSIFICATION	3.8744104786528563E-7	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999999623282954	WITHOUT_CLASSIFICATION	3.767170460272692E-7	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999996196482389	WITHOUT_CLASSIFICATION	3.803517609948471E-7	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999994190117166	WITHOUT_CLASSIFICATION	5.809882832677141E-7	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999133920043	WITHOUT_CLASSIFICATION	8.660799566963614E-8	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999977539045232	WITHOUT_CLASSIFICATION	2.246095476838685E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999995416895011	WITHOUT_CLASSIFICATION	4.5831049885318583E-7	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999999623282954	WITHOUT_CLASSIFICATION	3.767170460272692E-7	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999994190117166	WITHOUT_CLASSIFICATION	5.809882832677141E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999977539045232	WITHOUT_CLASSIFICATION	2.246095476838685E-6	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999997993674472	WITHOUT_CLASSIFICATION	2.0063255276843854E-7	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999962903900146	WITHOUT_CLASSIFICATION	3.7096099854613955E-6	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999578437824	WITHOUT_CLASSIFICATION	4.2156217612424326E-8	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999996087372055	WITHOUT_CLASSIFICATION	3.9126279446566827E-7	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999997708910443	WITHOUT_CLASSIFICATION	2.2910895562274192E-7	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999939053341347	WITHOUT_CLASSIFICATION	6.094665865266694E-6	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9999958351578837	WITHOUT_CLASSIFICATION	4.164842116274162E-6	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999998338063701	WITHOUT_CLASSIFICATION	1.6619362981498018E-7	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999989224917858	WITHOUT_CLASSIFICATION	1.077508214234439E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999989231679	WITHOUT_CLASSIFICATION	1.0768320640674573E-9	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999753298131	WITHOUT_CLASSIFICATION	2.4670186950379435E-8	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999968663561493	WITHOUT_CLASSIFICATION	3.133643850863674E-6	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999994908618	WITHOUT_CLASSIFICATION	5.091381440367541E-10	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999258642835	WITHOUT_CLASSIFICATION	7.413571646587145E-8	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999922728301627	WITHOUT_CLASSIFICATION	7.727169837340388E-6	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999998127686646	WITHOUT_CLASSIFICATION	1.8723133533025678E-7	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999964740404953	WITHOUT_CLASSIFICATION	3.5259595046000947E-6	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999995771252926	WITHOUT_CLASSIFICATION	4.228747073869674E-7	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999971347301244	WITHOUT_CLASSIFICATION	2.865269875574954E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999999623282954	WITHOUT_CLASSIFICATION	3.767170460272692E-7	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999999098613942	WITHOUT_CLASSIFICATION	9.01386057914574E-8	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999981357364	WITHOUT_CLASSIFICATION	1.864263673627919E-9	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999999332280685	WITHOUT_CLASSIFICATION	6.677193157410588E-8	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999999941748183	WITHOUT_CLASSIFICATION	5.825181743405083E-9	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999999761593468	WITHOUT_CLASSIFICATION	2.3840653170104088E-8	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999905958413314	WITHOUT_CLASSIFICATION	9.404158668660284E-6	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999687371701	WITHOUT_CLASSIFICATION	3.1262829756956455E-8	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999991100182	WITHOUT_CLASSIFICATION	8.899818729678627E-10	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999898896760192	WITHOUT_CLASSIFICATION	1.011032398087512E-5	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.999998710830481	WITHOUT_CLASSIFICATION	1.2891695190971542E-6	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999994682981872	WITHOUT_CLASSIFICATION	5.317018127737988E-7	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999997321874046	WITHOUT_CLASSIFICATION	2.6781259546166615E-7	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999968899904739	WITHOUT_CLASSIFICATION	3.110009526150383E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999994050822827	WITHOUT_CLASSIFICATION	5.949177173736996E-7	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999610865437	WITHOUT_CLASSIFICATION	3.891345638506536E-8	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999992184696364	WITHOUT_CLASSIFICATION	7.815303635691481E-7	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999911932303711	WITHOUT_CLASSIFICATION	8.806769628834204E-6	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999969714521044	WITHOUT_CLASSIFICATION	3.028547895650758E-6	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999988415716157	WITHOUT_CLASSIFICATION	1.1584283843165394E-6	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999826775582744	WITHOUT_CLASSIFICATION	1.732244172556005E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999994288	WITHOUT_CLASSIFICATION	5.713317013189935E-13	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999965472663532	WITHOUT_CLASSIFICATION	3.4527336467485826E-6	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999369239021	WITHOUT_CLASSIFICATION	6.307609781363205E-8	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999983202799236	WITHOUT_CLASSIFICATION	1.6797200764428108E-6	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999883758854344	WITHOUT_CLASSIFICATION	1.1624114565524706E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999883758854344	WITHOUT_CLASSIFICATION	1.1624114565524706E-5	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.999993207917682	WITHOUT_CLASSIFICATION	6.792082317977408E-6	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999994560713209	WITHOUT_CLASSIFICATION	5.439286790598478E-7	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.999999761884648	WITHOUT_CLASSIFICATION	2.381153520133428E-7	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999999150743036	WITHOUT_CLASSIFICATION	8.492569639933944E-7	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999998151922413	WITHOUT_CLASSIFICATION	1.8480775867973258E-7	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.999411514305234	WITHOUT_CLASSIFICATION	5.88485694766018E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999905535359398	WITHOUT_CLASSIFICATION	9.446464060203414E-6	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999999376450946	WITHOUT_CLASSIFICATION	6.235490530995096E-8	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999975869348771	WITHOUT_CLASSIFICATION	2.413065122975284E-6	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999992552545528	WITHOUT_CLASSIFICATION	7.447454471758889E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999981292754231	WITHOUT_CLASSIFICATION	1.8707245769065198E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999947698183008	WITHOUT_CLASSIFICATION	5.230181699201635E-6	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9980109146328991	WITHOUT_CLASSIFICATION	0.001989085367100946	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999791176732324	WITHOUT_CLASSIFICATION	2.0882326767529194E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986624356941	WITHOUT_CLASSIFICATION	1.3375643058643452E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962215803638	WITHOUT_CLASSIFICATION	3.7784196361816722E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999921766920243	WITHOUT_CLASSIFICATION	7.823307975700004E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999977859581529	WITHOUT_CLASSIFICATION	2.214041847079752E-6	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999695090925066	WITHOUT_CLASSIFICATION	3.0490907493461065E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.999953280070314	WITHOUT_CLASSIFICATION	4.6719929685945115E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999972403253681	WITHOUT_CLASSIFICATION	2.7596746319730715E-6	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999972403253681	WITHOUT_CLASSIFICATION	2.7596746319730715E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999973240137311	WITHOUT_CLASSIFICATION	2.6759862690215684E-6	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999973240137311	WITHOUT_CLASSIFICATION	2.6759862690215684E-6	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999369239021	WITHOUT_CLASSIFICATION	6.307609781363205E-8	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999914155009055	WITHOUT_CLASSIFICATION	8.584499094520038E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999952971669702	WITHOUT_CLASSIFICATION	4.702833029803663E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999995755576387	WITHOUT_CLASSIFICATION	4.2444236127301237E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999994118328921	WITHOUT_CLASSIFICATION	5.881671078937042E-7	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999952971669702	WITHOUT_CLASSIFICATION	4.702833029803663E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999995755576387	WITHOUT_CLASSIFICATION	4.2444236127301237E-7	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987392354854	WITHOUT_CLASSIFICATION	1.2607645145078489E-6	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999997692240379	WITHOUT_CLASSIFICATION	2.3077596209136224E-7	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999899840555443	WITHOUT_CLASSIFICATION	1.0015944455654568E-5	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999999175263545	WITHOUT_CLASSIFICATION	8.247364557004547E-8	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9992076047835514	WITHOUT_CLASSIFICATION	7.923952164486239E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999934019616133	WITHOUT_CLASSIFICATION	6.5980383865617805E-6	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999999628064775	WITHOUT_CLASSIFICATION	3.7193522495923275E-7	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999990394419918	WITHOUT_CLASSIFICATION	9.605580083450347E-7	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9998484688842076	WITHOUT_CLASSIFICATION	1.515311157923143E-4	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999995880523	WITHOUT_CLASSIFICATION	4.119477492484618E-10	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999987181924215	WITHOUT_CLASSIFICATION	1.2818075784933096E-6	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999272045211	WITHOUT_CLASSIFICATION	7.279547895368493E-8	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999980821862	WITHOUT_CLASSIFICATION	1.9178138908259413E-9	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999850713345256	WITHOUT_CLASSIFICATION	1.4928665474271146E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999994118328921	WITHOUT_CLASSIFICATION	5.881671078937042E-7	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999699397139272	WITHOUT_CLASSIFICATION	3.0060286072787773E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999892204022318	WITHOUT_CLASSIFICATION	1.0779597768293741E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999892204022318	WITHOUT_CLASSIFICATION	1.0779597768293741E-5	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999932357280639	WITHOUT_CLASSIFICATION	6.764271936083168E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987392354854	WITHOUT_CLASSIFICATION	1.2607645145078489E-6	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999204041030787	WITHOUT_CLASSIFICATION	7.959589692139538E-5	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999523917615676	WITHOUT_CLASSIFICATION	4.7608238432383064E-4	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999087956060424	WITHOUT_CLASSIFICATION	9.120439395757815E-5	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999986896995448	WITHOUT_CLASSIFICATION	1.3103004551803247E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997155467955153	WITHOUT_CLASSIFICATION	2.844532044847125E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987392354854	WITHOUT_CLASSIFICATION	1.2607645145078489E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999986896995448	WITHOUT_CLASSIFICATION	1.3103004551803247E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997155467955153	WITHOUT_CLASSIFICATION	2.844532044847125E-4	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999998054917453	WITHOUT_CLASSIFICATION	1.945082547197634E-7	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999284507476	WITHOUT_CLASSIFICATION	7.15492523938982E-8	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999036277136585	WITHOUT_CLASSIFICATION	9.637228634151725E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987392354854	WITHOUT_CLASSIFICATION	1.2607645145078489E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987392354854	WITHOUT_CLASSIFICATION	1.2607645145078489E-6	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999993182619035	WITHOUT_CLASSIFICATION	6.817380965823288E-7	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.999999599930885	WITHOUT_CLASSIFICATION	4.0006911496104E-7	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999985083317625	WITHOUT_CLASSIFICATION	1.4916682374079066E-6	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999993994516551	WITHOUT_CLASSIFICATION	6.005483449467156E-7	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999985218053596	WITHOUT_CLASSIFICATION	1.4781946404490856E-6	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999774582198	WITHOUT_CLASSIFICATION	2.2541780210548962E-8	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999728405138	WITHOUT_CLASSIFICATION	2.7159486150107206E-8	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999915344708	WITHOUT_CLASSIFICATION	8.465529179145834E-9	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999996170888846	WITHOUT_CLASSIFICATION	3.8291111540912983E-7	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999970928365884	WITHOUT_CLASSIFICATION	2.9071634114817646E-6	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999518398973998	WITHOUT_CLASSIFICATION	4.8160102600271716E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999981510331595	WITHOUT_CLASSIFICATION	1.8489668404975173E-6	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999292490066	WITHOUT_CLASSIFICATION	7.075099346314242E-8	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999993492649918	WITHOUT_CLASSIFICATION	6.507350082351657E-7	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999778734295339	WITHOUT_CLASSIFICATION	2.2126570466171664E-5	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999956528923171	WITHOUT_CLASSIFICATION	4.347107682912497E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999990254493213	WITHOUT_CLASSIFICATION	9.745506787073777E-7	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999776897035911	WITHOUT_CLASSIFICATION	2.2310296408947796E-5	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9992034919907458	WITHOUT_CLASSIFICATION	7.965080092542278E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999853824182	WITHOUT_CLASSIFICATION	1.4617581706492446E-8	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999990527107051	WITHOUT_CLASSIFICATION	9.472892948268214E-7	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999856603158582	WITHOUT_CLASSIFICATION	1.4339684141717178E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999856603158582	WITHOUT_CLASSIFICATION	1.4339684141717178E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999990254493213	WITHOUT_CLASSIFICATION	9.745506787073777E-7	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999580207504254	WITHOUT_CLASSIFICATION	4.197924957461944E-5	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999893511581265	WITHOUT_CLASSIFICATION	1.0648841873472179E-5	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999756134077312	WITHOUT_CLASSIFICATION	2.438659226871408E-5	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999996038948276	WITHOUT_CLASSIFICATION	3.961051724546399E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999903440951609	WITHOUT_CLASSIFICATION	9.65590483908774E-6	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998241814385	WITHOUT_CLASSIFICATION	1.7581856155322987E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999616661021902	WITHOUT_CLASSIFICATION	3.833389780982243E-5	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999999746989053	WITHOUT_CLASSIFICATION	2.5301094643150316E-8	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999630534	WITHOUT_CLASSIFICATION	3.6946580395492476E-11	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994837314388	WITHOUT_CLASSIFICATION	5.162685612390107E-7	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999681526587	WITHOUT_CLASSIFICATION	3.184734139476325E-8	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999571942839212	WITHOUT_CLASSIFICATION	4.280571607888577E-5	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9993345161122416	WITHOUT_CLASSIFICATION	6.65483887758377E-4	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999755905391865	WITHOUT_CLASSIFICATION	2.4409460813432707E-5	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999992675103	WITHOUT_CLASSIFICATION	7.324897584674113E-10	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996075178854	WITHOUT_CLASSIFICATION	3.9248211459872087E-7	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999370613874334	WITHOUT_CLASSIFICATION	6.293861256666827E-5	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999993702622856	WITHOUT_CLASSIFICATION	6.297377144037572E-7	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999948024745591	WITHOUT_CLASSIFICATION	5.197525440806974E-6	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994131689643	WITHOUT_CLASSIFICATION	5.868310356652836E-7	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999981942649	WITHOUT_CLASSIFICATION	1.805735100076648E-6	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999997140165523	WITHOUT_CLASSIFICATION	2.8598344772308194E-7	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999997794157429	WITHOUT_CLASSIFICATION	2.2058425705568177E-7	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999676590305918	WITHOUT_CLASSIFICATION	3.2340969408208714E-5	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980553245847	WITHOUT_CLASSIFICATION	1.9446754153047346E-6	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988102073604	WITHOUT_CLASSIFICATION	1.189792639655139E-6	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998277651229	WITHOUT_CLASSIFICATION	1.7223487709888838E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988269265453	WITHOUT_CLASSIFICATION	1.1730734547818274E-6	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990624248819	WITHOUT_CLASSIFICATION	9.375751182126624E-7	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992324430889	WITHOUT_CLASSIFICATION	7.675569111691679E-7	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993663857691	WITHOUT_CLASSIFICATION	6.336142309228032E-7	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999998992380643	WITHOUT_CLASSIFICATION	1.0076193568751745E-7	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999198580889	WITHOUT_CLASSIFICATION	8.014191110243312E-8	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995552876333	WITHOUT_CLASSIFICATION	4.447123667982252E-7	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999054941126	WITHOUT_CLASSIFICATION	9.450588748005359E-8	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997945465511	WITHOUT_CLASSIFICATION	2.05453448905009E-7	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991686017982	WITHOUT_CLASSIFICATION	8.313982019150876E-7	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978634186515	WITHOUT_CLASSIFICATION	2.1365813484386387E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997920351058	WITHOUT_CLASSIFICATION	2.07964894296738E-7	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999053263223	WITHOUT_CLASSIFICATION	9.467367760102374E-8	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980858780745	WITHOUT_CLASSIFICATION	1.9141219254391004E-6	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999874732473675	WITHOUT_CLASSIFICATION	1.2526752632491366E-5	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953410519805	WITHOUT_CLASSIFICATION	4.658948019547092E-6	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.8970894544993149	WITHOUT_CLASSIFICATION	0.10291054550068514	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999929190715857	WITHOUT_CLASSIFICATION	7.080928414194988E-6	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999999999996759	WITHOUT_CLASSIFICATION	3.2410106227187664E-12	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998182310653	WITHOUT_CLASSIFICATION	1.8176893465138908E-7	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9999995946423086	WITHOUT_CLASSIFICATION	4.053576913121413E-7	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999995044974617	WITHOUT_CLASSIFICATION	4.955025382974491E-7	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999996487185362	WITHOUT_CLASSIFICATION	3.5128146378628874E-7	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999998656958438	WITHOUT_CLASSIFICATION	1.343041562672836E-7	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999987385800598	WITHOUT_CLASSIFICATION	1.261419940108765E-6	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999993326436718	WITHOUT_CLASSIFICATION	6.673563281548798E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994837314388	WITHOUT_CLASSIFICATION	5.162685612390107E-7	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999996605200664	WITHOUT_CLASSIFICATION	3.3947993353594955E-7	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999989226118243	WITHOUT_CLASSIFICATION	1.0773881756493878E-6	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999997333262126	WITHOUT_CLASSIFICATION	2.666737873872111E-7	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9964654103247522	WITHOUT_CLASSIFICATION	0.003534589675247834	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999765139594075	WITHOUT_CLASSIFICATION	2.3486040592585593E-5	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999974360992185	WITHOUT_CLASSIFICATION	2.563900781514336E-6	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999660095186836	WITHOUT_CLASSIFICATION	3.399048131643093E-5	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999112076719	WITHOUT_CLASSIFICATION	8.879232808843147E-7	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995261429712	WITHOUT_CLASSIFICATION	4.738570288094503E-6	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993812448813	WITHOUT_CLASSIFICATION	6.187551187255977E-7	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996252145785	WITHOUT_CLASSIFICATION	3.747854214916994E-6	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999837027391208	WITHOUT_CLASSIFICATION	1.6297260879126868E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999995015285712	WITHOUT_CLASSIFICATION	4.98471428763629E-7	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999980061112711	WITHOUT_CLASSIFICATION	1.993888728824151E-6	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999917407510872	WITHOUT_CLASSIFICATION	8.259248912722265E-6	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999233336542	WITHOUT_CLASSIFICATION	7.666634586592309E-8	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999996777804907	WITHOUT_CLASSIFICATION	3.2221950937182507E-7	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999926750956367	WITHOUT_CLASSIFICATION	7.324904363384581E-6	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999983493710244	WITHOUT_CLASSIFICATION	1.6506289756474638E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999977744065	WITHOUT_CLASSIFICATION	2.2255934555420917E-9	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999926403486767	WITHOUT_CLASSIFICATION	7.359651323243506E-6	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999995239320341	WITHOUT_CLASSIFICATION	4.760679660075792E-7	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999991125448184	WITHOUT_CLASSIFICATION	8.874551816894212E-7	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999946231168031	WITHOUT_CLASSIFICATION	5.376883196939794E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994837314388	WITHOUT_CLASSIFICATION	5.162685612390107E-7	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998182310653	WITHOUT_CLASSIFICATION	1.8176893465138908E-7	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999327325826	WITHOUT_CLASSIFICATION	6.726741740005632E-5	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999753458381	WITHOUT_CLASSIFICATION	2.465416188116454E-8	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999988766605766	WITHOUT_CLASSIFICATION	1.1233394233069157E-6	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999316875951282	WITHOUT_CLASSIFICATION	6.831240487186016E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999937556572916	WITHOUT_CLASSIFICATION	6.244342708457914E-6	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.999999940570543	WITHOUT_CLASSIFICATION	5.942945707143813E-8	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999240930201475	WITHOUT_CLASSIFICATION	7.590697985247581E-5	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9995645378759521	WITHOUT_CLASSIFICATION	4.3546212404788087E-4	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999989195389598	WITHOUT_CLASSIFICATION	1.0804610402114122E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999926771247426	WITHOUT_CLASSIFICATION	7.322875257380186E-6	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999885661126531	WITHOUT_CLASSIFICATION	1.1433887346906293E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999961205997112	WITHOUT_CLASSIFICATION	3.879400288821881E-6	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999370282372	WITHOUT_CLASSIFICATION	6.297176273943722E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994837314388	WITHOUT_CLASSIFICATION	5.162685612390107E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994837314388	WITHOUT_CLASSIFICATION	5.162685612390107E-7	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999999698025879	WITHOUT_CLASSIFICATION	3.019741210402635E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999937644152438	WITHOUT_CLASSIFICATION	6.2355847561930806E-6	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999972423876408	WITHOUT_CLASSIFICATION	2.7576123591170618E-6	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999986521664795	WITHOUT_CLASSIFICATION	1.3478335204344833E-6	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999966846772655	WITHOUT_CLASSIFICATION	3.315322734498524E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.999999991133103	WITHOUT_CLASSIFICATION	8.866896880213055E-9	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999998855448788	WITHOUT_CLASSIFICATION	1.1445512117308194E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994837314388	WITHOUT_CLASSIFICATION	5.162685612390107E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999907503806	WITHOUT_CLASSIFICATION	9.249619376103546E-9	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999990890109955	WITHOUT_CLASSIFICATION	9.109890045556797E-7	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999912718916862	WITHOUT_CLASSIFICATION	8.728108313853605E-6	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999973485853243	WITHOUT_CLASSIFICATION	2.6514146757062096E-6	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999995170628722	WITHOUT_CLASSIFICATION	4.82937127800693E-6	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999932852643	WITHOUT_CLASSIFICATION	6.714735608437773E-9	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934878483224169	WITHOUT_CLASSIFICATION	0.006512151677583079	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999989471909356	WITHOUT_CLASSIFICATION	1.0528090644032488E-6	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999999913801787	WITHOUT_CLASSIFICATION	8.619821298215814E-8	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999952087507868	WITHOUT_CLASSIFICATION	4.791249213236414E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998182310653	WITHOUT_CLASSIFICATION	1.8176893465138908E-7	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9991680743399897	WITHOUT_CLASSIFICATION	8.319256600102284E-4	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999302125568	WITHOUT_CLASSIFICATION	6.978744315391507E-8	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997893771827311	WITHOUT_CLASSIFICATION	2.1062281726882804E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998182310653	WITHOUT_CLASSIFICATION	1.8176893465138908E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999994436695441	WITHOUT_CLASSIFICATION	5.563304558960031E-7	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999907503806	WITHOUT_CLASSIFICATION	9.249619376103546E-9	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9983542153694678	WITHOUT_CLASSIFICATION	0.0016457846305321317	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994837314388	WITHOUT_CLASSIFICATION	5.162685612390107E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998305203516966	WITHOUT_CLASSIFICATION	1.694796483034627E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994837314388	WITHOUT_CLASSIFICATION	5.162685612390107E-7	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999762463286	WITHOUT_CLASSIFICATION	2.375367143738324E-8	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999926771247426	WITHOUT_CLASSIFICATION	7.322875257380186E-6	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999885661126531	WITHOUT_CLASSIFICATION	1.1433887346906293E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999961205997112	WITHOUT_CLASSIFICATION	3.879400288821881E-6	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999942285773	WITHOUT_CLASSIFICATION	5.771422668081465E-9	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999994884307009	WITHOUT_CLASSIFICATION	5.115692992109562E-7	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999997875618032	WITHOUT_CLASSIFICATION	2.1243819678170668E-7	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999972250187502	WITHOUT_CLASSIFICATION	2.774981249827633E-6	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999602646972	WITHOUT_CLASSIFICATION	3.97353029073062E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994837314388	WITHOUT_CLASSIFICATION	5.162685612390107E-7	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998182310653	WITHOUT_CLASSIFICATION	1.8176893465138908E-7	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999370282372	WITHOUT_CLASSIFICATION	6.297176273943722E-8	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999999698025879	WITHOUT_CLASSIFICATION	3.019741210402635E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999431867942	WITHOUT_CLASSIFICATION	5.681320588422187E-8	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924860824274	WITHOUT_CLASSIFICATION	7.513917572601088E-6	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999481561843	WITHOUT_CLASSIFICATION	5.184381575084721E-8	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999872626633	WITHOUT_CLASSIFICATION	1.2737336726794268E-8	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999997640117956	WITHOUT_CLASSIFICATION	2.3598820448036489E-7	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999994416428498	WITHOUT_CLASSIFICATION	5.583571501695098E-7	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980858780745	WITHOUT_CLASSIFICATION	1.9141219254391004E-6	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.999983288416091	WITHOUT_CLASSIFICATION	1.671158390902672E-5	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999999322640276	WITHOUT_CLASSIFICATION	6.773597240859486E-8	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999999150510814	WITHOUT_CLASSIFICATION	8.494891855595227E-8	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999547239823	WITHOUT_CLASSIFICATION	4.5276017780948016E-8	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999967676678	WITHOUT_CLASSIFICATION	3.232332159652551E-9	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988269265453	WITHOUT_CLASSIFICATION	1.1730734547818274E-6	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990624248819	WITHOUT_CLASSIFICATION	9.375751182126624E-7	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999054941126	WITHOUT_CLASSIFICATION	9.450588748005359E-8	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999967676678	WITHOUT_CLASSIFICATION	3.232332159652551E-9	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999676661716	WITHOUT_CLASSIFICATION	3.233382839867867E-8	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999996919181373	WITHOUT_CLASSIFICATION	3.0808186270064873E-7	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923010364802	WITHOUT_CLASSIFICATION	7.698963519761989E-6	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935584473273	WITHOUT_CLASSIFICATION	6.4415526726229425E-6	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.999942466850899	WITHOUT_CLASSIFICATION	5.7533149100972894E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994837314388	WITHOUT_CLASSIFICATION	5.162685612390107E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994837314388	WITHOUT_CLASSIFICATION	5.162685612390107E-7	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999483041800937	WITHOUT_CLASSIFICATION	5.1695819906254603E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997945465511	WITHOUT_CLASSIFICATION	2.05453448905009E-7	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997920351058	WITHOUT_CLASSIFICATION	2.07964894296738E-7	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999977744065	WITHOUT_CLASSIFICATION	2.2255934555420917E-9	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999997970387402	WITHOUT_CLASSIFICATION	2.0296125974898287E-7	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999988185105283	WITHOUT_CLASSIFICATION	1.1814894716475127E-6	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999723398078	WITHOUT_CLASSIFICATION	2.766019222959854E-8	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999701481797	WITHOUT_CLASSIFICATION	2.9851820229987865E-8	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999595530658	WITHOUT_CLASSIFICATION	4.0446934263742293E-8	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999846525488	WITHOUT_CLASSIFICATION	1.5347451189691245E-8	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999958792451956	WITHOUT_CLASSIFICATION	4.120754804290217E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999978714557542	WITHOUT_CLASSIFICATION	2.1285442458087316E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999630534	WITHOUT_CLASSIFICATION	3.6946580395492476E-11	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999946889296655	WITHOUT_CLASSIFICATION	5.3110703345133266E-6	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999858731982	WITHOUT_CLASSIFICATION	1.412680186289218E-8	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999961537570142	WITHOUT_CLASSIFICATION	3.846242985760146E-6	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999995781185425	WITHOUT_CLASSIFICATION	4.218814576411073E-7	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999537041909	WITHOUT_CLASSIFICATION	4.6295809006792736E-8	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999986816627067	WITHOUT_CLASSIFICATION	1.3183372932468466E-6	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991984951155	WITHOUT_CLASSIFICATION	8.015048844781255E-7	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999985405495306	WITHOUT_CLASSIFICATION	1.459450469410315E-5	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997239511383	WITHOUT_CLASSIFICATION	2.76048861566818E-7	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.99999879517183	WITHOUT_CLASSIFICATION	1.2048281699019854E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9997265847129712	WITHOUT_CLASSIFICATION	2.7341528702881E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999987950423821	WITHOUT_CLASSIFICATION	1.204957617855794E-6	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995631709031	WITHOUT_CLASSIFICATION	4.3682909695271474E-7	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994389116084	WITHOUT_CLASSIFICATION	5.610883915629742E-7	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992739644201	WITHOUT_CLASSIFICATION	7.260355799916521E-7	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999997523121379	WITHOUT_CLASSIFICATION	2.4768786206921714E-7	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999999860514266	WITHOUT_CLASSIFICATION	1.3948573500855954E-8	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991662106437	WITHOUT_CLASSIFICATION	8.337893562576214E-7	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999092293483504	WITHOUT_CLASSIFICATION	9.077065164964313E-5	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999970452621	WITHOUT_CLASSIFICATION	2.9547379079509098E-8	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987432573546	WITHOUT_CLASSIFICATION	1.25674264540088E-6	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999999492351559	WITHOUT_CLASSIFICATION	5.076484413395152E-8	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999994755114793	WITHOUT_CLASSIFICATION	5.244885207871675E-7	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999981701776387	WITHOUT_CLASSIFICATION	1.8298223613253582E-6	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.999996095435255	WITHOUT_CLASSIFICATION	3.904564745038751E-6	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999938663600113	WITHOUT_CLASSIFICATION	6.133639988688934E-6	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999971028714455	WITHOUT_CLASSIFICATION	2.897128554414112E-6	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999997249187907	WITHOUT_CLASSIFICATION	2.750812091691969E-7	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999979035420897	WITHOUT_CLASSIFICATION	2.0964579102180667E-6	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999999037631387	WITHOUT_CLASSIFICATION	9.623686125951556E-8	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999181688662	WITHOUT_CLASSIFICATION	8.183113369285419E-8	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9998143927481956	WITHOUT_CLASSIFICATION	1.856072518044543E-4	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999989143781021	WITHOUT_CLASSIFICATION	1.0856218979308133E-6	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999943086721	WITHOUT_CLASSIFICATION	5.691327796807952E-9	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999818543314	WITHOUT_CLASSIFICATION	1.8145668563055225E-8	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999995987804335	WITHOUT_CLASSIFICATION	4.012195664287587E-7	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999783902045	WITHOUT_CLASSIFICATION	2.160979550759491E-8	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999999967273146	WITHOUT_CLASSIFICATION	3.2726853988427464E-8	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999996424654881	WITHOUT_CLASSIFICATION	3.575345119459878E-7	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999977555872	WITHOUT_CLASSIFICATION	2.2444126841167435E-9	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999999869324164	WITHOUT_CLASSIFICATION	1.306758346969457E-8	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999996007137213	WITHOUT_CLASSIFICATION	3.992862786423459E-7	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9985448906374829	WITHOUT_CLASSIFICATION	0.0014551093625171435	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.999999897080065	WITHOUT_CLASSIFICATION	1.0291993503420066E-7	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999804622304701	WITHOUT_CLASSIFICATION	1.953776952992148E-5	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999893312024	WITHOUT_CLASSIFICATION	1.0668797537225046E-8	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999062706288	WITHOUT_CLASSIFICATION	9.372937115984493E-8	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999997475688011	WITHOUT_CLASSIFICATION	2.5243119894173483E-7	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999986497208482	WITHOUT_CLASSIFICATION	1.350279151861777E-6	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999988238857581	WITHOUT_CLASSIFICATION	1.1761142418023595E-6	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999999220676883	WITHOUT_CLASSIFICATION	7.793231169742372E-7	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999993351741945	WITHOUT_CLASSIFICATION	6.648258055580279E-7	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.99999979337458	WITHOUT_CLASSIFICATION	2.066254199875742E-7	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999956326518408	WITHOUT_CLASSIFICATION	4.367348159263124E-6	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999793763283265	WITHOUT_CLASSIFICATION	2.062367167354231E-5	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.999842513314775	WITHOUT_CLASSIFICATION	1.5748668522508634E-4	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999988643563362	WITHOUT_CLASSIFICATION	1.1356436637861347E-6	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.99998973987658	WITHOUT_CLASSIFICATION	1.026012341996801E-5	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999977977165061	WITHOUT_CLASSIFICATION	2.202283493848448E-6	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999991251758957	WITHOUT_CLASSIFICATION	8.74824104282069E-7	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999661247090044	WITHOUT_CLASSIFICATION	3.387529099569809E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999991135322663	WITHOUT_CLASSIFICATION	8.864677336986172E-7	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9998530746970568	WITHOUT_CLASSIFICATION	1.4692530294317432E-4	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9996706804838307	WITHOUT_CLASSIFICATION	3.293195161692846E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.999996553123381	WITHOUT_CLASSIFICATION	3.4468766190705964E-6	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9926941909637973	WITHOUT_CLASSIFICATION	0.007305809036202633	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999982789397	WITHOUT_CLASSIFICATION	1.7210603708235293E-9	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9995276521892918	WITHOUT_CLASSIFICATION	4.723478107081987E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999958369319077	WITHOUT_CLASSIFICATION	4.163068092241702E-6	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999978859366924	WITHOUT_CLASSIFICATION	2.11406330759611E-6	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999985776433656	WITHOUT_CLASSIFICATION	1.4223566343804628E-6	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999519293612	WITHOUT_CLASSIFICATION	4.8070638772174814E-8	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999915193433488	WITHOUT_CLASSIFICATION	8.480656651138394E-6	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999719645356921	WITHOUT_CLASSIFICATION	2.803546430794202E-5	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999909175887483	WITHOUT_CLASSIFICATION	9.08241125175777E-6	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999966571457187	WITHOUT_CLASSIFICATION	3.342854281364649E-6	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999996923339337	WITHOUT_CLASSIFICATION	3.0766606629409638E-6	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999791342129	WITHOUT_CLASSIFICATION	2.0865787137199328E-8	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999991044978	WITHOUT_CLASSIFICATION	8.955022065320886E-10	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.999999523871928	WITHOUT_CLASSIFICATION	4.761280719874283E-7	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999980328499906	WITHOUT_CLASSIFICATION	1.9671500093908845E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999214118298	WITHOUT_CLASSIFICATION	7.858817024459077E-8	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999999335121579	WITHOUT_CLASSIFICATION	6.648784206228863E-8	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999996685474078	WITHOUT_CLASSIFICATION	3.314525921775364E-7	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999891211204712	WITHOUT_CLASSIFICATION	1.0878879528750896E-5	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9995267096961928	WITHOUT_CLASSIFICATION	4.732903038071941E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999996360764288	WITHOUT_CLASSIFICATION	3.639235711702206E-7	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999868585866415	WITHOUT_CLASSIFICATION	1.3141413358556373E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999994464887145	WITHOUT_CLASSIFICATION	5.535112854875236E-7	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999619546864	WITHOUT_CLASSIFICATION	3.8045313608397956E-8	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.99940010090884	WITHOUT_CLASSIFICATION	5.99899091159909E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999761148145783	WITHOUT_CLASSIFICATION	2.3885185421824365E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999999029576863	WITHOUT_CLASSIFICATION	9.704231381467219E-8	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.99940010090884	WITHOUT_CLASSIFICATION	5.99899091159909E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999985549548	WITHOUT_CLASSIFICATION	1.4450452004622376E-9	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999998122833594	WITHOUT_CLASSIFICATION	1.877166405099382E-7	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999999139521486	WITHOUT_CLASSIFICATION	8.604785138851749E-8	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999827262329418	WITHOUT_CLASSIFICATION	1.727376705824081E-5	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999997932436762	WITHOUT_CLASSIFICATION	2.0675632388535445E-7	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.999999998709268	WITHOUT_CLASSIFICATION	1.2907319102536336E-9	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.999997238035305	WITHOUT_CLASSIFICATION	2.7619646949807892E-6	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999999986913763	WITHOUT_CLASSIFICATION	1.308623707927336E-8	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999974579963814	WITHOUT_CLASSIFICATION	2.5420036185345538E-6	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999999741981882	WITHOUT_CLASSIFICATION	2.5801811801618826E-7	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999983469299322	WITHOUT_CLASSIFICATION	1.6530700678069095E-6	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999994046977553	WITHOUT_CLASSIFICATION	5.953022447343455E-7	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999640068282	WITHOUT_CLASSIFICATION	3.5993171738658524E-8	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999999999511687	WITHOUT_CLASSIFICATION	4.883130283368038E-10	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999345876492	WITHOUT_CLASSIFICATION	6.541235081417326E-7	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999981959512744	WITHOUT_CLASSIFICATION	1.80404872559044E-6	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999794401889768	WITHOUT_CLASSIFICATION	2.055981102324195E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999794401889768	WITHOUT_CLASSIFICATION	2.055981102324195E-5	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999990443700808	WITHOUT_CLASSIFICATION	9.556299192648596E-7	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9999482399352829	WITHOUT_CLASSIFICATION	5.1760064717114886E-5	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.999954396029619	WITHOUT_CLASSIFICATION	4.560397038108802E-5	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999940437430777	WITHOUT_CLASSIFICATION	5.956256922329692E-6	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999995127612032	WITHOUT_CLASSIFICATION	4.87238796699813E-7	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9030035111278497	WITHOUT_CLASSIFICATION	0.09699648887215027	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9999279053322015	WITHOUT_CLASSIFICATION	7.209466779836454E-5	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999664172561	WITHOUT_CLASSIFICATION	3.3582743902514245E-8	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999995456735368	WITHOUT_CLASSIFICATION	4.543264632640818E-7	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999878831905973	WITHOUT_CLASSIFICATION	1.2116809402700217E-4	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999685933785404	WITHOUT_CLASSIFICATION	3.140662145958454E-5	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999995298197	WITHOUT_CLASSIFICATION	4.701803796281551E-10	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999030837936	WITHOUT_CLASSIFICATION	9.691620646849061E-8	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999985244793325	WITHOUT_CLASSIFICATION	1.4755206675279465E-6	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999888026907	WITHOUT_CLASSIFICATION	1.1197309251624992E-8	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999986816627067	WITHOUT_CLASSIFICATION	1.3183372932468466E-6	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999996699846759	WITHOUT_CLASSIFICATION	3.300153241434897E-7	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999997293345865	WITHOUT_CLASSIFICATION	2.706654136100119E-7	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9994775646787596	WITHOUT_CLASSIFICATION	5.224353212403704E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999991477108715	WITHOUT_CLASSIFICATION	8.522891283931546E-7	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999995410486717	WITHOUT_CLASSIFICATION	4.5895132820917925E-7	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9999960631601333	WITHOUT_CLASSIFICATION	3.936839866570471E-6	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999926775757	WITHOUT_CLASSIFICATION	7.322424354389432E-9	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999448153084	WITHOUT_CLASSIFICATION	5.518469151450127E-8	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999842056039	WITHOUT_CLASSIFICATION	1.5794396119294376E-8	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999563324224	WITHOUT_CLASSIFICATION	4.366757746215718E-8	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.999999999794408	WITHOUT_CLASSIFICATION	2.055919947143456E-10	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999937393711751	WITHOUT_CLASSIFICATION	6.260628824966976E-6	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999993313191731	WITHOUT_CLASSIFICATION	6.686808270030622E-7	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999946682259168	WITHOUT_CLASSIFICATION	5.331774083176225E-6	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999978875558461	WITHOUT_CLASSIFICATION	2.1124441538116103E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.99999925618847	WITHOUT_CLASSIFICATION	7.438115300038369E-7	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9999566123360694	WITHOUT_CLASSIFICATION	4.338766393056174E-5	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999981202801006	WITHOUT_CLASSIFICATION	1.8797198993648032E-6	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999977563942201	WITHOUT_CLASSIFICATION	2.243605779969812E-6	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999952505488393	WITHOUT_CLASSIFICATION	4.7494511606140666E-6	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999982024662669	WITHOUT_CLASSIFICATION	1.7975337329788238E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999897583830637	WITHOUT_CLASSIFICATION	1.024161693623939E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999998181065581	WITHOUT_CLASSIFICATION	1.818934418347193E-7	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999299442372908	WITHOUT_CLASSIFICATION	7.005576270927586E-5	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999991183622148	WITHOUT_CLASSIFICATION	8.816377852285515E-7	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999998935440653	WITHOUT_CLASSIFICATION	1.0645593472521184E-7	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9958083619902631	WITHOUT_CLASSIFICATION	0.004191638009736888	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998079544234	WITHOUT_CLASSIFICATION	1.9204557657738228E-7	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999942766618225	WITHOUT_CLASSIFICATION	5.723338177431989E-6	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999997256670141	WITHOUT_CLASSIFICATION	2.743329858699823E-7	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953535367461	WITHOUT_CLASSIFICATION	4.6464632539158365E-6	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948278602319	WITHOUT_CLASSIFICATION	5.17213976818928E-6	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976608416713	WITHOUT_CLASSIFICATION	2.339158328763263E-6	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9997899598652678	WITHOUT_CLASSIFICATION	2.1004013473210076E-4	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999960364713186	WITHOUT_CLASSIFICATION	3.963528681424888E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999978714557542	WITHOUT_CLASSIFICATION	2.1285442458087316E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999978714557542	WITHOUT_CLASSIFICATION	2.1285442458087316E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997637048044	WITHOUT_CLASSIFICATION	2.3629519569949575E-7	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999993355050467	WITHOUT_CLASSIFICATION	6.644949532801784E-7	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9987143607220211	WITHOUT_CLASSIFICATION	0.001285639277978785	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998028560457446	WITHOUT_CLASSIFICATION	1.9714395425552133E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9987143607220211	WITHOUT_CLASSIFICATION	0.001285639277978785	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999983054043499	WITHOUT_CLASSIFICATION	1.694595650169064E-6	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999999618711405	WITHOUT_CLASSIFICATION	3.8128859498959836E-7	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999998900507154	WITHOUT_CLASSIFICATION	1.0994928453163892E-7	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999997838120744	WITHOUT_CLASSIFICATION	2.1618792549874083E-7	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999998895403382	WITHOUT_CLASSIFICATION	1.1045966170909048E-7	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999998495571298	WITHOUT_CLASSIFICATION	1.5044287018726514E-7	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999117992946	WITHOUT_CLASSIFICATION	8.820070541737386E-8	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999884203697874	WITHOUT_CLASSIFICATION	1.1579630212542298E-5	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999553926847	WITHOUT_CLASSIFICATION	4.46073153018769E-8	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999994345593588	WITHOUT_CLASSIFICATION	5.654406411481433E-7	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999986638193877	WITHOUT_CLASSIFICATION	1.336180612299077E-6	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999442927757	WITHOUT_CLASSIFICATION	5.570722424779382E-8	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999985176012398	WITHOUT_CLASSIFICATION	1.4823987602476393E-6	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9995939764726139	WITHOUT_CLASSIFICATION	4.060235273860829E-4	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999112192298	WITHOUT_CLASSIFICATION	8.878077023506978E-8	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999043804496	WITHOUT_CLASSIFICATION	9.561955035142554E-8	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999966335095151	WITHOUT_CLASSIFICATION	3.366490485058198E-6	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999966335095151	WITHOUT_CLASSIFICATION	3.366490485058198E-6	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999974687462366	WITHOUT_CLASSIFICATION	2.531253763418626E-6	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999997242386999	WITHOUT_CLASSIFICATION	2.7576130012584827E-7	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999981182619446	WITHOUT_CLASSIFICATION	1.8817380552910733E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999854467035	WITHOUT_CLASSIFICATION	1.45532963445188E-8	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999996069124845	WITHOUT_CLASSIFICATION	3.9308751556716285E-7	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999999018704871	WITHOUT_CLASSIFICATION	9.81295128979612E-7	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.999994946745892	WITHOUT_CLASSIFICATION	5.053254107991481E-6	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999993621786882	WITHOUT_CLASSIFICATION	6.378213118759002E-7	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.999999963949066	WITHOUT_CLASSIFICATION	3.605093391870089E-8	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999995604825327	WITHOUT_CLASSIFICATION	4.3951746734115796E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999996913514424	WITHOUT_CLASSIFICATION	3.0864855763920257E-7	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999984923447	WITHOUT_CLASSIFICATION	1.5076554046437176E-9	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999630193241	WITHOUT_CLASSIFICATION	3.698067587813701E-8	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999996158354635	WITHOUT_CLASSIFICATION	3.8416453661099113E-7	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999998399884019	WITHOUT_CLASSIFICATION	1.6001159818116443E-7	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999112209689	WITHOUT_CLASSIFICATION	8.87790310600643E-8	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999997317640857	WITHOUT_CLASSIFICATION	2.6823591430556547E-7	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999998373556351	WITHOUT_CLASSIFICATION	1.6264436492681824E-7	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999983988589003	WITHOUT_CLASSIFICATION	1.6011410996336574E-6	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999899568375	WITHOUT_CLASSIFICATION	1.0043162564942754E-8	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999987684859916	WITHOUT_CLASSIFICATION	1.2315140084206575E-6	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999720006988	WITHOUT_CLASSIFICATION	2.7999301117015532E-8	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999998120032147	WITHOUT_CLASSIFICATION	1.8799678529219024E-7	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.999999996207714	WITHOUT_CLASSIFICATION	3.792286019158913E-9	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9999986491388909	WITHOUT_CLASSIFICATION	1.350861109067633E-6	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999990611911856	WITHOUT_CLASSIFICATION	9.388088144822166E-7	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999951621732672	WITHOUT_CLASSIFICATION	4.837826732774952E-6	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999521902704712	WITHOUT_CLASSIFICATION	4.780972952869254E-5	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999966735179262	WITHOUT_CLASSIFICATION	3.3264820737188022E-6	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999756917040695	WITHOUT_CLASSIFICATION	2.4308295930459274E-5	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999993869311729	WITHOUT_CLASSIFICATION	6.130688270719294E-7	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999999116660343	WITHOUT_CLASSIFICATION	8.83339656089507E-8	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999508786465064	WITHOUT_CLASSIFICATION	4.912135349355921E-5	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999996174139233	WITHOUT_CLASSIFICATION	3.8258607670910326E-7	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999976111939003	WITHOUT_CLASSIFICATION	2.388806099701446E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999766110595	WITHOUT_CLASSIFICATION	2.3388940493207035E-8	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999993531341217	WITHOUT_CLASSIFICATION	6.468658783579271E-7	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999981694808902	WITHOUT_CLASSIFICATION	1.8305191097890043E-6	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999843085370886	WITHOUT_CLASSIFICATION	1.569146291140858E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999966555532924	WITHOUT_CLASSIFICATION	3.3444467075578794E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999910336180361	WITHOUT_CLASSIFICATION	8.966381963860525E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984793843932	WITHOUT_CLASSIFICATION	1.5206156068015034E-6	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.999998462579404	WITHOUT_CLASSIFICATION	1.5374205961349623E-6	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9997922529077646	WITHOUT_CLASSIFICATION	2.077470922353348E-4	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999995768265335	WITHOUT_CLASSIFICATION	4.231734665247027E-7	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999693000034423	WITHOUT_CLASSIFICATION	3.0699996557713126E-5	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9842479037779783	WITHOUT_CLASSIFICATION	0.015752096222021617	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999980446672	WITHOUT_CLASSIFICATION	1.955332769583793E-9	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999997665175545	WITHOUT_CLASSIFICATION	2.3348244556863042E-7	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999999362683123	WITHOUT_CLASSIFICATION	6.373168771364955E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989763119546	WITHOUT_CLASSIFICATION	1.0236880454184292E-6	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999999991409604	WITHOUT_CLASSIFICATION	8.590395960299721E-9	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9992825845281039	WITHOUT_CLASSIFICATION	7.174154718960303E-4	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999999468992078	WITHOUT_CLASSIFICATION	5.310079226372348E-8	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.999998772798699	WITHOUT_CLASSIFICATION	1.227201300975265E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999994436695441	WITHOUT_CLASSIFICATION	5.563304558960031E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999994436695441	WITHOUT_CLASSIFICATION	5.563304558960031E-7	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999998303612146	WITHOUT_CLASSIFICATION	1.696387853614981E-7	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999878320445813	WITHOUT_CLASSIFICATION	1.2167955418764732E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999959591806943	WITHOUT_CLASSIFICATION	4.0408193056466635E-6	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999696335703547	WITHOUT_CLASSIFICATION	3.0366429645222476E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999997520975957	WITHOUT_CLASSIFICATION	2.4790240428711307E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999987415564892	WITHOUT_CLASSIFICATION	1.2584435107991925E-6	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999995791703751	WITHOUT_CLASSIFICATION	4.208296248929699E-7	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999999845754721	WITHOUT_CLASSIFICATION	1.5424527837322048E-8	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999968516143066	WITHOUT_CLASSIFICATION	3.1483856933075605E-6	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999752719365	WITHOUT_CLASSIFICATION	2.4728063403050194E-8	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999917752045993	WITHOUT_CLASSIFICATION	8.224795400795978E-6	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999413871095146	WITHOUT_CLASSIFICATION	5.8612890485326435E-5	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999992851501984	WITHOUT_CLASSIFICATION	7.148498014921198E-7	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999790731436	WITHOUT_CLASSIFICATION	2.092685643193423E-8	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.99999963103189	WITHOUT_CLASSIFICATION	3.689681099912955E-7	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998900649846465	WITHOUT_CLASSIFICATION	1.0993501535357796E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999985880620607	WITHOUT_CLASSIFICATION	1.4119379392896885E-6	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9999985570867101	WITHOUT_CLASSIFICATION	1.4429132898653136E-6	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9998776390872601	WITHOUT_CLASSIFICATION	1.2236091273982452E-4	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999806155990032	WITHOUT_CLASSIFICATION	1.9384400996799946E-5	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999984516882	WITHOUT_CLASSIFICATION	1.5483118271260405E-9	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999920664424425	WITHOUT_CLASSIFICATION	7.93355755748753E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999778478382283	WITHOUT_CLASSIFICATION	2.215216177168045E-5	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999574258600498	WITHOUT_CLASSIFICATION	4.257413995020139E-4	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9993174050592369	WITHOUT_CLASSIFICATION	6.825949407630667E-4	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9846938460945018	WITHOUT_CLASSIFICATION	0.015306153905498117	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999997895269595	WITHOUT_CLASSIFICATION	2.104730404999181E-6	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996960160913767	WITHOUT_CLASSIFICATION	3.039839086232011E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999994396359329	WITHOUT_CLASSIFICATION	5.603640670669525E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999778478382283	WITHOUT_CLASSIFICATION	2.215216177168045E-5	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999972295353485	WITHOUT_CLASSIFICATION	2.770464651378091E-6	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999810666798689	WITHOUT_CLASSIFICATION	1.8933320131112594E-5	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9999866257018641	WITHOUT_CLASSIFICATION	1.337429813594225E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999969760357332	WITHOUT_CLASSIFICATION	3.023964266706046E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999966339759	WITHOUT_CLASSIFICATION	3.3660240710974657E-9	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999999474602873	WITHOUT_CLASSIFICATION	5.253971263400727E-8	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999985265805307	WITHOUT_CLASSIFICATION	1.4734194692405567E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998065411363	WITHOUT_CLASSIFICATION	1.9345886366484685E-7	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999998066435404	WITHOUT_CLASSIFICATION	1.93356459730295E-7	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999969760357332	WITHOUT_CLASSIFICATION	3.023964266706046E-6	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999883215819	WITHOUT_CLASSIFICATION	1.167841816965017E-8	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998001926155	WITHOUT_CLASSIFICATION	1.99807384515174E-7	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998790392936473	WITHOUT_CLASSIFICATION	1.2096070635277958E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999930170613115	WITHOUT_CLASSIFICATION	6.982938688525706E-6	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999120452483	WITHOUT_CLASSIFICATION	8.795475174530588E-8	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999996913514424	WITHOUT_CLASSIFICATION	3.0864855763920257E-7	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999688204203	WITHOUT_CLASSIFICATION	3.117957965073603E-8	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999997909950048	WITHOUT_CLASSIFICATION	2.090049952629668E-7	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999998554476227	WITHOUT_CLASSIFICATION	1.4455237731616497E-7	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9997454144715824	WITHOUT_CLASSIFICATION	2.5458552841768015E-4	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999823697732	WITHOUT_CLASSIFICATION	1.7630226878290623E-8	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999986958915165	WITHOUT_CLASSIFICATION	1.304108483590218E-6	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999966843625	WITHOUT_CLASSIFICATION	3.315637491580649E-9	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999999829481665	WITHOUT_CLASSIFICATION	1.7051833491099668E-7	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999999199035184	WITHOUT_CLASSIFICATION	8.009648159370637E-8	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999995514823723	WITHOUT_CLASSIFICATION	4.4851762766643273E-7	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999840808352737	WITHOUT_CLASSIFICATION	1.5919164726284386E-5	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999955909671	WITHOUT_CLASSIFICATION	4.409032923581561E-9	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999998320508184	WITHOUT_CLASSIFICATION	1.679491816156982E-7	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999798854892495	WITHOUT_CLASSIFICATION	2.0114510750506112E-5	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999987583535	WITHOUT_CLASSIFICATION	1.2416464474601277E-9	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999993705642745	WITHOUT_CLASSIFICATION	6.294357255023192E-7	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999996012561858	WITHOUT_CLASSIFICATION	3.9874381410754555E-7	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999992693712476	WITHOUT_CLASSIFICATION	7.306287523794321E-7	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.999999665704407	WITHOUT_CLASSIFICATION	3.3429559293610536E-7	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999825667264884	WITHOUT_CLASSIFICATION	1.743327351156188E-5	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999910582072353	WITHOUT_CLASSIFICATION	8.941792764785932E-6	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999840539084	WITHOUT_CLASSIFICATION	1.594609154067303E-8	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999976275746529	WITHOUT_CLASSIFICATION	2.372425347060491E-6	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999998732535086	WITHOUT_CLASSIFICATION	1.2674649150092287E-7	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999815133643937	WITHOUT_CLASSIFICATION	1.848663560636737E-5	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999996082544937	WITHOUT_CLASSIFICATION	3.9174550634002354E-7	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.999994204658219	WITHOUT_CLASSIFICATION	5.7953417810070135E-6	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364932302	WITHOUT_CLASSIFICATION	1.635067698649932E-7	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965316511978	WITHOUT_CLASSIFICATION	3.4683488022475662E-6	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.99945773308593	WITHOUT_CLASSIFICATION	5.422669140700536E-4	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999998690937052	WITHOUT_CLASSIFICATION	1.309062947996328E-6	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999984781068336	WITHOUT_CLASSIFICATION	1.5218931664121457E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999980006112	WITHOUT_CLASSIFICATION	1.999388743572527E-9	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999980006112	WITHOUT_CLASSIFICATION	1.999388743572527E-9	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999994531744	WITHOUT_CLASSIFICATION	5.468256750090844E-10	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999984457934183	WITHOUT_CLASSIFICATION	1.5542065817009572E-5	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999990243118994	WITHOUT_CLASSIFICATION	9.756881007448705E-7	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999974340823968	WITHOUT_CLASSIFICATION	2.565917603198237E-6	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999985263393539	WITHOUT_CLASSIFICATION	1.4736606460957488E-6	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9969103916697472	WITHOUT_CLASSIFICATION	0.0030896083302529576	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999967604008536	WITHOUT_CLASSIFICATION	3.239599146348013E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999983810778307	WITHOUT_CLASSIFICATION	1.6189221692897904E-6	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999305935713	WITHOUT_CLASSIFICATION	6.940642864540748E-8	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999998593369798	WITHOUT_CLASSIFICATION	1.4066302020463491E-7	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9873193836133606	WITHOUT_CLASSIFICATION	0.012680616386639372	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999965349694	WITHOUT_CLASSIFICATION	3.4650306237712048E-9	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999986049645864	WITHOUT_CLASSIFICATION	1.3950354135960784E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999980006112	WITHOUT_CLASSIFICATION	1.999388743572527E-9	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999931274882623	WITHOUT_CLASSIFICATION	6.872511737701488E-6	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999998585191462	WITHOUT_CLASSIFICATION	1.414808537962879E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9984540706793842	WITHOUT_CLASSIFICATION	0.0015459293206157353	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.999999987661414	WITHOUT_CLASSIFICATION	1.2338586036278659E-8	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999993191313294	WITHOUT_CLASSIFICATION	6.808686705634174E-7	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999980593619425	WITHOUT_CLASSIFICATION	1.940638057556306E-6	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999909573994628	WITHOUT_CLASSIFICATION	9.042600537235779E-6	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999999999188619	WITHOUT_CLASSIFICATION	8.113809158248993E-10	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999998932993125	WITHOUT_CLASSIFICATION	1.0670068750123525E-6	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999999835977939	WITHOUT_CLASSIFICATION	1.640220617551292E-8	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999996464693718	WITHOUT_CLASSIFICATION	3.535306282217823E-7	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364932302	WITHOUT_CLASSIFICATION	1.635067698649932E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999980006112	WITHOUT_CLASSIFICATION	1.999388743572527E-9	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999946052757438	WITHOUT_CLASSIFICATION	5.394724256203025E-6	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999581744637	WITHOUT_CLASSIFICATION	4.182553638621726E-8	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999997682672228	WITHOUT_CLASSIFICATION	2.3173277708822532E-7	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999960927453192	WITHOUT_CLASSIFICATION	3.907254680874574E-6	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999999998394006	WITHOUT_CLASSIFICATION	1.6059941287363651E-9	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999823914033323	WITHOUT_CLASSIFICATION	1.7608596667654285E-5	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994433299214	WITHOUT_CLASSIFICATION	5.566700785699453E-7	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999471273102	WITHOUT_CLASSIFICATION	5.287268982389975E-8	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999835856013	WITHOUT_CLASSIFICATION	1.641439863566807E-8	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999810614559425	WITHOUT_CLASSIFICATION	1.8938544057605964E-5	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999985161567255	WITHOUT_CLASSIFICATION	1.483843274578465E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999980174537011	WITHOUT_CLASSIFICATION	1.982546298886076E-5	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.999999999808854	WITHOUT_CLASSIFICATION	1.911458797445127E-10	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999999592347525	WITHOUT_CLASSIFICATION	4.076524749580093E-8	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999983054043499	WITHOUT_CLASSIFICATION	1.694595650169064E-6	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999999842418277	WITHOUT_CLASSIFICATION	1.5758172294062743E-7	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999997877372535	WITHOUT_CLASSIFICATION	2.1226274641362517E-7	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999828722947015	WITHOUT_CLASSIFICATION	1.7127705298499814E-5	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999998683484458	WITHOUT_CLASSIFICATION	1.316515542000301E-7	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999987111954906	WITHOUT_CLASSIFICATION	1.2888045095325281E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999989475315333	WITHOUT_CLASSIFICATION	1.0524684666655884E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999989475315333	WITHOUT_CLASSIFICATION	1.0524684666655884E-6	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999972254710705	WITHOUT_CLASSIFICATION	2.7745289295045768E-6	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999566989389	WITHOUT_CLASSIFICATION	4.330106106679789E-8	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999929357480772	WITHOUT_CLASSIFICATION	7.0642519228575516E-6	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999557813280878	WITHOUT_CLASSIFICATION	4.4218671912217274E-5	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999980786334404	WITHOUT_CLASSIFICATION	1.921366559563403E-6	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999949118142673	WITHOUT_CLASSIFICATION	5.08818573271375E-6	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999997063757076	WITHOUT_CLASSIFICATION	2.936242924739752E-7	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999836240580933	WITHOUT_CLASSIFICATION	1.637594190667267E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999836240580933	WITHOUT_CLASSIFICATION	1.637594190667267E-5	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999990344934944	WITHOUT_CLASSIFICATION	9.65506505591593E-6	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999998615278832	WITHOUT_CLASSIFICATION	1.3847211680461403E-7	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999945569665203	WITHOUT_CLASSIFICATION	5.443033479684782E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999906202530032	WITHOUT_CLASSIFICATION	9.379746996717998E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999906202530032	WITHOUT_CLASSIFICATION	9.379746996717998E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999906202530032	WITHOUT_CLASSIFICATION	9.379746996717998E-6	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999669934037647	WITHOUT_CLASSIFICATION	3.300659623528968E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999128791417	WITHOUT_CLASSIFICATION	8.712085827366686E-8	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999344282016	WITHOUT_CLASSIFICATION	6.557179848985958E-8	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9348573549032699	WITHOUT_CLASSIFICATION	0.06514264509673003	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999859712171667	WITHOUT_CLASSIFICATION	1.4028782833317789E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999980006112	WITHOUT_CLASSIFICATION	1.999388743572527E-9	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999980006112	WITHOUT_CLASSIFICATION	1.999388743572527E-9	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999969723591461	WITHOUT_CLASSIFICATION	3.027640853954634E-6	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999995741633	WITHOUT_CLASSIFICATION	4.2583676913883E-10	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9997650539896605	WITHOUT_CLASSIFICATION	2.3494601033939013E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999854628461	WITHOUT_CLASSIFICATION	1.4537153948004251E-8	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9998366695822642	WITHOUT_CLASSIFICATION	1.6333041773581151E-4	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999989640019071	WITHOUT_CLASSIFICATION	1.035998092791569E-6	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9993946862300847	WITHOUT_CLASSIFICATION	6.053137699153588E-4	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999941443235144	WITHOUT_CLASSIFICATION	5.855676485581932E-6	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999980108298516	WITHOUT_CLASSIFICATION	1.9891701484100585E-6	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999295572792	WITHOUT_CLASSIFICATION	7.044272078523558E-8	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999891553070102	WITHOUT_CLASSIFICATION	1.0844692989776059E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999999869247821	WITHOUT_CLASSIFICATION	1.3075217902652864E-7	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999999869247821	WITHOUT_CLASSIFICATION	1.3075217902652864E-7	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999999140429339	WITHOUT_CLASSIFICATION	8.595706609766526E-8	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999999140429339	WITHOUT_CLASSIFICATION	8.595706609766526E-8	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.99999993305071	WITHOUT_CLASSIFICATION	6.694928997127815E-8	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999998314057633	WITHOUT_CLASSIFICATION	1.685942367674527E-7	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999998314057633	WITHOUT_CLASSIFICATION	1.685942367674527E-7	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999999422209672	WITHOUT_CLASSIFICATION	5.777903275340344E-8	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999998263557212	WITHOUT_CLASSIFICATION	1.7364427883396227E-7	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999330119345	WITHOUT_CLASSIFICATION	6.698806553144257E-8	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999989475315333	WITHOUT_CLASSIFICATION	1.0524684666655884E-6	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999566400531	WITHOUT_CLASSIFICATION	4.3359946978556744E-8	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999998263557212	WITHOUT_CLASSIFICATION	1.7364427883396227E-7	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999981950376611	WITHOUT_CLASSIFICATION	1.8049623388765362E-6	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999969735433298	WITHOUT_CLASSIFICATION	3.0264566701561436E-6	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999999759042119	WITHOUT_CLASSIFICATION	2.4095788216080975E-8	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999999861115336	WITHOUT_CLASSIFICATION	1.3888466397649341E-8	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999999998921455	WITHOUT_CLASSIFICATION	1.078544978886765E-9	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999999793241142	WITHOUT_CLASSIFICATION	2.0675885749636886E-8	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999997274234375	WITHOUT_CLASSIFICATION	2.725765625792198E-7	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9994749115721765	WITHOUT_CLASSIFICATION	5.250884278234916E-4	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9987408193644669	WITHOUT_CLASSIFICATION	0.0012591806355331493	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999382400771768	WITHOUT_CLASSIFICATION	6.175992282316042E-5	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999998195315905	WITHOUT_CLASSIFICATION	1.8046840947317373E-7	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999806942429446	WITHOUT_CLASSIFICATION	1.9305757055420857E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999725818145	WITHOUT_CLASSIFICATION	2.741818549397184E-7	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999999713041844	WITHOUT_CLASSIFICATION	2.869581564651755E-8	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.940049541585892	WITHOUT_CLASSIFICATION	0.059950458414107954	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999982927753996	WITHOUT_CLASSIFICATION	1.7072246002644812E-6	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999781007879	WITHOUT_CLASSIFICATION	2.18992120628023E-8	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998389562086	WITHOUT_CLASSIFICATION	1.6104379138534073E-7	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998389562086	WITHOUT_CLASSIFICATION	1.6104379138534073E-7	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999999895589363	WITHOUT_CLASSIFICATION	1.0441063710846818E-7	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999997911999904	WITHOUT_CLASSIFICATION	2.0880000970033872E-7	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999999818897681	WITHOUT_CLASSIFICATION	1.8110231928647317E-8	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999997163603528	WITHOUT_CLASSIFICATION	2.83639647174633E-7	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999998336684172	WITHOUT_CLASSIFICATION	1.663315828281411E-7	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999831112613087	WITHOUT_CLASSIFICATION	1.6888738691238317E-5	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999935642945	WITHOUT_CLASSIFICATION	6.43570551695183E-9	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999991435416075	WITHOUT_CLASSIFICATION	8.564583924890872E-7	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999997488072609	WITHOUT_CLASSIFICATION	2.5119273909663757E-6	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999902122648	WITHOUT_CLASSIFICATION	9.787735297376997E-9	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999292691921	WITHOUT_CLASSIFICATION	7.073080787824659E-8	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999980174537011	WITHOUT_CLASSIFICATION	1.982546298886076E-5	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999834126287	WITHOUT_CLASSIFICATION	1.658737116618563E-8	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999916757299791	WITHOUT_CLASSIFICATION	8.324270020898106E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999906041928988	WITHOUT_CLASSIFICATION	9.395807101264749E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999945092078959	WITHOUT_CLASSIFICATION	5.4907921040559865E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999541015872	WITHOUT_CLASSIFICATION	4.589841290496545E-8	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999541015872	WITHOUT_CLASSIFICATION	4.589841290496545E-8	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999980069019476	WITHOUT_CLASSIFICATION	1.993098052342572E-6	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9992999392005524	WITHOUT_CLASSIFICATION	7.000607994476048E-4	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9988067686888066	WITHOUT_CLASSIFICATION	0.0011932313111934181	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9988196376648781	WITHOUT_CLASSIFICATION	0.0011803623351218924	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999291557458178	WITHOUT_CLASSIFICATION	7.084425418223009E-5	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.99999442391482	WITHOUT_CLASSIFICATION	5.576085180033953E-6	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999997690949636	WITHOUT_CLASSIFICATION	2.3090503649892153E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999851294057895	WITHOUT_CLASSIFICATION	1.4870594210478575E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999943877187595	WITHOUT_CLASSIFICATION	5.6122812405402835E-6	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999993961881252	WITHOUT_CLASSIFICATION	6.03811874802899E-7	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999995378025609	WITHOUT_CLASSIFICATION	4.621974390314548E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999851294057895	WITHOUT_CLASSIFICATION	1.4870594210478575E-5	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999781503168824	WITHOUT_CLASSIFICATION	2.1849683117615243E-5	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999998146933937	WITHOUT_CLASSIFICATION	1.853066062528595E-7	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999994387300689	WITHOUT_CLASSIFICATION	5.612699311483707E-7	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.999996252221211	WITHOUT_CLASSIFICATION	3.7477787890091246E-6	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999996211744927	WITHOUT_CLASSIFICATION	3.788255072106725E-7	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999999946643554	WITHOUT_CLASSIFICATION	5.3356446068173614E-8	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999968989641	WITHOUT_CLASSIFICATION	3.1010358154036045E-9	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999996797976114	WITHOUT_CLASSIFICATION	3.2020238870194796E-7	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999998906975093	WITHOUT_CLASSIFICATION	1.0930249073695164E-7	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999272512032494	WITHOUT_CLASSIFICATION	7.274879675050737E-5	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998949127736376	WITHOUT_CLASSIFICATION	1.0508722636243164E-4	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999948955901166	WITHOUT_CLASSIFICATION	5.104409883483934E-6	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999762171664	WITHOUT_CLASSIFICATION	2.378283365657059E-8	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999995505762341	WITHOUT_CLASSIFICATION	4.4942376584601376E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999881342775868	WITHOUT_CLASSIFICATION	1.1865722413156321E-5	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999912692636	WITHOUT_CLASSIFICATION	8.730736351713574E-9	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999940479425	WITHOUT_CLASSIFICATION	5.95205748671976E-9	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999911884276811	WITHOUT_CLASSIFICATION	8.811572318993054E-6	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999761961253638	WITHOUT_CLASSIFICATION	2.3803874636232383E-5	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999979630133	WITHOUT_CLASSIFICATION	2.0369867061228684E-9	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999992372142337	WITHOUT_CLASSIFICATION	7.62785766409086E-7	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999997563358929	WITHOUT_CLASSIFICATION	2.4366410712586885E-7	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9994004380356399	WITHOUT_CLASSIFICATION	5.995619643600614E-4	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999949937426547	WITHOUT_CLASSIFICATION	5.0062573454014915E-6	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999972876453	WITHOUT_CLASSIFICATION	2.712354628125656E-9	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999972327984686	WITHOUT_CLASSIFICATION	2.7672015312373675E-6	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999994412892071	WITHOUT_CLASSIFICATION	5.587107928403812E-7	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999999905339649	WITHOUT_CLASSIFICATION	9.466035091542304E-8	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999400659637	WITHOUT_CLASSIFICATION	5.993403620302004E-8	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999999366931416	WITHOUT_CLASSIFICATION	6.330685847767826E-8	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999870542511	WITHOUT_CLASSIFICATION	1.2945748815209855E-8	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999435361252488	WITHOUT_CLASSIFICATION	5.646387475120672E-5	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9997904037192751	WITHOUT_CLASSIFICATION	2.095962807249384E-4	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999933332914	WITHOUT_CLASSIFICATION	6.666708572799203E-9	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999999973326122	WITHOUT_CLASSIFICATION	2.6673878020419124E-8	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999993446690449	WITHOUT_CLASSIFICATION	6.553309550363028E-7	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999999867927191	WITHOUT_CLASSIFICATION	1.3207280892385906E-7	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999994131949111	WITHOUT_CLASSIFICATION	5.868050889511684E-7	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999947514105	WITHOUT_CLASSIFICATION	5.24858955152628E-9	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999681714597034	WITHOUT_CLASSIFICATION	3.182854029652234E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999566404327	WITHOUT_CLASSIFICATION	4.335956721863481E-8	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999983143808772	WITHOUT_CLASSIFICATION	1.6856191228314343E-6	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999794192169	WITHOUT_CLASSIFICATION	2.0580783124474613E-8	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999945595687	WITHOUT_CLASSIFICATION	5.44043139468418E-9	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999998627678581	WITHOUT_CLASSIFICATION	1.3723214184445736E-7	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999994461531418	WITHOUT_CLASSIFICATION	5.538468580556811E-7	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999996603238241	WITHOUT_CLASSIFICATION	3.3967617589183745E-6	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999999814362471	WITHOUT_CLASSIFICATION	1.856375290348242E-8	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999993332697993	WITHOUT_CLASSIFICATION	6.667302008532302E-7	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999937205079755	WITHOUT_CLASSIFICATION	6.2794920244411505E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995848084751	WITHOUT_CLASSIFICATION	4.151915250013099E-7	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999999597367272	WITHOUT_CLASSIFICATION	4.0263272934839554E-8	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999983438806	WITHOUT_CLASSIFICATION	1.6561193057713327E-9	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9997786149926763	WITHOUT_CLASSIFICATION	2.2138500732377903E-4	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999961193382	WITHOUT_CLASSIFICATION	3.880661836482105E-9	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999992797940107	WITHOUT_CLASSIFICATION	7.202059892429234E-7	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999972344487456	WITHOUT_CLASSIFICATION	2.765551254407323E-5	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999781574287153	WITHOUT_CLASSIFICATION	2.1842571284600767E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999999410731395	WITHOUT_CLASSIFICATION	5.892686042697347E-8	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999974739117471	WITHOUT_CLASSIFICATION	2.5260882529772867E-6	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999985805450908	WITHOUT_CLASSIFICATION	1.4194549091253947E-6	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999995609831311	WITHOUT_CLASSIFICATION	4.390168688374395E-7	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9998353297066878	WITHOUT_CLASSIFICATION	1.6467029331213953E-4	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9830374828019729	DEFECT	0.016962517198027143	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9997682126249617	WITHOUT_CLASSIFICATION	2.3178737503824274E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999976243928489	WITHOUT_CLASSIFICATION	2.375607151193579E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995848084751	WITHOUT_CLASSIFICATION	4.151915250013099E-7	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999984973211513	WITHOUT_CLASSIFICATION	1.5026788486864522E-6	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999915836217426	WITHOUT_CLASSIFICATION	8.41637825730618E-6	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999995908813533	WITHOUT_CLASSIFICATION	4.0911864671184195E-7	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999998861647756	WITHOUT_CLASSIFICATION	1.1383522426140325E-7	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998481331468255	WITHOUT_CLASSIFICATION	1.5186685317451057E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999226352746962	WITHOUT_CLASSIFICATION	7.736472530383114E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999943877187595	WITHOUT_CLASSIFICATION	5.6122812405402835E-6	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999995008377506	WITHOUT_CLASSIFICATION	4.991622493557503E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999999973326122	WITHOUT_CLASSIFICATION	2.6673878020419124E-8	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9935560609620716	WITHOUT_CLASSIFICATION	0.00644393903792836	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998035871648	WITHOUT_CLASSIFICATION	1.9641283527665905E-7	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999924422538	WITHOUT_CLASSIFICATION	7.557746244525411E-9	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999928927588	WITHOUT_CLASSIFICATION	7.1072411253976885E-9	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999997479914658	WITHOUT_CLASSIFICATION	2.520085341169747E-7	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.999738437752147	WITHOUT_CLASSIFICATION	2.6156224785302946E-4	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997479973266	WITHOUT_CLASSIFICATION	2.520026733910408E-7	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999993334868905	WITHOUT_CLASSIFICATION	6.665131094995482E-7	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9807277238396717	WITHOUT_CLASSIFICATION	0.019272276160328304	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999988470967035	WITHOUT_CLASSIFICATION	1.152903296484769E-6	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999997887395722	WITHOUT_CLASSIFICATION	2.1126042776455543E-7	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999998816507822	WITHOUT_CLASSIFICATION	1.1834921776608434E-7	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998428982427	WITHOUT_CLASSIFICATION	1.5710175730770139E-7	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998428982427	WITHOUT_CLASSIFICATION	1.5710175730770139E-7	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999191873736	WITHOUT_CLASSIFICATION	8.081262641722006E-8	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998210456963	WITHOUT_CLASSIFICATION	1.7895430365574018E-7	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999861263801	WITHOUT_CLASSIFICATION	1.3873619920955226E-8	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999994256727	WITHOUT_CLASSIFICATION	5.743272083129291E-10	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999999965438887	WITHOUT_CLASSIFICATION	3.4561113001367654E-8	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999992746589129	WITHOUT_CLASSIFICATION	7.253410870558439E-7	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999859626117225	WITHOUT_CLASSIFICATION	1.4037388277456837E-5	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999987677330673	WITHOUT_CLASSIFICATION	1.2322669326906319E-6	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999077395542	WITHOUT_CLASSIFICATION	9.226044593045077E-8	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999987469390214	WITHOUT_CLASSIFICATION	1.2530609786136305E-6	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999677354290498	WITHOUT_CLASSIFICATION	3.226457095011861E-5	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999957712845922	WITHOUT_CLASSIFICATION	4.228715407808045E-6	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999978508811933	WITHOUT_CLASSIFICATION	2.14911880669761E-6	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999519480665	WITHOUT_CLASSIFICATION	4.805193367189485E-8	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998286138389125	WITHOUT_CLASSIFICATION	1.7138616108745925E-4	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999857371240021	WITHOUT_CLASSIFICATION	1.4262875997983954E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999978712568055	WITHOUT_CLASSIFICATION	2.1287431944101793E-6	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999998036276	WITHOUT_CLASSIFICATION	1.9637250360605395E-10	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999993222177548	WITHOUT_CLASSIFICATION	6.777822451942685E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994837314388	WITHOUT_CLASSIFICATION	5.162685612390107E-7	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999507315183	WITHOUT_CLASSIFICATION	4.926848161567779E-8	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9991702910824077	WITHOUT_CLASSIFICATION	8.297089175921963E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999919190212	WITHOUT_CLASSIFICATION	8.080978702045832E-9	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999986175502218	WITHOUT_CLASSIFICATION	1.3824497781646982E-6	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9999839720988252	WITHOUT_CLASSIFICATION	1.6027901174860444E-5	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999999500597012	WITHOUT_CLASSIFICATION	4.994029874276892E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994837314388	WITHOUT_CLASSIFICATION	5.162685612390107E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994837314388	WITHOUT_CLASSIFICATION	5.162685612390107E-7	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999571942839212	WITHOUT_CLASSIFICATION	4.280571607888577E-5	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999969511563968	WITHOUT_CLASSIFICATION	3.0488436032385345E-6	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999961578466989	WITHOUT_CLASSIFICATION	3.84215330102521E-6	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999540860011926	WITHOUT_CLASSIFICATION	4.591399880733393E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934878483224169	WITHOUT_CLASSIFICATION	0.006512151677583079	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9998579328525129	WITHOUT_CLASSIFICATION	1.4206714748717255E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999479597018	WITHOUT_CLASSIFICATION	5.204029808105285E-8	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999979126000683	WITHOUT_CLASSIFICATION	2.0873999316533614E-6	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.999999509284624	WITHOUT_CLASSIFICATION	4.907153760729986E-7	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996600845951	WITHOUT_CLASSIFICATION	3.3991540491942355E-7	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999881148565937	WITHOUT_CLASSIFICATION	1.188514340622908E-5	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999997518984709	WITHOUT_CLASSIFICATION	2.4810152910067336E-6	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999999634660716	WITHOUT_CLASSIFICATION	3.653392840905723E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997526315575	WITHOUT_CLASSIFICATION	2.4736844250289864E-7	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987765588833	WITHOUT_CLASSIFICATION	1.223441116739573E-6	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999740389748	WITHOUT_CLASSIFICATION	2.5961025216928292E-8	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998430701273409	WITHOUT_CLASSIFICATION	1.5692987265909824E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999661640883317	WITHOUT_CLASSIFICATION	3.3835911668267934E-5	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999980808346486	WITHOUT_CLASSIFICATION	1.9191653514120696E-6	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923010364802	WITHOUT_CLASSIFICATION	7.698963519761989E-6	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9987126184181326	WITHOUT_CLASSIFICATION	0.0012873815818673874	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998618281617	WITHOUT_CLASSIFICATION	1.3817183829723148E-7	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999448034315	WITHOUT_CLASSIFICATION	5.519656853566123E-8	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999996940423042	WITHOUT_CLASSIFICATION	3.0595769592899003E-7	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886909251663	WITHOUT_CLASSIFICATION	1.1309074833763621E-5	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999939064539	WITHOUT_CLASSIFICATION	6.093546127486268E-9	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999443354189	WITHOUT_CLASSIFICATION	5.5664581028191385E-8	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999991819738823	WITHOUT_CLASSIFICATION	8.180261177360007E-7	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999998983701187	WITHOUT_CLASSIFICATION	1.0162988129903319E-7	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999512159096214	WITHOUT_CLASSIFICATION	4.8784090378660975E-5	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999973219203458	WITHOUT_CLASSIFICATION	2.678079654189747E-6	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.99999992019363	WITHOUT_CLASSIFICATION	7.980636997721779E-8	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999980524766926	WITHOUT_CLASSIFICATION	1.947523307344037E-6	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999837451796997	WITHOUT_CLASSIFICATION	1.6254820300360547E-5	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999913415987327	WITHOUT_CLASSIFICATION	8.658401267286543E-6	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999961542422474	WITHOUT_CLASSIFICATION	3.845757752582796E-6	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999987126713922	WITHOUT_CLASSIFICATION	1.2873286077920633E-6	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999972304056	WITHOUT_CLASSIFICATION	2.7695945083435383E-9	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999991140360266	WITHOUT_CLASSIFICATION	8.859639734251934E-7	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999970160600464	WITHOUT_CLASSIFICATION	2.983939953599239E-6	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999998862773757	WITHOUT_CLASSIFICATION	1.1372262433016647E-7	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999998700912631	WITHOUT_CLASSIFICATION	1.2990873689482524E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999242945461	WITHOUT_CLASSIFICATION	7.570545395138523E-8	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999211931486	WITHOUT_CLASSIFICATION	7.880685136872496E-8	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999242945461	WITHOUT_CLASSIFICATION	7.570545395138523E-8	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999937835186662	WITHOUT_CLASSIFICATION	6.216481333767118E-6	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999982833083992	WITHOUT_CLASSIFICATION	1.716691600671761E-6	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999992159600445	WITHOUT_CLASSIFICATION	7.84039955622373E-7	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999998851892068	WITHOUT_CLASSIFICATION	1.1481079319925387E-7	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999990796659753	WITHOUT_CLASSIFICATION	9.203340245896244E-7	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999999860049947	WITHOUT_CLASSIFICATION	1.3995005298023E-7	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999987318450707	WITHOUT_CLASSIFICATION	1.2681549292729537E-6	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999645694208	WITHOUT_CLASSIFICATION	3.543057926040862E-8	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999732822842105	WITHOUT_CLASSIFICATION	2.671771578951107E-4	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999997797801816	WITHOUT_CLASSIFICATION	2.2021981836927952E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999999967515416	WITHOUT_CLASSIFICATION	3.248458406580767E-8	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999998774617501	WITHOUT_CLASSIFICATION	1.2253824990920542E-6	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999983322063	WITHOUT_CLASSIFICATION	1.6677935986510663E-9	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998832209467183	WITHOUT_CLASSIFICATION	1.1677905328169744E-4	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999524047580142	WITHOUT_CLASSIFICATION	4.759524198575804E-5	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999147376597	WITHOUT_CLASSIFICATION	8.526234030647651E-8	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999997039182374	WITHOUT_CLASSIFICATION	2.9608176258147433E-7	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999986133707345	WITHOUT_CLASSIFICATION	1.3866292655527626E-6	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999884814471	WITHOUT_CLASSIFICATION	1.1518552748252681E-8	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999692573044	WITHOUT_CLASSIFICATION	3.074269560807943E-8	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999987653092639	WITHOUT_CLASSIFICATION	1.2346907360978387E-6	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999978707481573	WITHOUT_CLASSIFICATION	2.1292518427194657E-6	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9981911457298888	WITHOUT_CLASSIFICATION	0.0018088542701111814	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999900757322259	WITHOUT_CLASSIFICATION	9.924267774156212E-6	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999996487496917	WITHOUT_CLASSIFICATION	3.5125030828092735E-7	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996533065840535	WITHOUT_CLASSIFICATION	3.466934159465322E-4	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.999968555629508	WITHOUT_CLASSIFICATION	3.144437049192998E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.999997366310984	WITHOUT_CLASSIFICATION	2.63368901597263E-6	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999687268681	WITHOUT_CLASSIFICATION	3.127313181934029E-8	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9998042440988147	WITHOUT_CLASSIFICATION	1.9575590118531844E-4	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9999911760143834	WITHOUT_CLASSIFICATION	8.823985616652394E-6	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9866315520968441	WITHOUT_CLASSIFICATION	0.013368447903155948	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9984579183945531	WITHOUT_CLASSIFICATION	0.0015420816054468151	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999888748183724	WITHOUT_CLASSIFICATION	1.112518162766141E-5	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999980547712321	WITHOUT_CLASSIFICATION	1.945228767896855E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9999975784975225	WITHOUT_CLASSIFICATION	2.421502477478975E-6	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999946220887617	WITHOUT_CLASSIFICATION	5.377911238233952E-6	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999798603635	WITHOUT_CLASSIFICATION	2.013963646107107E-8	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9999549957336805	WITHOUT_CLASSIFICATION	4.5004266319447376E-5	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999997950689449	WITHOUT_CLASSIFICATION	2.0493105511952118E-7	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999998772248098	WITHOUT_CLASSIFICATION	1.2277519016375266E-7	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999888565512627	WITHOUT_CLASSIFICATION	1.1143448737343296E-5	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997893771827311	WITHOUT_CLASSIFICATION	2.1062281726882804E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996533065840535	WITHOUT_CLASSIFICATION	3.466934159465322E-4	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999585842301556	WITHOUT_CLASSIFICATION	4.141576984440103E-5	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999987362852071	WITHOUT_CLASSIFICATION	1.263714792941874E-6	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9996714905198505	WITHOUT_CLASSIFICATION	3.285094801495379E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9998605506980061	WITHOUT_CLASSIFICATION	1.3944930199402862E-4	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999996043739151	WITHOUT_CLASSIFICATION	3.956260848870139E-7	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999997991338312	WITHOUT_CLASSIFICATION	2.0086616871756687E-7	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999998901078484	WITHOUT_CLASSIFICATION	1.0989215160450862E-7	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.8828030979940985	DEFECT	0.11719690200590156	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999998424755173	WITHOUT_CLASSIFICATION	1.5752448263869914E-7	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999205982388428	WITHOUT_CLASSIFICATION	7.94017611571581E-5	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.999997110413243	WITHOUT_CLASSIFICATION	2.8895867568882547E-6	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.999999994281765	WITHOUT_CLASSIFICATION	5.718235072494829E-9	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999842381713895	WITHOUT_CLASSIFICATION	1.5761828610498995E-5	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999771773184365	WITHOUT_CLASSIFICATION	2.28226815634645E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999997556550763	WITHOUT_CLASSIFICATION	2.443449236915344E-7	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999990983856	WITHOUT_CLASSIFICATION	9.016145249859056E-10	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999243010134	WITHOUT_CLASSIFICATION	7.569898657495471E-8	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999696911454	WITHOUT_CLASSIFICATION	3.030885462423143E-8	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999992691413654	WITHOUT_CLASSIFICATION	7.308586346670225E-7	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999585842301556	WITHOUT_CLASSIFICATION	4.141576984440103E-5	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999940622828984	WITHOUT_CLASSIFICATION	5.9377171015782355E-6	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9996909079655109	WITHOUT_CLASSIFICATION	3.0909203448907925E-4	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999987581787787	WITHOUT_CLASSIFICATION	1.241821221292998E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999992483655183	WITHOUT_CLASSIFICATION	7.516344815907384E-7	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999601297121391	WITHOUT_CLASSIFICATION	3.9870287860976724E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997769236933809	WITHOUT_CLASSIFICATION	2.2307630661918043E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997769236933809	WITHOUT_CLASSIFICATION	2.2307630661918043E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999973319015116	WITHOUT_CLASSIFICATION	2.66809848834713E-6	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997769236933809	WITHOUT_CLASSIFICATION	2.2307630661918043E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997769236933809	WITHOUT_CLASSIFICATION	2.2307630661918043E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9916871056018964	WITHOUT_CLASSIFICATION	0.008312894398103576	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999976417888929	WITHOUT_CLASSIFICATION	2.358211107095791E-5	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999999590406767	WITHOUT_CLASSIFICATION	4.095932329547211E-8	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999996396557734	WITHOUT_CLASSIFICATION	3.6034422658961835E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9991668562772321	WITHOUT_CLASSIFICATION	8.331437227678965E-4	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999993009691636	WITHOUT_CLASSIFICATION	6.990308363386501E-7	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9975727505992972	WITHOUT_CLASSIFICATION	0.0024272494007028453	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999907960623	WITHOUT_CLASSIFICATION	9.203937694608668E-9	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999849613097727	WITHOUT_CLASSIFICATION	1.5038690227330724E-5	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.999997296695769	WITHOUT_CLASSIFICATION	2.703304230940321E-6	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999966821865258	WITHOUT_CLASSIFICATION	3.3178134741800506E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999587557789752	WITHOUT_CLASSIFICATION	4.124422102485775E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.99999904722306	WITHOUT_CLASSIFICATION	9.527769399445803E-7	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999982756322022	WITHOUT_CLASSIFICATION	1.7243677977643015E-6	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999994143673081	WITHOUT_CLASSIFICATION	5.856326919860612E-7	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9992322431073078	WITHOUT_CLASSIFICATION	7.677568926922743E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997637048044	WITHOUT_CLASSIFICATION	2.3629519569949575E-7	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999398263704438	WITHOUT_CLASSIFICATION	6.017362955626928E-5	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9998442999234356	WITHOUT_CLASSIFICATION	1.5570007656435405E-4	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999981892804405	WITHOUT_CLASSIFICATION	1.8107195595948058E-6	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999998013859992	WITHOUT_CLASSIFICATION	1.9861400077566852E-7	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999991068665399	WITHOUT_CLASSIFICATION	8.931334601595478E-7	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997637048044	WITHOUT_CLASSIFICATION	2.3629519569949575E-7	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.999968555629508	WITHOUT_CLASSIFICATION	3.144437049192998E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999846613926231	WITHOUT_CLASSIFICATION	1.533860737694566E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992739644201	WITHOUT_CLASSIFICATION	7.260355799916521E-7	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991662106437	WITHOUT_CLASSIFICATION	8.337893562576214E-7	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999987597975413	WITHOUT_CLASSIFICATION	1.2402024587507105E-6	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999843648066201	WITHOUT_CLASSIFICATION	1.563519337994278E-5	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999998348580171	WITHOUT_CLASSIFICATION	1.6514198286144667E-7	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9996890057969261	WITHOUT_CLASSIFICATION	3.1099420307395716E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998947278163	WITHOUT_CLASSIFICATION	1.0527218385772492E-7	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999999977993134	WITHOUT_CLASSIFICATION	2.2006865994078657E-8	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999908295980477	WITHOUT_CLASSIFICATION	9.170401952280532E-6	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999988920851969	WITHOUT_CLASSIFICATION	1.1079148031532175E-6	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999994902297293	WITHOUT_CLASSIFICATION	5.097702706729991E-7	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999988488371	WITHOUT_CLASSIFICATION	1.151163006802351E-9	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999186413455499	WITHOUT_CLASSIFICATION	8.135865445011956E-5	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999770554656	WITHOUT_CLASSIFICATION	2.2944534413006312E-8	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999886669772668	WITHOUT_CLASSIFICATION	1.133302273314906E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999142982489699	WITHOUT_CLASSIFICATION	8.570175103017337E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999997882833161	WITHOUT_CLASSIFICATION	2.117166838663588E-7	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999991007255009	WITHOUT_CLASSIFICATION	8.992744990277788E-7	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9997983122778693	WITHOUT_CLASSIFICATION	2.0168772213074586E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999999667460534	WITHOUT_CLASSIFICATION	3.3253946618793776E-8	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999995376544518	WITHOUT_CLASSIFICATION	4.623455482015497E-7	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998947278163	WITHOUT_CLASSIFICATION	1.0527218385772492E-7	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999492845129	WITHOUT_CLASSIFICATION	5.071548721051797E-8	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.999999953367597	WITHOUT_CLASSIFICATION	4.6632403022731846E-8	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999998025314662	WITHOUT_CLASSIFICATION	1.9746853380433747E-6	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999999594509784	WITHOUT_CLASSIFICATION	4.0549021531420654E-8	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999983910876	WITHOUT_CLASSIFICATION	1.608912397926552E-8	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999988636132908	WITHOUT_CLASSIFICATION	1.1363867092196365E-6	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9999978395250139	WITHOUT_CLASSIFICATION	2.160474986198296E-6	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999999492269376	WITHOUT_CLASSIFICATION	5.0773062354449236E-8	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999998510363723	WITHOUT_CLASSIFICATION	1.4896362758558697E-7	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999864857871882	WITHOUT_CLASSIFICATION	1.3514212811763306E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999646522324	WITHOUT_CLASSIFICATION	3.534776758095176E-8	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999955691504594	WITHOUT_CLASSIFICATION	4.430849540545208E-6	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999977102101727	WITHOUT_CLASSIFICATION	2.289789827334042E-6	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999999430174	WITHOUT_CLASSIFICATION	5.6982626920828874E-11	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999994118328921	WITHOUT_CLASSIFICATION	5.881671078937042E-7	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999968315517613	WITHOUT_CLASSIFICATION	3.168448238707446E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998212183939	WITHOUT_CLASSIFICATION	1.7878160604835395E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999646522324	WITHOUT_CLASSIFICATION	3.534776758095176E-8	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999262117197	WITHOUT_CLASSIFICATION	7.378828023382529E-8	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9995536211817296	WITHOUT_CLASSIFICATION	4.463788182703524E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999997781120823	WITHOUT_CLASSIFICATION	2.2188791772948259E-7	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999999476633501	WITHOUT_CLASSIFICATION	5.2336649853168845E-8	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999795208760008	WITHOUT_CLASSIFICATION	2.0479123999198687E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999867138499	WITHOUT_CLASSIFICATION	1.3286150048154345E-8	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999994118328921	WITHOUT_CLASSIFICATION	5.881671078937042E-7	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999982351024249	WITHOUT_CLASSIFICATION	1.7648975750501327E-6	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976528823088	WITHOUT_CLASSIFICATION	2.3471176911515455E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999977627614	WITHOUT_CLASSIFICATION	2.2372385995084966E-8	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995019860217	WITHOUT_CLASSIFICATION	4.980139782156171E-7	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986656513089	WITHOUT_CLASSIFICATION	1.3343486910144072E-6	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999015028602	WITHOUT_CLASSIFICATION	9.849713978924522E-8	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998854709539	WITHOUT_CLASSIFICATION	1.1452904602285587E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998854709539	WITHOUT_CLASSIFICATION	1.1452904602285587E-7	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999838893736763	WITHOUT_CLASSIFICATION	1.611062632365363E-5	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999995565808276	WITHOUT_CLASSIFICATION	4.434191723734959E-7	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999995709138172	WITHOUT_CLASSIFICATION	4.2908618280376254E-7	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999886504939228	WITHOUT_CLASSIFICATION	1.1349506077028451E-5	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9548969209684373	WITHOUT_CLASSIFICATION	0.04510307903156271	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998835833522	WITHOUT_CLASSIFICATION	1.1641664767995773E-7	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982452286251	WITHOUT_CLASSIFICATION	1.75477137489564E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980180173043	WITHOUT_CLASSIFICATION	1.9819826957846386E-6	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999996198462355	WITHOUT_CLASSIFICATION	3.801537644271683E-7	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932090357941	WITHOUT_CLASSIFICATION	6.790964205924955E-6	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998835833522	WITHOUT_CLASSIFICATION	1.1641664767995773E-7	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982452286251	WITHOUT_CLASSIFICATION	1.75477137489564E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980180173043	WITHOUT_CLASSIFICATION	1.9819826957846386E-6	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999999079183283	WITHOUT_CLASSIFICATION	9.208167167510943E-8	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9999989268217375	WITHOUT_CLASSIFICATION	1.0731782624997734E-6	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999967803777403	WITHOUT_CLASSIFICATION	3.21962225966926E-6	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999996691771574	WITHOUT_CLASSIFICATION	3.308228425926463E-6	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999541521138	WITHOUT_CLASSIFICATION	4.584788611378206E-8	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9998617587016456	WITHOUT_CLASSIFICATION	1.382412983544565E-4	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.99997580454155	WITHOUT_CLASSIFICATION	2.419545845000147E-5	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999998273990857	WITHOUT_CLASSIFICATION	1.7260091439582215E-7	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9999954275480236	WITHOUT_CLASSIFICATION	4.572451976435165E-6	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999997454805375	WITHOUT_CLASSIFICATION	2.5451946256300855E-7	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999855942509	WITHOUT_CLASSIFICATION	1.440574910469673E-8	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997569888315831	WITHOUT_CLASSIFICATION	2.4301116841686136E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9997690948631327	WITHOUT_CLASSIFICATION	2.3090513686741264E-4	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999240592309	WITHOUT_CLASSIFICATION	7.594076915692983E-8	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999743615766	WITHOUT_CLASSIFICATION	2.563842339558771E-7	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999890845902425	WITHOUT_CLASSIFICATION	1.0915409757509812E-5	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999998751257514	WITHOUT_CLASSIFICATION	1.2487424872293215E-7	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999949818858344	WITHOUT_CLASSIFICATION	5.0181141655656544E-6	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999994170383006	WITHOUT_CLASSIFICATION	5.829616993645314E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999998901377922	WITHOUT_CLASSIFICATION	1.0986220772372666E-7	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999990793425853	WITHOUT_CLASSIFICATION	9.206574147417409E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.990789804578429	WITHOUT_CLASSIFICATION	0.009210195421571006	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999995046452524	WITHOUT_CLASSIFICATION	4.95354747637541E-7	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999996471263904	WITHOUT_CLASSIFICATION	3.528736095283218E-7	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999947902135	WITHOUT_CLASSIFICATION	5.2097865061580286E-9	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999956108760414	WITHOUT_CLASSIFICATION	4.389123958628502E-6	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977624289087	WITHOUT_CLASSIFICATION	2.237571091371263E-6	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998569882969	WITHOUT_CLASSIFICATION	1.430117030953614E-6	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999712559311	WITHOUT_CLASSIFICATION	2.8744068806755704E-8	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994182307121	WITHOUT_CLASSIFICATION	5.817692877765174E-7	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849709258586	WITHOUT_CLASSIFICATION	1.5029074141534957E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999214118298	WITHOUT_CLASSIFICATION	7.858817024459077E-8	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999214118298	WITHOUT_CLASSIFICATION	7.858817024459077E-8	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999938284522	WITHOUT_CLASSIFICATION	6.17154782642726E-9	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999245911385	WITHOUT_CLASSIFICATION	7.54088614801145E-8	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999970702530763	WITHOUT_CLASSIFICATION	2.9297469236549785E-6	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999980174537011	WITHOUT_CLASSIFICATION	1.982546298886076E-5	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999999768885626	WITHOUT_CLASSIFICATION	2.3111437442470895E-8	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999964148212378	WITHOUT_CLASSIFICATION	3.5851787621897737E-6	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9999800592385908	WITHOUT_CLASSIFICATION	1.9940761409278616E-5	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999999936207916	WITHOUT_CLASSIFICATION	6.379208339902724E-9	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999994464887145	WITHOUT_CLASSIFICATION	5.535112854875236E-7	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999311019144	WITHOUT_CLASSIFICATION	6.889808558593621E-8	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998069587598	WITHOUT_CLASSIFICATION	1.9304124017937218E-7	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992125566136	WITHOUT_CLASSIFICATION	7.874433863893076E-7	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998688047558	WITHOUT_CLASSIFICATION	1.3119524431417523E-7	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999114826275	WITHOUT_CLASSIFICATION	8.851737264968373E-8	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998306808898	WITHOUT_CLASSIFICATION	1.6931911018383358E-7	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997373725733	WITHOUT_CLASSIFICATION	2.6262742673918034E-7	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998438989449	WITHOUT_CLASSIFICATION	1.561010551630782E-7	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996369185522	WITHOUT_CLASSIFICATION	3.630814477652059E-7	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994247641104	WITHOUT_CLASSIFICATION	5.752358896576639E-7	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999836139865	WITHOUT_CLASSIFICATION	1.6386013546141105E-8	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999989594927458	WITHOUT_CLASSIFICATION	1.0405072542332764E-6	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9992814494812727	WITHOUT_CLASSIFICATION	7.185505187272923E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999983478209343	WITHOUT_CLASSIFICATION	1.6521790657037238E-5	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999995388300629	WITHOUT_CLASSIFICATION	4.611699371831296E-7	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999919358762	WITHOUT_CLASSIFICATION	8.064123736488743E-9	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999997536991566	WITHOUT_CLASSIFICATION	2.463008433536853E-7	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999983460062	WITHOUT_CLASSIFICATION	1.653993869028913E-9	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999995987567211	WITHOUT_CLASSIFICATION	4.0124327889788144E-7	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999983478209343	WITHOUT_CLASSIFICATION	1.6521790657037238E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999983478209343	WITHOUT_CLASSIFICATION	1.6521790657037238E-5	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999974018983914	WITHOUT_CLASSIFICATION	2.5981016085842643E-6	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999997299167461	WITHOUT_CLASSIFICATION	2.700832539001469E-7	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999820216025	WITHOUT_CLASSIFICATION	1.7978397550222684E-8	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999986858067894	WITHOUT_CLASSIFICATION	1.3141932106517815E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999725818145	WITHOUT_CLASSIFICATION	2.741818549397184E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999998901377922	WITHOUT_CLASSIFICATION	1.0986220772372666E-7	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999999999022905	WITHOUT_CLASSIFICATION	9.770949267713511E-10	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.99991501250848	WITHOUT_CLASSIFICATION	8.498749152003468E-5	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.999998848635487	WITHOUT_CLASSIFICATION	1.1513645129226704E-6	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984897390733	WITHOUT_CLASSIFICATION	1.5102609267448432E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999915231555782	WITHOUT_CLASSIFICATION	8.476844421887853E-6	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951817388205	WITHOUT_CLASSIFICATION	4.818261179542898E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999996885017238	WITHOUT_CLASSIFICATION	3.114982761426944E-7	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999996885017238	WITHOUT_CLASSIFICATION	3.114982761426944E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999703821834	WITHOUT_CLASSIFICATION	2.9617816674694305E-8	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999703821834	WITHOUT_CLASSIFICATION	2.9617816674694305E-8	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989978473536	WITHOUT_CLASSIFICATION	1.0021526464485404E-6	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999096080435	WITHOUT_CLASSIFICATION	9.039195649238228E-7	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999997333687933	WITHOUT_CLASSIFICATION	2.6663120670445726E-6	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996492412214	WITHOUT_CLASSIFICATION	3.507587785230017E-7	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999864721193719	WITHOUT_CLASSIFICATION	1.3527880628153012E-5	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999202055753288	WITHOUT_CLASSIFICATION	7.979442467121267E-5	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996821836562659	WITHOUT_CLASSIFICATION	3.178163437339845E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958062831097	WITHOUT_CLASSIFICATION	4.1937168903670976E-6	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999983737483276	WITHOUT_CLASSIFICATION	1.6262516724340021E-6	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999839400407	WITHOUT_CLASSIFICATION	1.60599592884786E-8	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999891623021	WITHOUT_CLASSIFICATION	1.0837697862008973E-8	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999978714557542	WITHOUT_CLASSIFICATION	2.1285442458087316E-5	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999998293538005	WITHOUT_CLASSIFICATION	1.7064619959659173E-7	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999992447382581	WITHOUT_CLASSIFICATION	7.552617418433838E-7	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.999999555526952	WITHOUT_CLASSIFICATION	4.4447304810634806E-7	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999977671358035	WITHOUT_CLASSIFICATION	2.232864196476145E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999997926225511	WITHOUT_CLASSIFICATION	2.0737744891394058E-7	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999997926225511	WITHOUT_CLASSIFICATION	2.0737744891394058E-7	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999785447263	WITHOUT_CLASSIFICATION	2.1455273658069376E-8	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999650854351032	WITHOUT_CLASSIFICATION	3.4914564896771326E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999988645691	WITHOUT_CLASSIFICATION	1.1354308987237804E-8	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999878538249521	WITHOUT_CLASSIFICATION	1.214617504783334E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973597069185	WITHOUT_CLASSIFICATION	2.640293081526116E-6	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993905975239	WITHOUT_CLASSIFICATION	6.094024761163944E-7	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999996201539306	WITHOUT_CLASSIFICATION	3.7984606947297164E-7	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998380751420033	WITHOUT_CLASSIFICATION	1.6192485799678333E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999994199631194	WITHOUT_CLASSIFICATION	5.800368806127718E-7	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.99999998626638	WITHOUT_CLASSIFICATION	1.3733619984771711E-8	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999995211206223	WITHOUT_CLASSIFICATION	4.788793776971467E-7	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9993156784497466	WITHOUT_CLASSIFICATION	6.843215502533997E-4	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999778734295339	WITHOUT_CLASSIFICATION	2.2126570466171664E-5	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.999990771477968	WITHOUT_CLASSIFICATION	9.22852203204895E-6	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999995334719195	WITHOUT_CLASSIFICATION	4.665280806186236E-7	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9990839829043211	WITHOUT_CLASSIFICATION	9.160170956790073E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999577321221	WITHOUT_CLASSIFICATION	4.226787794584711E-8	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999917656767682	WITHOUT_CLASSIFICATION	8.234323231892033E-6	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999895926036936	WITHOUT_CLASSIFICATION	1.0407396306325818E-5	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999993145463697	WITHOUT_CLASSIFICATION	6.85453630358178E-7	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999995287547	WITHOUT_CLASSIFICATION	4.712451807640745E-10	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999229969004528	WITHOUT_CLASSIFICATION	7.700309954715744E-5	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999983467491406	WITHOUT_CLASSIFICATION	1.653250859467422E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999982349979	WITHOUT_CLASSIFICATION	1.7650020781356656E-9	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999999796865059	WITHOUT_CLASSIFICATION	2.031349409836199E-7	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999869691791246	WITHOUT_CLASSIFICATION	1.3030820875501562E-5	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999401706034184	WITHOUT_CLASSIFICATION	5.9829396581708864E-5	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999815047130707	WITHOUT_CLASSIFICATION	1.849528692932491E-5	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999886092815	WITHOUT_CLASSIFICATION	1.1390718503877939E-8	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999981202801006	WITHOUT_CLASSIFICATION	1.8797198993648032E-6	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999429473598995	WITHOUT_CLASSIFICATION	5.705264010036346E-5	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999987703533447	WITHOUT_CLASSIFICATION	1.2296466552126656E-6	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999657727045403	WITHOUT_CLASSIFICATION	3.422729545973669E-5	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999980795196481	WITHOUT_CLASSIFICATION	1.92048035185678E-6	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999316131367683	WITHOUT_CLASSIFICATION	6.838686323173985E-5	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999904531609031	WITHOUT_CLASSIFICATION	9.546839096896397E-6	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999985880620607	WITHOUT_CLASSIFICATION	1.4119379392896885E-6	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999997601738357	WITHOUT_CLASSIFICATION	2.398261642542182E-7	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999385708478	WITHOUT_CLASSIFICATION	6.142915229302443E-8	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999999543709175	WITHOUT_CLASSIFICATION	4.562908242363357E-8	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999996087897705	WITHOUT_CLASSIFICATION	3.9121022962888957E-7	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999997938190965	WITHOUT_CLASSIFICATION	2.061809033843279E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9997664736613159	WITHOUT_CLASSIFICATION	2.3352633868410405E-4	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999988650708357	WITHOUT_CLASSIFICATION	1.1349291642382831E-6	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999971055718685	WITHOUT_CLASSIFICATION	2.8944281314585725E-6	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999346645627387	WITHOUT_CLASSIFICATION	6.533543726118737E-5	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999998821939616	WITHOUT_CLASSIFICATION	1.1780603831559731E-7	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999966335095151	WITHOUT_CLASSIFICATION	3.366490485058198E-6	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999846516210017	WITHOUT_CLASSIFICATION	1.5348378998378335E-5	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999997756441271	WITHOUT_CLASSIFICATION	2.2435587292001086E-7	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999968010082609	WITHOUT_CLASSIFICATION	3.1989917390537036E-6	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999899709290718	WITHOUT_CLASSIFICATION	1.0029070928100776E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999998233764855	WITHOUT_CLASSIFICATION	1.766235143654382E-7	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999580588821319	WITHOUT_CLASSIFICATION	4.194111786819179E-5	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999975057892434	WITHOUT_CLASSIFICATION	2.494210756533462E-6	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.999997711478446	WITHOUT_CLASSIFICATION	2.2885215540623457E-6	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999996252005026	WITHOUT_CLASSIFICATION	3.747994973893191E-7	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999934332099423	WITHOUT_CLASSIFICATION	6.566790057648277E-6	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999793254347	WITHOUT_CLASSIFICATION	2.0674565171986882E-8	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999968765106769	WITHOUT_CLASSIFICATION	3.1234893229616884E-6	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999951002169359	WITHOUT_CLASSIFICATION	4.899783064097883E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999121321843	WITHOUT_CLASSIFICATION	8.78678157032306E-8	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999939816747	WITHOUT_CLASSIFICATION	6.01832524279362E-9	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999994281563	WITHOUT_CLASSIFICATION	5.718437000214444E-7	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999847956366	WITHOUT_CLASSIFICATION	1.5204363483458737E-8	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999989635141748	WITHOUT_CLASSIFICATION	1.036485825212268E-5	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999962322522903	WITHOUT_CLASSIFICATION	3.767747709787561E-6	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999996022878433	WITHOUT_CLASSIFICATION	3.9771215659376996E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999778478382283	WITHOUT_CLASSIFICATION	2.215216177168045E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999778478382283	WITHOUT_CLASSIFICATION	2.215216177168045E-5	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999999279685976	WITHOUT_CLASSIFICATION	7.203140235060805E-8	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999997912394726	WITHOUT_CLASSIFICATION	2.0876052755052817E-7	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999983666514164	WITHOUT_CLASSIFICATION	1.633348583592081E-6	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999995806509966	WITHOUT_CLASSIFICATION	4.19349003356266E-7	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999976570863967	WITHOUT_CLASSIFICATION	2.342913603287474E-6	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999998792592211	WITHOUT_CLASSIFICATION	1.2074077894525835E-7	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999990886138906	WITHOUT_CLASSIFICATION	9.113861093239642E-7	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999981934552485	WITHOUT_CLASSIFICATION	1.8065447515870883E-6	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999403186104107	WITHOUT_CLASSIFICATION	5.968138958924104E-5	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999999625716144	WITHOUT_CLASSIFICATION	3.742838569651219E-8	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999996914156266	WITHOUT_CLASSIFICATION	3.085843733709893E-7	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.999999397151887	WITHOUT_CLASSIFICATION	6.028481130641147E-7	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999996844146152	WITHOUT_CLASSIFICATION	3.155853848879944E-7	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999976725037	WITHOUT_CLASSIFICATION	2.327496241425646E-9	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999998101072577	WITHOUT_CLASSIFICATION	1.898927422921333E-6	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999966278723441	WITHOUT_CLASSIFICATION	3.3721276558444664E-6	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999976641055147	WITHOUT_CLASSIFICATION	2.3358944852550333E-6	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9996999282529399	WITHOUT_CLASSIFICATION	3.0007174706022727E-4	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999994885471634	WITHOUT_CLASSIFICATION	5.114528366397713E-7	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999999824422431	WITHOUT_CLASSIFICATION	1.7557756897749898E-8	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999986141730597	WITHOUT_CLASSIFICATION	1.3858269402027712E-6	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999998410598362	WITHOUT_CLASSIFICATION	1.589401637539159E-7	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999834460916885	WITHOUT_CLASSIFICATION	1.655390831144251E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999901857530764	WITHOUT_CLASSIFICATION	9.81424692354931E-6	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999834286734594	WITHOUT_CLASSIFICATION	1.6571326540662942E-5	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999851915347443	WITHOUT_CLASSIFICATION	1.480846525570383E-5	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999986162035808	WITHOUT_CLASSIFICATION	1.3837964192271874E-6	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999816062045618	WITHOUT_CLASSIFICATION	1.839379543826709E-5	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999999240256776	WITHOUT_CLASSIFICATION	7.597432240438137E-8	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999949654196	WITHOUT_CLASSIFICATION	5.034580408392228E-9	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999999632247847	WITHOUT_CLASSIFICATION	3.677521539017338E-8	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999999576956412	WITHOUT_CLASSIFICATION	4.230435880593978E-8	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999998395979945	WITHOUT_CLASSIFICATION	1.6040200542251364E-7	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999989654163262	WITHOUT_CLASSIFICATION	1.0345836737922606E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999888433558574	WITHOUT_CLASSIFICATION	1.115664414266215E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999888433558574	WITHOUT_CLASSIFICATION	1.115664414266215E-5	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999948529441963	WITHOUT_CLASSIFICATION	5.147055803574154E-6	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999964809662315	WITHOUT_CLASSIFICATION	3.5190337686227164E-6	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999962174827117	WITHOUT_CLASSIFICATION	3.7825172882970763E-6	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999969967549109	WITHOUT_CLASSIFICATION	3.003245089009287E-6	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999999969369	WITHOUT_CLASSIFICATION	3.0629556126782703E-12	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999797047980349	WITHOUT_CLASSIFICATION	2.029520196512785E-5	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999952347443933	WITHOUT_CLASSIFICATION	4.76525560664597E-6	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999993101538458	WITHOUT_CLASSIFICATION	6.898461542408569E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9997578112343827	WITHOUT_CLASSIFICATION	2.4218876561723875E-4	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997779188287	WITHOUT_CLASSIFICATION	2.2208117139359128E-7	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9984210854640103	WITHOUT_CLASSIFICATION	0.001578914535989577	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999945496109177	WITHOUT_CLASSIFICATION	5.450389082221401E-6	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999993503266522	WITHOUT_CLASSIFICATION	6.496733477993046E-6	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999994740140896	WITHOUT_CLASSIFICATION	5.259859104437947E-7	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999106519045	WITHOUT_CLASSIFICATION	8.934809551313547E-8	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9987734651464961	WITHOUT_CLASSIFICATION	0.0012265348535038456	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9987734651464961	WITHOUT_CLASSIFICATION	0.0012265348535038456	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999799717186403	WITHOUT_CLASSIFICATION	2.002828135972493E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999982487047702	WITHOUT_CLASSIFICATION	1.7512952297967775E-5	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999971597331365	WITHOUT_CLASSIFICATION	2.84026686342048E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999351511516	WITHOUT_CLASSIFICATION	6.484884832327088E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999978714557542	WITHOUT_CLASSIFICATION	2.1285442458087316E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996960160913767	WITHOUT_CLASSIFICATION	3.039839086232011E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999326865312	WITHOUT_CLASSIFICATION	6.731346879293525E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999995998233907	WITHOUT_CLASSIFICATION	4.001766092117928E-7	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999995998233907	WITHOUT_CLASSIFICATION	4.001766092117928E-7	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999957207917093	WITHOUT_CLASSIFICATION	4.27920829070812E-6	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999989061348826	WITHOUT_CLASSIFICATION	1.0938651173621187E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999987135271118	WITHOUT_CLASSIFICATION	1.2864728881437303E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9988971738021284	WITHOUT_CLASSIFICATION	0.001102826197871607	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.999999171980392	WITHOUT_CLASSIFICATION	8.280196079623489E-7	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999930170613115	WITHOUT_CLASSIFICATION	6.982938688525706E-6	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999985079744734	WITHOUT_CLASSIFICATION	1.4920255266088421E-6	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999330119345	WITHOUT_CLASSIFICATION	6.698806553144257E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999980006112	WITHOUT_CLASSIFICATION	1.999388743572527E-9	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999939107656591	WITHOUT_CLASSIFICATION	6.089234340919499E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9984540706793842	WITHOUT_CLASSIFICATION	0.0015459293206157353	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999960927453192	WITHOUT_CLASSIFICATION	3.907254680874574E-6	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999820848288	WITHOUT_CLASSIFICATION	1.7915171269431387E-8	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.99999993305071	WITHOUT_CLASSIFICATION	6.694928997127815E-8	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999961578466989	WITHOUT_CLASSIFICATION	3.84215330102521E-6	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999999931039647	WITHOUT_CLASSIFICATION	6.896035305361569E-8	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999996235534797	WITHOUT_CLASSIFICATION	3.764465202286006E-7	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999984199842579	WITHOUT_CLASSIFICATION	1.5800157422030957E-6	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999906441976226	WITHOUT_CLASSIFICATION	9.355802377343864E-6	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999964603042327	WITHOUT_CLASSIFICATION	3.5396957672333556E-6	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999307862512	WITHOUT_CLASSIFICATION	6.921374887002155E-8	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999999422209672	WITHOUT_CLASSIFICATION	5.777903275340344E-8	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999618566664831	WITHOUT_CLASSIFICATION	3.8143333516910314E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999920618830246	WITHOUT_CLASSIFICATION	7.93811697532297E-6	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999983457572642	WITHOUT_CLASSIFICATION	1.6542427357724137E-6	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999935119144099	WITHOUT_CLASSIFICATION	6.4880855901274024E-6	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999997668598892	WITHOUT_CLASSIFICATION	2.3314011081699235E-7	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999999924477	WITHOUT_CLASSIFICATION	7.552269159899459E-12	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999986073599875	WITHOUT_CLASSIFICATION	1.3926400125865543E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999541015872	WITHOUT_CLASSIFICATION	4.589841290496545E-8	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999707828242294	WITHOUT_CLASSIFICATION	2.921717577062294E-5	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999994206944336	WITHOUT_CLASSIFICATION	5.793055664472328E-7	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9937514294490909	WITHOUT_CLASSIFICATION	0.0062485705509091275	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999464596039	WITHOUT_CLASSIFICATION	5.354039619856454E-8	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999999600999292	WITHOUT_CLASSIFICATION	3.9900070860235745E-8	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999813987263415	WITHOUT_CLASSIFICATION	1.860127365855692E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999942974337654	WITHOUT_CLASSIFICATION	5.702566234631856E-6	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999975629226369	WITHOUT_CLASSIFICATION	2.4370773631220563E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999601040142	WITHOUT_CLASSIFICATION	3.989598594458858E-8	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997499815617	WITHOUT_CLASSIFICATION	2.5001843826136484E-7	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999774253477	WITHOUT_CLASSIFICATION	2.257465216760198E-8	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999849119445886	WITHOUT_CLASSIFICATION	1.5088055411403854E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999900800462675	WITHOUT_CLASSIFICATION	9.91995373239963E-6	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999943582755	WITHOUT_CLASSIFICATION	5.6417244667372825E-9	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999730612	WITHOUT_CLASSIFICATION	2.6938733257852584E-11	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999909721802134	WITHOUT_CLASSIFICATION	9.02781978649853E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999601040142	WITHOUT_CLASSIFICATION	3.989598594458858E-8	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997499815617	WITHOUT_CLASSIFICATION	2.5001843826136484E-7	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999984700686216	WITHOUT_CLASSIFICATION	1.5299313782835083E-6	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999993283639091	WITHOUT_CLASSIFICATION	6.716360908037142E-7	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999210481676	WITHOUT_CLASSIFICATION	7.895183240173382E-8	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999986512516239	WITHOUT_CLASSIFICATION	1.3487483761829208E-6	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999997370482797	WITHOUT_CLASSIFICATION	2.629517202734143E-7	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9998519823623698	WITHOUT_CLASSIFICATION	1.480176376301671E-4	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999406951712483	WITHOUT_CLASSIFICATION	5.930482875183768E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999965274829594	WITHOUT_CLASSIFICATION	3.472517040568239E-6	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999995868679747	WITHOUT_CLASSIFICATION	4.1313202531418885E-7	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9869115213819585	WITHOUT_CLASSIFICATION	0.013088478618041573	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999995291646	WITHOUT_CLASSIFICATION	4.708353932914778E-10	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9869115213819585	WITHOUT_CLASSIFICATION	0.013088478618041573	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999970552400901	WITHOUT_CLASSIFICATION	2.94475990987256E-6	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999996715395028	WITHOUT_CLASSIFICATION	3.284604972129431E-7	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999691131310592	WITHOUT_CLASSIFICATION	3.0886868940866644E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999749389632	WITHOUT_CLASSIFICATION	2.5061036731902413E-8	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9997081997944158	WITHOUT_CLASSIFICATION	2.918002055841422E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999803219979407	WITHOUT_CLASSIFICATION	1.9678002059322924E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999803219979407	WITHOUT_CLASSIFICATION	1.9678002059322924E-5	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999648365843837	WITHOUT_CLASSIFICATION	3.516341561619838E-5	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999958806723983	WITHOUT_CLASSIFICATION	4.119327601702848E-6	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999915746858646	WITHOUT_CLASSIFICATION	8.425314135335083E-6	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999640244028275	WITHOUT_CLASSIFICATION	3.597559717247632E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999934666222705	WITHOUT_CLASSIFICATION	6.53337772942766E-6	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999993519239732	WITHOUT_CLASSIFICATION	6.480760269487725E-7	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999997909642123	WITHOUT_CLASSIFICATION	2.0903578768713606E-7	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999737595971	WITHOUT_CLASSIFICATION	2.6240402900637703E-8	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999977539045232	WITHOUT_CLASSIFICATION	2.246095476838685E-6	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9999929464772395	WITHOUT_CLASSIFICATION	7.05352276061493E-6	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999999570365378	WITHOUT_CLASSIFICATION	4.2963462199349496E-8	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999907558456296	WITHOUT_CLASSIFICATION	9.244154370411812E-6	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9999844988292577	WITHOUT_CLASSIFICATION	1.5501170742396787E-5	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999998877443182	WITHOUT_CLASSIFICATION	1.1225568183236358E-7	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999999101846269	WITHOUT_CLASSIFICATION	8.981537313746538E-8	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999969984689412	WITHOUT_CLASSIFICATION	3.001531058690877E-6	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999965616462752	WITHOUT_CLASSIFICATION	3.4383537247033133E-6	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999997696895296	WITHOUT_CLASSIFICATION	2.303104703138709E-7	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999983985167371	WITHOUT_CLASSIFICATION	1.6014832629157787E-6	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999775655913699	WITHOUT_CLASSIFICATION	2.2434408630074923E-5	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999883628885	WITHOUT_CLASSIFICATION	1.1637111477348813E-8	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999992373829052	WITHOUT_CLASSIFICATION	7.6261709484663E-7	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999993999043333	WITHOUT_CLASSIFICATION	6.000956666710652E-7	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999999713530621	WITHOUT_CLASSIFICATION	2.8646937976594708E-8	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999996389020057	WITHOUT_CLASSIFICATION	3.610979942118653E-7	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999978840550748	WITHOUT_CLASSIFICATION	2.115944925131499E-6	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999628197446	WITHOUT_CLASSIFICATION	3.71802553906458E-8	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9996765483445282	WITHOUT_CLASSIFICATION	3.234516554716934E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999997506401835	WITHOUT_CLASSIFICATION	2.4935981640374167E-7	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999998928708002	WITHOUT_CLASSIFICATION	1.0712919981121687E-7	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9998677491918164	WITHOUT_CLASSIFICATION	1.3225080818351118E-4	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999656972280948	WITHOUT_CLASSIFICATION	3.430277190523708E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999997909642123	WITHOUT_CLASSIFICATION	2.0903578768713606E-7	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998211952566262	WITHOUT_CLASSIFICATION	1.78804743373858E-4	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999982651831691	WITHOUT_CLASSIFICATION	1.7348168308969384E-6	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9959201109128151	WITHOUT_CLASSIFICATION	0.004079889087184964	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999991995529278	WITHOUT_CLASSIFICATION	8.004470722713833E-7	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999994684255231	WITHOUT_CLASSIFICATION	5.315744769398191E-7	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999999699907755	WITHOUT_CLASSIFICATION	3.0009224631877446E-8	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999640244028275	WITHOUT_CLASSIFICATION	3.597559717247632E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999640244028275	WITHOUT_CLASSIFICATION	3.597559717247632E-5	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999999854100067	WITHOUT_CLASSIFICATION	1.4589993313061934E-8	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999998513767187	WITHOUT_CLASSIFICATION	1.486232814232251E-7	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999956623657145	WITHOUT_CLASSIFICATION	4.337634285552299E-6	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999998965924388	WITHOUT_CLASSIFICATION	1.0340756123637741E-7	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999953098061068	WITHOUT_CLASSIFICATION	4.690193893240985E-6	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9995016378361374	WITHOUT_CLASSIFICATION	4.983621638625516E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999523054033065	WITHOUT_CLASSIFICATION	4.769459669348344E-5	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999998218351763	WITHOUT_CLASSIFICATION	1.7816482361257103E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999949314793398	WITHOUT_CLASSIFICATION	5.068520660168434E-6	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998441717123	WITHOUT_CLASSIFICATION	1.558282876536923E-7	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999996070234156	WITHOUT_CLASSIFICATION	3.9297658436450836E-7	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999770088377037	WITHOUT_CLASSIFICATION	2.2991162296255083E-5	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999998121779772	WITHOUT_CLASSIFICATION	1.8782202284527824E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998441717123	WITHOUT_CLASSIFICATION	1.558282876536923E-7	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999999062944608	WITHOUT_CLASSIFICATION	9.370553922985851E-8	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999949851345764	WITHOUT_CLASSIFICATION	5.014865423498279E-6	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999943489517428	WITHOUT_CLASSIFICATION	5.651048257178051E-6	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9917381628427364	WITHOUT_CLASSIFICATION	0.008261837157263528	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999770088377037	WITHOUT_CLASSIFICATION	2.2991162296255083E-5	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999759382964034	WITHOUT_CLASSIFICATION	2.406170359665897E-5	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999969330236989	WITHOUT_CLASSIFICATION	3.066976301213283E-6	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999733288001	WITHOUT_CLASSIFICATION	2.6671199922195225E-8	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999860630963376	WITHOUT_CLASSIFICATION	1.3936903662331616E-5	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999907983771015	WITHOUT_CLASSIFICATION	9.201622898459438E-6	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999186911338	WITHOUT_CLASSIFICATION	8.130886621519814E-8	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999994103131747	WITHOUT_CLASSIFICATION	5.896868252463608E-7	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999985274038456	WITHOUT_CLASSIFICATION	1.4725961543065653E-6	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999996039260045	WITHOUT_CLASSIFICATION	3.960739954629885E-7	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999999566230046	WITHOUT_CLASSIFICATION	4.337699546141601E-8	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9975834209768911	WITHOUT_CLASSIFICATION	0.002416579023108795	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999691817344	WITHOUT_CLASSIFICATION	3.08182656731227E-8	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998441717123	WITHOUT_CLASSIFICATION	1.558282876536923E-7	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999759382964034	WITHOUT_CLASSIFICATION	2.406170359665897E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999733288001	WITHOUT_CLASSIFICATION	2.6671199922195225E-8	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999925675975522	WITHOUT_CLASSIFICATION	7.432402447799308E-6	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999955988385854	WITHOUT_CLASSIFICATION	4.401161414703819E-6	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999993288902412	WITHOUT_CLASSIFICATION	6.711097587531526E-7	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999770088377037	WITHOUT_CLASSIFICATION	2.2991162296255083E-5	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999998899577941	WITHOUT_CLASSIFICATION	1.1004220589780732E-7	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999998037836232	WITHOUT_CLASSIFICATION	1.9621637678613803E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999984644061942	WITHOUT_CLASSIFICATION	1.5355938057903514E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999996087372055	WITHOUT_CLASSIFICATION	3.9126279446566827E-7	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999985274038456	WITHOUT_CLASSIFICATION	1.4725961543065653E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999999062944608	WITHOUT_CLASSIFICATION	9.370553922985851E-8	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999959134082312	WITHOUT_CLASSIFICATION	4.086591768835867E-6	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999986386897118	WITHOUT_CLASSIFICATION	1.3613102881998888E-6	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999996490475169	WITHOUT_CLASSIFICATION	3.509524830821224E-7	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999999736515037	WITHOUT_CLASSIFICATION	2.634849628947084E-7	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999999255233873	WITHOUT_CLASSIFICATION	7.447661264387601E-8	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999999322176604	WITHOUT_CLASSIFICATION	6.778233958470014E-8	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.999981796249852	WITHOUT_CLASSIFICATION	1.82037501480375E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999749389632	WITHOUT_CLASSIFICATION	2.5061036731902413E-8	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999627950956	WITHOUT_CLASSIFICATION	3.7204904398350116E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934584125844	WITHOUT_CLASSIFICATION	6.5415874156883125E-6	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999980130965	WITHOUT_CLASSIFICATION	1.9869035524033076E-9	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9976917517291272	WITHOUT_CLASSIFICATION	0.0023082482708728946	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999406758384927	WITHOUT_CLASSIFICATION	5.932416150721758E-5	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999920399330962	WITHOUT_CLASSIFICATION	7.960066903770201E-6	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999978789704681	WITHOUT_CLASSIFICATION	2.1210295318047543E-6	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999992978915223	WITHOUT_CLASSIFICATION	7.021084775865958E-7	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999999978054568	WITHOUT_CLASSIFICATION	2.1945432051114485E-8	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999996087372055	WITHOUT_CLASSIFICATION	3.9126279446566827E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934584125844	WITHOUT_CLASSIFICATION	6.5415874156883125E-6	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.999997279296403	WITHOUT_CLASSIFICATION	2.7207035968985634E-6	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999986851326564	WITHOUT_CLASSIFICATION	1.3148673435477876E-6	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999992062167271	WITHOUT_CLASSIFICATION	7.937832729827022E-7	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999996386564237	WITHOUT_CLASSIFICATION	3.6134357635305274E-7	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999963606112534	WITHOUT_CLASSIFICATION	3.639388746577579E-6	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999776600869	WITHOUT_CLASSIFICATION	2.2339913104215482E-8	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999901577230716	WITHOUT_CLASSIFICATION	9.842276928416049E-6	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998742388850923	WITHOUT_CLASSIFICATION	1.2576111490770743E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999697543335953	WITHOUT_CLASSIFICATION	3.024566640474443E-5	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9990801561413322	WITHOUT_CLASSIFICATION	9.198438586677579E-4	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.999999832692521	WITHOUT_CLASSIFICATION	1.6730747894687652E-7	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999765177283612	WITHOUT_CLASSIFICATION	2.348227163882907E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999995117895835	WITHOUT_CLASSIFICATION	4.882104164293251E-7	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999928156678058	WITHOUT_CLASSIFICATION	7.184332194100451E-6	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999996735220515	WITHOUT_CLASSIFICATION	3.2647794844446907E-7	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998610237198	WITHOUT_CLASSIFICATION	1.389762800372363E-7	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999993132647448	WITHOUT_CLASSIFICATION	6.867352553291939E-7	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999897203855	WITHOUT_CLASSIFICATION	1.0279614583185264E-8	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999999357123898	WITHOUT_CLASSIFICATION	6.428761021577233E-8	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999954958805901	WITHOUT_CLASSIFICATION	4.504119409901864E-6	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9999967924212231	WITHOUT_CLASSIFICATION	3.2075787768292826E-6	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999999930575975	WITHOUT_CLASSIFICATION	6.942402641312242E-9	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999999948594111	WITHOUT_CLASSIFICATION	5.140588907182041E-8	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999239422765	WITHOUT_CLASSIFICATION	7.605772347440434E-8	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999543450214	WITHOUT_CLASSIFICATION	4.5654978682675376E-8	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9984576757317923	WITHOUT_CLASSIFICATION	0.0015423242682076521	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999980335541988	WITHOUT_CLASSIFICATION	1.9664458011204357E-6	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9995330709941788	WITHOUT_CLASSIFICATION	4.669290058212684E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999392880429682	WITHOUT_CLASSIFICATION	6.0711957031991547E-5	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9417580901973424	WITHOUT_CLASSIFICATION	0.05824190980265771	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999886956390199	WITHOUT_CLASSIFICATION	1.1304360980040873E-5	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999272512032494	WITHOUT_CLASSIFICATION	7.274879675050737E-5	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999998756117061	WITHOUT_CLASSIFICATION	1.2438829379735766E-7	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999995008377506	WITHOUT_CLASSIFICATION	4.991622493557503E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999806423694628	WITHOUT_CLASSIFICATION	1.9357630537225617E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999528441883	WITHOUT_CLASSIFICATION	4.71558116380756E-8	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.999999972785097	WITHOUT_CLASSIFICATION	2.7214903019486004E-8	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999956851268399	WITHOUT_CLASSIFICATION	4.314873160096649E-6	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999528441883	WITHOUT_CLASSIFICATION	4.71558116380756E-8	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999806423694628	WITHOUT_CLASSIFICATION	1.9357630537225617E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.999999972785097	WITHOUT_CLASSIFICATION	2.7214903019486004E-8	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999998814483584	WITHOUT_CLASSIFICATION	1.1855164162321975E-7	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999999684387605	WITHOUT_CLASSIFICATION	3.156123943991683E-8	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999972407521319	WITHOUT_CLASSIFICATION	2.7592478680611378E-6	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999825216690676	WITHOUT_CLASSIFICATION	1.7478330932349555E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999997107981347	WITHOUT_CLASSIFICATION	2.892018653915769E-7	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7912052598294299	DEFECT	0.20879474017057018	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998899241250463	WITHOUT_CLASSIFICATION	1.1007587495362178E-4	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999906112662897	WITHOUT_CLASSIFICATION	9.388733710231382E-6	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999974634447	WITHOUT_CLASSIFICATION	2.5365553324332972E-9	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999845599190541	WITHOUT_CLASSIFICATION	1.5440080945905275E-4	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.999997366277568	WITHOUT_CLASSIFICATION	2.633722431962007E-6	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999974911960682	WITHOUT_CLASSIFICATION	2.5088039317916742E-6	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997234260325664	WITHOUT_CLASSIFICATION	2.7657396743359136E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999839916974519	WITHOUT_CLASSIFICATION	1.6008302548069425E-5	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999995826908316	WITHOUT_CLASSIFICATION	4.1730916844358196E-7	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999989762005937	WITHOUT_CLASSIFICATION	1.0237994062977446E-6	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999993370536999	WITHOUT_CLASSIFICATION	6.629463000514805E-7	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999999718095805	WITHOUT_CLASSIFICATION	2.8190419506319186E-7	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999997813330793	WITHOUT_CLASSIFICATION	2.1866692073002451E-7	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999976325785	WITHOUT_CLASSIFICATION	2.3674214980448856E-9	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999929263526256	WITHOUT_CLASSIFICATION	7.073647374433367E-6	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999991524974	WITHOUT_CLASSIFICATION	8.475026259677857E-10	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999901737016484	WITHOUT_CLASSIFICATION	9.826298351616074E-6	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999981810354	WITHOUT_CLASSIFICATION	1.8189646091190127E-9	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.999999997574719	WITHOUT_CLASSIFICATION	2.4252809046845517E-9	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.999999997574719	WITHOUT_CLASSIFICATION	2.4252809046845517E-9	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999925152415	WITHOUT_CLASSIFICATION	7.48475837321459E-9	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999925152415	WITHOUT_CLASSIFICATION	7.48475837321459E-9	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999972282006316	WITHOUT_CLASSIFICATION	2.7717993683560407E-6	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999993370536999	WITHOUT_CLASSIFICATION	6.629463000514805E-7	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999999903072109	WITHOUT_CLASSIFICATION	9.692789124217408E-9	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999996398485	WITHOUT_CLASSIFICATION	3.6015145323855726E-10	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999880505381	WITHOUT_CLASSIFICATION	1.1949461963348517E-8	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999880505381	WITHOUT_CLASSIFICATION	1.1949461963348517E-8	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999987137948827	WITHOUT_CLASSIFICATION	1.2862051172953567E-6	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999999882185324	WITHOUT_CLASSIFICATION	1.1781467605303485E-7	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999984575151	WITHOUT_CLASSIFICATION	1.5424848541445212E-9	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999999493006659	WITHOUT_CLASSIFICATION	5.0699334078049385E-8	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9983694704843685	WITHOUT_CLASSIFICATION	0.0016305295156315055	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9333294954479917	WITHOUT_CLASSIFICATION	0.06667050455200829	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999868004169237	WITHOUT_CLASSIFICATION	1.3199583076381631E-5	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999877626054509	WITHOUT_CLASSIFICATION	1.223739454911835E-5	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999886563713795	WITHOUT_CLASSIFICATION	1.1343628620582796E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999972221642295	WITHOUT_CLASSIFICATION	2.777835770466109E-6	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999980007260325	WITHOUT_CLASSIFICATION	1.999273967499337E-6	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.999998946585131	WITHOUT_CLASSIFICATION	1.0534148689867312E-6	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999997277836545	WITHOUT_CLASSIFICATION	2.7221634552859325E-7	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999994966626085	WITHOUT_CLASSIFICATION	5.033373915429733E-7	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999998983577084	WITHOUT_CLASSIFICATION	1.0164229164308976E-7	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999996304812417	WITHOUT_CLASSIFICATION	3.695187582861737E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976029079591	WITHOUT_CLASSIFICATION	2.397092040864456E-6	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999995371054174	WITHOUT_CLASSIFICATION	4.6289458246586794E-7	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999998104145705	WITHOUT_CLASSIFICATION	1.895854294220419E-7	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999894736627268	WITHOUT_CLASSIFICATION	1.0526337273209604E-5	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999994322366764	WITHOUT_CLASSIFICATION	5.677633235548423E-7	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.999996636589312	WITHOUT_CLASSIFICATION	3.363410687996645E-6	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999997435190753	WITHOUT_CLASSIFICATION	2.564809247621629E-7	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999996928333403	WITHOUT_CLASSIFICATION	3.071666596374817E-7	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999980174537011	WITHOUT_CLASSIFICATION	1.982546298886076E-5	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999734993534	WITHOUT_CLASSIFICATION	2.6500646554986532E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934584125844	WITHOUT_CLASSIFICATION	6.5415874156883125E-6	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999765177283612	WITHOUT_CLASSIFICATION	2.348227163882907E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999973938513147	WITHOUT_CLASSIFICATION	2.6061486852708255E-6	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9996840291293216	WITHOUT_CLASSIFICATION	3.159708706783322E-4	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990022805698	WITHOUT_CLASSIFICATION	9.977194301540882E-7	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930201513236	WITHOUT_CLASSIFICATION	6.979848676422128E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999975135663197	WITHOUT_CLASSIFICATION	2.4864336803907895E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999975135663197	WITHOUT_CLASSIFICATION	2.4864336803907895E-6	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999793771676954	WITHOUT_CLASSIFICATION	2.0622832304672306E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999964931157675	WITHOUT_CLASSIFICATION	3.506884232342687E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999303025631868	WITHOUT_CLASSIFICATION	6.969743681314457E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999303025631868	WITHOUT_CLASSIFICATION	6.969743681314457E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999972344487456	WITHOUT_CLASSIFICATION	2.765551254407323E-5	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999989043138508	WITHOUT_CLASSIFICATION	1.0956861491958889E-5	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999468433037361	WITHOUT_CLASSIFICATION	5.3156696263812634E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999725818145	WITHOUT_CLASSIFICATION	2.741818549397184E-7	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999990003195747	WITHOUT_CLASSIFICATION	9.996804252444477E-7	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999999383860293	WITHOUT_CLASSIFICATION	6.161397070676455E-7	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999999082688134	WITHOUT_CLASSIFICATION	9.173118654766163E-8	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999992577812667	WITHOUT_CLASSIFICATION	7.422187333364921E-7	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999738826494177	WITHOUT_CLASSIFICATION	2.6117350582349773E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999738826494177	WITHOUT_CLASSIFICATION	2.6117350582349773E-5	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999961233964082	WITHOUT_CLASSIFICATION	3.8766035917608485E-6	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999077915579	WITHOUT_CLASSIFICATION	9.220844209737639E-8	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999077915579	WITHOUT_CLASSIFICATION	9.220844209737639E-8	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999938447741186	WITHOUT_CLASSIFICATION	6.155225881463948E-6	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999861035687	WITHOUT_CLASSIFICATION	1.3896431428728602E-8	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9977033806479358	WITHOUT_CLASSIFICATION	0.002296619352064192	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999998925757116	WITHOUT_CLASSIFICATION	1.074242883760848E-7	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999368331801	WITHOUT_CLASSIFICATION	6.316681993615655E-8	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998243199406	WITHOUT_CLASSIFICATION	1.7568005937068785E-7	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999999778402522	WITHOUT_CLASSIFICATION	2.2159747882982766E-8	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999996138550766	WITHOUT_CLASSIFICATION	3.861449233694808E-7	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999999991249954	WITHOUT_CLASSIFICATION	8.750045940858942E-9	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9822989077631245	WITHOUT_CLASSIFICATION	0.017701092236875497	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999883150052115	WITHOUT_CLASSIFICATION	1.1684994788611692E-5	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999984525607808	WITHOUT_CLASSIFICATION	1.5474392192834948E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999903440951609	WITHOUT_CLASSIFICATION	9.65590483908774E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999903440951609	WITHOUT_CLASSIFICATION	9.65590483908774E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999903440951609	WITHOUT_CLASSIFICATION	9.65590483908774E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999903440951609	WITHOUT_CLASSIFICATION	9.65590483908774E-6	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999941183043358	WITHOUT_CLASSIFICATION	5.88169566419626E-6	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9884811144049893	WITHOUT_CLASSIFICATION	0.011518885595010608	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999976984768999	WITHOUT_CLASSIFICATION	2.3015231000336974E-6	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9999924557701988	WITHOUT_CLASSIFICATION	7.544229801325574E-6	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999999491364118	WITHOUT_CLASSIFICATION	5.086358817239261E-8	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9998779419609866	WITHOUT_CLASSIFICATION	1.2205803901344798E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999978714557542	WITHOUT_CLASSIFICATION	2.1285442458087316E-5	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999995035215492	WITHOUT_CLASSIFICATION	4.964784508779265E-7	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999988938335328	WITHOUT_CLASSIFICATION	1.106166467198278E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999978714557542	WITHOUT_CLASSIFICATION	2.1285442458087316E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999978714557542	WITHOUT_CLASSIFICATION	2.1285442458087316E-5	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999938815209	WITHOUT_CLASSIFICATION	6.118479003195297E-9	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.999999682231145	WITHOUT_CLASSIFICATION	3.1776885506808927E-7	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999994946659655	WITHOUT_CLASSIFICATION	5.053340344198878E-7	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999988047767171	WITHOUT_CLASSIFICATION	1.1952232828187397E-6	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999903069032299	WITHOUT_CLASSIFICATION	9.693096770083829E-6	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999999607422464	WITHOUT_CLASSIFICATION	3.9257753606466863E-7	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999996319849164	WITHOUT_CLASSIFICATION	3.6801508362134863E-7	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999988047767171	WITHOUT_CLASSIFICATION	1.1952232828187397E-6	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9998975748706027	WITHOUT_CLASSIFICATION	1.024251293973741E-4	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999806559499316	WITHOUT_CLASSIFICATION	1.9344050068489922E-5	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999991225899801	WITHOUT_CLASSIFICATION	8.774100198987143E-7	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999982961116356	WITHOUT_CLASSIFICATION	1.7038883644246253E-6	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999928090727914	WITHOUT_CLASSIFICATION	7.190927208527502E-6	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999589373573148	WITHOUT_CLASSIFICATION	4.106264268520946E-5	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999661350725	WITHOUT_CLASSIFICATION	3.386492756759469E-8	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999815088413109	WITHOUT_CLASSIFICATION	1.8491158689135244E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999966716865	WITHOUT_CLASSIFICATION	3.32831350873657E-8	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999997738642009	WITHOUT_CLASSIFICATION	2.26135799036588E-7	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999805240875	WITHOUT_CLASSIFICATION	1.9475912547633006E-8	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998434224906	WITHOUT_CLASSIFICATION	1.5657750942653078E-7	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9979134923452502	WITHOUT_CLASSIFICATION	0.0020865076547497653	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999949523491314	WITHOUT_CLASSIFICATION	5.047650868622563E-6	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999993325030017	WITHOUT_CLASSIFICATION	6.674969984447968E-7	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998913937603305	WITHOUT_CLASSIFICATION	1.0860623966949377E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999999989778854	WITHOUT_CLASSIFICATION	1.0221146104408244E-8	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999436621086373	WITHOUT_CLASSIFICATION	5.633789136263256E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999715507525	WITHOUT_CLASSIFICATION	2.8449247628737153E-8	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999436621086373	WITHOUT_CLASSIFICATION	5.633789136263256E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999467047486	WITHOUT_CLASSIFICATION	5.329525149786501E-8	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999991278258578	WITHOUT_CLASSIFICATION	8.721741422102913E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999618971829713	WITHOUT_CLASSIFICATION	3.810281702863623E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999999889920516	WITHOUT_CLASSIFICATION	1.1007948399360385E-7	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999999989778854	WITHOUT_CLASSIFICATION	1.0221146104408244E-8	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999715507525	WITHOUT_CLASSIFICATION	2.8449247628737153E-8	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999467047486	WITHOUT_CLASSIFICATION	5.329525149786501E-8	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999197575118	WITHOUT_CLASSIFICATION	8.024248818296417E-8	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999634748905525	WITHOUT_CLASSIFICATION	3.6525109447605133E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9999949290346921	WITHOUT_CLASSIFICATION	5.070965307913127E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9999852282509331	WITHOUT_CLASSIFICATION	1.4771749066927168E-5	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9994794404256112	WITHOUT_CLASSIFICATION	5.205595743887836E-4	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999916385038	WITHOUT_CLASSIFICATION	8.361496076520724E-9	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976029079591	WITHOUT_CLASSIFICATION	2.397092040864456E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999991278258578	WITHOUT_CLASSIFICATION	8.721741422102913E-7	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999963028748413	WITHOUT_CLASSIFICATION	3.697125158735676E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9989464653863847	WITHOUT_CLASSIFICATION	0.001053534613615373	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999470118859	WITHOUT_CLASSIFICATION	5.2988114209355146E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976029079591	WITHOUT_CLASSIFICATION	2.397092040864456E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934584125844	WITHOUT_CLASSIFICATION	6.5415874156883125E-6	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999999212272208	WITHOUT_CLASSIFICATION	7.877277922341174E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976029079591	WITHOUT_CLASSIFICATION	2.397092040864456E-6	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999979419743	WITHOUT_CLASSIFICATION	2.0580258202845E-9	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997526315575	WITHOUT_CLASSIFICATION	2.4736844250289864E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934584125844	WITHOUT_CLASSIFICATION	6.5415874156883125E-6	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9995385249908443	WITHOUT_CLASSIFICATION	4.6147500915565994E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999678287712	WITHOUT_CLASSIFICATION	3.2171228830261097E-8	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998618281617	WITHOUT_CLASSIFICATION	1.3817183829723148E-7	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.999998514772099	WITHOUT_CLASSIFICATION	1.4852279009457624E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999164508821723	WITHOUT_CLASSIFICATION	8.354911782768665E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999847974089356	WITHOUT_CLASSIFICATION	1.5202591064279177E-5	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999998802294613	WITHOUT_CLASSIFICATION	1.1977053872516453E-7	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999988659156401	WITHOUT_CLASSIFICATION	1.1340843597933497E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999778478382283	WITHOUT_CLASSIFICATION	2.215216177168045E-5	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999990918395177	WITHOUT_CLASSIFICATION	9.081604823065643E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9977033806479358	WITHOUT_CLASSIFICATION	0.002296619352064192	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999984518022254	WITHOUT_CLASSIFICATION	1.5481977745928983E-6	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9952011671251755	WITHOUT_CLASSIFICATION	0.004798832874824574	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.999998975927296	WITHOUT_CLASSIFICATION	1.0240727039073405E-6	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998430701273409	WITHOUT_CLASSIFICATION	1.5692987265909824E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999997434644475	WITHOUT_CLASSIFICATION	2.5653555245499185E-7	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999998731459065	WITHOUT_CLASSIFICATION	1.2685409333416545E-7	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999644983536454	WITHOUT_CLASSIFICATION	3.5501646354597715E-4	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9993924047407752	WITHOUT_CLASSIFICATION	6.075952592248258E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999931589301	WITHOUT_CLASSIFICATION	6.841070002968558E-9	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999956955936917	WITHOUT_CLASSIFICATION	4.304406308224814E-6	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9975393334898653	WITHOUT_CLASSIFICATION	0.0024606665101346236	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9986417170968204	WITHOUT_CLASSIFICATION	0.0013582829031797076	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996015414025192	WITHOUT_CLASSIFICATION	3.984585974807664E-4	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999999868896504	WITHOUT_CLASSIFICATION	1.311034961045075E-8	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999998894454055	WITHOUT_CLASSIFICATION	1.1055459450752598E-7	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999374646433185	WITHOUT_CLASSIFICATION	6.253535668155445E-5	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999979966709718	WITHOUT_CLASSIFICATION	2.0033290281519698E-6	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999998125151958	WITHOUT_CLASSIFICATION	1.874848042759339E-7	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999994770328278	WITHOUT_CLASSIFICATION	5.229671721391248E-7	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999992924968092	WITHOUT_CLASSIFICATION	7.075031907580736E-7	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9995138620362322	WITHOUT_CLASSIFICATION	4.861379637678554E-4	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9997516212739358	WITHOUT_CLASSIFICATION	2.483787260642133E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999998862773757	WITHOUT_CLASSIFICATION	1.1372262433016647E-7	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999815948069464	WITHOUT_CLASSIFICATION	1.8405193053547992E-5	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9999981843731619	WITHOUT_CLASSIFICATION	1.8156268380566686E-6	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999797248497211	WITHOUT_CLASSIFICATION	2.02751502788675E-5	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999849784323859	WITHOUT_CLASSIFICATION	1.5021567614171623E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9984453103144412	WITHOUT_CLASSIFICATION	0.0015546896855587805	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999991920566688	WITHOUT_CLASSIFICATION	8.079433312882483E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934584125844	WITHOUT_CLASSIFICATION	6.5415874156883125E-6	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999866815885597	WITHOUT_CLASSIFICATION	1.3318411440201215E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999895498041563	WITHOUT_CLASSIFICATION	1.0450195843646869E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999895498041563	WITHOUT_CLASSIFICATION	1.0450195843646869E-5	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999349933721222	WITHOUT_CLASSIFICATION	6.500662787778055E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999847974089356	WITHOUT_CLASSIFICATION	1.5202591064279177E-5	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9998896964523964	WITHOUT_CLASSIFICATION	1.1030354760356224E-4	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999720044096	WITHOUT_CLASSIFICATION	2.7995590445353347E-8	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998499873276133	WITHOUT_CLASSIFICATION	1.5001267238671641E-4	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.999984232670895	WITHOUT_CLASSIFICATION	1.5767329105077967E-5	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999934293787796	WITHOUT_CLASSIFICATION	6.570621220431076E-6	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9999776020162492	WITHOUT_CLASSIFICATION	2.2397983750850494E-5	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999797747915103	WITHOUT_CLASSIFICATION	2.0225208489699938E-5	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999923625357	WITHOUT_CLASSIFICATION	7.637464344006187E-9	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999999228342083	WITHOUT_CLASSIFICATION	7.71657917100763E-7	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.999999464239568	WITHOUT_CLASSIFICATION	5.357604320906359E-7	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998992264281	WITHOUT_CLASSIFICATION	1.0077357201942464E-7	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999624695778	WITHOUT_CLASSIFICATION	3.753042220980431E-8	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999707952629	WITHOUT_CLASSIFICATION	2.9204737097608313E-8	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999076608508	WITHOUT_CLASSIFICATION	9.233914915856157E-8	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999995348008447	WITHOUT_CLASSIFICATION	4.651991553809475E-7	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999939275206	WITHOUT_CLASSIFICATION	6.072479483101555E-9	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999958416312	WITHOUT_CLASSIFICATION	4.158368793240673E-9	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999998808988874	WITHOUT_CLASSIFICATION	1.1910111262493523E-7	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999998048716557	WITHOUT_CLASSIFICATION	1.9512834424500505E-7	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999936659575209	WITHOUT_CLASSIFICATION	6.334042479087205E-6	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999993210746124	WITHOUT_CLASSIFICATION	6.789253876531195E-7	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999789745557235	WITHOUT_CLASSIFICATION	2.1025444276518135E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9984453103144412	WITHOUT_CLASSIFICATION	0.0015546896855587805	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999980614820246	WITHOUT_CLASSIFICATION	1.9385179754128513E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999884594470874	WITHOUT_CLASSIFICATION	1.154055291274882E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999995989720837	WITHOUT_CLASSIFICATION	4.010279163002106E-7	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999868274144272	WITHOUT_CLASSIFICATION	1.3172585572779434E-5	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9962050174994833	WITHOUT_CLASSIFICATION	0.0037949825005167024	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999942097540127	WITHOUT_CLASSIFICATION	5.7902459873124765E-6	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999969502602271	WITHOUT_CLASSIFICATION	3.0497397730370102E-6	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999999631937607	WITHOUT_CLASSIFICATION	3.680623931274932E-8	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998721029512	WITHOUT_CLASSIFICATION	1.2789704888732515E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999995146672304	WITHOUT_CLASSIFICATION	4.85332769618543E-7	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999998741223259	WITHOUT_CLASSIFICATION	1.258776741614246E-7	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999972071198852	WITHOUT_CLASSIFICATION	2.792880114914071E-6	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9981115872653927	WITHOUT_CLASSIFICATION	0.0018884127346072588	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9934068129623684	WITHOUT_CLASSIFICATION	0.006593187037631535	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999977292209	WITHOUT_CLASSIFICATION	2.2707791958543396E-9	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999977292209	WITHOUT_CLASSIFICATION	2.2707791958543396E-9	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999832013985953	WITHOUT_CLASSIFICATION	1.6798601404662477E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999999998812869	WITHOUT_CLASSIFICATION	1.1871308646207191E-9	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998183999023416	WITHOUT_CLASSIFICATION	1.8160009765833421E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998183999023416	WITHOUT_CLASSIFICATION	1.8160009765833421E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999955558362	WITHOUT_CLASSIFICATION	4.444163822053599E-9	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999587557789752	WITHOUT_CLASSIFICATION	4.124422102485775E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999817226340236	WITHOUT_CLASSIFICATION	1.8277365976395593E-5	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999999301556	WITHOUT_CLASSIFICATION	6.984439069539636E-11	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999992229372923	WITHOUT_CLASSIFICATION	7.770627076338043E-7	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999962084629863	WITHOUT_CLASSIFICATION	3.791537013696142E-6	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999995417231443	WITHOUT_CLASSIFICATION	4.582768557071853E-7	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999995417231443	WITHOUT_CLASSIFICATION	4.582768557071853E-7	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999983180034934	WITHOUT_CLASSIFICATION	1.6819965066077052E-6	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999988917125995	WITHOUT_CLASSIFICATION	1.1082874004939209E-6	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999995409238293	WITHOUT_CLASSIFICATION	4.590761707584001E-7	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999916650627471	WITHOUT_CLASSIFICATION	8.334937252836597E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999916650627471	WITHOUT_CLASSIFICATION	8.334937252836597E-6	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999998450596587	WITHOUT_CLASSIFICATION	1.5494034134727303E-7	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999992875273518	WITHOUT_CLASSIFICATION	7.124726482376795E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9996341547964465	WITHOUT_CLASSIFICATION	3.658452035535312E-4	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.99999998939708	WITHOUT_CLASSIFICATION	1.0602920065862175E-8	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999987810005325	WITHOUT_CLASSIFICATION	1.2189994673790949E-6	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999696651978	WITHOUT_CLASSIFICATION	3.033480222689598E-8	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999908245588699	WITHOUT_CLASSIFICATION	9.17544113013329E-6	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999998033546574	WITHOUT_CLASSIFICATION	1.9664534251921195E-7	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.999999997415268	WITHOUT_CLASSIFICATION	2.5847320405440243E-9	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999950301015837	WITHOUT_CLASSIFICATION	4.969898416336918E-6	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999989373590883	WITHOUT_CLASSIFICATION	1.0626409116517153E-6	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9998840649891105	WITHOUT_CLASSIFICATION	1.1593501088939486E-4	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999998483039558	WITHOUT_CLASSIFICATION	1.5169604430418402E-7	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999712635449028	WITHOUT_CLASSIFICATION	2.8736455097192686E-5	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999995862984216	WITHOUT_CLASSIFICATION	4.1370157843877584E-7	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999979116944131	WITHOUT_CLASSIFICATION	2.088305586809376E-6	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999727861965	WITHOUT_CLASSIFICATION	2.7213803476594795E-8	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999980192134023	WITHOUT_CLASSIFICATION	1.980786597800948E-6	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999548961834218	WITHOUT_CLASSIFICATION	4.510381657821891E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999933101984616	WITHOUT_CLASSIFICATION	6.689801538506846E-6	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999841389496876	WITHOUT_CLASSIFICATION	1.5861050312379692E-5	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999906459970483	WITHOUT_CLASSIFICATION	9.354002951709824E-6	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.999999778907567	WITHOUT_CLASSIFICATION	2.2109243300735284E-7	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999993684385409	WITHOUT_CLASSIFICATION	6.315614590919057E-6	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9999977212773932	WITHOUT_CLASSIFICATION	2.278722606870446E-6	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.999997710911813	WITHOUT_CLASSIFICATION	2.2890881869845606E-6	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999998582823385	WITHOUT_CLASSIFICATION	1.4171766155137855E-7	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999700585853942	WITHOUT_CLASSIFICATION	2.994141460582245E-5	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999998250497	WITHOUT_CLASSIFICATION	1.749502416407421E-10	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999743615766	WITHOUT_CLASSIFICATION	2.563842339558771E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.990789804578429	WITHOUT_CLASSIFICATION	0.009210195421571006	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999538999065	WITHOUT_CLASSIFICATION	4.610009340243222E-8	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999999735458187	WITHOUT_CLASSIFICATION	2.645418129620654E-8	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999915429125517	WITHOUT_CLASSIFICATION	8.457087448366152E-6	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999996857289714	WITHOUT_CLASSIFICATION	3.142710286363813E-7	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999826381552016	WITHOUT_CLASSIFICATION	1.736184479834721E-5	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999756180064966	WITHOUT_CLASSIFICATION	2.4381993503402897E-5	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999718539941	WITHOUT_CLASSIFICATION	2.814600590445611E-7	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999995842803704	WITHOUT_CLASSIFICATION	4.1571962957583825E-7	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999996318117194	WITHOUT_CLASSIFICATION	3.6818828067690937E-7	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999837321131027	WITHOUT_CLASSIFICATION	1.6267886897314485E-4	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9976808994702194	WITHOUT_CLASSIFICATION	0.002319100529780533	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999991306817986	WITHOUT_CLASSIFICATION	8.693182013993563E-7	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.999999874431622	WITHOUT_CLASSIFICATION	1.255683780019788E-7	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999994434459394	WITHOUT_CLASSIFICATION	5.565540605523456E-7	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999988683513518	WITHOUT_CLASSIFICATION	1.1316486483336825E-6	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9997405946567607	WITHOUT_CLASSIFICATION	2.5940534323931234E-4	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999991719653294	WITHOUT_CLASSIFICATION	8.280346706360291E-7	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999968355354427	WITHOUT_CLASSIFICATION	3.1644645572663982E-6	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999063264354	WITHOUT_CLASSIFICATION	9.367356460560079E-8	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998585453524595	WITHOUT_CLASSIFICATION	1.414546475404231E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999363619669	WITHOUT_CLASSIFICATION	6.363803306633032E-8	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.99999996854966	WITHOUT_CLASSIFICATION	3.145034007993977E-8	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999988075383	WITHOUT_CLASSIFICATION	1.192461660204033E-9	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999696020387436	WITHOUT_CLASSIFICATION	3.0397961256270543E-5	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999994676846027	WITHOUT_CLASSIFICATION	5.323153972303007E-7	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9991470380844739	WITHOUT_CLASSIFICATION	8.529619155260182E-4	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999998117732152	WITHOUT_CLASSIFICATION	1.8822678479918768E-6	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9994556173896734	WITHOUT_CLASSIFICATION	5.443826103267357E-4	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.99999967157847	WITHOUT_CLASSIFICATION	3.2842152998099546E-7	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999997319540575	WITHOUT_CLASSIFICATION	2.6804594249546686E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999997319540575	WITHOUT_CLASSIFICATION	2.6804594249546686E-6	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999580319548	WITHOUT_CLASSIFICATION	4.196804508495127E-8	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999972224311657	WITHOUT_CLASSIFICATION	2.7775688342318305E-6	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999995526564	WITHOUT_CLASSIFICATION	4.473436206446586E-10	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999996421242	WITHOUT_CLASSIFICATION	3.5787573778788744E-10	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999973967503709	WITHOUT_CLASSIFICATION	2.603249629076923E-6	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999997900628738	WITHOUT_CLASSIFICATION	2.0993712629204382E-7	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999753336204	WITHOUT_CLASSIFICATION	2.4666379574051813E-8	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999987518245	WITHOUT_CLASSIFICATION	1.248175391371795E-9	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999957374479632	WITHOUT_CLASSIFICATION	4.262552036808072E-6	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999807809687055	WITHOUT_CLASSIFICATION	1.9219031294594507E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999992531348854	WITHOUT_CLASSIFICATION	7.468651146046842E-6	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999719696122548	WITHOUT_CLASSIFICATION	2.803038774527458E-5	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999979580784526	WITHOUT_CLASSIFICATION	2.0419215473159634E-6	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999999642332	WITHOUT_CLASSIFICATION	3.576679687034028E-11	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998212183939	WITHOUT_CLASSIFICATION	1.7878160604835395E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998212183939	WITHOUT_CLASSIFICATION	1.7878160604835395E-7	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999997591183767	WITHOUT_CLASSIFICATION	2.4088162336415665E-7	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9995768689197282	WITHOUT_CLASSIFICATION	4.231310802717867E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999900645862	WITHOUT_CLASSIFICATION	9.935413778573586E-9	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999997881466933	WITHOUT_CLASSIFICATION	2.1185330676028612E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999646522324	WITHOUT_CLASSIFICATION	3.534776758095176E-8	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999650925696	WITHOUT_CLASSIFICATION	3.490743039515834E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999980540903184	WITHOUT_CLASSIFICATION	1.9459096816548278E-6	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9918896782235392	WITHOUT_CLASSIFICATION	0.008110321776460804	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999999390707	WITHOUT_CLASSIFICATION	6.092930442684478E-11	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999995295176124	WITHOUT_CLASSIFICATION	4.7048238757699677E-7	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999771185804	WITHOUT_CLASSIFICATION	2.2881419605587327E-8	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999997250370756	WITHOUT_CLASSIFICATION	2.749629245002976E-7	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999208347472	WITHOUT_CLASSIFICATION	7.91652527564195E-8	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999487597019	WITHOUT_CLASSIFICATION	5.124029823064108E-8	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999934213665433	WITHOUT_CLASSIFICATION	6.578633456577708E-6	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999327325826	WITHOUT_CLASSIFICATION	6.726741740005632E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999762463286	WITHOUT_CLASSIFICATION	2.375367143738324E-8	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999997820366163	WITHOUT_CLASSIFICATION	2.179633837384799E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999904289027458	WITHOUT_CLASSIFICATION	9.571097254234468E-6	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999277621556	WITHOUT_CLASSIFICATION	7.223784440135901E-8	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999986280729335	WITHOUT_CLASSIFICATION	1.3719270664863209E-6	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999994525904939	WITHOUT_CLASSIFICATION	5.474095060884113E-7	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999497201677	WITHOUT_CLASSIFICATION	5.0279832257111356E-8	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999997597909694	WITHOUT_CLASSIFICATION	2.4020903052940404E-7	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997569888315831	WITHOUT_CLASSIFICATION	2.4301116841686136E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998962512727203	WITHOUT_CLASSIFICATION	1.0374872727968526E-4	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999844163816543	WITHOUT_CLASSIFICATION	1.5583618345769603E-5	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9995801766822161	WITHOUT_CLASSIFICATION	4.198233177839106E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999999940566772	WITHOUT_CLASSIFICATION	5.943322800592903E-8	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999261779826	WITHOUT_CLASSIFICATION	7.382201743980397E-8	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999981505359703	WITHOUT_CLASSIFICATION	1.849464029785812E-6	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9996731141138614	WITHOUT_CLASSIFICATION	3.268858861385968E-4	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999993650079	WITHOUT_CLASSIFICATION	6.349920414995347E-10	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999961231809529	WITHOUT_CLASSIFICATION	3.876819047161011E-6	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.999931307297249	WITHOUT_CLASSIFICATION	6.869270275098491E-5	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998602076259	WITHOUT_CLASSIFICATION	1.3979237422350014E-7	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999854059356	WITHOUT_CLASSIFICATION	1.4594064389304309E-8	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999915618086	WITHOUT_CLASSIFICATION	8.438191456914662E-9	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999809305182804	WITHOUT_CLASSIFICATION	1.9069481719513454E-5	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999885794391103	WITHOUT_CLASSIFICATION	1.1420560889753971E-5	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999874434598121	WITHOUT_CLASSIFICATION	1.255654018789969E-4	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999874434598121	WITHOUT_CLASSIFICATION	1.255654018789969E-4	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.999999997623884	WITHOUT_CLASSIFICATION	2.376115925290554E-9	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9996472613625128	WITHOUT_CLASSIFICATION	3.5273863748724166E-4	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999931140162877	WITHOUT_CLASSIFICATION	6.88598371229971E-6	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999702302943695	WITHOUT_CLASSIFICATION	2.9769705630475013E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999996605347781	WITHOUT_CLASSIFICATION	3.39465221938729E-7	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999998975499665	WITHOUT_CLASSIFICATION	1.0245003345196157E-7	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9997925938875631	WITHOUT_CLASSIFICATION	2.074061124368043E-4	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999307403522	WITHOUT_CLASSIFICATION	6.925964774772089E-8	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9973341363913486	WITHOUT_CLASSIFICATION	0.002665863608651358	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997991069203	WITHOUT_CLASSIFICATION	2.0089307983039788E-7	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999365379737	WITHOUT_CLASSIFICATION	6.34620263168733E-8	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999983478209343	WITHOUT_CLASSIFICATION	1.6521790657037238E-5	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999819697662776	WITHOUT_CLASSIFICATION	1.8030233722408877E-5	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999908647341	WITHOUT_CLASSIFICATION	9.135265808433278E-9	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999985286776025	WITHOUT_CLASSIFICATION	1.4713223975055832E-6	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999998850915988	WITHOUT_CLASSIFICATION	1.1490840124236544E-7	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999078024747503	WITHOUT_CLASSIFICATION	9.219752524969309E-5	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.999996879736161	WITHOUT_CLASSIFICATION	3.120263839064156E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9996452735257757	WITHOUT_CLASSIFICATION	3.547264742243371E-4	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999665128158286	WITHOUT_CLASSIFICATION	3.348718417139035E-5	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9996326745634098	WITHOUT_CLASSIFICATION	3.673254365902639E-4	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999991327169758	WITHOUT_CLASSIFICATION	8.672830240421475E-7	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999999351246	WITHOUT_CLASSIFICATION	6.487543362190205E-11	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9995559065878727	WITHOUT_CLASSIFICATION	4.4409341212720384E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999673877366836	WITHOUT_CLASSIFICATION	3.2612263316394275E-5	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999114551692019	WITHOUT_CLASSIFICATION	8.854483079803066E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999994973097628	WITHOUT_CLASSIFICATION	5.026902371696307E-7	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999457086962	WITHOUT_CLASSIFICATION	5.4291303705632616E-8	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999961676914751	WITHOUT_CLASSIFICATION	3.832308524900688E-6	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.999967169306087	WITHOUT_CLASSIFICATION	3.283069391296146E-5	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.999999765248591	WITHOUT_CLASSIFICATION	2.3475140903474E-7	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999989735106476	WITHOUT_CLASSIFICATION	1.0264893524746908E-6	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999978884114	WITHOUT_CLASSIFICATION	2.111588609196847E-9	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999988470967035	WITHOUT_CLASSIFICATION	1.152903296484769E-6	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999983746737	WITHOUT_CLASSIFICATION	1.6253263839649395E-9	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999900757322259	WITHOUT_CLASSIFICATION	9.924267774156212E-6	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999887552999	WITHOUT_CLASSIFICATION	1.124470011232394E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999978642481	WITHOUT_CLASSIFICATION	2.135751903622087E-9	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999851242013775	WITHOUT_CLASSIFICATION	1.4875798622365168E-5	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999963153049615	WITHOUT_CLASSIFICATION	3.6846950384943857E-6	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.999997810045637	WITHOUT_CLASSIFICATION	2.1899543628827875E-6	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9994333475390482	WITHOUT_CLASSIFICATION	5.666524609517744E-4	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999972151676	WITHOUT_CLASSIFICATION	2.7848323638773867E-9	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999980022652	WITHOUT_CLASSIFICATION	1.9977346412571605E-9	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999649900848	WITHOUT_CLASSIFICATION	3.500991517960075E-8	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9998227593162158	WITHOUT_CLASSIFICATION	1.772406837842331E-4	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999988543577789	WITHOUT_CLASSIFICATION	1.1456422210351725E-6	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999979580784526	WITHOUT_CLASSIFICATION	2.0419215473159634E-6	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999588823413	WITHOUT_CLASSIFICATION	4.1117658816527924E-8	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999997376444	WITHOUT_CLASSIFICATION	2.623555699692694E-10	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.999969460501301	WITHOUT_CLASSIFICATION	3.053949869907043E-5	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999713545537	WITHOUT_CLASSIFICATION	2.864544639843544E-8	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999993606028	WITHOUT_CLASSIFICATION	6.393972675618501E-10	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999526580616275	WITHOUT_CLASSIFICATION	4.734193837242172E-5	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999955876687059	WITHOUT_CLASSIFICATION	4.4123312940823844E-6	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999866886652379	WITHOUT_CLASSIFICATION	1.3311334762108572E-5	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999891623021	WITHOUT_CLASSIFICATION	1.0837697862008973E-8	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999509626961083	WITHOUT_CLASSIFICATION	4.90373038917981E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999448572778866	WITHOUT_CLASSIFICATION	5.5142722113334286E-5	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999992483655183	WITHOUT_CLASSIFICATION	7.516344815907384E-7	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999989599462454	WITHOUT_CLASSIFICATION	1.0400537546230924E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999982686746716	WITHOUT_CLASSIFICATION	1.7313253284454386E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999062605318	WITHOUT_CLASSIFICATION	9.373946822767336E-8	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999997683434109	WITHOUT_CLASSIFICATION	2.3165658913867728E-7	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999967350000489	WITHOUT_CLASSIFICATION	3.2649999510716433E-6	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999998858757106	WITHOUT_CLASSIFICATION	1.1412428932600133E-7	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998662228495123	WITHOUT_CLASSIFICATION	1.3377715048777414E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999062605318	WITHOUT_CLASSIFICATION	9.373946822767336E-8	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9968811755005064	WITHOUT_CLASSIFICATION	0.0031188244994936973	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999901168361033	WITHOUT_CLASSIFICATION	9.883163896675294E-6	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999994212342	WITHOUT_CLASSIFICATION	5.787657508047014E-10	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999999721804406	WITHOUT_CLASSIFICATION	2.781955940663966E-7	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999992153054102	WITHOUT_CLASSIFICATION	7.846945898294464E-7	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999953005186599	WITHOUT_CLASSIFICATION	4.699481340142794E-6	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999382758	WITHOUT_CLASSIFICATION	6.172416153004053E-11	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999986441380148	WITHOUT_CLASSIFICATION	1.355861985214358E-6	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999571945143	WITHOUT_CLASSIFICATION	4.280548580449602E-8	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9996556335393965	WITHOUT_CLASSIFICATION	3.4436646060348474E-4	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999985683237993	WITHOUT_CLASSIFICATION	1.4316762007558876E-6	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999903462713424	WITHOUT_CLASSIFICATION	9.653728657638063E-6	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9998611486971419	WITHOUT_CLASSIFICATION	1.388513028581398E-4	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999462172244	WITHOUT_CLASSIFICATION	5.3782775659459854E-8	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999920095457526	WITHOUT_CLASSIFICATION	7.990454247286424E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999789745557235	WITHOUT_CLASSIFICATION	2.1025444276518135E-5	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999998162441648	WITHOUT_CLASSIFICATION	1.8375583519613864E-7	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999435303988	WITHOUT_CLASSIFICATION	5.6469601185439776E-8	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999688755026486	WITHOUT_CLASSIFICATION	3.112449735151806E-5	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9996847903674027	WITHOUT_CLASSIFICATION	3.1520963259739775E-4	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999999997886723	WITHOUT_CLASSIFICATION	2.1132771290753095E-9	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999995630586861	WITHOUT_CLASSIFICATION	4.3694131384503315E-7	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.999998010124528	WITHOUT_CLASSIFICATION	1.9898754719296105E-6	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999644062	WITHOUT_CLASSIFICATION	3.559367589862938E-11	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999565366084	WITHOUT_CLASSIFICATION	4.3463391548122305E-8	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999974680744685	WITHOUT_CLASSIFICATION	2.5319255314669636E-6	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.8003252438592876	WITHOUT_CLASSIFICATION	0.1996747561407124	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999577321221	WITHOUT_CLASSIFICATION	4.226787794584711E-8	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.999404221430803	WITHOUT_CLASSIFICATION	5.957785691970883E-4	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.5718178461033988	DEFECT	0.4281821538966013	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999695377908	WITHOUT_CLASSIFICATION	3.046220908352078E-8	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9994277212702893	WITHOUT_CLASSIFICATION	5.722787297106597E-4	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9991495590364262	WITHOUT_CLASSIFICATION	8.50440963573675E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999984314605167	WITHOUT_CLASSIFICATION	1.5685394833426063E-6	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999990516003	WITHOUT_CLASSIFICATION	9.483997017658326E-10	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999850679472	WITHOUT_CLASSIFICATION	1.4932052825101667E-8	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999998195650825	WITHOUT_CLASSIFICATION	1.8043491733985742E-7	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999992634678734	WITHOUT_CLASSIFICATION	7.365321265529616E-7	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.999999995080126	WITHOUT_CLASSIFICATION	4.91987391515396E-9	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999834286734594	WITHOUT_CLASSIFICATION	1.6571326540662942E-5	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999990376944188	WITHOUT_CLASSIFICATION	9.623055812575242E-7	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999990376944188	WITHOUT_CLASSIFICATION	9.623055812575242E-7	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999797047980349	WITHOUT_CLASSIFICATION	2.029520196512785E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997779188287	WITHOUT_CLASSIFICATION	2.2208117139359128E-7	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999351511516	WITHOUT_CLASSIFICATION	6.484884832327088E-8	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5243675412595735	WITHOUT_CLASSIFICATION	0.4756324587404266	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999725818145	WITHOUT_CLASSIFICATION	2.741818549397184E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999725818145	WITHOUT_CLASSIFICATION	2.741818549397184E-7	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9999978565409317	WITHOUT_CLASSIFICATION	2.1434590684015733E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999999931039647	WITHOUT_CLASSIFICATION	6.896035305361569E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999789113743258	WITHOUT_CLASSIFICATION	2.1088625674236605E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999618566664831	WITHOUT_CLASSIFICATION	3.8143333516910314E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999620823733	WITHOUT_CLASSIFICATION	3.791762670846839E-8	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999991563168322	WITHOUT_CLASSIFICATION	8.436831677952665E-6	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999968161989979	WITHOUT_CLASSIFICATION	3.183801002097863E-6	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999992668761	WITHOUT_CLASSIFICATION	7.33123896020283E-10	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999951428198617	WITHOUT_CLASSIFICATION	4.85718013835296E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995397908271	WITHOUT_CLASSIFICATION	4.6020917293433285E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995397908271	WITHOUT_CLASSIFICATION	4.6020917293433285E-7	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.99999827830919	WITHOUT_CLASSIFICATION	1.7216908100762422E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999985274038456	WITHOUT_CLASSIFICATION	1.4725961543065653E-6	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999186911338	WITHOUT_CLASSIFICATION	8.130886621519814E-8	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.999956333387353	WITHOUT_CLASSIFICATION	4.366661264700662E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934584125844	WITHOUT_CLASSIFICATION	6.5415874156883125E-6	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999999363616138	WITHOUT_CLASSIFICATION	6.363838627008826E-8	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999627950956	WITHOUT_CLASSIFICATION	3.7204904398350116E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934584125844	WITHOUT_CLASSIFICATION	6.5415874156883125E-6	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999967583604	WITHOUT_CLASSIFICATION	3.2416395676636366E-9	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999316453477561	WITHOUT_CLASSIFICATION	6.835465224381288E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9998239183374488	WITHOUT_CLASSIFICATION	1.7608166255115822E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999829730517	WITHOUT_CLASSIFICATION	1.702694824636093E-8	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9996556335393965	WITHOUT_CLASSIFICATION	3.4436646060348474E-4	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999994477788352	WITHOUT_CLASSIFICATION	5.522211648305134E-7	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9996774349544514	WITHOUT_CLASSIFICATION	3.225650455485993E-4	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999964608507808	WITHOUT_CLASSIFICATION	3.5391492191046853E-6	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.999999929657446	WITHOUT_CLASSIFICATION	7.034255395652227E-8	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999990855997261	WITHOUT_CLASSIFICATION	9.14400273897503E-7	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999982953663351	WITHOUT_CLASSIFICATION	1.70463366483222E-6	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999993061137109	WITHOUT_CLASSIFICATION	6.938862890841795E-7	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999836920132	WITHOUT_CLASSIFICATION	1.6307986843721457E-8	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999824377545213	WITHOUT_CLASSIFICATION	1.756224547871133E-5	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9987205289295675	WITHOUT_CLASSIFICATION	0.0012794710704324295	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9987205289295675	WITHOUT_CLASSIFICATION	0.0012794710704324295	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999988047767171	WITHOUT_CLASSIFICATION	1.1952232828187397E-6	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999154076824	WITHOUT_CLASSIFICATION	8.459231759962356E-8	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999978714557542	WITHOUT_CLASSIFICATION	2.1285442458087316E-5	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999976143222633	WITHOUT_CLASSIFICATION	2.3856777366568753E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999996640166551	WITHOUT_CLASSIFICATION	3.3598334489691194E-7	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999152222329	WITHOUT_CLASSIFICATION	8.477776713926715E-8	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999993325030017	WITHOUT_CLASSIFICATION	6.674969984447968E-7	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9998612291614243	WITHOUT_CLASSIFICATION	1.3877083857578282E-4	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999197575118	WITHOUT_CLASSIFICATION	8.024248818296417E-8	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999982150553455	WITHOUT_CLASSIFICATION	1.78494465442195E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976029079591	WITHOUT_CLASSIFICATION	2.397092040864456E-6	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.5679678057977813	WITHOUT_CLASSIFICATION	0.4320321942022186	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999994617511635	WITHOUT_CLASSIFICATION	5.382488364259592E-7	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999997292559395	WITHOUT_CLASSIFICATION	2.707440604716441E-7	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999996624093692	WITHOUT_CLASSIFICATION	3.3759063072644283E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999920500717	WITHOUT_CLASSIFICATION	7.94992829735291E-9	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999963981522063	WITHOUT_CLASSIFICATION	3.6018477935728175E-6	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999970949506719	WITHOUT_CLASSIFICATION	2.9050493280774645E-6	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9997616983151683	WITHOUT_CLASSIFICATION	2.3830168483177485E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9983740248163142	WITHOUT_CLASSIFICATION	0.0016259751836857248	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999956529532779	WITHOUT_CLASSIFICATION	4.347046722074515E-6	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999991147365553	WITHOUT_CLASSIFICATION	8.852634445288076E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9996341547964465	WITHOUT_CLASSIFICATION	3.658452035535312E-4	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999881967334	WITHOUT_CLASSIFICATION	1.1803266633366504E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992119098304	WITHOUT_CLASSIFICATION	7.880901694396205E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992119098304	WITHOUT_CLASSIFICATION	7.880901694396205E-7	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999573658300053	WITHOUT_CLASSIFICATION	4.263416999479099E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999993974457005	WITHOUT_CLASSIFICATION	6.0255429950861834E-6	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999999842585	WITHOUT_CLASSIFICATION	1.5741493290690613E-11	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999941076508109	WITHOUT_CLASSIFICATION	5.892349189124366E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999994118328921	WITHOUT_CLASSIFICATION	5.881671078937042E-7	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999534081812756	WITHOUT_CLASSIFICATION	4.6591818724301416E-5	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9994280745040588	WITHOUT_CLASSIFICATION	5.719254959413044E-4	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999937314583434	WITHOUT_CLASSIFICATION	6.268541656643148E-6	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9860232338388588	WITHOUT_CLASSIFICATION	0.013976766161141076	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9697339124441198	DEFECT	0.030266087555880332	WITHOUT_CLASSIFICATION
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.549621476030999	WITHOUT_CLASSIFICATION	0.450378523969001	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.6604727111368467	DEFECT	0.33952728886315336	WITHOUT_CLASSIFICATION
/*	DEFECT	0.9934878483224169	WITHOUT_CLASSIFICATION	0.006512151677583079	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9975772515227778	WITHOUT_CLASSIFICATION	0.0024227484772222454	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9865019146874873	DEFECT	0.013498085312512766	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.5441435092322264	DEFECT	0.45585649076777346	WITHOUT_CLASSIFICATION
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9999938085442516	DEFECT	6.191455748379008E-6	WITHOUT_CLASSIFICATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.887659482341671	DEFECT	0.11234051765832896	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7332276618824207	DEFECT	0.26677233811757917	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7332276618824207	DEFECT	0.26677233811757917	WITHOUT_CLASSIFICATION
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9135852865637832	WITHOUT_CLASSIFICATION	0.08641471343621683	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999827459810375	WITHOUT_CLASSIFICATION	1.7254018962397602E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9801991890509562	DEFECT	0.01980081094904381	WITHOUT_CLASSIFICATION
// this call is side-effecty	DEFECT	0.9999919376800351	WITHOUT_CLASSIFICATION	8.062319964896814E-6	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.9924834609636005	WITHOUT_CLASSIFICATION	0.007516539036399437	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9364182668806941	WITHOUT_CLASSIFICATION	0.06358173311930583	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9314028782625624	DEFECT	0.0685971217374376	WITHOUT_CLASSIFICATION
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.994820416430148	WITHOUT_CLASSIFICATION	0.005179583569852062	DEFECT
//TODO: is this completely correct?	DEFECT	0.8192862958583591	WITHOUT_CLASSIFICATION	0.18071370414164084	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999080714623645	WITHOUT_CLASSIFICATION	9.192853763556339E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.5587467344527933	DEFECT	0.4412532655472066	WITHOUT_CLASSIFICATION
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9995509569054911	WITHOUT_CLASSIFICATION	4.490430945089029E-4	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.9851902899655217	DEFECT	0.014809710034478236	WITHOUT_CLASSIFICATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9996335154608241	DEFECT	3.6648453917586144E-4	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9984146313164866	WITHOUT_CLASSIFICATION	0.0015853686835134541	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.8899416817764231	WITHOUT_CLASSIFICATION	0.11005831822357695	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.6028503127378427	WITHOUT_CLASSIFICATION	0.3971496872621573	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9074305930577723	WITHOUT_CLASSIFICATION	0.09256940694222772	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.7792661099116998	WITHOUT_CLASSIFICATION	0.22073389008830033	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7332276618824207	DEFECT	0.26677233811757917	WITHOUT_CLASSIFICATION
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.999968541918806	DEFECT	3.145808119403355E-5	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9307704641898461	WITHOUT_CLASSIFICATION	0.06922953581015388	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.5916859240789566	WITHOUT_CLASSIFICATION	0.4083140759210433	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.8887503346999619	WITHOUT_CLASSIFICATION	0.11124966530003817	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9999918620091977	WITHOUT_CLASSIFICATION	8.137990802273383E-6	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9998444301358655	WITHOUT_CLASSIFICATION	1.5556986413439025E-4	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9975633445104833	WITHOUT_CLASSIFICATION	0.002436655489516597	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9876401345172428	DEFECT	0.012359865482757243	WITHOUT_CLASSIFICATION
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.6156089652444554	WITHOUT_CLASSIFICATION	0.3843910347555445	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9958577573893544	WITHOUT_CLASSIFICATION	0.004142242610645517	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9998912827149775	WITHOUT_CLASSIFICATION	1.0871728502252454E-4	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.7667500011660802	DEFECT	0.23324999883391992	WITHOUT_CLASSIFICATION
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9993952238991429	WITHOUT_CLASSIFICATION	6.047761008571195E-4	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.7658270840965009	WITHOUT_CLASSIFICATION	0.23417291590349906	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9006394439956112	WITHOUT_CLASSIFICATION	0.09936055600438877	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.9414207591434446	WITHOUT_CLASSIFICATION	0.0585792408565555	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9124342077571215	DEFECT	0.0875657922428786	WITHOUT_CLASSIFICATION
