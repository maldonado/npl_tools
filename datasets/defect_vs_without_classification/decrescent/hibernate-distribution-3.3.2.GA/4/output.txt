test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999174002971	WITHOUT_CLASSIFICATION	8.259970283570518E-8	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999262360504307	WITHOUT_CLASSIFICATION	7.376394956927968E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999262360504307	WITHOUT_CLASSIFICATION	7.376394956927968E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999262360504307	WITHOUT_CLASSIFICATION	7.376394956927968E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999262360504307	WITHOUT_CLASSIFICATION	7.376394956927968E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999262360504307	WITHOUT_CLASSIFICATION	7.376394956927968E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999262360504307	WITHOUT_CLASSIFICATION	7.376394956927968E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999262360504307	WITHOUT_CLASSIFICATION	7.376394956927968E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.999990935268468	WITHOUT_CLASSIFICATION	9.06473153201145E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.999990935268468	WITHOUT_CLASSIFICATION	9.06473153201145E-6	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999920183670192	WITHOUT_CLASSIFICATION	7.981632980729733E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999473363140255	WITHOUT_CLASSIFICATION	5.2663685974495035E-5	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999998420717744	WITHOUT_CLASSIFICATION	1.5792822565690725E-7	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999785359582188	WITHOUT_CLASSIFICATION	2.1464041781162443E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999785359582188	WITHOUT_CLASSIFICATION	2.1464041781162443E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999862944641	WITHOUT_CLASSIFICATION	1.3705535893029069E-8	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999938739616121	WITHOUT_CLASSIFICATION	6.126038387831384E-6	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999993085663245	WITHOUT_CLASSIFICATION	6.914336754943236E-7	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999848317795025	WITHOUT_CLASSIFICATION	1.5168220497582208E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999751073516003	WITHOUT_CLASSIFICATION	2.489264839970723E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999751073516003	WITHOUT_CLASSIFICATION	2.489264839970723E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9994944428300864	WITHOUT_CLASSIFICATION	5.055571699137371E-4	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999955955288903	WITHOUT_CLASSIFICATION	4.404471109744101E-6	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.9991279586400414	WITHOUT_CLASSIFICATION	8.720413599586716E-4	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999971557928619	WITHOUT_CLASSIFICATION	2.8442071381946593E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999985093028576	WITHOUT_CLASSIFICATION	1.4906971423587436E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999734792874737	WITHOUT_CLASSIFICATION	2.652071252635477E-5	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.99998361441697	WITHOUT_CLASSIFICATION	1.6385583029974038E-5	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.999916470414373	WITHOUT_CLASSIFICATION	8.352958562696434E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998563109937756	WITHOUT_CLASSIFICATION	1.4368900622435546E-4	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999997569378147	WITHOUT_CLASSIFICATION	2.430621852970768E-7	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999885487415611	WITHOUT_CLASSIFICATION	1.1451258438801168E-5	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999629824009637	WITHOUT_CLASSIFICATION	3.701759903635402E-5	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999971890469219	WITHOUT_CLASSIFICATION	2.810953078056302E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999692418261505	WITHOUT_CLASSIFICATION	3.075817384949566E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999692418261505	WITHOUT_CLASSIFICATION	3.075817384949566E-5	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999978573538316	WITHOUT_CLASSIFICATION	2.14264616832914E-6	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.999897448437235	WITHOUT_CLASSIFICATION	1.0255156276501958E-4	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999150473536	WITHOUT_CLASSIFICATION	8.495264634496333E-8	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999989923681932	WITHOUT_CLASSIFICATION	1.0076318068034877E-6	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999831197362785	WITHOUT_CLASSIFICATION	1.688026372147275E-5	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999935822789041	WITHOUT_CLASSIFICATION	6.417721095798041E-6	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999996182513101	WITHOUT_CLASSIFICATION	3.817486899523266E-7	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999999963198215	WITHOUT_CLASSIFICATION	3.680178395549441E-9	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999053551966	WITHOUT_CLASSIFICATION	9.464480341135428E-8	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.999999019745947	WITHOUT_CLASSIFICATION	9.802540529974706E-7	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999977870447786	WITHOUT_CLASSIFICATION	2.2129552214182893E-6	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999941335155735	WITHOUT_CLASSIFICATION	5.8664844264934E-6	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999794722008	WITHOUT_CLASSIFICATION	2.052779923800432E-8	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999993858164244	WITHOUT_CLASSIFICATION	6.141835756437183E-7	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999875976913178	WITHOUT_CLASSIFICATION	1.2402308682178208E-5	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980654497529	WITHOUT_CLASSIFICATION	1.9345502470801333E-6	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999795268131483	WITHOUT_CLASSIFICATION	2.0473186851701048E-5	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999995717230423	WITHOUT_CLASSIFICATION	4.282769577253667E-7	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999989491731951	WITHOUT_CLASSIFICATION	1.0508268048916112E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999816404235274	WITHOUT_CLASSIFICATION	1.835957647251561E-5	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9480875613785393	WITHOUT_CLASSIFICATION	0.05191243862146068	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999933169081293	WITHOUT_CLASSIFICATION	6.6830918707849005E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999816404235274	WITHOUT_CLASSIFICATION	1.835957647251561E-5	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999933169081293	WITHOUT_CLASSIFICATION	6.6830918707849005E-6	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999971533324925	WITHOUT_CLASSIFICATION	2.8466675074105003E-6	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999897089306795	WITHOUT_CLASSIFICATION	1.02910693205081E-5	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999971642608846	WITHOUT_CLASSIFICATION	2.8357391154252575E-6	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999995101660923	WITHOUT_CLASSIFICATION	4.898339077042409E-6	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999776443926	WITHOUT_CLASSIFICATION	2.2355607354218583E-8	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999741608266	WITHOUT_CLASSIFICATION	2.58391734418568E-8	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9996844796606429	WITHOUT_CLASSIFICATION	3.155203393571249E-4	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999662720954285	WITHOUT_CLASSIFICATION	3.372790457142199E-5	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999966609176374	WITHOUT_CLASSIFICATION	3.3390823625580017E-6	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9999976014811924	WITHOUT_CLASSIFICATION	2.398518807680735E-6	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999975011412715	WITHOUT_CLASSIFICATION	2.498858728448301E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999933169081293	WITHOUT_CLASSIFICATION	6.6830918707849005E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999906966376	WITHOUT_CLASSIFICATION	9.303362363391202E-9	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999843096032179	WITHOUT_CLASSIFICATION	1.5690396781996745E-5	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999978861229718	WITHOUT_CLASSIFICATION	2.113877028126861E-6	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999695935730012	WITHOUT_CLASSIFICATION	3.0406426998847196E-5	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999987182376002	WITHOUT_CLASSIFICATION	1.281762399756206E-6	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999374725535901	WITHOUT_CLASSIFICATION	6.252744640987146E-5	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999912430363934	WITHOUT_CLASSIFICATION	8.756963606480886E-6	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999968256573669	WITHOUT_CLASSIFICATION	3.174342633093328E-6	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999998243621001	WITHOUT_CLASSIFICATION	1.7563789993237396E-7	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999998571356	WITHOUT_CLASSIFICATION	1.4286434276916607E-10	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999999936752889	WITHOUT_CLASSIFICATION	6.324711097058952E-8	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999515042299709	WITHOUT_CLASSIFICATION	4.8495770029057454E-5	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.999977239511817	WITHOUT_CLASSIFICATION	2.2760488182967638E-5	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999887355793646	WITHOUT_CLASSIFICATION	1.1264420635271192E-5	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999955126031	WITHOUT_CLASSIFICATION	4.4873969273556055E-9	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999996332101277	WITHOUT_CLASSIFICATION	3.6678987229140964E-7	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999525872193	WITHOUT_CLASSIFICATION	4.741278070650845E-8	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999931600674	WITHOUT_CLASSIFICATION	6.839932617056989E-9	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999780780384	WITHOUT_CLASSIFICATION	2.192196158392661E-8	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999782908425	WITHOUT_CLASSIFICATION	2.1709157382169424E-8	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999843881798146	WITHOUT_CLASSIFICATION	1.561182018532562E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999190060149883	WITHOUT_CLASSIFICATION	8.099398501175462E-5	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999856516853658	WITHOUT_CLASSIFICATION	1.4348314634209974E-5	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997768006295	WITHOUT_CLASSIFICATION	2.231993704894249E-7	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999190060149883	WITHOUT_CLASSIFICATION	8.099398501175462E-5	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999997732097534	WITHOUT_CLASSIFICATION	2.267902466468902E-7	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999956556711035	WITHOUT_CLASSIFICATION	4.344328896530804E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999816404235274	WITHOUT_CLASSIFICATION	1.835957647251561E-5	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999984987581026	WITHOUT_CLASSIFICATION	1.5012418972494618E-6	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.99999981431474	WITHOUT_CLASSIFICATION	1.8568525987517882E-7	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999879537265003	WITHOUT_CLASSIFICATION	1.2046273499770935E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999879537265003	WITHOUT_CLASSIFICATION	1.2046273499770935E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999561401329192	WITHOUT_CLASSIFICATION	4.3859867080778076E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999951452158	WITHOUT_CLASSIFICATION	4.854784229612386E-9	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.999997728105003	WITHOUT_CLASSIFICATION	2.271894996922588E-6	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999990298565	WITHOUT_CLASSIFICATION	9.701434619221436E-10	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999954711326186	WITHOUT_CLASSIFICATION	4.528867381373513E-6	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999234965985	WITHOUT_CLASSIFICATION	7.650340146068425E-8	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999946803625105	WITHOUT_CLASSIFICATION	5.319637489414243E-6	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9999842470200174	WITHOUT_CLASSIFICATION	1.5752979982608752E-5	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999999532334973	WITHOUT_CLASSIFICATION	4.676650271266056E-7	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999994015718031	WITHOUT_CLASSIFICATION	5.984281968377426E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999884059614	WITHOUT_CLASSIFICATION	1.1594038594545242E-8	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999884059614	WITHOUT_CLASSIFICATION	1.1594038594545242E-8	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999710682193196	WITHOUT_CLASSIFICATION	2.893178068054058E-5	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999965889911495	WITHOUT_CLASSIFICATION	3.411008850414224E-6	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999999295160277	WITHOUT_CLASSIFICATION	7.048397229783665E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999884059614	WITHOUT_CLASSIFICATION	1.1594038594545242E-8	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999710682193196	WITHOUT_CLASSIFICATION	2.893178068054058E-5	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999710682193196	WITHOUT_CLASSIFICATION	2.893178068054058E-5	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999998850697969	WITHOUT_CLASSIFICATION	1.1493020316017994E-7	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999960619837287	WITHOUT_CLASSIFICATION	3.938016271300372E-6	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999883067065566	WITHOUT_CLASSIFICATION	1.1693293443526852E-5	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999787394616	WITHOUT_CLASSIFICATION	2.1260538326197807E-8	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999643504158201	WITHOUT_CLASSIFICATION	3.5649584179936606E-5	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999643504158201	WITHOUT_CLASSIFICATION	3.5649584179936606E-5	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999995799353922	WITHOUT_CLASSIFICATION	4.200646078045901E-7	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999977972780214	WITHOUT_CLASSIFICATION	2.2027219784795185E-6	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999959995766164	WITHOUT_CLASSIFICATION	4.000423383521147E-6	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.999996157666291	WITHOUT_CLASSIFICATION	3.842333708919194E-6	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.999996157666291	WITHOUT_CLASSIFICATION	3.842333708919194E-6	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999993446905164	WITHOUT_CLASSIFICATION	6.553094835078384E-7	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9992130408822872	WITHOUT_CLASSIFICATION	7.869591177127056E-4	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999986161553069	WITHOUT_CLASSIFICATION	1.383844693088054E-6	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999998792128117	WITHOUT_CLASSIFICATION	1.2078718824048867E-7	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999999848335771	WITHOUT_CLASSIFICATION	1.516642290618456E-8	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999986870494187	WITHOUT_CLASSIFICATION	1.3129505812135552E-6	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999808984778615	WITHOUT_CLASSIFICATION	1.9101522138381192E-5	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999992813362868	WITHOUT_CLASSIFICATION	7.186637132211703E-7	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999996397887793	WITHOUT_CLASSIFICATION	3.602112206968757E-7	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999986161553069	WITHOUT_CLASSIFICATION	1.383844693088054E-6	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999467548421966	WITHOUT_CLASSIFICATION	5.324515780342628E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999804569731937	WITHOUT_CLASSIFICATION	1.954302680628709E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999804569731937	WITHOUT_CLASSIFICATION	1.954302680628709E-5	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999970609162624	WITHOUT_CLASSIFICATION	2.939083737585486E-6	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999985246650069	WITHOUT_CLASSIFICATION	1.4753349929569746E-6	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999406591871	WITHOUT_CLASSIFICATION	5.934081283673089E-8	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.99985279682246	WITHOUT_CLASSIFICATION	1.4720317754004462E-4	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999948952663934	WITHOUT_CLASSIFICATION	5.10473360660306E-5	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999998358496732	WITHOUT_CLASSIFICATION	1.641503268186565E-7	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.9999745874947432	WITHOUT_CLASSIFICATION	2.5412505256732757E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9993568558212378	WITHOUT_CLASSIFICATION	6.431441787621493E-4	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999933770178	WITHOUT_CLASSIFICATION	6.622982151004548E-9	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999985314625405	WITHOUT_CLASSIFICATION	1.4685374595188977E-6	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999985314625405	WITHOUT_CLASSIFICATION	1.4685374595188977E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999884657344974	WITHOUT_CLASSIFICATION	1.1534265502618863E-5	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999174002971	WITHOUT_CLASSIFICATION	8.259970283570518E-8	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999993833350297	WITHOUT_CLASSIFICATION	6.166649702532304E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999262360504307	WITHOUT_CLASSIFICATION	7.376394956927968E-5	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9999847928813299	WITHOUT_CLASSIFICATION	1.5207118670065035E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.999990935268468	WITHOUT_CLASSIFICATION	9.06473153201145E-6	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999874656888792	WITHOUT_CLASSIFICATION	1.2534311120791704E-5	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999998918609603	WITHOUT_CLASSIFICATION	1.0813903976306366E-7	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999988340302723	WITHOUT_CLASSIFICATION	1.165969727739759E-6	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9999634484355807	WITHOUT_CLASSIFICATION	3.655156441937472E-5	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9986389676790132	WITHOUT_CLASSIFICATION	0.001361032320986858	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999559549848985	WITHOUT_CLASSIFICATION	4.404501510160981E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.999906394485282	WITHOUT_CLASSIFICATION	9.360551471807388E-5	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.999999060734761	WITHOUT_CLASSIFICATION	9.392652390243752E-7	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999473363140255	WITHOUT_CLASSIFICATION	5.2663685974495035E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999573232985024	WITHOUT_CLASSIFICATION	4.2676701497494576E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999573232985024	WITHOUT_CLASSIFICATION	4.2676701497494576E-5	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9999970099159577	WITHOUT_CLASSIFICATION	2.9900840421857017E-6	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999903759443992	WITHOUT_CLASSIFICATION	9.624055600676288E-6	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999963022374024	WITHOUT_CLASSIFICATION	3.6977625976136493E-6	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.999995772274829	WITHOUT_CLASSIFICATION	4.22772517097073E-6	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999971602803175	WITHOUT_CLASSIFICATION	2.839719682558162E-6	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999998815224797	WITHOUT_CLASSIFICATION	1.1847752039436005E-7	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999785359582188	WITHOUT_CLASSIFICATION	2.1464041781162443E-5	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999948354115445	WITHOUT_CLASSIFICATION	5.1645884555162E-6	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999940293373761	WITHOUT_CLASSIFICATION	5.9706626237978135E-6	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999986707010026	WITHOUT_CLASSIFICATION	1.3292989973829739E-6	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999975067531286	WITHOUT_CLASSIFICATION	2.4932468713630442E-6	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.999984627785179	WITHOUT_CLASSIFICATION	1.5372214821037245E-5	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.9998990811770313	WITHOUT_CLASSIFICATION	1.0091882296875113E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999995221327187	WITHOUT_CLASSIFICATION	4.778672811704679E-7	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999997031106798	WITHOUT_CLASSIFICATION	2.9688932015536016E-7	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999991341651603	WITHOUT_CLASSIFICATION	8.65834839640697E-7	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999659546896331	WITHOUT_CLASSIFICATION	3.404531036690675E-5	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999986078392029	WITHOUT_CLASSIFICATION	1.3921607970943245E-5	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.999999771224223	WITHOUT_CLASSIFICATION	2.2877577705612358E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999262360504307	WITHOUT_CLASSIFICATION	7.376394956927968E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999262360504307	WITHOUT_CLASSIFICATION	7.376394956927968E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.999990935268468	WITHOUT_CLASSIFICATION	9.06473153201145E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.999990935268468	WITHOUT_CLASSIFICATION	9.06473153201145E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.999906394485282	WITHOUT_CLASSIFICATION	9.360551471807388E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999573232985024	WITHOUT_CLASSIFICATION	4.2676701497494576E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999995221327187	WITHOUT_CLASSIFICATION	4.778672811704679E-7	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999862944641	WITHOUT_CLASSIFICATION	1.3705535893029069E-8	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999957806627313	WITHOUT_CLASSIFICATION	4.219337268592455E-6	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.999989814920188	WITHOUT_CLASSIFICATION	1.0185079812026171E-5	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999820026009306	WITHOUT_CLASSIFICATION	1.7997399069283093E-5	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.9999775026073614	WITHOUT_CLASSIFICATION	2.2497392638675064E-5	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999997959145982	WITHOUT_CLASSIFICATION	2.040854018106366E-6	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.9998846389871706	WITHOUT_CLASSIFICATION	1.1536101282942826E-4	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9997085974998174	WITHOUT_CLASSIFICATION	2.9140250018251803E-4	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9999551548738804	WITHOUT_CLASSIFICATION	4.484512611947766E-5	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9999999638109691	WITHOUT_CLASSIFICATION	3.618903091205778E-8	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999968843241858	WITHOUT_CLASSIFICATION	3.115675814349397E-6	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999968843241858	WITHOUT_CLASSIFICATION	3.115675814349397E-6	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999999980473077	WITHOUT_CLASSIFICATION	1.9526922935089124E-8	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999981430092819	WITHOUT_CLASSIFICATION	1.856990718114644E-6	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999958664201739	WITHOUT_CLASSIFICATION	4.133579826155496E-6	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9998114974125758	WITHOUT_CLASSIFICATION	1.8850258742417257E-4	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999931817856	WITHOUT_CLASSIFICATION	6.818214473402834E-9	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.9999996706127879	WITHOUT_CLASSIFICATION	3.2938721201072313E-7	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.999998108087844	WITHOUT_CLASSIFICATION	1.8919121559944198E-6	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999938739616121	WITHOUT_CLASSIFICATION	6.126038387831384E-6	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.9998971406566963	WITHOUT_CLASSIFICATION	1.0285934330365348E-4	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999982355729515	WITHOUT_CLASSIFICATION	1.7644270484452722E-6	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999982355729515	WITHOUT_CLASSIFICATION	1.7644270484452722E-6	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.9999996229492282	WITHOUT_CLASSIFICATION	3.770507717352309E-7	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999992595482597	WITHOUT_CLASSIFICATION	7.404517402889012E-7	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9999946044672812	WITHOUT_CLASSIFICATION	5.395532718937606E-6	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999850203611885	WITHOUT_CLASSIFICATION	1.4979638811488806E-5	DEFECT
int	WITHOUT_CLASSIFICATION	0.9999334401532	WITHOUT_CLASSIFICATION	6.65598468001015E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.999990935268468	WITHOUT_CLASSIFICATION	9.06473153201145E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.999906394485282	WITHOUT_CLASSIFICATION	9.360551471807388E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999473363140255	WITHOUT_CLASSIFICATION	5.2663685974495035E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999995221327187	WITHOUT_CLASSIFICATION	4.778672811704679E-7	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999995221327187	WITHOUT_CLASSIFICATION	4.778672811704679E-7	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999737838027877	WITHOUT_CLASSIFICATION	2.621619721232442E-5	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999737838027877	WITHOUT_CLASSIFICATION	2.621619721232442E-5	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999973144341449	WITHOUT_CLASSIFICATION	2.685565855252146E-6	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999263540074456	WITHOUT_CLASSIFICATION	7.36459925544618E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999263540074456	WITHOUT_CLASSIFICATION	7.36459925544618E-5	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.9999937373381317	WITHOUT_CLASSIFICATION	6.262661868350205E-6	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.999998070595261	WITHOUT_CLASSIFICATION	1.9294047389711493E-6	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999986269991262	WITHOUT_CLASSIFICATION	1.3730008738344491E-6	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999974429883146	WITHOUT_CLASSIFICATION	2.557011685314455E-6	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.999253173419121	WITHOUT_CLASSIFICATION	7.468265808789596E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999848317795025	WITHOUT_CLASSIFICATION	1.5168220497582208E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999848317795025	WITHOUT_CLASSIFICATION	1.5168220497582208E-5	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9999709677548193	WITHOUT_CLASSIFICATION	2.9032245180665053E-5	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999850862243704	WITHOUT_CLASSIFICATION	1.4913775629570881E-5	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.9999931356681224	WITHOUT_CLASSIFICATION	6.864331877637012E-6	DEFECT
byte	WITHOUT_CLASSIFICATION	0.9999623357866648	WITHOUT_CLASSIFICATION	3.7664213335112736E-5	DEFECT
char	WITHOUT_CLASSIFICATION	0.9999883677276178	WITHOUT_CLASSIFICATION	1.163227238220023E-5	DEFECT
short	WITHOUT_CLASSIFICATION	0.9999863273899389	WITHOUT_CLASSIFICATION	1.3672610061062377E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999751073516003	WITHOUT_CLASSIFICATION	2.489264839970723E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999368773555152	WITHOUT_CLASSIFICATION	6.312264448482522E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999368773555152	WITHOUT_CLASSIFICATION	6.312264448482522E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9994944428300864	WITHOUT_CLASSIFICATION	5.055571699137371E-4	DEFECT
long	WITHOUT_CLASSIFICATION	0.9994944428300864	WITHOUT_CLASSIFICATION	5.055571699137371E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.999996238300773	WITHOUT_CLASSIFICATION	3.7616992270196336E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.999996238300773	WITHOUT_CLASSIFICATION	3.7616992270196336E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999996350789988	WITHOUT_CLASSIFICATION	3.64921001245176E-7	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999996350789988	WITHOUT_CLASSIFICATION	3.64921001245176E-7	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999848317795025	WITHOUT_CLASSIFICATION	1.5168220497582208E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999751073516003	WITHOUT_CLASSIFICATION	2.489264839970723E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999368773555152	WITHOUT_CLASSIFICATION	6.312264448482522E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999368773555152	WITHOUT_CLASSIFICATION	6.312264448482522E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9994944428300864	WITHOUT_CLASSIFICATION	5.055571699137371E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.999996238300773	WITHOUT_CLASSIFICATION	3.7616992270196336E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.999996238300773	WITHOUT_CLASSIFICATION	3.7616992270196336E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999996350789988	WITHOUT_CLASSIFICATION	3.64921001245176E-7	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999997532833169	WITHOUT_CLASSIFICATION	2.4671668302236555E-7	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999975901953699	WITHOUT_CLASSIFICATION	2.409804630020544E-6	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.9999805375022085	WITHOUT_CLASSIFICATION	1.9462497791561732E-5	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999944982881964	WITHOUT_CLASSIFICATION	5.501711803547638E-6	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9999997191721368	WITHOUT_CLASSIFICATION	2.8082786319193887E-7	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999937773441073	WITHOUT_CLASSIFICATION	6.222655892691152E-5	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9998617227500409	WITHOUT_CLASSIFICATION	1.3827724995910467E-4	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9553248652002413	WITHOUT_CLASSIFICATION	0.04467513479975881	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9997582761839646	WITHOUT_CLASSIFICATION	2.4172381603540955E-4	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999999462175012	WITHOUT_CLASSIFICATION	5.378249879943767E-7	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999912885678934	WITHOUT_CLASSIFICATION	8.711432106594172E-6	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999997748022864	WITHOUT_CLASSIFICATION	2.251977136118737E-7	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999561401329192	WITHOUT_CLASSIFICATION	4.3859867080778076E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999937773441073	WITHOUT_CLASSIFICATION	6.222655892691152E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999937773441073	WITHOUT_CLASSIFICATION	6.222655892691152E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999937773441073	WITHOUT_CLASSIFICATION	6.222655892691152E-5	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999928067961803	WITHOUT_CLASSIFICATION	7.1932038196919255E-6	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999314358852	WITHOUT_CLASSIFICATION	6.856411478577289E-7	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999314358852	WITHOUT_CLASSIFICATION	6.856411478577289E-7	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999610582415671	WITHOUT_CLASSIFICATION	3.894175843293317E-5	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999953149577558	WITHOUT_CLASSIFICATION	4.685042244118843E-6	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999933090921248	WITHOUT_CLASSIFICATION	6.6909078751931375E-6	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999945037155519	WITHOUT_CLASSIFICATION	5.496284448161367E-6	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999945037155519	WITHOUT_CLASSIFICATION	5.496284448161367E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999985093028576	WITHOUT_CLASSIFICATION	1.4906971423587436E-6	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999907650608786	WITHOUT_CLASSIFICATION	9.234939121343994E-6	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999907650608786	WITHOUT_CLASSIFICATION	9.234939121343994E-6	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999993758019261	WITHOUT_CLASSIFICATION	6.241980738970874E-6	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999992351103958	WITHOUT_CLASSIFICATION	7.64889604175834E-7	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999952972077327	WITHOUT_CLASSIFICATION	4.702792267220879E-6	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998653073193198	WITHOUT_CLASSIFICATION	1.3469268068020882E-4	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.9999256819127516	WITHOUT_CLASSIFICATION	7.431808724838727E-5	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.9999027874078229	WITHOUT_CLASSIFICATION	9.72125921770561E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999734792874737	WITHOUT_CLASSIFICATION	2.652071252635477E-5	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.99972984568149	WITHOUT_CLASSIFICATION	2.7015431850998097E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9905326425460351	WITHOUT_CLASSIFICATION	0.009467357453964768	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9998044990329243	WITHOUT_CLASSIFICATION	1.9550096707565727E-4	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999845250851871	WITHOUT_CLASSIFICATION	1.5474914812862125E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998563109937756	WITHOUT_CLASSIFICATION	1.4368900622435546E-4	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999637657917	WITHOUT_CLASSIFICATION	3.6234208330253956E-8	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999994784758958	WITHOUT_CLASSIFICATION	5.215241042741372E-7	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999794057611282	WITHOUT_CLASSIFICATION	2.0594238871760882E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998563109937756	WITHOUT_CLASSIFICATION	1.4368900622435546E-4	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999983726464361	WITHOUT_CLASSIFICATION	1.6273535639081482E-6	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999979801166895	WITHOUT_CLASSIFICATION	2.019883310475421E-6	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999890303202434	WITHOUT_CLASSIFICATION	1.096967975661098E-5	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9998647334144443	WITHOUT_CLASSIFICATION	1.352665855556095E-4	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999933761304686	WITHOUT_CLASSIFICATION	6.623869531445391E-6	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999941978785766	WITHOUT_CLASSIFICATION	5.802121423496364E-6	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999889724977824	WITHOUT_CLASSIFICATION	1.1027502217588296E-5	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999629824009637	WITHOUT_CLASSIFICATION	3.701759903635402E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999988636028719	WITHOUT_CLASSIFICATION	1.1363971281094265E-6	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999971890469219	WITHOUT_CLASSIFICATION	2.810953078056302E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999920195335575	WITHOUT_CLASSIFICATION	7.980466442410387E-6	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9999994898987287	WITHOUT_CLASSIFICATION	5.101012712392179E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9998904419595076	WITHOUT_CLASSIFICATION	1.0955804049242987E-4	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999734792874737	WITHOUT_CLASSIFICATION	2.652071252635477E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999988636028719	WITHOUT_CLASSIFICATION	1.1363971281094265E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999920195335575	WITHOUT_CLASSIFICATION	7.980466442410387E-6	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9998904419595076	WITHOUT_CLASSIFICATION	1.0955804049242987E-4	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999850166646328	WITHOUT_CLASSIFICATION	1.4983335367098896E-5	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.999873148684446	WITHOUT_CLASSIFICATION	1.2685131555398982E-4	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999946694518603	WITHOUT_CLASSIFICATION	5.330548139726879E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999692418261505	WITHOUT_CLASSIFICATION	3.075817384949566E-5	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999824808235888	WITHOUT_CLASSIFICATION	1.7519176411216055E-5	DEFECT
column index	WITHOUT_CLASSIFICATION	0.9999572042443469	WITHOUT_CLASSIFICATION	4.279575565318918E-5	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.9999898857413901	WITHOUT_CLASSIFICATION	1.0114258609856445E-5	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999681180707933	WITHOUT_CLASSIFICATION	3.188192920671822E-5	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999943912949327	WITHOUT_CLASSIFICATION	5.608705067197177E-6	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999703253497	WITHOUT_CLASSIFICATION	2.9674650238209514E-8	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998209166031	WITHOUT_CLASSIFICATION	1.7908339683257504E-7	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999917548421633	WITHOUT_CLASSIFICATION	8.245157836620328E-6	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999752524643	WITHOUT_CLASSIFICATION	2.4747535711679506E-8	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999993818844194	WITHOUT_CLASSIFICATION	6.18115580599587E-7	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.9999047339543876	WITHOUT_CLASSIFICATION	9.526604561237182E-5	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999938538603478	WITHOUT_CLASSIFICATION	6.146139652202285E-6	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.999897448437235	WITHOUT_CLASSIFICATION	1.0255156276501958E-4	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999991700148027	WITHOUT_CLASSIFICATION	8.299851972752829E-7	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.999961068761163	WITHOUT_CLASSIFICATION	3.8931238837053796E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999988636028719	WITHOUT_CLASSIFICATION	1.1363971281094265E-6	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999995236546695	WITHOUT_CLASSIFICATION	4.7634533043963567E-7	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999536176333	WITHOUT_CLASSIFICATION	4.6382366787186134E-8	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.9999969030145197	WITHOUT_CLASSIFICATION	3.0969854802131012E-6	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999997988202457	WITHOUT_CLASSIFICATION	2.0117975429747068E-7	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9999996830826263	WITHOUT_CLASSIFICATION	3.169173736495021E-7	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.999982281930108	WITHOUT_CLASSIFICATION	1.7718069892105814E-5	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999995979062	WITHOUT_CLASSIFICATION	4.0209373216684146E-10	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999144643338	WITHOUT_CLASSIFICATION	8.553566619575556E-8	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999457046038102	WITHOUT_CLASSIFICATION	5.4295396189923426E-5	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.9999486125983353	WITHOUT_CLASSIFICATION	5.138740166459703E-5	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999801177782276	WITHOUT_CLASSIFICATION	1.988222177242181E-5	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999919644522887	WITHOUT_CLASSIFICATION	8.035547711210968E-6	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9995688230236568	WITHOUT_CLASSIFICATION	4.311769763432754E-4	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999989923681932	WITHOUT_CLASSIFICATION	1.0076318068034877E-6	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9999998016392806	WITHOUT_CLASSIFICATION	1.9836071938312928E-7	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999967061081467	WITHOUT_CLASSIFICATION	3.293891853193824E-6	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.999986558844818	WITHOUT_CLASSIFICATION	1.3441155182086776E-5	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999979672131667	WITHOUT_CLASSIFICATION	2.032786833401325E-6	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9999990273722482	WITHOUT_CLASSIFICATION	9.726277517449417E-7	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999638033104388	WITHOUT_CLASSIFICATION	3.61966895612706E-5	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999956748	WITHOUT_CLASSIFICATION	4.325175575473463E-12	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.99991018746531	WITHOUT_CLASSIFICATION	8.981253468997514E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999998890693832	WITHOUT_CLASSIFICATION	1.1093061676748694E-7	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999979407166961	WITHOUT_CLASSIFICATION	2.05928330386087E-6	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999972029962491	WITHOUT_CLASSIFICATION	2.7970037508985814E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999972029962491	WITHOUT_CLASSIFICATION	2.7970037508985814E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999855000419325	WITHOUT_CLASSIFICATION	1.4499958067499656E-5	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999962866316027	WITHOUT_CLASSIFICATION	3.713368397334081E-6	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999998995089101	WITHOUT_CLASSIFICATION	1.0049108987124179E-7	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999951617176722	WITHOUT_CLASSIFICATION	4.83828232784639E-6	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999984301151009	WITHOUT_CLASSIFICATION	1.5698848989729131E-6	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9960697458986543	WITHOUT_CLASSIFICATION	0.003930254101345793	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999680961139567	WITHOUT_CLASSIFICATION	3.1903886043399366E-5	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999957068290618	WITHOUT_CLASSIFICATION	4.29317093822903E-6	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999869742183425	WITHOUT_CLASSIFICATION	1.3025781657520985E-5	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999944414891562	WITHOUT_CLASSIFICATION	5.558510843892904E-6	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999881618324606	WITHOUT_CLASSIFICATION	1.1838167539390357E-5	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999973693008196	WITHOUT_CLASSIFICATION	2.6306991803870687E-6	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9999835397733332	WITHOUT_CLASSIFICATION	1.646022666670654E-5	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9982188826868863	WITHOUT_CLASSIFICATION	0.0017811173131136349	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999875847251424	WITHOUT_CLASSIFICATION	1.241527485768027E-5	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9992634603559558	WITHOUT_CLASSIFICATION	7.365396440440654E-4	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999811756771809	WITHOUT_CLASSIFICATION	1.8824322819128896E-5	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999404194638662	WITHOUT_CLASSIFICATION	5.958053613378737E-5	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991039295226	WITHOUT_CLASSIFICATION	8.960704773947458E-6	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999367080842	WITHOUT_CLASSIFICATION	6.329191583101316E-8	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999737592270393	WITHOUT_CLASSIFICATION	2.6240772960624763E-5	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.999999903113791	WITHOUT_CLASSIFICATION	9.688620894560249E-8	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999906986622091	WITHOUT_CLASSIFICATION	9.301337790880683E-6	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9998161581081361	WITHOUT_CLASSIFICATION	1.838418918639592E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999967564036362	WITHOUT_CLASSIFICATION	3.2435963637443342E-6	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999985434401132	WITHOUT_CLASSIFICATION	1.4565598867459768E-6	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999960834493816	WITHOUT_CLASSIFICATION	3.916550618420095E-6	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999997734696047	WITHOUT_CLASSIFICATION	2.2653039536903786E-7	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999993920069143	WITHOUT_CLASSIFICATION	6.079930856455574E-7	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999777595499013	WITHOUT_CLASSIFICATION	2.2240450098673414E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999367080842	WITHOUT_CLASSIFICATION	6.329191583101316E-8	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999934867647018	WITHOUT_CLASSIFICATION	6.513235298187365E-6	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.99999947199309	WITHOUT_CLASSIFICATION	5.280069100261276E-7	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999999298962225	WITHOUT_CLASSIFICATION	7.0103777510197E-7	DEFECT
found	WITHOUT_CLASSIFICATION	0.9998722222317439	WITHOUT_CLASSIFICATION	1.2777776825606551E-4	DEFECT
found	WITHOUT_CLASSIFICATION	0.9998722222317439	WITHOUT_CLASSIFICATION	1.2777776825606551E-4	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999999829448464	WITHOUT_CLASSIFICATION	1.705515364007623E-8	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999972556126321	WITHOUT_CLASSIFICATION	2.7443873678421023E-6	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9999767142800201	WITHOUT_CLASSIFICATION	2.3285719979872594E-5	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9999767142800201	WITHOUT_CLASSIFICATION	2.3285719979872594E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999998890693832	WITHOUT_CLASSIFICATION	1.1093061676748694E-7	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999995159265648	WITHOUT_CLASSIFICATION	4.840734352202563E-7	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999946810754057	WITHOUT_CLASSIFICATION	5.318924594242747E-6	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998972602235	WITHOUT_CLASSIFICATION	1.0273977648565056E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999884657344974	WITHOUT_CLASSIFICATION	1.1534265502618863E-5	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999946810754057	WITHOUT_CLASSIFICATION	5.318924594242747E-6	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998972602235	WITHOUT_CLASSIFICATION	1.0273977648565056E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999997448271648	WITHOUT_CLASSIFICATION	2.5517283523517683E-7	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999996557810379	WITHOUT_CLASSIFICATION	3.4421896207709836E-7	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999676305745466	WITHOUT_CLASSIFICATION	3.23694254532985E-5	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999991358379114	WITHOUT_CLASSIFICATION	8.641620885947021E-7	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999266679164033	WITHOUT_CLASSIFICATION	7.33320835967356E-5	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999952574788555	WITHOUT_CLASSIFICATION	4.742521144382581E-6	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999990781428035	WITHOUT_CLASSIFICATION	9.218571965510453E-7	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999990781428035	WITHOUT_CLASSIFICATION	9.218571965510453E-7	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999966245285706	WITHOUT_CLASSIFICATION	3.375471429362199E-6	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999965700686	WITHOUT_CLASSIFICATION	3.4299315299629836E-9	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999997896330368	WITHOUT_CLASSIFICATION	2.103669632084186E-6	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999998188727125	WITHOUT_CLASSIFICATION	1.811272873764342E-7	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999999784356897	WITHOUT_CLASSIFICATION	2.156431031842425E-8	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999982773103862	WITHOUT_CLASSIFICATION	1.7226896138669962E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999884657344974	WITHOUT_CLASSIFICATION	1.1534265502618863E-5	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999961512379835	WITHOUT_CLASSIFICATION	3.848762016499323E-6	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999861547880805	WITHOUT_CLASSIFICATION	1.384521191961495E-5	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999861547880805	WITHOUT_CLASSIFICATION	1.384521191961495E-5	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999838014922747	WITHOUT_CLASSIFICATION	1.6198507725274346E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999997448271648	WITHOUT_CLASSIFICATION	2.5517283523517683E-7	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999210990345998	WITHOUT_CLASSIFICATION	7.890096540019641E-5	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9984931371772026	WITHOUT_CLASSIFICATION	0.0015068628227974399	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9993521653462327	WITHOUT_CLASSIFICATION	6.478346537674098E-4	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999915611281206	WITHOUT_CLASSIFICATION	8.438871879364554E-6	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9987814139702209	WITHOUT_CLASSIFICATION	0.0012185860297790803	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999997448271648	WITHOUT_CLASSIFICATION	2.5517283523517683E-7	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999915611281206	WITHOUT_CLASSIFICATION	8.438871879364554E-6	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9987814139702209	WITHOUT_CLASSIFICATION	0.0012185860297790803	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999974026983	WITHOUT_CLASSIFICATION	2.5973017238479627E-9	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999955586045037	WITHOUT_CLASSIFICATION	4.441395496226102E-6	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999350747391028	WITHOUT_CLASSIFICATION	6.492526089712383E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999997448271648	WITHOUT_CLASSIFICATION	2.5517283523517683E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999997448271648	WITHOUT_CLASSIFICATION	2.5517283523517683E-7	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9999970996292813	WITHOUT_CLASSIFICATION	2.900370718683205E-6	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9999975290470782	WITHOUT_CLASSIFICATION	2.4709529219153567E-6	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9999971005011865	WITHOUT_CLASSIFICATION	2.8994988135157365E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999993858164244	WITHOUT_CLASSIFICATION	6.141835756437183E-7	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9999973528229776	WITHOUT_CLASSIFICATION	2.647177022400994E-6	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999124672823	WITHOUT_CLASSIFICATION	8.753271777996864E-8	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999985108475724	WITHOUT_CLASSIFICATION	1.4891524275733606E-6	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999994477165298	WITHOUT_CLASSIFICATION	5.522834702080153E-7	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999969774778615	WITHOUT_CLASSIFICATION	3.0225221384604627E-6	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9999854416404556	WITHOUT_CLASSIFICATION	1.4558359544524702E-5	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999796389765444	WITHOUT_CLASSIFICATION	2.0361023455570897E-5	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999973590161831	WITHOUT_CLASSIFICATION	2.6409838169646324E-6	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999022843568	WITHOUT_CLASSIFICATION	9.771564317994254E-8	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999920444396836	WITHOUT_CLASSIFICATION	7.955560316428529E-6	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999980531723678	WITHOUT_CLASSIFICATION	1.946827632203434E-5	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999730566810089	WITHOUT_CLASSIFICATION	2.694331899109707E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999993858164244	WITHOUT_CLASSIFICATION	6.141835756437183E-7	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999939730630315	WITHOUT_CLASSIFICATION	6.0269369684922245E-6	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.999999792939404	WITHOUT_CLASSIFICATION	2.07060596014824E-7	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999847877337	WITHOUT_CLASSIFICATION	1.521226632806128E-8	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999918843636157	WITHOUT_CLASSIFICATION	8.115636384274595E-6	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998857928386574	WITHOUT_CLASSIFICATION	1.1420716134251374E-4	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998857928386574	WITHOUT_CLASSIFICATION	1.1420716134251374E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999993858164244	WITHOUT_CLASSIFICATION	6.141835756437183E-7	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9997376249697342	WITHOUT_CLASSIFICATION	2.623750302659061E-4	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999996059518538	WITHOUT_CLASSIFICATION	3.9404814634420953E-7	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9975273769124482	WITHOUT_CLASSIFICATION	0.0024726230875518848	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999993434897495	WITHOUT_CLASSIFICATION	6.565102504738273E-7	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999824753940754	WITHOUT_CLASSIFICATION	1.7524605924668984E-5	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999994761336337	WITHOUT_CLASSIFICATION	5.238663661722023E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9994268193296946	WITHOUT_CLASSIFICATION	5.73180670305352E-4	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999999307391342	WITHOUT_CLASSIFICATION	6.926086578800439E-8	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.99999999979732	WITHOUT_CLASSIFICATION	2.0267999444071247E-10	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860952793451	WITHOUT_CLASSIFICATION	1.3904720655004367E-5	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999997172622604	WITHOUT_CLASSIFICATION	2.8273773953070093E-7	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9995463967122681	WITHOUT_CLASSIFICATION	4.53603287731847E-4	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999129006572781	WITHOUT_CLASSIFICATION	8.709934272193018E-5	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999807780194397	WITHOUT_CLASSIFICATION	1.922198056027375E-5	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999984135511	WITHOUT_CLASSIFICATION	1.5864489248573536E-9	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969167269924	WITHOUT_CLASSIFICATION	3.0832730076860304E-6	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999820569953072	WITHOUT_CLASSIFICATION	1.7943004692758027E-5	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999909975582042	WITHOUT_CLASSIFICATION	9.002441795821504E-6	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999974954119977	WITHOUT_CLASSIFICATION	2.5045880023075077E-6	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993885875998	WITHOUT_CLASSIFICATION	6.114124001194608E-7	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999476780026346	WITHOUT_CLASSIFICATION	5.232199736543897E-5	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999991325197194	WITHOUT_CLASSIFICATION	8.674802806745944E-7	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999998687373679	WITHOUT_CLASSIFICATION	1.3126263199518596E-7	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999934702155825	WITHOUT_CLASSIFICATION	6.529784417493611E-5	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946115652731	WITHOUT_CLASSIFICATION	5.388434726875232E-6	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999337825139274	WITHOUT_CLASSIFICATION	6.6217486072532E-5	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808116671293	WITHOUT_CLASSIFICATION	1.918833287068603E-5	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999611491207534	WITHOUT_CLASSIFICATION	3.885087924661641E-5	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999981288566292	WITHOUT_CLASSIFICATION	1.8711433708114423E-5	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999122352143354	WITHOUT_CLASSIFICATION	8.776478566464442E-5	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841988116278	WITHOUT_CLASSIFICATION	1.5801188372239055E-5	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999983151338547	WITHOUT_CLASSIFICATION	1.684866145199115E-6	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999990260317927	WITHOUT_CLASSIFICATION	9.739682073240044E-7	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927141335105	WITHOUT_CLASSIFICATION	7.2858664895472696E-6	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993488749307	WITHOUT_CLASSIFICATION	6.511250693485114E-7	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976684114112	WITHOUT_CLASSIFICATION	2.331588588797695E-6	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952028218979	WITHOUT_CLASSIFICATION	4.797178102084278E-6	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807978233888	WITHOUT_CLASSIFICATION	1.9202176611211326E-5	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982338765102	WITHOUT_CLASSIFICATION	1.7661234897930097E-6	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999871940748689	WITHOUT_CLASSIFICATION	1.2805925131107877E-5	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998848014857457	WITHOUT_CLASSIFICATION	1.1519851425444174E-4	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998168572600163	WITHOUT_CLASSIFICATION	1.831427399835665E-4	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999626787340726	WITHOUT_CLASSIFICATION	3.732126592736459E-5	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9529698490052082	WITHOUT_CLASSIFICATION	0.04703015099479171	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999850642530044	WITHOUT_CLASSIFICATION	1.4935746995536526E-5	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999999709859	WITHOUT_CLASSIFICATION	2.9014017699854395E-11	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999975344484928	WITHOUT_CLASSIFICATION	2.4655515071895348E-6	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.9999966742013452	WITHOUT_CLASSIFICATION	3.3257986547045713E-6	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999994566094067	WITHOUT_CLASSIFICATION	5.433905933804968E-7	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999436167782	WITHOUT_CLASSIFICATION	5.638322172523877E-8	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999951288569164	WITHOUT_CLASSIFICATION	4.871143083581074E-6	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999735815708334	WITHOUT_CLASSIFICATION	2.6418429166561674E-5	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999835001482689	WITHOUT_CLASSIFICATION	1.6499851731089048E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860952793451	WITHOUT_CLASSIFICATION	1.3904720655004367E-5	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999982075350169	WITHOUT_CLASSIFICATION	1.792464983094775E-5	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999966842661011	WITHOUT_CLASSIFICATION	3.3157338988687956E-6	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999998007335833	WITHOUT_CLASSIFICATION	1.992664166429194E-7	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999985268945487	WITHOUT_CLASSIFICATION	1.4731054513656306E-6	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999196309012309	WITHOUT_CLASSIFICATION	8.036909876906872E-5	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.999816622801013	WITHOUT_CLASSIFICATION	1.8337719898684821E-4	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9971319078778937	WITHOUT_CLASSIFICATION	0.002868092122106269	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999679608427934	WITHOUT_CLASSIFICATION	3.20391572065742E-5	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997836962408635	WITHOUT_CLASSIFICATION	2.1630375913641534E-4	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927921607671	WITHOUT_CLASSIFICATION	7.2078392328693165E-6	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999593397737473	WITHOUT_CLASSIFICATION	4.066022625261569E-5	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9998963041278576	WITHOUT_CLASSIFICATION	1.0369587214242619E-4	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999998982162447	WITHOUT_CLASSIFICATION	1.0178375539675042E-7	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999996954166597	WITHOUT_CLASSIFICATION	3.0458334033619234E-7	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999046298618202	WITHOUT_CLASSIFICATION	9.537013817985154E-5	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999539300364	WITHOUT_CLASSIFICATION	4.606996366733332E-8	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999957226693519	WITHOUT_CLASSIFICATION	4.277330648106334E-6	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999960615583509	WITHOUT_CLASSIFICATION	3.938441649247894E-6	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999933416166231	WITHOUT_CLASSIFICATION	6.6583833768471375E-6	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999953602625	WITHOUT_CLASSIFICATION	4.639737441257522E-9	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999977518753014	WITHOUT_CLASSIFICATION	2.2481246986758266E-6	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999992032381183	WITHOUT_CLASSIFICATION	7.967618817062959E-7	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999957669796548	WITHOUT_CLASSIFICATION	4.23302034527319E-6	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999907610768692	WITHOUT_CLASSIFICATION	9.238923130696293E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860952793451	WITHOUT_CLASSIFICATION	1.3904720655004367E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999975344484928	WITHOUT_CLASSIFICATION	2.4655515071895348E-6	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999943665445455	WITHOUT_CLASSIFICATION	5.633455454494979E-6	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999998958656198	WITHOUT_CLASSIFICATION	1.0413438022703932E-7	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999993428246978	WITHOUT_CLASSIFICATION	6.57175302201808E-7	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999655445724576	WITHOUT_CLASSIFICATION	3.4455427542439536E-5	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999814130971607	WITHOUT_CLASSIFICATION	1.8586902839307453E-5	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.9999990586711834	WITHOUT_CLASSIFICATION	9.413288164285522E-7	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9998963041278576	WITHOUT_CLASSIFICATION	1.0369587214242619E-4	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.999604177882933	WITHOUT_CLASSIFICATION	3.9582211706701775E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999987117382024	WITHOUT_CLASSIFICATION	1.2882617975860467E-6	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999763959204758	WITHOUT_CLASSIFICATION	2.3604079524144522E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999753448677352	WITHOUT_CLASSIFICATION	2.4655132264857263E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999807634935186	WITHOUT_CLASSIFICATION	1.9236506481460935E-5	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999968667554	WITHOUT_CLASSIFICATION	3.1332445202218938E-9	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860952793451	WITHOUT_CLASSIFICATION	1.3904720655004367E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860952793451	WITHOUT_CLASSIFICATION	1.3904720655004367E-5	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999878740012855	WITHOUT_CLASSIFICATION	1.2125998714438425E-5	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999501014473	WITHOUT_CLASSIFICATION	4.9898552817872176E-8	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999998128976141	WITHOUT_CLASSIFICATION	1.8710238590174357E-7	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999988985483579	WITHOUT_CLASSIFICATION	1.1014516420764846E-6	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999607390416	WITHOUT_CLASSIFICATION	3.926095823147805E-8	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999875160271624	WITHOUT_CLASSIFICATION	1.248397283766342E-5	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998694318945	WITHOUT_CLASSIFICATION	1.305681054662492E-7	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9999932906211887	WITHOUT_CLASSIFICATION	6.7093788113085826E-6	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999943789328068	WITHOUT_CLASSIFICATION	5.62106719321415E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860952793451	WITHOUT_CLASSIFICATION	1.3904720655004367E-5	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999777177611882	WITHOUT_CLASSIFICATION	2.2282238811897792E-5	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999997223699496	WITHOUT_CLASSIFICATION	2.776300504260158E-7	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999998557863481	WITHOUT_CLASSIFICATION	1.4421365189049127E-7	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.999999720993595	WITHOUT_CLASSIFICATION	2.79006404975047E-7	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999939928590917	WITHOUT_CLASSIFICATION	6.007140908237677E-6	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999842694188509	WITHOUT_CLASSIFICATION	1.5730581149206307E-5	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999993797474266	WITHOUT_CLASSIFICATION	6.202525734126824E-7	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9999997003277225	WITHOUT_CLASSIFICATION	2.996722775094229E-7	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9708251436062196	WITHOUT_CLASSIFICATION	0.029174856393780382	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999982548983707	WITHOUT_CLASSIFICATION	1.7451016292538978E-6	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998116642964	WITHOUT_CLASSIFICATION	1.8833570354626037E-7	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999947118244634	WITHOUT_CLASSIFICATION	5.288175536530175E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999975344484928	WITHOUT_CLASSIFICATION	2.4655515071895348E-6	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9820468809228541	WITHOUT_CLASSIFICATION	0.01795311907714594	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999989068580313	WITHOUT_CLASSIFICATION	1.0931419688046196E-6	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9978636029569631	WITHOUT_CLASSIFICATION	0.002136397043036999	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999976503069562	WITHOUT_CLASSIFICATION	2.3496930437711125E-6	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999857390078599	WITHOUT_CLASSIFICATION	1.4260992139978298E-5	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999984725467057	WITHOUT_CLASSIFICATION	1.5274532943029446E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999975344484928	WITHOUT_CLASSIFICATION	2.4655515071895348E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999954505754437	WITHOUT_CLASSIFICATION	4.549424556399457E-6	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999997223699496	WITHOUT_CLASSIFICATION	2.776300504260158E-7	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.999569931327988	WITHOUT_CLASSIFICATION	4.3006867201203654E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999777177611882	WITHOUT_CLASSIFICATION	2.2282238811897792E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860952793451	WITHOUT_CLASSIFICATION	1.3904720655004367E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999989815348417	WITHOUT_CLASSIFICATION	1.0184651582910016E-5	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9997025312952618	WITHOUT_CLASSIFICATION	2.974687047381277E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860952793451	WITHOUT_CLASSIFICATION	1.3904720655004367E-5	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999992252893307	WITHOUT_CLASSIFICATION	7.747106693720445E-7	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999763959204758	WITHOUT_CLASSIFICATION	2.3604079524144522E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999753448677352	WITHOUT_CLASSIFICATION	2.4655132264857263E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999807634935186	WITHOUT_CLASSIFICATION	1.9236506481460935E-5	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999998993812904	WITHOUT_CLASSIFICATION	1.00618709624783E-7	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.9999972353641056	WITHOUT_CLASSIFICATION	2.7646358944750086E-6	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999996100760355	WITHOUT_CLASSIFICATION	3.8992396446977746E-7	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999777177611882	WITHOUT_CLASSIFICATION	2.2282238811897792E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999989815348417	WITHOUT_CLASSIFICATION	1.0184651582910016E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860952793451	WITHOUT_CLASSIFICATION	1.3904720655004367E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999975344484928	WITHOUT_CLASSIFICATION	2.4655515071895348E-6	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999968667554	WITHOUT_CLASSIFICATION	3.1332445202218938E-9	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999878740012855	WITHOUT_CLASSIFICATION	1.2125998714438425E-5	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999501014473	WITHOUT_CLASSIFICATION	4.9898552817872176E-8	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996164375206	WITHOUT_CLASSIFICATION	3.8356247945102696E-7	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999835309249562	WITHOUT_CLASSIFICATION	1.6469075043829425E-5	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.999999418503674	WITHOUT_CLASSIFICATION	5.814963260461058E-7	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999996762098758	WITHOUT_CLASSIFICATION	3.237901240802079E-7	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999989891473143	WITHOUT_CLASSIFICATION	1.0108526856839572E-6	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.999991548827129	WITHOUT_CLASSIFICATION	8.451172871011804E-6	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998848014857457	WITHOUT_CLASSIFICATION	1.1519851425444174E-4	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999327619573869	WITHOUT_CLASSIFICATION	6.723804261308368E-5	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999997934301303	WITHOUT_CLASSIFICATION	2.065698697337176E-7	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999975222124153	WITHOUT_CLASSIFICATION	2.477787584638844E-6	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999999960291902	WITHOUT_CLASSIFICATION	3.9708098094992084E-8	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.999999771495963	WITHOUT_CLASSIFICATION	2.2850403699844712E-7	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999611491207534	WITHOUT_CLASSIFICATION	3.885087924661641E-5	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999981288566292	WITHOUT_CLASSIFICATION	1.8711433708114423E-5	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993488749307	WITHOUT_CLASSIFICATION	6.511250693485114E-7	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.999999771495963	WITHOUT_CLASSIFICATION	2.2850403699844712E-7	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999999566814715	WITHOUT_CLASSIFICATION	4.33185284983768E-7	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999980230049733	WITHOUT_CLASSIFICATION	1.9769950267073384E-6	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998228886487008	WITHOUT_CLASSIFICATION	1.7711135129907707E-4	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091425957924	WITHOUT_CLASSIFICATION	9.085740420763451E-5	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999908897027395	WITHOUT_CLASSIFICATION	9.11029726044844E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860952793451	WITHOUT_CLASSIFICATION	1.3904720655004367E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860952793451	WITHOUT_CLASSIFICATION	1.3904720655004367E-5	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.9999484331166395	WITHOUT_CLASSIFICATION	5.156688336046779E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976684114112	WITHOUT_CLASSIFICATION	2.331588588797695E-6	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982338765102	WITHOUT_CLASSIFICATION	1.7661234897930097E-6	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999953602625	WITHOUT_CLASSIFICATION	4.639737441257522E-9	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999988398573301	WITHOUT_CLASSIFICATION	1.1601426699916784E-6	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999500592798	WITHOUT_CLASSIFICATION	4.994072026007666E-8	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999995521967775	WITHOUT_CLASSIFICATION	4.478032225205278E-7	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999828451487	WITHOUT_CLASSIFICATION	1.7154851359982004E-8	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999993507060011	WITHOUT_CLASSIFICATION	6.492939989305609E-7	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999480412816	WITHOUT_CLASSIFICATION	5.1958718478942344E-8	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999988589835067	WITHOUT_CLASSIFICATION	1.1410164933344916E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999932402820304	WITHOUT_CLASSIFICATION	6.759717969611522E-6	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.99999999979732	WITHOUT_CLASSIFICATION	2.0267999444071247E-10	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999780837241717	WITHOUT_CLASSIFICATION	2.1916275828349346E-5	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999869889297	WITHOUT_CLASSIFICATION	1.3011070381170278E-8	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999938583191245	WITHOUT_CLASSIFICATION	6.141680875506557E-6	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999471470608107	WITHOUT_CLASSIFICATION	5.285293918927228E-5	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999997237149014	WITHOUT_CLASSIFICATION	2.762850985661822E-7	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999989926488345	WITHOUT_CLASSIFICATION	1.0073511654288412E-6	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982707911456	WITHOUT_CLASSIFICATION	1.729208854385566E-6	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999646552064984	WITHOUT_CLASSIFICATION	3.534479350159303E-5	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998629860829	WITHOUT_CLASSIFICATION	1.3701391717085446E-7	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999971956091497	WITHOUT_CLASSIFICATION	2.8043908502986327E-5	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999719157998113	WITHOUT_CLASSIFICATION	2.8084200188668374E-5	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994653941652	WITHOUT_CLASSIFICATION	5.346058348703668E-7	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993445397117	WITHOUT_CLASSIFICATION	6.554602882965153E-7	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999986202082675	WITHOUT_CLASSIFICATION	1.3797917325506508E-6	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991913656461	WITHOUT_CLASSIFICATION	8.086343540367433E-7	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999991178735908	WITHOUT_CLASSIFICATION	8.821264091982668E-6	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999996812027064	WITHOUT_CLASSIFICATION	3.18797293570987E-7	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989342250584	WITHOUT_CLASSIFICATION	1.0657749417038383E-6	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999931272437546	WITHOUT_CLASSIFICATION	6.8727562453973415E-6	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999425801271	WITHOUT_CLASSIFICATION	5.741987290214774E-8	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941022397243	WITHOUT_CLASSIFICATION	5.897760275814744E-6	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999986704232291	WITHOUT_CLASSIFICATION	1.3295767709995276E-6	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999512661856731	WITHOUT_CLASSIFICATION	4.873381432693192E-5	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999134853123957	WITHOUT_CLASSIFICATION	8.651468760430866E-5	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9999887803104378	WITHOUT_CLASSIFICATION	1.1219689562179345E-5	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999918060928507	WITHOUT_CLASSIFICATION	8.193907149335062E-6	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999957531444076	WITHOUT_CLASSIFICATION	4.24685559243169E-6	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999984666144891	WITHOUT_CLASSIFICATION	1.5333855109408975E-6	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999904670292831	WITHOUT_CLASSIFICATION	9.532970716827395E-6	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999998903992668	WITHOUT_CLASSIFICATION	1.096007332378251E-7	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999995197563956	WITHOUT_CLASSIFICATION	4.802436044135283E-7	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9992197203371685	WITHOUT_CLASSIFICATION	7.802796628313319E-4	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999998200289707	WITHOUT_CLASSIFICATION	1.7997102929068218E-6	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999908192454	WITHOUT_CLASSIFICATION	9.180754655165606E-9	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999996702698	WITHOUT_CLASSIFICATION	3.2973020000238213E-7	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999979920284076	WITHOUT_CLASSIFICATION	2.007971592477249E-6	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999997363125906	WITHOUT_CLASSIFICATION	2.636874093643766E-7	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999998776100328	WITHOUT_CLASSIFICATION	1.2238996714160182E-7	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999996308332256	WITHOUT_CLASSIFICATION	3.6916677443553917E-7	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999455102415	WITHOUT_CLASSIFICATION	5.448975855637206E-8	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999998307509167	WITHOUT_CLASSIFICATION	1.6924908330306775E-7	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999971415565947	WITHOUT_CLASSIFICATION	2.858443405308715E-6	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9978998164828902	WITHOUT_CLASSIFICATION	0.0021001835171098287	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999993322665446	WITHOUT_CLASSIFICATION	6.677334554718932E-7	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999849892415206	WITHOUT_CLASSIFICATION	1.5010758479556125E-5	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999545017779	WITHOUT_CLASSIFICATION	4.549822218080926E-8	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999972655897126	WITHOUT_CLASSIFICATION	2.7344102874275515E-6	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999977918555614	WITHOUT_CLASSIFICATION	2.2081444387180473E-6	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999925339005502	WITHOUT_CLASSIFICATION	7.466099449796751E-6	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.999992027599683	WITHOUT_CLASSIFICATION	7.97240031702152E-6	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999989635409458	WITHOUT_CLASSIFICATION	1.0364590541911527E-6	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999996835111256	WITHOUT_CLASSIFICATION	3.1648887446588923E-7	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999992016144614	WITHOUT_CLASSIFICATION	7.983855385540196E-7	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999864369204814	WITHOUT_CLASSIFICATION	1.3563079518717673E-5	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999390376106525	WITHOUT_CLASSIFICATION	6.096238934757198E-5	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9950988442235974	WITHOUT_CLASSIFICATION	0.004901155776402622	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.999954473878342	WITHOUT_CLASSIFICATION	4.552612165793032E-5	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.99991773981995	WITHOUT_CLASSIFICATION	8.226018004992872E-5	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.9999987394875404	WITHOUT_CLASSIFICATION	1.2605124596227495E-6	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999718423987	WITHOUT_CLASSIFICATION	2.8157601288079398E-8	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999971321392617	WITHOUT_CLASSIFICATION	2.8678607383826024E-6	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999961851853538	WITHOUT_CLASSIFICATION	3.8148146462160445E-6	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.99540818697096	WITHOUT_CLASSIFICATION	0.00459181302903998	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9993488108378256	WITHOUT_CLASSIFICATION	6.511891621743263E-4	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999960081565654	WITHOUT_CLASSIFICATION	3.9918434346085155E-6	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.950161684098865	WITHOUT_CLASSIFICATION	0.04983831590113494	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999481039189	WITHOUT_CLASSIFICATION	5.189608123295809E-8	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9993298044496151	WITHOUT_CLASSIFICATION	6.701955503849358E-4	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999882571207	WITHOUT_CLASSIFICATION	1.17428792846849E-8	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999931333462	WITHOUT_CLASSIFICATION	6.866653752772494E-9	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999843147988289	WITHOUT_CLASSIFICATION	1.56852011711456E-5	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999738693314	WITHOUT_CLASSIFICATION	2.6130668651306236E-8	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999991927082628	WITHOUT_CLASSIFICATION	8.07291737199094E-7	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999975688634962	WITHOUT_CLASSIFICATION	2.4311365039081327E-6	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999707266463358	WITHOUT_CLASSIFICATION	2.9273353664203143E-5	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999980448535675	WITHOUT_CLASSIFICATION	1.955146432531161E-6	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999998648958897	WITHOUT_CLASSIFICATION	1.3510411035026172E-7	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.999999963074556	WITHOUT_CLASSIFICATION	3.692544408659447E-8	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999834484199	WITHOUT_CLASSIFICATION	1.655158016965747E-8	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999993344357344	WITHOUT_CLASSIFICATION	6.6556426556335E-7	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999903427981872	WITHOUT_CLASSIFICATION	9.65720181268306E-6	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993980371324	WITHOUT_CLASSIFICATION	6.019628675628171E-7	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999992940039159	WITHOUT_CLASSIFICATION	7.059960841430243E-7	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999986262455431	WITHOUT_CLASSIFICATION	1.3737544568210132E-6	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9997011230763643	WITHOUT_CLASSIFICATION	2.9887692363572563E-4	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999997592335906	WITHOUT_CLASSIFICATION	2.407664093145428E-7	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999989679523084	WITHOUT_CLASSIFICATION	1.0320476915444344E-6	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9999863666431249	WITHOUT_CLASSIFICATION	1.363335687521933E-5	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999997907656162	WITHOUT_CLASSIFICATION	2.0923438386073706E-7	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.999999821888571	WITHOUT_CLASSIFICATION	1.781114290902571E-7	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9988756221309959	WITHOUT_CLASSIFICATION	0.0011243778690041342	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.9997922714419898	WITHOUT_CLASSIFICATION	2.077285580101771E-4	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999992388952016	WITHOUT_CLASSIFICATION	7.611047984583671E-7	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9988756221309959	WITHOUT_CLASSIFICATION	0.0011243778690041342	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999995587028485	WITHOUT_CLASSIFICATION	4.4129715138807053E-7	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999996962837858	WITHOUT_CLASSIFICATION	3.03716214101259E-7	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999979510689837	WITHOUT_CLASSIFICATION	2.04893101630689E-6	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9997893794166823	WITHOUT_CLASSIFICATION	2.106205833177095E-4	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.999999839675068	WITHOUT_CLASSIFICATION	1.6032493203827858E-7	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999411365877	WITHOUT_CLASSIFICATION	5.8863412266127536E-8	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999598829613212	WITHOUT_CLASSIFICATION	4.011703867872873E-5	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999998006868285	WITHOUT_CLASSIFICATION	1.9931317157802208E-7	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999989811482413	WITHOUT_CLASSIFICATION	1.0188517587775115E-6	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999940895232335	WITHOUT_CLASSIFICATION	5.9104767664125425E-6	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999979508017388	WITHOUT_CLASSIFICATION	2.049198261152618E-6	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999883281674941	WITHOUT_CLASSIFICATION	1.1671832505964485E-5	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999883385376	WITHOUT_CLASSIFICATION	1.166146236329454E-8	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999963482723	WITHOUT_CLASSIFICATION	3.6517276424531708E-9	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999996592772942	WITHOUT_CLASSIFICATION	3.40722705813038E-7	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999915087829023	WITHOUT_CLASSIFICATION	8.491217097648793E-6	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999052147834361	WITHOUT_CLASSIFICATION	9.478521656387914E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999052147834361	WITHOUT_CLASSIFICATION	9.478521656387914E-5	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999990961513453	WITHOUT_CLASSIFICATION	9.038486547269506E-7	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9998201295503479	WITHOUT_CLASSIFICATION	1.7987044965211857E-4	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9999703033095418	WITHOUT_CLASSIFICATION	2.969669045814937E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9999914603447679	WITHOUT_CLASSIFICATION	8.539655232084836E-6	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999997214928612	WITHOUT_CLASSIFICATION	2.7850713879043333E-6	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.914363891386884	WITHOUT_CLASSIFICATION	0.08563610861311603	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.999936308384876	WITHOUT_CLASSIFICATION	6.369161512401247E-5	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999536511096	WITHOUT_CLASSIFICATION	4.6348890368745535E-8	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.999996569570612	WITHOUT_CLASSIFICATION	3.430429387957752E-6	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9991760103603817	WITHOUT_CLASSIFICATION	8.239896396182855E-4	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999918379312697	WITHOUT_CLASSIFICATION	8.162068730280337E-6	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999960551677	WITHOUT_CLASSIFICATION	3.944832356390645E-9	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999681185411	WITHOUT_CLASSIFICATION	3.188145887805194E-8	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999996724512654	WITHOUT_CLASSIFICATION	3.275487345992355E-7	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.999999984907907	WITHOUT_CLASSIFICATION	1.509209307541679E-8	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999989926488345	WITHOUT_CLASSIFICATION	1.0073511654288412E-6	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999962582394286	WITHOUT_CLASSIFICATION	3.7417605714724433E-6	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999999868667201	WITHOUT_CLASSIFICATION	1.3133279895577447E-7	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999928263530037	WITHOUT_CLASSIFICATION	7.173646996403376E-6	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999986145973545	WITHOUT_CLASSIFICATION	1.3854026454601795E-6	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999702550744	WITHOUT_CLASSIFICATION	2.9744925599918025E-8	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9999951085465499	WITHOUT_CLASSIFICATION	4.891453450052125E-6	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999997815827137	WITHOUT_CLASSIFICATION	2.1841728631229493E-7	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999996191866194	WITHOUT_CLASSIFICATION	3.808133805816625E-7	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999461035742	WITHOUT_CLASSIFICATION	5.3896425704849595E-8	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999998748875606	WITHOUT_CLASSIFICATION	1.251124393788565E-7	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999388731752	WITHOUT_CLASSIFICATION	6.112682480629967E-8	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999967459346608	WITHOUT_CLASSIFICATION	3.254065339269668E-6	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.999998400366646	WITHOUT_CLASSIFICATION	1.5996333539382434E-6	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9999725462408539	WITHOUT_CLASSIFICATION	2.7453759146250642E-5	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999960058304513	WITHOUT_CLASSIFICATION	3.994169548622736E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999990556547779	WITHOUT_CLASSIFICATION	9.443452221157001E-7	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.999912666873751	WITHOUT_CLASSIFICATION	8.733312624893566E-5	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999997620638831	WITHOUT_CLASSIFICATION	2.379361169722134E-7	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999986264602528	WITHOUT_CLASSIFICATION	1.373539747100253E-6	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999997077852811	WITHOUT_CLASSIFICATION	2.9221471887609196E-7	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999937703507216	WITHOUT_CLASSIFICATION	6.229649278344519E-6	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999941344711268	WITHOUT_CLASSIFICATION	5.8655288732476115E-6	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999986377424736	WITHOUT_CLASSIFICATION	1.3622575264338892E-6	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999260460565294	WITHOUT_CLASSIFICATION	7.395394347060318E-4	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.999999812199461	WITHOUT_CLASSIFICATION	1.8780053904312692E-7	DEFECT
create one	WITHOUT_CLASSIFICATION	0.999999739726387	WITHOUT_CLASSIFICATION	2.6027361302251595E-7	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.998181332707704	WITHOUT_CLASSIFICATION	0.001818667292296051	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999971989254458	WITHOUT_CLASSIFICATION	2.8010745543122604E-6	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.999990076690743	WITHOUT_CLASSIFICATION	9.923309256965691E-6	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999988125400041	WITHOUT_CLASSIFICATION	1.1874599958994858E-6	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999206254715631	WITHOUT_CLASSIFICATION	7.937452843684844E-5	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99991098563012	WITHOUT_CLASSIFICATION	8.901436988000817E-5	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579780013023	WITHOUT_CLASSIFICATION	4.2021998697720866E-5	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.995610036710383	WITHOUT_CLASSIFICATION	0.004389963289617099	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999941815630282	WITHOUT_CLASSIFICATION	5.81843697185213E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999932402820304	WITHOUT_CLASSIFICATION	6.759717969611522E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999932402820304	WITHOUT_CLASSIFICATION	6.759717969611522E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999997476997495	WITHOUT_CLASSIFICATION	2.5230025050671323E-6	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999680560477373	WITHOUT_CLASSIFICATION	3.194395226267999E-5	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9980737862815077	WITHOUT_CLASSIFICATION	0.0019262137184923502	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991912143313255	WITHOUT_CLASSIFICATION	8.087856686746311E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9980737862815077	WITHOUT_CLASSIFICATION	0.0019262137184923502	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999985452461047	WITHOUT_CLASSIFICATION	1.4547538953712755E-6	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999960617540801	WITHOUT_CLASSIFICATION	3.938245919966652E-6	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.9999973383892843	WITHOUT_CLASSIFICATION	2.661610715646817E-6	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999979176437207	WITHOUT_CLASSIFICATION	2.082356279352123E-6	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999992731806279	WITHOUT_CLASSIFICATION	7.268193722099671E-7	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999966762948349	WITHOUT_CLASSIFICATION	3.323705165096199E-6	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999092796903	WITHOUT_CLASSIFICATION	9.072030979516922E-8	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9999681676674904	WITHOUT_CLASSIFICATION	3.183233250950755E-5	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999706522306	WITHOUT_CLASSIFICATION	2.9347769401344124E-8	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999829992659169	WITHOUT_CLASSIFICATION	1.700073408306826E-5	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999992873657305	WITHOUT_CLASSIFICATION	7.126342696042537E-7	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999992375758228	WITHOUT_CLASSIFICATION	7.624241772147944E-6	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999983529688339	WITHOUT_CLASSIFICATION	1.6470311661490406E-6	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9985305175484708	WITHOUT_CLASSIFICATION	0.0014694824515292262	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999992851508	WITHOUT_CLASSIFICATION	7.148492692688891E-10	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999677640431067	WITHOUT_CLASSIFICATION	3.223595689325888E-5	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999976098369239	WITHOUT_CLASSIFICATION	2.3901630761347463E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999976098369239	WITHOUT_CLASSIFICATION	2.3901630761347463E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999978519682686	WITHOUT_CLASSIFICATION	2.1480317313786864E-6	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.999997172352735	WITHOUT_CLASSIFICATION	2.827647264977286E-6	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999996822813837	WITHOUT_CLASSIFICATION	3.177186163208288E-7	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999842373964	WITHOUT_CLASSIFICATION	1.5762603535140063E-8	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999994694440502	WITHOUT_CLASSIFICATION	5.30555949882915E-7	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999997464412836	WITHOUT_CLASSIFICATION	2.53558716401352E-6	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9997359642286924	WITHOUT_CLASSIFICATION	2.640357713076501E-4	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999970469086192	WITHOUT_CLASSIFICATION	2.9530913806221743E-6	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.999998922369455	WITHOUT_CLASSIFICATION	1.0776305451262285E-6	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999977654055109	WITHOUT_CLASSIFICATION	2.234594489021986E-6	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999983052418886	WITHOUT_CLASSIFICATION	1.6947581114195725E-6	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999999989479417	WITHOUT_CLASSIFICATION	1.0520582977104969E-8	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999993593078866	WITHOUT_CLASSIFICATION	6.406921133363477E-7	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999348395346934	WITHOUT_CLASSIFICATION	6.516046530663168E-5	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999942658662333	WITHOUT_CLASSIFICATION	5.734133766752384E-6	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999671194397	WITHOUT_CLASSIFICATION	3.2880560235990196E-8	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999998123337043	WITHOUT_CLASSIFICATION	1.876662957384154E-7	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999982078113119	WITHOUT_CLASSIFICATION	1.7921886881134548E-6	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.999998253492968	WITHOUT_CLASSIFICATION	1.7465070318910104E-6	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999960609831	WITHOUT_CLASSIFICATION	3.9390169176842845E-9	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999813736656538	WITHOUT_CLASSIFICATION	1.862633434617603E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999655536723	WITHOUT_CLASSIFICATION	3.444632770633426E-8	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999538681505	WITHOUT_CLASSIFICATION	4.6131849530817966E-8	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999942430101	WITHOUT_CLASSIFICATION	5.756989992605479E-9	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9999991866649034	WITHOUT_CLASSIFICATION	8.133350966834097E-7	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999995135817743	WITHOUT_CLASSIFICATION	4.864182257854047E-7	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999991571175605	WITHOUT_CLASSIFICATION	8.428824394970056E-7	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999640993783049	WITHOUT_CLASSIFICATION	3.590062169507597E-5	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999848570361174	WITHOUT_CLASSIFICATION	1.5142963882634346E-5	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999812548883054	WITHOUT_CLASSIFICATION	1.874511169461915E-5	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999997153673272	WITHOUT_CLASSIFICATION	2.8463267279402403E-6	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999989296897538	WITHOUT_CLASSIFICATION	1.0703102461911212E-6	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998269633397268	WITHOUT_CLASSIFICATION	1.7303666027318102E-4	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999995457732386	WITHOUT_CLASSIFICATION	4.5422676149513556E-7	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999971626212478	WITHOUT_CLASSIFICATION	2.837378752153335E-6	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999653182744	WITHOUT_CLASSIFICATION	3.4681725514291004E-8	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998676596269	WITHOUT_CLASSIFICATION	1.3234037299791774E-7	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.999999345931908	WITHOUT_CLASSIFICATION	6.540680920825211E-7	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999860446480476	WITHOUT_CLASSIFICATION	1.3955351952309154E-5	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999773371756648	WITHOUT_CLASSIFICATION	2.266282433520629E-5	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999996201006887	WITHOUT_CLASSIFICATION	3.798993112940765E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999782217941404	WITHOUT_CLASSIFICATION	2.177820585962985E-5	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.999997451948039	WITHOUT_CLASSIFICATION	2.5480519610290066E-6	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999169582497976	WITHOUT_CLASSIFICATION	8.304175020234773E-5	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999996438004451	WITHOUT_CLASSIFICATION	3.561995548845135E-7	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9868447421698774	WITHOUT_CLASSIFICATION	0.013155257830122577	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9579736256820589	WITHOUT_CLASSIFICATION	0.04202637431794099	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999927582232	WITHOUT_CLASSIFICATION	7.241776825238362E-9	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999996757192314	WITHOUT_CLASSIFICATION	3.242807685945048E-6	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9998958891391742	WITHOUT_CLASSIFICATION	1.0411086082587532E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893690162963	WITHOUT_CLASSIFICATION	1.0630983703650883E-5	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999998476580837	WITHOUT_CLASSIFICATION	1.5234191624602378E-7	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9953321489237632	WITHOUT_CLASSIFICATION	0.004667851076236874	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999999213688588	WITHOUT_CLASSIFICATION	7.863114124501924E-8	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9999984987799863	WITHOUT_CLASSIFICATION	1.5012200137809334E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999954505754437	WITHOUT_CLASSIFICATION	4.549424556399457E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999954505754437	WITHOUT_CLASSIFICATION	4.549424556399457E-6	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999991385302113	WITHOUT_CLASSIFICATION	8.614697886710227E-7	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997901592645562	WITHOUT_CLASSIFICATION	2.098407354438219E-4	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999900427643331	WITHOUT_CLASSIFICATION	9.957235666874146E-6	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999938516349771	WITHOUT_CLASSIFICATION	6.148365022900829E-6	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999989390448492	WITHOUT_CLASSIFICATION	1.0609551508803262E-6	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999179945604	WITHOUT_CLASSIFICATION	8.200543952489686E-8	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999890933258792	WITHOUT_CLASSIFICATION	1.0906674120861826E-5	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999980282709262	WITHOUT_CLASSIFICATION	1.9717290738010763E-6	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.999999965254183	WITHOUT_CLASSIFICATION	3.4745816999661786E-8	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999988164414114	WITHOUT_CLASSIFICATION	1.1835585885930587E-6	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999997670092933	WITHOUT_CLASSIFICATION	2.3299070667459236E-7	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999860276328292	WITHOUT_CLASSIFICATION	1.397236717083015E-5	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999978704469584	WITHOUT_CLASSIFICATION	2.1295530414642407E-6	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999898319030612	WITHOUT_CLASSIFICATION	1.0168096938728298E-5	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999588243293	WITHOUT_CLASSIFICATION	4.117567063271044E-8	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9998800658062706	WITHOUT_CLASSIFICATION	1.1993419372939732E-4	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9997981553880411	WITHOUT_CLASSIFICATION	2.0184461195889896E-4	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999962382466409	WITHOUT_CLASSIFICATION	3.7617533591033665E-5	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.999990463988708	WITHOUT_CLASSIFICATION	9.536011291932363E-6	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.999374115320158	WITHOUT_CLASSIFICATION	6.25884679841912E-4	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999533746153934	WITHOUT_CLASSIFICATION	4.6625384606723844E-5	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999991590594751	WITHOUT_CLASSIFICATION	8.409405249367766E-7	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9998399331449882	WITHOUT_CLASSIFICATION	1.6006685501172266E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998011092023954	WITHOUT_CLASSIFICATION	1.9889079760463345E-4	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9979171565083195	WITHOUT_CLASSIFICATION	0.0020828434916805557	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9994794543743558	WITHOUT_CLASSIFICATION	5.205456256442189E-4	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9568705440059705	WITHOUT_CLASSIFICATION	0.043129455994029474	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999992872310327	WITHOUT_CLASSIFICATION	7.127689673341813E-7	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9991764735236723	WITHOUT_CLASSIFICATION	8.235264763276362E-4	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999970490241349	WITHOUT_CLASSIFICATION	2.9509758650919884E-6	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998011092023954	WITHOUT_CLASSIFICATION	1.9889079760463345E-4	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999982852162843	WITHOUT_CLASSIFICATION	1.7147837156664612E-6	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999976914242789	WITHOUT_CLASSIFICATION	2.308575721164594E-6	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.9999581025179299	WITHOUT_CLASSIFICATION	4.189748207001305E-5	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999926126989386	WITHOUT_CLASSIFICATION	7.387301061451668E-6	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999999999034733	WITHOUT_CLASSIFICATION	9.652669553380692E-10	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999998410942921	WITHOUT_CLASSIFICATION	1.589057078523255E-7	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9992588788085505	WITHOUT_CLASSIFICATION	7.411211914495117E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999219609004	WITHOUT_CLASSIFICATION	7.803909969167592E-8	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999990420719408	WITHOUT_CLASSIFICATION	9.579280591995677E-7	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999926126989386	WITHOUT_CLASSIFICATION	7.387301061451668E-6	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999999729731348	WITHOUT_CLASSIFICATION	2.70268651697316E-8	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999219609004	WITHOUT_CLASSIFICATION	7.803909969167592E-8	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9992684406999457	WITHOUT_CLASSIFICATION	7.315593000542743E-4	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999820831874189	WITHOUT_CLASSIFICATION	1.791681258108342E-5	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999995862443585	WITHOUT_CLASSIFICATION	4.1375564144568193E-7	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999983052418886	WITHOUT_CLASSIFICATION	1.6947581114195725E-6	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999325289838	WITHOUT_CLASSIFICATION	6.747101622966608E-8	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999984363673107	WITHOUT_CLASSIFICATION	1.5636326893574253E-6	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999994014440793	WITHOUT_CLASSIFICATION	5.985559207001302E-7	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9996219537199881	WITHOUT_CLASSIFICATION	3.780462800119385E-4	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999997448380789	WITHOUT_CLASSIFICATION	2.5516192121026666E-7	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9999980890600408	WITHOUT_CLASSIFICATION	1.910939959209502E-6	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999951318151	WITHOUT_CLASSIFICATION	4.8681848915100866E-9	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999997148586895	WITHOUT_CLASSIFICATION	2.8514131043704397E-7	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999994481247032	WITHOUT_CLASSIFICATION	5.518752967968866E-7	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999993921195119	WITHOUT_CLASSIFICATION	6.078804880222586E-7	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999688126989851	WITHOUT_CLASSIFICATION	3.118730101503749E-5	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999920798497	WITHOUT_CLASSIFICATION	7.920150398597964E-9	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999997480508733	WITHOUT_CLASSIFICATION	2.5194912660317754E-7	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9999291559327103	WITHOUT_CLASSIFICATION	7.084406728975679E-5	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999920317055	WITHOUT_CLASSIFICATION	7.968294431122686E-9	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999995695346297	WITHOUT_CLASSIFICATION	4.304653703052959E-6	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999990185661147	WITHOUT_CLASSIFICATION	9.814338853008915E-7	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999966566331656	WITHOUT_CLASSIFICATION	3.3433668345224595E-6	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.999998326584107	WITHOUT_CLASSIFICATION	1.6734158929467247E-6	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999484484731036	WITHOUT_CLASSIFICATION	5.155152689633779E-5	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999178995210678	WITHOUT_CLASSIFICATION	8.210047893224769E-5	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.999999875816486	WITHOUT_CLASSIFICATION	1.2418351408127528E-7	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999783292200727	WITHOUT_CLASSIFICATION	2.1670779927389078E-5	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999982280378059	WITHOUT_CLASSIFICATION	1.7719621940135195E-6	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999673333782545	WITHOUT_CLASSIFICATION	3.266662174542496E-5	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9999985874450599	WITHOUT_CLASSIFICATION	1.4125549401189311E-6	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9999680034020432	WITHOUT_CLASSIFICATION	3.199659795683176E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996586068579	WITHOUT_CLASSIFICATION	3.413931421515278E-7	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999361514196435	WITHOUT_CLASSIFICATION	6.384858035650634E-5	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9997809072284498	WITHOUT_CLASSIFICATION	2.1909277155013703E-4	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999985356455369	WITHOUT_CLASSIFICATION	1.4643544632002481E-6	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999956618388028	WITHOUT_CLASSIFICATION	4.3381611971111426E-6	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999040233822	WITHOUT_CLASSIFICATION	9.597661777493364E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999040233822	WITHOUT_CLASSIFICATION	9.597661777493364E-8	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999709371781	WITHOUT_CLASSIFICATION	2.9062821987220585E-8	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999923573272572	WITHOUT_CLASSIFICATION	7.642672742771767E-6	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999999298515498	WITHOUT_CLASSIFICATION	7.014845019584642E-7	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999866758669048	WITHOUT_CLASSIFICATION	1.3324133095201394E-5	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999810532338909	WITHOUT_CLASSIFICATION	1.8946766109148784E-5	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9990027370402141	WITHOUT_CLASSIFICATION	9.97262959785814E-4	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999991340009438	WITHOUT_CLASSIFICATION	8.659990562152407E-7	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999989129436634	WITHOUT_CLASSIFICATION	1.0870563366651127E-6	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999994771486567	WITHOUT_CLASSIFICATION	5.228513434167947E-7	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999910447902632	WITHOUT_CLASSIFICATION	8.95520973665951E-6	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9980407577358448	WITHOUT_CLASSIFICATION	0.001959242264155273	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999828450421	WITHOUT_CLASSIFICATION	1.7154957912541992E-8	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999895315142973	WITHOUT_CLASSIFICATION	1.0468485702790621E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999040233822	WITHOUT_CLASSIFICATION	9.597661777493364E-8	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999906115216088	WITHOUT_CLASSIFICATION	9.38847839117162E-6	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999935074696927	WITHOUT_CLASSIFICATION	6.492530307309201E-6	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999679266623313	WITHOUT_CLASSIFICATION	3.207333766875349E-5	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999994947309608	WITHOUT_CLASSIFICATION	5.052690392351424E-7	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999971990827335	WITHOUT_CLASSIFICATION	2.8009172664917593E-6	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999953674964229	WITHOUT_CLASSIFICATION	4.632503577037262E-6	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999941024337736	WITHOUT_CLASSIFICATION	5.897566226302197E-6	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999982964013	WITHOUT_CLASSIFICATION	1.7035987097125947E-9	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999982984089685	WITHOUT_CLASSIFICATION	1.7015910315483904E-6	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999987980909282	WITHOUT_CLASSIFICATION	1.201909071882925E-6	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999949741419145	WITHOUT_CLASSIFICATION	5.025858085387381E-6	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996586068579	WITHOUT_CLASSIFICATION	3.413931421515278E-7	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999040233822	WITHOUT_CLASSIFICATION	9.597661777493364E-8	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999346134167648	WITHOUT_CLASSIFICATION	6.538658323519026E-5	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999995187298036	WITHOUT_CLASSIFICATION	4.812701963710607E-7	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999941636988979	WITHOUT_CLASSIFICATION	5.836301102125655E-6	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9999560432876993	WITHOUT_CLASSIFICATION	4.3956712300689003E-5	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999989020618	WITHOUT_CLASSIFICATION	1.097938155048827E-9	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999988325377606	WITHOUT_CLASSIFICATION	1.167462239416825E-5	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920718343794	WITHOUT_CLASSIFICATION	7.928165620666318E-6	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999980599448096	WITHOUT_CLASSIFICATION	1.9400551904247884E-6	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999967088671377	WITHOUT_CLASSIFICATION	3.291132862354796E-6	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9997393016663039	WITHOUT_CLASSIFICATION	2.6069833369610684E-4	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999966628739214	WITHOUT_CLASSIFICATION	3.3371260786865E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.9998845217543925	WITHOUT_CLASSIFICATION	1.1547824560757031E-4	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999975164134	WITHOUT_CLASSIFICATION	2.4835866323785547E-9	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999959647273081	WITHOUT_CLASSIFICATION	4.035272691953517E-6	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999985452461047	WITHOUT_CLASSIFICATION	1.4547538953712755E-6	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999904749688973	WITHOUT_CLASSIFICATION	9.52503110284459E-6	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999941665774328	WITHOUT_CLASSIFICATION	5.8334225671327726E-6	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9996085983738889	WITHOUT_CLASSIFICATION	3.9140162611105064E-4	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.999995598253453	WITHOUT_CLASSIFICATION	4.401746547044475E-6	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999856530811116	WITHOUT_CLASSIFICATION	1.434691888844826E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999992835668932	WITHOUT_CLASSIFICATION	7.164331067295905E-7	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999992835668932	WITHOUT_CLASSIFICATION	7.164331067295905E-7	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999983641485708	WITHOUT_CLASSIFICATION	1.6358514291904505E-6	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999998670288693	WITHOUT_CLASSIFICATION	1.3297113065585838E-7	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999936287120355	WITHOUT_CLASSIFICATION	6.371287964635892E-6	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999774885903293	WITHOUT_CLASSIFICATION	2.251140967069047E-5	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999856088188983	WITHOUT_CLASSIFICATION	1.4391181101729057E-5	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999898119387342	WITHOUT_CLASSIFICATION	1.0188061265847403E-5	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999986377794906	WITHOUT_CLASSIFICATION	1.3622205093982936E-6	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999449960429738	WITHOUT_CLASSIFICATION	5.500395702627592E-5	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999449960429738	WITHOUT_CLASSIFICATION	5.500395702627592E-5	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999419243461258	WITHOUT_CLASSIFICATION	5.8075653874179433E-5	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999999529898511	WITHOUT_CLASSIFICATION	4.701014887417487E-8	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999767624608884	WITHOUT_CLASSIFICATION	2.3237539111642035E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999812720366608	WITHOUT_CLASSIFICATION	1.8727963339207245E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999812720366608	WITHOUT_CLASSIFICATION	1.8727963339207245E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999812720366608	WITHOUT_CLASSIFICATION	1.8727963339207245E-5	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999343682311709	WITHOUT_CLASSIFICATION	6.56317688290831E-5	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999994383280096	WITHOUT_CLASSIFICATION	5.616719903540494E-7	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999995151247274	WITHOUT_CLASSIFICATION	4.848752726043469E-7	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.5689709448166366	DEFECT	0.4310290551833634	WITHOUT_CLASSIFICATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999416879630838	WITHOUT_CLASSIFICATION	5.8312036916182906E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999040233822	WITHOUT_CLASSIFICATION	9.597661777493364E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999040233822	WITHOUT_CLASSIFICATION	9.597661777493364E-8	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9996216691775003	WITHOUT_CLASSIFICATION	3.783308224997804E-4	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999971454464	WITHOUT_CLASSIFICATION	2.854553480318698E-9	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9953392747154082	WITHOUT_CLASSIFICATION	0.004660725284591808	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999990912200999	WITHOUT_CLASSIFICATION	9.087798999889196E-7	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999998047875447	WITHOUT_CLASSIFICATION	1.9521245523250236E-7	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.9980626259263344	WITHOUT_CLASSIFICATION	0.001937374073665607	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999997619470364	WITHOUT_CLASSIFICATION	2.3805296359442003E-6	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.99964879209742	WITHOUT_CLASSIFICATION	3.5120790258008725E-4	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999886082100108	WITHOUT_CLASSIFICATION	1.139178998915721E-5	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999519836523231	WITHOUT_CLASSIFICATION	4.8016347676874455E-5	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999991418635209	WITHOUT_CLASSIFICATION	8.581364789729229E-7	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999522168064824	WITHOUT_CLASSIFICATION	4.778319351754021E-5	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999934920738552	WITHOUT_CLASSIFICATION	6.507926144794418E-6	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999934920738552	WITHOUT_CLASSIFICATION	6.507926144794418E-6	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999951318108858	WITHOUT_CLASSIFICATION	4.8681891141655555E-6	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999951318108858	WITHOUT_CLASSIFICATION	4.8681891141655555E-6	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999965077714699	WITHOUT_CLASSIFICATION	3.4922285302195104E-6	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999868518810682	WITHOUT_CLASSIFICATION	1.3148118931758495E-5	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999868518810682	WITHOUT_CLASSIFICATION	1.3148118931758495E-5	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999933894236812	WITHOUT_CLASSIFICATION	6.610576318726627E-6	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999805979505388	WITHOUT_CLASSIFICATION	1.9402049461109763E-5	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999994362462177	WITHOUT_CLASSIFICATION	5.637537822742926E-7	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999992835668932	WITHOUT_CLASSIFICATION	7.164331067295905E-7	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999990218044048	WITHOUT_CLASSIFICATION	9.78195595257166E-7	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999805979505388	WITHOUT_CLASSIFICATION	1.9402049461109763E-5	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.999999984402899	WITHOUT_CLASSIFICATION	1.5597101072615674E-8	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999992867975239	WITHOUT_CLASSIFICATION	7.132024760959204E-6	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999904935615493	WITHOUT_CLASSIFICATION	9.506438450628694E-6	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999944818123927	WITHOUT_CLASSIFICATION	5.5181876072208405E-6	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999992519242	WITHOUT_CLASSIFICATION	7.480758729008627E-10	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999999007022615	WITHOUT_CLASSIFICATION	9.929773843371888E-8	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999998648543025	WITHOUT_CLASSIFICATION	1.351456975391518E-7	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9082666672067784	WITHOUT_CLASSIFICATION	0.09173333279322166	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9936507332038022	WITHOUT_CLASSIFICATION	0.006349266796197773	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999987102960669	WITHOUT_CLASSIFICATION	1.28970393311908E-6	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999990968594175	WITHOUT_CLASSIFICATION	9.031405825018759E-7	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999886387697136	WITHOUT_CLASSIFICATION	1.1361230286529014E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999912398665961	WITHOUT_CLASSIFICATION	8.76013340390401E-6	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.9999987350962384	WITHOUT_CLASSIFICATION	1.2649037615619313E-6	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9340683047479879	WITHOUT_CLASSIFICATION	0.06593169525201208	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9997220089542973	WITHOUT_CLASSIFICATION	2.779910457027103E-4	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999999986665584	WITHOUT_CLASSIFICATION	1.3334416017331393E-8	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999982457709758	WITHOUT_CLASSIFICATION	1.7542290242025335E-6	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999982457709758	WITHOUT_CLASSIFICATION	1.7542290242025335E-6	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999998214186341	WITHOUT_CLASSIFICATION	1.7858136586861093E-7	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999995741612069	WITHOUT_CLASSIFICATION	4.258387931316327E-7	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999999560264042	WITHOUT_CLASSIFICATION	4.3973595709656135E-8	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999959004165894	WITHOUT_CLASSIFICATION	4.0995834106300174E-6	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999996800403168	WITHOUT_CLASSIFICATION	3.199596831544355E-7	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999914295875608	WITHOUT_CLASSIFICATION	8.57041243927155E-6	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999535196501	WITHOUT_CLASSIFICATION	4.64803498822463E-8	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999960176685088	WITHOUT_CLASSIFICATION	3.982331491239134E-6	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999821835665709	WITHOUT_CLASSIFICATION	1.7816433429161594E-5	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999997201110346	WITHOUT_CLASSIFICATION	2.7988896550375893E-7	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999995795418556	WITHOUT_CLASSIFICATION	4.2045814443125935E-7	DEFECT
/	WITHOUT_CLASSIFICATION	0.9998845217543925	WITHOUT_CLASSIFICATION	1.1547824560757031E-4	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999600166973	WITHOUT_CLASSIFICATION	3.998330262244507E-8	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999908051712978	WITHOUT_CLASSIFICATION	9.194828702283443E-6	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999729553794062	WITHOUT_CLASSIFICATION	2.7044620593812058E-5	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999869120732595	WITHOUT_CLASSIFICATION	1.3087926740402705E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999943556963187	WITHOUT_CLASSIFICATION	5.644303681317466E-6	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999943556963187	WITHOUT_CLASSIFICATION	5.644303681317466E-6	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999991309274828	WITHOUT_CLASSIFICATION	8.690725172135146E-7	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9969982579878615	WITHOUT_CLASSIFICATION	0.003001742012138474	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9980993576575866	WITHOUT_CLASSIFICATION	0.001900642342413391	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9987459313245544	WITHOUT_CLASSIFICATION	0.001254068675445613	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9994237106103097	WITHOUT_CLASSIFICATION	5.762893896903589E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999757632836686	WITHOUT_CLASSIFICATION	2.4236716331371142E-5	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999999788563883	WITHOUT_CLASSIFICATION	2.1143611693960707E-7	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999912532350956	WITHOUT_CLASSIFICATION	8.746764904413084E-6	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999724944405062	WITHOUT_CLASSIFICATION	2.7505559493814703E-5	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999965333473432	WITHOUT_CLASSIFICATION	3.466652656755113E-6	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999971132600852	WITHOUT_CLASSIFICATION	2.8867399148201748E-6	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999912532350956	WITHOUT_CLASSIFICATION	8.746764904413084E-6	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999232371992819	WITHOUT_CLASSIFICATION	7.67628007182159E-5	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999681520138	WITHOUT_CLASSIFICATION	3.1847986225831336E-8	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999553997371	WITHOUT_CLASSIFICATION	4.460026283579349E-8	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.9999143800394515	WITHOUT_CLASSIFICATION	8.561996054843756E-5	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999993575879002	WITHOUT_CLASSIFICATION	6.42412099856007E-7	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999999219106053	WITHOUT_CLASSIFICATION	7.808939469775727E-7	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999716281284	WITHOUT_CLASSIFICATION	2.837187154055666E-8	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999991847245866	WITHOUT_CLASSIFICATION	8.152754135095977E-7	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999994066082926	WITHOUT_CLASSIFICATION	5.933917074684466E-7	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.99996912020388	WITHOUT_CLASSIFICATION	3.0879796120049774E-5	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999252746539055	WITHOUT_CLASSIFICATION	7.472534609450067E-5	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999894277107798	WITHOUT_CLASSIFICATION	1.057228922015493E-5	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999997784274078	WITHOUT_CLASSIFICATION	2.2157259224312257E-7	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999995181781498	WITHOUT_CLASSIFICATION	4.818218502551754E-7	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999956019679204	WITHOUT_CLASSIFICATION	4.39803207971136E-6	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999769216764	WITHOUT_CLASSIFICATION	2.3078323537791767E-8	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999998236515166	WITHOUT_CLASSIFICATION	1.763484832878854E-7	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999706656654911	WITHOUT_CLASSIFICATION	2.933433450886963E-5	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999393563293777	WITHOUT_CLASSIFICATION	6.064367062240976E-5	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999836381092	WITHOUT_CLASSIFICATION	1.6361890877552427E-8	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999148128435236	WITHOUT_CLASSIFICATION	8.518715647645375E-5	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999814848270662	WITHOUT_CLASSIFICATION	1.8515172933864103E-5	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9997297069154666	WITHOUT_CLASSIFICATION	2.7029308453334404E-4	DEFECT
#2	WITHOUT_CLASSIFICATION	0.9997766986595259	WITHOUT_CLASSIFICATION	2.2330134047405926E-4	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999684453273	WITHOUT_CLASSIFICATION	3.155467258636676E-8	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999804569731937	WITHOUT_CLASSIFICATION	1.954302680628709E-5	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999984052039087	WITHOUT_CLASSIFICATION	1.594796091284007E-6	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999978838734729	WITHOUT_CLASSIFICATION	2.116126527174079E-6	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999994747310473	WITHOUT_CLASSIFICATION	5.252689526609916E-7	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999919541612768	WITHOUT_CLASSIFICATION	8.045838723171468E-6	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999335811304	WITHOUT_CLASSIFICATION	6.641886961493132E-8	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999614123022026	WITHOUT_CLASSIFICATION	3.8587697797438485E-5	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9996706951872281	WITHOUT_CLASSIFICATION	3.2930481277190435E-4	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999965685762	WITHOUT_CLASSIFICATION	3.4314237657087224E-9	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999997497163455	WITHOUT_CLASSIFICATION	2.502836545173389E-7	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999999912436709	WITHOUT_CLASSIFICATION	8.756329100425314E-8	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999997995369333	WITHOUT_CLASSIFICATION	2.0046306668758163E-7	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999987001033359	WITHOUT_CLASSIFICATION	1.299896664170367E-6	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999813487022	WITHOUT_CLASSIFICATION	1.8651297847023062E-8	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999633131764386	WITHOUT_CLASSIFICATION	3.668682356145315E-5	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999993683963618	WITHOUT_CLASSIFICATION	6.316036382806336E-7	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999986376780264	WITHOUT_CLASSIFICATION	1.362321973654613E-6	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999971178713065	WITHOUT_CLASSIFICATION	2.8821286934971843E-6	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999753320044	WITHOUT_CLASSIFICATION	2.4667995677999457E-8	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999996895823083	WITHOUT_CLASSIFICATION	3.1041769164646014E-7	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999973510201638	WITHOUT_CLASSIFICATION	2.648979836228453E-6	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999880461197495	WITHOUT_CLASSIFICATION	1.1953880250449998E-5	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999997853560279	WITHOUT_CLASSIFICATION	2.1464397209595308E-6	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999936390875273	WITHOUT_CLASSIFICATION	6.360912472779161E-6	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999862095260823	WITHOUT_CLASSIFICATION	1.3790473917753279E-5	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975273035717	WITHOUT_CLASSIFICATION	2.4726964282528425E-6	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999997310348082	WITHOUT_CLASSIFICATION	2.689651918300818E-7	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999970821487	WITHOUT_CLASSIFICATION	2.9178513127154826E-9	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999598180570826	WITHOUT_CLASSIFICATION	4.018194291749025E-5	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999702157603	WITHOUT_CLASSIFICATION	2.9784239734598688E-8	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999939344540226	WITHOUT_CLASSIFICATION	6.065545977381964E-6	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9994228857899552	WITHOUT_CLASSIFICATION	5.77114210044753E-4	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999925182177521	WITHOUT_CLASSIFICATION	7.481782247878656E-6	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9999988918322956	WITHOUT_CLASSIFICATION	1.1081677043358572E-6	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999505183287334	WITHOUT_CLASSIFICATION	4.948167126648542E-5	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999544797293662	WITHOUT_CLASSIFICATION	4.552027063369792E-5	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999998932796953	WITHOUT_CLASSIFICATION	1.0672030463378245E-7	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.998258328599455	WITHOUT_CLASSIFICATION	0.0017416714005450875	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.8479402510059972	DEFECT	0.1520597489940027	WITHOUT_CLASSIFICATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999743102002516	WITHOUT_CLASSIFICATION	2.5689799748418752E-5	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999908061807663	WITHOUT_CLASSIFICATION	9.193819233658238E-6	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975273035717	WITHOUT_CLASSIFICATION	2.4726964282528425E-6	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999993474677923	WITHOUT_CLASSIFICATION	6.525322076112441E-7	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999963763074993	WITHOUT_CLASSIFICATION	3.6236925007011136E-5	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999451424383	WITHOUT_CLASSIFICATION	5.485756163380843E-8	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999985789984657	WITHOUT_CLASSIFICATION	1.4210015343362374E-6	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999962804768086	WITHOUT_CLASSIFICATION	3.7195231914053444E-5	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.999852947811144	WITHOUT_CLASSIFICATION	1.470521888559901E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999724944405062	WITHOUT_CLASSIFICATION	2.7505559493814703E-5	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999997912717224	WITHOUT_CLASSIFICATION	2.0872827757530206E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999997497163455	WITHOUT_CLASSIFICATION	2.502836545173389E-7	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.98598475123781	WITHOUT_CLASSIFICATION	0.014015248762190003	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999994453188703	WITHOUT_CLASSIFICATION	5.546811295832912E-7	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999432600668	WITHOUT_CLASSIFICATION	5.673993328031163E-8	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999955595832	WITHOUT_CLASSIFICATION	4.440416798693734E-8	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999998371277709	WITHOUT_CLASSIFICATION	1.6287222909737052E-6	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999977634767494	WITHOUT_CLASSIFICATION	2.236523250549218E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999737195315453	WITHOUT_CLASSIFICATION	2.6280468454701076E-4	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999926533538624	WITHOUT_CLASSIFICATION	7.346646137645645E-6	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9938402076042664	WITHOUT_CLASSIFICATION	0.0061597923957336775	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999985026741449	WITHOUT_CLASSIFICATION	1.4973258550370322E-6	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999997811565317	WITHOUT_CLASSIFICATION	2.188434683248218E-7	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999977554599043	WITHOUT_CLASSIFICATION	2.2445400956251918E-6	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999339104421479	WITHOUT_CLASSIFICATION	6.608955785225164E-5	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999339104421479	WITHOUT_CLASSIFICATION	6.608955785225164E-5	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998438199865	WITHOUT_CLASSIFICATION	1.5618001353319518E-7	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999997317428888	WITHOUT_CLASSIFICATION	2.682571112229182E-7	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999902457493	WITHOUT_CLASSIFICATION	9.75425077758108E-9	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999998002959	WITHOUT_CLASSIFICATION	1.9970413839081323E-10	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999982230853081	WITHOUT_CLASSIFICATION	1.7769146918583083E-6	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999975049795504	WITHOUT_CLASSIFICATION	2.4950204494851455E-6	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999702744763859	WITHOUT_CLASSIFICATION	2.9725523614123937E-5	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999987124712871	WITHOUT_CLASSIFICATION	1.28752871295327E-6	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999998485735806	WITHOUT_CLASSIFICATION	1.5142641941633822E-7	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999121603250267	WITHOUT_CLASSIFICATION	8.783967497322721E-5	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.9996465021927814	WITHOUT_CLASSIFICATION	3.534978072186094E-4	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.9999773399916019	WITHOUT_CLASSIFICATION	2.2660008398083E-5	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.999923293938582	WITHOUT_CLASSIFICATION	7.670606141795042E-5	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999306841721	WITHOUT_CLASSIFICATION	6.931582789861834E-8	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9994975606335585	WITHOUT_CLASSIFICATION	5.024393664414896E-4	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999880805624211	WITHOUT_CLASSIFICATION	1.1919437578901257E-5	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999997111941151	WITHOUT_CLASSIFICATION	2.888058848565053E-7	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999605640022636	WITHOUT_CLASSIFICATION	3.9435997736373255E-5	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999940288219	WITHOUT_CLASSIFICATION	5.971178215130045E-9	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999507736883668	WITHOUT_CLASSIFICATION	4.922631163319487E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860952793451	WITHOUT_CLASSIFICATION	1.3904720655004367E-5	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999824186675	WITHOUT_CLASSIFICATION	1.7581332461723046E-8	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.999605517270257	WITHOUT_CLASSIFICATION	3.944827297429825E-4	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999997272400126	WITHOUT_CLASSIFICATION	2.727599874413113E-7	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999972356477203	WITHOUT_CLASSIFICATION	2.7643522797849454E-6	DEFECT
implied	WITHOUT_CLASSIFICATION	0.9999953786202487	WITHOUT_CLASSIFICATION	4.621379751334455E-6	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999999165760585	WITHOUT_CLASSIFICATION	8.34239416372682E-8	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860952793451	WITHOUT_CLASSIFICATION	1.3904720655004367E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860952793451	WITHOUT_CLASSIFICATION	1.3904720655004367E-5	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9995463967122681	WITHOUT_CLASSIFICATION	4.53603287731847E-4	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999978653289233	WITHOUT_CLASSIFICATION	2.134671076606654E-6	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999984478538102	WITHOUT_CLASSIFICATION	1.5521461897270114E-6	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.99995825860527	WITHOUT_CLASSIFICATION	4.174139472997982E-5	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999987317083389	WITHOUT_CLASSIFICATION	1.2682916611157142E-6	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999995389429055	WITHOUT_CLASSIFICATION	4.610570945865813E-7	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.99999995866029	WITHOUT_CLASSIFICATION	4.1339710060808156E-8	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999978134890662	WITHOUT_CLASSIFICATION	2.1865109338676E-6	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999984746494429	WITHOUT_CLASSIFICATION	1.5253505571009383E-6	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999994025182208	WITHOUT_CLASSIFICATION	5.974817790563721E-7	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999954365174215	WITHOUT_CLASSIFICATION	4.5634825784801395E-6	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999992056649184	WITHOUT_CLASSIFICATION	7.943350815571147E-7	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999995606441826	WITHOUT_CLASSIFICATION	4.39355817443427E-7	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999965514003353	WITHOUT_CLASSIFICATION	3.4485996648116528E-6	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999838148887283	WITHOUT_CLASSIFICATION	1.618511127170893E-4	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999996360932585	WITHOUT_CLASSIFICATION	3.639067414055052E-7	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999538599754967	WITHOUT_CLASSIFICATION	4.614002450329716E-5	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999977234217633	WITHOUT_CLASSIFICATION	2.2765782367030723E-6	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999977612601945	WITHOUT_CLASSIFICATION	2.238739805518648E-6	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998228886487008	WITHOUT_CLASSIFICATION	1.7711135129907707E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9905326425460351	WITHOUT_CLASSIFICATION	0.009467357453964768	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999132669043	WITHOUT_CLASSIFICATION	8.673309575480694E-8	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999931525322	WITHOUT_CLASSIFICATION	6.847467765472494E-9	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997023958179	WITHOUT_CLASSIFICATION	2.976041820575768E-7	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996001293843311	WITHOUT_CLASSIFICATION	3.9987061566886895E-4	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999973988315	WITHOUT_CLASSIFICATION	2.601168518337722E-9	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999522464516	WITHOUT_CLASSIFICATION	4.7753548541492315E-8	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999975088911675	WITHOUT_CLASSIFICATION	2.4911088325284495E-6	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999937637996729	WITHOUT_CLASSIFICATION	6.236200327088258E-6	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999913285895896	WITHOUT_CLASSIFICATION	8.671410410392366E-6	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999904457048393	WITHOUT_CLASSIFICATION	9.554295160744177E-6	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999957821041466	WITHOUT_CLASSIFICATION	4.217895853422903E-6	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9999955229887282	WITHOUT_CLASSIFICATION	4.477011271878777E-6	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999188980500895	WITHOUT_CLASSIFICATION	8.110194991055527E-5	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999870488281575	WITHOUT_CLASSIFICATION	1.2951171842477431E-5	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999966819927085	WITHOUT_CLASSIFICATION	3.3180072914830524E-6	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999998914015941	WITHOUT_CLASSIFICATION	1.0859840599537689E-7	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999280425466	WITHOUT_CLASSIFICATION	7.195745345426664E-8	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999974582323994	WITHOUT_CLASSIFICATION	2.5417676005036307E-6	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999929200697647	WITHOUT_CLASSIFICATION	7.079930235272886E-6	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999998784470645	WITHOUT_CLASSIFICATION	1.215529355980549E-7	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999993812047729	WITHOUT_CLASSIFICATION	6.187952270657515E-7	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999080627578	WITHOUT_CLASSIFICATION	9.193724209860046E-8	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999973479254546	WITHOUT_CLASSIFICATION	2.6520745453246236E-6	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999080627578	WITHOUT_CLASSIFICATION	9.193724209860046E-8	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999950135853016	WITHOUT_CLASSIFICATION	4.986414698446561E-6	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999944744361854	WITHOUT_CLASSIFICATION	5.525563814549389E-6	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999936539702989	WITHOUT_CLASSIFICATION	6.3460297010539034E-6	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999997502653152	WITHOUT_CLASSIFICATION	2.497346847748445E-7	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999989899047682	WITHOUT_CLASSIFICATION	1.010095231821589E-6	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999991536277879	WITHOUT_CLASSIFICATION	8.463722120746588E-7	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999949965454689	WITHOUT_CLASSIFICATION	5.003454531198649E-6	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999997208176128	WITHOUT_CLASSIFICATION	2.791823872444731E-7	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998988850237188	WITHOUT_CLASSIFICATION	1.0111497628126198E-4	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999996562724736	WITHOUT_CLASSIFICATION	3.437275263995109E-7	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999988995969251	WITHOUT_CLASSIFICATION	1.1004030748836822E-6	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999978387992002	WITHOUT_CLASSIFICATION	2.1612007997503994E-6	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999990719217	WITHOUT_CLASSIFICATION	9.280784214097073E-10	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9987099179764283	WITHOUT_CLASSIFICATION	0.0012900820235717538	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999045750567458	WITHOUT_CLASSIFICATION	9.542494325425025E-5	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999997220134116	WITHOUT_CLASSIFICATION	2.7798658839310733E-7	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999980195807466	WITHOUT_CLASSIFICATION	1.980419253372262E-6	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999987103550048	WITHOUT_CLASSIFICATION	1.2896449953177423E-6	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999874997847	WITHOUT_CLASSIFICATION	1.250021523959624E-8	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.999999922297551	WITHOUT_CLASSIFICATION	7.770244902917157E-8	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999968932523354	WITHOUT_CLASSIFICATION	3.106747664642777E-6	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.999999781210362	WITHOUT_CLASSIFICATION	2.1878963788343188E-7	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9987404185198278	WITHOUT_CLASSIFICATION	0.0012595814801722699	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999865354326194	WITHOUT_CLASSIFICATION	1.3464567380529727E-5	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999997985129037	WITHOUT_CLASSIFICATION	2.0148709638851568E-7	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998825161834412	WITHOUT_CLASSIFICATION	1.1748381655884983E-4	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9999087590208041	WITHOUT_CLASSIFICATION	9.124097919588367E-5	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9999953282464884	WITHOUT_CLASSIFICATION	4.671753511592837E-6	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999300739928	WITHOUT_CLASSIFICATION	6.992600719456912E-8	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9998115737558213	WITHOUT_CLASSIFICATION	1.88426244178669E-4	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9999774787291413	WITHOUT_CLASSIFICATION	2.2521270858676288E-5	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.8377990548374161	WITHOUT_CLASSIFICATION	0.16220094516258388	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9988166570129193	WITHOUT_CLASSIFICATION	0.0011833429870806715	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9994432127261066	WITHOUT_CLASSIFICATION	5.56787273893414E-4	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999666606411706	WITHOUT_CLASSIFICATION	3.3339358829351975E-5	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.9999774628106131	WITHOUT_CLASSIFICATION	2.253718938701662E-5	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.9999988163158113	WITHOUT_CLASSIFICATION	1.1836841886460306E-6	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999440404771	WITHOUT_CLASSIFICATION	5.5959522891538135E-8	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.999799402881768	WITHOUT_CLASSIFICATION	2.005971182319921E-4	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999142915413	WITHOUT_CLASSIFICATION	8.570845867091527E-8	DEFECT
an association	WITHOUT_CLASSIFICATION	0.9999993041571106	WITHOUT_CLASSIFICATION	6.958428893331617E-7	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9998759252207864	WITHOUT_CLASSIFICATION	1.240747792136372E-4	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9978636029569631	WITHOUT_CLASSIFICATION	0.002136397043036999	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998825161834412	WITHOUT_CLASSIFICATION	1.1748381655884983E-4	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9997822574321706	WITHOUT_CLASSIFICATION	2.1774256782935555E-4	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.999997035341034	WITHOUT_CLASSIFICATION	2.9646589659225297E-6	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9965977111682538	WITHOUT_CLASSIFICATION	0.0034022888317461787	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997980818999186	WITHOUT_CLASSIFICATION	2.0191810008147E-4	DEFECT
special case	WITHOUT_CLASSIFICATION	0.9999964333961988	WITHOUT_CLASSIFICATION	3.5666038011210804E-6	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.999999325999933	WITHOUT_CLASSIFICATION	6.740000669367012E-7	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999645100095	WITHOUT_CLASSIFICATION	3.548999059713056E-8	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.7062181869022367	DEFECT	0.29378181309776324	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999998210373039	WITHOUT_CLASSIFICATION	1.789626961922241E-7	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999661814336179	WITHOUT_CLASSIFICATION	3.3818566381960145E-5	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.9999831219292824	WITHOUT_CLASSIFICATION	1.6878070717558288E-5	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999662178385	WITHOUT_CLASSIFICATION	3.378216155906736E-8	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999589104449742	WITHOUT_CLASSIFICATION	4.1089555025725824E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998890678348319	WITHOUT_CLASSIFICATION	1.1093216516809226E-4	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999688224481	WITHOUT_CLASSIFICATION	3.117755192399588E-8	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999882155249	WITHOUT_CLASSIFICATION	1.178447512464203E-8	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999146498609	WITHOUT_CLASSIFICATION	8.535013909067617E-8	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999997590249577	WITHOUT_CLASSIFICATION	2.409750422531362E-7	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999973474815897	WITHOUT_CLASSIFICATION	2.6525184102209804E-6	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9997822574321706	WITHOUT_CLASSIFICATION	2.1774256782935555E-4	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999992829261283	WITHOUT_CLASSIFICATION	7.170738717138127E-6	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9980198665919332	WITHOUT_CLASSIFICATION	0.00198013340806686	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999866126798432	WITHOUT_CLASSIFICATION	1.3387320156686836E-5	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999996148057007	WITHOUT_CLASSIFICATION	3.8519429922373613E-7	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999478147652741	WITHOUT_CLASSIFICATION	5.218523472606171E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9989917498046134	WITHOUT_CLASSIFICATION	0.0010082501953866936	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9989917498046134	WITHOUT_CLASSIFICATION	0.0010082501953866936	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999978487489056	WITHOUT_CLASSIFICATION	2.1512510943601515E-6	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9989917498046134	WITHOUT_CLASSIFICATION	0.0010082501953866936	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9989917498046134	WITHOUT_CLASSIFICATION	0.0010082501953866936	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9993108163977485	WITHOUT_CLASSIFICATION	6.891836022514485E-4	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999398988139689	WITHOUT_CLASSIFICATION	6.010118603093717E-5	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999999965598381	WITHOUT_CLASSIFICATION	3.440161898536061E-8	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998919080368	WITHOUT_CLASSIFICATION	1.0809196313976954E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9983873713899263	WITHOUT_CLASSIFICATION	0.0016126286100736629	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.999999996011355	WITHOUT_CLASSIFICATION	3.9886450061717545E-9	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9991891979787807	WITHOUT_CLASSIFICATION	8.108020212193166E-4	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999998764677202	WITHOUT_CLASSIFICATION	1.2353227976055195E-7	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999665325299696	WITHOUT_CLASSIFICATION	3.346747003045095E-5	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999954971847488	WITHOUT_CLASSIFICATION	4.5028152512384345E-6	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999977550853737	WITHOUT_CLASSIFICATION	2.244914626303479E-6	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999761452419865	WITHOUT_CLASSIFICATION	2.3854758013476036E-5	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999996866941211	WITHOUT_CLASSIFICATION	3.1330587887302285E-7	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999991462679572	WITHOUT_CLASSIFICATION	8.53732042989605E-7	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999993652680887	WITHOUT_CLASSIFICATION	6.347319112410548E-7	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9985040561564393	WITHOUT_CLASSIFICATION	0.0014959438435605678	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999997476997495	WITHOUT_CLASSIFICATION	2.5230025050671323E-6	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999795127446791	WITHOUT_CLASSIFICATION	2.0487255320896192E-5	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9997715231580835	WITHOUT_CLASSIFICATION	2.2847684191663144E-4	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999986468703806	WITHOUT_CLASSIFICATION	1.3531296193619598E-6	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999978147170067	WITHOUT_CLASSIFICATION	2.1852829933813983E-6	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999869295388607	WITHOUT_CLASSIFICATION	1.307046113939862E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999997476997495	WITHOUT_CLASSIFICATION	2.5230025050671323E-6	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9999087590208041	WITHOUT_CLASSIFICATION	9.124097919588367E-5	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.9999974222713023	WITHOUT_CLASSIFICATION	2.5777286976796988E-6	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991913656461	WITHOUT_CLASSIFICATION	8.086343540367433E-7	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989342250584	WITHOUT_CLASSIFICATION	1.0657749417038383E-6	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9999940411088215	WITHOUT_CLASSIFICATION	5.958891178529066E-6	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999585775610649	WITHOUT_CLASSIFICATION	4.1422438935193216E-5	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9999991895323792	WITHOUT_CLASSIFICATION	8.104676208114309E-7	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9996168344654879	WITHOUT_CLASSIFICATION	3.831655345121509E-4	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999993514046271	WITHOUT_CLASSIFICATION	6.485953729046727E-7	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999999653314642	WITHOUT_CLASSIFICATION	3.466853575144646E-8	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999851010530799	WITHOUT_CLASSIFICATION	1.4898946920127421E-5	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999880852817036	WITHOUT_CLASSIFICATION	1.1914718296479853E-5	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999999349048233	WITHOUT_CLASSIFICATION	6.509517671607684E-7	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999428381146	WITHOUT_CLASSIFICATION	5.716188548272456E-8	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9994546948499664	WITHOUT_CLASSIFICATION	5.453051500335992E-4	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999285606097	WITHOUT_CLASSIFICATION	7.143939029141133E-8	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999786968900501	WITHOUT_CLASSIFICATION	2.1303109949847172E-5	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999956036079614	WITHOUT_CLASSIFICATION	4.396392038629894E-6	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999989323735413	WITHOUT_CLASSIFICATION	1.0676264587033438E-5	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999919178981558	WITHOUT_CLASSIFICATION	8.08210184414984E-6	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998659892889574	WITHOUT_CLASSIFICATION	1.3401071104251341E-4	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999996602276084	WITHOUT_CLASSIFICATION	3.3977239156907614E-7	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999998606863403	WITHOUT_CLASSIFICATION	1.3931365972365353E-7	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999993514046271	WITHOUT_CLASSIFICATION	6.485953729046727E-7	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999337172979	WITHOUT_CLASSIFICATION	6.628270214611943E-8	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9999993564272771	WITHOUT_CLASSIFICATION	6.435727228264745E-7	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999996798317393	WITHOUT_CLASSIFICATION	3.2016826070929592E-6	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999991205004747	WITHOUT_CLASSIFICATION	8.794995252958079E-7	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998854809082	WITHOUT_CLASSIFICATION	1.1451909171882099E-7	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.9999889770352154	WITHOUT_CLASSIFICATION	1.10229647847192E-5	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9999791358264396	WITHOUT_CLASSIFICATION	2.0864173560395137E-5	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9999997918509692	WITHOUT_CLASSIFICATION	2.0814903089151446E-7	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.99999863302305	WITHOUT_CLASSIFICATION	1.3669769500489244E-6	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.999890390271614	WITHOUT_CLASSIFICATION	1.096097283860468E-4	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997939254981	WITHOUT_CLASSIFICATION	2.0607450184884958E-7	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999942098350278	WITHOUT_CLASSIFICATION	5.79016497213717E-6	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.99999346362426	WITHOUT_CLASSIFICATION	6.53637574001551E-6	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999998072289	WITHOUT_CLASSIFICATION	1.9277120403633799E-10	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999884657344974	WITHOUT_CLASSIFICATION	1.1534265502618863E-5	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999926510452595	WITHOUT_CLASSIFICATION	7.3489547405457255E-6	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998148569714	WITHOUT_CLASSIFICATION	1.8514302864361108E-7	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997939254981	WITHOUT_CLASSIFICATION	2.0607450184884958E-7	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999583948105	WITHOUT_CLASSIFICATION	4.1605189560635555E-8	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9997767444013091	WITHOUT_CLASSIFICATION	2.2325559869086295E-4	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999947146539687	WITHOUT_CLASSIFICATION	5.285346031349695E-6	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999980794016575	WITHOUT_CLASSIFICATION	1.9205983424501692E-6	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9999444882707972	WITHOUT_CLASSIFICATION	5.5511729202793625E-5	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999998177016449	WITHOUT_CLASSIFICATION	1.8229835517761166E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999884657344974	WITHOUT_CLASSIFICATION	1.1534265502618863E-5	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999844937572077	WITHOUT_CLASSIFICATION	1.5506242792387395E-5	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900724102587	WITHOUT_CLASSIFICATION	9.927589741210192E-6	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999795078738	WITHOUT_CLASSIFICATION	2.0492126188277343E-7	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939369614266	WITHOUT_CLASSIFICATION	6.063038573511018E-6	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916721097075	WITHOUT_CLASSIFICATION	8.327890292547998E-6	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992949281475	WITHOUT_CLASSIFICATION	7.050718525039305E-7	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999994292518719	WITHOUT_CLASSIFICATION	5.707481280281482E-7	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999994292518719	WITHOUT_CLASSIFICATION	5.707481280281482E-7	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999987580570409	WITHOUT_CLASSIFICATION	1.241942959124429E-6	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999994335852993	WITHOUT_CLASSIFICATION	5.664147006319573E-7	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.999991477228901	WITHOUT_CLASSIFICATION	8.522771098951681E-6	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9998192609320281	WITHOUT_CLASSIFICATION	1.8073906797180258E-4	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9700060288691381	WITHOUT_CLASSIFICATION	0.029993971130861864	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952117308178	WITHOUT_CLASSIFICATION	4.788269182148682E-6	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999978978046375	WITHOUT_CLASSIFICATION	2.102195362487201E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999831610070578	WITHOUT_CLASSIFICATION	1.6838992942189615E-5	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999997367307312	WITHOUT_CLASSIFICATION	2.63269268828057E-7	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999379422541932	WITHOUT_CLASSIFICATION	6.205774580681402E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952117308178	WITHOUT_CLASSIFICATION	4.788269182148682E-6	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999978978046375	WITHOUT_CLASSIFICATION	2.102195362487201E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999831610070578	WITHOUT_CLASSIFICATION	1.6838992942189615E-5	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.9999976618510418	WITHOUT_CLASSIFICATION	2.33814895822644E-6	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.999993222069961	WITHOUT_CLASSIFICATION	6.777930038990414E-6	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999826558224961	WITHOUT_CLASSIFICATION	1.7344177503872158E-5	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999996958991144	WITHOUT_CLASSIFICATION	3.0410088559819543E-7	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999989055762957	WITHOUT_CLASSIFICATION	1.0944237043468253E-6	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999937860935489	WITHOUT_CLASSIFICATION	6.2139064510144E-6	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999896014892165	WITHOUT_CLASSIFICATION	1.0398510783547815E-5	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999997358574827	WITHOUT_CLASSIFICATION	2.64142517256139E-7	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9999896480432634	WITHOUT_CLASSIFICATION	1.0351956736619541E-5	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999932745844803	WITHOUT_CLASSIFICATION	6.7254155197870445E-6	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999056409841	WITHOUT_CLASSIFICATION	9.43590159614246E-8	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9979471114459085	WITHOUT_CLASSIFICATION	0.0020528885540913857	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9997482365681006	WITHOUT_CLASSIFICATION	2.5176343189931905E-4	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999946860253934	WITHOUT_CLASSIFICATION	5.313974606579719E-6	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999997551416405	WITHOUT_CLASSIFICATION	2.448583595063719E-7	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999728867404825	WITHOUT_CLASSIFICATION	2.711325951754867E-5	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999995050438327	WITHOUT_CLASSIFICATION	4.949561672727271E-7	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999852823857632	WITHOUT_CLASSIFICATION	1.4717614236783618E-5	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.999993274559347	WITHOUT_CLASSIFICATION	6.725440653009441E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999971782608327	WITHOUT_CLASSIFICATION	2.82173916730663E-6	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999929253525957	WITHOUT_CLASSIFICATION	7.074647404311539E-6	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9996463702806799	WITHOUT_CLASSIFICATION	3.5362971932013124E-4	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999905013944	WITHOUT_CLASSIFICATION	9.498605606244512E-9	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999997197473043	WITHOUT_CLASSIFICATION	2.802526957256904E-7	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999600947223	WITHOUT_CLASSIFICATION	3.990527773328672E-8	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999354161758381	WITHOUT_CLASSIFICATION	6.458382416178952E-5	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717356906623	WITHOUT_CLASSIFICATION	2.826430933762319E-5	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999745653501954	WITHOUT_CLASSIFICATION	2.5434649804629576E-5	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999927046749	WITHOUT_CLASSIFICATION	7.295325109269317E-9	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999857688525579	WITHOUT_CLASSIFICATION	1.4231147442076226E-5	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995394756085232	WITHOUT_CLASSIFICATION	4.6052439147687227E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993980371324	WITHOUT_CLASSIFICATION	6.019628675628171E-7	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993980371324	WITHOUT_CLASSIFICATION	6.019628675628171E-7	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999951030487	WITHOUT_CLASSIFICATION	4.8969512566780195E-9	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999994638226832	WITHOUT_CLASSIFICATION	5.361773168316505E-7	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999981719911304	WITHOUT_CLASSIFICATION	1.8280088696150253E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.9998845217543925	WITHOUT_CLASSIFICATION	1.1547824560757031E-4	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999998588835737	WITHOUT_CLASSIFICATION	1.4111642636908033E-7	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999960051765848	WITHOUT_CLASSIFICATION	3.994823415140341E-6	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9999774981687908	WITHOUT_CLASSIFICATION	2.2501831209258653E-5	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.9999997148134485	WITHOUT_CLASSIFICATION	2.8518655153106786E-7	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999997907656162	WITHOUT_CLASSIFICATION	2.0923438386073706E-7	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991872733658	WITHOUT_CLASSIFICATION	8.127266341940786E-7	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979084181673	WITHOUT_CLASSIFICATION	2.091581832794215E-6	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975078985224	WITHOUT_CLASSIFICATION	2.492101477641897E-6	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999119138127	WITHOUT_CLASSIFICATION	8.808618729111753E-7	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998321941643	WITHOUT_CLASSIFICATION	1.6780583569416528E-7	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989576601013	WITHOUT_CLASSIFICATION	1.0423398987327238E-6	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987844920135	WITHOUT_CLASSIFICATION	1.215507986487631E-6	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990173188832	WITHOUT_CLASSIFICATION	9.826811167648433E-7	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978227549589	WITHOUT_CLASSIFICATION	2.177245041237722E-6	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960607189998	WITHOUT_CLASSIFICATION	3.939281000154036E-6	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997390414649	WITHOUT_CLASSIFICATION	2.609585351500787E-7	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999998218668171	WITHOUT_CLASSIFICATION	1.7813318289166332E-7	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9993091001298912	WITHOUT_CLASSIFICATION	6.908998701088024E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999993357518292	WITHOUT_CLASSIFICATION	6.6424817071448E-7	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999949648071331	WITHOUT_CLASSIFICATION	5.035192866933309E-6	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999985341761102	WITHOUT_CLASSIFICATION	1.465823889862827E-6	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9999966096696487	WITHOUT_CLASSIFICATION	3.3903303514070913E-6	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999999012787439	WITHOUT_CLASSIFICATION	9.872125603710758E-8	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999186252514599	WITHOUT_CLASSIFICATION	8.137474854004373E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999993357518292	WITHOUT_CLASSIFICATION	6.6424817071448E-7	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999993357518292	WITHOUT_CLASSIFICATION	6.6424817071448E-7	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.999998175729776	WITHOUT_CLASSIFICATION	1.8242702240215958E-6	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999999393946455	WITHOUT_CLASSIFICATION	6.060535450303687E-7	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999964238294	WITHOUT_CLASSIFICATION	3.5761705375442865E-9	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999995314680085	WITHOUT_CLASSIFICATION	4.6853199153745204E-7	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999912398665961	WITHOUT_CLASSIFICATION	8.76013340390401E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999971782608327	WITHOUT_CLASSIFICATION	2.82173916730663E-6	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999271341433	WITHOUT_CLASSIFICATION	7.286585662559627E-8	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999949741162682	WITHOUT_CLASSIFICATION	5.0258837317921865E-5	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999983160765549	WITHOUT_CLASSIFICATION	1.6839234451742411E-6	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999773100682536	WITHOUT_CLASSIFICATION	2.2689931746354553E-5	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999995490245127	WITHOUT_CLASSIFICATION	4.5097548728735986E-7	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805444661506	WITHOUT_CLASSIFICATION	1.945553384940555E-5	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999995326102864	WITHOUT_CLASSIFICATION	4.673897135906808E-6	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999995326102864	WITHOUT_CLASSIFICATION	4.673897135906808E-6	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999989024766557	WITHOUT_CLASSIFICATION	1.097523344281179E-6	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999989024766557	WITHOUT_CLASSIFICATION	1.097523344281179E-6	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938484029682	WITHOUT_CLASSIFICATION	6.151597031753212E-6	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999803909994626	WITHOUT_CLASSIFICATION	1.9609000537412035E-5	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999298597779139	WITHOUT_CLASSIFICATION	7.014022208607538E-5	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993727216168	WITHOUT_CLASSIFICATION	6.272783831951306E-6	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.999690178582747	WITHOUT_CLASSIFICATION	3.0982141725299393E-4	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9992967630357119	WITHOUT_CLASSIFICATION	7.032369642881345E-4	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997257930175357	WITHOUT_CLASSIFICATION	2.7420698246427604E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999752129512429	WITHOUT_CLASSIFICATION	2.4787048757111916E-5	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999915983672127	WITHOUT_CLASSIFICATION	8.401632787321092E-6	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.9999998375082791	WITHOUT_CLASSIFICATION	1.6249172087331457E-7	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999997446071242	WITHOUT_CLASSIFICATION	2.5539287593404177E-7	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999932402820304	WITHOUT_CLASSIFICATION	6.759717969611522E-6	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999917080441912	WITHOUT_CLASSIFICATION	8.291955808870321E-6	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999895995641019	WITHOUT_CLASSIFICATION	1.0400435898067347E-5	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999922604738475	WITHOUT_CLASSIFICATION	7.739526152506912E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999949292144501	WITHOUT_CLASSIFICATION	5.070785549930287E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999949292144501	WITHOUT_CLASSIFICATION	5.070785549930287E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999949292144501	WITHOUT_CLASSIFICATION	5.070785549930287E-6	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999998353345046	WITHOUT_CLASSIFICATION	1.646654954119605E-7	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9999900710588703	WITHOUT_CLASSIFICATION	9.928941129848727E-6	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999989461735	WITHOUT_CLASSIFICATION	1.0538265211315004E-9	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997902276403915	WITHOUT_CLASSIFICATION	2.0977235960858667E-4	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944589781496	WITHOUT_CLASSIFICATION	5.541021850378829E-6	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998193033868	WITHOUT_CLASSIFICATION	1.8069661319435116E-6	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999975717531239	WITHOUT_CLASSIFICATION	2.4282468761662972E-6	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997262128266713	WITHOUT_CLASSIFICATION	2.737871733286451E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999998128835441	WITHOUT_CLASSIFICATION	1.871164558915859E-6	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999999972595427	WITHOUT_CLASSIFICATION	2.7404573035867467E-8	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999991922354327	WITHOUT_CLASSIFICATION	8.077645673907263E-7	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9992050889770682	WITHOUT_CLASSIFICATION	7.949110229319088E-4	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999980531723678	WITHOUT_CLASSIFICATION	1.946827632203434E-5	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999975341658388	WITHOUT_CLASSIFICATION	2.465834161203106E-6	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999987372471851	WITHOUT_CLASSIFICATION	1.2627528148825363E-6	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9993679735437814	WITHOUT_CLASSIFICATION	6.320264562185306E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999996275981017	WITHOUT_CLASSIFICATION	3.7240189835185614E-7	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999331882797751	WITHOUT_CLASSIFICATION	6.681172022489418E-5	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9998950477959921	WITHOUT_CLASSIFICATION	1.0495220400787459E-4	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999767610816457	WITHOUT_CLASSIFICATION	2.323891835441953E-5	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999960086455	WITHOUT_CLASSIFICATION	3.991354415465541E-9	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999932911642027	WITHOUT_CLASSIFICATION	6.708835797448323E-6	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999942655992463	WITHOUT_CLASSIFICATION	5.73440075365515E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999991968031098	WITHOUT_CLASSIFICATION	8.031968902071197E-7	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999992801701892	WITHOUT_CLASSIFICATION	7.198298107908511E-7	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999423600925489	WITHOUT_CLASSIFICATION	5.7639907451027205E-5	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999774417426479	WITHOUT_CLASSIFICATION	2.255825735211266E-5	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999826665658417	WITHOUT_CLASSIFICATION	1.7333434158316254E-5	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999870521887	WITHOUT_CLASSIFICATION	1.2947811149374742E-8	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999997620638831	WITHOUT_CLASSIFICATION	2.379361169722134E-7	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999942201069266	WITHOUT_CLASSIFICATION	5.77989307336965E-6	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999983639857665	WITHOUT_CLASSIFICATION	1.636014233555925E-6	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999819384212723	WITHOUT_CLASSIFICATION	1.8061578727750037E-5	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999996698748926	WITHOUT_CLASSIFICATION	3.301251072578353E-7	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9998455703258821	WITHOUT_CLASSIFICATION	1.544296741178662E-4	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999916462334879	WITHOUT_CLASSIFICATION	8.353766512089789E-6	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999962382466409	WITHOUT_CLASSIFICATION	3.7617533591033665E-5	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.9999997504302263	WITHOUT_CLASSIFICATION	2.4956977378725386E-7	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999997025971784	WITHOUT_CLASSIFICATION	2.9740282159098195E-7	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.9999999196522849	WITHOUT_CLASSIFICATION	8.034771518498193E-8	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999950728403045	WITHOUT_CLASSIFICATION	4.927159695503125E-6	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999991977135668	WITHOUT_CLASSIFICATION	8.022864332156505E-7	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9982779147035757	WITHOUT_CLASSIFICATION	0.0017220852964242956	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999993426356463	WITHOUT_CLASSIFICATION	6.573643537017781E-6	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999989450564097	WITHOUT_CLASSIFICATION	1.0549435902595197E-6	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999536572715898	WITHOUT_CLASSIFICATION	4.6342728410247156E-5	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.9999998687482162	WITHOUT_CLASSIFICATION	1.3125178378319316E-7	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999976098369239	WITHOUT_CLASSIFICATION	2.3901630761347463E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999690482776875	WITHOUT_CLASSIFICATION	3.095172231244771E-5	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999997799369578	WITHOUT_CLASSIFICATION	2.200630423075668E-7	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999991202093339	WITHOUT_CLASSIFICATION	8.797906660468701E-7	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999802113220548	WITHOUT_CLASSIFICATION	1.9788677945114978E-5	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999975025819535	WITHOUT_CLASSIFICATION	2.497418046403973E-6	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996225067489009	WITHOUT_CLASSIFICATION	3.7749325109915255E-4	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999996930073679	WITHOUT_CLASSIFICATION	3.0699263209368386E-6	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.9999234491360686	WITHOUT_CLASSIFICATION	7.655086393151165E-5	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999965715830624	WITHOUT_CLASSIFICATION	3.4284169375900703E-6	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999975319765062	WITHOUT_CLASSIFICATION	2.4680234938023358E-6	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999995741707292	WITHOUT_CLASSIFICATION	4.2582927086722705E-7	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.999998236351908	WITHOUT_CLASSIFICATION	1.7636480920574095E-6	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999964720436958	WITHOUT_CLASSIFICATION	3.527956304272143E-6	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999999815143753	WITHOUT_CLASSIFICATION	1.848562469446919E-7	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.999999979528498	WITHOUT_CLASSIFICATION	2.0471501943399696E-8	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999473932367	WITHOUT_CLASSIFICATION	5.2606763221330467E-8	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999996775988039	WITHOUT_CLASSIFICATION	3.2240119599067605E-7	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999995964735374	WITHOUT_CLASSIFICATION	4.035264625658013E-7	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999912515061093	WITHOUT_CLASSIFICATION	8.748493890736812E-6	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998973809119	WITHOUT_CLASSIFICATION	1.0261908808172074E-7	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998011092023954	WITHOUT_CLASSIFICATION	1.9889079760463345E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998011092023954	WITHOUT_CLASSIFICATION	1.9889079760463345E-4	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999998725755946	WITHOUT_CLASSIFICATION	1.2742440542156782E-7	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999996624300572	WITHOUT_CLASSIFICATION	3.3756994281209975E-7	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999983378963901	WITHOUT_CLASSIFICATION	1.662103609939689E-6	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999994688035377	WITHOUT_CLASSIFICATION	5.3119646229874286E-6	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999692035084141	WITHOUT_CLASSIFICATION	3.079649158583508E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999937927731246	WITHOUT_CLASSIFICATION	6.207226875355001E-6	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999948332142975	WITHOUT_CLASSIFICATION	5.166785702473638E-6	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999836696533544	WITHOUT_CLASSIFICATION	1.6330346645598237E-5	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999294319938279	WITHOUT_CLASSIFICATION	7.056800617204654E-5	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999996340537085	WITHOUT_CLASSIFICATION	3.6594629144295907E-7	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999993808775213	WITHOUT_CLASSIFICATION	6.19122478731582E-7	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999996553244644	WITHOUT_CLASSIFICATION	3.4467553561718726E-7	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.9999995221695077	WITHOUT_CLASSIFICATION	4.778304923032796E-7	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999956271231	WITHOUT_CLASSIFICATION	4.372876906178909E-8	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999987538925362	WITHOUT_CLASSIFICATION	1.2461074637429655E-6	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.999996758651614	WITHOUT_CLASSIFICATION	3.241348385994411E-6	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999994368126653	WITHOUT_CLASSIFICATION	5.631873346641559E-7	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9931111728967653	WITHOUT_CLASSIFICATION	0.006888827103234805	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999881838481325	WITHOUT_CLASSIFICATION	1.1816151867571514E-5	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999991457882201	WITHOUT_CLASSIFICATION	8.542117799022711E-7	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.99999063068935	WITHOUT_CLASSIFICATION	9.369310649966684E-6	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999999912042538	WITHOUT_CLASSIFICATION	8.795746195808485E-8	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999892671040623	WITHOUT_CLASSIFICATION	1.0732895937713403E-5	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999707694970568	WITHOUT_CLASSIFICATION	2.9230502943248913E-5	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999887617653284	WITHOUT_CLASSIFICATION	1.1238234671697385E-5	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9999807149575787	WITHOUT_CLASSIFICATION	1.9285042421341673E-5	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999998273435757	WITHOUT_CLASSIFICATION	1.7265642429399646E-7	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999987970725002	WITHOUT_CLASSIFICATION	1.2029274998371894E-6	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.999997529557396	WITHOUT_CLASSIFICATION	2.4704426040055176E-6	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999405686786	WITHOUT_CLASSIFICATION	5.94313214830708E-8	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999993013990921	WITHOUT_CLASSIFICATION	6.986009079345549E-7	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999978853448205	WITHOUT_CLASSIFICATION	2.1146551795581405E-6	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999987499753832	WITHOUT_CLASSIFICATION	1.2500246168912585E-6	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9999864407855864	WITHOUT_CLASSIFICATION	1.355921441351104E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999823053603855	WITHOUT_CLASSIFICATION	1.7694639614587477E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999823053603855	WITHOUT_CLASSIFICATION	1.7694639614587477E-5	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999965978673439	WITHOUT_CLASSIFICATION	3.4021326560417535E-6	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999616386200576	WITHOUT_CLASSIFICATION	3.83613799424088E-5	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999986565094667	WITHOUT_CLASSIFICATION	1.3434905332648943E-6	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999572391795949	WITHOUT_CLASSIFICATION	4.2760820405021374E-5	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999999999197611	WITHOUT_CLASSIFICATION	8.023886300627372E-11	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999680006350935	WITHOUT_CLASSIFICATION	3.199936490657649E-5	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999898612725836	WITHOUT_CLASSIFICATION	1.0138727416367033E-5	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999031245172654	WITHOUT_CLASSIFICATION	9.687548273460878E-5	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999974102460458	WITHOUT_CLASSIFICATION	2.5897539542252957E-6	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998983916046026	WITHOUT_CLASSIFICATION	1.0160839539733134E-4	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999925949965144	WITHOUT_CLASSIFICATION	7.405003485648026E-6	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999285231013209	WITHOUT_CLASSIFICATION	7.147689867909326E-5	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999813624571807	WITHOUT_CLASSIFICATION	1.8637542819213733E-5	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999962047616154	WITHOUT_CLASSIFICATION	3.7952383844563674E-6	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999290138373097	WITHOUT_CLASSIFICATION	7.098616269024786E-5	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999998579500846	WITHOUT_CLASSIFICATION	1.4204991529701037E-7	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9940013813190041	WITHOUT_CLASSIFICATION	0.0059986186809960216	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9940013813190041	WITHOUT_CLASSIFICATION	0.0059986186809960216	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999243061167545	WITHOUT_CLASSIFICATION	7.569388324547258E-5	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999678749153444	WITHOUT_CLASSIFICATION	3.212508465551218E-5	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999995870618264	WITHOUT_CLASSIFICATION	4.129381735976001E-6	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999963162674	WITHOUT_CLASSIFICATION	3.6837325977568317E-8	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999988169018565	WITHOUT_CLASSIFICATION	1.1830981433521413E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999932402820304	WITHOUT_CLASSIFICATION	6.759717969611522E-6	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9991764735236723	WITHOUT_CLASSIFICATION	8.235264763276362E-4	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999383382189	WITHOUT_CLASSIFICATION	6.166178121026931E-8	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999998037323465	WITHOUT_CLASSIFICATION	1.962676533603515E-7	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998930630046	WITHOUT_CLASSIFICATION	1.0693699529837913E-7	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999988650039966	WITHOUT_CLASSIFICATION	1.1349960034177452E-6	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999988650039966	WITHOUT_CLASSIFICATION	1.1349960034177452E-6	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999683188530875	WITHOUT_CLASSIFICATION	3.1681146912581205E-5	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999998959747176	WITHOUT_CLASSIFICATION	1.0402528230984228E-7	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999997926713354	WITHOUT_CLASSIFICATION	2.0732866458047379E-7	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999999314596926	WITHOUT_CLASSIFICATION	6.854030743029943E-8	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.999997657437704	WITHOUT_CLASSIFICATION	2.34256229594717E-6	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9988911821533897	WITHOUT_CLASSIFICATION	0.0011088178466103357	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999983660311512	WITHOUT_CLASSIFICATION	1.6339688487320825E-6	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999820831874189	WITHOUT_CLASSIFICATION	1.791681258108342E-5	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999932979179825	WITHOUT_CLASSIFICATION	6.702082017460984E-6	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999994362462177	WITHOUT_CLASSIFICATION	5.637537822742926E-7	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999040233822	WITHOUT_CLASSIFICATION	9.597661777493364E-8	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998103472321958	WITHOUT_CLASSIFICATION	1.896527678041772E-4	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999679266623313	WITHOUT_CLASSIFICATION	3.207333766875349E-5	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9999560432876993	WITHOUT_CLASSIFICATION	4.3956712300689003E-5	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999998817669171	WITHOUT_CLASSIFICATION	1.1823308282424096E-7	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999965077714699	WITHOUT_CLASSIFICATION	3.4922285302195104E-6	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999984478538102	WITHOUT_CLASSIFICATION	1.5521461897270114E-6	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999999808398565	WITHOUT_CLASSIFICATION	1.916014350504911E-7	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999978930932383	WITHOUT_CLASSIFICATION	2.106906761694646E-6	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999993090732741	WITHOUT_CLASSIFICATION	6.909267260152292E-7	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999960388159241	WITHOUT_CLASSIFICATION	3.961184075887229E-6	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999455941719502	WITHOUT_CLASSIFICATION	5.4405828049811795E-5	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999986364342647	WITHOUT_CLASSIFICATION	1.3635657352513717E-6	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999933894236812	WITHOUT_CLASSIFICATION	6.610576318726627E-6	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999965397349737	WITHOUT_CLASSIFICATION	3.460265026405369E-6	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999543401086851	WITHOUT_CLASSIFICATION	4.565989131479175E-5	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999997996156966	WITHOUT_CLASSIFICATION	2.0038430338583217E-6	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999907315125811	WITHOUT_CLASSIFICATION	9.268487418850163E-6	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999648081753486	WITHOUT_CLASSIFICATION	3.51918246513909E-5	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999999837391	WITHOUT_CLASSIFICATION	1.626096243942548E-11	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999991746156988	WITHOUT_CLASSIFICATION	8.253843012402106E-7	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999943556963187	WITHOUT_CLASSIFICATION	5.644303681317466E-6	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999957590738048	WITHOUT_CLASSIFICATION	4.240926195218542E-6	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.9999966326024253	WITHOUT_CLASSIFICATION	3.367397574761786E-6	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9994213002915154	WITHOUT_CLASSIFICATION	5.786997084846089E-4	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999998360499129	WITHOUT_CLASSIFICATION	1.6395008706113885E-7	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999999416363861	WITHOUT_CLASSIFICATION	5.836361401019952E-8	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999479293587008	WITHOUT_CLASSIFICATION	5.2070641299099526E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999847399572185	WITHOUT_CLASSIFICATION	1.5260042781573033E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999847399572185	WITHOUT_CLASSIFICATION	1.5260042781573033E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999365265769	WITHOUT_CLASSIFICATION	6.347342311296388E-8	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999637657917	WITHOUT_CLASSIFICATION	3.6234208330253956E-8	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998534715685	WITHOUT_CLASSIFICATION	1.4652843150438623E-7	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9997655545389157	WITHOUT_CLASSIFICATION	2.3444546108427E-4	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999902172615839	WITHOUT_CLASSIFICATION	9.782738416007702E-6	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999295424502	WITHOUT_CLASSIFICATION	7.045754974385626E-8	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999467059	WITHOUT_CLASSIFICATION	5.3294144665430315E-11	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9998886762929061	WITHOUT_CLASSIFICATION	1.1132370709386023E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999365265769	WITHOUT_CLASSIFICATION	6.347342311296388E-8	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999637657917	WITHOUT_CLASSIFICATION	3.6234208330253956E-8	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999973311029878	WITHOUT_CLASSIFICATION	2.6688970121405056E-6	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999995981889804	WITHOUT_CLASSIFICATION	4.018110196303915E-7	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999996934974279	WITHOUT_CLASSIFICATION	3.065025721405285E-7	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999917873330239	WITHOUT_CLASSIFICATION	8.212666976218342E-6	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999991873674042	WITHOUT_CLASSIFICATION	8.126325958130351E-7	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999048690180385	WITHOUT_CLASSIFICATION	9.513098196143497E-5	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999823390369	WITHOUT_CLASSIFICATION	1.7660963046904056E-8	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999154768877344	WITHOUT_CLASSIFICATION	8.45231122655816E-5	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999971533830988	WITHOUT_CLASSIFICATION	2.846616901259693E-6	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9909546451243041	WITHOUT_CLASSIFICATION	0.00904535487569583	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999999022449	WITHOUT_CLASSIFICATION	9.775514172070238E-11	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9909546451243041	WITHOUT_CLASSIFICATION	0.00904535487569583	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999911364517634	WITHOUT_CLASSIFICATION	8.863548236608971E-6	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999995653283648	WITHOUT_CLASSIFICATION	4.3467163530664045E-7	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999487515953942	WITHOUT_CLASSIFICATION	5.124840460580962E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999523155966	WITHOUT_CLASSIFICATION	4.7684403437118934E-8	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9953365552385568	WITHOUT_CLASSIFICATION	0.004663444761443228	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999154768877344	WITHOUT_CLASSIFICATION	8.45231122655816E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999154768877344	WITHOUT_CLASSIFICATION	8.45231122655816E-5	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999974066393782	WITHOUT_CLASSIFICATION	2.5933606218225675E-6	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999998690248367	WITHOUT_CLASSIFICATION	1.3097516322432863E-7	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999971058355447	WITHOUT_CLASSIFICATION	2.894164455242633E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999793748897894	WITHOUT_CLASSIFICATION	2.0625110210670126E-5	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.99999900937353	WITHOUT_CLASSIFICATION	9.90626470042353E-7	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999985625317418	WITHOUT_CLASSIFICATION	1.4374682582085637E-6	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999969372789762	WITHOUT_CLASSIFICATION	3.0627210237681814E-6	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999990130071968	WITHOUT_CLASSIFICATION	9.869928031169031E-7	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999995799598032	WITHOUT_CLASSIFICATION	4.200401968133558E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9998904419595076	WITHOUT_CLASSIFICATION	1.0955804049242987E-4	DEFECT
columns	WITHOUT_CLASSIFICATION	0.9999908607991934	WITHOUT_CLASSIFICATION	9.139200806520538E-6	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9999992090026331	WITHOUT_CLASSIFICATION	7.90997366914909E-7	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999922985212156	WITHOUT_CLASSIFICATION	7.701478784273058E-6	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999905165748069	WITHOUT_CLASSIFICATION	9.483425193160525E-6	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.9999997290403013	WITHOUT_CLASSIFICATION	2.7095969873084353E-7	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999996343693281	WITHOUT_CLASSIFICATION	3.6563067179190426E-7	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999998069429353	WITHOUT_CLASSIFICATION	1.930570646964782E-6	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999979975452584	WITHOUT_CLASSIFICATION	2.002454741642016E-6	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999998584714455	WITHOUT_CLASSIFICATION	1.4152855443679818E-7	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999987931696228	WITHOUT_CLASSIFICATION	1.206830377285304E-6	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.9999403707454577	WITHOUT_CLASSIFICATION	5.962925454220589E-5	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999167854199	WITHOUT_CLASSIFICATION	8.321458008449346E-8	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999930406689982	WITHOUT_CLASSIFICATION	6.959331001882958E-6	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999978561314431	WITHOUT_CLASSIFICATION	2.1438685569503784E-6	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999997934806801	WITHOUT_CLASSIFICATION	2.0651931976984563E-7	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999985802894958	WITHOUT_CLASSIFICATION	1.4197105041348188E-6	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999686712351455	WITHOUT_CLASSIFICATION	3.1328764854424135E-5	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999981756130104	WITHOUT_CLASSIFICATION	1.8243869895717606E-6	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9997675505107705	WITHOUT_CLASSIFICATION	2.3244948922953682E-4	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.999999770011608	WITHOUT_CLASSIFICATION	2.299883920277627E-7	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999998581614175	WITHOUT_CLASSIFICATION	1.4183858256176935E-7	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9998326610568482	WITHOUT_CLASSIFICATION	1.6733894315184038E-4	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999621353384691	WITHOUT_CLASSIFICATION	3.7864661530849E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999990130071968	WITHOUT_CLASSIFICATION	9.869928031169031E-7	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9995878285926812	WITHOUT_CLASSIFICATION	4.121714073186561E-4	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9999896269016849	WITHOUT_CLASSIFICATION	1.0373098315140534E-5	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9911971097625312	WITHOUT_CLASSIFICATION	0.008802890237468799	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.9999993681263781	WITHOUT_CLASSIFICATION	6.318736218391363E-7	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999994657327623	WITHOUT_CLASSIFICATION	5.342672376367107E-7	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.9999998204536885	WITHOUT_CLASSIFICATION	1.7954631161179244E-7	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999793748897894	WITHOUT_CLASSIFICATION	2.0625110210670126E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999793748897894	WITHOUT_CLASSIFICATION	2.0625110210670126E-5	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999998951775145	WITHOUT_CLASSIFICATION	1.0482248547217305E-7	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999993772528901	WITHOUT_CLASSIFICATION	6.227471099226455E-7	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9999937661564496	WITHOUT_CLASSIFICATION	6.233843550346304E-6	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999997573746324	WITHOUT_CLASSIFICATION	2.426253675576829E-7	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999602147911809	WITHOUT_CLASSIFICATION	3.978520881909852E-5	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9982316886502509	WITHOUT_CLASSIFICATION	0.00176831134974907	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9997843033699815	WITHOUT_CLASSIFICATION	2.1569663001854385E-4	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999885640877219	WITHOUT_CLASSIFICATION	1.1435912278231137E-5	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999957252391773	WITHOUT_CLASSIFICATION	4.274760822655927E-6	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999959128906964	WITHOUT_CLASSIFICATION	4.0871093036039055E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999964128687312	WITHOUT_CLASSIFICATION	3.5871312686869906E-6	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999993300330351	WITHOUT_CLASSIFICATION	6.699669649829428E-7	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999403935807167	WITHOUT_CLASSIFICATION	5.960641928329283E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999365265769	WITHOUT_CLASSIFICATION	6.347342311296388E-8	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999964128687312	WITHOUT_CLASSIFICATION	3.5871312686869906E-6	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999996935973882	WITHOUT_CLASSIFICATION	3.0640261179666725E-6	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999995669764927	WITHOUT_CLASSIFICATION	4.330235072678962E-7	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999828683486334	WITHOUT_CLASSIFICATION	1.7131651366688962E-5	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9898704951582542	WITHOUT_CLASSIFICATION	0.010129504841745839	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999403935807167	WITHOUT_CLASSIFICATION	5.960641928329283E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998930850794068	WITHOUT_CLASSIFICATION	1.0691492059324142E-4	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999418165203632	WITHOUT_CLASSIFICATION	5.818347963673977E-5	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999977379027453	WITHOUT_CLASSIFICATION	2.262097254720459E-6	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999669939161064	WITHOUT_CLASSIFICATION	3.3006083893603655E-5	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9996803653721584	WITHOUT_CLASSIFICATION	3.196346278415347E-4	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999997773037481	WITHOUT_CLASSIFICATION	2.226962517961516E-7	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999654409404669	WITHOUT_CLASSIFICATION	3.455905953315797E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999491985201043	WITHOUT_CLASSIFICATION	5.080147989579863E-5	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999996332138724	WITHOUT_CLASSIFICATION	3.6678612754293403E-7	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999999386047828	WITHOUT_CLASSIFICATION	6.13952171863542E-8	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9997325971147067	WITHOUT_CLASSIFICATION	2.6740288529324607E-4	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999961150301288	WITHOUT_CLASSIFICATION	3.884969871229635E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999964128687312	WITHOUT_CLASSIFICATION	3.5871312686869906E-6	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998930850794068	WITHOUT_CLASSIFICATION	1.0691492059324142E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999977379027453	WITHOUT_CLASSIFICATION	2.262097254720459E-6	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999698439724379	WITHOUT_CLASSIFICATION	3.015602756211779E-5	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999440057612428	WITHOUT_CLASSIFICATION	5.599423875736344E-5	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9999983976472422	WITHOUT_CLASSIFICATION	1.6023527578135029E-6	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999403935807167	WITHOUT_CLASSIFICATION	5.960641928329283E-4	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999998862508578	WITHOUT_CLASSIFICATION	1.1374914230550553E-7	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999797523122567	WITHOUT_CLASSIFICATION	2.0247687743295156E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998563109937756	WITHOUT_CLASSIFICATION	1.4368900622435546E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999692418261505	WITHOUT_CLASSIFICATION	3.075817384949566E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999491985201043	WITHOUT_CLASSIFICATION	5.080147989579863E-5	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999996935973882	WITHOUT_CLASSIFICATION	3.0640261179666725E-6	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.9999536515951606	WITHOUT_CLASSIFICATION	4.634840483938684E-5	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999999012828839	WITHOUT_CLASSIFICATION	9.871711609527908E-7	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999993020677591	WITHOUT_CLASSIFICATION	6.97932240982992E-7	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999986378923508	WITHOUT_CLASSIFICATION	1.3621076491867684E-6	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999996215728318	WITHOUT_CLASSIFICATION	3.7842716827360846E-7	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999997689054833	WITHOUT_CLASSIFICATION	2.3109451661358943E-7	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9999739837425988	WITHOUT_CLASSIFICATION	2.6016257401195362E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999523155966	WITHOUT_CLASSIFICATION	4.7684403437118934E-8	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998445201368	WITHOUT_CLASSIFICATION	1.5547986315021935E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997158540256408	WITHOUT_CLASSIFICATION	0.0028414597435919525	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999904401079	WITHOUT_CLASSIFICATION	9.559892071135878E-9	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998295565618407	WITHOUT_CLASSIFICATION	1.7044343815922046E-4	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999980993281151	WITHOUT_CLASSIFICATION	1.9006718849003232E-5	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999978315990272	WITHOUT_CLASSIFICATION	2.1684009727389325E-6	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999991633607099	WITHOUT_CLASSIFICATION	8.366392900413718E-7	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9999790461553048	WITHOUT_CLASSIFICATION	2.095384469521165E-5	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999999860974686	WITHOUT_CLASSIFICATION	1.3902531389966335E-7	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999692418261505	WITHOUT_CLASSIFICATION	3.075817384949566E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997158540256408	WITHOUT_CLASSIFICATION	0.0028414597435919525	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999048212071552	WITHOUT_CLASSIFICATION	9.51787928448472E-5	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.9999654861436764	WITHOUT_CLASSIFICATION	3.4513856323679974E-5	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999888503752239	WITHOUT_CLASSIFICATION	1.1149624776032358E-5	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999931633174153	WITHOUT_CLASSIFICATION	6.836682584753181E-6	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9999648245094767	WITHOUT_CLASSIFICATION	3.517549052326563E-5	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999998783098943	WITHOUT_CLASSIFICATION	1.2169010568153127E-7	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999713331614631	WITHOUT_CLASSIFICATION	2.866683853679464E-5	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.9939795602071209	WITHOUT_CLASSIFICATION	0.006020439792879101	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999414035950078	WITHOUT_CLASSIFICATION	5.859640499218644E-5	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9965499837103456	WITHOUT_CLASSIFICATION	0.003450016289654372	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999987398715225	WITHOUT_CLASSIFICATION	1.2601284775277262E-6	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999911049787412	WITHOUT_CLASSIFICATION	8.895021258690594E-6	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999995084404324	WITHOUT_CLASSIFICATION	4.91559567498139E-7	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.9999899900381837	WITHOUT_CLASSIFICATION	1.0009961816433368E-5	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999986996109543	WITHOUT_CLASSIFICATION	1.3003890456077083E-6	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999997140216077	WITHOUT_CLASSIFICATION	2.859783923087732E-7	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999978163235845	WITHOUT_CLASSIFICATION	2.1836764153843167E-6	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999578267492	WITHOUT_CLASSIFICATION	4.2173250761834E-8	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999996634984335	WITHOUT_CLASSIFICATION	3.365015666129452E-7	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999859331121047	WITHOUT_CLASSIFICATION	1.4066887895369108E-5	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.9998712824624164	WITHOUT_CLASSIFICATION	1.2871753758348747E-4	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999994384062917	WITHOUT_CLASSIFICATION	5.61593708250557E-7	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999998380482263	WITHOUT_CLASSIFICATION	1.6195177359373276E-7	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999995546850005	WITHOUT_CLASSIFICATION	4.4531499955472657E-7	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999993476038876	WITHOUT_CLASSIFICATION	6.523961123684342E-7	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9981896436397737	WITHOUT_CLASSIFICATION	0.001810356360226295	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999844911100128	WITHOUT_CLASSIFICATION	1.5508889987281844E-5	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9996815492328	WITHOUT_CLASSIFICATION	3.184507672000617E-4	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9986397678421188	WITHOUT_CLASSIFICATION	0.0013602321578812145	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8946276916502705	WITHOUT_CLASSIFICATION	0.10537230834972953	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999902829515135	WITHOUT_CLASSIFICATION	9.717048486455392E-6	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.99996912020388	WITHOUT_CLASSIFICATION	3.0879796120049774E-5	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999985384271904	WITHOUT_CLASSIFICATION	1.461572809499165E-6	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999997912717224	WITHOUT_CLASSIFICATION	2.0872827757530206E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999513427284681	WITHOUT_CLASSIFICATION	4.8657271531850185E-5	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999994910301035	WITHOUT_CLASSIFICATION	5.089698964791902E-7	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999998832026481	WITHOUT_CLASSIFICATION	1.1679735195780328E-7	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999886465123844	WITHOUT_CLASSIFICATION	1.1353487615681002E-5	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999994910301035	WITHOUT_CLASSIFICATION	5.089698964791902E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999513427284681	WITHOUT_CLASSIFICATION	4.8657271531850185E-5	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999998832026481	WITHOUT_CLASSIFICATION	1.1679735195780328E-7	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.9999991699487782	WITHOUT_CLASSIFICATION	8.300512217848267E-7	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999998128722897	WITHOUT_CLASSIFICATION	1.871277104479256E-7	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999953787492889	WITHOUT_CLASSIFICATION	4.6212507110687974E-6	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999333110738023	WITHOUT_CLASSIFICATION	6.6688926197704E-5	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999912232368	WITHOUT_CLASSIFICATION	8.776763214656843E-9	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9919499625304122	WITHOUT_CLASSIFICATION	0.008050037469587814	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999450608004529	WITHOUT_CLASSIFICATION	5.493919954725649E-5	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999161581603612	WITHOUT_CLASSIFICATION	8.384183963878268E-5	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999732753087	WITHOUT_CLASSIFICATION	2.6724691307461558E-8	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999826673959105	WITHOUT_CLASSIFICATION	1.733260408946271E-5	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.9999748023509598	WITHOUT_CLASSIFICATION	2.5197649040243282E-5	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999970328317354	WITHOUT_CLASSIFICATION	2.967168264658667E-6	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9996590097818069	WITHOUT_CLASSIFICATION	3.409902181931376E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999333110738023	WITHOUT_CLASSIFICATION	6.6688926197704E-5	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998955541697	WITHOUT_CLASSIFICATION	1.044458303674221E-7	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999923014794029	WITHOUT_CLASSIFICATION	7.698520597143156E-6	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999884640194346	WITHOUT_CLASSIFICATION	1.1535980565262943E-5	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999986324565905	WITHOUT_CLASSIFICATION	1.367543409461892E-6	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999984442289026	WITHOUT_CLASSIFICATION	1.555771097389688E-6	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999954556602	WITHOUT_CLASSIFICATION	4.544339830598744E-9	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999948474876742	WITHOUT_CLASSIFICATION	5.152512325883595E-6	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.99999999695933	WITHOUT_CLASSIFICATION	3.0406701234480417E-9	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999509063461915	WITHOUT_CLASSIFICATION	4.909365380855012E-5	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999998312784484	WITHOUT_CLASSIFICATION	1.6872155159691694E-7	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999952955266	WITHOUT_CLASSIFICATION	4.7044733621161535E-9	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999952955266	WITHOUT_CLASSIFICATION	4.7044733621161535E-9	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999978386819	WITHOUT_CLASSIFICATION	2.1613181006661518E-8	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999978386819	WITHOUT_CLASSIFICATION	2.1613181006661518E-8	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.99991446186979	WITHOUT_CLASSIFICATION	8.553813020992399E-5	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999884640194346	WITHOUT_CLASSIFICATION	1.1535980565262943E-5	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999996255318163	WITHOUT_CLASSIFICATION	3.7446818376299787E-7	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999999974026293	WITHOUT_CLASSIFICATION	2.5973707048524288E-8	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999914031278	WITHOUT_CLASSIFICATION	8.596872205311335E-9	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999914031278	WITHOUT_CLASSIFICATION	8.596872205311335E-9	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999954480174821	WITHOUT_CLASSIFICATION	4.551982517966798E-6	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999998632260928	WITHOUT_CLASSIFICATION	1.3677390715387125E-7	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999873109059	WITHOUT_CLASSIFICATION	1.2689094177012713E-8	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9999996736895834	WITHOUT_CLASSIFICATION	3.263104166484681E-7	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.996242448046243	WITHOUT_CLASSIFICATION	0.0037575519537570348	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9894105523085909	WITHOUT_CLASSIFICATION	0.010589447691409171	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999780912858665	WITHOUT_CLASSIFICATION	2.1908714133507714E-5	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999947959103332	WITHOUT_CLASSIFICATION	5.204089666803795E-6	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9999804826862497	WITHOUT_CLASSIFICATION	1.95173137502682E-5	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999899526508111	WITHOUT_CLASSIFICATION	1.0047349188784713E-5	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.9999969875622623	WITHOUT_CLASSIFICATION	3.012437737732068E-6	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.9999985358114789	WITHOUT_CLASSIFICATION	1.464188521083019E-6	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999997905734914	WITHOUT_CLASSIFICATION	2.0942650863156301E-7	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.9999998323956392	WITHOUT_CLASSIFICATION	1.6760436070770022E-7	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999999772685279	WITHOUT_CLASSIFICATION	2.2731472152857182E-8	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999998415526687	WITHOUT_CLASSIFICATION	1.5844733128385453E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902423664513	WITHOUT_CLASSIFICATION	9.757633548712586E-6	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999977284932802	WITHOUT_CLASSIFICATION	2.271506719866852E-6	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999965911539493	WITHOUT_CLASSIFICATION	3.4088460506969983E-6	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999998999888778	WITHOUT_CLASSIFICATION	1.0001112212218281E-7	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999998977781143	WITHOUT_CLASSIFICATION	1.02221885709211E-6	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.999996602196501	WITHOUT_CLASSIFICATION	3.3978034989241935E-6	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999998814846504	WITHOUT_CLASSIFICATION	1.1851534971101855E-7	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999993627706815	WITHOUT_CLASSIFICATION	6.372293186578096E-7	DEFECT
/	WITHOUT_CLASSIFICATION	0.9998845217543925	WITHOUT_CLASSIFICATION	1.1547824560757031E-4	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999998489484235	WITHOUT_CLASSIFICATION	1.5105157640474944E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997158540256408	WITHOUT_CLASSIFICATION	0.0028414597435919525	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999911049787412	WITHOUT_CLASSIFICATION	8.895021258690594E-6	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999972626418637	WITHOUT_CLASSIFICATION	2.7373581362441907E-6	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9995524826156352	WITHOUT_CLASSIFICATION	4.475173843648027E-4	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999951163500906	WITHOUT_CLASSIFICATION	4.883649909404054E-5	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999414985027018	WITHOUT_CLASSIFICATION	5.8501497298293664E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999847380952931	WITHOUT_CLASSIFICATION	1.5261904706958402E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999847380952931	WITHOUT_CLASSIFICATION	1.5261904706958402E-5	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999870088882177	WITHOUT_CLASSIFICATION	1.2991111782272301E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9999962511040962	WITHOUT_CLASSIFICATION	3.7488959039107144E-6	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9998339514115443	WITHOUT_CLASSIFICATION	1.6604858845581044E-4	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9998339514115443	WITHOUT_CLASSIFICATION	1.6604858845581044E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9994228857899552	WITHOUT_CLASSIFICATION	5.77114210044753E-4	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9993739227011956	WITHOUT_CLASSIFICATION	6.260772988042886E-4	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.9998521615604747	WITHOUT_CLASSIFICATION	1.4783843952523754E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999912398665961	WITHOUT_CLASSIFICATION	8.76013340390401E-6	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9999976444908864	WITHOUT_CLASSIFICATION	2.355509113554148E-6	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999988424984185	WITHOUT_CLASSIFICATION	1.1575015815108715E-6	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.9999913106866744	WITHOUT_CLASSIFICATION	8.689313325598972E-6	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999997532833169	WITHOUT_CLASSIFICATION	2.4671668302236555E-7	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999676114816319	WITHOUT_CLASSIFICATION	3.238851836803649E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999676114816319	WITHOUT_CLASSIFICATION	3.238851836803649E-5	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999863914819215	WITHOUT_CLASSIFICATION	1.3608518078488024E-5	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999993509260093	WITHOUT_CLASSIFICATION	6.490739906900953E-7	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999993509260093	WITHOUT_CLASSIFICATION	6.490739906900953E-7	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999882132877999	WITHOUT_CLASSIFICATION	1.1786712200048961E-5	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999980165775242	WITHOUT_CLASSIFICATION	1.98342247580869E-6	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9987356243321532	WITHOUT_CLASSIFICATION	0.0012643756678467997	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.9999971011550998	WITHOUT_CLASSIFICATION	2.89884490020744E-6	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999989238592764	WITHOUT_CLASSIFICATION	1.0761407236963218E-6	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999996773566883	WITHOUT_CLASSIFICATION	3.2264331176390225E-7	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999992492539929	WITHOUT_CLASSIFICATION	7.507460071995403E-7	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999968829119281	WITHOUT_CLASSIFICATION	3.117088072000442E-6	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999673752258	WITHOUT_CLASSIFICATION	3.262477424404274E-8	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9869088328498966	WITHOUT_CLASSIFICATION	0.013091167150103411	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999949152323593	WITHOUT_CLASSIFICATION	5.084767640695781E-6	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999806854334756	WITHOUT_CLASSIFICATION	1.9314566524431572E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999824753940754	WITHOUT_CLASSIFICATION	1.7524605924668984E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999824753940754	WITHOUT_CLASSIFICATION	1.7524605924668984E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999824753940754	WITHOUT_CLASSIFICATION	1.7524605924668984E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999824753940754	WITHOUT_CLASSIFICATION	1.7524605924668984E-5	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999721806980835	WITHOUT_CLASSIFICATION	2.7819301916488056E-5	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.7277593501856111	WITHOUT_CLASSIFICATION	0.2722406498143888	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999956556551479	WITHOUT_CLASSIFICATION	4.3443448521083125E-5	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9999908611425028	WITHOUT_CLASSIFICATION	9.138857497136087E-6	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999994656173591	WITHOUT_CLASSIFICATION	5.343826410294622E-7	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9998665369334746	WITHOUT_CLASSIFICATION	1.3346306652533082E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999932402820304	WITHOUT_CLASSIFICATION	6.759717969611522E-6	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.999992951705566	WITHOUT_CLASSIFICATION	7.048294433930777E-6	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999931199184754	WITHOUT_CLASSIFICATION	6.880081524603363E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999932402820304	WITHOUT_CLASSIFICATION	6.759717969611522E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999932402820304	WITHOUT_CLASSIFICATION	6.759717969611522E-6	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999651159871	WITHOUT_CLASSIFICATION	3.488401292338648E-8	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999992363970747	WITHOUT_CLASSIFICATION	7.636029254084178E-7	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999996028926852	WITHOUT_CLASSIFICATION	3.971073147142916E-7	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999918674729388	WITHOUT_CLASSIFICATION	8.132527061198274E-6	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999437946535816	WITHOUT_CLASSIFICATION	5.6205346418438235E-5	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999987636713645	WITHOUT_CLASSIFICATION	1.2363286354738266E-6	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999994264467492	WITHOUT_CLASSIFICATION	5.735532507096006E-7	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999918674729388	WITHOUT_CLASSIFICATION	8.132527061198274E-6	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9997103531898095	WITHOUT_CLASSIFICATION	2.896468101905338E-4	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999947994326949	WITHOUT_CLASSIFICATION	5.200567305072558E-6	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999988892139164	WITHOUT_CLASSIFICATION	1.1107860835572817E-6	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999915607639858	WITHOUT_CLASSIFICATION	8.439236014135429E-6	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999624513711113	WITHOUT_CLASSIFICATION	3.754862888877706E-5	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998252158816173	WITHOUT_CLASSIFICATION	1.7478411838276994E-4	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999996470813287	WITHOUT_CLASSIFICATION	3.529186713089376E-7	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999950729364733	WITHOUT_CLASSIFICATION	4.927063526752667E-6	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999003070583	WITHOUT_CLASSIFICATION	9.969294163975175E-8	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999985289821022	WITHOUT_CLASSIFICATION	1.4710178978244883E-6	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999414585046	WITHOUT_CLASSIFICATION	5.85414953265458E-8	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999996696138937	WITHOUT_CLASSIFICATION	3.303861062937434E-7	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9992867642996424	WITHOUT_CLASSIFICATION	7.132357003576492E-4	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.999920520098137	WITHOUT_CLASSIFICATION	7.947990186303757E-5	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999994479951014	WITHOUT_CLASSIFICATION	5.520048984957491E-7	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999959862064906	WITHOUT_CLASSIFICATION	4.013793509466712E-6	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998773135869	WITHOUT_CLASSIFICATION	1.2268641311857874E-7	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999950698206846	WITHOUT_CLASSIFICATION	4.93017931540146E-6	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999999889914411	WITHOUT_CLASSIFICATION	1.1008558900488083E-7	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999950698206846	WITHOUT_CLASSIFICATION	4.93017931540146E-6	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999996550288479	WITHOUT_CLASSIFICATION	3.449711521395696E-7	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999962204414148	WITHOUT_CLASSIFICATION	3.779558585178966E-6	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999989230076363	WITHOUT_CLASSIFICATION	1.0769923636798042E-6	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9998651012978677	WITHOUT_CLASSIFICATION	1.3489870213236315E-4	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999999626077398	WITHOUT_CLASSIFICATION	3.739226012447742E-8	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.999998682822347	WITHOUT_CLASSIFICATION	1.3171776529021893E-6	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999990499039184	WITHOUT_CLASSIFICATION	9.500960816411923E-7	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998773135869	WITHOUT_CLASSIFICATION	1.2268641311857874E-7	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999999889914411	WITHOUT_CLASSIFICATION	1.1008558900488083E-7	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999996550288479	WITHOUT_CLASSIFICATION	3.449711521395696E-7	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999997680646214	WITHOUT_CLASSIFICATION	2.3193537856101982E-7	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9999649603576386	WITHOUT_CLASSIFICATION	3.5039642361458826E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9999936865534369	WITHOUT_CLASSIFICATION	6.313446563094909E-6	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999938118728879	WITHOUT_CLASSIFICATION	6.188127112075716E-6	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9999896634379078	WITHOUT_CLASSIFICATION	1.0336562092201135E-5	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.997545167300393	WITHOUT_CLASSIFICATION	0.0024548326996071033	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999170919086	WITHOUT_CLASSIFICATION	8.290809141424255E-8	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902423664513	WITHOUT_CLASSIFICATION	9.757633548712586E-6	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999962204414148	WITHOUT_CLASSIFICATION	3.779558585178966E-6	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.999979563173931	WITHOUT_CLASSIFICATION	2.0436826068986475E-5	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999560664794745	WITHOUT_CLASSIFICATION	4.393352052549567E-5	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999373733896008	WITHOUT_CLASSIFICATION	6.262661039923999E-5	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999991643057238	WITHOUT_CLASSIFICATION	8.356942763522725E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902423664513	WITHOUT_CLASSIFICATION	9.757633548712586E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997158540256408	WITHOUT_CLASSIFICATION	0.0028414597435919525	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999999540722354	WITHOUT_CLASSIFICATION	4.592776452869421E-8	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902423664513	WITHOUT_CLASSIFICATION	9.757633548712586E-6	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999950811395	WITHOUT_CLASSIFICATION	4.918860529553148E-9	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999965514003353	WITHOUT_CLASSIFICATION	3.4485996648116528E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997158540256408	WITHOUT_CLASSIFICATION	0.0028414597435919525	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999147928922452	WITHOUT_CLASSIFICATION	8.520710775480889E-5	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999997348930236	WITHOUT_CLASSIFICATION	2.651069763013558E-7	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999132669043	WITHOUT_CLASSIFICATION	8.673309575480694E-8	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.9999878666511957	WITHOUT_CLASSIFICATION	1.2133348804258387E-5	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999989591535249	WITHOUT_CLASSIFICATION	1.0408464750911767E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999787079777839	WITHOUT_CLASSIFICATION	2.1292022216059737E-5	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999987499481565	WITHOUT_CLASSIFICATION	1.2500518434913244E-6	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.9999984634081417	WITHOUT_CLASSIFICATION	1.536591858324553E-6	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998011092023954	WITHOUT_CLASSIFICATION	1.9889079760463345E-4	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999997668780365	WITHOUT_CLASSIFICATION	2.3312196351794144E-7	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9987356243321532	WITHOUT_CLASSIFICATION	0.0012643756678467997	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999947212123977	WITHOUT_CLASSIFICATION	5.278787602321376E-6	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9080773193006525	WITHOUT_CLASSIFICATION	0.09192268069934754	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999993099352349	WITHOUT_CLASSIFICATION	6.900647650178413E-7	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999538599754967	WITHOUT_CLASSIFICATION	4.614002450329716E-5	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999998123760404	WITHOUT_CLASSIFICATION	1.8762395960675043E-6	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999999615286596	WITHOUT_CLASSIFICATION	3.8471340408311026E-7	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9991823145083767	WITHOUT_CLASSIFICATION	8.176854916232825E-4	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999981441758525	WITHOUT_CLASSIFICATION	1.8558241474899723E-6	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999632273645	WITHOUT_CLASSIFICATION	3.677263549858588E-8	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999909871544769	WITHOUT_CLASSIFICATION	9.012845523034474E-6	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.998666092361103	WITHOUT_CLASSIFICATION	0.0013339076388970037	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9979960672763044	WITHOUT_CLASSIFICATION	0.00200393272369563	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9990669496250603	WITHOUT_CLASSIFICATION	9.33050374939792E-4	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999999321835517	WITHOUT_CLASSIFICATION	6.781644825434447E-8	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999991354178722	WITHOUT_CLASSIFICATION	8.645821277097289E-7	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999937773441073	WITHOUT_CLASSIFICATION	6.222655892691152E-5	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999639144316727	WITHOUT_CLASSIFICATION	3.608556832722562E-5	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999989502084993	WITHOUT_CLASSIFICATION	1.0497915007818889E-6	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999989823446574	WITHOUT_CLASSIFICATION	1.0176553425199012E-6	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.999999614443424	WITHOUT_CLASSIFICATION	3.8555657602558583E-7	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9957805531426259	WITHOUT_CLASSIFICATION	0.004219446857374105	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.9993538135390962	WITHOUT_CLASSIFICATION	6.461864609037881E-4	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999998784470645	WITHOUT_CLASSIFICATION	1.215529355980549E-7	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999919428478776	WITHOUT_CLASSIFICATION	8.057152122391106E-6	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.999999743450711	WITHOUT_CLASSIFICATION	2.5654928902228297E-7	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999423481293955	WITHOUT_CLASSIFICATION	5.7651870604495573E-5	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9996653479047642	WITHOUT_CLASSIFICATION	3.3465209523567607E-4	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9930526182488352	WITHOUT_CLASSIFICATION	0.006947381751164748	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999975492560167	WITHOUT_CLASSIFICATION	2.4507439832703095E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997158540256408	WITHOUT_CLASSIFICATION	0.0028414597435919525	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999963726931087	WITHOUT_CLASSIFICATION	3.62730689124175E-6	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999804569731937	WITHOUT_CLASSIFICATION	1.954302680628709E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999804569731937	WITHOUT_CLASSIFICATION	1.954302680628709E-5	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999886990035816	WITHOUT_CLASSIFICATION	1.130099641846273E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999787079777839	WITHOUT_CLASSIFICATION	2.1292022216059737E-5	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9992834284691281	WITHOUT_CLASSIFICATION	7.165715308718194E-4	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999446391703	WITHOUT_CLASSIFICATION	5.5360829538179235E-8	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999448004930362	WITHOUT_CLASSIFICATION	5.519950696373804E-5	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999749938939019	WITHOUT_CLASSIFICATION	2.5006106098121073E-5	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.9999900214376497	WITHOUT_CLASSIFICATION	9.97856235035001E-6	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9999526556065043	WITHOUT_CLASSIFICATION	4.7344393495800274E-5	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999891868167634	WITHOUT_CLASSIFICATION	1.0813183236519156E-5	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999200657169	WITHOUT_CLASSIFICATION	7.99342831430668E-8	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999862677863264	WITHOUT_CLASSIFICATION	1.3732213673545988E-5	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999979143927443	WITHOUT_CLASSIFICATION	2.085607255694173E-6	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999995819476625	WITHOUT_CLASSIFICATION	4.1805233746450987E-7	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999957290302	WITHOUT_CLASSIFICATION	4.270969825890498E-9	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999999925109602	WITHOUT_CLASSIFICATION	7.489039799257057E-8	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999997477007123	WITHOUT_CLASSIFICATION	2.5229928774138667E-7	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999996554273226	WITHOUT_CLASSIFICATION	3.4457267741132877E-7	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999997768197805	WITHOUT_CLASSIFICATION	2.2318021959047497E-7	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999811363911	WITHOUT_CLASSIFICATION	1.8863608940183017E-8	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999925995996566	WITHOUT_CLASSIFICATION	7.400400343310238E-6	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999977120840688	WITHOUT_CLASSIFICATION	2.2879159311455177E-6	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998933591925474	WITHOUT_CLASSIFICATION	1.0664080745249623E-4	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999990614323289	WITHOUT_CLASSIFICATION	9.385676712541509E-7	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999990489399992	WITHOUT_CLASSIFICATION	9.510600006739495E-7	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9930526182488352	WITHOUT_CLASSIFICATION	0.006947381751164748	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999977271433607	WITHOUT_CLASSIFICATION	2.2728566393926267E-6	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999991172716928	WITHOUT_CLASSIFICATION	8.827283072566042E-7	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999995370208334	WITHOUT_CLASSIFICATION	4.6297916663195394E-7	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.999991289772851	WITHOUT_CLASSIFICATION	8.710227149031333E-6	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9907188486404233	WITHOUT_CLASSIFICATION	0.009281151359576719	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999990262858875	WITHOUT_CLASSIFICATION	9.737141124894772E-6	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999863741473622	WITHOUT_CLASSIFICATION	1.362585263766324E-5	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999994992316651	WITHOUT_CLASSIFICATION	5.007683349637268E-7	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999992718638672	WITHOUT_CLASSIFICATION	7.281361328335348E-7	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999966841908	WITHOUT_CLASSIFICATION	3.315809134236937E-9	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999994198164599	WITHOUT_CLASSIFICATION	5.801835401181991E-7	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999987873487984	WITHOUT_CLASSIFICATION	1.2126512015465187E-6	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999915729056017	WITHOUT_CLASSIFICATION	8.427094398298596E-6	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9988285682444686	WITHOUT_CLASSIFICATION	0.0011714317555313347	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9957666741372863	WITHOUT_CLASSIFICATION	0.004233325862713765	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999993553092165	WITHOUT_CLASSIFICATION	6.446907835261873E-7	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999993553092165	WITHOUT_CLASSIFICATION	6.446907835261873E-7	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999811993330092	WITHOUT_CLASSIFICATION	1.880066699076483E-5	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999489145405	WITHOUT_CLASSIFICATION	5.1085459663846006E-8	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999901105101898	WITHOUT_CLASSIFICATION	9.889489810210114E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999901105101898	WITHOUT_CLASSIFICATION	9.889489810210114E-5	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999999704940891	WITHOUT_CLASSIFICATION	2.9505910898649127E-8	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999761452419865	WITHOUT_CLASSIFICATION	2.3854758013476036E-5	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9991545231621397	WITHOUT_CLASSIFICATION	8.454768378601654E-4	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999951880665	WITHOUT_CLASSIFICATION	4.8119335189642825E-9	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999851441520241	WITHOUT_CLASSIFICATION	1.4855847975913812E-5	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999997522966904	WITHOUT_CLASSIFICATION	2.477033095906493E-6	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999993432486545	WITHOUT_CLASSIFICATION	6.567513453987114E-7	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999993432486545	WITHOUT_CLASSIFICATION	6.567513453987114E-7	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999989242950575	WITHOUT_CLASSIFICATION	1.0757049424534083E-6	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999988312673923	WITHOUT_CLASSIFICATION	1.1687326076764589E-6	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999996842882137	WITHOUT_CLASSIFICATION	3.1571178621259826E-7	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999803247572255	WITHOUT_CLASSIFICATION	1.9675242774356147E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999803247572255	WITHOUT_CLASSIFICATION	1.9675242774356147E-5	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.9999976986235481	WITHOUT_CLASSIFICATION	2.3013764518795577E-6	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999619621538427	WITHOUT_CLASSIFICATION	3.803784615727542E-5	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999636546175309	WITHOUT_CLASSIFICATION	3.634538246903408E-5	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999999330702584	WITHOUT_CLASSIFICATION	6.692974154936282E-8	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.999981346441814	WITHOUT_CLASSIFICATION	1.8653558185957805E-5	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999997169808454	WITHOUT_CLASSIFICATION	2.8301915452339664E-7	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999940304835913	WITHOUT_CLASSIFICATION	5.969516408706434E-6	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999990452093289	WITHOUT_CLASSIFICATION	9.54790671164454E-7	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999999715149994	WITHOUT_CLASSIFICATION	2.8485000509048163E-8	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999945857998693	WITHOUT_CLASSIFICATION	5.414200130618958E-6	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999974506208	WITHOUT_CLASSIFICATION	2.5493790872998443E-9	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9999464490140314	WITHOUT_CLASSIFICATION	5.355098596863315E-5	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999986300217725	WITHOUT_CLASSIFICATION	1.3699782275155194E-6	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9988369861096404	WITHOUT_CLASSIFICATION	0.0011630138903595997	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9999975275893743	WITHOUT_CLASSIFICATION	2.472410625809549E-6	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999953656147584	WITHOUT_CLASSIFICATION	4.634385241562218E-6	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999998712749104	WITHOUT_CLASSIFICATION	1.2872508962866784E-7	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999762411076579	WITHOUT_CLASSIFICATION	2.3758892342085506E-5	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9998940411948692	WITHOUT_CLASSIFICATION	1.0595880513084836E-4	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999289876274758	WITHOUT_CLASSIFICATION	7.101237252421421E-5	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9995113926044076	WITHOUT_CLASSIFICATION	4.886073955924013E-4	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999457342117742	WITHOUT_CLASSIFICATION	5.426578822567281E-5	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.999996525112926	WITHOUT_CLASSIFICATION	3.4748870740019718E-6	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999967487308811	WITHOUT_CLASSIFICATION	3.251269118954439E-6	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.9999987202322792	WITHOUT_CLASSIFICATION	1.2797677207274772E-6	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9999928196296087	WITHOUT_CLASSIFICATION	7.180370391229906E-6	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999988170381056	WITHOUT_CLASSIFICATION	1.182961894432938E-6	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998877250455575	WITHOUT_CLASSIFICATION	1.1227495444252449E-4	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999884873408	WITHOUT_CLASSIFICATION	1.1512659162847433E-8	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999997551416405	WITHOUT_CLASSIFICATION	2.448583595063719E-7	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9996463702806799	WITHOUT_CLASSIFICATION	3.5362971932013124E-4	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999976894856866	WITHOUT_CLASSIFICATION	2.310514313523916E-6	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999994506818897	WITHOUT_CLASSIFICATION	5.493181103696756E-7	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999636025548955	WITHOUT_CLASSIFICATION	3.639744510450214E-5	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999994305158277	WITHOUT_CLASSIFICATION	5.694841722393837E-7	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999528948450519	WITHOUT_CLASSIFICATION	4.710515494813549E-5	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9999932306673661	WITHOUT_CLASSIFICATION	6.769332633950049E-6	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999978892022622	WITHOUT_CLASSIFICATION	2.110797737948645E-6	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999996652010529	WITHOUT_CLASSIFICATION	3.347989471667905E-7	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999996694798855	WITHOUT_CLASSIFICATION	3.3052011453715273E-7	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9995330865336912	WITHOUT_CLASSIFICATION	4.669134663088234E-4	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9974297980429924	WITHOUT_CLASSIFICATION	0.002570201957007665	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.9999903989111555	WITHOUT_CLASSIFICATION	9.60108884456136E-6	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.999999330893874	WITHOUT_CLASSIFICATION	6.691061260408191E-7	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999979402687492	WITHOUT_CLASSIFICATION	2.0597312508429808E-6	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999942922169167	WITHOUT_CLASSIFICATION	5.707783083287792E-6	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.9950594182030438	WITHOUT_CLASSIFICATION	0.004940581796956263	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999994402585345	WITHOUT_CLASSIFICATION	5.597414654953874E-6	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999949847406299	WITHOUT_CLASSIFICATION	5.015259370189403E-6	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999998119364882	WITHOUT_CLASSIFICATION	1.880635117299726E-7	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9986324674016289	WITHOUT_CLASSIFICATION	0.0013675325983710282	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999996668316853	WITHOUT_CLASSIFICATION	3.331683146827953E-7	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999998496602874	WITHOUT_CLASSIFICATION	1.5033971255897387E-7	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999836483786	WITHOUT_CLASSIFICATION	1.6351621418094928E-8	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9997236033075534	WITHOUT_CLASSIFICATION	2.763966924465394E-4	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999984432750337	WITHOUT_CLASSIFICATION	1.556724966326307E-6	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9988825290691032	WITHOUT_CLASSIFICATION	0.0011174709308967702	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999986092595013	WITHOUT_CLASSIFICATION	1.3907404986505188E-6	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9992703256777329	WITHOUT_CLASSIFICATION	7.296743222670077E-4	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999653115206852	WITHOUT_CLASSIFICATION	3.468847931478707E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999694355157869	WITHOUT_CLASSIFICATION	3.056448421307055E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999694355157869	WITHOUT_CLASSIFICATION	3.056448421307055E-5	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999952697124	WITHOUT_CLASSIFICATION	4.730287674463024E-9	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.999999778193735	WITHOUT_CLASSIFICATION	2.2180626502507422E-7	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999993900214	WITHOUT_CLASSIFICATION	6.099786764327868E-10	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999752935457	WITHOUT_CLASSIFICATION	2.470645430912806E-8	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999574628086728	WITHOUT_CLASSIFICATION	4.2537191327247776E-5	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999995108539799	WITHOUT_CLASSIFICATION	4.891460200845075E-7	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999827017225	WITHOUT_CLASSIFICATION	1.729827750246947E-8	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999977244791	WITHOUT_CLASSIFICATION	2.275520910254533E-8	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999974181477159	WITHOUT_CLASSIFICATION	2.581852284175178E-6	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999949941710164	WITHOUT_CLASSIFICATION	5.005828983585785E-6	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999995736515228	WITHOUT_CLASSIFICATION	4.2634847719678875E-6	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999639492408461	WITHOUT_CLASSIFICATION	3.605075915397235E-5	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999979138474473	WITHOUT_CLASSIFICATION	2.086152552702333E-6	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999991462792	WITHOUT_CLASSIFICATION	8.537207450228218E-10	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998148569714	WITHOUT_CLASSIFICATION	1.8514302864361108E-7	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998148569714	WITHOUT_CLASSIFICATION	1.8514302864361108E-7	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999994115917998	WITHOUT_CLASSIFICATION	5.884082000973808E-7	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9996885064377029	WITHOUT_CLASSIFICATION	3.1149356229714844E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999497904846	WITHOUT_CLASSIFICATION	5.020951541913289E-8	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999680301449	WITHOUT_CLASSIFICATION	3.196985509143599E-8	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997939254981	WITHOUT_CLASSIFICATION	2.0607450184884958E-7	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916383880104	WITHOUT_CLASSIFICATION	8.361611989572744E-6	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999931543345	WITHOUT_CLASSIFICATION	6.84566543585079E-9	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9999766096008214	WITHOUT_CLASSIFICATION	2.3390399178610442E-5	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9870652673915458	WITHOUT_CLASSIFICATION	0.012934732608454208	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999986223883	WITHOUT_CLASSIFICATION	1.3776117716725017E-9	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999992694357243	WITHOUT_CLASSIFICATION	7.305642758001761E-7	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999909134106	WITHOUT_CLASSIFICATION	9.086589415604933E-9	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999996072996398	WITHOUT_CLASSIFICATION	3.927003602344149E-7	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999958335369474	WITHOUT_CLASSIFICATION	4.166463052569703E-6	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999997645547282	WITHOUT_CLASSIFICATION	2.354452719982789E-7	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999774300859031	WITHOUT_CLASSIFICATION	2.256991409692754E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999943665445455	WITHOUT_CLASSIFICATION	5.633455454494979E-6	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999992252893307	WITHOUT_CLASSIFICATION	7.747106693720445E-7	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999979589973896	WITHOUT_CLASSIFICATION	2.041002610396757E-6	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999989815348417	WITHOUT_CLASSIFICATION	1.0184651582910016E-5	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999721776643	WITHOUT_CLASSIFICATION	2.7822335669735548E-8	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999377744925	WITHOUT_CLASSIFICATION	6.222550741577285E-8	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999994513037357	WITHOUT_CLASSIFICATION	5.486962642260218E-7	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998729302977	WITHOUT_CLASSIFICATION	1.2706970227951538E-7	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998278037284	WITHOUT_CLASSIFICATION	1.721962717029246E-7	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9999984437214647	WITHOUT_CLASSIFICATION	1.55627853526059E-6	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9979471114459085	WITHOUT_CLASSIFICATION	0.0020528885540913857	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999989509186018	WITHOUT_CLASSIFICATION	1.0490813981934934E-6	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999859294120746	WITHOUT_CLASSIFICATION	1.4070587925353501E-5	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9997944365896855	WITHOUT_CLASSIFICATION	2.055634103146093E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999977892157148	WITHOUT_CLASSIFICATION	2.210784285178943E-6	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999996628500208	WITHOUT_CLASSIFICATION	3.371499791152446E-7	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999859510266164	WITHOUT_CLASSIFICATION	1.4048973383647812E-5	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999984232376892	WITHOUT_CLASSIFICATION	1.5767623108763724E-6	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999927926292	WITHOUT_CLASSIFICATION	7.2073708706883094E-9	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999958543996992	WITHOUT_CLASSIFICATION	4.145600300899401E-6	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.999997193410544	WITHOUT_CLASSIFICATION	2.8065894559238926E-6	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999975674488335	WITHOUT_CLASSIFICATION	2.432551166406844E-6	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998422008156	WITHOUT_CLASSIFICATION	1.5779918438869402E-7	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999981925360731	WITHOUT_CLASSIFICATION	1.807463926911245E-6	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9919926046161842	WITHOUT_CLASSIFICATION	0.008007395383815815	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.999962565918333	WITHOUT_CLASSIFICATION	3.743408166705398E-5	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9993640931525691	WITHOUT_CLASSIFICATION	6.359068474308101E-4	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9993640931525691	WITHOUT_CLASSIFICATION	6.359068474308101E-4	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999998178729442	WITHOUT_CLASSIFICATION	1.8212705579480205E-7	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9996417569776606	WITHOUT_CLASSIFICATION	3.5824302233941196E-4	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999935934650278	WITHOUT_CLASSIFICATION	6.406534972157763E-6	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9997409358030788	WITHOUT_CLASSIFICATION	2.5906419692123305E-4	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.99999814344247	WITHOUT_CLASSIFICATION	1.8565575300179417E-6	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999997692648643	WITHOUT_CLASSIFICATION	2.3073513551236218E-7	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9996085147563675	WITHOUT_CLASSIFICATION	3.9148524363253007E-4	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999413157217	WITHOUT_CLASSIFICATION	5.868427846530325E-8	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9983007663810555	WITHOUT_CLASSIFICATION	0.0016992336189445968	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974394529408	WITHOUT_CLASSIFICATION	2.5605470591215916E-6	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994506399346	WITHOUT_CLASSIFICATION	5.493600654403062E-7	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999993357518292	WITHOUT_CLASSIFICATION	6.6424817071448E-7	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999975613465661	WITHOUT_CLASSIFICATION	2.438653433987159E-6	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999998106801502	WITHOUT_CLASSIFICATION	1.8931984970667264E-7	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999949361404079	WITHOUT_CLASSIFICATION	5.0638595920126495E-6	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999333279288853	WITHOUT_CLASSIFICATION	6.667207111458003E-5	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9994286435146441	WITHOUT_CLASSIFICATION	5.713564853558999E-4	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.999991109006637	WITHOUT_CLASSIFICATION	8.890993362948796E-6	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999998278195255	WITHOUT_CLASSIFICATION	1.7218047444764833E-7	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9980836670573062	WITHOUT_CLASSIFICATION	0.0019163329426938056	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999999767919071	WITHOUT_CLASSIFICATION	2.3208092903052165E-7	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.99569714802186	WITHOUT_CLASSIFICATION	0.004302851978139992	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9995868212757889	WITHOUT_CLASSIFICATION	4.1317872421107646E-4	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999934419025	WITHOUT_CLASSIFICATION	6.558097479836463E-9	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.99999946745661	WITHOUT_CLASSIFICATION	5.325433900716415E-7	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9997640304998362	WITHOUT_CLASSIFICATION	2.3596950016379614E-4	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9998822793572104	WITHOUT_CLASSIFICATION	1.1772064278967192E-4	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999957035544346	WITHOUT_CLASSIFICATION	4.296445565430164E-6	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999995628161195	WITHOUT_CLASSIFICATION	4.371838805848063E-7	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999866633923703	WITHOUT_CLASSIFICATION	1.3336607629663813E-5	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999072877249573	WITHOUT_CLASSIFICATION	9.271227504261338E-5	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999993081388623	WITHOUT_CLASSIFICATION	6.918611377956184E-7	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999816700187398	WITHOUT_CLASSIFICATION	1.8329981260160973E-5	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999995185581954	WITHOUT_CLASSIFICATION	4.814418046654888E-7	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999985026741449	WITHOUT_CLASSIFICATION	1.4973258550370322E-6	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999904499484	WITHOUT_CLASSIFICATION	9.550051703090391E-9	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999865354326194	WITHOUT_CLASSIFICATION	1.3464567380529727E-5	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999916868265	WITHOUT_CLASSIFICATION	8.313173505529097E-9	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999970113488437	WITHOUT_CLASSIFICATION	2.9886511563059904E-6	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999914962071	WITHOUT_CLASSIFICATION	8.503792832468602E-9	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999997891423604	WITHOUT_CLASSIFICATION	2.1085763945580323E-7	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999934361477035	WITHOUT_CLASSIFICATION	6.563852296474263E-6	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997038905107	WITHOUT_CLASSIFICATION	2.961094892345071E-7	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9992207507017569	WITHOUT_CLASSIFICATION	7.792492982429867E-4	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999992024768275	WITHOUT_CLASSIFICATION	7.975231724412616E-7	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999992387546824	WITHOUT_CLASSIFICATION	7.612453176493192E-7	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999998245077711	WITHOUT_CLASSIFICATION	1.7549222895361532E-7	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9998231755449046	WITHOUT_CLASSIFICATION	1.7682445509544005E-4	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999983013558565	WITHOUT_CLASSIFICATION	1.6986441434822435E-6	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999979138474473	WITHOUT_CLASSIFICATION	2.086152552702333E-6	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999892899840983	WITHOUT_CLASSIFICATION	1.071001590164674E-5	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999870593492	WITHOUT_CLASSIFICATION	1.2940650862712421E-8	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.999952411804852	WITHOUT_CLASSIFICATION	4.758819514808604E-5	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999996036272712	WITHOUT_CLASSIFICATION	3.963727288438271E-7	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999917811319	WITHOUT_CLASSIFICATION	8.218868071214948E-9	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9998126192376825	WITHOUT_CLASSIFICATION	1.8738076231749354E-4	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9997726962795335	WITHOUT_CLASSIFICATION	2.27303720466489E-4	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9990408393307062	WITHOUT_CLASSIFICATION	9.591606692939234E-4	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999997446071242	WITHOUT_CLASSIFICATION	2.5539287593404177E-7	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9984846331990661	WITHOUT_CLASSIFICATION	0.001515366800933875	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999996892943005	WITHOUT_CLASSIFICATION	3.107056994917318E-7	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999539260234296	WITHOUT_CLASSIFICATION	4.607397657036742E-5	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999996148057007	WITHOUT_CLASSIFICATION	3.8519429922373613E-7	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999847762663912	WITHOUT_CLASSIFICATION	1.5223733608872202E-5	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999932812767465	WITHOUT_CLASSIFICATION	6.718723253510899E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999073825552	WITHOUT_CLASSIFICATION	9.261744479106246E-8	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999955277690796	WITHOUT_CLASSIFICATION	4.472230920332164E-6	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999966127769606	WITHOUT_CLASSIFICATION	3.387223039500422E-6	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999510559408	WITHOUT_CLASSIFICATION	4.894405917702502E-8	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9997741892831847	WITHOUT_CLASSIFICATION	2.2581071681537773E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999073825552	WITHOUT_CLASSIFICATION	9.261744479106246E-8	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9988121339811864	WITHOUT_CLASSIFICATION	0.001187866018813638	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9998012860559672	WITHOUT_CLASSIFICATION	1.987139440327377E-4	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999988549887	WITHOUT_CLASSIFICATION	1.1450113877660051E-9	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999998083072353	WITHOUT_CLASSIFICATION	1.9169276455186315E-7	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999998324585695	WITHOUT_CLASSIFICATION	1.6754143050838666E-7	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999668876535871	WITHOUT_CLASSIFICATION	3.3112346412788155E-5	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.999999999882468	WITHOUT_CLASSIFICATION	1.1753195744573219E-10	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9997414083748508	WITHOUT_CLASSIFICATION	2.5859162514920987E-4	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999155719921	WITHOUT_CLASSIFICATION	8.442800791248946E-8	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9991203846620704	WITHOUT_CLASSIFICATION	8.796153379294795E-4	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999937835771942	WITHOUT_CLASSIFICATION	6.2164228058262696E-6	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998573040174955	WITHOUT_CLASSIFICATION	1.4269598250446006E-4	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999981100589912	WITHOUT_CLASSIFICATION	1.8899410087199494E-6	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999999874492836	WITHOUT_CLASSIFICATION	1.2550716344487744E-8	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.999999626809433	WITHOUT_CLASSIFICATION	3.7319056692981984E-7	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9994143482879665	WITHOUT_CLASSIFICATION	5.856517120334935E-4	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999990489399992	WITHOUT_CLASSIFICATION	9.510600006739495E-7	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999998887392552	WITHOUT_CLASSIFICATION	1.1126074482916131E-7	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998296881917	WITHOUT_CLASSIFICATION	1.703118082042031E-7	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999884864767691	WITHOUT_CLASSIFICATION	1.151352323084156E-5	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9992858854364125	WITHOUT_CLASSIFICATION	7.141145635875107E-4	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999988393088	WITHOUT_CLASSIFICATION	1.160691239550503E-9	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999994085998768	WITHOUT_CLASSIFICATION	5.914001231590775E-7	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.999991261007665	WITHOUT_CLASSIFICATION	8.738992334945681E-6	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999693535	WITHOUT_CLASSIFICATION	3.064641260910522E-11	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999998576119554	WITHOUT_CLASSIFICATION	1.4238804445314004E-7	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999916761154704	WITHOUT_CLASSIFICATION	8.323884529620653E-6	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.999748917909239	WITHOUT_CLASSIFICATION	2.5108209076089307E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999996275981017	WITHOUT_CLASSIFICATION	3.7240189835185614E-7	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999750478629565	WITHOUT_CLASSIFICATION	2.495213704338476E-5	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.8919946423316634	DEFECT	0.10800535766833667	WITHOUT_CLASSIFICATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999995553786987	WITHOUT_CLASSIFICATION	4.4462130142935266E-7	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9996572051939787	WITHOUT_CLASSIFICATION	3.427948060212725E-4	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9686923802176013	WITHOUT_CLASSIFICATION	0.03130761978239875	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999905640204351	WITHOUT_CLASSIFICATION	9.4359795649497E-6	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999981780809	WITHOUT_CLASSIFICATION	1.8219191620125321E-9	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999981693096	WITHOUT_CLASSIFICATION	1.830690462328834E-9	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999868957439	WITHOUT_CLASSIFICATION	1.310425614717271E-8	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999781842124187	WITHOUT_CLASSIFICATION	2.181578758125856E-5	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999280811737	WITHOUT_CLASSIFICATION	7.191882625065375E-8	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999887617653284	WITHOUT_CLASSIFICATION	1.1238234671697385E-5	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999976563545365	WITHOUT_CLASSIFICATION	2.3436454634884637E-6	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999976563545365	WITHOUT_CLASSIFICATION	2.3436454634884637E-6	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999680006350935	WITHOUT_CLASSIFICATION	3.199936490657649E-5	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999925949965144	WITHOUT_CLASSIFICATION	7.405003485648026E-6	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999963162674	WITHOUT_CLASSIFICATION	3.6837325977568317E-8	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999756782137281	WITHOUT_CLASSIFICATION	2.4321786271975567E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999912398665961	WITHOUT_CLASSIFICATION	8.76013340390401E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999912398665961	WITHOUT_CLASSIFICATION	8.76013340390401E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999154768877344	WITHOUT_CLASSIFICATION	8.45231122655816E-5	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999980959091	WITHOUT_CLASSIFICATION	1.9040908299479645E-9	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999990519209424	WITHOUT_CLASSIFICATION	9.480790575035286E-7	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999999808398565	WITHOUT_CLASSIFICATION	1.916014350504911E-7	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999997552351421	WITHOUT_CLASSIFICATION	2.4476485793275027E-7	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999965397349737	WITHOUT_CLASSIFICATION	3.460265026405369E-6	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999986301812807	WITHOUT_CLASSIFICATION	1.3698187194118279E-6	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999474305841549	WITHOUT_CLASSIFICATION	5.256941584502737E-5	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999918205614154	WITHOUT_CLASSIFICATION	8.179438584610714E-6	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999659543524	WITHOUT_CLASSIFICATION	3.4045647609869065E-8	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9997777146398187	WITHOUT_CLASSIFICATION	2.2228536018136256E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997893380176	WITHOUT_CLASSIFICATION	2.1066198253070426E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997893380176	WITHOUT_CLASSIFICATION	2.1066198253070426E-7	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.999999998952893	WITHOUT_CLASSIFICATION	1.0471070023708078E-9	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999491985201043	WITHOUT_CLASSIFICATION	5.080147989579863E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999997773037481	WITHOUT_CLASSIFICATION	2.226962517961516E-7	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999999481735493	WITHOUT_CLASSIFICATION	5.18264506606634E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997158540256408	WITHOUT_CLASSIFICATION	0.0028414597435919525	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999998893584766	WITHOUT_CLASSIFICATION	1.1064152347853635E-7	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998445201368	WITHOUT_CLASSIFICATION	1.5547986315021935E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997158540256408	WITHOUT_CLASSIFICATION	0.0028414597435919525	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999399324346	WITHOUT_CLASSIFICATION	6.006756540274768E-8	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999625787745868	WITHOUT_CLASSIFICATION	3.7421225413080494E-5	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999989408657859	WITHOUT_CLASSIFICATION	1.0591342141315126E-6	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999916294552	WITHOUT_CLASSIFICATION	8.370544764067802E-9	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9991203846620704	WITHOUT_CLASSIFICATION	8.796153379294795E-4	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999979408220828	WITHOUT_CLASSIFICATION	2.05917791711192E-6	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9992293748485462	WITHOUT_CLASSIFICATION	7.706251514536965E-4	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999946019804243	WITHOUT_CLASSIFICATION	5.398019575689382E-6	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9999999865485195	WITHOUT_CLASSIFICATION	1.345148050932165E-8	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999998709517118	WITHOUT_CLASSIFICATION	1.2904828819892295E-6	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999991957993648	WITHOUT_CLASSIFICATION	8.042006353143294E-7	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999982039721407	WITHOUT_CLASSIFICATION	1.796027859331461E-6	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999999694976504	WITHOUT_CLASSIFICATION	3.050234960188833E-8	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999974421945645	WITHOUT_CLASSIFICATION	2.5578054353187866E-6	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9986362399215687	WITHOUT_CLASSIFICATION	0.0013637600784313067	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9986362399215687	WITHOUT_CLASSIFICATION	0.0013637600784313067	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999918674729388	WITHOUT_CLASSIFICATION	8.132527061198274E-6	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999939553353	WITHOUT_CLASSIFICATION	6.044664700020419E-9	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999932402820304	WITHOUT_CLASSIFICATION	6.759717969611522E-6	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999997178229744	WITHOUT_CLASSIFICATION	2.821770256090103E-6	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999984987581026	WITHOUT_CLASSIFICATION	1.5012418972494618E-6	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999998232564885	WITHOUT_CLASSIFICATION	1.7674351150442036E-7	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999994479951014	WITHOUT_CLASSIFICATION	5.520048984957491E-7	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999686250862873	WITHOUT_CLASSIFICATION	3.137491371279677E-5	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999997680646214	WITHOUT_CLASSIFICATION	2.3193537856101982E-7	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999995101660923	WITHOUT_CLASSIFICATION	4.898339077042409E-6	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902423664513	WITHOUT_CLASSIFICATION	9.757633548712586E-6	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.8984949035229275	WITHOUT_CLASSIFICATION	0.10150509647707258	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999998834583911	WITHOUT_CLASSIFICATION	1.1654160889399442E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999906966376	WITHOUT_CLASSIFICATION	9.303362363391202E-9	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999987783671236	WITHOUT_CLASSIFICATION	1.2216328764888836E-6	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999999936752889	WITHOUT_CLASSIFICATION	6.324711097058952E-8	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999973740843735	WITHOUT_CLASSIFICATION	2.625915626549155E-6	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999515042299709	WITHOUT_CLASSIFICATION	4.8495770029057454E-5	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9992608577317555	WITHOUT_CLASSIFICATION	7.391422682445391E-4	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.999933248423551	WITHOUT_CLASSIFICATION	6.675157644898814E-5	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999998106702789	WITHOUT_CLASSIFICATION	1.8932972109429722E-7	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999963675171	WITHOUT_CLASSIFICATION	3.6324829919452274E-9	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999636546175309	WITHOUT_CLASSIFICATION	3.634538246903408E-5	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999998399026	WITHOUT_CLASSIFICATION	1.6009738167664868E-10	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999879537265003	WITHOUT_CLASSIFICATION	1.2046273499770935E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999879537265003	WITHOUT_CLASSIFICATION	1.2046273499770935E-5	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9992130408822872	WITHOUT_CLASSIFICATION	7.869591177127056E-4	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.99985279682246	WITHOUT_CLASSIFICATION	1.4720317754004462E-4	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999687613658	WITHOUT_CLASSIFICATION	3.12386342069033E-8	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999876254165255	WITHOUT_CLASSIFICATION	1.2374583474496922E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999884657344974	WITHOUT_CLASSIFICATION	1.1534265502618863E-5	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999937173975461	WITHOUT_CLASSIFICATION	6.282602453929275E-6	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.8959057874419407	WITHOUT_CLASSIFICATION	0.1040942125580593	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999620330036267	WITHOUT_CLASSIFICATION	3.796699637328926E-5	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.8052232964643704	WITHOUT_CLASSIFICATION	0.19477670353562967	DEFECT
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.9895145884739953	DEFECT	0.010485411526004736	WITHOUT_CLASSIFICATION
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9657950380505217	DEFECT	0.03420496194947832	WITHOUT_CLASSIFICATION
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9754864678075245	DEFECT	0.024513532192475557	WITHOUT_CLASSIFICATION
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.9999999985598468	WITHOUT_CLASSIFICATION	1.4401532386551135E-9	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.9979424734407417	WITHOUT_CLASSIFICATION	0.0020575265592583077	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.7489236616160082	DEFECT	0.25107633838399185	WITHOUT_CLASSIFICATION
TODO : should this be an error?	DEFECT	0.9953581711118068	WITHOUT_CLASSIFICATION	0.004641828888193209	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.9038902434750018	DEFECT	0.09610975652499824	WITHOUT_CLASSIFICATION
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.9610757629184314	WITHOUT_CLASSIFICATION	0.038924237081568495	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8340255185206095	DEFECT	0.16597448147939048	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8340255185206095	DEFECT	0.16597448147939048	WITHOUT_CLASSIFICATION
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9965523332155506	WITHOUT_CLASSIFICATION	0.0034476667844494	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.999940782012705	WITHOUT_CLASSIFICATION	5.921798729498045E-5	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9920312565588781	DEFECT	0.007968743441121891	WITHOUT_CLASSIFICATION
this call is side-effecty	DEFECT	0.999980720335531	WITHOUT_CLASSIFICATION	1.9279664469043162E-5	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.9383594712503822	WITHOUT_CLASSIFICATION	0.06164052874961771	DEFECT
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9613451459115722	WITHOUT_CLASSIFICATION	0.038654854088427885	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.8050806302987218	DEFECT	0.1949193697012782	WITHOUT_CLASSIFICATION
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.9461351412767984	WITHOUT_CLASSIFICATION	0.05386485872320162	DEFECT
TODO: is this completely correct?	DEFECT	0.8858046498582667	WITHOUT_CLASSIFICATION	0.11419535014173324	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.8916004669054448	DEFECT	0.10839953309455523	WITHOUT_CLASSIFICATION
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.6555469513896617	WITHOUT_CLASSIFICATION	0.3444530486103384	DEFECT
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9995441106432644	WITHOUT_CLASSIFICATION	4.5588935673555994E-4	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.9890738375254482	DEFECT	0.0109261624745517	WITHOUT_CLASSIFICATION
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.5367774428436288	WITHOUT_CLASSIFICATION	0.4632225571563712	DEFECT
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9956658947425701	WITHOUT_CLASSIFICATION	0.004334105257430002	DEFECT
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.9251252180865771	WITHOUT_CLASSIFICATION	0.07487478191342298	DEFECT
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.8405993057778158	WITHOUT_CLASSIFICATION	0.15940069422218417	DEFECT
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.8951729105810514	WITHOUT_CLASSIFICATION	0.10482708941894861	DEFECT
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.5377309533663672	DEFECT	0.46226904663363266	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8340255185206095	DEFECT	0.16597448147939048	WITHOUT_CLASSIFICATION
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9995930729146272	DEFECT	4.069270853728767E-4	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.9104633900363518	WITHOUT_CLASSIFICATION	0.08953660996364815	DEFECT
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.9074088885521471	WITHOUT_CLASSIFICATION	0.09259111144785294	DEFECT
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.998575503967126	WITHOUT_CLASSIFICATION	0.0014244960328739845	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.9999842978378	WITHOUT_CLASSIFICATION	1.5702162200013877E-5	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9998484397216555	WITHOUT_CLASSIFICATION	1.5156027834447328E-4	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9989684614017106	WITHOUT_CLASSIFICATION	0.001031538598289412	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.6868210897188803	WITHOUT_CLASSIFICATION	0.31317891028111966	DEFECT
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.5388975566048466	DEFECT	0.46110244339515344	WITHOUT_CLASSIFICATION
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.9967133996217494	WITHOUT_CLASSIFICATION	0.0032866003782505435	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.9999522002854729	WITHOUT_CLASSIFICATION	4.779971452713498E-5	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.9741059466943511	DEFECT	0.02589405330564889	WITHOUT_CLASSIFICATION
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9988311463673287	WITHOUT_CLASSIFICATION	0.0011688536326711991	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.9985128260667212	WITHOUT_CLASSIFICATION	0.0014871739332788657	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.926158069951194	WITHOUT_CLASSIFICATION	0.07384193004880599	DEFECT
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.7270762612885607	WITHOUT_CLASSIFICATION	0.2729237387114392	DEFECT
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.9951171519880281	DEFECT	0.0048828480119719265	WITHOUT_CLASSIFICATION
