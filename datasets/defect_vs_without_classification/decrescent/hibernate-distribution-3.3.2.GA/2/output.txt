test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999994629455302	WITHOUT_CLASSIFICATION	5.370544696799893E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999279941003058	WITHOUT_CLASSIFICATION	7.200589969423673E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999279941003058	WITHOUT_CLASSIFICATION	7.200589969423673E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999279941003058	WITHOUT_CLASSIFICATION	7.200589969423673E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999279941003058	WITHOUT_CLASSIFICATION	7.200589969423673E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999279941003058	WITHOUT_CLASSIFICATION	7.200589969423673E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999279941003058	WITHOUT_CLASSIFICATION	7.200589969423673E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999279941003058	WITHOUT_CLASSIFICATION	7.200589969423673E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999542887012566	WITHOUT_CLASSIFICATION	4.5711298743390035E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999542887012566	WITHOUT_CLASSIFICATION	4.5711298743390035E-5	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999933367037095	WITHOUT_CLASSIFICATION	6.663296290473134E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999856459902602	WITHOUT_CLASSIFICATION	1.4354009739936092E-5	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999995435312835	WITHOUT_CLASSIFICATION	4.564687165227685E-7	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999937497321427	WITHOUT_CLASSIFICATION	6.250267857294464E-6	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999937497321427	WITHOUT_CLASSIFICATION	6.250267857294464E-6	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.999999904448843	WITHOUT_CLASSIFICATION	9.555115701199463E-8	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993799332554	WITHOUT_CLASSIFICATION	6.200667446540529E-7	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999983763541229	WITHOUT_CLASSIFICATION	1.623645877074369E-6	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999982014686049	WITHOUT_CLASSIFICATION	1.7985313950518097E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999616449366528	WITHOUT_CLASSIFICATION	3.835506334726305E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999616449366528	WITHOUT_CLASSIFICATION	3.835506334726305E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9988069294140851	WITHOUT_CLASSIFICATION	0.0011930705859149809	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999998662575793	WITHOUT_CLASSIFICATION	1.3374242070147256E-6	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.9999371806954541	WITHOUT_CLASSIFICATION	6.28193045459059E-5	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999986236543896	WITHOUT_CLASSIFICATION	1.376345610413746E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999918889428623	WITHOUT_CLASSIFICATION	8.111057137729322E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999104178624316	WITHOUT_CLASSIFICATION	8.958213756833374E-5	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.999916672554474	WITHOUT_CLASSIFICATION	8.332744552592134E-5	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.999454727602324	WITHOUT_CLASSIFICATION	5.452723976760754E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9988207417359937	WITHOUT_CLASSIFICATION	0.001179258264006342	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999985829108727	WITHOUT_CLASSIFICATION	1.4170891272586729E-6	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9998577817195687	WITHOUT_CLASSIFICATION	1.4221828043123582E-4	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9997327926048325	WITHOUT_CLASSIFICATION	2.6720739516745154E-4	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999982092963264	WITHOUT_CLASSIFICATION	1.7907036735698318E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9997104436752637	WITHOUT_CLASSIFICATION	2.8955632473620326E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9997104436752637	WITHOUT_CLASSIFICATION	2.8955632473620326E-4	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999993669600963	WITHOUT_CLASSIFICATION	6.330399036902915E-7	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9995741135603026	WITHOUT_CLASSIFICATION	4.2588643969737497E-4	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999992584725961	WITHOUT_CLASSIFICATION	7.415274038622102E-7	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999996313587997	WITHOUT_CLASSIFICATION	3.6864120040970434E-7	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999645983460644	WITHOUT_CLASSIFICATION	3.540165393557512E-5	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999989809349311	WITHOUT_CLASSIFICATION	1.0190650689013568E-6	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999996721204333	WITHOUT_CLASSIFICATION	3.278795667545978E-7	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999999560201592	WITHOUT_CLASSIFICATION	4.3979840873896024E-8	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999991809615747	WITHOUT_CLASSIFICATION	8.190384253159863E-7	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999974491594037	WITHOUT_CLASSIFICATION	2.5508405963647177E-6	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999998992342947	WITHOUT_CLASSIFICATION	1.0076570530123883E-6	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999384988154005	WITHOUT_CLASSIFICATION	6.150118459952484E-5	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999991030425712	WITHOUT_CLASSIFICATION	8.969574286985252E-7	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999981221898638	WITHOUT_CLASSIFICATION	1.8778101360814642E-6	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999902976743253	WITHOUT_CLASSIFICATION	9.702325674762477E-6	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972630801077	WITHOUT_CLASSIFICATION	2.7369198923137073E-6	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999981106372943	WITHOUT_CLASSIFICATION	1.8893627056964855E-5	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999949057864741	WITHOUT_CLASSIFICATION	5.09421352589007E-6	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999902558182194	WITHOUT_CLASSIFICATION	9.744181780515701E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999648599633179	WITHOUT_CLASSIFICATION	3.514003668222182E-5	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9993947041512855	WITHOUT_CLASSIFICATION	6.052958487145383E-4	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999955745130668	WITHOUT_CLASSIFICATION	4.425486933199514E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999648599633179	WITHOUT_CLASSIFICATION	3.514003668222182E-5	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999955745130668	WITHOUT_CLASSIFICATION	4.425486933199514E-6	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999957064661548	WITHOUT_CLASSIFICATION	4.293533845245742E-6	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9969857551863106	WITHOUT_CLASSIFICATION	0.0030142448136894246	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999978475008207	WITHOUT_CLASSIFICATION	2.152499179251685E-6	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999933717898552	WITHOUT_CLASSIFICATION	6.628210144792971E-5	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999952336206753	WITHOUT_CLASSIFICATION	4.7663793246568094E-6	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999991058415606	WITHOUT_CLASSIFICATION	8.941584394172057E-7	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9799708821509776	WITHOUT_CLASSIFICATION	0.020029117849022407	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999956445255549	WITHOUT_CLASSIFICATION	4.355474445006718E-6	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999624348488798	WITHOUT_CLASSIFICATION	3.756515112014179E-5	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9999979497669799	WITHOUT_CLASSIFICATION	2.0502330200822768E-6	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.99999701849411	WITHOUT_CLASSIFICATION	2.9815058899940074E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999955745130668	WITHOUT_CLASSIFICATION	4.425486933199514E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998854035703	WITHOUT_CLASSIFICATION	1.1459642959522289E-7	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999884317048024	WITHOUT_CLASSIFICATION	1.1568295197618054E-5	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999964392228905	WITHOUT_CLASSIFICATION	3.5607771093923975E-6	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999872296613773	WITHOUT_CLASSIFICATION	1.277033862270781E-4	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999981245029628	WITHOUT_CLASSIFICATION	1.8754970372526107E-6	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999876525413253	WITHOUT_CLASSIFICATION	1.2347458674800747E-5	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999893325843523	WITHOUT_CLASSIFICATION	1.0667415647586929E-5	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999801866712837	WITHOUT_CLASSIFICATION	1.9813328716243896E-5	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999995806576258	WITHOUT_CLASSIFICATION	4.1934237413525245E-7	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999979000228	WITHOUT_CLASSIFICATION	2.0999772024699344E-9	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999964600265207	WITHOUT_CLASSIFICATION	3.5399734794135787E-6	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999867189326791	WITHOUT_CLASSIFICATION	1.3281067321039867E-5	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9998673687627112	WITHOUT_CLASSIFICATION	1.3263123728872653E-4	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999940266101411	WITHOUT_CLASSIFICATION	5.97338985889869E-6	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999999976277722	WITHOUT_CLASSIFICATION	2.3722277998417403E-8	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999972891898169	WITHOUT_CLASSIFICATION	2.7108101830404832E-6	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999998848827472	WITHOUT_CLASSIFICATION	1.1511725279082682E-6	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999720296164	WITHOUT_CLASSIFICATION	2.7970383525014894E-8	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999998942639972	WITHOUT_CLASSIFICATION	1.0573600283290091E-7	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999826593176	WITHOUT_CLASSIFICATION	1.734068250090078E-8	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999807754801388	WITHOUT_CLASSIFICATION	1.922451986117765E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999762569856352	WITHOUT_CLASSIFICATION	2.3743014364805338E-5	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999841432458688	WITHOUT_CLASSIFICATION	1.585675413117384E-5	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999988139951189	WITHOUT_CLASSIFICATION	1.1860048810677844E-6	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999762569856352	WITHOUT_CLASSIFICATION	2.3743014364805338E-5	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999983353187308	WITHOUT_CLASSIFICATION	1.6646812691369416E-6	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9997102708101114	WITHOUT_CLASSIFICATION	2.897291898886E-4	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999648599633179	WITHOUT_CLASSIFICATION	3.514003668222182E-5	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999961616684782	WITHOUT_CLASSIFICATION	3.838331521780103E-6	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.9999999623700947	WITHOUT_CLASSIFICATION	3.762990525392835E-8	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999689622882308	WITHOUT_CLASSIFICATION	3.103771176916137E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999689622882308	WITHOUT_CLASSIFICATION	3.103771176916137E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999907817273008	WITHOUT_CLASSIFICATION	9.218272699189197E-6	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999999958255721	WITHOUT_CLASSIFICATION	4.1744279063015995E-8	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999975520346869	WITHOUT_CLASSIFICATION	2.447965313201685E-6	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999303068121	WITHOUT_CLASSIFICATION	6.969318788857656E-8	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999814587368023	WITHOUT_CLASSIFICATION	1.8541263197646048E-5	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999997102317583	WITHOUT_CLASSIFICATION	2.897682417693128E-7	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999879096730133	WITHOUT_CLASSIFICATION	1.20903269867295E-5	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9999930534128814	WITHOUT_CLASSIFICATION	6.946587118685778E-6	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999998805562382	WITHOUT_CLASSIFICATION	1.1944376171049333E-7	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999995012418379	WITHOUT_CLASSIFICATION	4.98758162105749E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998748811838	WITHOUT_CLASSIFICATION	1.2511881623635133E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998748811838	WITHOUT_CLASSIFICATION	1.2511881623635133E-7	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999387073901931	WITHOUT_CLASSIFICATION	6.129260980687223E-5	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999865884374518	WITHOUT_CLASSIFICATION	1.341156254813045E-5	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999881061466759	WITHOUT_CLASSIFICATION	1.1893853324219866E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998748811838	WITHOUT_CLASSIFICATION	1.2511881623635133E-7	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999387073901931	WITHOUT_CLASSIFICATION	6.129260980687223E-5	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999387073901931	WITHOUT_CLASSIFICATION	6.129260980687223E-5	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999951273856951	WITHOUT_CLASSIFICATION	4.872614304930192E-6	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999877505828914	WITHOUT_CLASSIFICATION	1.224941710872157E-5	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999993914561823	WITHOUT_CLASSIFICATION	6.085438177061099E-6	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999950061369862	WITHOUT_CLASSIFICATION	4.9938630137645965E-6	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.999970078470397	WITHOUT_CLASSIFICATION	2.992152960302519E-5	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.999970078470397	WITHOUT_CLASSIFICATION	2.992152960302519E-5	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999962674633415	WITHOUT_CLASSIFICATION	3.7325366585594102E-6	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999951524471068	WITHOUT_CLASSIFICATION	4.847552893129606E-6	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999927544789227	WITHOUT_CLASSIFICATION	7.245521077262969E-6	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999918349007665	WITHOUT_CLASSIFICATION	8.165099233460376E-6	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999918349007665	WITHOUT_CLASSIFICATION	8.165099233460376E-6	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999998257606204	WITHOUT_CLASSIFICATION	1.7423937962111166E-7	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999085078887129	WITHOUT_CLASSIFICATION	9.14921112871748E-5	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999987491212623	WITHOUT_CLASSIFICATION	1.2508787377209006E-6	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999991779094716	WITHOUT_CLASSIFICATION	8.220905284464889E-7	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.999999996760841	WITHOUT_CLASSIFICATION	3.239159005758261E-9	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999889876726067	WITHOUT_CLASSIFICATION	1.1012327393336617E-5	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999528308457376	WITHOUT_CLASSIFICATION	4.716915426235271E-5	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999898421218889	WITHOUT_CLASSIFICATION	1.0157878111171764E-5	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999988289009645	WITHOUT_CLASSIFICATION	1.17109903555629E-6	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999987491212623	WITHOUT_CLASSIFICATION	1.2508787377209006E-6	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999605532819514	WITHOUT_CLASSIFICATION	3.944671804847991E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9998828110751816	WITHOUT_CLASSIFICATION	1.1718892481840053E-4	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9998828110751816	WITHOUT_CLASSIFICATION	1.1718892481840053E-4	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999999840474261	WITHOUT_CLASSIFICATION	1.5952573893793086E-7	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999954205810755	WITHOUT_CLASSIFICATION	4.579418924532205E-6	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.999999365864209	WITHOUT_CLASSIFICATION	6.341357910056678E-7	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999928622993384	WITHOUT_CLASSIFICATION	7.137700661594929E-5	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999784369432595	WITHOUT_CLASSIFICATION	2.156305674044187E-5	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999973819904475	WITHOUT_CLASSIFICATION	2.6180095524914478E-6	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.9999698314083315	WITHOUT_CLASSIFICATION	3.0168591668506564E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9999005729950144	WITHOUT_CLASSIFICATION	9.942700498557511E-5	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999949343413	WITHOUT_CLASSIFICATION	5.065658730480364E-9	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993611641653	WITHOUT_CLASSIFICATION	6.388358347325935E-7	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993611641653	WITHOUT_CLASSIFICATION	6.388358347325935E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.99998891967124	WITHOUT_CLASSIFICATION	1.1080328759942574E-5	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999994629455302	WITHOUT_CLASSIFICATION	5.370544696799893E-7	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999405681199	WITHOUT_CLASSIFICATION	5.943188015625506E-8	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999279941003058	WITHOUT_CLASSIFICATION	7.200589969423673E-5	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9999943801550608	WITHOUT_CLASSIFICATION	5.619844939153877E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999542887012566	WITHOUT_CLASSIFICATION	4.5711298743390035E-5	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.999974507876961	WITHOUT_CLASSIFICATION	2.549212303894553E-5	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999996571393364	WITHOUT_CLASSIFICATION	3.4286066365129206E-7	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999976691426253	WITHOUT_CLASSIFICATION	2.330857374580798E-6	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9999911118887271	WITHOUT_CLASSIFICATION	8.888111272827024E-6	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9952564446916895	WITHOUT_CLASSIFICATION	0.004743555308310525	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999026458429888	WITHOUT_CLASSIFICATION	9.73541570112219E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9995606328332112	WITHOUT_CLASSIFICATION	4.3936716678888584E-4	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999977695997849	WITHOUT_CLASSIFICATION	2.2304002150781107E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999856459902602	WITHOUT_CLASSIFICATION	1.4354009739936092E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.999974757695447	WITHOUT_CLASSIFICATION	2.5242304553059363E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.999974757695447	WITHOUT_CLASSIFICATION	2.5242304553059363E-5	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9999980747893683	WITHOUT_CLASSIFICATION	1.925210631679803E-6	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999880234769692	WITHOUT_CLASSIFICATION	1.1976523030638143E-5	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.999989160115558	WITHOUT_CLASSIFICATION	1.083988444193997E-5	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999848326657402	WITHOUT_CLASSIFICATION	1.5167334259789416E-5	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999957268833483	WITHOUT_CLASSIFICATION	4.273116651756321E-6	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999993260057415	WITHOUT_CLASSIFICATION	6.739942585185146E-7	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999937497321427	WITHOUT_CLASSIFICATION	6.250267857294464E-6	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999692052590935	WITHOUT_CLASSIFICATION	3.079474090650533E-5	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999917906370831	WITHOUT_CLASSIFICATION	8.20936291692775E-6	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999978416295905	WITHOUT_CLASSIFICATION	2.1583704095513694E-6	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999990548704605	WITHOUT_CLASSIFICATION	9.451295395664503E-7	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.9999680623997829	WITHOUT_CLASSIFICATION	3.193760021711154E-5	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.9998832150859517	WITHOUT_CLASSIFICATION	1.1678491404832242E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999991456026955	WITHOUT_CLASSIFICATION	8.543973045580266E-7	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999401474172	WITHOUT_CLASSIFICATION	5.98525828094526E-8	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999998759657911	WITHOUT_CLASSIFICATION	1.2403420888353549E-7	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.999992531774941	WITHOUT_CLASSIFICATION	7.468225058934878E-6	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999963301779246	WITHOUT_CLASSIFICATION	3.6698220753996415E-5	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.9999991809172896	WITHOUT_CLASSIFICATION	8.190827104011089E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999279941003058	WITHOUT_CLASSIFICATION	7.200589969423673E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999279941003058	WITHOUT_CLASSIFICATION	7.200589969423673E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999542887012566	WITHOUT_CLASSIFICATION	4.5711298743390035E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999542887012566	WITHOUT_CLASSIFICATION	4.5711298743390035E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9995606328332112	WITHOUT_CLASSIFICATION	4.3936716678888584E-4	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.999974757695447	WITHOUT_CLASSIFICATION	2.5242304553059363E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999991456026955	WITHOUT_CLASSIFICATION	8.543973045580266E-7	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.999999904448843	WITHOUT_CLASSIFICATION	9.555115701199463E-8	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999946666332044	WITHOUT_CLASSIFICATION	5.33336679556241E-6	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999965934619733	WITHOUT_CLASSIFICATION	3.4065380266525732E-6	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999744402734508	WITHOUT_CLASSIFICATION	2.55597265492493E-5	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.9999820678829026	WITHOUT_CLASSIFICATION	1.7932117097467506E-5	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999998938341835	WITHOUT_CLASSIFICATION	1.0616581650469067E-6	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.9997873223100432	WITHOUT_CLASSIFICATION	2.1267768995673564E-4	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9998513537538667	WITHOUT_CLASSIFICATION	1.486462461332027E-4	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9999287322650149	WITHOUT_CLASSIFICATION	7.126773498515423E-5	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.999999987951372	WITHOUT_CLASSIFICATION	1.2048628064645612E-8	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999976855424324	WITHOUT_CLASSIFICATION	2.3144575674667947E-6	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999976855424324	WITHOUT_CLASSIFICATION	2.3144575674667947E-6	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999997242042221	WITHOUT_CLASSIFICATION	2.7579577789143225E-7	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999964683246588	WITHOUT_CLASSIFICATION	3.5316753411591374E-6	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999994564098263	WITHOUT_CLASSIFICATION	5.435901736484808E-7	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999212852331141	WITHOUT_CLASSIFICATION	7.871476688590378E-5	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998879018638	WITHOUT_CLASSIFICATION	1.1209813614359276E-7	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.9999994094640432	WITHOUT_CLASSIFICATION	5.905359568285428E-7	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9999963879385617	WITHOUT_CLASSIFICATION	3.612061438262083E-6	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993799332554	WITHOUT_CLASSIFICATION	6.200667446540529E-7	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.9997288467912152	WITHOUT_CLASSIFICATION	2.711532087847658E-4	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999984914339378	WITHOUT_CLASSIFICATION	1.5085660621505624E-6	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999984914339378	WITHOUT_CLASSIFICATION	1.5085660621505624E-6	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.9999996155272065	WITHOUT_CLASSIFICATION	3.844727935745234E-7	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999993812827286	WITHOUT_CLASSIFICATION	6.187172713585689E-7	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9999987071908659	WITHOUT_CLASSIFICATION	1.2928091340624293E-6	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999996967783444	WITHOUT_CLASSIFICATION	3.0322165564059334E-7	DEFECT
int	WITHOUT_CLASSIFICATION	0.999746099046325	WITHOUT_CLASSIFICATION	2.5390095367496776E-4	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999542887012566	WITHOUT_CLASSIFICATION	4.5711298743390035E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9995606328332112	WITHOUT_CLASSIFICATION	4.3936716678888584E-4	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999856459902602	WITHOUT_CLASSIFICATION	1.4354009739936092E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999991456026955	WITHOUT_CLASSIFICATION	8.543973045580266E-7	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999991456026955	WITHOUT_CLASSIFICATION	8.543973045580266E-7	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999988352025518	WITHOUT_CLASSIFICATION	1.164797448186567E-6	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999988352025518	WITHOUT_CLASSIFICATION	1.164797448186567E-6	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999964473268664	WITHOUT_CLASSIFICATION	3.552673133541361E-6	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999273322093127	WITHOUT_CLASSIFICATION	7.266779068726851E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999273322093127	WITHOUT_CLASSIFICATION	7.266779068726851E-5	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.9999721092828943	WITHOUT_CLASSIFICATION	2.789071710576725E-5	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.9999919657846091	WITHOUT_CLASSIFICATION	8.034215390829053E-6	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999978637054032	WITHOUT_CLASSIFICATION	2.136294596876716E-6	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999906644399453	WITHOUT_CLASSIFICATION	9.33556005467623E-6	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999941110080702	WITHOUT_CLASSIFICATION	5.888991929883562E-6	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999982014686049	WITHOUT_CLASSIFICATION	1.7985313950518097E-6	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999982014686049	WITHOUT_CLASSIFICATION	1.7985313950518097E-6	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9999660735408724	WITHOUT_CLASSIFICATION	3.392645912765197E-5	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999985869244824	WITHOUT_CLASSIFICATION	1.4130755175853977E-6	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.9999872978560855	WITHOUT_CLASSIFICATION	1.2702143914478709E-5	DEFECT
byte	WITHOUT_CLASSIFICATION	0.999868861134415	WITHOUT_CLASSIFICATION	1.3113886558508122E-4	DEFECT
char	WITHOUT_CLASSIFICATION	0.9999839097348613	WITHOUT_CLASSIFICATION	1.6090265138776874E-5	DEFECT
short	WITHOUT_CLASSIFICATION	0.9999639546164215	WITHOUT_CLASSIFICATION	3.6045383578416295E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999616449366528	WITHOUT_CLASSIFICATION	3.835506334726305E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999180647553588	WITHOUT_CLASSIFICATION	8.193524464107712E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999180647553588	WITHOUT_CLASSIFICATION	8.193524464107712E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9988069294140851	WITHOUT_CLASSIFICATION	0.0011930705859149809	DEFECT
long	WITHOUT_CLASSIFICATION	0.9988069294140851	WITHOUT_CLASSIFICATION	0.0011930705859149809	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999978185457783	WITHOUT_CLASSIFICATION	2.1814542217246816E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999978185457783	WITHOUT_CLASSIFICATION	2.1814542217246816E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998148422671	WITHOUT_CLASSIFICATION	1.8515773303216484E-7	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998148422671	WITHOUT_CLASSIFICATION	1.8515773303216484E-7	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999982014686049	WITHOUT_CLASSIFICATION	1.7985313950518097E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999616449366528	WITHOUT_CLASSIFICATION	3.835506334726305E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999180647553588	WITHOUT_CLASSIFICATION	8.193524464107712E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999180647553588	WITHOUT_CLASSIFICATION	8.193524464107712E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9988069294140851	WITHOUT_CLASSIFICATION	0.0011930705859149809	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999978185457783	WITHOUT_CLASSIFICATION	2.1814542217246816E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999978185457783	WITHOUT_CLASSIFICATION	2.1814542217246816E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998148422671	WITHOUT_CLASSIFICATION	1.8515773303216484E-7	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999998782279236	WITHOUT_CLASSIFICATION	1.2177207651082243E-7	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999976153913158	WITHOUT_CLASSIFICATION	2.3846086841018123E-6	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.999995137650417	WITHOUT_CLASSIFICATION	4.8623495828886634E-6	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999970028767398	WITHOUT_CLASSIFICATION	2.997123260275861E-6	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.999999392805779	WITHOUT_CLASSIFICATION	6.07194221087844E-7	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9998177620020386	WITHOUT_CLASSIFICATION	1.8223799796146566E-4	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9998725879556408	WITHOUT_CLASSIFICATION	1.274120443591978E-4	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.8515785983093013	WITHOUT_CLASSIFICATION	0.14842140169069878	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9991414975400217	WITHOUT_CLASSIFICATION	8.585024599782696E-4	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999987107353133	WITHOUT_CLASSIFICATION	1.2892646866921747E-6	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999921299449405	WITHOUT_CLASSIFICATION	7.870055059594604E-6	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999995887292599	WITHOUT_CLASSIFICATION	4.1127074003491574E-7	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999907817273008	WITHOUT_CLASSIFICATION	9.218272699189197E-6	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9998177620020386	WITHOUT_CLASSIFICATION	1.8223799796146566E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9998177620020386	WITHOUT_CLASSIFICATION	1.8223799796146566E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9998177620020386	WITHOUT_CLASSIFICATION	1.8223799796146566E-4	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999946492667088	WITHOUT_CLASSIFICATION	5.3507332911694515E-6	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999994533994536	WITHOUT_CLASSIFICATION	5.46600546366368E-7	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999994533994536	WITHOUT_CLASSIFICATION	5.46600546366368E-7	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9994302873345721	WITHOUT_CLASSIFICATION	5.697126654279166E-4	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999952474651624	WITHOUT_CLASSIFICATION	4.752534837615935E-6	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999917335256053	WITHOUT_CLASSIFICATION	8.266474394676693E-6	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999698944703626	WITHOUT_CLASSIFICATION	3.0105529637464888E-5	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999698944703626	WITHOUT_CLASSIFICATION	3.0105529637464888E-5	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999918889428623	WITHOUT_CLASSIFICATION	8.111057137729322E-6	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999810149423431	WITHOUT_CLASSIFICATION	1.8985057656878138E-5	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999810149423431	WITHOUT_CLASSIFICATION	1.8985057656878138E-5	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999942117307363	WITHOUT_CLASSIFICATION	5.7882692636205526E-6	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999970169802485	WITHOUT_CLASSIFICATION	2.983019751579763E-6	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999986632163277	WITHOUT_CLASSIFICATION	1.3367836722994964E-6	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9989285632916144	WITHOUT_CLASSIFICATION	0.0010714367083856525	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.9995891588114794	WITHOUT_CLASSIFICATION	4.108411885205896E-4	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.9995453329115008	WITHOUT_CLASSIFICATION	4.546670884990702E-4	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999104178624316	WITHOUT_CLASSIFICATION	8.958213756833374E-5	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9993097915026409	WITHOUT_CLASSIFICATION	6.902084973590373E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9858409461583915	WITHOUT_CLASSIFICATION	0.014159053841608404	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9994173853370261	WITHOUT_CLASSIFICATION	5.826146629739371E-4	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9996136653141305	WITHOUT_CLASSIFICATION	3.8633468586944924E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9988207417359937	WITHOUT_CLASSIFICATION	0.001179258264006342	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999504332823	WITHOUT_CLASSIFICATION	4.956671778522577E-8	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999987950260407	WITHOUT_CLASSIFICATION	1.2049739592943221E-6	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999947831837938	WITHOUT_CLASSIFICATION	5.216816206190514E-6	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9988207417359937	WITHOUT_CLASSIFICATION	0.001179258264006342	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999998646062208	WITHOUT_CLASSIFICATION	1.3539377920297867E-6	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999992150782268	WITHOUT_CLASSIFICATION	7.849217731358535E-7	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999906610168233	WITHOUT_CLASSIFICATION	9.33898317670293E-5	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9988476098318335	WITHOUT_CLASSIFICATION	0.0011523901681664561	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999532964952177	WITHOUT_CLASSIFICATION	4.6703504782328245E-5	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999787696315635	WITHOUT_CLASSIFICATION	2.1230368436472193E-5	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999616788688739	WITHOUT_CLASSIFICATION	3.832113112602173E-5	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9997327926048325	WITHOUT_CLASSIFICATION	2.6720739516745154E-4	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999873718332964	WITHOUT_CLASSIFICATION	1.262816670348321E-5	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999982092963264	WITHOUT_CLASSIFICATION	1.7907036735698318E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999119919990276	WITHOUT_CLASSIFICATION	8.800800097240726E-5	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9999992276362817	WITHOUT_CLASSIFICATION	7.723637183412892E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9995697868508532	WITHOUT_CLASSIFICATION	4.302131491467795E-4	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999104178624316	WITHOUT_CLASSIFICATION	8.958213756833374E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999873718332964	WITHOUT_CLASSIFICATION	1.262816670348321E-5	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999119919990276	WITHOUT_CLASSIFICATION	8.800800097240726E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9995697868508532	WITHOUT_CLASSIFICATION	4.302131491467795E-4	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999887596228967	WITHOUT_CLASSIFICATION	1.1240377103304464E-5	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.999119882875053	WITHOUT_CLASSIFICATION	8.80117124946947E-4	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999961788640271	WITHOUT_CLASSIFICATION	3.821135972869857E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9997104436752637	WITHOUT_CLASSIFICATION	2.8955632473620326E-4	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999312091493384	WITHOUT_CLASSIFICATION	6.879085066157916E-5	DEFECT
column index	WITHOUT_CLASSIFICATION	0.9998027635444495	WITHOUT_CLASSIFICATION	1.9723645555052002E-4	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.9999889964090132	WITHOUT_CLASSIFICATION	1.100359098692686E-5	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9998398473413163	WITHOUT_CLASSIFICATION	1.6015265868376036E-4	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.999981168207667	WITHOUT_CLASSIFICATION	1.8831792332980605E-5	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.999999841141831	WITHOUT_CLASSIFICATION	1.588581689700197E-7	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999980379318573	WITHOUT_CLASSIFICATION	1.9620681428134503E-6	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999962189678074	WITHOUT_CLASSIFICATION	3.7810321925446305E-6	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999995199636056	WITHOUT_CLASSIFICATION	4.800363943759756E-7	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999991806065574	WITHOUT_CLASSIFICATION	8.193934425926378E-6	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.9992099794434847	WITHOUT_CLASSIFICATION	7.900205565152546E-4	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999637376433614	WITHOUT_CLASSIFICATION	3.626235663843562E-5	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9995741135603026	WITHOUT_CLASSIFICATION	4.2588643969737497E-4	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999559263566	WITHOUT_CLASSIFICATION	4.407364333810686E-8	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.9997797391567509	WITHOUT_CLASSIFICATION	2.2026084324906065E-4	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999873718332964	WITHOUT_CLASSIFICATION	1.262816670348321E-5	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999996911733723	WITHOUT_CLASSIFICATION	3.0882662775294054E-7	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999993495128497	WITHOUT_CLASSIFICATION	6.504871503284681E-7	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.9999991653355621	WITHOUT_CLASSIFICATION	8.34664437797585E-7	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999994834277502	WITHOUT_CLASSIFICATION	5.165722498058465E-7	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9999997355652809	WITHOUT_CLASSIFICATION	2.6443471912127967E-7	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9995694294089372	WITHOUT_CLASSIFICATION	4.305705910628166E-4	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999822072531	WITHOUT_CLASSIFICATION	1.7792746958607496E-8	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999999793619774	WITHOUT_CLASSIFICATION	2.0638022600603863E-7	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999295376704939	WITHOUT_CLASSIFICATION	7.046232950610308E-5	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.9993769134360382	WITHOUT_CLASSIFICATION	6.230865639618022E-4	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999306128106247	WITHOUT_CLASSIFICATION	6.938718937530212E-5	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999553025681177	WITHOUT_CLASSIFICATION	4.469743188226721E-5	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9996269562375806	WITHOUT_CLASSIFICATION	3.7304376241938743E-4	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999996313587997	WITHOUT_CLASSIFICATION	3.6864120040970434E-7	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9999998141907248	WITHOUT_CLASSIFICATION	1.8580927520126113E-7	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.999977037835819	WITHOUT_CLASSIFICATION	2.2962164180910303E-5	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9999827950539889	WITHOUT_CLASSIFICATION	1.7204946011027323E-5	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.999996386725855	WITHOUT_CLASSIFICATION	3.6132741450164095E-6	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9999978729951847	WITHOUT_CLASSIFICATION	2.1270048153596726E-6	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999969897097291	WITHOUT_CLASSIFICATION	3.0102902709080213E-6	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999839612	WITHOUT_CLASSIFICATION	1.6038804820965363E-11	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999871361977701	WITHOUT_CLASSIFICATION	1.2863802229812303E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999969295693345	WITHOUT_CLASSIFICATION	3.0704306654458862E-6	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999957127034887	WITHOUT_CLASSIFICATION	4.287296511237658E-6	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999928508253538	WITHOUT_CLASSIFICATION	7.149174646154029E-6	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999928508253538	WITHOUT_CLASSIFICATION	7.149174646154029E-6	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999960708538888	WITHOUT_CLASSIFICATION	3.929146111180694E-6	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999979679710969	WITHOUT_CLASSIFICATION	2.032028903067198E-6	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999990371198675	WITHOUT_CLASSIFICATION	9.628801325109286E-7	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999948130296845	WITHOUT_CLASSIFICATION	5.186970315433091E-6	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999987816558423	WITHOUT_CLASSIFICATION	1.2183441576737677E-6	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9986397213671196	WITHOUT_CLASSIFICATION	0.001360278632880331	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999912330421373	WITHOUT_CLASSIFICATION	8.76695786274394E-6	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999969603885309	WITHOUT_CLASSIFICATION	3.039611469041369E-6	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999936568830765	WITHOUT_CLASSIFICATION	6.343116923460286E-6	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999976519531953	WITHOUT_CLASSIFICATION	2.3480468045983697E-6	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999921860228359	WITHOUT_CLASSIFICATION	7.813977164103002E-6	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.999997687801013	WITHOUT_CLASSIFICATION	2.3121989871692426E-6	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9999794060333493	WITHOUT_CLASSIFICATION	2.059396665061937E-5	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9984633941837492	WITHOUT_CLASSIFICATION	0.0015366058162508158	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999992783732977	WITHOUT_CLASSIFICATION	7.216267023535708E-7	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999929609225501	WITHOUT_CLASSIFICATION	7.039077449897536E-6	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9995365377848018	WITHOUT_CLASSIFICATION	4.634622151982806E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999985958489156	WITHOUT_CLASSIFICATION	1.404151084420645E-6	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721326090607	WITHOUT_CLASSIFICATION	2.7867390939364427E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999999084382422	WITHOUT_CLASSIFICATION	9.156175779282071E-7	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830804564135	WITHOUT_CLASSIFICATION	1.691954358652433E-5	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999996490680176	WITHOUT_CLASSIFICATION	3.509319822778298E-7	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999986336573781	WITHOUT_CLASSIFICATION	1.3663426218620782E-6	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999325601186928	WITHOUT_CLASSIFICATION	6.743988130723145E-5	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999986548591113	WITHOUT_CLASSIFICATION	1.3451408886563592E-6	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999976396209606	WITHOUT_CLASSIFICATION	2.3603790394363204E-6	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999910606722123	WITHOUT_CLASSIFICATION	8.939327787637965E-6	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999954204046015	WITHOUT_CLASSIFICATION	4.579595398468005E-6	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999995189170685	WITHOUT_CLASSIFICATION	4.810829313739527E-7	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.999997633709491	WITHOUT_CLASSIFICATION	2.36629050902457E-6	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999999084382422	WITHOUT_CLASSIFICATION	9.156175779282071E-7	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999993421241653	WITHOUT_CLASSIFICATION	6.578758347324555E-7	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999964016707282	WITHOUT_CLASSIFICATION	3.598329271751023E-6	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999958320809351	WITHOUT_CLASSIFICATION	4.167919064907126E-6	DEFECT
found	WITHOUT_CLASSIFICATION	0.9995223436868216	WITHOUT_CLASSIFICATION	4.7765631317840093E-4	DEFECT
found	WITHOUT_CLASSIFICATION	0.9995223436868216	WITHOUT_CLASSIFICATION	4.7765631317840093E-4	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999998931989921	WITHOUT_CLASSIFICATION	1.0680100798903456E-7	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999980127915188	WITHOUT_CLASSIFICATION	1.9872084813256574E-6	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9999674367983179	WITHOUT_CLASSIFICATION	3.256320168207322E-5	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9999674367983179	WITHOUT_CLASSIFICATION	3.256320168207322E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999969295693345	WITHOUT_CLASSIFICATION	3.0704306654458862E-6	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999937501017931	WITHOUT_CLASSIFICATION	6.249898206852304E-6	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999074400483058	WITHOUT_CLASSIFICATION	9.255995169425519E-5	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998255199292	WITHOUT_CLASSIFICATION	1.744800708239702E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.99998891967124	WITHOUT_CLASSIFICATION	1.1080328759942574E-5	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999074400483058	WITHOUT_CLASSIFICATION	9.255995169425519E-5	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998255199292	WITHOUT_CLASSIFICATION	1.744800708239702E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999996994543405	WITHOUT_CLASSIFICATION	3.0054565943804203E-7	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999993437257843	WITHOUT_CLASSIFICATION	6.562742158079452E-7	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999921117488672	WITHOUT_CLASSIFICATION	7.888251132812928E-6	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999998209489683	WITHOUT_CLASSIFICATION	1.7905103174476668E-7	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.99998088555437	WITHOUT_CLASSIFICATION	1.911444563006986E-5	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999988986358305	WITHOUT_CLASSIFICATION	1.1013641695699523E-6	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999998267024263	WITHOUT_CLASSIFICATION	1.7329757377525557E-7	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999998267024263	WITHOUT_CLASSIFICATION	1.7329757377525557E-7	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999923464261694	WITHOUT_CLASSIFICATION	7.653573830573097E-6	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999980695728	WITHOUT_CLASSIFICATION	1.930427062942715E-9	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999992830691947	WITHOUT_CLASSIFICATION	7.169308052303934E-7	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999791391431	WITHOUT_CLASSIFICATION	2.08608568728523E-8	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999999903628155	WITHOUT_CLASSIFICATION	9.637184506460075E-9	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.999999872533531	WITHOUT_CLASSIFICATION	1.2746646896606558E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.99998891967124	WITHOUT_CLASSIFICATION	1.1080328759942574E-5	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999994547669075	WITHOUT_CLASSIFICATION	5.452330924103867E-7	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999977190055204	WITHOUT_CLASSIFICATION	2.2809944797342944E-6	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999977190055204	WITHOUT_CLASSIFICATION	2.2809944797342944E-6	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999804103517185	WITHOUT_CLASSIFICATION	1.9589648281510554E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999996994543405	WITHOUT_CLASSIFICATION	3.0054565943804203E-7	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999808758626478	WITHOUT_CLASSIFICATION	1.9124137352175168E-5	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999998289280791	WITHOUT_CLASSIFICATION	1.7107192089941297E-6	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9998277304331581	WITHOUT_CLASSIFICATION	1.7226956684196325E-4	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999909927904934	WITHOUT_CLASSIFICATION	9.00720950660902E-6	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999877565072732	WITHOUT_CLASSIFICATION	1.224349272680847E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999996994543405	WITHOUT_CLASSIFICATION	3.0054565943804203E-7	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999909927904934	WITHOUT_CLASSIFICATION	9.00720950660902E-6	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999877565072732	WITHOUT_CLASSIFICATION	1.224349272680847E-4	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999725986995	WITHOUT_CLASSIFICATION	2.7401300503462558E-8	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999807191789976	WITHOUT_CLASSIFICATION	1.9280821002485148E-5	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999944318762596	WITHOUT_CLASSIFICATION	5.568123740440444E-6	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999996994543405	WITHOUT_CLASSIFICATION	3.0054565943804203E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999996994543405	WITHOUT_CLASSIFICATION	3.0054565943804203E-7	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.999989183497315	WITHOUT_CLASSIFICATION	1.0816502684996276E-5	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9999931432291432	WITHOUT_CLASSIFICATION	6.856770856812922E-6	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9999970115723836	WITHOUT_CLASSIFICATION	2.9884276162218763E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999981221898638	WITHOUT_CLASSIFICATION	1.8778101360814642E-6	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9999983159472716	WITHOUT_CLASSIFICATION	1.6840527283900715E-6	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999995643776718	WITHOUT_CLASSIFICATION	4.356223282145867E-7	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999990541974836	WITHOUT_CLASSIFICATION	9.458025165277774E-7	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999985417633424	WITHOUT_CLASSIFICATION	1.4582366576916189E-6	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999831279587235	WITHOUT_CLASSIFICATION	1.687204127652E-5	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9999789538625786	WITHOUT_CLASSIFICATION	2.1046137421395855E-5	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9997483015182682	WITHOUT_CLASSIFICATION	2.5169848173174403E-4	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999819079933625	WITHOUT_CLASSIFICATION	1.8092006637565557E-5	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999846452805	WITHOUT_CLASSIFICATION	1.535471948038072E-8	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999810509623811	WITHOUT_CLASSIFICATION	1.894903761889775E-5	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999639331727593	WITHOUT_CLASSIFICATION	3.606682724058229E-5	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9995199395419297	WITHOUT_CLASSIFICATION	4.800604580703666E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999981221898638	WITHOUT_CLASSIFICATION	1.8778101360814642E-6	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.999995755167123	WITHOUT_CLASSIFICATION	4.244832876916992E-6	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999994884533264	WITHOUT_CLASSIFICATION	5.115466735834271E-7	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999996340653567	WITHOUT_CLASSIFICATION	3.659346432240604E-7	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999918805463	WITHOUT_CLASSIFICATION	8.119453699967759E-6	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998540044662343	WITHOUT_CLASSIFICATION	1.459955337656118E-4	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998540044662343	WITHOUT_CLASSIFICATION	1.459955337656118E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999981221898638	WITHOUT_CLASSIFICATION	1.8778101360814642E-6	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999453761814309	WITHOUT_CLASSIFICATION	5.462381856921653E-5	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999999961576729	WITHOUT_CLASSIFICATION	3.8423270853270946E-9	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9991311206960749	WITHOUT_CLASSIFICATION	8.688793039250799E-4	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999988259414907	WITHOUT_CLASSIFICATION	1.1740585092445385E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999963474960114	WITHOUT_CLASSIFICATION	3.65250398860528E-5	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999992872536143	WITHOUT_CLASSIFICATION	7.127463856236583E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9954583508735743	WITHOUT_CLASSIFICATION	0.004541649126425789	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999999679244412	WITHOUT_CLASSIFICATION	3.207555869213438E-8	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999535806359	WITHOUT_CLASSIFICATION	4.64193640640287E-8	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059122640186	WITHOUT_CLASSIFICATION	9.408773598146998E-5	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999992393403294	WITHOUT_CLASSIFICATION	7.606596706255367E-7	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9996761352759277	WITHOUT_CLASSIFICATION	3.2386472407230617E-4	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999634158377587	WITHOUT_CLASSIFICATION	3.658416224126648E-5	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999577707003346	WITHOUT_CLASSIFICATION	4.222929966534162E-5	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999995598413713	WITHOUT_CLASSIFICATION	4.4015862876798354E-7	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999812446925309	WITHOUT_CLASSIFICATION	1.875530746907707E-5	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999762857115899	WITHOUT_CLASSIFICATION	2.371428841005337E-5	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999994516934952	WITHOUT_CLASSIFICATION	5.483065047938331E-6	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999953739711193	WITHOUT_CLASSIFICATION	4.626028880752768E-6	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995147456631	WITHOUT_CLASSIFICATION	4.852543369390269E-7	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999259296418916	WITHOUT_CLASSIFICATION	7.407035810833029E-5	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999983207551617	WITHOUT_CLASSIFICATION	1.6792448382563354E-6	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999998069736941	WITHOUT_CLASSIFICATION	1.9302630588047017E-7	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999635223365214	WITHOUT_CLASSIFICATION	3.6477663478651885E-5	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948771893233	WITHOUT_CLASSIFICATION	5.122810676661036E-6	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995303900858712	WITHOUT_CLASSIFICATION	4.696099141287442E-4	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999984676973688	WITHOUT_CLASSIFICATION	1.532302631197302E-5	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992301660334245	WITHOUT_CLASSIFICATION	7.698339665756052E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99967339872626	WITHOUT_CLASSIFICATION	3.2660127373997696E-4	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992009094652408	WITHOUT_CLASSIFICATION	7.990905347592134E-4	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998882221449635	WITHOUT_CLASSIFICATION	1.1177785503637163E-4	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999722667863121	WITHOUT_CLASSIFICATION	2.7733213687826718E-5	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9998904238569944	WITHOUT_CLASSIFICATION	1.0957614300547828E-4	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999787784116971	WITHOUT_CLASSIFICATION	2.1221588302913254E-5	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973539272725	WITHOUT_CLASSIFICATION	2.6460727274526318E-6	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974226508546	WITHOUT_CLASSIFICATION	2.5773491453687843E-6	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999629608867192	WITHOUT_CLASSIFICATION	3.7039113280872945E-5	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997408819204451	WITHOUT_CLASSIFICATION	2.5911807955484776E-4	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910478284001	WITHOUT_CLASSIFICATION	8.952171599905194E-6	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997546584692466	WITHOUT_CLASSIFICATION	2.45341530753384E-4	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993281574383922	WITHOUT_CLASSIFICATION	6.718425616079053E-4	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998233317036239	WITHOUT_CLASSIFICATION	1.7666829637611034E-4	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998653592135419	WITHOUT_CLASSIFICATION	1.3464078645807046E-4	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9996280673044898	WITHOUT_CLASSIFICATION	3.719326955101854E-4	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999435941966487	WITHOUT_CLASSIFICATION	5.640580335140255E-5	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999790142685	WITHOUT_CLASSIFICATION	2.0985731479189627E-8	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999998515590068	WITHOUT_CLASSIFICATION	1.484409932008274E-6	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.9999968905864156	WITHOUT_CLASSIFICATION	3.109413584340016E-6	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999985393464016	WITHOUT_CLASSIFICATION	1.4606535983558727E-6	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999904150257395	WITHOUT_CLASSIFICATION	9.584974260511642E-6	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999786064984532	WITHOUT_CLASSIFICATION	2.1393501546853643E-5	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9998225084089847	WITHOUT_CLASSIFICATION	1.7749159101535826E-4	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9998941432707905	WITHOUT_CLASSIFICATION	1.0585672920945838E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059122640186	WITHOUT_CLASSIFICATION	9.408773598146998E-5	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999343511397588	WITHOUT_CLASSIFICATION	6.56488602412389E-5	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999788207858883	WITHOUT_CLASSIFICATION	2.1179214111767438E-5	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999996662623835	WITHOUT_CLASSIFICATION	3.337376165378953E-7	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.999951748185763	WITHOUT_CLASSIFICATION	4.8251814236828775E-5	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9963890963108686	WITHOUT_CLASSIFICATION	0.003610903689131528	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.9997448507794902	WITHOUT_CLASSIFICATION	2.551492205098698E-4	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9997876832160717	WITHOUT_CLASSIFICATION	2.1231678392830456E-4	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999644042919342	WITHOUT_CLASSIFICATION	3.559570806584301E-5	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998259838061151	WITHOUT_CLASSIFICATION	1.7401619388499165E-4	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986996718817	WITHOUT_CLASSIFICATION	1.300328118354154E-6	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999445341589729	WITHOUT_CLASSIFICATION	5.546584102714254E-5	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9998259927123933	WITHOUT_CLASSIFICATION	1.740072876067726E-4	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999996996687888	WITHOUT_CLASSIFICATION	3.003312112113994E-7	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999998236287908	WITHOUT_CLASSIFICATION	1.7637120923669732E-7	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9997347890548017	WITHOUT_CLASSIFICATION	2.652109451982414E-4	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999140035117	WITHOUT_CLASSIFICATION	8.599648831511515E-8	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999964786926808	WITHOUT_CLASSIFICATION	3.5213073192862353E-6	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999991632294553	WITHOUT_CLASSIFICATION	8.367705447378726E-7	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999966817267941	WITHOUT_CLASSIFICATION	3.3182732057878204E-6	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999663373847	WITHOUT_CLASSIFICATION	3.3662615236105294E-8	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999978149418889	WITHOUT_CLASSIFICATION	2.185058111141465E-6	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999983401274757	WITHOUT_CLASSIFICATION	1.6598725243759395E-6	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999978409695762	WITHOUT_CLASSIFICATION	2.1590304237693036E-6	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999987328858969	WITHOUT_CLASSIFICATION	1.2671141030650455E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059122640186	WITHOUT_CLASSIFICATION	9.408773598146998E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999998515590068	WITHOUT_CLASSIFICATION	1.484409932008274E-6	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999624615190167	WITHOUT_CLASSIFICATION	3.753848098337994E-5	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999998212912578	WITHOUT_CLASSIFICATION	1.7870874230362328E-7	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999964480672597	WITHOUT_CLASSIFICATION	3.5519327402200088E-6	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998901891553523	WITHOUT_CLASSIFICATION	1.0981084464763422E-4	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999973876501486	WITHOUT_CLASSIFICATION	2.612349851509271E-6	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.9999986684062817	WITHOUT_CLASSIFICATION	1.3315937183342582E-6	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9998259927123933	WITHOUT_CLASSIFICATION	1.740072876067726E-4	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9998321168722892	WITHOUT_CLASSIFICATION	1.6788312771075855E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999945403130238	WITHOUT_CLASSIFICATION	5.459686976188198E-5	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999954335839452	WITHOUT_CLASSIFICATION	4.5664160548845565E-6	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999933726357934	WITHOUT_CLASSIFICATION	6.627364206681535E-6	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999981167706244	WITHOUT_CLASSIFICATION	1.883229375545861E-6	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999941148144	WITHOUT_CLASSIFICATION	5.885185594636238E-9	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059122640186	WITHOUT_CLASSIFICATION	9.408773598146998E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059122640186	WITHOUT_CLASSIFICATION	9.408773598146998E-5	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999986588363258	WITHOUT_CLASSIFICATION	1.3411636741923044E-5	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999465157832	WITHOUT_CLASSIFICATION	5.348421678370724E-8	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999999830281296	WITHOUT_CLASSIFICATION	1.6971870305511496E-8	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999999049769394	WITHOUT_CLASSIFICATION	9.502306064271646E-8	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999996634238855	WITHOUT_CLASSIFICATION	3.365761145477552E-7	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999816578806254	WITHOUT_CLASSIFICATION	1.8342119374616818E-5	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999994493296869	WITHOUT_CLASSIFICATION	5.506703132067358E-7	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9999968723958911	WITHOUT_CLASSIFICATION	3.1276041089399423E-6	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999957493346867	WITHOUT_CLASSIFICATION	4.250665313211707E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059122640186	WITHOUT_CLASSIFICATION	9.408773598146998E-5	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999922883729857	WITHOUT_CLASSIFICATION	7.711627014296583E-5	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999925176647438	WITHOUT_CLASSIFICATION	7.482335256197878E-6	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999938040456022	WITHOUT_CLASSIFICATION	6.195954397878176E-6	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999994364440611	WITHOUT_CLASSIFICATION	5.635559389702466E-7	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999974879475872	WITHOUT_CLASSIFICATION	2.512052412709842E-6	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999898809309814	WITHOUT_CLASSIFICATION	1.011906901868454E-5	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999856006115055	WITHOUT_CLASSIFICATION	1.4399388494363107E-5	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9999998426798615	WITHOUT_CLASSIFICATION	1.5732013844139123E-7	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9943709763045343	WITHOUT_CLASSIFICATION	0.005629023695465711	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.999998571824904	WITHOUT_CLASSIFICATION	1.428175095959441E-6	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999994341033429	WITHOUT_CLASSIFICATION	5.658966571534992E-7	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999872600661004	WITHOUT_CLASSIFICATION	1.2739933899541314E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999998515590068	WITHOUT_CLASSIFICATION	1.484409932008274E-6	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9962464430388431	WITHOUT_CLASSIFICATION	0.0037535569611567877	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999975640884724	WITHOUT_CLASSIFICATION	2.435911527607057E-6	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9966627204736039	WITHOUT_CLASSIFICATION	0.0033372795263959744	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999994900236241	WITHOUT_CLASSIFICATION	5.099763757827183E-7	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999972057482581	WITHOUT_CLASSIFICATION	2.794251741934423E-6	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999947168510215	WITHOUT_CLASSIFICATION	5.283148978523834E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999998515590068	WITHOUT_CLASSIFICATION	1.484409932008274E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999978349405165	WITHOUT_CLASSIFICATION	2.165059483491399E-6	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999925176647438	WITHOUT_CLASSIFICATION	7.482335256197878E-6	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9998728100395021	WITHOUT_CLASSIFICATION	1.2718996049786458E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999922883729857	WITHOUT_CLASSIFICATION	7.711627014296583E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059122640186	WITHOUT_CLASSIFICATION	9.408773598146998E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999240752685041	WITHOUT_CLASSIFICATION	7.592473149591903E-5	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998571444995082	WITHOUT_CLASSIFICATION	1.4285550049179363E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059122640186	WITHOUT_CLASSIFICATION	9.408773598146998E-5	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9993939242814032	WITHOUT_CLASSIFICATION	6.060757185968803E-4	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999954335839452	WITHOUT_CLASSIFICATION	4.5664160548845565E-6	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999933726357934	WITHOUT_CLASSIFICATION	6.627364206681535E-6	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999981167706244	WITHOUT_CLASSIFICATION	1.883229375545861E-6	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999998700309404	WITHOUT_CLASSIFICATION	1.299690595660953E-7	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.9999987123817332	WITHOUT_CLASSIFICATION	1.2876182667552111E-6	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999988271885365	WITHOUT_CLASSIFICATION	1.1728114635397895E-6	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999922883729857	WITHOUT_CLASSIFICATION	7.711627014296583E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999240752685041	WITHOUT_CLASSIFICATION	7.592473149591903E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059122640186	WITHOUT_CLASSIFICATION	9.408773598146998E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999998515590068	WITHOUT_CLASSIFICATION	1.484409932008274E-6	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999941148144	WITHOUT_CLASSIFICATION	5.885185594636238E-9	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999986588363258	WITHOUT_CLASSIFICATION	1.3411636741923044E-5	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999465157832	WITHOUT_CLASSIFICATION	5.348421678370724E-8	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993352200665	WITHOUT_CLASSIFICATION	6.647799335745793E-7	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849088721421	WITHOUT_CLASSIFICATION	1.509112785797594E-5	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999964869347103	WITHOUT_CLASSIFICATION	3.513065289622296E-6	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999997081096767	WITHOUT_CLASSIFICATION	2.9189032330040644E-6	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999995572903947	WITHOUT_CLASSIFICATION	4.4270960531432834E-7	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999951933248314	WITHOUT_CLASSIFICATION	4.806675168556738E-6	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993281574383922	WITHOUT_CLASSIFICATION	6.718425616079053E-4	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999807571243886	WITHOUT_CLASSIFICATION	1.92428756114221E-5	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999998651006439	WITHOUT_CLASSIFICATION	1.3489935619906141E-7	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999944736711374	WITHOUT_CLASSIFICATION	5.526328862603882E-6	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999995590432909	WITHOUT_CLASSIFICATION	4.4095670915967717E-7	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999991830172332	WITHOUT_CLASSIFICATION	8.16982766867716E-7	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992301660334245	WITHOUT_CLASSIFICATION	7.698339665756052E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99967339872626	WITHOUT_CLASSIFICATION	3.2660127373997696E-4	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973539272725	WITHOUT_CLASSIFICATION	2.6460727274526318E-6	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999991830172332	WITHOUT_CLASSIFICATION	8.16982766867716E-7	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999853443476456	WITHOUT_CLASSIFICATION	1.465565235451839E-5	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999952375480633	WITHOUT_CLASSIFICATION	4.76245193670251E-6	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996569734282212	WITHOUT_CLASSIFICATION	3.4302657177880835E-4	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996489900234697	WITHOUT_CLASSIFICATION	3.5100997653034953E-4	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9995069677424121	WITHOUT_CLASSIFICATION	4.930322575880055E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059122640186	WITHOUT_CLASSIFICATION	9.408773598146998E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059122640186	WITHOUT_CLASSIFICATION	9.408773598146998E-5	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.9998763052855133	WITHOUT_CLASSIFICATION	1.236947144866732E-4	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974226508546	WITHOUT_CLASSIFICATION	2.5773491453687843E-6	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910478284001	WITHOUT_CLASSIFICATION	8.952171599905194E-6	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999663373847	WITHOUT_CLASSIFICATION	3.3662615236105294E-8	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999979092154723	WITHOUT_CLASSIFICATION	2.0907845277749685E-6	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999986733982326	WITHOUT_CLASSIFICATION	1.3266017673984375E-5	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999756114598218	WITHOUT_CLASSIFICATION	2.4388540178094777E-5	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999894568125	WITHOUT_CLASSIFICATION	1.0543187649058478E-8	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999965101314774	WITHOUT_CLASSIFICATION	3.4898685226053293E-6	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999995632825766	WITHOUT_CLASSIFICATION	4.367174234165625E-7	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999984444861372	WITHOUT_CLASSIFICATION	1.555513862923572E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999896234629163	WITHOUT_CLASSIFICATION	1.0376537083594353E-5	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999535806359	WITHOUT_CLASSIFICATION	4.64193640640287E-8	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999913063395803	WITHOUT_CLASSIFICATION	8.69366041976499E-6	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999753813213	WITHOUT_CLASSIFICATION	2.4618678632286455E-8	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999803459227742	WITHOUT_CLASSIFICATION	1.965407722577021E-5	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9997181051783041	WITHOUT_CLASSIFICATION	2.8189482169594006E-4	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999992777259343	WITHOUT_CLASSIFICATION	7.222740656535961E-7	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999996961057726	WITHOUT_CLASSIFICATION	3.038942274262663E-7	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996859873891	WITHOUT_CLASSIFICATION	3.1401261090213756E-7	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978708597675	WITHOUT_CLASSIFICATION	2.129140232382843E-6	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993174773485	WITHOUT_CLASSIFICATION	6.825226516544855E-7	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999562347431269	WITHOUT_CLASSIFICATION	4.376525687303983E-5	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999980833276771	WITHOUT_CLASSIFICATION	1.9166723229038265E-6	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997183469134	WITHOUT_CLASSIFICATION	2.816530867086683E-7	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995213153475	WITHOUT_CLASSIFICATION	4.786846524082136E-7	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993483383481	WITHOUT_CLASSIFICATION	6.516616517762111E-7	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989375563774	WITHOUT_CLASSIFICATION	1.0624436226261933E-6	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999942271214406	WITHOUT_CLASSIFICATION	5.7728785593936156E-5	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999965680842604	WITHOUT_CLASSIFICATION	3.431915739555682E-6	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99999901180717	WITHOUT_CLASSIFICATION	9.881928299530021E-7	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999937420034339	WITHOUT_CLASSIFICATION	6.257996565971515E-6	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999214138354	WITHOUT_CLASSIFICATION	7.858616450961135E-8	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972600291127	WITHOUT_CLASSIFICATION	2.739970887254942E-6	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999970719193249	WITHOUT_CLASSIFICATION	2.928080675136145E-6	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9988713557116746	WITHOUT_CLASSIFICATION	0.0011286442883253736	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999403957088622	WITHOUT_CLASSIFICATION	5.960429113777792E-5	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9999379690785899	WITHOUT_CLASSIFICATION	6.203092141006092E-5	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999960930370627	WITHOUT_CLASSIFICATION	3.9069629373162446E-6	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999979291979351	WITHOUT_CLASSIFICATION	2.070802064937524E-6	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999545322966752	WITHOUT_CLASSIFICATION	4.546770332478104E-5	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9998565714219647	WITHOUT_CLASSIFICATION	1.4342857803534772E-4	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999997441226882	WITHOUT_CLASSIFICATION	2.5587731170456076E-7	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999971109502674	WITHOUT_CLASSIFICATION	2.889049732527692E-6	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999682414309049	WITHOUT_CLASSIFICATION	3.1758569095115586E-5	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999997411396259	WITHOUT_CLASSIFICATION	2.588603741449519E-7	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999998867916131	WITHOUT_CLASSIFICATION	1.1320838700624653E-7	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999927212541991	WITHOUT_CLASSIFICATION	7.278745800916905E-6	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999987617968671	WITHOUT_CLASSIFICATION	1.2382031328647997E-6	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999994967620773	WITHOUT_CLASSIFICATION	5.032379226393106E-7	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999174081691	WITHOUT_CLASSIFICATION	8.259183096521271E-8	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999983191210782	WITHOUT_CLASSIFICATION	1.6808789217975897E-6	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999193453453	WITHOUT_CLASSIFICATION	8.065465470289181E-8	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.999999932532791	WITHOUT_CLASSIFICATION	6.746720901166929E-8	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999998936832145	WITHOUT_CLASSIFICATION	1.063167854924474E-6	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9998044476910443	WITHOUT_CLASSIFICATION	1.955523089557494E-4	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.999998333116715	WITHOUT_CLASSIFICATION	1.6668832849675577E-6	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999734524358789	WITHOUT_CLASSIFICATION	2.6547564121201488E-5	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999340013227	WITHOUT_CLASSIFICATION	6.599867730662525E-8	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999895995618451	WITHOUT_CLASSIFICATION	1.0400438154948393E-5	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999955044375451	WITHOUT_CLASSIFICATION	4.495562454897469E-6	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999938574947465	WITHOUT_CLASSIFICATION	6.142505253531796E-6	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9997405944404725	WITHOUT_CLASSIFICATION	2.5940555952759243E-4	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999993432344219	WITHOUT_CLASSIFICATION	6.56765578048363E-7	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999995534828171	WITHOUT_CLASSIFICATION	4.465171829200112E-7	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999752141741369	WITHOUT_CLASSIFICATION	2.478582586313765E-5	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9985238009223277	WITHOUT_CLASSIFICATION	0.001476199077672326	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999766830812973	WITHOUT_CLASSIFICATION	2.3316918702757828E-5	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9976251389868754	WITHOUT_CLASSIFICATION	0.0023748610131246323	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999850260487111	WITHOUT_CLASSIFICATION	1.4973951288771332E-5	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999334751522196	WITHOUT_CLASSIFICATION	6.65248477803621E-5	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.9999991877506533	WITHOUT_CLASSIFICATION	8.122493466076043E-7	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999703259865	WITHOUT_CLASSIFICATION	2.9674013500082487E-8	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999922104835168	WITHOUT_CLASSIFICATION	7.789516483119705E-6	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.999994622781246	WITHOUT_CLASSIFICATION	5.377218753988888E-6	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.9998138909923833	WITHOUT_CLASSIFICATION	1.8610900761661969E-4	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9967184410354963	WITHOUT_CLASSIFICATION	0.0032815589645036713	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999986579987673	WITHOUT_CLASSIFICATION	1.3420012326726187E-6	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.999430868994793	WITHOUT_CLASSIFICATION	5.691310052070205E-4	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999299592641	WITHOUT_CLASSIFICATION	7.004073596063078E-8	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999299850014836	WITHOUT_CLASSIFICATION	7.001499851648554E-5	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999999870944275	WITHOUT_CLASSIFICATION	1.2905572507262293E-7	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999244669685	WITHOUT_CLASSIFICATION	7.55330314792344E-8	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999999036053884	WITHOUT_CLASSIFICATION	9.639461160797556E-8	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999990621432094	WITHOUT_CLASSIFICATION	9.378567905147255E-7	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999969900129128	WITHOUT_CLASSIFICATION	3.0099870871411875E-6	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999925532608568	WITHOUT_CLASSIFICATION	7.44673914328364E-6	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.999995857556205	WITHOUT_CLASSIFICATION	4.142443794957159E-6	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999983467041477	WITHOUT_CLASSIFICATION	1.6532958523597073E-6	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999987167389472	WITHOUT_CLASSIFICATION	1.283261052753082E-6	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999982583997866	WITHOUT_CLASSIFICATION	1.741600213318511E-6	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999999545403349	WITHOUT_CLASSIFICATION	4.5459665096716184E-7	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999970236379645	WITHOUT_CLASSIFICATION	2.9763620356056714E-6	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999701639862237	WITHOUT_CLASSIFICATION	2.983601377631082E-5	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999979298450095	WITHOUT_CLASSIFICATION	2.070154990553667E-6	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999953691602881	WITHOUT_CLASSIFICATION	4.630839711876916E-6	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999979596000721	WITHOUT_CLASSIFICATION	2.0403999278194746E-6	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9970613313999455	WITHOUT_CLASSIFICATION	0.0029386686000546112	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999999130133786	WITHOUT_CLASSIFICATION	8.698662128073026E-8	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999758716771109	WITHOUT_CLASSIFICATION	2.412832288910115E-5	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9999972256932183	WITHOUT_CLASSIFICATION	2.7743067817246924E-6	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999997079809693	WITHOUT_CLASSIFICATION	2.920190307439019E-7	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999987724375663	WITHOUT_CLASSIFICATION	1.2275624336732568E-6	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9997777845747591	WITHOUT_CLASSIFICATION	2.2221542524083533E-4	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.9999142296978025	WITHOUT_CLASSIFICATION	8.57703021974678E-5	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999991725100331	WITHOUT_CLASSIFICATION	8.27489966795868E-7	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9997777845747591	WITHOUT_CLASSIFICATION	2.2221542524083533E-4	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999998773801785	WITHOUT_CLASSIFICATION	1.2261982150374276E-7	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999998759925647	WITHOUT_CLASSIFICATION	1.240074352540857E-7	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999959429093086	WITHOUT_CLASSIFICATION	4.057090691395219E-6	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9993298304475525	WITHOUT_CLASSIFICATION	6.701695524475971E-4	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.999999875059886	WITHOUT_CLASSIFICATION	1.2494011396434856E-7	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999409043199	WITHOUT_CLASSIFICATION	5.909568026504895E-8	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998546430538696	WITHOUT_CLASSIFICATION	1.4535694613041896E-4	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999940895860626	WITHOUT_CLASSIFICATION	5.910413937319436E-6	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999954372095136	WITHOUT_CLASSIFICATION	4.562790486451711E-6	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999963733803478	WITHOUT_CLASSIFICATION	3.626619652198424E-5	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999976759001034	WITHOUT_CLASSIFICATION	2.324099896649709E-6	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999622492613937	WITHOUT_CLASSIFICATION	3.775073860639967E-5	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999945108895	WITHOUT_CLASSIFICATION	5.489110459837648E-9	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999999921780011	WITHOUT_CLASSIFICATION	7.821998900558211E-8	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999851485306	WITHOUT_CLASSIFICATION	1.4851469401848361E-7	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999565950745114	WITHOUT_CLASSIFICATION	4.3404925488483674E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999727053217115	WITHOUT_CLASSIFICATION	2.7294678288516032E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999727053217115	WITHOUT_CLASSIFICATION	2.7294678288516032E-5	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999997877036163	WITHOUT_CLASSIFICATION	2.1229638369290765E-6	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9997134140813427	WITHOUT_CLASSIFICATION	2.8658591865725856E-4	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.999946858442539	WITHOUT_CLASSIFICATION	5.314155746095206E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9999949786684071	WITHOUT_CLASSIFICATION	5.0213315928362374E-6	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999986975461976	WITHOUT_CLASSIFICATION	1.3024538023910717E-6	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.6446512750695013	WITHOUT_CLASSIFICATION	0.3553487249304988	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9999800386918029	WITHOUT_CLASSIFICATION	1.9961308197226512E-5	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999996308953765	WITHOUT_CLASSIFICATION	3.691046235466403E-7	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9999857540634376	WITHOUT_CLASSIFICATION	1.424593656248653E-5	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998534518732469	WITHOUT_CLASSIFICATION	1.4654812675308191E-4	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999986547983067	WITHOUT_CLASSIFICATION	1.3452016932788927E-6	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999933327592	WITHOUT_CLASSIFICATION	6.667240780079268E-9	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999328146125	WITHOUT_CLASSIFICATION	6.718538747799474E-8	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999997839885114	WITHOUT_CLASSIFICATION	2.1601148864900253E-7	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.999999921534628	WITHOUT_CLASSIFICATION	7.846537194972405E-8	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999996961057726	WITHOUT_CLASSIFICATION	3.038942274262663E-7	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999954034281833	WITHOUT_CLASSIFICATION	4.596571816738848E-6	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998732648722	WITHOUT_CLASSIFICATION	1.2673512783334118E-7	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999974844481793	WITHOUT_CLASSIFICATION	2.515551820754593E-6	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999993387638205	WITHOUT_CLASSIFICATION	6.612361795658853E-7	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999997934836713	WITHOUT_CLASSIFICATION	2.0651632871393884E-7	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9999921772074458	WITHOUT_CLASSIFICATION	7.822792554119874E-6	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9997985287994844	WITHOUT_CLASSIFICATION	2.014712005156454E-4	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999982416733059	WITHOUT_CLASSIFICATION	1.7583266940958725E-6	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999997544699506	WITHOUT_CLASSIFICATION	2.455300493326284E-7	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999993122345009	WITHOUT_CLASSIFICATION	6.877654991025953E-7	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999986879755632	WITHOUT_CLASSIFICATION	1.312024436790376E-6	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999954797808814	WITHOUT_CLASSIFICATION	4.520219118640646E-6	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999996114933365	WITHOUT_CLASSIFICATION	3.8850666356345547E-7	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9999146075542409	WITHOUT_CLASSIFICATION	8.539244575912724E-5	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999982515207251	WITHOUT_CLASSIFICATION	1.748479274871478E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999991340736951	WITHOUT_CLASSIFICATION	8.659263049490987E-7	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.9995405684056669	WITHOUT_CLASSIFICATION	4.594315943331123E-4	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999979416161596	WITHOUT_CLASSIFICATION	2.058383840383674E-6	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999590137301854	WITHOUT_CLASSIFICATION	4.098626981456449E-5	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999866697705624	WITHOUT_CLASSIFICATION	1.3330229437611716E-5	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.999991588506595	WITHOUT_CLASSIFICATION	8.41149340501083E-6	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999850208304079	WITHOUT_CLASSIFICATION	1.4979169592107487E-4	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999999432215644	WITHOUT_CLASSIFICATION	5.677843559759727E-7	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9997944554392649	WITHOUT_CLASSIFICATION	2.0554456073504403E-4	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9999999506065363	WITHOUT_CLASSIFICATION	4.93934636184646E-8	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9999995839317245	WITHOUT_CLASSIFICATION	4.160682755134506E-7	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999578066945849	WITHOUT_CLASSIFICATION	4.219330541511307E-5	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998482992803	WITHOUT_CLASSIFICATION	1.517007196693698E-7	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999745541964957	WITHOUT_CLASSIFICATION	2.54458035042648E-5	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999967262717794	WITHOUT_CLASSIFICATION	3.273728220520312E-6	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999622907657197	WITHOUT_CLASSIFICATION	3.770923428019151E-5	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999647809320097	WITHOUT_CLASSIFICATION	3.521906799032737E-5	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999495552606087	WITHOUT_CLASSIFICATION	5.044473939137851E-5	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9834275735327763	WITHOUT_CLASSIFICATION	0.016572426467223705	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999977879724352	WITHOUT_CLASSIFICATION	2.212027564731903E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999896234629163	WITHOUT_CLASSIFICATION	1.0376537083594353E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999896234629163	WITHOUT_CLASSIFICATION	1.0376537083594353E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999998082923196	WITHOUT_CLASSIFICATION	1.917076803969022E-6	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9941977593837714	WITHOUT_CLASSIFICATION	0.005802240616228628	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9999672236219447	WITHOUT_CLASSIFICATION	3.2776378055276875E-5	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998574134752755	WITHOUT_CLASSIFICATION	1.4258652472455956E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9999672236219447	WITHOUT_CLASSIFICATION	3.2776378055276875E-5	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999839187472296	WITHOUT_CLASSIFICATION	1.6081252770419573E-5	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999951855175624	WITHOUT_CLASSIFICATION	4.814482437572711E-6	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.9999929014794643	WITHOUT_CLASSIFICATION	7.098520535652913E-6	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999954044564401	WITHOUT_CLASSIFICATION	4.595543559940683E-6	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999995905097859	WITHOUT_CLASSIFICATION	4.094902140584784E-7	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999804421806222	WITHOUT_CLASSIFICATION	1.95578193777524E-5	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999306260589	WITHOUT_CLASSIFICATION	6.937394106378724E-8	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9999585615596329	WITHOUT_CLASSIFICATION	4.143844036703856E-5	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999939057137	WITHOUT_CLASSIFICATION	6.094286323801086E-9	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999997311259989	WITHOUT_CLASSIFICATION	2.68874001060446E-7	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999960978674156	WITHOUT_CLASSIFICATION	3.9021325843746926E-6	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999326007881121	WITHOUT_CLASSIFICATION	6.739921188792162E-5	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999972802851751	WITHOUT_CLASSIFICATION	2.719714824813652E-6	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9632221185493443	WITHOUT_CLASSIFICATION	0.03677788145065583	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999998673934	WITHOUT_CLASSIFICATION	1.3260657976557263E-10	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9998225916558569	WITHOUT_CLASSIFICATION	1.7740834414311355E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999940053617621	WITHOUT_CLASSIFICATION	5.994638237903476E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999940053617621	WITHOUT_CLASSIFICATION	5.994638237903476E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999993114992592	WITHOUT_CLASSIFICATION	6.88500740817408E-7	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999658115491109	WITHOUT_CLASSIFICATION	3.418845088917533E-5	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999952513472703	WITHOUT_CLASSIFICATION	4.7486527296381876E-6	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999999330413304	WITHOUT_CLASSIFICATION	6.69586695973275E-7	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999843450991359	WITHOUT_CLASSIFICATION	1.5654900864044586E-5	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999962006884108	WITHOUT_CLASSIFICATION	3.7993115891992035E-5	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9994597125358634	WITHOUT_CLASSIFICATION	5.402874641366074E-4	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999950153802377	WITHOUT_CLASSIFICATION	4.984619762243542E-6	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.9999989019571124	WITHOUT_CLASSIFICATION	1.0980428875748075E-6	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999999036056435	WITHOUT_CLASSIFICATION	9.639435650232425E-7	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999958325061097	WITHOUT_CLASSIFICATION	4.167493890354681E-6	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999999941277841	WITHOUT_CLASSIFICATION	5.872215899737611E-8	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999969034082443	WITHOUT_CLASSIFICATION	3.0965917556549106E-6	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999538262031596	WITHOUT_CLASSIFICATION	4.617379684043939E-5	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999980806851516	WITHOUT_CLASSIFICATION	1.9193148483989797E-5	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999971781799925	WITHOUT_CLASSIFICATION	2.8218200075074503E-6	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999978607322256	WITHOUT_CLASSIFICATION	2.1392677743860655E-6	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999996798582664	WITHOUT_CLASSIFICATION	3.2014173359684126E-6	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9999954365173681	WITHOUT_CLASSIFICATION	4.563482631909417E-6	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999406906962	WITHOUT_CLASSIFICATION	5.930930374609566E-8	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999654689464206	WITHOUT_CLASSIFICATION	3.453105357938816E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999997548366966	WITHOUT_CLASSIFICATION	2.4516330348919136E-7	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999750531313	WITHOUT_CLASSIFICATION	2.494686868012302E-8	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999997474024388	WITHOUT_CLASSIFICATION	2.52597561121617E-7	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9999996924235081	WITHOUT_CLASSIFICATION	3.0757649193948626E-7	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999983317677744	WITHOUT_CLASSIFICATION	1.6682322255799815E-6	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999982184814068	WITHOUT_CLASSIFICATION	1.7815185931386284E-6	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9998692037757464	WITHOUT_CLASSIFICATION	1.3079622425364533E-4	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999602289140805	WITHOUT_CLASSIFICATION	3.977108591938841E-5	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999851144378813	WITHOUT_CLASSIFICATION	1.4885562118756738E-5	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999993131491884	WITHOUT_CLASSIFICATION	6.868508114962211E-7	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999978529954281	WITHOUT_CLASSIFICATION	2.1470045718818554E-6	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999768312345487	WITHOUT_CLASSIFICATION	2.3168765451300237E-4	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999987446281631	WITHOUT_CLASSIFICATION	1.2553718368893761E-6	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999929607063505	WITHOUT_CLASSIFICATION	7.039293649602768E-6	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999995701556316	WITHOUT_CLASSIFICATION	4.298443683802119E-7	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999995823060723	WITHOUT_CLASSIFICATION	4.176939276167551E-7	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999989362776067	WITHOUT_CLASSIFICATION	1.0637223932628113E-6	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999906137038712	WITHOUT_CLASSIFICATION	9.386296128902356E-6	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999837714755787	WITHOUT_CLASSIFICATION	1.6228524421336107E-5	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999870507619353	WITHOUT_CLASSIFICATION	1.2949238064690107E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569042480984	WITHOUT_CLASSIFICATION	4.309575190170814E-5	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9999985135418406	WITHOUT_CLASSIFICATION	1.486458159489771E-6	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998683612066513	WITHOUT_CLASSIFICATION	1.316387933485356E-4	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999989847616647	WITHOUT_CLASSIFICATION	1.0152383352930136E-6	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9972743573740404	WITHOUT_CLASSIFICATION	0.0027256426259595653	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.936494809717992	WITHOUT_CLASSIFICATION	0.06350519028200798	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999006559519	WITHOUT_CLASSIFICATION	9.934404812302899E-8	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999924017344409	WITHOUT_CLASSIFICATION	7.598265559095906E-6	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999766418977584	WITHOUT_CLASSIFICATION	2.335810224164259E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999623469493041	WITHOUT_CLASSIFICATION	3.765305069592512E-5	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999995747159186	WITHOUT_CLASSIFICATION	4.252840814641163E-7	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9980239859485754	WITHOUT_CLASSIFICATION	0.0019760140514246682	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999999009370584	WITHOUT_CLASSIFICATION	9.906294157749238E-8	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.999998506279855	WITHOUT_CLASSIFICATION	1.4937201450809494E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999978349405165	WITHOUT_CLASSIFICATION	2.165059483491399E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999978349405165	WITHOUT_CLASSIFICATION	2.165059483491399E-6	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999977261916357	WITHOUT_CLASSIFICATION	2.2738083642588685E-6	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9994737461176482	WITHOUT_CLASSIFICATION	5.262538823518126E-4	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999896554851931	WITHOUT_CLASSIFICATION	1.0344514806771185E-5	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999997657068405	WITHOUT_CLASSIFICATION	2.342931594841334E-7	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999963705335122	WITHOUT_CLASSIFICATION	3.629466487750814E-6	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999981019511258	WITHOUT_CLASSIFICATION	1.8980488741137395E-6	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.99999659808294	WITHOUT_CLASSIFICATION	3.401917060039841E-6	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999961823018924	WITHOUT_CLASSIFICATION	3.8176981076603485E-6	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999997828854219	WITHOUT_CLASSIFICATION	2.1711457815818068E-7	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999845066399098	WITHOUT_CLASSIFICATION	1.549336009021832E-5	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.999991344311231	WITHOUT_CLASSIFICATION	8.655688768967551E-6	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999217710815494	WITHOUT_CLASSIFICATION	7.822891845054074E-5	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999535291362155	WITHOUT_CLASSIFICATION	4.647086378457344E-5	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999724645499702	WITHOUT_CLASSIFICATION	2.7535450029812382E-5	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999994098411888	WITHOUT_CLASSIFICATION	5.901588112170999E-7	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9993861304485424	WITHOUT_CLASSIFICATION	6.13869551457627E-4	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9974149909184971	WITHOUT_CLASSIFICATION	0.002585009081502823	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999135504386694	WITHOUT_CLASSIFICATION	8.644956133055518E-5	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.9999911488335329	WITHOUT_CLASSIFICATION	8.851166467001293E-6	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.999982925540825	WITHOUT_CLASSIFICATION	1.7074459174943486E-5	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999776453639633	WITHOUT_CLASSIFICATION	2.2354636036743086E-5	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999986059658741	WITHOUT_CLASSIFICATION	1.3940341259197278E-6	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999637742388041	WITHOUT_CLASSIFICATION	3.6225761195804034E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995015899025536	WITHOUT_CLASSIFICATION	4.984100974464898E-4	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9980403208676107	WITHOUT_CLASSIFICATION	0.001959679132389233	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9997693384437857	WITHOUT_CLASSIFICATION	2.3066155621430333E-4	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.7574194274269075	WITHOUT_CLASSIFICATION	0.2425805725730925	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999991359736598	WITHOUT_CLASSIFICATION	8.640263402050834E-6	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9973241131362252	WITHOUT_CLASSIFICATION	0.002675886863774927	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999982818979334	WITHOUT_CLASSIFICATION	1.7181020665978803E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995015899025536	WITHOUT_CLASSIFICATION	4.984100974464898E-4	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999987229104197	WITHOUT_CLASSIFICATION	1.2770895802849043E-6	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999956964143532	WITHOUT_CLASSIFICATION	4.303585646778587E-6	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.9997795581880932	WITHOUT_CLASSIFICATION	2.20441811906774E-4	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999975422594697	WITHOUT_CLASSIFICATION	2.45774053023648E-6	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999221911601	WITHOUT_CLASSIFICATION	7.780883994708362E-8	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999999321825056	WITHOUT_CLASSIFICATION	6.781749444527683E-8	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9993311540682598	WITHOUT_CLASSIFICATION	6.688459317401908E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999995774550963	WITHOUT_CLASSIFICATION	4.225449037917439E-7	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999924913014452	WITHOUT_CLASSIFICATION	7.508698554782682E-6	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999975422594697	WITHOUT_CLASSIFICATION	2.45774053023648E-6	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999922136971185	WITHOUT_CLASSIFICATION	7.786302881431254E-6	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999995774550963	WITHOUT_CLASSIFICATION	4.225449037917439E-7	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9997096714774739	WITHOUT_CLASSIFICATION	2.903285225261465E-4	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999026333986708	WITHOUT_CLASSIFICATION	9.736660132919299E-5	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999967837275999	WITHOUT_CLASSIFICATION	3.2162723999545968E-6	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999958325061097	WITHOUT_CLASSIFICATION	4.167493890354681E-6	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999997637612882	WITHOUT_CLASSIFICATION	2.3623871180057773E-6	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999948398994138	WITHOUT_CLASSIFICATION	5.160100586169673E-6	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999996160189755	WITHOUT_CLASSIFICATION	3.839810245033788E-6	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999824951313258	WITHOUT_CLASSIFICATION	1.7504868674199383E-4	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999978626593666	WITHOUT_CLASSIFICATION	2.1373406333514435E-6	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9999915355537875	WITHOUT_CLASSIFICATION	8.46444621258657E-6	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999117661889	WITHOUT_CLASSIFICATION	8.823381107158558E-8	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999986920322935	WITHOUT_CLASSIFICATION	1.3079677064916727E-5	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999969560691537	WITHOUT_CLASSIFICATION	3.0439308463199714E-6	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999950214401939	WITHOUT_CLASSIFICATION	4.978559806078619E-6	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998822472242538	WITHOUT_CLASSIFICATION	1.1775277574615212E-4	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999856778672	WITHOUT_CLASSIFICATION	1.4322132828297219E-8	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999999958385997	WITHOUT_CLASSIFICATION	4.1614002978028537E-8	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9998829917682893	WITHOUT_CLASSIFICATION	1.1700823171073486E-4	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999673558869	WITHOUT_CLASSIFICATION	3.2644113064604563E-8	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999977402537846	WITHOUT_CLASSIFICATION	2.2597462153238183E-6	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999993820052405	WITHOUT_CLASSIFICATION	6.1799475949608026E-6	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999983742535344	WITHOUT_CLASSIFICATION	1.6257464655728914E-6	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999987156406938	WITHOUT_CLASSIFICATION	1.284359306241209E-6	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999992617755242	WITHOUT_CLASSIFICATION	7.382244756999175E-7	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999981365586925	WITHOUT_CLASSIFICATION	1.8634413074927619E-6	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999996180648287	WITHOUT_CLASSIFICATION	3.819351713615053E-7	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999997555759594	WITHOUT_CLASSIFICATION	2.4442404062415915E-7	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999965528911359	WITHOUT_CLASSIFICATION	3.44710886410068E-5	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999934333261026	WITHOUT_CLASSIFICATION	6.566673897516215E-6	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9999990037305895	WITHOUT_CLASSIFICATION	9.962694105029996E-7	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9999944313162037	WITHOUT_CLASSIFICATION	5.568683796306581E-6	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997164192181	WITHOUT_CLASSIFICATION	2.8358078183178326E-7	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999795422126406	WITHOUT_CLASSIFICATION	2.0457787359455884E-5	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9913056673757618	WITHOUT_CLASSIFICATION	0.008694332624238165	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999964566615145	WITHOUT_CLASSIFICATION	3.5433384855868204E-6	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999993397206077	WITHOUT_CLASSIFICATION	6.602793922160734E-7	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999315754272	WITHOUT_CLASSIFICATION	6.8424572861825E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999315754272	WITHOUT_CLASSIFICATION	6.8424572861825E-8	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999999317958444	WITHOUT_CLASSIFICATION	6.820415560766738E-7	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999976507520103	WITHOUT_CLASSIFICATION	2.34924798975535E-6	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999998029372888	WITHOUT_CLASSIFICATION	1.970627112029975E-6	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999968233985719	WITHOUT_CLASSIFICATION	3.1766014280783094E-6	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999814797915961	WITHOUT_CLASSIFICATION	1.852020840380588E-5	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999487609740719	WITHOUT_CLASSIFICATION	5.123902592813886E-5	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.999995272071829	WITHOUT_CLASSIFICATION	4.72792817096024E-6	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999986905998739	WITHOUT_CLASSIFICATION	1.3094001261227812E-6	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999973777675586	WITHOUT_CLASSIFICATION	2.622232441396715E-6	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999998544887303	WITHOUT_CLASSIFICATION	1.4551126976057797E-7	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999988805996218	WITHOUT_CLASSIFICATION	1.1194003782107709E-5	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999654836326	WITHOUT_CLASSIFICATION	3.451636745987855E-8	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999976780985735	WITHOUT_CLASSIFICATION	2.32190142650493E-6	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999315754272	WITHOUT_CLASSIFICATION	6.8424572861825E-8	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999910211697536	WITHOUT_CLASSIFICATION	8.978830246392528E-6	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.99999791602589	WITHOUT_CLASSIFICATION	2.083974109928425E-6	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9997772955050052	WITHOUT_CLASSIFICATION	2.2270449499480944E-4	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999997031584839	WITHOUT_CLASSIFICATION	2.9684151618888617E-7	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999954229602211	WITHOUT_CLASSIFICATION	4.577039778837964E-6	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999993226139368	WITHOUT_CLASSIFICATION	6.773860632028485E-7	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999571200638875	WITHOUT_CLASSIFICATION	4.287993611248356E-5	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999964413151	WITHOUT_CLASSIFICATION	3.558684822430265E-9	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999986478781989	WITHOUT_CLASSIFICATION	1.352121801039297E-6	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999990155006505	WITHOUT_CLASSIFICATION	9.844993494601118E-7	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999917570704714	WITHOUT_CLASSIFICATION	8.242929528635164E-6	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997164192181	WITHOUT_CLASSIFICATION	2.8358078183178326E-7	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999315754272	WITHOUT_CLASSIFICATION	6.8424572861825E-8	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.999978501194523	WITHOUT_CLASSIFICATION	2.1498805477059007E-5	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999997944010104	WITHOUT_CLASSIFICATION	2.0559898964205762E-7	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999807348155294	WITHOUT_CLASSIFICATION	1.9265184470630292E-5	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.999980703519145	WITHOUT_CLASSIFICATION	1.9296480855005383E-5	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999999927986107	WITHOUT_CLASSIFICATION	7.201389293545068E-8	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999986145547377	WITHOUT_CLASSIFICATION	1.3854452623384432E-6	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904608727364	WITHOUT_CLASSIFICATION	9.53912726366557E-6	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999946847830827	WITHOUT_CLASSIFICATION	5.315216917268192E-6	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999998358001296	WITHOUT_CLASSIFICATION	1.6419987048206848E-7	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998973815640209	WITHOUT_CLASSIFICATION	1.0261843597906837E-4	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999903455327358	WITHOUT_CLASSIFICATION	9.654467264231727E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.9995372179660073	WITHOUT_CLASSIFICATION	4.627820339928291E-4	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999953410881	WITHOUT_CLASSIFICATION	4.6589119278803754E-9	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999990485423855	WITHOUT_CLASSIFICATION	9.514576144836165E-7	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999839187472296	WITHOUT_CLASSIFICATION	1.6081252770419573E-5	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999938771011802	WITHOUT_CLASSIFICATION	6.12289881986618E-6	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999196287791507	WITHOUT_CLASSIFICATION	8.03712208492261E-5	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999833565380009	WITHOUT_CLASSIFICATION	1.664346199916151E-5	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.9999976781437325	WITHOUT_CLASSIFICATION	2.321856267591078E-6	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999526618325	WITHOUT_CLASSIFICATION	4.733816743006535E-8	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999975345620746	WITHOUT_CLASSIFICATION	2.4654379253996682E-6	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999975345620746	WITHOUT_CLASSIFICATION	2.4654379253996682E-6	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999897945976438	WITHOUT_CLASSIFICATION	1.0205402356113653E-5	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999998656046813	WITHOUT_CLASSIFICATION	1.3439531868947592E-7	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999955483664369	WITHOUT_CLASSIFICATION	4.451633563051518E-6	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999977919970206	WITHOUT_CLASSIFICATION	2.208002979403939E-5	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999746982060299	WITHOUT_CLASSIFICATION	2.5301793970144E-5	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999993293223028	WITHOUT_CLASSIFICATION	6.706776970658893E-7	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999995338028769	WITHOUT_CLASSIFICATION	4.661971230433618E-7	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998692610452787	WITHOUT_CLASSIFICATION	1.3073895472119377E-4	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998692610452787	WITHOUT_CLASSIFICATION	1.3073895472119377E-4	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999647929253065	WITHOUT_CLASSIFICATION	3.5207074693585705E-5	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999999159263921	WITHOUT_CLASSIFICATION	8.407360792183625E-8	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999738154861986	WITHOUT_CLASSIFICATION	2.618451380136815E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999987154949335	WITHOUT_CLASSIFICATION	1.2845050665403428E-6	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999987154949335	WITHOUT_CLASSIFICATION	1.2845050665403428E-6	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999987154949335	WITHOUT_CLASSIFICATION	1.2845050665403428E-6	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999454590930041	WITHOUT_CLASSIFICATION	5.4540906995828E-5	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999998108870982	WITHOUT_CLASSIFICATION	1.8911290183094188E-7	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999997654304833	WITHOUT_CLASSIFICATION	2.3456951676027134E-7	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9986654440340172	WITHOUT_CLASSIFICATION	0.001334555965982737	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999681982017791	WITHOUT_CLASSIFICATION	3.1801798220957135E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999315754272	WITHOUT_CLASSIFICATION	6.8424572861825E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999315754272	WITHOUT_CLASSIFICATION	6.8424572861825E-8	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9926496483742172	WITHOUT_CLASSIFICATION	0.007350351625782841	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.999999822016857	WITHOUT_CLASSIFICATION	1.7798314292090272E-7	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9995130773867995	WITHOUT_CLASSIFICATION	4.869226132005101E-4	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999990811538866	WITHOUT_CLASSIFICATION	9.188461135287223E-7	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999996492491864	WITHOUT_CLASSIFICATION	3.507508136105945E-7	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.9999137094801419	WITHOUT_CLASSIFICATION	8.629051985811401E-5	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999981344586432	WITHOUT_CLASSIFICATION	1.865541356929938E-6	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9997391970175404	WITHOUT_CLASSIFICATION	2.6080298245958295E-4	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999998629880511	WITHOUT_CLASSIFICATION	1.3701194880015415E-7	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999991616258409	WITHOUT_CLASSIFICATION	8.383741591076104E-7	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999998310534141	WITHOUT_CLASSIFICATION	1.6894658598053168E-7	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999955676484462	WITHOUT_CLASSIFICATION	4.4323515537709355E-6	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999883267135747	WITHOUT_CLASSIFICATION	1.1673286425287896E-5	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999883267135747	WITHOUT_CLASSIFICATION	1.1673286425287896E-5	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999925629477829	WITHOUT_CLASSIFICATION	7.437052217032883E-6	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999925629477829	WITHOUT_CLASSIFICATION	7.437052217032883E-6	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999942653914785	WITHOUT_CLASSIFICATION	5.734608521539938E-6	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999768723829847	WITHOUT_CLASSIFICATION	2.3127617015318735E-5	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999768723829847	WITHOUT_CLASSIFICATION	2.3127617015318735E-5	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999903990650943	WITHOUT_CLASSIFICATION	9.60093490575228E-6	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999579982970548	WITHOUT_CLASSIFICATION	4.2001702945116605E-5	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999995392364938	WITHOUT_CLASSIFICATION	4.60763506313088E-7	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999975345620746	WITHOUT_CLASSIFICATION	2.4654379253996682E-6	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999989336159938	WITHOUT_CLASSIFICATION	1.0663840061909677E-6	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999579982970548	WITHOUT_CLASSIFICATION	4.2001702945116605E-5	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.999999359379725	WITHOUT_CLASSIFICATION	6.406202750523647E-7	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999990136719076	WITHOUT_CLASSIFICATION	9.863280923390838E-7	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999799293140121	WITHOUT_CLASSIFICATION	2.007068598786711E-5	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999931476675031	WITHOUT_CLASSIFICATION	6.852332496828594E-6	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999998757795856	WITHOUT_CLASSIFICATION	1.2422041444193195E-7	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999995450885827	WITHOUT_CLASSIFICATION	4.549114172694631E-7	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999994722543369	WITHOUT_CLASSIFICATION	5.277456630209248E-7	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999435474584636	WITHOUT_CLASSIFICATION	5.645254153640259E-5	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9994060832926007	WITHOUT_CLASSIFICATION	5.939167073992029E-4	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.999999126567194	WITHOUT_CLASSIFICATION	8.734328060212955E-7	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999996722098976	WITHOUT_CLASSIFICATION	3.277901022940002E-7	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999505713694528	WITHOUT_CLASSIFICATION	4.942863054727622E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999765771086231	WITHOUT_CLASSIFICATION	2.3422891376922463E-5	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.9999962244706596	WITHOUT_CLASSIFICATION	3.7755293404561067E-6	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9724396995179362	WITHOUT_CLASSIFICATION	0.027560300482063774	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999917783573314	WITHOUT_CLASSIFICATION	8.221642668499221E-6	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999994910462988	WITHOUT_CLASSIFICATION	5.089537011969965E-7	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999987429290729	WITHOUT_CLASSIFICATION	1.2570709271161467E-6	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999987429290729	WITHOUT_CLASSIFICATION	1.2570709271161467E-6	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.999996948674061	WITHOUT_CLASSIFICATION	3.051325938976353E-6	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9998574917381561	WITHOUT_CLASSIFICATION	1.4250826184387022E-4	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999992788655109	WITHOUT_CLASSIFICATION	7.211344891232605E-7	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999987464666985	WITHOUT_CLASSIFICATION	1.253533301440632E-6	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999987646853701	WITHOUT_CLASSIFICATION	1.235314629862672E-6	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999999328541925	WITHOUT_CLASSIFICATION	6.714580750165082E-7	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999589627291	WITHOUT_CLASSIFICATION	4.1037270904170454E-8	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999994726033049	WITHOUT_CLASSIFICATION	5.273966951099006E-6	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999951070908052	WITHOUT_CLASSIFICATION	4.892909194773952E-6	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999994814245424	WITHOUT_CLASSIFICATION	5.185754575028573E-7	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999872590854346	WITHOUT_CLASSIFICATION	1.2740914565316125E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.9995372179660073	WITHOUT_CLASSIFICATION	4.627820339928291E-4	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.99999887877025	WITHOUT_CLASSIFICATION	1.121229750087467E-6	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999677103936742	WITHOUT_CLASSIFICATION	3.228960632583277E-5	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999643400999068	WITHOUT_CLASSIFICATION	3.5659900093159456E-5	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999854261433462	WITHOUT_CLASSIFICATION	1.4573856653830066E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999964214113657	WITHOUT_CLASSIFICATION	3.5785886343762846E-6	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999964214113657	WITHOUT_CLASSIFICATION	3.5785886343762846E-6	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999949865796577	WITHOUT_CLASSIFICATION	5.013420342267127E-6	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999943127299327	WITHOUT_CLASSIFICATION	5.687270067304002E-6	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9996872818620949	WITHOUT_CLASSIFICATION	3.12718137905066E-4	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9998900105062407	WITHOUT_CLASSIFICATION	1.0998949375927665E-4	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9998728027269919	WITHOUT_CLASSIFICATION	1.271972730081574E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999991331767096	WITHOUT_CLASSIFICATION	8.668232903577347E-7	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999999506749643	WITHOUT_CLASSIFICATION	4.932503569378819E-7	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9997174958066071	WITHOUT_CLASSIFICATION	2.8250419339282627E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999994188931915	WITHOUT_CLASSIFICATION	5.811068084507082E-7	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999730157541665	WITHOUT_CLASSIFICATION	2.6984245833349802E-5	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999981303342073	WITHOUT_CLASSIFICATION	1.8696657926983895E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9997174958066071	WITHOUT_CLASSIFICATION	2.8250419339282627E-4	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999872698657776	WITHOUT_CLASSIFICATION	1.2730134222390706E-5	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999997960410774	WITHOUT_CLASSIFICATION	2.0395892275805633E-7	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999999157920427	WITHOUT_CLASSIFICATION	8.420795729638393E-7	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.9999654589513166	WITHOUT_CLASSIFICATION	3.4541048683403974E-5	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999997394953281	WITHOUT_CLASSIFICATION	2.6050467190173627E-6	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999989295422982	WITHOUT_CLASSIFICATION	1.0704577018022282E-5	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999608834325	WITHOUT_CLASSIFICATION	3.911656754276299E-8	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999942145130409	WITHOUT_CLASSIFICATION	5.785486958995683E-6	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999999913556719	WITHOUT_CLASSIFICATION	8.644328095225616E-8	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998664483553842	WITHOUT_CLASSIFICATION	1.335516446158734E-4	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9997569425321979	WITHOUT_CLASSIFICATION	2.4305746780203347E-4	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999625610979018	WITHOUT_CLASSIFICATION	3.7438902098134754E-5	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999999428117732	WITHOUT_CLASSIFICATION	5.718822679783417E-7	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999991106230534	WITHOUT_CLASSIFICATION	8.893769467100707E-7	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999985473169419	WITHOUT_CLASSIFICATION	1.452683058110767E-6	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999134649664	WITHOUT_CLASSIFICATION	8.653503355344762E-8	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999991458292716	WITHOUT_CLASSIFICATION	8.541707284474349E-7	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999753705467171	WITHOUT_CLASSIFICATION	2.4629453282954002E-5	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999603365353302	WITHOUT_CLASSIFICATION	3.966346466977441E-5	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999760333709	WITHOUT_CLASSIFICATION	2.3966629140736082E-8	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999391071093451	WITHOUT_CLASSIFICATION	6.089289065484112E-5	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999987912048822	WITHOUT_CLASSIFICATION	1.2087951177403059E-6	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999910549785336	WITHOUT_CLASSIFICATION	8.94502146651911E-6	DEFECT
#2	WITHOUT_CLASSIFICATION	0.999490943634822	WITHOUT_CLASSIFICATION	5.090563651779415E-4	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999492583619	WITHOUT_CLASSIFICATION	5.074163813033362E-8	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9998828110751816	WITHOUT_CLASSIFICATION	1.1718892481840053E-4	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999985059712997	WITHOUT_CLASSIFICATION	1.4940287002402494E-6	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999995027778794	WITHOUT_CLASSIFICATION	4.972221205878176E-7	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999998099193521	WITHOUT_CLASSIFICATION	1.9008064781498674E-7	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999988804343019	WITHOUT_CLASSIFICATION	1.1195656981848805E-6	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999829753098	WITHOUT_CLASSIFICATION	1.7024690303658194E-8	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.999996116097297	WITHOUT_CLASSIFICATION	3.883902703026356E-6	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999915379519029	WITHOUT_CLASSIFICATION	8.462048097102647E-5	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999635475969	WITHOUT_CLASSIFICATION	3.645240297935427E-8	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999963231314937	WITHOUT_CLASSIFICATION	3.6768685062676592E-6	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999989781775166	WITHOUT_CLASSIFICATION	1.0218224833246843E-6	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999998653977432	WITHOUT_CLASSIFICATION	1.3460225671134603E-7	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999978218373332	WITHOUT_CLASSIFICATION	2.178162666679338E-6	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999999997233961	WITHOUT_CLASSIFICATION	2.76603890803026E-9	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999984351748872	WITHOUT_CLASSIFICATION	1.564825112838151E-6	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999998082176766	WITHOUT_CLASSIFICATION	1.9178232334311338E-7	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999992597674922	WITHOUT_CLASSIFICATION	7.402325078991897E-7	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999991366756917	WITHOUT_CLASSIFICATION	8.633243083703452E-7	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999999845305922	WITHOUT_CLASSIFICATION	1.5469407807003042E-7	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999994634567572	WITHOUT_CLASSIFICATION	5.365432428391532E-7	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999985825347396	WITHOUT_CLASSIFICATION	1.4174652603615803E-6	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999863176527883	WITHOUT_CLASSIFICATION	1.368234721153581E-5	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999955210387742	WITHOUT_CLASSIFICATION	4.4789612257386585E-6	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999930184065279	WITHOUT_CLASSIFICATION	6.981593472168344E-6	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999937896917948	WITHOUT_CLASSIFICATION	6.210308205200879E-6	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873054038906	WITHOUT_CLASSIFICATION	1.269459610943274E-5	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999947443533967	WITHOUT_CLASSIFICATION	5.255646603198943E-6	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999856023797	WITHOUT_CLASSIFICATION	1.4397620224436507E-8	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999772587337212	WITHOUT_CLASSIFICATION	2.274126627873984E-5	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999862224044	WITHOUT_CLASSIFICATION	1.3777595667448785E-8	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999807798807896	WITHOUT_CLASSIFICATION	1.922011921043081E-5	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9931234019387267	WITHOUT_CLASSIFICATION	0.006876598061273293	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999517638156272	WITHOUT_CLASSIFICATION	4.823618437270508E-5	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9999957522516484	WITHOUT_CLASSIFICATION	4.247748351620819E-6	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999901075735174	WITHOUT_CLASSIFICATION	9.89242648271291E-6	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999943771600771	WITHOUT_CLASSIFICATION	5.622839922785995E-6	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999998644223762	WITHOUT_CLASSIFICATION	1.3557762371091373E-7	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.9999776423368936	WITHOUT_CLASSIFICATION	2.2357663106389337E-5	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.5860421342859032	WITHOUT_CLASSIFICATION	0.41395786571409676	DEFECT
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999988793777571	WITHOUT_CLASSIFICATION	1.120622242894415E-6	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999747141936457	WITHOUT_CLASSIFICATION	2.528580635428998E-5	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873054038906	WITHOUT_CLASSIFICATION	1.269459610943274E-5	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999998259621197	WITHOUT_CLASSIFICATION	1.7403788045739853E-7	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9998012118815635	WITHOUT_CLASSIFICATION	1.9878811843662656E-4	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999998029569134	WITHOUT_CLASSIFICATION	1.9704308664700892E-7	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999990468473922	WITHOUT_CLASSIFICATION	9.531526077151986E-7	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999906689481679	WITHOUT_CLASSIFICATION	9.331051832037109E-6	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998435101013793	WITHOUT_CLASSIFICATION	1.5648989862069714E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999994188931915	WITHOUT_CLASSIFICATION	5.811068084507082E-7	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999962758341211	WITHOUT_CLASSIFICATION	3.7241658789780448E-6	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999963231314937	WITHOUT_CLASSIFICATION	3.6768685062676592E-6	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9998737251120304	WITHOUT_CLASSIFICATION	1.2627488796964958E-4	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999995865983011	WITHOUT_CLASSIFICATION	4.134016988896615E-6	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999990529569922	WITHOUT_CLASSIFICATION	9.47043007849873E-7	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999988071244477	WITHOUT_CLASSIFICATION	1.1928755523913016E-6	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999996817386737	WITHOUT_CLASSIFICATION	3.1826132630024244E-6	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999974650336271	WITHOUT_CLASSIFICATION	2.534966372956273E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9294210152207389	WITHOUT_CLASSIFICATION	0.07057898477926114	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999609479093471	WITHOUT_CLASSIFICATION	3.905209065285983E-5	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9982909192857454	WITHOUT_CLASSIFICATION	0.0017090807142546554	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996768648974831	WITHOUT_CLASSIFICATION	3.231351025170103E-4	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999999592596422	WITHOUT_CLASSIFICATION	4.07403577974279E-7	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999972456922692	WITHOUT_CLASSIFICATION	2.754307730880683E-6	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9943553864584519	WITHOUT_CLASSIFICATION	0.005644613541548078	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9943553864584519	WITHOUT_CLASSIFICATION	0.005644613541548078	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999972348462157	WITHOUT_CLASSIFICATION	2.765153784342821E-6	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999996950493959	WITHOUT_CLASSIFICATION	3.049506041145398E-7	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999997306087998	WITHOUT_CLASSIFICATION	2.6939120018287856E-7	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.999999999403857	WITHOUT_CLASSIFICATION	5.96143043798968E-10	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999985310413232	WITHOUT_CLASSIFICATION	1.4689586768436707E-6	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999989945623199	WITHOUT_CLASSIFICATION	1.0054376800610292E-6	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999939850451016	WITHOUT_CLASSIFICATION	6.01495489844952E-6	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999941528155432	WITHOUT_CLASSIFICATION	5.847184456813989E-6	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999914535007414	WITHOUT_CLASSIFICATION	8.546499258694878E-6	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999518593223464	WITHOUT_CLASSIFICATION	4.814067765352414E-5	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999201518533979	WITHOUT_CLASSIFICATION	7.984814660214306E-5	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.9999820393555898	WITHOUT_CLASSIFICATION	1.79606444101384E-5	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999879991370058	WITHOUT_CLASSIFICATION	1.2000862994181535E-5	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999904008503395	WITHOUT_CLASSIFICATION	9.599149660465867E-6	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999991397028587	WITHOUT_CLASSIFICATION	8.602971413097165E-6	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9997932088701772	WITHOUT_CLASSIFICATION	2.0679112982283866E-4	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999997444947726	WITHOUT_CLASSIFICATION	2.5550522737607854E-7	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999974403428792	WITHOUT_CLASSIFICATION	2.5596571207967795E-6	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999910247873	WITHOUT_CLASSIFICATION	8.97521267675188E-9	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999962313474491	WITHOUT_CLASSIFICATION	3.768652550959779E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059122640186	WITHOUT_CLASSIFICATION	9.408773598146998E-5	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999763528655	WITHOUT_CLASSIFICATION	2.3647134423701722E-8	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999008596540503	WITHOUT_CLASSIFICATION	9.914034594976024E-5	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999999938537686	WITHOUT_CLASSIFICATION	6.146231393898595E-8	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999994778627478	WITHOUT_CLASSIFICATION	5.221372523253719E-7	DEFECT
implied	WITHOUT_CLASSIFICATION	0.9999811272496937	WITHOUT_CLASSIFICATION	1.8872750306328466E-5	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999998649134482	WITHOUT_CLASSIFICATION	1.3508655191560522E-7	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059122640186	WITHOUT_CLASSIFICATION	9.408773598146998E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999059122640186	WITHOUT_CLASSIFICATION	9.408773598146998E-5	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9996761352759277	WITHOUT_CLASSIFICATION	3.2386472407230617E-4	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999941173655101	WITHOUT_CLASSIFICATION	5.882634489845302E-6	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999995147790396	WITHOUT_CLASSIFICATION	4.852209604456501E-7	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999540120813935	WITHOUT_CLASSIFICATION	4.598791860658306E-5	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999990264771772	WITHOUT_CLASSIFICATION	9.735228227867452E-7	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999979842742392	WITHOUT_CLASSIFICATION	2.0157257607648245E-6	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999990413620301	WITHOUT_CLASSIFICATION	9.586379699015279E-7	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999179407388	WITHOUT_CLASSIFICATION	8.205926117001545E-8	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999998517854594	WITHOUT_CLASSIFICATION	1.4821454075115195E-7	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999880074014971	WITHOUT_CLASSIFICATION	1.1992598502984011E-5	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999998252415073	WITHOUT_CLASSIFICATION	1.7475849263077333E-7	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999998422348402	WITHOUT_CLASSIFICATION	1.5776515992089052E-7	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999992443858774	WITHOUT_CLASSIFICATION	7.556141225565775E-7	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999365783898297	WITHOUT_CLASSIFICATION	6.342161017020531E-5	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981206017143022	WITHOUT_CLASSIFICATION	0.0018793982856978666	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999998952372665	WITHOUT_CLASSIFICATION	1.0476273344943442E-7	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999672882194249	WITHOUT_CLASSIFICATION	3.271178057503265E-5	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999992644530863	WITHOUT_CLASSIFICATION	7.355469137526434E-7	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999995035352376	WITHOUT_CLASSIFICATION	4.96464762439317E-7	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996569734282212	WITHOUT_CLASSIFICATION	3.4302657177880835E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9858409461583915	WITHOUT_CLASSIFICATION	0.014159053841608404	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997590597587	WITHOUT_CLASSIFICATION	2.409402413071761E-7	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999998969934522	WITHOUT_CLASSIFICATION	1.0300654792930911E-7	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997996615643	WITHOUT_CLASSIFICATION	2.0033843577128834E-7	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996024675803636	WITHOUT_CLASSIFICATION	3.975324196364104E-4	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999088390376	WITHOUT_CLASSIFICATION	9.116096245705697E-8	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999998158935399	WITHOUT_CLASSIFICATION	1.8410646007719201E-7	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999997894110324	WITHOUT_CLASSIFICATION	2.1058896750167926E-7	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999960084652582	WITHOUT_CLASSIFICATION	3.991534741927867E-6	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999963470391454	WITHOUT_CLASSIFICATION	3.652960854539855E-6	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999996875994156	WITHOUT_CLASSIFICATION	3.124005843957676E-7	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999969058372352	WITHOUT_CLASSIFICATION	3.0941627647523685E-6	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9999934653273689	WITHOUT_CLASSIFICATION	6.534672631117128E-6	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9997169906651935	WITHOUT_CLASSIFICATION	2.830093348064331E-4	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999784159534001	WITHOUT_CLASSIFICATION	2.1584046599898465E-5	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999981473147352	WITHOUT_CLASSIFICATION	1.8526852648207791E-6	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999985971969464	WITHOUT_CLASSIFICATION	1.4028030536483411E-6	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999998546248553	WITHOUT_CLASSIFICATION	1.4537514466266144E-7	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999996911675305	WITHOUT_CLASSIFICATION	3.088324695596153E-7	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999996765202606	WITHOUT_CLASSIFICATION	3.234797394420545E-7	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999987850560524	WITHOUT_CLASSIFICATION	1.2149439475969048E-6	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999998506647712	WITHOUT_CLASSIFICATION	1.493352288772937E-7	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999996114895541	WITHOUT_CLASSIFICATION	3.885104458918376E-7	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999990663504742	WITHOUT_CLASSIFICATION	9.336495257829721E-7	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999996114895541	WITHOUT_CLASSIFICATION	3.885104458918376E-7	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.999999774434738	WITHOUT_CLASSIFICATION	2.2556526199809414E-7	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999997802878651	WITHOUT_CLASSIFICATION	2.1971213497460674E-7	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999920545795863	WITHOUT_CLASSIFICATION	7.945420413767804E-6	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999994270823883	WITHOUT_CLASSIFICATION	5.729176116901854E-7	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999605131411	WITHOUT_CLASSIFICATION	3.9486858942504296E-8	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999966827082327	WITHOUT_CLASSIFICATION	3.317291767221375E-6	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999981437371023	WITHOUT_CLASSIFICATION	1.8562628976304088E-6	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999980571495583	WITHOUT_CLASSIFICATION	1.9428504417183764E-6	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998621621796476	WITHOUT_CLASSIFICATION	1.378378203523061E-4	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999991176065656	WITHOUT_CLASSIFICATION	8.823934344778093E-7	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999997974721216	WITHOUT_CLASSIFICATION	2.0252787839901067E-6	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999998554299965	WITHOUT_CLASSIFICATION	1.4457000362004902E-7	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999953361729	WITHOUT_CLASSIFICATION	4.663827160166483E-9	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9907527197393036	WITHOUT_CLASSIFICATION	0.009247280260696523	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9991934824175186	WITHOUT_CLASSIFICATION	8.065175824814901E-4	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999994861556958	WITHOUT_CLASSIFICATION	5.138443042248153E-7	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999983617484569	WITHOUT_CLASSIFICATION	1.6382515430296552E-6	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999998912881305	WITHOUT_CLASSIFICATION	1.087118695286443E-7	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999993553771603	WITHOUT_CLASSIFICATION	6.446228396793928E-7	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999997844149553	WITHOUT_CLASSIFICATION	2.1558504461434038E-7	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999964725773476	WITHOUT_CLASSIFICATION	3.5274226523540427E-6	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999985918023779	WITHOUT_CLASSIFICATION	1.4081976220186351E-6	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9995727380991554	WITHOUT_CLASSIFICATION	4.2726190084462574E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999283937595905	WITHOUT_CLASSIFICATION	7.160624040943518E-5	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999999015253277	WITHOUT_CLASSIFICATION	9.84746723016624E-7	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998568145443602	WITHOUT_CLASSIFICATION	1.4318545563989627E-4	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.999938849022482	WITHOUT_CLASSIFICATION	6.115097751805117E-5	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9999947495705086	WITHOUT_CLASSIFICATION	5.2504294913300185E-6	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999990798834677	WITHOUT_CLASSIFICATION	9.201165322776021E-7	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9998029967331945	WITHOUT_CLASSIFICATION	1.9700326680542209E-4	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9999549527042556	WITHOUT_CLASSIFICATION	4.504729574433149E-5	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999419905449333	WITHOUT_CLASSIFICATION	5.800945506680319E-5	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999998231111503	WITHOUT_CLASSIFICATION	1.768888496716402E-7	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9980322843345004	WITHOUT_CLASSIFICATION	0.0019677156654996637	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999967259385517	WITHOUT_CLASSIFICATION	3.2740614481638996E-6	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.9999410658323701	WITHOUT_CLASSIFICATION	5.893416763003461E-5	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.999991549689444	WITHOUT_CLASSIFICATION	8.450310555940324E-6	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999994173044401	WITHOUT_CLASSIFICATION	5.82695559930386E-7	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.9995930086998028	WITHOUT_CLASSIFICATION	4.069913001972089E-4	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999999191368737	WITHOUT_CLASSIFICATION	8.086312629310041E-7	DEFECT
an association	WITHOUT_CLASSIFICATION	0.9999991391021112	WITHOUT_CLASSIFICATION	8.608978887438264E-7	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9998968243529828	WITHOUT_CLASSIFICATION	1.0317564701726759E-4	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9966627204736039	WITHOUT_CLASSIFICATION	0.0033372795263959744	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998568145443602	WITHOUT_CLASSIFICATION	1.4318545563989627E-4	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9993274637686206	WITHOUT_CLASSIFICATION	6.725362313794325E-4	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.9999984043126078	WITHOUT_CLASSIFICATION	1.5956873922895142E-6	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9997470867384693	WITHOUT_CLASSIFICATION	2.529132615306603E-4	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999752454786032	WITHOUT_CLASSIFICATION	2.4754521396850256E-5	DEFECT
special case	WITHOUT_CLASSIFICATION	0.9999966324860594	WITHOUT_CLASSIFICATION	3.3675139405267136E-6	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999988140558325	WITHOUT_CLASSIFICATION	1.185944167575636E-6	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999987402616248	WITHOUT_CLASSIFICATION	1.2597383752002985E-6	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9912917318641056	WITHOUT_CLASSIFICATION	0.0087082681358943	DEFECT
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999990466246697	WITHOUT_CLASSIFICATION	9.533753303706729E-7	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999599842936898	WITHOUT_CLASSIFICATION	4.00157063102315E-5	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.9999922625282799	WITHOUT_CLASSIFICATION	7.737471720090785E-6	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999996729749625	WITHOUT_CLASSIFICATION	3.2702503743924845E-7	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999302456072021	WITHOUT_CLASSIFICATION	6.975439279781684E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999923471484853	WITHOUT_CLASSIFICATION	7.652851514591731E-6	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999000128716	WITHOUT_CLASSIFICATION	9.998712840654395E-8	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999859490483	WITHOUT_CLASSIFICATION	1.4050951806517813E-8	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998593683452	WITHOUT_CLASSIFICATION	1.4063165472392386E-7	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999999833571096	WITHOUT_CLASSIFICATION	1.6642890400328938E-7	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999995580980487	WITHOUT_CLASSIFICATION	4.4190195124749513E-7	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9993274637686206	WITHOUT_CLASSIFICATION	6.725362313794325E-4	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999989875758303	WITHOUT_CLASSIFICATION	1.0124241697625951E-6	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9891049715016912	WITHOUT_CLASSIFICATION	0.010895028498308939	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999908595654096	WITHOUT_CLASSIFICATION	9.140434590507323E-6	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998667227461778	WITHOUT_CLASSIFICATION	1.3327725382209537E-4	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999374618839989	WITHOUT_CLASSIFICATION	6.253811600105452E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9992672850483227	WITHOUT_CLASSIFICATION	7.327149516772367E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9992672850483227	WITHOUT_CLASSIFICATION	7.327149516772367E-4	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999979550228486	WITHOUT_CLASSIFICATION	2.044977151307221E-6	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9992672850483227	WITHOUT_CLASSIFICATION	7.327149516772367E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9992672850483227	WITHOUT_CLASSIFICATION	7.327149516772367E-4	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.999999511297891	WITHOUT_CLASSIFICATION	4.887021090075066E-7	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9998787500953641	WITHOUT_CLASSIFICATION	1.2124990463593283E-4	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999992988666437	WITHOUT_CLASSIFICATION	7.01133356355734E-7	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999996291960852	WITHOUT_CLASSIFICATION	3.708039146903256E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9915088080889738	WITHOUT_CLASSIFICATION	0.008491191911026244	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999996826350408	WITHOUT_CLASSIFICATION	3.173649591760754E-7	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998848735694126	WITHOUT_CLASSIFICATION	1.151264305874669E-4	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999928631876177	WITHOUT_CLASSIFICATION	7.136812382242432E-6	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999792305041284	WITHOUT_CLASSIFICATION	2.0769495871694408E-5	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999899838753584	WITHOUT_CLASSIFICATION	1.0016124641595099E-5	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999955700730114	WITHOUT_CLASSIFICATION	4.429926988568501E-6	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9998163812769911	WITHOUT_CLASSIFICATION	1.8361872300891175E-4	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999992876536417	WITHOUT_CLASSIFICATION	7.123463583375578E-7	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999981520520201	WITHOUT_CLASSIFICATION	1.8479479797499693E-6	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999999623176567	WITHOUT_CLASSIFICATION	3.7682343297988505E-7	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9993274786070391	WITHOUT_CLASSIFICATION	6.72521392960838E-4	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999998082923196	WITHOUT_CLASSIFICATION	1.917076803969022E-6	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999995854511343	WITHOUT_CLASSIFICATION	4.1454886569368395E-6	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999857115490934	WITHOUT_CLASSIFICATION	1.428845090652123E-5	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999966424626814	WITHOUT_CLASSIFICATION	3.357537318717407E-6	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999970209106449	WITHOUT_CLASSIFICATION	2.9790893551032034E-6	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999898893677347	WITHOUT_CLASSIFICATION	1.011063226528183E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999998082923196	WITHOUT_CLASSIFICATION	1.917076803969022E-6	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.999938849022482	WITHOUT_CLASSIFICATION	6.115097751805117E-5	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.9999969223976951	WITHOUT_CLASSIFICATION	3.077602304907811E-6	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989375563774	WITHOUT_CLASSIFICATION	1.0624436226261933E-6	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99999901180717	WITHOUT_CLASSIFICATION	9.881928299530021E-7	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9999965924562859	WITHOUT_CLASSIFICATION	3.4075437140141132E-6	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999725410992596	WITHOUT_CLASSIFICATION	2.7458900740369018E-5	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9999991710304917	WITHOUT_CLASSIFICATION	8.289695082548442E-7	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999921837394074	WITHOUT_CLASSIFICATION	7.816260592592658E-5	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999967628301042	WITHOUT_CLASSIFICATION	3.237169895809235E-6	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999951664092613	WITHOUT_CLASSIFICATION	4.833590738610759E-6	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999511818285359	WITHOUT_CLASSIFICATION	4.881817146417159E-5	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999802771725144	WITHOUT_CLASSIFICATION	1.972282748567402E-5	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999989933642	WITHOUT_CLASSIFICATION	1.006635800039653E-6	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999997196594735	WITHOUT_CLASSIFICATION	2.803405265593815E-7	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9996025510919279	WITHOUT_CLASSIFICATION	3.9744890807205804E-4	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999997562023699	WITHOUT_CLASSIFICATION	2.437976300345882E-7	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.999997921625042	WITHOUT_CLASSIFICATION	2.078374958030109E-6	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999949725202985	WITHOUT_CLASSIFICATION	5.027479701499651E-6	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999996098661793	WITHOUT_CLASSIFICATION	3.9013382063310774E-7	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999994184648566	WITHOUT_CLASSIFICATION	5.815351433988108E-6	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9995959751532997	WITHOUT_CLASSIFICATION	4.040248467003005E-4	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.999999613596551	WITHOUT_CLASSIFICATION	3.864034491006859E-7	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999385037300837	WITHOUT_CLASSIFICATION	6.149626991625549E-5	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999967628301042	WITHOUT_CLASSIFICATION	3.237169895809235E-6	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999318645716	WITHOUT_CLASSIFICATION	6.813542840067003E-8	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9999999223742623	WITHOUT_CLASSIFICATION	7.76257377796587E-8	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999946088499561	WITHOUT_CLASSIFICATION	5.391150043867429E-6	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999990844105257	WITHOUT_CLASSIFICATION	9.155894742080942E-7	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998649722124	WITHOUT_CLASSIFICATION	1.3502778760045327E-7	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.9999953193499315	WITHOUT_CLASSIFICATION	4.6806500685384915E-6	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9999433945377674	WITHOUT_CLASSIFICATION	5.6605462232727684E-5	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9999987554479737	WITHOUT_CLASSIFICATION	1.244552026322809E-6	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9999943284607452	WITHOUT_CLASSIFICATION	5.671539254800648E-6	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.9999153094710944	WITHOUT_CLASSIFICATION	8.46905289056273E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999995931844416	WITHOUT_CLASSIFICATION	4.068155583971718E-6	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999769525552834	WITHOUT_CLASSIFICATION	2.3047444716643527E-5	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999570463123769	WITHOUT_CLASSIFICATION	4.2953687623084917E-5	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999913095748	WITHOUT_CLASSIFICATION	8.690425096148604E-9	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.99998891967124	WITHOUT_CLASSIFICATION	1.1080328759942574E-5	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998967452328076	WITHOUT_CLASSIFICATION	1.0325476719241745E-4	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999949200901548	WITHOUT_CLASSIFICATION	5.079909845184827E-6	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999995931844416	WITHOUT_CLASSIFICATION	4.068155583971718E-6	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999945068372	WITHOUT_CLASSIFICATION	5.493162789973013E-9	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9998234304071664	WITHOUT_CLASSIFICATION	1.7656959283362562E-4	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999860815175161	WITHOUT_CLASSIFICATION	1.3918482483892965E-5	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999908361898538	WITHOUT_CLASSIFICATION	9.163810146188157E-6	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9999974755992913	WITHOUT_CLASSIFICATION	2.524400708642514E-6	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999974883864478	WITHOUT_CLASSIFICATION	2.5116135522344586E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.99998891967124	WITHOUT_CLASSIFICATION	1.1080328759942574E-5	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999801649403626	WITHOUT_CLASSIFICATION	1.9835059637386347E-5	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859116028528	WITHOUT_CLASSIFICATION	1.4088397147122229E-5	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985454450412	WITHOUT_CLASSIFICATION	1.4545549587886164E-6	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889032190977	WITHOUT_CLASSIFICATION	1.1096780902305171E-5	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912412877457	WITHOUT_CLASSIFICATION	8.758712254259022E-6	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977062794703	WITHOUT_CLASSIFICATION	2.293720529741506E-6	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999990539928518	WITHOUT_CLASSIFICATION	9.460071482679876E-7	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999990539928518	WITHOUT_CLASSIFICATION	9.460071482679876E-7	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999995292445543	WITHOUT_CLASSIFICATION	4.707554458555323E-7	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999996085548731	WITHOUT_CLASSIFICATION	3.9144512689023187E-7	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.9999984999311111	WITHOUT_CLASSIFICATION	1.5000688889641728E-6	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9999650536725279	WITHOUT_CLASSIFICATION	3.494632747214361E-5	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9989886311964432	WITHOUT_CLASSIFICATION	0.0010113688035567467	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844295372811	WITHOUT_CLASSIFICATION	1.557046271900565E-5	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999743843307383	WITHOUT_CLASSIFICATION	2.5615669261755506E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999799432525245	WITHOUT_CLASSIFICATION	2.0056747475507514E-5	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.999998719953939	WITHOUT_CLASSIFICATION	1.2800460610939634E-6	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999831895447093	WITHOUT_CLASSIFICATION	1.6810455290661793E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844295372811	WITHOUT_CLASSIFICATION	1.557046271900565E-5	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999743843307383	WITHOUT_CLASSIFICATION	2.5615669261755506E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999799432525245	WITHOUT_CLASSIFICATION	2.0056747475507514E-5	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.9999965022743137	WITHOUT_CLASSIFICATION	3.49772568627396E-6	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9999931325258827	WITHOUT_CLASSIFICATION	6.86747411722223E-6	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999990603286953	WITHOUT_CLASSIFICATION	9.396713045883883E-7	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999994853230795	WITHOUT_CLASSIFICATION	5.14676920501306E-6	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999859344055365	WITHOUT_CLASSIFICATION	1.406559446347643E-5	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9983246699803571	WITHOUT_CLASSIFICATION	0.0016753300196430336	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999920278816137	WITHOUT_CLASSIFICATION	7.972118386338153E-6	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999968355151141	WITHOUT_CLASSIFICATION	3.164484885836313E-6	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9999667746505767	WITHOUT_CLASSIFICATION	3.322534942327973E-5	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999860420824606	WITHOUT_CLASSIFICATION	1.395791753935511E-5	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.999999593753565	WITHOUT_CLASSIFICATION	4.062464350165323E-7	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9963296624697909	WITHOUT_CLASSIFICATION	0.0036703375302092056	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9986294703587518	WITHOUT_CLASSIFICATION	0.0013705296412482078	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999995445134414	WITHOUT_CLASSIFICATION	4.554865585992768E-6	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999995603920997	WITHOUT_CLASSIFICATION	4.3960790042231735E-7	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999933152800444	WITHOUT_CLASSIFICATION	6.6847199555323325E-6	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999971597644624	WITHOUT_CLASSIFICATION	2.8402355375757787E-6	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999226254753767	WITHOUT_CLASSIFICATION	7.737452462332373E-5	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999808754563594	WITHOUT_CLASSIFICATION	1.912454364069563E-5	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999942693079269	WITHOUT_CLASSIFICATION	5.730692073134024E-6	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999961444221112	WITHOUT_CLASSIFICATION	3.855577888832948E-6	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999965106115654	WITHOUT_CLASSIFICATION	3.4893884345837647E-6	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999999849649036	WITHOUT_CLASSIFICATION	1.5035096391248977E-7	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999998221805954	WITHOUT_CLASSIFICATION	1.778194046337235E-7	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999997583643159	WITHOUT_CLASSIFICATION	2.4163568417429736E-7	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999021935142037	WITHOUT_CLASSIFICATION	9.780648579633242E-5	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475745600768	WITHOUT_CLASSIFICATION	5.242543992314616E-5	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999149476467911	WITHOUT_CLASSIFICATION	8.50523532087977E-5	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999997993047066	WITHOUT_CLASSIFICATION	2.006952933744076E-7	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999492441371591	WITHOUT_CLASSIFICATION	5.07558628409542E-5	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996447833006337	WITHOUT_CLASSIFICATION	3.552166993663454E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999979298450095	WITHOUT_CLASSIFICATION	2.070154990553667E-6	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999979298450095	WITHOUT_CLASSIFICATION	2.070154990553667E-6	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999968014065	WITHOUT_CLASSIFICATION	3.19859356024905E-9	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999892034765445	WITHOUT_CLASSIFICATION	1.079652345552587E-5	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999989511555073	WITHOUT_CLASSIFICATION	1.0488444927490624E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.9995372179660073	WITHOUT_CLASSIFICATION	4.627820339928291E-4	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999231658439098	WITHOUT_CLASSIFICATION	7.683415609018894E-5	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999481867625204	WITHOUT_CLASSIFICATION	5.18132374795732E-5	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9999454137052081	WITHOUT_CLASSIFICATION	5.458629479192196E-5	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.9999976695931897	WITHOUT_CLASSIFICATION	2.3304068102314984E-6	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999997079809693	WITHOUT_CLASSIFICATION	2.920190307439019E-7	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982784169898	WITHOUT_CLASSIFICATION	1.7215830100411873E-6	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960569942493	WITHOUT_CLASSIFICATION	3.9430057507440575E-6	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998631555955	WITHOUT_CLASSIFICATION	1.3684440450193002E-6	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973039426924	WITHOUT_CLASSIFICATION	2.696057307523513E-6	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993867438404	WITHOUT_CLASSIFICATION	6.132561595681603E-7	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989970239327	WITHOUT_CLASSIFICATION	1.0029760672035533E-6	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963056152537	WITHOUT_CLASSIFICATION	3.6943847464758755E-6	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987432783192	WITHOUT_CLASSIFICATION	1.2567216809283886E-6	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980660577678	WITHOUT_CLASSIFICATION	1.933942232171098E-6	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924027885121	WITHOUT_CLASSIFICATION	7.597211487881045E-6	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998018118759	WITHOUT_CLASSIFICATION	1.9818812427180205E-7	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999984215519435	WITHOUT_CLASSIFICATION	1.5784480564719895E-6	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999866899224159	WITHOUT_CLASSIFICATION	1.3310077584186923E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999988518712328	WITHOUT_CLASSIFICATION	1.1481287670811474E-6	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9998160430755669	WITHOUT_CLASSIFICATION	1.8395692443306174E-4	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999955144825096	WITHOUT_CLASSIFICATION	4.4855174904251565E-6	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9999684571720364	WITHOUT_CLASSIFICATION	3.154282796350598E-5	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999997337490119	WITHOUT_CLASSIFICATION	2.662509881183466E-7	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999980817354123	WITHOUT_CLASSIFICATION	1.918264587703774E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999988518712328	WITHOUT_CLASSIFICATION	1.1481287670811474E-6	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999988518712328	WITHOUT_CLASSIFICATION	1.1481287670811474E-6	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999921391654503	WITHOUT_CLASSIFICATION	7.860834549790645E-6	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999966647459547	WITHOUT_CLASSIFICATION	3.335254045214196E-6	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999991467234	WITHOUT_CLASSIFICATION	8.532766051567236E-9	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999897124541837	WITHOUT_CLASSIFICATION	1.0287545816218423E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999765771086231	WITHOUT_CLASSIFICATION	2.3422891376922463E-5	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999942693079269	WITHOUT_CLASSIFICATION	5.730692073134024E-6	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999980090650961	WITHOUT_CLASSIFICATION	1.990934904005936E-6	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999951968920227	WITHOUT_CLASSIFICATION	4.8031079773852164E-6	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999992150377144	WITHOUT_CLASSIFICATION	7.849622855619852E-7	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849764027753	WITHOUT_CLASSIFICATION	1.5023597224801499E-5	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999996886441989	WITHOUT_CLASSIFICATION	3.1135580116587824E-7	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613704376469	WITHOUT_CLASSIFICATION	3.862956235300026E-5	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999748167463338	WITHOUT_CLASSIFICATION	2.5183253666139037E-5	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999748167463338	WITHOUT_CLASSIFICATION	2.5183253666139037E-5	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999988805522937	WITHOUT_CLASSIFICATION	1.119447706282182E-6	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999988805522937	WITHOUT_CLASSIFICATION	1.119447706282182E-6	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999756776804671	WITHOUT_CLASSIFICATION	2.432231953295677E-5	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895466091665	WITHOUT_CLASSIFICATION	1.0453390833488543E-5	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999945055136196	WITHOUT_CLASSIFICATION	5.4944863803996005E-5	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999798278486386	WITHOUT_CLASSIFICATION	2.017215136133011E-5	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.993255356712018	WITHOUT_CLASSIFICATION	0.00674464328798206	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999776804755273	WITHOUT_CLASSIFICATION	2.231952447276676E-5	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998225054478885	WITHOUT_CLASSIFICATION	1.77494552111391E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999774233407611	WITHOUT_CLASSIFICATION	2.2576659238904116E-4	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999841500445912	WITHOUT_CLASSIFICATION	1.584995540888364E-5	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.9999981558963824	WITHOUT_CLASSIFICATION	1.8441036175762542E-6	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999982238984553	WITHOUT_CLASSIFICATION	1.7761015447391562E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999896234629163	WITHOUT_CLASSIFICATION	1.0376537083594353E-5	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999875619359476	WITHOUT_CLASSIFICATION	1.2438064052355869E-5	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999972474769303	WITHOUT_CLASSIFICATION	2.7525230697459375E-6	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999977742268853	WITHOUT_CLASSIFICATION	2.2257731146945577E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999943608214605	WITHOUT_CLASSIFICATION	5.639178539481494E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999943608214605	WITHOUT_CLASSIFICATION	5.639178539481494E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999943608214605	WITHOUT_CLASSIFICATION	5.639178539481494E-6	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999960485906504	WITHOUT_CLASSIFICATION	3.951409349578543E-6	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9999923909237227	WITHOUT_CLASSIFICATION	7.6090762773651245E-6	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999837103873	WITHOUT_CLASSIFICATION	1.628961266614886E-8	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9994738000216886	WITHOUT_CLASSIFICATION	5.26199978311452E-4	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932442365933	WITHOUT_CLASSIFICATION	6.755763406606519E-6	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958842931753	WITHOUT_CLASSIFICATION	4.115706824664291E-6	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999921092205887	WITHOUT_CLASSIFICATION	7.890779411420096E-6	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999055989006911	WITHOUT_CLASSIFICATION	9.440109930886245E-5	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999990013804126	WITHOUT_CLASSIFICATION	9.986195873439247E-7	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999989950174821	WITHOUT_CLASSIFICATION	1.0049825178646823E-6	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999858025007107	WITHOUT_CLASSIFICATION	1.419749928932449E-5	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.995978172327734	WITHOUT_CLASSIFICATION	0.004021827672265982	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999639331727593	WITHOUT_CLASSIFICATION	3.606682724058229E-5	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999078090714	WITHOUT_CLASSIFICATION	9.219092858443574E-8	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999929450448057	WITHOUT_CLASSIFICATION	7.054955194370701E-6	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999973535948884	WITHOUT_CLASSIFICATION	2.6464051115130603E-6	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999969328603924	WITHOUT_CLASSIFICATION	3.0671396076768806E-6	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9973181613205564	WITHOUT_CLASSIFICATION	0.0026818386794436326	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9972132588608363	WITHOUT_CLASSIFICATION	0.002786741139163722	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999781948728103	WITHOUT_CLASSIFICATION	2.180512718976387E-5	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999939764792	WITHOUT_CLASSIFICATION	6.023520782996024E-9	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999869044144698	WITHOUT_CLASSIFICATION	1.3095585530115737E-5	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999964411116196	WITHOUT_CLASSIFICATION	3.5588883804279754E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999965840398137	WITHOUT_CLASSIFICATION	3.4159601863370973E-6	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999960964477479	WITHOUT_CLASSIFICATION	3.903552252161656E-6	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999621158275833	WITHOUT_CLASSIFICATION	3.78841724167209E-5	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9998642699092744	WITHOUT_CLASSIFICATION	1.3573009072567912E-4	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999716144671489	WITHOUT_CLASSIFICATION	2.838553285114142E-5	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999838411537	WITHOUT_CLASSIFICATION	1.6158846310910517E-8	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999979416161596	WITHOUT_CLASSIFICATION	2.058383840383674E-6	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9994711470448574	WITHOUT_CLASSIFICATION	5.288529551426839E-4	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999955332787211	WITHOUT_CLASSIFICATION	4.4667212788088735E-6	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999772871709991	WITHOUT_CLASSIFICATION	2.2712829000912532E-5	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999981390993227	WITHOUT_CLASSIFICATION	1.8609006773791814E-6	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999476102611958	WITHOUT_CLASSIFICATION	5.2389738804269196E-5	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999681813338176	WITHOUT_CLASSIFICATION	3.181866618237159E-5	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999135504386694	WITHOUT_CLASSIFICATION	8.644956133055518E-5	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.999999662302328	WITHOUT_CLASSIFICATION	3.37697671995327E-7	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999995959614185	WITHOUT_CLASSIFICATION	4.0403858135868505E-7	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.9999999342124097	WITHOUT_CLASSIFICATION	6.57875902921971E-8	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999958377128562	WITHOUT_CLASSIFICATION	4.162287143736053E-6	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999984899861674	WITHOUT_CLASSIFICATION	1.5100138325771135E-6	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9994518111642655	WITHOUT_CLASSIFICATION	5.48188835734499E-4	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999964748118131	WITHOUT_CLASSIFICATION	3.525188186989344E-6	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999799336421245	WITHOUT_CLASSIFICATION	2.006635787557931E-5	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999709055926209	WITHOUT_CLASSIFICATION	2.9094407378970936E-5	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.9999998014513513	WITHOUT_CLASSIFICATION	1.9854864869144372E-7	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999940053617621	WITHOUT_CLASSIFICATION	5.994638237903476E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999497445892969	WITHOUT_CLASSIFICATION	5.0255410703114115E-5	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999977355435306	WITHOUT_CLASSIFICATION	2.264456469420487E-6	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999836722979794	WITHOUT_CLASSIFICATION	1.6327702020690042E-5	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999742307158844	WITHOUT_CLASSIFICATION	2.576928411556977E-5	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999858874302046	WITHOUT_CLASSIFICATION	1.4112569795376097E-5	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998630102733838	WITHOUT_CLASSIFICATION	1.369897266162537E-4	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999963851431743	WITHOUT_CLASSIFICATION	3.6148568256880956E-5	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.999921964363593	WITHOUT_CLASSIFICATION	7.803563640693493E-5	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999976281362927	WITHOUT_CLASSIFICATION	2.37186370732538E-6	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999985683396281	WITHOUT_CLASSIFICATION	1.4316603718998492E-6	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999993435732614	WITHOUT_CLASSIFICATION	6.564267386086912E-7	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999992487480924	WITHOUT_CLASSIFICATION	7.512519076480525E-7	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999912619876783	WITHOUT_CLASSIFICATION	8.738012321771097E-6	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999997920966379	WITHOUT_CLASSIFICATION	2.0790336210200516E-7	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999995810787744	WITHOUT_CLASSIFICATION	4.18921225627009E-7	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999883169569	WITHOUT_CLASSIFICATION	1.168304316575381E-8	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999999499178473	WITHOUT_CLASSIFICATION	5.008215269231447E-7	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999980898099463	WITHOUT_CLASSIFICATION	1.910190053696624E-5	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999344675069051	WITHOUT_CLASSIFICATION	6.553249309498201E-5	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998542782453	WITHOUT_CLASSIFICATION	1.4572175463881205E-7	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995015899025536	WITHOUT_CLASSIFICATION	4.984100974464898E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995015899025536	WITHOUT_CLASSIFICATION	4.984100974464898E-4	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999997721320039	WITHOUT_CLASSIFICATION	2.2786799609368428E-7	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.999995888978411	WITHOUT_CLASSIFICATION	4.1110215891107E-6	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999897529170311	WITHOUT_CLASSIFICATION	1.0247082968947244E-5	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999931141811729	WITHOUT_CLASSIFICATION	6.885818827168698E-6	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999924236730484	WITHOUT_CLASSIFICATION	7.576326951604152E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999782683466982	WITHOUT_CLASSIFICATION	2.1731653301736618E-5	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999886420143836	WITHOUT_CLASSIFICATION	1.1357985616328968E-5	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999891411296927	WITHOUT_CLASSIFICATION	1.0858870307383547E-5	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999615774252771	WITHOUT_CLASSIFICATION	3.8422574722974465E-5	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999773758316565	WITHOUT_CLASSIFICATION	2.262416834346019E-5	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999999306367775	WITHOUT_CLASSIFICATION	6.936322249688528E-7	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999917223111646	WITHOUT_CLASSIFICATION	8.277688835458102E-6	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.999999553778051	WITHOUT_CLASSIFICATION	4.462219489336835E-7	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999877732971	WITHOUT_CLASSIFICATION	1.2226702893009802E-7	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999999642102779	WITHOUT_CLASSIFICATION	3.578972210015155E-7	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999862829919388	WITHOUT_CLASSIFICATION	1.3717008061216726E-5	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999996312306888	WITHOUT_CLASSIFICATION	3.687693111685402E-7	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999641053705324	WITHOUT_CLASSIFICATION	3.5894629467617806E-5	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999925148425033	WITHOUT_CLASSIFICATION	7.485157496747939E-6	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999542679270582	WITHOUT_CLASSIFICATION	4.57320729418004E-5	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.9999731286413924	WITHOUT_CLASSIFICATION	2.6871358607533714E-5	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999988634976837	WITHOUT_CLASSIFICATION	1.1365023161772736E-6	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999993378886832	WITHOUT_CLASSIFICATION	6.621113167730307E-7	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999999109974124	WITHOUT_CLASSIFICATION	8.900258760194683E-8	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999682387555214	WITHOUT_CLASSIFICATION	3.176124447851036E-5	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9999913398460857	WITHOUT_CLASSIFICATION	8.660153914252735E-6	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999991309261711	WITHOUT_CLASSIFICATION	8.690738289984141E-7	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999995041846045	WITHOUT_CLASSIFICATION	4.958153954976336E-7	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999909182511155	WITHOUT_CLASSIFICATION	9.081748884481236E-6	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999999850566154	WITHOUT_CLASSIFICATION	1.494338459881681E-7	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999984269596499	WITHOUT_CLASSIFICATION	1.5730403500050564E-6	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999972064028566	WITHOUT_CLASSIFICATION	2.7935971433623655E-6	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999994346628382	WITHOUT_CLASSIFICATION	5.65337161654991E-7	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9999879328198683	WITHOUT_CLASSIFICATION	1.2067180131836788E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999535747434036	WITHOUT_CLASSIFICATION	4.642525659630243E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999535747434036	WITHOUT_CLASSIFICATION	4.642525659630243E-5	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999413733052374	WITHOUT_CLASSIFICATION	5.862669476258361E-5	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999965275745153	WITHOUT_CLASSIFICATION	3.472425484650427E-6	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999990836597425	WITHOUT_CLASSIFICATION	9.16340257379872E-7	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999516618670952	WITHOUT_CLASSIFICATION	4.83381329049106E-5	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999999909345493	WITHOUT_CLASSIFICATION	9.06545071972951E-9	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.998917207130581	WITHOUT_CLASSIFICATION	0.0010827928694189736	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999996166273233	WITHOUT_CLASSIFICATION	3.833726766985317E-6	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999956939833696	WITHOUT_CLASSIFICATION	4.306016630306313E-6	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999936350708012	WITHOUT_CLASSIFICATION	6.364929198867999E-6	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999944675822512	WITHOUT_CLASSIFICATION	5.532417748846521E-6	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999993362925951	WITHOUT_CLASSIFICATION	6.637074049169516E-7	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999971043331282	WITHOUT_CLASSIFICATION	2.8956668717976117E-5	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999979354503543	WITHOUT_CLASSIFICATION	2.0645496457356006E-6	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999949647642818	WITHOUT_CLASSIFICATION	5.035235718244076E-6	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999249681412763	WITHOUT_CLASSIFICATION	7.503185872375896E-5	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999998881249411	WITHOUT_CLASSIFICATION	1.1187505890281255E-6	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9833700554260938	WITHOUT_CLASSIFICATION	0.016629944573906246	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9833700554260938	WITHOUT_CLASSIFICATION	0.016629944573906246	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9997666493278456	WITHOUT_CLASSIFICATION	2.3335067215427758E-4	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998910913786515	WITHOUT_CLASSIFICATION	1.0890862134850126E-4	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999940462108212	WITHOUT_CLASSIFICATION	5.953789178822277E-6	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999988035091514	WITHOUT_CLASSIFICATION	1.196490848562806E-6	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999966542851269	WITHOUT_CLASSIFICATION	3.345714873090055E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999896234629163	WITHOUT_CLASSIFICATION	1.0376537083594353E-5	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9973241131362252	WITHOUT_CLASSIFICATION	0.002675886863774927	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999604912382	WITHOUT_CLASSIFICATION	3.950876181711421E-8	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999996185655823	WITHOUT_CLASSIFICATION	3.814344176474494E-7	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999648329067	WITHOUT_CLASSIFICATION	3.5167093435808265E-8	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999997272101847	WITHOUT_CLASSIFICATION	2.727898152305982E-7	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999997272101847	WITHOUT_CLASSIFICATION	2.727898152305982E-7	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999957792856574	WITHOUT_CLASSIFICATION	4.220714342526794E-6	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999971806699529	WITHOUT_CLASSIFICATION	2.8193300469521686E-6	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999998157816022	WITHOUT_CLASSIFICATION	1.8421839783695865E-7	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999980901194068	WITHOUT_CLASSIFICATION	1.9098805932333054E-6	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999990200671461	WITHOUT_CLASSIFICATION	9.79932853854131E-7	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9929419246663546	WITHOUT_CLASSIFICATION	0.007058075333645532	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999992736965712	WITHOUT_CLASSIFICATION	7.26303428865918E-7	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999026333986708	WITHOUT_CLASSIFICATION	9.736660132919299E-5	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999944197313759	WITHOUT_CLASSIFICATION	5.580268624011643E-6	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999995392364938	WITHOUT_CLASSIFICATION	4.60763506313088E-7	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999315754272	WITHOUT_CLASSIFICATION	6.8424572861825E-8	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999693848078389	WITHOUT_CLASSIFICATION	3.061519216103412E-5	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9997772955050052	WITHOUT_CLASSIFICATION	2.2270449499480944E-4	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.999980703519145	WITHOUT_CLASSIFICATION	1.9296480855005383E-5	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999636276653	WITHOUT_CLASSIFICATION	3.637233466948234E-8	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999942653914785	WITHOUT_CLASSIFICATION	5.734608521539938E-6	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999995147790396	WITHOUT_CLASSIFICATION	4.852209604456501E-7	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.99999955629718	WITHOUT_CLASSIFICATION	4.4370282006382965E-7	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999946233560302	WITHOUT_CLASSIFICATION	5.376643969886999E-6	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999962869390034	WITHOUT_CLASSIFICATION	3.7130609966726696E-6	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999914411620878	WITHOUT_CLASSIFICATION	8.558837912102626E-6	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999955743216151	WITHOUT_CLASSIFICATION	4.425678384880269E-6	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999994975612939	WITHOUT_CLASSIFICATION	5.024387060901496E-7	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999903990650943	WITHOUT_CLASSIFICATION	9.60093490575228E-6	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999732411024732	WITHOUT_CLASSIFICATION	2.6758897526823767E-5	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.999909778107641	WITHOUT_CLASSIFICATION	9.02218923589833E-5	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999981833318357	WITHOUT_CLASSIFICATION	1.8166681643935233E-6	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999997104890027	WITHOUT_CLASSIFICATION	2.8951099730631074E-7	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999150276124072	WITHOUT_CLASSIFICATION	8.497238759269478E-5	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999982387554	WITHOUT_CLASSIFICATION	1.7612445247229811E-9	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999753233776838	WITHOUT_CLASSIFICATION	2.467662231620354E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999964214113657	WITHOUT_CLASSIFICATION	3.5785886343762846E-6	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999929392715478	WITHOUT_CLASSIFICATION	7.060728452328007E-6	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.9999826950750785	WITHOUT_CLASSIFICATION	1.7304924921522658E-5	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999993959042391	WITHOUT_CLASSIFICATION	6.040957607489211E-7	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999131927467	WITHOUT_CLASSIFICATION	8.680725321146084E-8	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999998653405872	WITHOUT_CLASSIFICATION	1.346594129171135E-7	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999226629051909	WITHOUT_CLASSIFICATION	7.733709480906803E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999802310546874	WITHOUT_CLASSIFICATION	1.9768945312536258E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999802310546874	WITHOUT_CLASSIFICATION	1.9768945312536258E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999978102487246	WITHOUT_CLASSIFICATION	2.1897512754094284E-6	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999504332823	WITHOUT_CLASSIFICATION	4.956671778522577E-8	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999781507118529	WITHOUT_CLASSIFICATION	2.1849288147122147E-5	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9999845332042655	WITHOUT_CLASSIFICATION	1.5466795734570315E-5	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999834071929601	WITHOUT_CLASSIFICATION	1.6592807039951512E-5	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999983797360885	WITHOUT_CLASSIFICATION	1.6202639115109784E-6	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999995534083	WITHOUT_CLASSIFICATION	4.46591639174534E-10	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999733000160973	WITHOUT_CLASSIFICATION	2.669998390265841E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999978102487246	WITHOUT_CLASSIFICATION	2.1897512754094284E-6	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999504332823	WITHOUT_CLASSIFICATION	4.956671778522577E-8	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999995926309501	WITHOUT_CLASSIFICATION	4.0736904995864655E-7	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999968544017995	WITHOUT_CLASSIFICATION	3.1455982004386905E-6	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999995275232558	WITHOUT_CLASSIFICATION	4.724767442305185E-7	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999857772298464	WITHOUT_CLASSIFICATION	1.4222770153739363E-5	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999992925243801	WITHOUT_CLASSIFICATION	7.074756198458127E-7	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999995891216658	WITHOUT_CLASSIFICATION	4.1087833433957935E-7	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999478754464	WITHOUT_CLASSIFICATION	5.212455346905336E-8	DEFECT
}	WITHOUT_CLASSIFICATION	0.9994684953933752	WITHOUT_CLASSIFICATION	5.315046066247406E-4	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999707622270128	WITHOUT_CLASSIFICATION	2.9237772987271486E-5	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.99855688781096	WITHOUT_CLASSIFICATION	0.0014431121890400352	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999924945631	WITHOUT_CLASSIFICATION	7.505436882695238E-9	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.99855688781096	WITHOUT_CLASSIFICATION	0.0014431121890400352	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999832648004919	WITHOUT_CLASSIFICATION	1.6735199508037283E-5	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999987637861915	WITHOUT_CLASSIFICATION	1.236213808554145E-6	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999643660254954	WITHOUT_CLASSIFICATION	3.56339745045946E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990051844933	WITHOUT_CLASSIFICATION	9.948155067073086E-7	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999619317344811	WITHOUT_CLASSIFICATION	3.806826551900114E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9994684953933752	WITHOUT_CLASSIFICATION	5.315046066247406E-4	DEFECT
}	WITHOUT_CLASSIFICATION	0.9994684953933752	WITHOUT_CLASSIFICATION	5.315046066247406E-4	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999851980237351	WITHOUT_CLASSIFICATION	1.4801976264806434E-5	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999988557843983	WITHOUT_CLASSIFICATION	1.1442156017122094E-6	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999886099884115	WITHOUT_CLASSIFICATION	1.1390011588360777E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999876466307129	WITHOUT_CLASSIFICATION	1.2353369287040202E-5	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999969991466451	WITHOUT_CLASSIFICATION	3.0008533549117377E-6	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999997118348716	WITHOUT_CLASSIFICATION	2.8816512840180106E-6	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999998674019885	WITHOUT_CLASSIFICATION	1.325980114097501E-7	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999995544086243	WITHOUT_CLASSIFICATION	4.455913756945727E-7	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999996629210663	WITHOUT_CLASSIFICATION	3.3707893366834843E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9995697868508532	WITHOUT_CLASSIFICATION	4.302131491467795E-4	DEFECT
columns	WITHOUT_CLASSIFICATION	0.9999678574922896	WITHOUT_CLASSIFICATION	3.214250771051943E-5	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9999993214255442	WITHOUT_CLASSIFICATION	6.785744558651572E-7	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999934863763396	WITHOUT_CLASSIFICATION	6.5136236604363495E-6	DEFECT
types	WITHOUT_CLASSIFICATION	0.999975956481746	WITHOUT_CLASSIFICATION	2.4043518253975857E-5	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.999994312851077	WITHOUT_CLASSIFICATION	5.687148923044605E-6	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999993986733667	WITHOUT_CLASSIFICATION	6.013266333256977E-7	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999979232857619	WITHOUT_CLASSIFICATION	2.0767142381472543E-6	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999986580759509	WITHOUT_CLASSIFICATION	1.341924049089952E-6	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999999253531272	WITHOUT_CLASSIFICATION	7.464687281348682E-7	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999960919375166	WITHOUT_CLASSIFICATION	3.9080624834178645E-6	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.9994618597510637	WITHOUT_CLASSIFICATION	5.381402489362501E-4	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999995153509557	WITHOUT_CLASSIFICATION	4.846490443126892E-7	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998816903329968	WITHOUT_CLASSIFICATION	1.183096670031874E-4	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999781451356896	WITHOUT_CLASSIFICATION	2.1854864310340422E-5	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999989575540025	WITHOUT_CLASSIFICATION	1.0424459975083818E-6	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999931751698019	WITHOUT_CLASSIFICATION	6.824830198078148E-6	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998147887132337	WITHOUT_CLASSIFICATION	1.852112867663851E-4	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999998798462761	WITHOUT_CLASSIFICATION	1.2015372387035278E-7	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999458737206134	WITHOUT_CLASSIFICATION	5.4126279386652935E-5	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999995593576481	WITHOUT_CLASSIFICATION	4.4064235195417924E-7	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999992585837751	WITHOUT_CLASSIFICATION	7.414162248861969E-7	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9995673008192811	WITHOUT_CLASSIFICATION	4.3269918071888754E-4	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999518527467647	WITHOUT_CLASSIFICATION	4.814725323533132E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999995544086243	WITHOUT_CLASSIFICATION	4.455913756945727E-7	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999597490466953	WITHOUT_CLASSIFICATION	4.025095330467565E-5	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.999992888520727	WITHOUT_CLASSIFICATION	7.111479273011948E-6	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9973312471858893	WITHOUT_CLASSIFICATION	0.002668752814110679	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.999998696266771	WITHOUT_CLASSIFICATION	1.303733229089711E-6	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999996492750031	WITHOUT_CLASSIFICATION	3.507249969619811E-7	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.9999998413867748	WITHOUT_CLASSIFICATION	1.586132252432146E-7	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999876466307129	WITHOUT_CLASSIFICATION	1.2353369287040202E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999876466307129	WITHOUT_CLASSIFICATION	1.2353369287040202E-5	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999997677101228	WITHOUT_CLASSIFICATION	2.3228987716318786E-7	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.999999521335005	WITHOUT_CLASSIFICATION	4.786649950094621E-7	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9999975271895083	WITHOUT_CLASSIFICATION	2.4728104916888118E-6	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999994411869643	WITHOUT_CLASSIFICATION	5.588130356975409E-7	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9997648106457008	WITHOUT_CLASSIFICATION	2.3518935429928797E-4	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9976298562045334	WITHOUT_CLASSIFICATION	0.002370143795466677	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9990330040838825	WITHOUT_CLASSIFICATION	9.669959161175035E-4	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999980346487554	WITHOUT_CLASSIFICATION	1.9653512446571227E-6	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.999998155920987	WITHOUT_CLASSIFICATION	1.8440790130137101E-6	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999458623497443	WITHOUT_CLASSIFICATION	5.413765025578976E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998719533097	WITHOUT_CLASSIFICATION	1.2804669026419569E-7	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999994498091468	WITHOUT_CLASSIFICATION	5.501908532960844E-7	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9976314709362056	WITHOUT_CLASSIFICATION	0.0023685290637942957	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999978102487246	WITHOUT_CLASSIFICATION	2.1897512754094284E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998719533097	WITHOUT_CLASSIFICATION	1.2804669026419569E-7	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999987721222918	WITHOUT_CLASSIFICATION	1.2278777081950735E-5	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.999999853904312	WITHOUT_CLASSIFICATION	1.4609568798018064E-7	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999989596034058	WITHOUT_CLASSIFICATION	1.0403965941100234E-6	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9976622578579644	WITHOUT_CLASSIFICATION	0.0023377421420357545	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9976314709362056	WITHOUT_CLASSIFICATION	0.0023685290637942957	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999831850856592	WITHOUT_CLASSIFICATION	1.6814914340760327E-5	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999110883243865	WITHOUT_CLASSIFICATION	8.891167561347729E-5	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999965260371863	WITHOUT_CLASSIFICATION	3.4739628136723186E-6	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999400615640763	WITHOUT_CLASSIFICATION	5.99384359235492E-5	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9987999275863785	WITHOUT_CLASSIFICATION	0.0012000724136214292	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999947468177462	WITHOUT_CLASSIFICATION	5.253182253791899E-6	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999649456941677	WITHOUT_CLASSIFICATION	3.505430583229775E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999820545709207	WITHOUT_CLASSIFICATION	1.7945429079303693E-4	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999990356192799	WITHOUT_CLASSIFICATION	9.643807200636244E-7	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999998722617099	WITHOUT_CLASSIFICATION	1.277382900333735E-7	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999964147411391	WITHOUT_CLASSIFICATION	3.585258861018478E-6	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999993831955734	WITHOUT_CLASSIFICATION	6.168044265748691E-7	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998719533097	WITHOUT_CLASSIFICATION	1.2804669026419569E-7	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999831850856592	WITHOUT_CLASSIFICATION	1.6814914340760327E-5	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999965260371863	WITHOUT_CLASSIFICATION	3.4739628136723186E-6	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999964636256051	WITHOUT_CLASSIFICATION	3.536374394853337E-6	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999848076706827	WITHOUT_CLASSIFICATION	1.5192329317378283E-5	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9999936615195795	WITHOUT_CLASSIFICATION	6.338480420562935E-6	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9976314709362056	WITHOUT_CLASSIFICATION	0.0023685290637942957	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999993947318816	WITHOUT_CLASSIFICATION	6.052681184124198E-7	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9998986032008349	WITHOUT_CLASSIFICATION	1.0139679916515891E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9988207417359937	WITHOUT_CLASSIFICATION	0.001179258264006342	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9997104436752637	WITHOUT_CLASSIFICATION	2.8955632473620326E-4	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999820545709207	WITHOUT_CLASSIFICATION	1.7945429079303693E-4	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999987721222918	WITHOUT_CLASSIFICATION	1.2278777081950735E-5	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.9997993244571631	WITHOUT_CLASSIFICATION	2.0067554283684225E-4	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999973798322243	WITHOUT_CLASSIFICATION	2.6201677756330187E-6	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999987329997908	WITHOUT_CLASSIFICATION	1.2670002092350185E-6	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999683245506268	WITHOUT_CLASSIFICATION	3.1675449373187564E-5	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999974368869818	WITHOUT_CLASSIFICATION	2.563113018191025E-6	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999989185091523	WITHOUT_CLASSIFICATION	1.0814908476303684E-6	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9999960732969084	WITHOUT_CLASSIFICATION	3.9267030916245525E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990051844933	WITHOUT_CLASSIFICATION	9.948155067073086E-7	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953714658916	WITHOUT_CLASSIFICATION	4.628534108477165E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.991840139775018	WITHOUT_CLASSIFICATION	0.008159860224982132	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998872199738	WITHOUT_CLASSIFICATION	1.1278002612502925E-7	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9996554509501177	WITHOUT_CLASSIFICATION	3.4454904988246105E-4	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999851568378113	WITHOUT_CLASSIFICATION	1.4843162188666787E-5	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999991490917857	WITHOUT_CLASSIFICATION	8.509082143956036E-7	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999981119660832	WITHOUT_CLASSIFICATION	1.888033916820274E-6	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9999822580312763	WITHOUT_CLASSIFICATION	1.774196872373709E-5	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999996517184059	WITHOUT_CLASSIFICATION	3.482815941780539E-7	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9997104436752637	WITHOUT_CLASSIFICATION	2.8955632473620326E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.991840139775018	WITHOUT_CLASSIFICATION	0.008159860224982132	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9994383895261499	WITHOUT_CLASSIFICATION	5.616104738499675E-4	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.9997201523958624	WITHOUT_CLASSIFICATION	2.798476041376623E-4	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999118912428945	WITHOUT_CLASSIFICATION	8.810875710554357E-5	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999751438980524	WITHOUT_CLASSIFICATION	2.485610194760079E-5	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.99999114920369	WITHOUT_CLASSIFICATION	8.85079630989341E-6	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999998983838816	WITHOUT_CLASSIFICATION	1.0161611836605522E-7	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999264278537143	WITHOUT_CLASSIFICATION	7.357214628562491E-5	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.999179526325262	WITHOUT_CLASSIFICATION	8.204736747379706E-4	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999775973924737	WITHOUT_CLASSIFICATION	2.2402607526230708E-5	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9965533478053453	WITHOUT_CLASSIFICATION	0.003446652194654605	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999992290877857	WITHOUT_CLASSIFICATION	7.709122143270083E-7	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999850595062706	WITHOUT_CLASSIFICATION	1.4940493729353402E-5	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999972230431053	WITHOUT_CLASSIFICATION	2.7769568947211892E-6	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.999993986341197	WITHOUT_CLASSIFICATION	6.013658803063925E-6	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999776744505	WITHOUT_CLASSIFICATION	2.2325549488199082E-8	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999450015008	WITHOUT_CLASSIFICATION	5.4998499323998855E-8	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999989444434949	WITHOUT_CLASSIFICATION	1.0555565051620046E-6	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999997889459078	WITHOUT_CLASSIFICATION	2.1105409220917844E-6	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.99999909753067	WITHOUT_CLASSIFICATION	9.024693299987046E-7	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999970588999553	WITHOUT_CLASSIFICATION	2.941100044848656E-6	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.9994393750702419	WITHOUT_CLASSIFICATION	5.606249297579483E-4	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999987716937979	WITHOUT_CLASSIFICATION	1.228306202055357E-6	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999994396986231	WITHOUT_CLASSIFICATION	5.603013768270742E-7	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999664233122488	WITHOUT_CLASSIFICATION	3.3576687751219925E-5	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999997196788165	WITHOUT_CLASSIFICATION	2.8032118345107095E-7	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9983098196535675	WITHOUT_CLASSIFICATION	0.0016901803464325319	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999889412583709	WITHOUT_CLASSIFICATION	1.1058741629084938E-5	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999387918801581	WITHOUT_CLASSIFICATION	6.120811984187308E-5	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999112575724615	WITHOUT_CLASSIFICATION	8.87424275386219E-5	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8215919935788544	WITHOUT_CLASSIFICATION	0.1784080064211456	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.99998326630741	WITHOUT_CLASSIFICATION	1.6733692590017388E-5	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998664483553842	WITHOUT_CLASSIFICATION	1.335516446158734E-4	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999666395780274	WITHOUT_CLASSIFICATION	3.3360421972457755E-5	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999962758341211	WITHOUT_CLASSIFICATION	3.7241658789780448E-6	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999450026614538	WITHOUT_CLASSIFICATION	5.499733854619701E-5	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999961766786718	WITHOUT_CLASSIFICATION	3.823321328273697E-6	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999998375054042	WITHOUT_CLASSIFICATION	1.6249459575626872E-7	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999894368963467	WITHOUT_CLASSIFICATION	1.0563103653349372E-5	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999961766786718	WITHOUT_CLASSIFICATION	3.823321328273697E-6	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999450026614538	WITHOUT_CLASSIFICATION	5.499733854619701E-5	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999998375054042	WITHOUT_CLASSIFICATION	1.6249459575626872E-7	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.9999994585485013	WITHOUT_CLASSIFICATION	5.414514987938013E-7	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999995651503292	WITHOUT_CLASSIFICATION	4.3484967083150564E-7	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999630976307317	WITHOUT_CLASSIFICATION	3.6902369268369E-5	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999890044475581	WITHOUT_CLASSIFICATION	1.0995552441972533E-5	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999970642698	WITHOUT_CLASSIFICATION	2.935730311579477E-9	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.998620297276611	WITHOUT_CLASSIFICATION	0.0013797027233891069	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9992169657009319	WITHOUT_CLASSIFICATION	7.83034299068048E-4	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999944468192089	WITHOUT_CLASSIFICATION	5.553180791128652E-6	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999999349323888	WITHOUT_CLASSIFICATION	6.506761120914246E-7	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999446353841711	WITHOUT_CLASSIFICATION	5.5364615828826865E-5	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.999975302591302	WITHOUT_CLASSIFICATION	2.4697408698041133E-5	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999995198260888	WITHOUT_CLASSIFICATION	4.801739111579974E-7	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999852445679274	WITHOUT_CLASSIFICATION	1.4755432072691277E-5	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999890044475581	WITHOUT_CLASSIFICATION	1.0995552441972533E-5	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998573086413	WITHOUT_CLASSIFICATION	1.4269135876362936E-7	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.999983580640399	WITHOUT_CLASSIFICATION	1.6419359600907387E-5	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9968069062744237	WITHOUT_CLASSIFICATION	0.003193093725576305	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.999999745201586	WITHOUT_CLASSIFICATION	2.54798414063332E-7	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999729943357416	WITHOUT_CLASSIFICATION	2.7005664258394668E-5	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999638953521	WITHOUT_CLASSIFICATION	3.610464802570877E-8	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999114456364645	WITHOUT_CLASSIFICATION	8.85543635355313E-5	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999998664345403	WITHOUT_CLASSIFICATION	1.3356545972326634E-7	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998911231380125	WITHOUT_CLASSIFICATION	1.0887686198746939E-4	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999930233424813	WITHOUT_CLASSIFICATION	6.976657518670814E-6	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999701735017	WITHOUT_CLASSIFICATION	2.982649834540538E-8	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999701735017	WITHOUT_CLASSIFICATION	2.982649834540538E-8	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999805492401	WITHOUT_CLASSIFICATION	1.945075990207575E-7	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999805492401	WITHOUT_CLASSIFICATION	1.945075990207575E-7	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.9998335492516388	WITHOUT_CLASSIFICATION	1.66450748361248E-4	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9968069062744237	WITHOUT_CLASSIFICATION	0.003193093725576305	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999978457857186	WITHOUT_CLASSIFICATION	2.1542142813971772E-6	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999617648381	WITHOUT_CLASSIFICATION	3.82351619385494E-8	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999998448250521	WITHOUT_CLASSIFICATION	1.551749479806618E-7	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999998448250521	WITHOUT_CLASSIFICATION	1.551749479806618E-7	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999973101127009	WITHOUT_CLASSIFICATION	2.689887299080568E-6	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999996767410225	WITHOUT_CLASSIFICATION	3.2325897741067137E-7	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999992939316403	WITHOUT_CLASSIFICATION	7.060683597332046E-7	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.999999750283086	WITHOUT_CLASSIFICATION	2.497169140666848E-7	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9984959617036355	WITHOUT_CLASSIFICATION	0.001504038296364448	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9907045931447543	WITHOUT_CLASSIFICATION	0.009295406855245615	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999954195988568	WITHOUT_CLASSIFICATION	4.580401143153659E-6	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999998870290506	WITHOUT_CLASSIFICATION	1.1297094938636029E-7	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9999983434674367	WITHOUT_CLASSIFICATION	1.6565325634093575E-6	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999855825138063	WITHOUT_CLASSIFICATION	1.4417486193788977E-5	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.9999994921360258	WITHOUT_CLASSIFICATION	5.078639741585833E-7	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.999998863969701	WITHOUT_CLASSIFICATION	1.1360302990445856E-6	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999990456751732	WITHOUT_CLASSIFICATION	9.54324826844943E-7	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.9999993914620524	WITHOUT_CLASSIFICATION	6.085379475367514E-7	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999992860962225	WITHOUT_CLASSIFICATION	7.139037775918767E-7	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999997964803525	WITHOUT_CLASSIFICATION	2.0351964746318785E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999826606021809	WITHOUT_CLASSIFICATION	1.7339397819035944E-5	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999642389289559	WITHOUT_CLASSIFICATION	3.576107104406427E-5	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999823195113113	WITHOUT_CLASSIFICATION	1.7680488688711053E-5	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999996339646542	WITHOUT_CLASSIFICATION	3.6603534587489934E-7	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999993343852982	WITHOUT_CLASSIFICATION	6.656147018411529E-7	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999987344167339	WITHOUT_CLASSIFICATION	1.265583266179483E-6	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999998566296631	WITHOUT_CLASSIFICATION	1.4337033683810778E-7	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999923017261224	WITHOUT_CLASSIFICATION	7.698273877501718E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.9995372179660073	WITHOUT_CLASSIFICATION	4.627820339928291E-4	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999337257444	WITHOUT_CLASSIFICATION	6.627425566298288E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.991840139775018	WITHOUT_CLASSIFICATION	0.008159860224982132	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999850595062706	WITHOUT_CLASSIFICATION	1.4940493729353402E-5	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999969070288222	WITHOUT_CLASSIFICATION	3.09297117780108E-6	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999500263568301	WITHOUT_CLASSIFICATION	4.9973643169984574E-5	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259791076409	WITHOUT_CLASSIFICATION	7.402089235899834E-5	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999734963763024	WITHOUT_CLASSIFICATION	2.650362369764961E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999162112745459	WITHOUT_CLASSIFICATION	8.378872545416976E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999162112745459	WITHOUT_CLASSIFICATION	8.378872545416976E-5	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999790353883936	WITHOUT_CLASSIFICATION	2.0964611606426312E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9999762093959357	WITHOUT_CLASSIFICATION	2.379060406440426E-5	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999659132185549	WITHOUT_CLASSIFICATION	3.408678144512535E-5	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999659132185549	WITHOUT_CLASSIFICATION	3.408678144512535E-5	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9931234019387267	WITHOUT_CLASSIFICATION	0.006876598061273293	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999282695571748	WITHOUT_CLASSIFICATION	7.173044282521132E-5	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.99994149550976	WITHOUT_CLASSIFICATION	5.850449024002316E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999765771086231	WITHOUT_CLASSIFICATION	2.3422891376922463E-5	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9999907180466309	WITHOUT_CLASSIFICATION	9.281953369169564E-6	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999732779502275	WITHOUT_CLASSIFICATION	2.672204977251748E-5	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.9999857141880182	WITHOUT_CLASSIFICATION	1.4285811981931828E-5	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999998782279236	WITHOUT_CLASSIFICATION	1.2177207651082243E-7	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998744921587804	WITHOUT_CLASSIFICATION	1.255078412195741E-4	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998744921587804	WITHOUT_CLASSIFICATION	1.255078412195741E-4	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999821063293254	WITHOUT_CLASSIFICATION	1.789367067459796E-5	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999997628692151	WITHOUT_CLASSIFICATION	2.371307848875859E-7	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999997628692151	WITHOUT_CLASSIFICATION	2.371307848875859E-7	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999947017413817	WITHOUT_CLASSIFICATION	5.2982586183026606E-5	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.999998546681578	WITHOUT_CLASSIFICATION	1.4533184220871608E-6	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9963660076109251	WITHOUT_CLASSIFICATION	0.0036339923890749337	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.9999994192151739	WITHOUT_CLASSIFICATION	5.807848260668232E-7	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999998389047298	WITHOUT_CLASSIFICATION	1.610952701725446E-7	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998956104603	WITHOUT_CLASSIFICATION	1.0438953971941419E-7	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999984471353625	WITHOUT_CLASSIFICATION	1.5528646376154994E-6	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999994308172753	WITHOUT_CLASSIFICATION	5.691827246924407E-6	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999996469040799	WITHOUT_CLASSIFICATION	3.530959199891522E-7	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9949211223450445	WITHOUT_CLASSIFICATION	0.005078877654955497	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999997178431622	WITHOUT_CLASSIFICATION	2.821568378090254E-7	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998837377610226	WITHOUT_CLASSIFICATION	1.1626223897734053E-4	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999963474960114	WITHOUT_CLASSIFICATION	3.65250398860528E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999963474960114	WITHOUT_CLASSIFICATION	3.65250398860528E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999963474960114	WITHOUT_CLASSIFICATION	3.65250398860528E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999963474960114	WITHOUT_CLASSIFICATION	3.65250398860528E-5	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999947926138479	WITHOUT_CLASSIFICATION	5.207386152054751E-6	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.999697010480526	WITHOUT_CLASSIFICATION	3.0298951947411274E-4	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999945263166617	WITHOUT_CLASSIFICATION	5.473683338236974E-6	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.999946641315456	WITHOUT_CLASSIFICATION	5.335868454399861E-5	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999999195983556	WITHOUT_CLASSIFICATION	8.040164439204259E-7	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.99999699678669	WITHOUT_CLASSIFICATION	3.0032133100892016E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999896234629163	WITHOUT_CLASSIFICATION	1.0376537083594353E-5	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999058149076422	WITHOUT_CLASSIFICATION	9.418509235787143E-5	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999062219020471	WITHOUT_CLASSIFICATION	9.377809795283379E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999896234629163	WITHOUT_CLASSIFICATION	1.0376537083594353E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999896234629163	WITHOUT_CLASSIFICATION	1.0376537083594353E-5	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999999928481294	WITHOUT_CLASSIFICATION	7.151870602947979E-8	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999997619153869	WITHOUT_CLASSIFICATION	2.3808461311914953E-7	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999997692130336	WITHOUT_CLASSIFICATION	2.3078696646998165E-7	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999839788277192	WITHOUT_CLASSIFICATION	1.6021172280843072E-5	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999996634664457	WITHOUT_CLASSIFICATION	3.3653355431551816E-6	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999877995190775	WITHOUT_CLASSIFICATION	1.2200480922518357E-5	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999995780486638	WITHOUT_CLASSIFICATION	4.2195133611412315E-7	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999839788277192	WITHOUT_CLASSIFICATION	1.6021172280843072E-5	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9998200112444271	WITHOUT_CLASSIFICATION	1.799887555729468E-4	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999993561373936	WITHOUT_CLASSIFICATION	6.4386260639056475E-6	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999999164231992	WITHOUT_CLASSIFICATION	8.357680079686897E-7	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999899564108584	WITHOUT_CLASSIFICATION	1.0043589141538802E-5	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999966356534656	WITHOUT_CLASSIFICATION	3.3643465343153725E-6	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999592219007754	WITHOUT_CLASSIFICATION	4.077809922466519E-5	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999413388737	WITHOUT_CLASSIFICATION	5.866112624263268E-8	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999970172525571	WITHOUT_CLASSIFICATION	2.982747442941199E-6	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997086831104	WITHOUT_CLASSIFICATION	2.913168895549922E-7	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999992443839639	WITHOUT_CLASSIFICATION	7.556160360523833E-7	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998127455816	WITHOUT_CLASSIFICATION	1.8725441847292094E-7	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999954199338857	WITHOUT_CLASSIFICATION	4.580066114293849E-6	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998779979062423	WITHOUT_CLASSIFICATION	1.2200209375757775E-4	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998727187469574	WITHOUT_CLASSIFICATION	1.2728125304267975E-4	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999977911209572	WITHOUT_CLASSIFICATION	2.2088790428034565E-5	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999985721276217	WITHOUT_CLASSIFICATION	1.4278723783020335E-5	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999977561183377	WITHOUT_CLASSIFICATION	2.2438816622102086E-6	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999996395192447	WITHOUT_CLASSIFICATION	3.6048075530007373E-6	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999997966199656	WITHOUT_CLASSIFICATION	2.0338003430925586E-7	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999996395192447	WITHOUT_CLASSIFICATION	3.6048075530007373E-6	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999993155274532	WITHOUT_CLASSIFICATION	6.844725467876533E-6	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999908344541393	WITHOUT_CLASSIFICATION	9.165545860773E-6	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999989089121663	WITHOUT_CLASSIFICATION	1.0910878336783604E-6	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999812438096353	WITHOUT_CLASSIFICATION	1.8756190364768763E-5	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.999999605712071	WITHOUT_CLASSIFICATION	3.942879289970112E-7	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999977009873934	WITHOUT_CLASSIFICATION	2.2990126065920363E-6	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999875239513601	WITHOUT_CLASSIFICATION	1.2476048639887662E-5	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999977561183377	WITHOUT_CLASSIFICATION	2.2438816622102086E-6	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999997966199656	WITHOUT_CLASSIFICATION	2.0338003430925586E-7	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999993155274532	WITHOUT_CLASSIFICATION	6.844725467876533E-6	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999991869840761	WITHOUT_CLASSIFICATION	8.13015923858917E-7	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9999802920178958	WITHOUT_CLASSIFICATION	1.9707982104183815E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9999947928947293	WITHOUT_CLASSIFICATION	5.20710527072769E-6	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999385459430061	WITHOUT_CLASSIFICATION	6.145405699382E-5	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9999857596180025	WITHOUT_CLASSIFICATION	1.424038199752677E-5	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9740944996985789	WITHOUT_CLASSIFICATION	0.025905500301421202	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999528673861	WITHOUT_CLASSIFICATION	4.7132613942854206E-8	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999826606021809	WITHOUT_CLASSIFICATION	1.7339397819035944E-5	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999908344541393	WITHOUT_CLASSIFICATION	9.165545860773E-6	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999992666051374	WITHOUT_CLASSIFICATION	7.333948625141944E-7	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.999987176282302	WITHOUT_CLASSIFICATION	1.2823717697905047E-5	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9982734173965229	WITHOUT_CLASSIFICATION	0.0017265826034771217	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999984680795104	WITHOUT_CLASSIFICATION	1.5319204896337723E-6	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999826606021809	WITHOUT_CLASSIFICATION	1.7339397819035944E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.991840139775018	WITHOUT_CLASSIFICATION	0.008159860224982132	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999999755523004	WITHOUT_CLASSIFICATION	2.4447699611684437E-8	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999826606021809	WITHOUT_CLASSIFICATION	1.7339397819035944E-5	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999717257031	WITHOUT_CLASSIFICATION	2.8274296821467393E-8	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999365783898297	WITHOUT_CLASSIFICATION	6.342161017020531E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.991840139775018	WITHOUT_CLASSIFICATION	0.008159860224982132	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999723929057233	WITHOUT_CLASSIFICATION	2.760709427683286E-5	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999975054127198	WITHOUT_CLASSIFICATION	2.4945872801498E-6	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997590597587	WITHOUT_CLASSIFICATION	2.409402413071761E-7	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.999988349662593	WITHOUT_CLASSIFICATION	1.1650337407004095E-5	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999968647570098	WITHOUT_CLASSIFICATION	3.1352429903589543E-6	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999930913151875	WITHOUT_CLASSIFICATION	6.908684812471995E-6	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999994264741938	WITHOUT_CLASSIFICATION	5.735258061995494E-7	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.9999954263104127	WITHOUT_CLASSIFICATION	4.573689587229868E-6	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995015899025536	WITHOUT_CLASSIFICATION	4.984100974464898E-4	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999175039699	WITHOUT_CLASSIFICATION	8.249603011195375E-8	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9963660076109251	WITHOUT_CLASSIFICATION	0.0036339923890749337	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999874359170384	WITHOUT_CLASSIFICATION	1.2564082961586066E-5	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9952134035576407	WITHOUT_CLASSIFICATION	0.004786596442359452	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999992424322957	WITHOUT_CLASSIFICATION	7.575677042807528E-7	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999672882194249	WITHOUT_CLASSIFICATION	3.271178057503265E-5	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999771381807943	WITHOUT_CLASSIFICATION	2.2861819205741034E-5	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999707342095	WITHOUT_CLASSIFICATION	2.9265790559304893E-8	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999452955727052	WITHOUT_CLASSIFICATION	5.470442729493141E-5	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999998248761909	WITHOUT_CLASSIFICATION	1.7512380910228426E-6	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999970648496063	WITHOUT_CLASSIFICATION	2.9351503936236075E-6	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999993907717113	WITHOUT_CLASSIFICATION	6.092282887871149E-7	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.9961636662074678	WITHOUT_CLASSIFICATION	0.003836333792532247	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999711837028199	WITHOUT_CLASSIFICATION	2.881629718004343E-5	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999947944654544	WITHOUT_CLASSIFICATION	5.205534545653013E-6	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999996789451078	WITHOUT_CLASSIFICATION	3.2105489218580265E-7	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999991364263854	WITHOUT_CLASSIFICATION	8.635736146629923E-7	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9998177620020386	WITHOUT_CLASSIFICATION	1.8223799796146566E-4	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999963899537111	WITHOUT_CLASSIFICATION	3.6100462889369518E-6	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999992963743972	WITHOUT_CLASSIFICATION	7.036256027797373E-7	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999988085172243	WITHOUT_CLASSIFICATION	1.1914827756423778E-6	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999991248168276	WITHOUT_CLASSIFICATION	8.751831724310366E-7	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999979068977771	WITHOUT_CLASSIFICATION	2.0931022229019495E-5	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.9971107514173387	WITHOUT_CLASSIFICATION	0.002889248582661246	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999987850560524	WITHOUT_CLASSIFICATION	1.2149439475969048E-6	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999937637389446	WITHOUT_CLASSIFICATION	6.236261055499572E-6	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.999999869339147	WITHOUT_CLASSIFICATION	1.3066085310077853E-7	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997479432722443	WITHOUT_CLASSIFICATION	2.5205672775577954E-4	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9997212599778115	WITHOUT_CLASSIFICATION	2.787400221885265E-4	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9872088216597933	WITHOUT_CLASSIFICATION	0.012791178340206629	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999984498413529	WITHOUT_CLASSIFICATION	1.550158647146766E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.991840139775018	WITHOUT_CLASSIFICATION	0.008159860224982132	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999875171007231	WITHOUT_CLASSIFICATION	1.2482899276866742E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9998828110751816	WITHOUT_CLASSIFICATION	1.1718892481840053E-4	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9998828110751816	WITHOUT_CLASSIFICATION	1.1718892481840053E-4	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999395931381638	WITHOUT_CLASSIFICATION	6.040686183615776E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999930913151875	WITHOUT_CLASSIFICATION	6.908684812471995E-6	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9994012189526065	WITHOUT_CLASSIFICATION	5.987810473934356E-4	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999998123001198	WITHOUT_CLASSIFICATION	1.8769988027457897E-7	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999712628036623	WITHOUT_CLASSIFICATION	2.8737196337703724E-4	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999963966812622	WITHOUT_CLASSIFICATION	3.6033187377835135E-6	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.9999979626259776	WITHOUT_CLASSIFICATION	2.0373740224327713E-6	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9997827654179074	WITHOUT_CLASSIFICATION	2.1723458209256449E-4	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999998040974917	WITHOUT_CLASSIFICATION	1.959025083092033E-6	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999995226862127	WITHOUT_CLASSIFICATION	4.773137872550323E-7	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999848138899284	WITHOUT_CLASSIFICATION	1.5186110071481077E-5	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999969110901384	WITHOUT_CLASSIFICATION	3.0889098615229025E-6	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.999927079395354	WITHOUT_CLASSIFICATION	7.292060464603475E-5	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999998686516443	WITHOUT_CLASSIFICATION	1.3134835569793993E-6	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999993502735053	WITHOUT_CLASSIFICATION	6.497264948155444E-7	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9998859216487301	WITHOUT_CLASSIFICATION	1.1407835126985259E-4	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999986839221744	WITHOUT_CLASSIFICATION	1.316077825621815E-6	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999996821488498	WITHOUT_CLASSIFICATION	3.178511501941965E-7	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999711688031	WITHOUT_CLASSIFICATION	2.8831196854014234E-8	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999980960004013	WITHOUT_CLASSIFICATION	1.9039995986529518E-6	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999970779303909	WITHOUT_CLASSIFICATION	2.9220696091646184E-6	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999611722708281	WITHOUT_CLASSIFICATION	3.882772917189195E-5	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999938007149058	WITHOUT_CLASSIFICATION	6.199285094087268E-6	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999927705302968	WITHOUT_CLASSIFICATION	7.22946970327876E-6	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9872088216597933	WITHOUT_CLASSIFICATION	0.012791178340206629	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999968787001244	WITHOUT_CLASSIFICATION	3.1212998754908443E-6	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999994605382966	WITHOUT_CLASSIFICATION	5.394617034506E-7	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999900926469333	WITHOUT_CLASSIFICATION	9.90735306673594E-6	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999977747932007	WITHOUT_CLASSIFICATION	2.22520679925864E-6	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9994496799497116	WITHOUT_CLASSIFICATION	5.503200502884016E-4	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998219123597946	WITHOUT_CLASSIFICATION	1.7808764020537334E-4	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999683578365013	WITHOUT_CLASSIFICATION	3.164216349867102E-5	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999994816461613	WITHOUT_CLASSIFICATION	5.183538386928676E-6	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999961434642817	WITHOUT_CLASSIFICATION	3.856535718316159E-6	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999108510403	WITHOUT_CLASSIFICATION	8.914895962964009E-8	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999987972844203	WITHOUT_CLASSIFICATION	1.2027155796652364E-6	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999985173395073	WITHOUT_CLASSIFICATION	1.4826604927413423E-6	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999452706300808	WITHOUT_CLASSIFICATION	5.472936991927108E-5	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9998931540391459	WITHOUT_CLASSIFICATION	1.0684596085408447E-4	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9998369159026773	WITHOUT_CLASSIFICATION	1.6308409732265124E-4	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999175591884	WITHOUT_CLASSIFICATION	8.244081157332934E-8	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999175591884	WITHOUT_CLASSIFICATION	8.244081157332934E-8	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998710965083148	WITHOUT_CLASSIFICATION	1.2890349168513234E-4	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999997968588679	WITHOUT_CLASSIFICATION	2.0314113213086845E-7	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999949387235437	WITHOUT_CLASSIFICATION	5.0612764563197866E-6	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999949387235437	WITHOUT_CLASSIFICATION	5.0612764563197866E-6	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999995451790635	WITHOUT_CLASSIFICATION	4.5482093638062013E-7	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9998163812769911	WITHOUT_CLASSIFICATION	1.8361872300891175E-4	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999803623479497	WITHOUT_CLASSIFICATION	1.963765205034644E-5	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999995553875841	WITHOUT_CLASSIFICATION	4.446124159553367E-7	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999632831438967	WITHOUT_CLASSIFICATION	3.6716856103197494E-5	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999993381602857	WITHOUT_CLASSIFICATION	6.618397142947916E-6	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999982857857065	WITHOUT_CLASSIFICATION	1.7142142934405947E-6	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999982857857065	WITHOUT_CLASSIFICATION	1.7142142934405947E-6	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999949723606096	WITHOUT_CLASSIFICATION	5.027639390422355E-6	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999998561572164	WITHOUT_CLASSIFICATION	1.4384278361885578E-7	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999996958951296	WITHOUT_CLASSIFICATION	3.041048704147399E-7	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999706211843382	WITHOUT_CLASSIFICATION	2.937881566184253E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999706211843382	WITHOUT_CLASSIFICATION	2.937881566184253E-5	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.9999987710923942	WITHOUT_CLASSIFICATION	1.2289076058047632E-6	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999617608664633	WITHOUT_CLASSIFICATION	3.823913353670105E-5	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999969016124388	WITHOUT_CLASSIFICATION	3.098387561181309E-6	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999998572429929	WITHOUT_CLASSIFICATION	1.4275700721975884E-7	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999991711711436	WITHOUT_CLASSIFICATION	8.288288564451843E-7	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999991369206671	WITHOUT_CLASSIFICATION	8.630793329000963E-7	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999553732008651	WITHOUT_CLASSIFICATION	4.462679913487814E-5	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999989400085075	WITHOUT_CLASSIFICATION	1.0599914924051956E-6	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999999372328272	WITHOUT_CLASSIFICATION	6.276717270297489E-8	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999907377187652	WITHOUT_CLASSIFICATION	9.262281234772695E-6	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999933761834	WITHOUT_CLASSIFICATION	6.623816606876635E-9	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9999579194516836	WITHOUT_CLASSIFICATION	4.208054831636552E-5	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999989701104042	WITHOUT_CLASSIFICATION	1.029889595804471E-6	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999919926196824	WITHOUT_CLASSIFICATION	8.007380317702576E-6	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9999982577881839	WITHOUT_CLASSIFICATION	1.7422118161218843E-6	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999902763659521	WITHOUT_CLASSIFICATION	9.723634047931571E-6	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999997965390217	WITHOUT_CLASSIFICATION	2.0346097828062246E-7	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.999954570745672	WITHOUT_CLASSIFICATION	4.542925432800258E-5	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999973631109444	WITHOUT_CLASSIFICATION	2.6368890555175514E-6	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999974763682021	WITHOUT_CLASSIFICATION	2.523631797848086E-6	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999758193674773	WITHOUT_CLASSIFICATION	2.4180632522768977E-5	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999424823174673	WITHOUT_CLASSIFICATION	5.7517682532775556E-5	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999961890746398	WITHOUT_CLASSIFICATION	3.8109253602763626E-6	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999999762854288	WITHOUT_CLASSIFICATION	2.371457120594013E-7	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.99999864031316	WITHOUT_CLASSIFICATION	1.3596868400257525E-6	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9999997089316607	WITHOUT_CLASSIFICATION	2.910683393007755E-7	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999998079584075	WITHOUT_CLASSIFICATION	1.9204159250725322E-7	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999621716676715	WITHOUT_CLASSIFICATION	3.782833232840303E-5	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999678461485	WITHOUT_CLASSIFICATION	3.215385148361598E-8	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999995603920997	WITHOUT_CLASSIFICATION	4.3960790042231735E-7	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999965106115654	WITHOUT_CLASSIFICATION	3.4893884345837647E-6	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999997136666526	WITHOUT_CLASSIFICATION	2.863333473890172E-7	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999997806328519	WITHOUT_CLASSIFICATION	2.193671481089564E-6	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.999965055863053	WITHOUT_CLASSIFICATION	3.494413694694579E-5	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999994431934888	WITHOUT_CLASSIFICATION	5.568065111823335E-7	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999345283321778	WITHOUT_CLASSIFICATION	6.547166782225774E-5	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.999991527432196	WITHOUT_CLASSIFICATION	8.472567803965275E-6	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999946372100962	WITHOUT_CLASSIFICATION	5.3627899038091986E-6	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999999355451806	WITHOUT_CLASSIFICATION	6.445481932227991E-8	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999998590602947	WITHOUT_CLASSIFICATION	1.4093970529434265E-6	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999661942394268	WITHOUT_CLASSIFICATION	3.380576057323075E-5	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9977660024004409	WITHOUT_CLASSIFICATION	0.002233997599559152	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.9999973120624559	WITHOUT_CLASSIFICATION	2.6879375441535755E-6	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.9999997660836588	WITHOUT_CLASSIFICATION	2.3391634129658825E-7	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999962764582773	WITHOUT_CLASSIFICATION	3.7235417227650986E-6	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999887781477982	WITHOUT_CLASSIFICATION	1.1221852201724681E-5	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.9913991133552582	WITHOUT_CLASSIFICATION	0.008600886644741743	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999721152043519	WITHOUT_CLASSIFICATION	2.788479564800839E-5	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999879698849096	WITHOUT_CLASSIFICATION	1.2030115090487833E-5	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999972828220507	WITHOUT_CLASSIFICATION	2.7171779492226714E-6	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9957648289689143	WITHOUT_CLASSIFICATION	0.004235171031085727	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999955552683965	WITHOUT_CLASSIFICATION	4.444731603561718E-6	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999905419763409	WITHOUT_CLASSIFICATION	9.458023659042292E-6	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999997119145388	WITHOUT_CLASSIFICATION	2.8808546117637823E-7	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9988818578211154	WITHOUT_CLASSIFICATION	0.0011181421788846004	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999861415241689	WITHOUT_CLASSIFICATION	1.385847583113048E-5	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9988726073860841	WITHOUT_CLASSIFICATION	0.0011273926139158514	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999940290504744	WITHOUT_CLASSIFICATION	5.970949525616772E-6	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9991859694123398	WITHOUT_CLASSIFICATION	8.140305876602944E-4	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9996947707844728	WITHOUT_CLASSIFICATION	3.052292155272092E-4	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999901126979966	WITHOUT_CLASSIFICATION	9.887302003316928E-6	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999901126979966	WITHOUT_CLASSIFICATION	9.887302003316928E-6	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999997478903982	WITHOUT_CLASSIFICATION	2.521096017539393E-7	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.999997961293196	WITHOUT_CLASSIFICATION	2.038706804108828E-6	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999819047399	WITHOUT_CLASSIFICATION	1.8095259985681253E-8	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999751913665	WITHOUT_CLASSIFICATION	2.480863348118822E-8	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9998943631395906	WITHOUT_CLASSIFICATION	1.0563686040945255E-4	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999995348250537	WITHOUT_CLASSIFICATION	4.651749464011314E-7	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999694249636	WITHOUT_CLASSIFICATION	3.0575036413196574E-8	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999515969551	WITHOUT_CLASSIFICATION	4.840304490260951E-7	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.999999897333625	WITHOUT_CLASSIFICATION	1.0266637496508122E-7	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.999999090989427	WITHOUT_CLASSIFICATION	9.090105730987299E-7	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999713587423912	WITHOUT_CLASSIFICATION	2.8641257608863002E-5	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9998650323351896	WITHOUT_CLASSIFICATION	1.3496766481034596E-4	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9997663730239565	WITHOUT_CLASSIFICATION	2.336269760434098E-4	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999742642203	WITHOUT_CLASSIFICATION	2.573577978895445E-8	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999949200901548	WITHOUT_CLASSIFICATION	5.079909845184827E-6	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999949200901548	WITHOUT_CLASSIFICATION	5.079909845184827E-6	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999990912811096	WITHOUT_CLASSIFICATION	9.087188903280519E-7	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9995839260589685	WITHOUT_CLASSIFICATION	4.1607394103146443E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999996429625181	WITHOUT_CLASSIFICATION	3.570374818935616E-7	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999985121715723	WITHOUT_CLASSIFICATION	1.4878284276442008E-6	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999995931844416	WITHOUT_CLASSIFICATION	4.068155583971718E-6	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999874380754292	WITHOUT_CLASSIFICATION	1.2561924570809882E-5	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999998853202989	WITHOUT_CLASSIFICATION	1.146797010742219E-7	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9999435811109343	WITHOUT_CLASSIFICATION	5.64188890657816E-5	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9992745084833242	WITHOUT_CLASSIFICATION	7.254915166757547E-4	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999987507957	WITHOUT_CLASSIFICATION	1.2492042251106152E-9	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999672992373353	WITHOUT_CLASSIFICATION	3.2700762664766744E-5	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999692246616	WITHOUT_CLASSIFICATION	3.077533841760302E-8	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999833304310397	WITHOUT_CLASSIFICATION	1.6669568960311654E-5	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999865696723116	WITHOUT_CLASSIFICATION	1.343032768837201E-5	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999993503055742	WITHOUT_CLASSIFICATION	6.496944258315318E-7	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999951334048138	WITHOUT_CLASSIFICATION	4.866595186187779E-6	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999624615190167	WITHOUT_CLASSIFICATION	3.753848098337994E-5	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9993939242814032	WITHOUT_CLASSIFICATION	6.060757185968803E-4	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999995788778661	WITHOUT_CLASSIFICATION	4.2112213383552247E-7	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999240752685041	WITHOUT_CLASSIFICATION	7.592473149591903E-5	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999998734771854	WITHOUT_CLASSIFICATION	1.2652281464046942E-7	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999994822720353	WITHOUT_CLASSIFICATION	5.177279647930238E-7	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999992981875276	WITHOUT_CLASSIFICATION	7.018124723650063E-7	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999932109074959	WITHOUT_CLASSIFICATION	6.789092504107154E-6	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999997248160568	WITHOUT_CLASSIFICATION	2.7518394321821455E-7	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9999939519629109	WITHOUT_CLASSIFICATION	6.048037089088273E-6	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9963296624697909	WITHOUT_CLASSIFICATION	0.0036703375302092056	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.999999137343395	WITHOUT_CLASSIFICATION	8.626566050419177E-7	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9998867801536638	WITHOUT_CLASSIFICATION	1.1321984633620656E-4	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999478016137225	WITHOUT_CLASSIFICATION	5.219838627738937E-5	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999906023482341	WITHOUT_CLASSIFICATION	9.397651765878206E-6	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999984362725548	WITHOUT_CLASSIFICATION	1.5637274452548484E-6	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999594095220589	WITHOUT_CLASSIFICATION	4.059047794118295E-5	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999999756740574	WITHOUT_CLASSIFICATION	2.432594252265578E-8	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999999917013272	WITHOUT_CLASSIFICATION	8.298672801111113E-8	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.99995418418839	WITHOUT_CLASSIFICATION	4.5815811610019094E-5	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.999997391742212	WITHOUT_CLASSIFICATION	2.608257787985766E-6	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999759879700192	WITHOUT_CLASSIFICATION	2.4012029980917105E-5	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999988799839068	WITHOUT_CLASSIFICATION	1.1200160932606874E-6	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999908349775153	WITHOUT_CLASSIFICATION	9.165022484832756E-6	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9991208013091799	WITHOUT_CLASSIFICATION	8.791986908201745E-4	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999839728926427	WITHOUT_CLASSIFICATION	1.6027107357313354E-5	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999585890318582	WITHOUT_CLASSIFICATION	4.141096814182147E-5	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999585890318582	WITHOUT_CLASSIFICATION	4.141096814182147E-5	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.999999930538748	WITHOUT_CLASSIFICATION	6.946125186887859E-8	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9971845598067702	WITHOUT_CLASSIFICATION	0.0028154401932297354	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999974164736656	WITHOUT_CLASSIFICATION	2.583526334516075E-6	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999818614730397	WITHOUT_CLASSIFICATION	1.8138526960358387E-5	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999994234434902	WITHOUT_CLASSIFICATION	5.765565096483124E-7	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999994170707408	WITHOUT_CLASSIFICATION	5.829292591507839E-7	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998464866162045	WITHOUT_CLASSIFICATION	1.535133837954968E-4	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999996724905772	WITHOUT_CLASSIFICATION	3.2750942272201604E-7	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9991564523475474	WITHOUT_CLASSIFICATION	8.4354765245273E-4	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973245526421	WITHOUT_CLASSIFICATION	2.6754473578693387E-6	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992641176548	WITHOUT_CLASSIFICATION	7.358823451621261E-7	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999988518712328	WITHOUT_CLASSIFICATION	1.1481287670811474E-6	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999989715907117	WITHOUT_CLASSIFICATION	1.028409288221533E-6	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999998780563679	WITHOUT_CLASSIFICATION	1.2194363215968502E-7	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9990925763703691	WITHOUT_CLASSIFICATION	9.074236296308742E-4	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999957147029936	WITHOUT_CLASSIFICATION	4.285297006455141E-6	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999948125367222	WITHOUT_CLASSIFICATION	5.187463277788359E-6	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999953521785457	WITHOUT_CLASSIFICATION	4.64782145419203E-6	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.999999795656458	WITHOUT_CLASSIFICATION	2.0434354202785762E-7	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999674884728786	WITHOUT_CLASSIFICATION	3.251152712142688E-5	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999999843864776	WITHOUT_CLASSIFICATION	1.5613522336302093E-8	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9997240914136716	WITHOUT_CLASSIFICATION	2.759085863285066E-4	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999533642394197	WITHOUT_CLASSIFICATION	4.663576058023412E-5	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999594590201	WITHOUT_CLASSIFICATION	4.054097984034569E-8	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.999991332139802	WITHOUT_CLASSIFICATION	8.667860198045693E-6	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9998126636930188	WITHOUT_CLASSIFICATION	1.8733630698124261E-4	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999766784434391	WITHOUT_CLASSIFICATION	2.3321556560926516E-5	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999725875083	WITHOUT_CLASSIFICATION	2.741249168409712E-8	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999985753790558	WITHOUT_CLASSIFICATION	1.4246209442285984E-6	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999895544180626	WITHOUT_CLASSIFICATION	1.0445581937408624E-5	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998064158305923	WITHOUT_CLASSIFICATION	1.93584169407713E-4	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999846130519526	WITHOUT_CLASSIFICATION	1.5386948047387412E-5	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999947600840606	WITHOUT_CLASSIFICATION	5.239915939359251E-6	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999996859689609	WITHOUT_CLASSIFICATION	3.1403103899521455E-7	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996768648974831	WITHOUT_CLASSIFICATION	3.231351025170103E-4	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999998982571026	WITHOUT_CLASSIFICATION	1.0174289739422066E-6	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999283937595905	WITHOUT_CLASSIFICATION	7.160624040943518E-5	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.99999998147978	WITHOUT_CLASSIFICATION	1.8520220069813108E-8	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999986303878717	WITHOUT_CLASSIFICATION	1.3696121282648057E-6	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999746528438	WITHOUT_CLASSIFICATION	2.5347156108402597E-8	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999939240013623	WITHOUT_CLASSIFICATION	6.075998637638787E-6	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999857429393784	WITHOUT_CLASSIFICATION	1.425706062155439E-5	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999918420835	WITHOUT_CLASSIFICATION	8.157916423586449E-9	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999990878231577	WITHOUT_CLASSIFICATION	9.121768422846278E-7	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999955946713025	WITHOUT_CLASSIFICATION	4.405328697496762E-5	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999056462740497	WITHOUT_CLASSIFICATION	9.43537259504078E-5	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999831428849	WITHOUT_CLASSIFICATION	1.685711519649281E-8	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9980810290448556	WITHOUT_CLASSIFICATION	0.0019189709551443843	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999882012234629	WITHOUT_CLASSIFICATION	1.179877653712681E-5	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9997663730239565	WITHOUT_CLASSIFICATION	2.336269760434098E-4	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.99995623637924	WITHOUT_CLASSIFICATION	4.376362076000144E-5	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999977587585	WITHOUT_CLASSIFICATION	2.2412414420898878E-9	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999454072917454	WITHOUT_CLASSIFICATION	5.4592708254567016E-5	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.999995726427212	WITHOUT_CLASSIFICATION	4.2735727879595694E-6	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999932993469	WITHOUT_CLASSIFICATION	6.700653179472232E-9	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999963584902388	WITHOUT_CLASSIFICATION	3.64150976111324E-6	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9998471897765789	WITHOUT_CLASSIFICATION	1.528102234210168E-4	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999167605034325	WITHOUT_CLASSIFICATION	8.323949656740572E-5	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999982238984553	WITHOUT_CLASSIFICATION	1.7761015447391562E-6	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999546732708336	WITHOUT_CLASSIFICATION	4.53267291663535E-5	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999944436201389	WITHOUT_CLASSIFICATION	5.556379861134779E-6	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9281812308990628	WITHOUT_CLASSIFICATION	0.07181876910093711	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998667227461778	WITHOUT_CLASSIFICATION	1.3327725382209537E-4	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999896687051502	WITHOUT_CLASSIFICATION	1.0331294849872463E-5	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999489665026	WITHOUT_CLASSIFICATION	5.1033497365646925E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926804260357	WITHOUT_CLASSIFICATION	7.3195739643477445E-6	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999971017858613	WITHOUT_CLASSIFICATION	2.8982141387564863E-6	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999993912682431	WITHOUT_CLASSIFICATION	6.08731756794139E-7	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999998185297938	WITHOUT_CLASSIFICATION	1.8147020626173257E-7	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9995844435624928	WITHOUT_CLASSIFICATION	4.1555643750721105E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926804260357	WITHOUT_CLASSIFICATION	7.3195739643477445E-6	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9996052470400594	WITHOUT_CLASSIFICATION	3.9475295994054427E-4	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.989012310449622	WITHOUT_CLASSIFICATION	0.010987689550377955	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999982319507	WITHOUT_CLASSIFICATION	1.7680492580227037E-9	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999985588809494	WITHOUT_CLASSIFICATION	1.441119050598259E-6	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999995690677599	WITHOUT_CLASSIFICATION	4.309322401332694E-7	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.998267441536422	WITHOUT_CLASSIFICATION	0.001732558463577923	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999990705514	WITHOUT_CLASSIFICATION	9.294486658554812E-10	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9998725922989253	WITHOUT_CLASSIFICATION	1.274077010746816E-4	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999998842658946	WITHOUT_CLASSIFICATION	1.1573410538925017E-6	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998259986117983	WITHOUT_CLASSIFICATION	1.740013882016876E-4	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999615353224609	WITHOUT_CLASSIFICATION	3.846467753916478E-5	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999869486942784	WITHOUT_CLASSIFICATION	1.3051305721678261E-5	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9994505936858891	WITHOUT_CLASSIFICATION	5.494063141108715E-4	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999998464330333	WITHOUT_CLASSIFICATION	1.5356696680610688E-7	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999979737500405	WITHOUT_CLASSIFICATION	2.026249959473023E-6	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999904500039817	WITHOUT_CLASSIFICATION	9.549996018270068E-6	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999927705302968	WITHOUT_CLASSIFICATION	7.22946970327876E-6	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999997297031885	WITHOUT_CLASSIFICATION	2.702968115091342E-7	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998065891923	WITHOUT_CLASSIFICATION	1.9341080774572823E-7	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999995880657838	WITHOUT_CLASSIFICATION	4.119342161936987E-7	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999781588573798	WITHOUT_CLASSIFICATION	2.1841142620080618E-5	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999997399390829	WITHOUT_CLASSIFICATION	2.600609170573668E-7	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999894894227758	WITHOUT_CLASSIFICATION	1.0510577224168797E-5	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999999182511623	WITHOUT_CLASSIFICATION	8.174883776789333E-8	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999988873023	WITHOUT_CLASSIFICATION	1.1126977011643806E-9	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999992472632665	WITHOUT_CLASSIFICATION	7.527367335883336E-7	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999826775886786	WITHOUT_CLASSIFICATION	1.732241132142381E-5	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998316360708333	WITHOUT_CLASSIFICATION	1.6836392916663766E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999969328603924	WITHOUT_CLASSIFICATION	3.0671396076768806E-6	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999996131167628	WITHOUT_CLASSIFICATION	3.868832372254102E-7	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.924075345637246	WITHOUT_CLASSIFICATION	0.07592465436275396	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9999987122210933	WITHOUT_CLASSIFICATION	1.287778906728877E-6	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9961055280795565	WITHOUT_CLASSIFICATION	0.003894471920443548	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9997822701839807	WITHOUT_CLASSIFICATION	2.1772981601935626E-4	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999996423651989	WITHOUT_CLASSIFICATION	3.576348010996764E-6	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999633733472	WITHOUT_CLASSIFICATION	3.66266527297665E-8	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999895238972	WITHOUT_CLASSIFICATION	1.0476102767302727E-8	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999998941852712	WITHOUT_CLASSIFICATION	1.0581472880630996E-6	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999904563883242	WITHOUT_CLASSIFICATION	9.543611675789883E-6	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999997912923846	WITHOUT_CLASSIFICATION	2.0870761553967116E-7	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999682387555214	WITHOUT_CLASSIFICATION	3.176124447851036E-5	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999974997861052	WITHOUT_CLASSIFICATION	2.500213894849647E-6	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999974997861052	WITHOUT_CLASSIFICATION	2.500213894849647E-6	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.998917207130581	WITHOUT_CLASSIFICATION	0.0010827928694189736	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999993362925951	WITHOUT_CLASSIFICATION	6.637074049169516E-7	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999988035091514	WITHOUT_CLASSIFICATION	1.196490848562806E-6	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.999999868426385	WITHOUT_CLASSIFICATION	1.31573615046718E-7	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999765771086231	WITHOUT_CLASSIFICATION	2.3422891376922463E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999765771086231	WITHOUT_CLASSIFICATION	2.3422891376922463E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9994684953933752	WITHOUT_CLASSIFICATION	5.315046066247406E-4	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999397173477	WITHOUT_CLASSIFICATION	6.028265233421508E-8	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999897334316733	WITHOUT_CLASSIFICATION	1.0266568326801681E-5	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.99999955629718	WITHOUT_CLASSIFICATION	4.4370282006382965E-7	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.999993997023689	WITHOUT_CLASSIFICATION	6.002976310991323E-6	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999732411024732	WITHOUT_CLASSIFICATION	2.6758897526823767E-5	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999832085959706	WITHOUT_CLASSIFICATION	1.6791404029412688E-5	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999928949514969	WITHOUT_CLASSIFICATION	7.105048503066164E-6	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9997836071887937	WITHOUT_CLASSIFICATION	2.1639281120630616E-4	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999985791055026	WITHOUT_CLASSIFICATION	1.4208944973920709E-6	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999981712713224	WITHOUT_CLASSIFICATION	1.8287286775563362E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999237344355	WITHOUT_CLASSIFICATION	7.626556449959337E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999237344355	WITHOUT_CLASSIFICATION	7.626556449959337E-7	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999972817888	WITHOUT_CLASSIFICATION	2.718211289603203E-9	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999820545709207	WITHOUT_CLASSIFICATION	1.7945429079303693E-4	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999947468177462	WITHOUT_CLASSIFICATION	5.253182253791899E-6	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999996974089584	WITHOUT_CLASSIFICATION	3.0259104153530463E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.991840139775018	WITHOUT_CLASSIFICATION	0.008159860224982132	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999980389981822	WITHOUT_CLASSIFICATION	1.9610018176918443E-6	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953714658916	WITHOUT_CLASSIFICATION	4.628534108477165E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.991840139775018	WITHOUT_CLASSIFICATION	0.008159860224982132	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999995067994635	WITHOUT_CLASSIFICATION	4.932005365700478E-7	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998832172001627	WITHOUT_CLASSIFICATION	1.1678279983728494E-4	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999979273880134	WITHOUT_CLASSIFICATION	2.0726119866624127E-6	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999579487279	WITHOUT_CLASSIFICATION	4.205127212356378E-8	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998259986117983	WITHOUT_CLASSIFICATION	1.740013882016876E-4	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.999999463945459	WITHOUT_CLASSIFICATION	5.360545410360671E-7	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.998570698876236	WITHOUT_CLASSIFICATION	0.0014293011237640828	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.999999916380246	WITHOUT_CLASSIFICATION	8.361975399458723E-8	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9999999427198578	WITHOUT_CLASSIFICATION	5.7280142168973596E-8	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999997369657431	WITHOUT_CLASSIFICATION	2.630342569244758E-7	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999994943462543	WITHOUT_CLASSIFICATION	5.056537457018613E-7	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999979197974587	WITHOUT_CLASSIFICATION	2.0802025412455517E-6	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999999802228405	WITHOUT_CLASSIFICATION	1.9777159562160362E-8	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999987898648323	WITHOUT_CLASSIFICATION	1.2101351677671133E-6	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9996268236295964	WITHOUT_CLASSIFICATION	3.731763704035803E-4	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9996268236295964	WITHOUT_CLASSIFICATION	3.731763704035803E-4	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999839788277192	WITHOUT_CLASSIFICATION	1.6021172280843072E-5	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999992774303273	WITHOUT_CLASSIFICATION	7.225696726413392E-7	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999896234629163	WITHOUT_CLASSIFICATION	1.0376537083594353E-5	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999978449546867	WITHOUT_CLASSIFICATION	2.155045313350461E-6	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999961616684782	WITHOUT_CLASSIFICATION	3.838331521780103E-6	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999981372771891	WITHOUT_CLASSIFICATION	1.8627228108073701E-6	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999977911209572	WITHOUT_CLASSIFICATION	2.2088790428034565E-5	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9907903012011374	WITHOUT_CLASSIFICATION	0.009209698798862484	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999991869840761	WITHOUT_CLASSIFICATION	8.13015923858917E-7	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999933717898552	WITHOUT_CLASSIFICATION	6.628210144792971E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999826606021809	WITHOUT_CLASSIFICATION	1.7339397819035944E-5	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9665570245124484	WITHOUT_CLASSIFICATION	0.03344297548755164	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998666324197	WITHOUT_CLASSIFICATION	1.333675802614764E-7	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998854035703	WITHOUT_CLASSIFICATION	1.1459642959522289E-7	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999998388450315	WITHOUT_CLASSIFICATION	1.611549684844551E-7	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999964600265207	WITHOUT_CLASSIFICATION	3.5399734794135787E-6	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999892568498233	WITHOUT_CLASSIFICATION	1.0743150176701941E-5	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999867189326791	WITHOUT_CLASSIFICATION	1.3281067321039867E-5	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.999983951194218	WITHOUT_CLASSIFICATION	1.6048805781991268E-5	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999894221317942	WITHOUT_CLASSIFICATION	1.0577868205742658E-5	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999893407940929	WITHOUT_CLASSIFICATION	1.0659205907199249E-5	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999939643938177	WITHOUT_CLASSIFICATION	6.035606182255215E-6	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999969016124388	WITHOUT_CLASSIFICATION	3.098387561181309E-6	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999967431477	WITHOUT_CLASSIFICATION	3.2568522379426927E-9	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999689622882308	WITHOUT_CLASSIFICATION	3.103771176916137E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999689622882308	WITHOUT_CLASSIFICATION	3.103771176916137E-5	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999085078887129	WITHOUT_CLASSIFICATION	9.14921112871748E-5	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999928622993384	WITHOUT_CLASSIFICATION	7.137700661594929E-5	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999939426804322	WITHOUT_CLASSIFICATION	6.057319567835345E-6	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999873735112268	WITHOUT_CLASSIFICATION	1.2626488773239878E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.99998891967124	WITHOUT_CLASSIFICATION	1.1080328759942574E-5	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999515465203096	WITHOUT_CLASSIFICATION	4.8453479690314365E-5	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9977662924297155	WITHOUT_CLASSIFICATION	0.0022337075702844687	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999569090965073	WITHOUT_CLASSIFICATION	4.309090349282622E-5	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.9707938441267814	WITHOUT_CLASSIFICATION	0.02920615587321866	DEFECT
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.6107825336352658	DEFECT	0.38921746636473414	WITHOUT_CLASSIFICATION
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.5998434637555936	WITHOUT_CLASSIFICATION	0.4001565362444063	DEFECT
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.5448410887832712	WITHOUT_CLASSIFICATION	0.4551589112167288	DEFECT
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.9999989856214464	WITHOUT_CLASSIFICATION	1.0143785536196135E-6	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.9999822009143393	WITHOUT_CLASSIFICATION	1.779908566064028E-5	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9951828651218334	WITHOUT_CLASSIFICATION	0.0048171348781666625	DEFECT
TODO : should this be an error?	DEFECT	0.9996253190685749	WITHOUT_CLASSIFICATION	3.7468093142509044E-4	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.8801716433466428	WITHOUT_CLASSIFICATION	0.11982835665335716	DEFECT
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.7666442066939849	DEFECT	0.23335579330601508	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7299641445797913	DEFECT	0.27003585542020864	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7299641445797913	DEFECT	0.27003585542020864	WITHOUT_CLASSIFICATION
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9984941463658121	WITHOUT_CLASSIFICATION	0.0015058536341878682	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999664660001739	WITHOUT_CLASSIFICATION	3.353399982613202E-5	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.6992068129839417	WITHOUT_CLASSIFICATION	0.30079318701605834	DEFECT
this call is side-effecty	DEFECT	0.9999887560235562	WITHOUT_CLASSIFICATION	1.1243976443909656E-5	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.5323003074239155	WITHOUT_CLASSIFICATION	0.4676996925760845	DEFECT
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.897064523271011	WITHOUT_CLASSIFICATION	0.10293547672898888	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.9923112652444774	WITHOUT_CLASSIFICATION	0.007688734755522472	DEFECT
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.9972958940857715	WITHOUT_CLASSIFICATION	0.002704105914228547	DEFECT
TODO: is this completely correct?	DEFECT	0.9573876114514039	WITHOUT_CLASSIFICATION	0.04261238854859603	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.5238101550624987	WITHOUT_CLASSIFICATION	0.4761898449375014	DEFECT
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.975686547851009	WITHOUT_CLASSIFICATION	0.024313452148991	DEFECT
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9992107457295578	WITHOUT_CLASSIFICATION	7.892542704421694E-4	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.7855641115201674	DEFECT	0.21443588847983266	WITHOUT_CLASSIFICATION
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.8185664168253918	WITHOUT_CLASSIFICATION	0.18143358317460825	DEFECT
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9818471640430713	WITHOUT_CLASSIFICATION	0.018152835956928702	DEFECT
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.9973921361010714	WITHOUT_CLASSIFICATION	0.0026078638989285928	DEFECT
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.9883944319475362	WITHOUT_CLASSIFICATION	0.011605568052463705	DEFECT
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9900021487809363	WITHOUT_CLASSIFICATION	0.009997851219063738	DEFECT
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.8880797483686724	WITHOUT_CLASSIFICATION	0.11192025163132757	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7299641445797913	DEFECT	0.27003585542020864	WITHOUT_CLASSIFICATION
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9999457068802893	DEFECT	5.429311971060149E-5	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.9981976539593654	WITHOUT_CLASSIFICATION	0.0018023460406345216	DEFECT
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.662914073086365	WITHOUT_CLASSIFICATION	0.337085926913635	DEFECT
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9999908454690593	WITHOUT_CLASSIFICATION	9.154530940827154E-6	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.9999863461003478	WITHOUT_CLASSIFICATION	1.3653899652342577E-5	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9999994835114039	WITHOUT_CLASSIFICATION	5.16488596081358E-7	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9996621565735039	WITHOUT_CLASSIFICATION	3.3784342649611354E-4	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.707728131482262	WITHOUT_CLASSIFICATION	0.292271868517738	DEFECT
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.9977728558640313	WITHOUT_CLASSIFICATION	0.0022271441359686616	DEFECT
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.9985856888474332	WITHOUT_CLASSIFICATION	0.0014143111525668937	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.9987775784918584	WITHOUT_CLASSIFICATION	0.0012224215081414731	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.9447066402378853	DEFECT	0.055293359762114705	WITHOUT_CLASSIFICATION
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9999991170221803	WITHOUT_CLASSIFICATION	8.829778196937157E-7	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.9998455757990655	WITHOUT_CLASSIFICATION	1.5442420093444428E-4	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.8328740645867001	WITHOUT_CLASSIFICATION	0.1671259354132999	DEFECT
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.8133378634016042	WITHOUT_CLASSIFICATION	0.18666213659839576	DEFECT
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.825420183723784	WITHOUT_CLASSIFICATION	0.17457981627621602	DEFECT
