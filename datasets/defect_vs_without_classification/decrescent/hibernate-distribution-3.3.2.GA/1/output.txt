//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999351007151667	WITHOUT_CLASSIFICATION	6.489928483333895E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999711092202767	WITHOUT_CLASSIFICATION	2.8890779723306276E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999711092202767	WITHOUT_CLASSIFICATION	2.8890779723306276E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999711092202767	WITHOUT_CLASSIFICATION	2.8890779723306276E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999711092202767	WITHOUT_CLASSIFICATION	2.8890779723306276E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999711092202767	WITHOUT_CLASSIFICATION	2.8890779723306276E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999711092202767	WITHOUT_CLASSIFICATION	2.8890779723306276E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999711092202767	WITHOUT_CLASSIFICATION	2.8890779723306276E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999698388174426	WITHOUT_CLASSIFICATION	3.0161182557341028E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999698388174426	WITHOUT_CLASSIFICATION	3.0161182557341028E-5	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999961207314516	WITHOUT_CLASSIFICATION	3.879268548339655E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999959587362897	WITHOUT_CLASSIFICATION	4.041263710363569E-6	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999884151380755	WITHOUT_CLASSIFICATION	1.1584861924531629E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999955974537611	WITHOUT_CLASSIFICATION	4.402546238908603E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999955974537611	WITHOUT_CLASSIFICATION	4.402546238908603E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998184085348	WITHOUT_CLASSIFICATION	1.815914651633E-7	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993551695732	WITHOUT_CLASSIFICATION	6.448304267825442E-7	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.99999323377687	WITHOUT_CLASSIFICATION	6.766223130105951E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999723115508288	WITHOUT_CLASSIFICATION	2.7688449171224466E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9998535480781218	WITHOUT_CLASSIFICATION	1.4645192187819235E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9998535480781218	WITHOUT_CLASSIFICATION	1.4645192187819235E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9995737640891582	WITHOUT_CLASSIFICATION	4.2623591084176753E-4	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999543246725522	WITHOUT_CLASSIFICATION	4.567532744772628E-5	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9997512141171919	WITHOUT_CLASSIFICATION	2.487858828080921E-4	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999915428284784	WITHOUT_CLASSIFICATION	8.457171521613572E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999893855151605	WITHOUT_CLASSIFICATION	1.0614484839410497E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999862411704412	WITHOUT_CLASSIFICATION	1.3758829558765323E-5	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9998161881310417	WITHOUT_CLASSIFICATION	1.8381186895826142E-4	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998375843365104	WITHOUT_CLASSIFICATION	1.6241566348970546E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998481159830849	WITHOUT_CLASSIFICATION	1.5188401691504957E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9966429246594555	WITHOUT_CLASSIFICATION	0.0033570753405445307	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999384993836757	WITHOUT_CLASSIFICATION	6.150061632432693E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999309754762433	WITHOUT_CLASSIFICATION	6.902452375668691E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999899818326704	WITHOUT_CLASSIFICATION	1.0018167329663312E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999875185383496	WITHOUT_CLASSIFICATION	1.2481461650403172E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999875185383496	WITHOUT_CLASSIFICATION	1.2481461650403172E-4	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999990829326337	WITHOUT_CLASSIFICATION	9.170673662061264E-7	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9996079638980172	WITHOUT_CLASSIFICATION	3.9203610198274295E-4	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999776453296799	WITHOUT_CLASSIFICATION	2.2354670320041356E-5	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997992354597	WITHOUT_CLASSIFICATION	2.0076454037013287E-7	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999992139362478	WITHOUT_CLASSIFICATION	7.860637522191727E-7	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9966015327622515	WITHOUT_CLASSIFICATION	0.003398467237748469	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9966015327622515	WITHOUT_CLASSIFICATION	0.003398467237748469	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999985033504468	WITHOUT_CLASSIFICATION	1.4966495531692517E-6	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999943834574732	WITHOUT_CLASSIFICATION	5.616542526855008E-6	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999979482208579	WITHOUT_CLASSIFICATION	2.0517791421714013E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999713105632675	WITHOUT_CLASSIFICATION	2.8689436732598354E-5	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999580727249893	WITHOUT_CLASSIFICATION	4.192727501067955E-5	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962542426482	WITHOUT_CLASSIFICATION	3.745757351832199E-6	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924125962779	WITHOUT_CLASSIFICATION	7.587403722102537E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998975108118625	WITHOUT_CLASSIFICATION	1.0248918813748053E-4	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9986011957931483	WITHOUT_CLASSIFICATION	0.0013988042068516502	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999184106750135	WITHOUT_CLASSIFICATION	8.158932498638055E-5	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.999815597057654	WITHOUT_CLASSIFICATION	1.8440294234600314E-4	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9986011957931483	WITHOUT_CLASSIFICATION	0.0013988042068516502	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.999815597057654	WITHOUT_CLASSIFICATION	1.8440294234600314E-4	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9996905516735738	WITHOUT_CLASSIFICATION	3.0944832642609425E-4	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9996566729536882	WITHOUT_CLASSIFICATION	3.433270463118315E-4	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999946143083441	WITHOUT_CLASSIFICATION	5.385691655914751E-6	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9995280447789974	WITHOUT_CLASSIFICATION	4.7195522100263154E-4	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999908660084109	WITHOUT_CLASSIFICATION	9.133991589080522E-6	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999989330542814	WITHOUT_CLASSIFICATION	1.066945718587049E-6	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9994353586201571	WITHOUT_CLASSIFICATION	5.646413798428197E-4	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9997477544974229	WITHOUT_CLASSIFICATION	2.522455025769923E-4	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999623034438136	WITHOUT_CLASSIFICATION	3.7696556186325985E-5	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999862904577247	WITHOUT_CLASSIFICATION	1.3709542275415161E-5	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9998844083483037	WITHOUT_CLASSIFICATION	1.155916516964079E-4	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.999962065386881	WITHOUT_CLASSIFICATION	3.7934613119028624E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999986081562633	WITHOUT_CLASSIFICATION	1.3918437367800555E-6	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998493722758062	WITHOUT_CLASSIFICATION	1.5062772419392032E-4	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999368873419783	WITHOUT_CLASSIFICATION	6.311265802176837E-5	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999942978122973	WITHOUT_CLASSIFICATION	5.702187702723079E-6	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999795425858341	WITHOUT_CLASSIFICATION	2.0457414165958572E-5	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999929452796077	WITHOUT_CLASSIFICATION	7.0547203922942786E-6	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999773644228848	WITHOUT_CLASSIFICATION	2.2635577115156868E-5	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999964726313249	WITHOUT_CLASSIFICATION	3.527368675112661E-5	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999942592416379	WITHOUT_CLASSIFICATION	5.740758362107468E-6	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999282792624561	WITHOUT_CLASSIFICATION	7.172073754390072E-5	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999940114960263	WITHOUT_CLASSIFICATION	5.988503973705065E-5	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999667990797433	WITHOUT_CLASSIFICATION	3.3200920256799895E-5	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999493504380831	WITHOUT_CLASSIFICATION	5.0649561916923835E-5	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999183807490066	WITHOUT_CLASSIFICATION	8.16192509934051E-5	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999997202409561	WITHOUT_CLASSIFICATION	2.7975904400895805E-7	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999788289051094	WITHOUT_CLASSIFICATION	2.117109489064247E-5	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999721525337666	WITHOUT_CLASSIFICATION	2.7847466233463698E-5	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999997649866022	WITHOUT_CLASSIFICATION	2.3501339780168445E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999824638147809	WITHOUT_CLASSIFICATION	1.7536185219093925E-4	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999959507979322	WITHOUT_CLASSIFICATION	4.049202067818184E-6	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999910231750027	WITHOUT_CLASSIFICATION	8.976824997408691E-6	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999970849163338	WITHOUT_CLASSIFICATION	2.9150836661959264E-6	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999873076495817	WITHOUT_CLASSIFICATION	1.269235041835835E-5	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999805666535312	WITHOUT_CLASSIFICATION	1.9433346468850902E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999970849163338	WITHOUT_CLASSIFICATION	2.9150836661959264E-6	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.999998416673139	WITHOUT_CLASSIFICATION	1.5833268609557117E-6	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998592160524375	WITHOUT_CLASSIFICATION	1.4078394756241914E-4	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999496022411236	WITHOUT_CLASSIFICATION	5.0397758876330766E-5	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999679415013217	WITHOUT_CLASSIFICATION	3.205849867823887E-5	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999954077574799	WITHOUT_CLASSIFICATION	4.592242520151597E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.99990474378435	WITHOUT_CLASSIFICATION	9.525621565003701E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.99990474378435	WITHOUT_CLASSIFICATION	9.525621565003701E-5	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998584887477882	WITHOUT_CLASSIFICATION	1.4151125221173807E-4	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999624158068938	WITHOUT_CLASSIFICATION	3.758419310616175E-5	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999886129848424	WITHOUT_CLASSIFICATION	1.1387015157582717E-5	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999817359999171	WITHOUT_CLASSIFICATION	1.826400008278403E-5	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999512873112599	WITHOUT_CLASSIFICATION	4.8712688740147966E-5	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999301064285689	WITHOUT_CLASSIFICATION	6.98935714310572E-5	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999877094814601	WITHOUT_CLASSIFICATION	1.2290518539800333E-5	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.999938787936416	WITHOUT_CLASSIFICATION	6.121206358393792E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999934137882066	WITHOUT_CLASSIFICATION	6.586211793389122E-6	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999693162182703	WITHOUT_CLASSIFICATION	3.068378172968537E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999986795524147	WITHOUT_CLASSIFICATION	1.3204475852742585E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999986795524147	WITHOUT_CLASSIFICATION	1.3204475852742585E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999626645516924	WITHOUT_CLASSIFICATION	3.7335448307668394E-5	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999628487696238	WITHOUT_CLASSIFICATION	3.7151230376290456E-5	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999781938913217	WITHOUT_CLASSIFICATION	2.1806108678260013E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999986795524147	WITHOUT_CLASSIFICATION	1.3204475852742585E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999626645516924	WITHOUT_CLASSIFICATION	3.7335448307668394E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999626645516924	WITHOUT_CLASSIFICATION	3.7335448307668394E-5	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999770306218148	WITHOUT_CLASSIFICATION	2.2969378185271368E-5	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.999976259430096	WITHOUT_CLASSIFICATION	2.374056990390405E-5	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9998220456039739	WITHOUT_CLASSIFICATION	1.7795439602613444E-4	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999652460277856	WITHOUT_CLASSIFICATION	3.475397221441346E-5	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999872705712448	WITHOUT_CLASSIFICATION	1.272942875514204E-5	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999872705712448	WITHOUT_CLASSIFICATION	1.272942875514204E-5	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999973982323415	WITHOUT_CLASSIFICATION	2.6017676585082033E-5	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998576950305377	WITHOUT_CLASSIFICATION	1.4230496946238068E-4	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999954014779067	WITHOUT_CLASSIFICATION	4.598522093358948E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999995267013536	WITHOUT_CLASSIFICATION	4.7329864639585475E-7	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999995267013536	WITHOUT_CLASSIFICATION	4.7329864639585475E-7	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999915014474359	WITHOUT_CLASSIFICATION	8.498552564027805E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9995893804519821	WITHOUT_CLASSIFICATION	4.1061954801792616E-4	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999824416337403	WITHOUT_CLASSIFICATION	1.7558366259691663E-5	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.999870222651412	WITHOUT_CLASSIFICATION	1.2977734858803745E-4	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999993543083796	WITHOUT_CLASSIFICATION	6.456916204602837E-7	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999903113854859	WITHOUT_CLASSIFICATION	9.688614514079765E-6	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.999931458087122	WITHOUT_CLASSIFICATION	6.85419128780549E-5	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999870809343957	WITHOUT_CLASSIFICATION	1.2919065604356162E-5	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999888536722553	WITHOUT_CLASSIFICATION	1.1146327744736376E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999824416337403	WITHOUT_CLASSIFICATION	1.7558366259691663E-5	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9993506146659251	WITHOUT_CLASSIFICATION	6.493853340748829E-4	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9997964607283222	WITHOUT_CLASSIFICATION	2.0353927167782475E-4	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9997964607283222	WITHOUT_CLASSIFICATION	2.0353927167782475E-4	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999514800317665	WITHOUT_CLASSIFICATION	4.851996823348585E-5	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999990768497036	WITHOUT_CLASSIFICATION	9.231502964446104E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999914018179864	WITHOUT_CLASSIFICATION	8.598182013550817E-6	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9972781608276151	WITHOUT_CLASSIFICATION	0.002721839172384866	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999871660276645	WITHOUT_CLASSIFICATION	1.2833972335436766E-5	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9994683510998719	WITHOUT_CLASSIFICATION	5.316489001281475E-4	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9999022423395868	WITHOUT_CLASSIFICATION	9.775766041323468E-5	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999988959937384	WITHOUT_CLASSIFICATION	1.1040062616757842E-6	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999928141587232	WITHOUT_CLASSIFICATION	7.185841276846639E-6	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999928141587232	WITHOUT_CLASSIFICATION	7.185841276846639E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999823273305589	WITHOUT_CLASSIFICATION	1.7672669441136876E-5	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999351007151667	WITHOUT_CLASSIFICATION	6.489928483333895E-5	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999940072461839	WITHOUT_CLASSIFICATION	5.992753816044325E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999711092202767	WITHOUT_CLASSIFICATION	2.8890779723306276E-5	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999939443890712	WITHOUT_CLASSIFICATION	6.0556109287169125E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999698388174426	WITHOUT_CLASSIFICATION	3.0161182557341028E-5	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999906015730202	WITHOUT_CLASSIFICATION	9.398426979773385E-6	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999951352545806	WITHOUT_CLASSIFICATION	4.864745419358062E-6	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999952912527252	WITHOUT_CLASSIFICATION	4.708747274821548E-6	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999950147948822	WITHOUT_CLASSIFICATION	4.985205117790861E-6	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9995867544264955	WITHOUT_CLASSIFICATION	4.132455735044534E-4	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999481223876879	WITHOUT_CLASSIFICATION	5.187761231211072E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.999889167055703	WITHOUT_CLASSIFICATION	1.1083294429698488E-4	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999939412149382	WITHOUT_CLASSIFICATION	6.058785061793926E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999959587362897	WITHOUT_CLASSIFICATION	4.041263710363569E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999863263642816	WITHOUT_CLASSIFICATION	1.3673635718221797E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999863263642816	WITHOUT_CLASSIFICATION	1.3673635718221797E-5	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999956886698438	WITHOUT_CLASSIFICATION	4.311330156254392E-6	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999967695902181	WITHOUT_CLASSIFICATION	3.2304097818664446E-6	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999923162337003	WITHOUT_CLASSIFICATION	7.683766299598587E-6	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999907933501893	WITHOUT_CLASSIFICATION	9.206649810743533E-6	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999929806328923	WITHOUT_CLASSIFICATION	7.0193671076664365E-6	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999995134147391	WITHOUT_CLASSIFICATION	4.865852608959365E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999955974537611	WITHOUT_CLASSIFICATION	4.402546238908603E-5	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999814444228727	WITHOUT_CLASSIFICATION	1.8555577127293707E-5	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999850325680942	WITHOUT_CLASSIFICATION	1.4967431905892555E-5	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999924167145482	WITHOUT_CLASSIFICATION	7.583285451786003E-6	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999987645460137	WITHOUT_CLASSIFICATION	1.2354539862908832E-6	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999819318088833	WITHOUT_CLASSIFICATION	1.8068191116687286E-5	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.999942440443032	WITHOUT_CLASSIFICATION	5.755955696794399E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999936014059361	WITHOUT_CLASSIFICATION	6.398594063865995E-6	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999987177636409	WITHOUT_CLASSIFICATION	1.2822363590812614E-6	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999865225421548	WITHOUT_CLASSIFICATION	1.3477457845112248E-5	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999485276458825	WITHOUT_CLASSIFICATION	5.14723541175789E-5	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999881406889561	WITHOUT_CLASSIFICATION	1.1859311043892604E-5	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999952072206137	WITHOUT_CLASSIFICATION	4.792779386248372E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999711092202767	WITHOUT_CLASSIFICATION	2.8890779723306276E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999711092202767	WITHOUT_CLASSIFICATION	2.8890779723306276E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999698388174426	WITHOUT_CLASSIFICATION	3.0161182557341028E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999698388174426	WITHOUT_CLASSIFICATION	3.0161182557341028E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.999889167055703	WITHOUT_CLASSIFICATION	1.1083294429698488E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999863263642816	WITHOUT_CLASSIFICATION	1.3673635718221797E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999936014059361	WITHOUT_CLASSIFICATION	6.398594063865995E-6	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998184085348	WITHOUT_CLASSIFICATION	1.815914651633E-7	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999892649068868	WITHOUT_CLASSIFICATION	1.0735093113327649E-5	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999931950693219	WITHOUT_CLASSIFICATION	6.804930678104752E-6	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999894498313467	WITHOUT_CLASSIFICATION	1.0550168653297129E-5	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999751028969126	WITHOUT_CLASSIFICATION	2.4897103087419734E-5	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999984513321499	WITHOUT_CLASSIFICATION	1.548667850086101E-6	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999144863938026	WITHOUT_CLASSIFICATION	8.55136061973723E-5	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9998567004368464	WITHOUT_CLASSIFICATION	1.4329956315359572E-4	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.999197774514593	WITHOUT_CLASSIFICATION	8.022254854068888E-4	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999996153790693	WITHOUT_CLASSIFICATION	3.846209305983185E-7	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999950330235918	WITHOUT_CLASSIFICATION	4.966976408215305E-6	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999950330235918	WITHOUT_CLASSIFICATION	4.966976408215305E-6	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999987010950543	WITHOUT_CLASSIFICATION	1.2989049457780517E-6	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999958041079526	WITHOUT_CLASSIFICATION	4.195892047390924E-6	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999986832760196	WITHOUT_CLASSIFICATION	1.3167239804223592E-6	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999783446424131	WITHOUT_CLASSIFICATION	2.1655357586885163E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999987478973629	WITHOUT_CLASSIFICATION	1.252102637164342E-6	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999809971678696	WITHOUT_CLASSIFICATION	1.9002832130499755E-5	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999891811233778	WITHOUT_CLASSIFICATION	1.0818876622383531E-5	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993551695732	WITHOUT_CLASSIFICATION	6.448304267825442E-7	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999306481391642	WITHOUT_CLASSIFICATION	6.935186083581299E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999966461002306	WITHOUT_CLASSIFICATION	3.353899769304848E-6	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999966461002306	WITHOUT_CLASSIFICATION	3.353899769304848E-6	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999984405114876	WITHOUT_CLASSIFICATION	1.5594885124602626E-6	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999956549220128	WITHOUT_CLASSIFICATION	4.345077987126127E-6	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999954303837678	WITHOUT_CLASSIFICATION	4.569616232209555E-6	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999995119641167	WITHOUT_CLASSIFICATION	4.880358832470807E-7	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999664286392596	WITHOUT_CLASSIFICATION	3.3571360740546803E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999698388174426	WITHOUT_CLASSIFICATION	3.0161182557341028E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.999889167055703	WITHOUT_CLASSIFICATION	1.1083294429698488E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999959587362897	WITHOUT_CLASSIFICATION	4.041263710363569E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999936014059361	WITHOUT_CLASSIFICATION	6.398594063865995E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999936014059361	WITHOUT_CLASSIFICATION	6.398594063865995E-6	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995490581164	WITHOUT_CLASSIFICATION	4.5094188358855686E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995490581164	WITHOUT_CLASSIFICATION	4.5094188358855686E-7	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999889216723205	WITHOUT_CLASSIFICATION	1.1078327679606303E-5	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999726915309702	WITHOUT_CLASSIFICATION	2.7308469029765825E-5	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999726915309702	WITHOUT_CLASSIFICATION	2.7308469029765825E-5	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999705142824861	WITHOUT_CLASSIFICATION	2.9485717513908117E-5	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999735019729253	WITHOUT_CLASSIFICATION	2.6498027074736034E-5	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999960463213129	WITHOUT_CLASSIFICATION	3.953678687142986E-6	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999848195465543	WITHOUT_CLASSIFICATION	1.5180453445761207E-5	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.999998049315837	WITHOUT_CLASSIFICATION	1.9506841629533828E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999723115508288	WITHOUT_CLASSIFICATION	2.7688449171224466E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999723115508288	WITHOUT_CLASSIFICATION	2.7688449171224466E-5	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9999149169537177	WITHOUT_CLASSIFICATION	8.508304628231438E-5	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999569555276038	WITHOUT_CLASSIFICATION	4.304447239619987E-5	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999762222488634	WITHOUT_CLASSIFICATION	2.377775113663773E-5	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999656444363598	WITHOUT_CLASSIFICATION	3.4355563640218875E-5	DEFECT
// char	WITHOUT_CLASSIFICATION	0.999989472793057	WITHOUT_CLASSIFICATION	1.0527206942968717E-5	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999484595366508	WITHOUT_CLASSIFICATION	5.154046334929334E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9998535480781218	WITHOUT_CLASSIFICATION	1.4645192187819235E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999175425205858	WITHOUT_CLASSIFICATION	8.2457479414107E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999175425205858	WITHOUT_CLASSIFICATION	8.2457479414107E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9995737640891582	WITHOUT_CLASSIFICATION	4.2623591084176753E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9995737640891582	WITHOUT_CLASSIFICATION	4.2623591084176753E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999851576267691	WITHOUT_CLASSIFICATION	1.4842373230756203E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999851576267691	WITHOUT_CLASSIFICATION	1.4842373230756203E-5	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999983539807896	WITHOUT_CLASSIFICATION	1.646019210454258E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999983539807896	WITHOUT_CLASSIFICATION	1.646019210454258E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999723115508288	WITHOUT_CLASSIFICATION	2.7688449171224466E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9998535480781218	WITHOUT_CLASSIFICATION	1.4645192187819235E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999175425205858	WITHOUT_CLASSIFICATION	8.2457479414107E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999175425205858	WITHOUT_CLASSIFICATION	8.2457479414107E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9995737640891582	WITHOUT_CLASSIFICATION	4.2623591084176753E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999851576267691	WITHOUT_CLASSIFICATION	1.4842373230756203E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999851576267691	WITHOUT_CLASSIFICATION	1.4842373230756203E-5	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999983539807896	WITHOUT_CLASSIFICATION	1.646019210454258E-6	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999913136186414	WITHOUT_CLASSIFICATION	8.686381358655236E-6	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999050785614831	WITHOUT_CLASSIFICATION	9.492143851687794E-5	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9997408274871601	WITHOUT_CLASSIFICATION	2.591725128399159E-4	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999911342072549	WITHOUT_CLASSIFICATION	8.86579274505699E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999793392727054	WITHOUT_CLASSIFICATION	2.0660727294594706E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9998898896463164	WITHOUT_CLASSIFICATION	1.1011035368367774E-4	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9968705683726529	WITHOUT_CLASSIFICATION	0.0031294316273471163	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9990646711746057	WITHOUT_CLASSIFICATION	9.353288253942695E-4	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9961635358512337	WITHOUT_CLASSIFICATION	0.0038364641487663802	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999779515790581	WITHOUT_CLASSIFICATION	2.2048420941861384E-5	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999990854138624	WITHOUT_CLASSIFICATION	9.145861375521876E-7	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999998200208899	WITHOUT_CLASSIFICATION	1.7997911002714407E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998584887477882	WITHOUT_CLASSIFICATION	1.4151125221173807E-4	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9998898896463164	WITHOUT_CLASSIFICATION	1.1011035368367774E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9980275361357157	WITHOUT_CLASSIFICATION	0.00197246386428423	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9980275361357157	WITHOUT_CLASSIFICATION	0.00197246386428423	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999949762145907	WITHOUT_CLASSIFICATION	5.02378540932607E-6	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999991982599924	WITHOUT_CLASSIFICATION	8.017400076060754E-6	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999991982599924	WITHOUT_CLASSIFICATION	8.017400076060754E-6	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.999539828731014	WITHOUT_CLASSIFICATION	4.601712689859128E-4	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999888961074147	WITHOUT_CLASSIFICATION	1.1103892585213585E-5	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999920930388437	WITHOUT_CLASSIFICATION	7.90696115639912E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999684776667099	WITHOUT_CLASSIFICATION	3.152233329016299E-5	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999684776667099	WITHOUT_CLASSIFICATION	3.152233329016299E-5	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999893855151605	WITHOUT_CLASSIFICATION	1.0614484839410497E-5	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9985237940511774	WITHOUT_CLASSIFICATION	0.0014762059488225186	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9985237940511774	WITHOUT_CLASSIFICATION	0.0014762059488225186	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999941445725984	WITHOUT_CLASSIFICATION	5.8554274015918936E-6	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999906837825039	WITHOUT_CLASSIFICATION	9.316217496047689E-6	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999901762561285	WITHOUT_CLASSIFICATION	9.823743871567517E-6	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998608027919638	WITHOUT_CLASSIFICATION	1.3919720803625739E-4	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999546602648146	WITHOUT_CLASSIFICATION	4.533973518547881E-5	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999478591007417	WITHOUT_CLASSIFICATION	5.214089925822971E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999862411704412	WITHOUT_CLASSIFICATION	1.3758829558765323E-5	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999246752364904	WITHOUT_CLASSIFICATION	7.532476350956689E-5	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.5835211286829751	WITHOUT_CLASSIFICATION	0.4164788713170249	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9998179667520223	WITHOUT_CLASSIFICATION	1.8203324797766714E-4	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9992316439493302	WITHOUT_CLASSIFICATION	7.683560506698356E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998481159830849	WITHOUT_CLASSIFICATION	1.5188401691504957E-4	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.999996785619091	WITHOUT_CLASSIFICATION	3.2143809089470005E-6	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999814474707	WITHOUT_CLASSIFICATION	1.8552529300045675E-5	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9997117143762496	WITHOUT_CLASSIFICATION	2.8828562375038326E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998481159830849	WITHOUT_CLASSIFICATION	1.5188401691504957E-4	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999992279838142	WITHOUT_CLASSIFICATION	7.72016185841815E-7	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999945288700797	WITHOUT_CLASSIFICATION	5.471129920308071E-6	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999341617102251	WITHOUT_CLASSIFICATION	6.583828977489309E-5	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9995150470231084	WITHOUT_CLASSIFICATION	4.849529768916384E-4	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999357126126727	WITHOUT_CLASSIFICATION	6.428738732735232E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999605581763078	WITHOUT_CLASSIFICATION	3.9441823692272386E-5	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999261617994759	WITHOUT_CLASSIFICATION	7.383820052403457E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999309754762433	WITHOUT_CLASSIFICATION	6.902452375668691E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999316867366849	WITHOUT_CLASSIFICATION	6.83132633150677E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999899818326704	WITHOUT_CLASSIFICATION	1.0018167329663312E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999604147859784	WITHOUT_CLASSIFICATION	3.9585214021570026E-5	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.999995537611747	WITHOUT_CLASSIFICATION	4.462388252967076E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999048945699348	WITHOUT_CLASSIFICATION	9.510543006508686E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999862411704412	WITHOUT_CLASSIFICATION	1.3758829558765323E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999316867366849	WITHOUT_CLASSIFICATION	6.83132633150677E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999604147859784	WITHOUT_CLASSIFICATION	3.9585214021570026E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999048945699348	WITHOUT_CLASSIFICATION	9.510543006508686E-5	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999961866508801	WITHOUT_CLASSIFICATION	3.813349119883258E-6	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9992175065573474	WITHOUT_CLASSIFICATION	7.824934426525499E-4	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999975047902971	WITHOUT_CLASSIFICATION	2.4952097027369162E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999875185383496	WITHOUT_CLASSIFICATION	1.2481461650403172E-4	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.999974473468081	WITHOUT_CLASSIFICATION	2.5526531918949248E-5	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999121142899701	WITHOUT_CLASSIFICATION	8.788571002993662E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9996892176652692	WITHOUT_CLASSIFICATION	3.1078233473081247E-4	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999651789418891	WITHOUT_CLASSIFICATION	3.4821058110872604E-5	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999569131457108	WITHOUT_CLASSIFICATION	4.3086854289198715E-5	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999996823585526	WITHOUT_CLASSIFICATION	3.176414473641974E-7	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999994103313497	WITHOUT_CLASSIFICATION	5.896686502942547E-6	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.999996037019061	WITHOUT_CLASSIFICATION	3.962980939025106E-6	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999918407728898	WITHOUT_CLASSIFICATION	8.159227110166928E-6	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999923980410171	WITHOUT_CLASSIFICATION	7.601958982923727E-6	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9998590952638697	WITHOUT_CLASSIFICATION	1.4090473613020998E-4	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999428840700304	WITHOUT_CLASSIFICATION	5.711592996955748E-5	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9996079638980172	WITHOUT_CLASSIFICATION	3.9203610198274295E-4	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999945620197411	WITHOUT_CLASSIFICATION	5.4379802589524E-6	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9998336935153241	WITHOUT_CLASSIFICATION	1.6630648467588468E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999316867366849	WITHOUT_CLASSIFICATION	6.83132633150677E-5	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999998896654449	WITHOUT_CLASSIFICATION	1.1033455510956542E-6	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999982735246137	WITHOUT_CLASSIFICATION	1.7264753863276181E-6	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999909223796353	WITHOUT_CLASSIFICATION	9.077620364813512E-6	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999989287714115	WITHOUT_CLASSIFICATION	1.0712285884502477E-6	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999994192601495	WITHOUT_CLASSIFICATION	5.807398505882962E-7	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9993004818089174	WITHOUT_CLASSIFICATION	6.995181910825243E-4	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999595510269862	WITHOUT_CLASSIFICATION	4.0448973013822275E-5	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999988487108715	WITHOUT_CLASSIFICATION	1.151289128550347E-6	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.999731642230618	WITHOUT_CLASSIFICATION	2.683577693820119E-4	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9997579733774704	WITHOUT_CLASSIFICATION	2.4202662252954422E-4	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999916592019664	WITHOUT_CLASSIFICATION	8.340798033595926E-5	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999083552974111	WITHOUT_CLASSIFICATION	9.164470258888631E-5	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999759688596026	WITHOUT_CLASSIFICATION	2.403114039745619E-5	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997992354597	WITHOUT_CLASSIFICATION	2.0076454037013287E-7	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999921150330677	WITHOUT_CLASSIFICATION	7.884966932246139E-6	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999231346045183	WITHOUT_CLASSIFICATION	7.686539548168045E-5	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9998942920540049	WITHOUT_CLASSIFICATION	1.057079459951823E-4	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999656210991373	WITHOUT_CLASSIFICATION	3.437890086271666E-5	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999924343300518	WITHOUT_CLASSIFICATION	7.565669948192256E-6	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999962014073037	WITHOUT_CLASSIFICATION	3.7985926962762243E-6	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999980967619	WITHOUT_CLASSIFICATION	1.9032380979980072E-8	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999714542985896	WITHOUT_CLASSIFICATION	2.8545701410443102E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999904737760028	WITHOUT_CLASSIFICATION	9.52622399721316E-6	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999221651248407	WITHOUT_CLASSIFICATION	7.783487515933252E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9996846231896497	WITHOUT_CLASSIFICATION	3.1537681035038393E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9996846231896497	WITHOUT_CLASSIFICATION	3.1537681035038393E-4	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999239145016947	WITHOUT_CLASSIFICATION	7.608549830534183E-5	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999975117442041	WITHOUT_CLASSIFICATION	2.488255795927608E-6	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999679670175231	WITHOUT_CLASSIFICATION	3.20329824768901E-5	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9998410777876855	WITHOUT_CLASSIFICATION	1.5892221231459105E-4	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998113365918754	WITHOUT_CLASSIFICATION	1.8866340812465565E-4	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.999781135035797	WITHOUT_CLASSIFICATION	2.1886496420307799E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998134416080706	WITHOUT_CLASSIFICATION	1.865583919294303E-4	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999608766269544	WITHOUT_CLASSIFICATION	3.9123373045561894E-5	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998490967144182	WITHOUT_CLASSIFICATION	1.5090328558170463E-4	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998563487059695	WITHOUT_CLASSIFICATION	1.436512940304082E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999236955421077	WITHOUT_CLASSIFICATION	7.630445789224342E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999826206368941	WITHOUT_CLASSIFICATION	1.7379363105939007E-5	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999810498569424	WITHOUT_CLASSIFICATION	1.8950143057620935E-5	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9994628651940792	WITHOUT_CLASSIFICATION	5.371348059206995E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856371745687	WITHOUT_CLASSIFICATION	1.4362825431193805E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808145634288	WITHOUT_CLASSIFICATION	1.9185436571200865E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999448421627064	WITHOUT_CLASSIFICATION	5.515783729354078E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999974366808629	WITHOUT_CLASSIFICATION	2.563319137172955E-6	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9995662367384995	WITHOUT_CLASSIFICATION	4.33763261500478E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999845730090595	WITHOUT_CLASSIFICATION	1.54269909404709E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9997959461817205	WITHOUT_CLASSIFICATION	2.040538182794255E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9997959461817205	WITHOUT_CLASSIFICATION	2.040538182794255E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9998471809576204	WITHOUT_CLASSIFICATION	1.52819042379525E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9998471809576204	WITHOUT_CLASSIFICATION	1.52819042379525E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999904737760028	WITHOUT_CLASSIFICATION	9.52622399721316E-6	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999726781193207	WITHOUT_CLASSIFICATION	2.7321880679312047E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998561427955998	WITHOUT_CLASSIFICATION	1.4385720440033675E-4	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999961009444629	WITHOUT_CLASSIFICATION	3.899055537177159E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999823273305589	WITHOUT_CLASSIFICATION	1.7672669441136876E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998561427955998	WITHOUT_CLASSIFICATION	1.4385720440033675E-4	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999961009444629	WITHOUT_CLASSIFICATION	3.899055537177159E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999930653960144	WITHOUT_CLASSIFICATION	6.934603985700338E-6	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999788795968036	WITHOUT_CLASSIFICATION	2.112040319632602E-5	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999335194490822	WITHOUT_CLASSIFICATION	6.648055091782196E-5	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999855312050018	WITHOUT_CLASSIFICATION	1.4468794998294813E-5	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9993491922285879	WITHOUT_CLASSIFICATION	6.508077714121651E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9994254670896866	WITHOUT_CLASSIFICATION	5.745329103134149E-4	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999955523692965	WITHOUT_CLASSIFICATION	4.447630703488806E-6	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999751289195307	WITHOUT_CLASSIFICATION	2.487108046930233E-5	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9989031211886376	WITHOUT_CLASSIFICATION	0.001096878811362444	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999948923439639	WITHOUT_CLASSIFICATION	5.107656036111461E-6	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.99996106645329	WITHOUT_CLASSIFICATION	3.893354670999176E-5	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999984191664968	WITHOUT_CLASSIFICATION	1.580833503218829E-6	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999993977548971	WITHOUT_CLASSIFICATION	6.022451028321315E-7	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999962762892411	WITHOUT_CLASSIFICATION	3.723710758948049E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999823273305589	WITHOUT_CLASSIFICATION	1.7672669441136876E-5	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999958811113595	WITHOUT_CLASSIFICATION	4.118888640428367E-6	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999393808874603	WITHOUT_CLASSIFICATION	6.061911253975416E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999393808874603	WITHOUT_CLASSIFICATION	6.061911253975416E-5	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999618135263575	WITHOUT_CLASSIFICATION	3.81864736424777E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999930653960144	WITHOUT_CLASSIFICATION	6.934603985700338E-6	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999215146580703	WITHOUT_CLASSIFICATION	7.84853419296093E-5	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999430619518431	WITHOUT_CLASSIFICATION	5.693804815686E-5	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999793185296294	WITHOUT_CLASSIFICATION	2.0681470370591066E-5	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9986522830204155	WITHOUT_CLASSIFICATION	0.0013477169795845392	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9975707170662041	WITHOUT_CLASSIFICATION	0.0024292829337958415	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999930653960144	WITHOUT_CLASSIFICATION	6.934603985700338E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9986522830204155	WITHOUT_CLASSIFICATION	0.0013477169795845392	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9975707170662041	WITHOUT_CLASSIFICATION	0.0024292829337958415	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999704870608772	WITHOUT_CLASSIFICATION	2.9512939122692604E-5	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.999966338364469	WITHOUT_CLASSIFICATION	3.366163553105781E-5	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999004338923193	WITHOUT_CLASSIFICATION	9.956610768069847E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999930653960144	WITHOUT_CLASSIFICATION	6.934603985700338E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999930653960144	WITHOUT_CLASSIFICATION	6.934603985700338E-6	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999703367569345	WITHOUT_CLASSIFICATION	2.966324306555143E-5	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999812981457431	WITHOUT_CLASSIFICATION	1.8701854256861442E-5	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9998602841645341	WITHOUT_CLASSIFICATION	1.3971583546591927E-4	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999957422334568	WITHOUT_CLASSIFICATION	4.257766543275525E-6	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999700510672015	WITHOUT_CLASSIFICATION	2.9948932798583813E-5	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999981601156703	WITHOUT_CLASSIFICATION	1.8398843297664856E-6	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999938933242685	WITHOUT_CLASSIFICATION	6.106675731539789E-6	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999984254840923	WITHOUT_CLASSIFICATION	1.5745159077479715E-6	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999324414311633	WITHOUT_CLASSIFICATION	6.75585688366777E-5	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9998717201178572	WITHOUT_CLASSIFICATION	1.2827988214283225E-4	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999354264158039	WITHOUT_CLASSIFICATION	6.457358419607229E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999863045099463	WITHOUT_CLASSIFICATION	1.3695490053699052E-4	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999984054077502	WITHOUT_CLASSIFICATION	1.5945922497881323E-6	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999942511091352	WITHOUT_CLASSIFICATION	5.748890864828985E-6	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998527850574599	WITHOUT_CLASSIFICATION	1.4721494254012898E-4	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999295280315309	WITHOUT_CLASSIFICATION	7.047196846904426E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999713105632675	WITHOUT_CLASSIFICATION	2.8689436732598354E-5	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999445532274225	WITHOUT_CLASSIFICATION	5.544677257752503E-5	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9991685551869277	WITHOUT_CLASSIFICATION	8.314448130722589E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999973787143104	WITHOUT_CLASSIFICATION	2.621285689676672E-6	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9996512089685864	WITHOUT_CLASSIFICATION	3.487910314136489E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998291897355025	WITHOUT_CLASSIFICATION	1.7081026449757464E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998291897355025	WITHOUT_CLASSIFICATION	1.7081026449757464E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999713105632675	WITHOUT_CLASSIFICATION	2.8689436732598354E-5	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9998156942130569	WITHOUT_CLASSIFICATION	1.8430578694311707E-4	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999380336595989	WITHOUT_CLASSIFICATION	6.196634040117297E-5	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998349100666927	WITHOUT_CLASSIFICATION	1.650899333072091E-4	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9998861907521748	WITHOUT_CLASSIFICATION	1.138092478252947E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9989841996834735	WITHOUT_CLASSIFICATION	0.0010158003165264362	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999873777779681	WITHOUT_CLASSIFICATION	1.2622222031868704E-5	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9986691432079398	WITHOUT_CLASSIFICATION	0.0013308567920602664	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999998206436808	WITHOUT_CLASSIFICATION	1.793563191318561E-7	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999990426008306	WITHOUT_CLASSIFICATION	9.573991694039278E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580894544174	WITHOUT_CLASSIFICATION	4.1910545582571014E-5	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999903713264381	WITHOUT_CLASSIFICATION	9.628673561833923E-6	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999201536199259	WITHOUT_CLASSIFICATION	7.984638007403634E-5	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999719188704304	WITHOUT_CLASSIFICATION	2.808112956960891E-5	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998737521853546	WITHOUT_CLASSIFICATION	1.2624781464542375E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999989863868076	WITHOUT_CLASSIFICATION	1.0136131923908196E-6	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999265614175578	WITHOUT_CLASSIFICATION	7.343858244226847E-5	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999527035247495	WITHOUT_CLASSIFICATION	4.7296475250445276E-5	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999384747944781	WITHOUT_CLASSIFICATION	6.152520552188563E-5	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999939416998791	WITHOUT_CLASSIFICATION	6.0583001209866685E-6	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926567960423	WITHOUT_CLASSIFICATION	7.343203957684235E-6	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999976205638889	WITHOUT_CLASSIFICATION	2.3794361111368173E-6	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999996216121733	WITHOUT_CLASSIFICATION	3.78387826706876E-6	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999856674152435	WITHOUT_CLASSIFICATION	1.4332584756577477E-5	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999969428434176	WITHOUT_CLASSIFICATION	3.057156582393631E-5	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999827522177983	WITHOUT_CLASSIFICATION	1.7247782201700505E-5	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999310407409919	WITHOUT_CLASSIFICATION	6.89592590080522E-5	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968741017541	WITHOUT_CLASSIFICATION	3.125898245911862E-5	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998691029859308	WITHOUT_CLASSIFICATION	1.3089701406924495E-4	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999639334015487	WITHOUT_CLASSIFICATION	3.606659845130909E-5	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999354870284293	WITHOUT_CLASSIFICATION	6.451297157081909E-5	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894621921493	WITHOUT_CLASSIFICATION	1.0537807850643701E-5	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999915039758064	WITHOUT_CLASSIFICATION	8.496024193613279E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999978833389485	WITHOUT_CLASSIFICATION	2.1166610514989133E-5	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999842085143441	WITHOUT_CLASSIFICATION	1.5791485655816613E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945874509594	WITHOUT_CLASSIFICATION	5.412549040633105E-6	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956023029317	WITHOUT_CLASSIFICATION	4.397697068282278E-6	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999820296843351	WITHOUT_CLASSIFICATION	1.797031566488055E-5	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579303303627	WITHOUT_CLASSIFICATION	4.206966963724675E-5	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967790401827	WITHOUT_CLASSIFICATION	3.2209598173780066E-6	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999711622986466	WITHOUT_CLASSIFICATION	2.8837701353528956E-5	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999446312624931	WITHOUT_CLASSIFICATION	5.536873750686394E-5	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9996975102214452	WITHOUT_CLASSIFICATION	3.024897785548196E-4	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401826608962	WITHOUT_CLASSIFICATION	5.981733910388759E-5	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9987198345384813	WITHOUT_CLASSIFICATION	0.0012801654615185877	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997611537417582	WITHOUT_CLASSIFICATION	2.3884625824183487E-4	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999874938048084	WITHOUT_CLASSIFICATION	1.2506195191468808E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999768701025626	WITHOUT_CLASSIFICATION	2.3129897437301232E-5	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9999206425388724	WITHOUT_CLASSIFICATION	7.935746112766717E-5	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999456162676269	WITHOUT_CLASSIFICATION	5.438373237302089E-5	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.999989292678629	WITHOUT_CLASSIFICATION	1.0707321371046298E-5	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999980790362891	WITHOUT_CLASSIFICATION	1.920963710898791E-5	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9998465409955642	WITHOUT_CLASSIFICATION	1.5345900443571557E-4	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9996813656825616	WITHOUT_CLASSIFICATION	3.1863431743837055E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580894544174	WITHOUT_CLASSIFICATION	4.1910545582571014E-5	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999285223385661	WITHOUT_CLASSIFICATION	7.147766143382398E-5	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999360247699582	WITHOUT_CLASSIFICATION	6.397523004180415E-5	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999974538372872	WITHOUT_CLASSIFICATION	2.5461627127811847E-6	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9995651911248846	WITHOUT_CLASSIFICATION	4.3480887511544746E-4	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9997156739107824	WITHOUT_CLASSIFICATION	2.84326089217551E-4	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.999961341557102	WITHOUT_CLASSIFICATION	3.8658442897961065E-5	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999716342785983	WITHOUT_CLASSIFICATION	2.8365721401699218E-5	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999803553426732	WITHOUT_CLASSIFICATION	1.964465732676013E-5	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999206758393167	WITHOUT_CLASSIFICATION	7.93241606833836E-5	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999167524242957	WITHOUT_CLASSIFICATION	8.324757570442639E-5	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998904493360317	WITHOUT_CLASSIFICATION	1.0955066396842009E-4	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999589935378235	WITHOUT_CLASSIFICATION	4.10064621765042E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999919545801675	WITHOUT_CLASSIFICATION	8.04541983255772E-6	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999953067086237	WITHOUT_CLASSIFICATION	4.693291376307745E-6	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999719696900936	WITHOUT_CLASSIFICATION	2.8030309906343698E-5	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990989106577	WITHOUT_CLASSIFICATION	9.010893423090702E-7	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999961536563097	WITHOUT_CLASSIFICATION	3.846343690352312E-6	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999217179923425	WITHOUT_CLASSIFICATION	7.828200765749209E-5	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999979477925934	WITHOUT_CLASSIFICATION	2.0522074065201185E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999749805917507	WITHOUT_CLASSIFICATION	2.5019408249385512E-5	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999962106937806	WITHOUT_CLASSIFICATION	3.7893062194666708E-6	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999976249603265	WITHOUT_CLASSIFICATION	2.375039673384666E-6	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.999798730014845	WITHOUT_CLASSIFICATION	2.0126998515491588E-4	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999957044651214	WITHOUT_CLASSIFICATION	4.295534878605872E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580894544174	WITHOUT_CLASSIFICATION	4.1910545582571014E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999768701025626	WITHOUT_CLASSIFICATION	2.3129897437301232E-5	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999986788999173	WITHOUT_CLASSIFICATION	1.3211000826375414E-6	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999461696311315	WITHOUT_CLASSIFICATION	5.383036886845375E-5	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999981440196615	WITHOUT_CLASSIFICATION	1.8559803385092982E-5	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996312988954559	WITHOUT_CLASSIFICATION	3.6870110454404365E-4	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999849129484284	WITHOUT_CLASSIFICATION	1.5087051571582047E-5	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999867837273116	WITHOUT_CLASSIFICATION	1.3216272688315594E-5	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9997814198061066	WITHOUT_CLASSIFICATION	2.185801938934415E-4	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999810175165074	WITHOUT_CLASSIFICATION	1.898248349273746E-5	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999610299711842	WITHOUT_CLASSIFICATION	3.897002881583726E-5	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999817750601123	WITHOUT_CLASSIFICATION	1.8224939887694553E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999989472876853	WITHOUT_CLASSIFICATION	1.0527123147013712E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999883277553128	WITHOUT_CLASSIFICATION	1.1672244687182153E-5	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999991707008201	WITHOUT_CLASSIFICATION	8.292991799292746E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580894544174	WITHOUT_CLASSIFICATION	4.1910545582571014E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580894544174	WITHOUT_CLASSIFICATION	4.1910545582571014E-5	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999856995374025	WITHOUT_CLASSIFICATION	1.4300462597546575E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999525238566518	WITHOUT_CLASSIFICATION	4.74761433481206E-5	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999928802966166	WITHOUT_CLASSIFICATION	7.119703383353551E-6	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999759104855845	WITHOUT_CLASSIFICATION	2.4089514415399684E-5	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993065174586894	WITHOUT_CLASSIFICATION	6.934825413106983E-4	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999992112064044	WITHOUT_CLASSIFICATION	7.887935955949655E-7	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999872526127144	WITHOUT_CLASSIFICATION	1.2747387285738888E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580894544174	WITHOUT_CLASSIFICATION	4.1910545582571014E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999996263065532	WITHOUT_CLASSIFICATION	3.7369344679437264E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999882093399904	WITHOUT_CLASSIFICATION	1.1790660009491668E-5	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999885245964882	WITHOUT_CLASSIFICATION	1.147540351179803E-4	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999389376920081	WITHOUT_CLASSIFICATION	6.106230799193676E-5	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999399004453962	WITHOUT_CLASSIFICATION	6.009955460384946E-5	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999960705152287	WITHOUT_CLASSIFICATION	3.929484771351287E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9966429246594555	WITHOUT_CLASSIFICATION	0.0033570753405445307	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999142661562863	WITHOUT_CLASSIFICATION	8.573384371360828E-5	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999089621833814	WITHOUT_CLASSIFICATION	9.103781661861945E-5	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997955879089818	WITHOUT_CLASSIFICATION	2.0441209101811775E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999768701025626	WITHOUT_CLASSIFICATION	2.3129897437301232E-5	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9997648314942519	WITHOUT_CLASSIFICATION	2.351685057480012E-4	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999998875127597	WITHOUT_CLASSIFICATION	1.1248724033245782E-7	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9996944492884523	WITHOUT_CLASSIFICATION	3.055507115476734E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999768701025626	WITHOUT_CLASSIFICATION	2.3129897437301232E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999972544987836	WITHOUT_CLASSIFICATION	2.7455012164265073E-6	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999996263065532	WITHOUT_CLASSIFICATION	3.7369344679437264E-6	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999821964050092	WITHOUT_CLASSIFICATION	1.780359499076478E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580894544174	WITHOUT_CLASSIFICATION	4.1910545582571014E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998071612616505	WITHOUT_CLASSIFICATION	1.9283873834946861E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580894544174	WITHOUT_CLASSIFICATION	4.1910545582571014E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999929881682608	WITHOUT_CLASSIFICATION	7.011831739193302E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999817750601123	WITHOUT_CLASSIFICATION	1.8224939887694553E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999989472876853	WITHOUT_CLASSIFICATION	1.0527123147013712E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999883277553128	WITHOUT_CLASSIFICATION	1.1672244687182153E-5	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999859583047918	WITHOUT_CLASSIFICATION	1.4041695208151605E-5	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.999970225187521	WITHOUT_CLASSIFICATION	2.9774812479110537E-5	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9998573482285132	WITHOUT_CLASSIFICATION	1.4265177148678221E-4	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9996977957609472	WITHOUT_CLASSIFICATION	3.022042390527519E-4	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9996590020657293	WITHOUT_CLASSIFICATION	3.4099793427063866E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580894544174	WITHOUT_CLASSIFICATION	4.1910545582571014E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999768701025626	WITHOUT_CLASSIFICATION	2.3129897437301232E-5	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999991707008201	WITHOUT_CLASSIFICATION	8.292991799292746E-7	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999856995374025	WITHOUT_CLASSIFICATION	1.4300462597546575E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912536157566	WITHOUT_CLASSIFICATION	8.746384243329136E-6	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999217813078783	WITHOUT_CLASSIFICATION	7.821869212156616E-5	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999945596546824	WITHOUT_CLASSIFICATION	5.440345317555177E-6	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999796891907015	WITHOUT_CLASSIFICATION	2.0310809298656455E-5	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999951253018691	WITHOUT_CLASSIFICATION	4.874698131005334E-6	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999945963820787	WITHOUT_CLASSIFICATION	5.403617921281597E-6	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999446312624931	WITHOUT_CLASSIFICATION	5.536873750686394E-5	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999092977578711	WITHOUT_CLASSIFICATION	9.070224212900204E-5	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999957707757575	WITHOUT_CLASSIFICATION	4.229224242459407E-6	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.999993787794953	WITHOUT_CLASSIFICATION	6.21220504700809E-6	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9998281325099926	WITHOUT_CLASSIFICATION	1.718674900073525E-4	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999986242655042	WITHOUT_CLASSIFICATION	1.3757344957137698E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998691029859308	WITHOUT_CLASSIFICATION	1.3089701406924495E-4	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999639334015487	WITHOUT_CLASSIFICATION	3.606659845130909E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945874509594	WITHOUT_CLASSIFICATION	5.412549040633105E-6	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999986242655042	WITHOUT_CLASSIFICATION	1.3757344957137698E-6	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9998408215487592	WITHOUT_CLASSIFICATION	1.5917845124078107E-4	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999886852941356	WITHOUT_CLASSIFICATION	1.1314705864443525E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999125301319237	WITHOUT_CLASSIFICATION	8.746986807634511E-5	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998510926879324	WITHOUT_CLASSIFICATION	1.489073120676093E-4	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.999979059144113	WITHOUT_CLASSIFICATION	2.0940855886999687E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580894544174	WITHOUT_CLASSIFICATION	4.1910545582571014E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580894544174	WITHOUT_CLASSIFICATION	4.1910545582571014E-5	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9997718331702622	WITHOUT_CLASSIFICATION	2.2816682973776469E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956023029317	WITHOUT_CLASSIFICATION	4.397697068282278E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967790401827	WITHOUT_CLASSIFICATION	3.2209598173780066E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999749805917507	WITHOUT_CLASSIFICATION	2.5019408249385512E-5	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999836929429637	WITHOUT_CLASSIFICATION	1.6307057036292188E-5	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999981450070375	WITHOUT_CLASSIFICATION	1.8549929625238817E-6	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9997262892008278	WITHOUT_CLASSIFICATION	2.737107991721573E-4	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999969791724699	WITHOUT_CLASSIFICATION	3.0208275301543943E-6	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9998900812522782	WITHOUT_CLASSIFICATION	1.0991874772188915E-4	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999964431310703	WITHOUT_CLASSIFICATION	3.5568689297288617E-6	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999607793762548	WITHOUT_CLASSIFICATION	3.922062374519818E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997762500508587	WITHOUT_CLASSIFICATION	2.2374994914130331E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999990426008306	WITHOUT_CLASSIFICATION	9.573991694039278E-7	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999395538019458	WITHOUT_CLASSIFICATION	6.0446198054204205E-5	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999087223892045	WITHOUT_CLASSIFICATION	9.127761079554552E-5	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999898266591348	WITHOUT_CLASSIFICATION	1.0173340865093567E-5	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999520687245722	WITHOUT_CLASSIFICATION	4.7931275427697196E-5	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999938466689235	WITHOUT_CLASSIFICATION	6.15333107648694E-6	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9997825694995482	WITHOUT_CLASSIFICATION	2.1743050045183363E-4	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850995318762	WITHOUT_CLASSIFICATION	1.490046812377107E-5	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929259463433	WITHOUT_CLASSIFICATION	7.074053656735984E-6	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999544371647	WITHOUT_CLASSIFICATION	4.5562835305839685E-7	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999961837682021	WITHOUT_CLASSIFICATION	3.816231797896008E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.999934123804197	WITHOUT_CLASSIFICATION	6.587619580304292E-5	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999906941173307	WITHOUT_CLASSIFICATION	9.305882669428628E-6	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999942397946997	WITHOUT_CLASSIFICATION	5.760205300360613E-6	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999878057792432	WITHOUT_CLASSIFICATION	1.2194220756900826E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999991029909207	WITHOUT_CLASSIFICATION	8.970090793049647E-6	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999996452881977	WITHOUT_CLASSIFICATION	3.5471180228920598E-6	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999968760326108	WITHOUT_CLASSIFICATION	3.1239673893381794E-6	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999933789634594	WITHOUT_CLASSIFICATION	6.621036540666856E-6	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999744067664888	WITHOUT_CLASSIFICATION	2.559323351119783E-4	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995925138626	WITHOUT_CLASSIFICATION	4.074861374356233E-7	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848523802466	WITHOUT_CLASSIFICATION	1.5147619753411614E-5	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999993254362619	WITHOUT_CLASSIFICATION	6.7456373811063215E-6	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.999993795140441	WITHOUT_CLASSIFICATION	6.204859559126898E-6	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999582501870914	WITHOUT_CLASSIFICATION	4.1749812908642354E-5	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.999915426521678	WITHOUT_CLASSIFICATION	8.457347832207541E-5	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999545608635776	WITHOUT_CLASSIFICATION	4.5439136422508466E-5	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999657207321418	WITHOUT_CLASSIFICATION	3.4279267858078865E-5	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999958345570233	WITHOUT_CLASSIFICATION	4.1654429766467435E-6	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999845304505292	WITHOUT_CLASSIFICATION	1.546954947091054E-5	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998803149236294	WITHOUT_CLASSIFICATION	1.1968507637057979E-4	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999987638980274	WITHOUT_CLASSIFICATION	1.236101972501898E-6	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9998996812109316	WITHOUT_CLASSIFICATION	1.0031878906838534E-4	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9998584016782754	WITHOUT_CLASSIFICATION	1.4159832172446992E-4	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999760758822223	WITHOUT_CLASSIFICATION	2.392411777773246E-5	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999809148006165	WITHOUT_CLASSIFICATION	1.9085199383543134E-5	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999896495465119	WITHOUT_CLASSIFICATION	1.0350453488081508E-5	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999931202765517	WITHOUT_CLASSIFICATION	6.879723448286339E-6	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999789217629611	WITHOUT_CLASSIFICATION	2.1078237038876744E-5	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999944678268826	WITHOUT_CLASSIFICATION	5.532173117424063E-6	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999997652243567	WITHOUT_CLASSIFICATION	2.347756433091073E-6	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999882340116366	WITHOUT_CLASSIFICATION	1.1765988363462889E-5	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9996810932202082	WITHOUT_CLASSIFICATION	3.189067797918358E-4	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9992979434135185	WITHOUT_CLASSIFICATION	7.020565864814576E-4	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999895667611892	WITHOUT_CLASSIFICATION	1.0433238810803276E-5	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9998745022187102	WITHOUT_CLASSIFICATION	1.254977812898066E-4	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999949245507362	WITHOUT_CLASSIFICATION	5.075449263715546E-6	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999973203767509	WITHOUT_CLASSIFICATION	2.679623248988417E-6	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999960703468777	WITHOUT_CLASSIFICATION	3.92965312233194E-6	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999616853363376	WITHOUT_CLASSIFICATION	3.831466366251837E-5	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999070678634353	WITHOUT_CLASSIFICATION	9.293213656467921E-5	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999997143325503	WITHOUT_CLASSIFICATION	2.856674496895602E-6	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999972287823028	WITHOUT_CLASSIFICATION	2.7712176970636723E-6	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999917802184927	WITHOUT_CLASSIFICATION	8.219781507419534E-6	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9996902421475243	WITHOUT_CLASSIFICATION	3.097578524757433E-4	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9996873631138984	WITHOUT_CLASSIFICATION	3.126368861016071E-4	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9997392444137794	WITHOUT_CLASSIFICATION	2.6075558622058146E-4	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.999964186143771	WITHOUT_CLASSIFICATION	3.58138562288511E-5	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999939693924126	WITHOUT_CLASSIFICATION	6.030607587317775E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999615123455479	WITHOUT_CLASSIFICATION	3.8487654452210265E-5	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999858268413172	WITHOUT_CLASSIFICATION	1.4173158682749134E-5	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999477971074502	WITHOUT_CLASSIFICATION	5.220289254991004E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998732268788989	WITHOUT_CLASSIFICATION	1.2677312110114208E-4	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.999975367341825	WITHOUT_CLASSIFICATION	2.463265817494143E-5	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.999685340850425	WITHOUT_CLASSIFICATION	3.1465914957493546E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999791641105711	WITHOUT_CLASSIFICATION	2.083588942893098E-5	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9976757931186976	WITHOUT_CLASSIFICATION	0.002324206881302473	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9998506460696781	WITHOUT_CLASSIFICATION	1.4935393032198467E-4	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9995480868374368	WITHOUT_CLASSIFICATION	4.519131625631867E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999543646514608	WITHOUT_CLASSIFICATION	4.563534853924574E-5	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999674571152455	WITHOUT_CLASSIFICATION	3.254288475456251E-5	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999966155924714	WITHOUT_CLASSIFICATION	3.3844075284418614E-6	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999987308983893	WITHOUT_CLASSIFICATION	1.2691016107921464E-6	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999847852523182	WITHOUT_CLASSIFICATION	1.5214747681965632E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999794261394499	WITHOUT_CLASSIFICATION	2.057386055002623E-5	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999909797549359	WITHOUT_CLASSIFICATION	9.020245064134582E-6	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999212136856427	WITHOUT_CLASSIFICATION	7.878631435722986E-5	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999932838615508	WITHOUT_CLASSIFICATION	6.716138449103467E-6	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9998470501463721	WITHOUT_CLASSIFICATION	1.5294985362787657E-4	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9992780066620941	WITHOUT_CLASSIFICATION	7.219933379058552E-4	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9996210916289809	WITHOUT_CLASSIFICATION	3.7890837101904346E-4	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999479719526723	WITHOUT_CLASSIFICATION	5.2028047327791545E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999824452718782	WITHOUT_CLASSIFICATION	1.7554728121919337E-5	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.999983627980111	WITHOUT_CLASSIFICATION	1.6372019888980005E-5	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999895437440937	WITHOUT_CLASSIFICATION	1.0456255906370238E-5	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9995746011831395	WITHOUT_CLASSIFICATION	4.25398816860546E-4	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999328018680578	WITHOUT_CLASSIFICATION	6.719813194215321E-5	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998927531536064	WITHOUT_CLASSIFICATION	1.0724684639362273E-4	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999166377646743	WITHOUT_CLASSIFICATION	8.336223532567657E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999655540445338	WITHOUT_CLASSIFICATION	3.444595546628015E-5	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999943295316703	WITHOUT_CLASSIFICATION	5.6704683297394114E-6	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9998493659438624	WITHOUT_CLASSIFICATION	1.5063405613755722E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.999596601923686	WITHOUT_CLASSIFICATION	4.033980763139329E-4	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999990352628252	WITHOUT_CLASSIFICATION	9.64737174745982E-7	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9998493659438624	WITHOUT_CLASSIFICATION	1.5063405613755722E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999929811507153	WITHOUT_CLASSIFICATION	7.018849284589431E-6	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999885265824735	WITHOUT_CLASSIFICATION	1.1473417526502936E-5	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999832703754017	WITHOUT_CLASSIFICATION	1.672962459828984E-5	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999068599438693	WITHOUT_CLASSIFICATION	9.314005613074081E-5	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999957832045192	WITHOUT_CLASSIFICATION	4.216795480783559E-6	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999969750538136	WITHOUT_CLASSIFICATION	3.024946186454837E-6	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998367598131035	WITHOUT_CLASSIFICATION	1.6324018689647086E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999972236882241	WITHOUT_CLASSIFICATION	2.7763117759726827E-6	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999826844604617	WITHOUT_CLASSIFICATION	1.7315539538259945E-5	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999672801409911	WITHOUT_CLASSIFICATION	3.271985900890936E-5	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999559044441455	WITHOUT_CLASSIFICATION	4.409555585439875E-5	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9996573429351147	WITHOUT_CLASSIFICATION	3.426570648852873E-4	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999981065621906	WITHOUT_CLASSIFICATION	1.8934378094111716E-6	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999994451490891	WITHOUT_CLASSIFICATION	5.548509108287714E-7	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999626098866525	WITHOUT_CLASSIFICATION	3.739011334745527E-5	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999895458244841	WITHOUT_CLASSIFICATION	1.0454175515931513E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998534628370536	WITHOUT_CLASSIFICATION	1.4653716294635964E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998534628370536	WITHOUT_CLASSIFICATION	1.4653716294635964E-4	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999917286711874	WITHOUT_CLASSIFICATION	8.271328812598269E-5	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9981360969603293	WITHOUT_CLASSIFICATION	0.0018639030396706458	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9987080371174974	WITHOUT_CLASSIFICATION	0.0012919628825024433	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998605988888604	WITHOUT_CLASSIFICATION	1.3940111113960223E-4	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999940121627494	WITHOUT_CLASSIFICATION	5.987837250659243E-6	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9468850161790914	WITHOUT_CLASSIFICATION	0.05311498382090858	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9992561580730136	WITHOUT_CLASSIFICATION	7.438419269862939E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999991341005358	WITHOUT_CLASSIFICATION	8.658994641185182E-7	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999678364445197	WITHOUT_CLASSIFICATION	3.2163555480199236E-5	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9983379346747446	WITHOUT_CLASSIFICATION	0.0016620653252553106	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999801940303674	WITHOUT_CLASSIFICATION	1.9805969632573114E-5	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999945187095756	WITHOUT_CLASSIFICATION	5.481290424401527E-5	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999788797945695	WITHOUT_CLASSIFICATION	2.112020543050133E-5	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999987649544683	WITHOUT_CLASSIFICATION	1.2350455316949436E-5	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999869870430966	WITHOUT_CLASSIFICATION	1.3012956903350483E-5	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9997825694995482	WITHOUT_CLASSIFICATION	2.1743050045183363E-4	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999700261145292	WITHOUT_CLASSIFICATION	2.9973885470832757E-5	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999415875376414	WITHOUT_CLASSIFICATION	5.841246235861265E-5	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9987866095535888	WITHOUT_CLASSIFICATION	0.0012133904464112655	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9998964564589937	WITHOUT_CLASSIFICATION	1.0354354100622573E-4	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999982771769251	WITHOUT_CLASSIFICATION	1.7228230749027975E-6	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9998962110007528	WITHOUT_CLASSIFICATION	1.037889992471415E-4	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999919486487633	WITHOUT_CLASSIFICATION	8.051351236738975E-6	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999842060222757	WITHOUT_CLASSIFICATION	1.5793977724344282E-5	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999972811216109	WITHOUT_CLASSIFICATION	2.718878388959824E-6	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999967095829995	WITHOUT_CLASSIFICATION	3.2904170005282484E-6	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999953413348529	WITHOUT_CLASSIFICATION	4.658665147120726E-6	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999575961263046	WITHOUT_CLASSIFICATION	4.2403873695433594E-5	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999973384059219	WITHOUT_CLASSIFICATION	2.6615940781470453E-6	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9996022597092972	WITHOUT_CLASSIFICATION	3.977402907028603E-4	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999843583867418	WITHOUT_CLASSIFICATION	1.564161325821386E-5	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999037095898167	WITHOUT_CLASSIFICATION	9.629041018344091E-5	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9976047013308472	WITHOUT_CLASSIFICATION	0.002395298669152657	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9997713495082018	WITHOUT_CLASSIFICATION	2.2865049179824845E-4	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9998477150930386	WITHOUT_CLASSIFICATION	1.5228490696133007E-4	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999763222930418	WITHOUT_CLASSIFICATION	2.3677706958153724E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999839041180318	WITHOUT_CLASSIFICATION	1.6095881968182797E-5	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998544413258912	WITHOUT_CLASSIFICATION	1.4555867410875412E-4	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999972891351077	WITHOUT_CLASSIFICATION	2.710864892389859E-6	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999340619876691	WITHOUT_CLASSIFICATION	6.593801233089765E-5	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999813629267476	WITHOUT_CLASSIFICATION	1.863707325242813E-5	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999768145119449	WITHOUT_CLASSIFICATION	2.3185488055138952E-5	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999920760900597	WITHOUT_CLASSIFICATION	7.923909940341868E-6	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999781143311925	WITHOUT_CLASSIFICATION	2.1885668807439787E-5	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9998893062885017	WITHOUT_CLASSIFICATION	1.1069371149830749E-4	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999690717053253	WITHOUT_CLASSIFICATION	3.0928294674717555E-5	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999967672745895	WITHOUT_CLASSIFICATION	3.232725410501755E-5	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999368478119063	WITHOUT_CLASSIFICATION	6.315218809376608E-5	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805118749786	WITHOUT_CLASSIFICATION	1.9488125021424278E-5	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999695933675792	WITHOUT_CLASSIFICATION	3.0406632420903796E-5	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999838752825678	WITHOUT_CLASSIFICATION	1.6124717432199393E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997762500508587	WITHOUT_CLASSIFICATION	2.2374994914130331E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997762500508587	WITHOUT_CLASSIFICATION	2.2374994914130331E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999871453244479	WITHOUT_CLASSIFICATION	1.285467555202955E-5	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9995893020421391	WITHOUT_CLASSIFICATION	4.106979578608491E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9996527542336024	WITHOUT_CLASSIFICATION	3.4724576639757495E-4	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998204391164022	WITHOUT_CLASSIFICATION	1.7956088359777215E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9996527542336024	WITHOUT_CLASSIFICATION	3.4724576639757495E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9997590863198723	WITHOUT_CLASSIFICATION	2.4091368012772325E-4	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999422440788087	WITHOUT_CLASSIFICATION	5.7755921191170076E-5	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999994807889124	WITHOUT_CLASSIFICATION	5.192110876606373E-7	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999992487677116	WITHOUT_CLASSIFICATION	7.512322883244019E-7	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999999449655545	WITHOUT_CLASSIFICATION	5.503444549201702E-7	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999968216870212	WITHOUT_CLASSIFICATION	3.1783129789481365E-6	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999944124870944	WITHOUT_CLASSIFICATION	5.587512905562696E-6	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.999918992963178	WITHOUT_CLASSIFICATION	8.1007036822127E-5	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999890831945673	WITHOUT_CLASSIFICATION	1.0916805432727888E-5	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999867580103903	WITHOUT_CLASSIFICATION	1.3241989609765408E-5	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9996318080377286	WITHOUT_CLASSIFICATION	3.6819196227149477E-4	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998728446860121	WITHOUT_CLASSIFICATION	1.2715531398784676E-4	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999902250070021	WITHOUT_CLASSIFICATION	9.774992997984173E-6	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9998961997613153	WITHOUT_CLASSIFICATION	1.0380023868464235E-4	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999967042291825	WITHOUT_CLASSIFICATION	3.2957708176009277E-6	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9998374595849427	WITHOUT_CLASSIFICATION	1.6254041505737508E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9993906579767482	WITHOUT_CLASSIFICATION	6.093420232518114E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9993906579767482	WITHOUT_CLASSIFICATION	6.093420232518114E-4	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999671751317736	WITHOUT_CLASSIFICATION	3.282486822646128E-5	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999979993271152	WITHOUT_CLASSIFICATION	2.0006728848100715E-6	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999622343423945	WITHOUT_CLASSIFICATION	3.77656576055451E-5	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999975471117977	WITHOUT_CLASSIFICATION	2.452888202410522E-6	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999980241950726	WITHOUT_CLASSIFICATION	1.9758049274163366E-6	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999510791382166	WITHOUT_CLASSIFICATION	4.892086178335052E-5	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9997530927356811	WITHOUT_CLASSIFICATION	2.4690726431883314E-4	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999056867970416	WITHOUT_CLASSIFICATION	9.431320295834153E-5	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999763550504265	WITHOUT_CLASSIFICATION	2.364494957347441E-5	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999810029829794	WITHOUT_CLASSIFICATION	1.8997017020604366E-5	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999968704397681	WITHOUT_CLASSIFICATION	3.1295602318229746E-6	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999998825003386	WITHOUT_CLASSIFICATION	1.1749966141627471E-7	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999987661814073	WITHOUT_CLASSIFICATION	1.2338185927683426E-6	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999808938015201	WITHOUT_CLASSIFICATION	1.9106198479925163E-5	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999993405595302	WITHOUT_CLASSIFICATION	6.594404697247842E-7	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999957563670157	WITHOUT_CLASSIFICATION	4.2436329844038066E-6	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999873897662596	WITHOUT_CLASSIFICATION	1.261023374040126E-5	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.99981340704311	WITHOUT_CLASSIFICATION	1.865929568899865E-4	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9997565772501923	WITHOUT_CLASSIFICATION	2.4342274980769242E-4	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999984464328104	WITHOUT_CLASSIFICATION	1.5535671895652074E-6	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.999997505547033	WITHOUT_CLASSIFICATION	2.4944529669477946E-6	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999642457298131	WITHOUT_CLASSIFICATION	3.575427018674407E-5	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999965628910694	WITHOUT_CLASSIFICATION	3.4371089306787462E-6	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999810615621707	WITHOUT_CLASSIFICATION	1.8938437829292028E-5	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9999971126217696	WITHOUT_CLASSIFICATION	2.887378230461492E-6	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999724338646216	WITHOUT_CLASSIFICATION	2.7566135378375878E-5	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997466484499602	WITHOUT_CLASSIFICATION	2.533515500397261E-4	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999412609984255	WITHOUT_CLASSIFICATION	5.8739001574420195E-5	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999256663917341	WITHOUT_CLASSIFICATION	7.433360826593448E-5	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9996260796995584	WITHOUT_CLASSIFICATION	3.739203004416523E-4	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998796031301498	WITHOUT_CLASSIFICATION	1.2039686985011489E-4	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999685048538223	WITHOUT_CLASSIFICATION	3.149514617781318E-5	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999852170585944	WITHOUT_CLASSIFICATION	1.4782941405580325E-5	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999866161386938	WITHOUT_CLASSIFICATION	1.3383861306222765E-5	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998928714272098	WITHOUT_CLASSIFICATION	1.0712857279010514E-4	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999997363579667	WITHOUT_CLASSIFICATION	2.6364203329770097E-7	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999947980280947	WITHOUT_CLASSIFICATION	5.201971905369969E-6	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999933781993534	WITHOUT_CLASSIFICATION	6.621800646594534E-6	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9997461787152327	WITHOUT_CLASSIFICATION	2.538212847673115E-4	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999640018730547	WITHOUT_CLASSIFICATION	3.5998126945429534E-5	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999942865060174	WITHOUT_CLASSIFICATION	5.713493982627487E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998829187913014	WITHOUT_CLASSIFICATION	1.1708120869861395E-4	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999422066366238	WITHOUT_CLASSIFICATION	5.779336337619091E-5	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9997362375145802	WITHOUT_CLASSIFICATION	2.637624854198415E-4	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999946154148964	WITHOUT_CLASSIFICATION	5.384585103587662E-5	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999400129106369	WITHOUT_CLASSIFICATION	5.9987089363008116E-5	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9994100263605965	WITHOUT_CLASSIFICATION	5.89973639403388E-4	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999996592857062	WITHOUT_CLASSIFICATION	3.407142938489277E-7	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999890047739921	WITHOUT_CLASSIFICATION	1.0995226007972383E-5	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999530934056374	WITHOUT_CLASSIFICATION	4.690659436256598E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998968282739742	WITHOUT_CLASSIFICATION	1.03171726025767E-4	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9998865508798328	WITHOUT_CLASSIFICATION	1.1344912016724221E-4	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999660770408285	WITHOUT_CLASSIFICATION	3.392295917154428E-5	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999345047042345	WITHOUT_CLASSIFICATION	6.549529576540672E-5	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999150009259887	WITHOUT_CLASSIFICATION	8.499907401126065E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999972544987836	WITHOUT_CLASSIFICATION	2.7455012164265073E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999972544987836	WITHOUT_CLASSIFICATION	2.7455012164265073E-6	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999998295348442	WITHOUT_CLASSIFICATION	1.704651557946682E-6	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997373091194105	WITHOUT_CLASSIFICATION	2.6269088058943616E-4	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9998979963998609	WITHOUT_CLASSIFICATION	1.0200360013919327E-4	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999822490764233	WITHOUT_CLASSIFICATION	1.7750923576666898E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999642027767179	WITHOUT_CLASSIFICATION	3.57972232821162E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999900628672497	WITHOUT_CLASSIFICATION	9.937132750265907E-6	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999953721002449	WITHOUT_CLASSIFICATION	4.6278997551545185E-6	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999957241874554	WITHOUT_CLASSIFICATION	4.275812544544233E-6	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999352165724097	WITHOUT_CLASSIFICATION	6.478342759027846E-5	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999956334710361	WITHOUT_CLASSIFICATION	4.366528963900406E-6	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998457295606118	WITHOUT_CLASSIFICATION	1.5427043938823245E-4	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999625321839795	WITHOUT_CLASSIFICATION	3.7467816020556816E-5	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9997628391135633	WITHOUT_CLASSIFICATION	2.3716088643680242E-4	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999950015135557	WITHOUT_CLASSIFICATION	4.9984864442683E-6	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999902941559633	WITHOUT_CLASSIFICATION	9.705844036676606E-6	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999853691904245	WITHOUT_CLASSIFICATION	1.4630809575508354E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999900627207632	WITHOUT_CLASSIFICATION	9.937279236916553E-6	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9998526084405871	WITHOUT_CLASSIFICATION	1.473915594129603E-4	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9998113265716767	WITHOUT_CLASSIFICATION	1.886734283233581E-4	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9997932621941611	WITHOUT_CLASSIFICATION	2.0673780583896145E-4	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999981042324566	WITHOUT_CLASSIFICATION	1.8957675434040578E-5	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9997683068969478	WITHOUT_CLASSIFICATION	2.3169310305204776E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992148674517021	WITHOUT_CLASSIFICATION	7.851325482979549E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999937490237932	WITHOUT_CLASSIFICATION	6.250976206799803E-5	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999868491668245	WITHOUT_CLASSIFICATION	1.3150833175425922E-5	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999826326971498	WITHOUT_CLASSIFICATION	1.7367302850186018E-5	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9998669995426086	WITHOUT_CLASSIFICATION	1.330004573914458E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9862681150345638	WITHOUT_CLASSIFICATION	0.013731884965436179	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999656039878064	WITHOUT_CLASSIFICATION	3.439601219350549E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992148674517021	WITHOUT_CLASSIFICATION	7.851325482979549E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999970491858	WITHOUT_CLASSIFICATION	2.9508142000100585E-6	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9997752287275098	WITHOUT_CLASSIFICATION	2.2477127249014405E-4	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9984406811625305	WITHOUT_CLASSIFICATION	0.0015593188374695192	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9998358574718905	WITHOUT_CLASSIFICATION	1.6414252810951618E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999996347127582	WITHOUT_CLASSIFICATION	3.6528724180892097E-7	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999994003551184	WITHOUT_CLASSIFICATION	5.996448816506991E-7	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999630162628196	WITHOUT_CLASSIFICATION	3.6983737180437924E-5	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999945483235683	WITHOUT_CLASSIFICATION	5.451676431717839E-6	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999820266965642	WITHOUT_CLASSIFICATION	1.797330343579811E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9998358574718905	WITHOUT_CLASSIFICATION	1.6414252810951618E-4	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999954585449102	WITHOUT_CLASSIFICATION	4.541455089791905E-6	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999922949058615	WITHOUT_CLASSIFICATION	7.705094138465093E-6	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9997596417857433	WITHOUT_CLASSIFICATION	2.403582142568643E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9994174578481806	WITHOUT_CLASSIFICATION	5.825421518193287E-4	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999855588893595	WITHOUT_CLASSIFICATION	1.4441110640476262E-5	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999968704397681	WITHOUT_CLASSIFICATION	3.1295602318229746E-6	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999094073509127	WITHOUT_CLASSIFICATION	9.059264908729276E-5	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999966558446115	WITHOUT_CLASSIFICATION	3.3441553885084617E-6	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999720969880204	WITHOUT_CLASSIFICATION	2.7903011979638764E-5	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.99998281197719	WITHOUT_CLASSIFICATION	1.718802280997322E-5	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9997844557517052	WITHOUT_CLASSIFICATION	2.1554424829498092E-4	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999981442407526	WITHOUT_CLASSIFICATION	1.8557592474888487E-6	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998703549301667	WITHOUT_CLASSIFICATION	1.296450698332976E-4	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999985644863246	WITHOUT_CLASSIFICATION	1.4355136753478377E-6	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999046043745017	WITHOUT_CLASSIFICATION	9.539562549837588E-5	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999985998613569	WITHOUT_CLASSIFICATION	1.4001386431252345E-6	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992289829134388	WITHOUT_CLASSIFICATION	7.710170865611942E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999990115405498	WITHOUT_CLASSIFICATION	9.884594501263727E-7	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999968938915231	WITHOUT_CLASSIFICATION	3.1061084768956396E-6	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999811015176865	WITHOUT_CLASSIFICATION	1.88984823136139E-5	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999974780006173	WITHOUT_CLASSIFICATION	2.5219993826761735E-6	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999871064122122	WITHOUT_CLASSIFICATION	1.2893587787771169E-5	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999985707293791	WITHOUT_CLASSIFICATION	1.4292706208384478E-6	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999943124697861	WITHOUT_CLASSIFICATION	5.687530213934722E-6	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999953697238403	WITHOUT_CLASSIFICATION	4.630276159786108E-6	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9997053185810476	WITHOUT_CLASSIFICATION	2.946814189524677E-4	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999021729133664	WITHOUT_CLASSIFICATION	9.782708663356166E-5	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999923184126778	WITHOUT_CLASSIFICATION	7.681587322217952E-6	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999911962529316	WITHOUT_CLASSIFICATION	8.80374706832649E-6	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999823835017405	WITHOUT_CLASSIFICATION	1.7616498259453806E-5	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999736210310038	WITHOUT_CLASSIFICATION	2.6378968996196386E-5	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999871303754444	WITHOUT_CLASSIFICATION	1.2869624555656881E-5	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999283349643455	WITHOUT_CLASSIFICATION	7.166503565436601E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999478236579011	WITHOUT_CLASSIFICATION	5.2176342098927775E-5	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997330311157658	WITHOUT_CLASSIFICATION	2.6696888423409867E-4	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9834804640044477	WITHOUT_CLASSIFICATION	0.016519535995552337	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998918006308621	WITHOUT_CLASSIFICATION	1.081993691378682E-4	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999950839945632	WITHOUT_CLASSIFICATION	4.916005436831936E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999964363308689	WITHOUT_CLASSIFICATION	3.5636691311139317E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999964363308689	WITHOUT_CLASSIFICATION	3.5636691311139317E-6	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999954171579063	WITHOUT_CLASSIFICATION	4.582842093752299E-6	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999716084307756	WITHOUT_CLASSIFICATION	2.8391569224300955E-5	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9998832571896342	WITHOUT_CLASSIFICATION	1.1674281036578264E-4	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9998566878073819	WITHOUT_CLASSIFICATION	1.4331219261814568E-4	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9998059639268729	WITHOUT_CLASSIFICATION	1.94036073126997E-4	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.999552595981097	WITHOUT_CLASSIFICATION	4.4740401890290424E-4	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9998317498794757	WITHOUT_CLASSIFICATION	1.6825012052435674E-4	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999929702653316	WITHOUT_CLASSIFICATION	7.029734668325153E-6	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999979918864595	WITHOUT_CLASSIFICATION	2.0081135405021977E-6	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999998594270648	WITHOUT_CLASSIFICATION	1.405729350626404E-7	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999970096706734	WITHOUT_CLASSIFICATION	2.990329326662702E-6	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999975780608479	WITHOUT_CLASSIFICATION	2.421939152128062E-6	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999901676519494	WITHOUT_CLASSIFICATION	9.832348050579065E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999964363308689	WITHOUT_CLASSIFICATION	3.5636691311139317E-6	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999979858976878	WITHOUT_CLASSIFICATION	2.0141023122010643E-5	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999973330665625	WITHOUT_CLASSIFICATION	2.6669334375457136E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995971528130769	WITHOUT_CLASSIFICATION	4.0284718692306813E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999987139367931	WITHOUT_CLASSIFICATION	1.2860632069029602E-6	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999901900708918	WITHOUT_CLASSIFICATION	9.80992910815769E-6	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998635600278365	WITHOUT_CLASSIFICATION	1.364399721634759E-4	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997955130448528	WITHOUT_CLASSIFICATION	2.044869551472172E-4	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999961502457576	WITHOUT_CLASSIFICATION	3.8497542424883185E-6	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999780710990056	WITHOUT_CLASSIFICATION	2.192890099436643E-5	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999867485584358	WITHOUT_CLASSIFICATION	1.3251441564202702E-5	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999880805670369	WITHOUT_CLASSIFICATION	1.1919432963074288E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999478236579011	WITHOUT_CLASSIFICATION	5.2176342098927775E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999964363308689	WITHOUT_CLASSIFICATION	3.5636691311139317E-6	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999981505440094	WITHOUT_CLASSIFICATION	1.849455990596978E-6	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999955434431266	WITHOUT_CLASSIFICATION	4.4565568734820816E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999811746831058	WITHOUT_CLASSIFICATION	1.8825316894192863E-5	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999628425689704	WITHOUT_CLASSIFICATION	3.715743102957431E-5	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999945924995454	WITHOUT_CLASSIFICATION	5.407500454570438E-6	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999822804184225	WITHOUT_CLASSIFICATION	1.7719581577474565E-5	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893183466309	WITHOUT_CLASSIFICATION	1.068165336909196E-5	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999924671488881	WITHOUT_CLASSIFICATION	7.532851111903439E-6	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999964217821625	WITHOUT_CLASSIFICATION	3.578217837484223E-5	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.999956035119877	WITHOUT_CLASSIFICATION	4.396488012300912E-5	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999823684579872	WITHOUT_CLASSIFICATION	1.7631542012899624E-5	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9987560785712478	WITHOUT_CLASSIFICATION	0.0012439214287522052	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999984276751018	WITHOUT_CLASSIFICATION	1.572324898148262E-6	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999751811792988	WITHOUT_CLASSIFICATION	2.4818820701127644E-5	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9997590863198723	WITHOUT_CLASSIFICATION	2.4091368012772325E-4	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9998655219963306	WITHOUT_CLASSIFICATION	1.3447800366938055E-4	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999885305490679	WITHOUT_CLASSIFICATION	1.1469450932039623E-5	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999097225581904	WITHOUT_CLASSIFICATION	9.027744180953121E-5	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999917651582274	WITHOUT_CLASSIFICATION	8.23484177265125E-6	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999981523072156	WITHOUT_CLASSIFICATION	1.8476927844012626E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999374600285641	WITHOUT_CLASSIFICATION	6.253997143588015E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999374600285641	WITHOUT_CLASSIFICATION	6.253997143588015E-5	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999948971739969	WITHOUT_CLASSIFICATION	5.102826003033071E-6	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999937880292252	WITHOUT_CLASSIFICATION	6.211970774794784E-6	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999384581027851	WITHOUT_CLASSIFICATION	6.154189721489187E-5	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999969321236533	WITHOUT_CLASSIFICATION	3.0678763467917906E-6	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999596679618438	WITHOUT_CLASSIFICATION	4.0332038156196816E-5	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999383914300503	WITHOUT_CLASSIFICATION	6.160856994970903E-5	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999553811301247	WITHOUT_CLASSIFICATION	4.4618869875179584E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998864808971523	WITHOUT_CLASSIFICATION	1.1351910284778874E-4	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998864808971523	WITHOUT_CLASSIFICATION	1.1351910284778874E-4	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9969313270647436	WITHOUT_CLASSIFICATION	0.0030686729352563135	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999704993475479	WITHOUT_CLASSIFICATION	2.9500652452074277E-5	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999448925947685	WITHOUT_CLASSIFICATION	5.510740523140875E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999908730935152	WITHOUT_CLASSIFICATION	9.126906484797208E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999908730935152	WITHOUT_CLASSIFICATION	9.126906484797208E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999908730935152	WITHOUT_CLASSIFICATION	9.126906484797208E-5	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999546220262355	WITHOUT_CLASSIFICATION	4.5377973764499566E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999948115321993	WITHOUT_CLASSIFICATION	5.188467800681947E-6	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9998607183046081	WITHOUT_CLASSIFICATION	1.3928169539178975E-4	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9992658246373466	WITHOUT_CLASSIFICATION	7.341753626533746E-4	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9998358041120682	WITHOUT_CLASSIFICATION	1.641958879318401E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999964363308689	WITHOUT_CLASSIFICATION	3.5636691311139317E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999964363308689	WITHOUT_CLASSIFICATION	3.5636691311139317E-6	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9994406787609577	WITHOUT_CLASSIFICATION	5.593212390424389E-4	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999856292159621	WITHOUT_CLASSIFICATION	1.437078403778164E-5	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9992176597127914	WITHOUT_CLASSIFICATION	7.823402872085321E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999994191610152	WITHOUT_CLASSIFICATION	5.808389848351872E-7	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9998742122235976	WITHOUT_CLASSIFICATION	1.257877764022965E-4	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999916486876652	WITHOUT_CLASSIFICATION	8.35131233481628E-6	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999932043358878	WITHOUT_CLASSIFICATION	6.795664112208271E-5	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999748800629673	WITHOUT_CLASSIFICATION	2.511993703268041E-5	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999941515089564	WITHOUT_CLASSIFICATION	5.848491043518462E-6	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999871914892382	WITHOUT_CLASSIFICATION	1.2808510761793515E-5	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999766448316215	WITHOUT_CLASSIFICATION	2.335516837849273E-4	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999780740306738	WITHOUT_CLASSIFICATION	2.192596932620572E-5	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999780740306738	WITHOUT_CLASSIFICATION	2.192596932620572E-5	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999842411691832	WITHOUT_CLASSIFICATION	1.5758830816782125E-5	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999842411691832	WITHOUT_CLASSIFICATION	1.5758830816782125E-5	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999853307400884	WITHOUT_CLASSIFICATION	1.4669259911621478E-5	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999984851669961	WITHOUT_CLASSIFICATION	1.5148330039023532E-5	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999984851669961	WITHOUT_CLASSIFICATION	1.5148330039023532E-5	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999920739760394	WITHOUT_CLASSIFICATION	7.926023960539109E-6	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999797119011467	WITHOUT_CLASSIFICATION	2.0288098853381355E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999491783246272	WITHOUT_CLASSIFICATION	5.0821675372836934E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999374600285641	WITHOUT_CLASSIFICATION	6.253997143588015E-5	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999582844148491	WITHOUT_CLASSIFICATION	4.171558515082401E-5	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999797119011467	WITHOUT_CLASSIFICATION	2.0288098853381355E-5	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9983111166364059	WITHOUT_CLASSIFICATION	0.0016888833635940335	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999927348358206	WITHOUT_CLASSIFICATION	7.265164179346579E-6	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999903792701184	WITHOUT_CLASSIFICATION	9.620729881555798E-6	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999948010878837	WITHOUT_CLASSIFICATION	5.198912116344068E-6	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999988476519962	WITHOUT_CLASSIFICATION	1.1523480038040047E-6	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999995380863828	WITHOUT_CLASSIFICATION	4.61913617193997E-6	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999989166620141	WITHOUT_CLASSIFICATION	1.083337985798651E-6	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9997786083671858	WITHOUT_CLASSIFICATION	2.2139163281412094E-4	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9994639639594372	WITHOUT_CLASSIFICATION	5.360360405629058E-4	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9953560520976904	WITHOUT_CLASSIFICATION	0.004643947902309533	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.99999480277465	WITHOUT_CLASSIFICATION	5.197225349970226E-6	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999185943456751	WITHOUT_CLASSIFICATION	8.140565432493546E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999569078800925	WITHOUT_CLASSIFICATION	4.309211990746606E-5	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999670489817828	WITHOUT_CLASSIFICATION	3.295101821727548E-5	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9947188867989597	WITHOUT_CLASSIFICATION	0.00528111320104027	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999815331326036	WITHOUT_CLASSIFICATION	1.8466867396424295E-5	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999917368333138	WITHOUT_CLASSIFICATION	8.263166686298511E-6	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999957272260589	WITHOUT_CLASSIFICATION	4.27277394113776E-6	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999957272260589	WITHOUT_CLASSIFICATION	4.27277394113776E-6	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999962208231978	WITHOUT_CLASSIFICATION	3.779176802072297E-6	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999826374194158	WITHOUT_CLASSIFICATION	1.736258058414387E-5	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999989700155283	WITHOUT_CLASSIFICATION	1.0299844717387504E-6	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999858614156337	WITHOUT_CLASSIFICATION	1.4138584366147064E-5	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999664525359032	WITHOUT_CLASSIFICATION	3.354746409680905E-5	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999991061912091	WITHOUT_CLASSIFICATION	8.93808790994094E-7	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999986945567738	WITHOUT_CLASSIFICATION	1.3054432262387165E-6	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999970964609777	WITHOUT_CLASSIFICATION	2.9035390223115735E-5	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999997922020352	WITHOUT_CLASSIFICATION	2.0779796480125803E-6	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999995168131026	WITHOUT_CLASSIFICATION	4.831868972918057E-7	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999939106247411	WITHOUT_CLASSIFICATION	6.089375258886855E-6	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9987560785712478	WITHOUT_CLASSIFICATION	0.0012439214287522052	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.999960657679311	WITHOUT_CLASSIFICATION	3.934232068900004E-5	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9998576675089644	WITHOUT_CLASSIFICATION	1.423324910355499E-4	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999572794587334	WITHOUT_CLASSIFICATION	4.2720541266616486E-5	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9996867792537873	WITHOUT_CLASSIFICATION	3.1322074621274254E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999757360614976	WITHOUT_CLASSIFICATION	2.426393850248393E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999757360614976	WITHOUT_CLASSIFICATION	2.426393850248393E-5	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9997041839996456	WITHOUT_CLASSIFICATION	2.9581600035450653E-4	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999693200832539	WITHOUT_CLASSIFICATION	3.0679916746150925E-5	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9995061620267536	WITHOUT_CLASSIFICATION	4.938379732463908E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9996487364343534	WITHOUT_CLASSIFICATION	3.512635656466061E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9994211685441844	WITHOUT_CLASSIFICATION	5.788314558157003E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999950298645773	WITHOUT_CLASSIFICATION	4.970135422669576E-6	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999998640478749	WITHOUT_CLASSIFICATION	1.3595212510514034E-6	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9987072440994675	WITHOUT_CLASSIFICATION	0.0012927559005324306	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999551125615332	WITHOUT_CLASSIFICATION	4.4887438466821864E-5	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9996907976128703	WITHOUT_CLASSIFICATION	3.09202387129646E-4	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999157605406389	WITHOUT_CLASSIFICATION	8.423945936109105E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9987072440994675	WITHOUT_CLASSIFICATION	0.0012927559005324306	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999947309016741	WITHOUT_CLASSIFICATION	5.269098325940448E-6	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999833440620699	WITHOUT_CLASSIFICATION	1.6655937930132147E-5	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999995916183941	WITHOUT_CLASSIFICATION	4.0838160584214245E-7	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9998539514381211	WITHOUT_CLASSIFICATION	1.4604856187896802E-4	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999983345974266	WITHOUT_CLASSIFICATION	1.6654025733404582E-6	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999713249233884	WITHOUT_CLASSIFICATION	2.8675076611692104E-5	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999643305350064	WITHOUT_CLASSIFICATION	3.566946499360974E-5	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999799874334877	WITHOUT_CLASSIFICATION	2.00125665121906E-5	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999949983777966	WITHOUT_CLASSIFICATION	5.001622203359869E-6	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9994616623238014	WITHOUT_CLASSIFICATION	5.383376761985371E-4	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999554743098936	WITHOUT_CLASSIFICATION	4.452569010629282E-5	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999436579179696	WITHOUT_CLASSIFICATION	5.634208203046562E-5	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998931502877337	WITHOUT_CLASSIFICATION	1.0684971226622856E-4	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999971603931119	WITHOUT_CLASSIFICATION	2.839606888093111E-6	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998572426747623	WITHOUT_CLASSIFICATION	1.4275732523768558E-4	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999888170565849	WITHOUT_CLASSIFICATION	1.1182943415078008E-5	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999888683268869	WITHOUT_CLASSIFICATION	1.1131673113026948E-5	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999780774908871	WITHOUT_CLASSIFICATION	2.1922509112864704E-5	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999659793304477	WITHOUT_CLASSIFICATION	3.40206695521756E-5	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999970428791112	WITHOUT_CLASSIFICATION	2.9571208888113958E-5	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9992054197271054	WITHOUT_CLASSIFICATION	7.94580272894662E-4	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999958020759918	WITHOUT_CLASSIFICATION	4.197924008174727E-6	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998652457296581	WITHOUT_CLASSIFICATION	1.3475427034191187E-4	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999130441306852	WITHOUT_CLASSIFICATION	8.695586931491641E-5	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999909099769437	WITHOUT_CLASSIFICATION	9.090023056329182E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9997964607283222	WITHOUT_CLASSIFICATION	2.0353927167782475E-4	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9998044863139567	WITHOUT_CLASSIFICATION	1.9551368604331747E-4	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999990409041759	WITHOUT_CLASSIFICATION	9.590958241136724E-6	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999916026428715	WITHOUT_CLASSIFICATION	8.397357128532421E-6	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999829308984782	WITHOUT_CLASSIFICATION	1.7069101521820466E-5	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999928307654673	WITHOUT_CLASSIFICATION	7.169234532729277E-6	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9997320324105741	WITHOUT_CLASSIFICATION	2.679675894259134E-4	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999213213379511	WITHOUT_CLASSIFICATION	7.86786620488679E-5	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999995152358974	WITHOUT_CLASSIFICATION	4.847641026008797E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999960064820869	WITHOUT_CLASSIFICATION	3.993517913213405E-6	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999962748712405	WITHOUT_CLASSIFICATION	3.7251287595337963E-6	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999741100170667	WITHOUT_CLASSIFICATION	2.5889982933316733E-5	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999753604559819	WITHOUT_CLASSIFICATION	2.4639544018037482E-5	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999919700823646	WITHOUT_CLASSIFICATION	8.02991763538015E-6	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999965590015615	WITHOUT_CLASSIFICATION	3.44099843849778E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999495419946375	WITHOUT_CLASSIFICATION	5.045800536258001E-5	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9993391192387551	WITHOUT_CLASSIFICATION	6.608807612449816E-4	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999934734032189	WITHOUT_CLASSIFICATION	6.526596781161873E-6	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999999774845274	WITHOUT_CLASSIFICATION	2.251547259638502E-7	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999913060536725	WITHOUT_CLASSIFICATION	8.69394632750198E-6	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999995772274412	WITHOUT_CLASSIFICATION	4.227725587945865E-6	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999989351166292	WITHOUT_CLASSIFICATION	1.0648833707287804E-6	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999851781556831	WITHOUT_CLASSIFICATION	1.4821844316769116E-5	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9997059473770221	WITHOUT_CLASSIFICATION	2.9405262297789615E-4	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999729517369808	WITHOUT_CLASSIFICATION	2.7048263019205285E-5	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978436707153	WITHOUT_CLASSIFICATION	2.1563292847326885E-6	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999902604402907	WITHOUT_CLASSIFICATION	9.739559709368142E-6	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999976637309539	WITHOUT_CLASSIFICATION	2.3362690461435443E-6	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999967147455432	WITHOUT_CLASSIFICATION	3.285254456877537E-6	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999938486627943	WITHOUT_CLASSIFICATION	6.15133720572158E-6	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999944887633916	WITHOUT_CLASSIFICATION	5.511236608407655E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9991843036426606	WITHOUT_CLASSIFICATION	8.156963573392855E-4	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999329587278917	WITHOUT_CLASSIFICATION	6.704127210829584E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999616636879094	WITHOUT_CLASSIFICATION	3.833631209063126E-5	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999482494481634	WITHOUT_CLASSIFICATION	5.1750551836513616E-5	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999938294069675	WITHOUT_CLASSIFICATION	6.170593032576268E-6	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999816505583478	WITHOUT_CLASSIFICATION	1.8349441652251903E-5	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9990979452035619	WITHOUT_CLASSIFICATION	9.020547964380526E-4	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.990679209900647	WITHOUT_CLASSIFICATION	0.009320790099353113	DEFECT
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999715359130571	WITHOUT_CLASSIFICATION	2.8464086942924818E-5	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998765794787855	WITHOUT_CLASSIFICATION	1.2342052121452692E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978436707153	WITHOUT_CLASSIFICATION	2.1563292847326885E-6	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999877463476192	WITHOUT_CLASSIFICATION	1.2253652380795763E-5	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999669276901844	WITHOUT_CLASSIFICATION	3.30723098156597E-5	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999934968339684	WITHOUT_CLASSIFICATION	6.5031660315545075E-6	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999804117151353	WITHOUT_CLASSIFICATION	1.958828486470447E-5	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998770185513705	WITHOUT_CLASSIFICATION	1.2298144862957742E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998674898422771	WITHOUT_CLASSIFICATION	1.3251015772285056E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999551125615332	WITHOUT_CLASSIFICATION	4.4887438466821864E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999974141158118	WITHOUT_CLASSIFICATION	2.585884188190558E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999960064820869	WITHOUT_CLASSIFICATION	3.993517913213405E-6	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9998074366945864	WITHOUT_CLASSIFICATION	1.92563305413609E-4	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999940914323824	WITHOUT_CLASSIFICATION	5.908567617613781E-6	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999468289597242	WITHOUT_CLASSIFICATION	5.317104027576781E-5	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999580534716936	WITHOUT_CLASSIFICATION	4.194652830640315E-5	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999970007566416	WITHOUT_CLASSIFICATION	2.999243358480201E-6	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9997529500128471	WITHOUT_CLASSIFICATION	2.4704998715280584E-4	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999650270075237	WITHOUT_CLASSIFICATION	3.497299247625988E-5	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999495071613395	WITHOUT_CLASSIFICATION	5.049283866064758E-5	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9458252461264975	WITHOUT_CLASSIFICATION	0.05417475387350232	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9994276698486386	WITHOUT_CLASSIFICATION	5.723301513613434E-4	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999962085151123	WITHOUT_CLASSIFICATION	3.791484887759601E-6	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999693493008008	WITHOUT_CLASSIFICATION	3.0650699199173E-5	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999698279424079	WITHOUT_CLASSIFICATION	3.0172057592047127E-5	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999698279424079	WITHOUT_CLASSIFICATION	3.0172057592047127E-5	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999833298152647	WITHOUT_CLASSIFICATION	1.6670184735284637E-5	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999953162744437	WITHOUT_CLASSIFICATION	4.683725556341123E-6	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999941711406349	WITHOUT_CLASSIFICATION	5.82885936504786E-6	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999873523347645	WITHOUT_CLASSIFICATION	1.264766523554269E-5	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999976950691641	WITHOUT_CLASSIFICATION	2.304930835838972E-6	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999381216484492	WITHOUT_CLASSIFICATION	6.187835155085596E-5	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999678825083925	WITHOUT_CLASSIFICATION	3.21174916074672E-5	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9998896360653294	WITHOUT_CLASSIFICATION	1.103639346704527E-4	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999996842704148	WITHOUT_CLASSIFICATION	3.1572958520162084E-6	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999949191622112	WITHOUT_CLASSIFICATION	5.080837788854666E-6	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9994700074780314	WITHOUT_CLASSIFICATION	5.299925219686577E-4	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9996384886882428	WITHOUT_CLASSIFICATION	3.6151131175716784E-4	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9998667523464592	WITHOUT_CLASSIFICATION	1.332476535408114E-4	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999822360771394	WITHOUT_CLASSIFICATION	1.776392286067958E-5	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999767588692067	WITHOUT_CLASSIFICATION	2.3241130793248797E-5	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9997610198241582	WITHOUT_CLASSIFICATION	2.3898017584182452E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999947632616024	WITHOUT_CLASSIFICATION	5.236738397603047E-5	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999956815825678	WITHOUT_CLASSIFICATION	4.318417432167876E-6	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999665088212553	WITHOUT_CLASSIFICATION	3.349117874471963E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580894544174	WITHOUT_CLASSIFICATION	4.1910545582571014E-5	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999752158433334	WITHOUT_CLASSIFICATION	2.4784156666669098E-5	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9986530653954634	WITHOUT_CLASSIFICATION	0.0013469346045365985	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999964106728751	WITHOUT_CLASSIFICATION	3.589327124753877E-6	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999956244355604	WITHOUT_CLASSIFICATION	4.375564439547355E-6	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9998551413741943	WITHOUT_CLASSIFICATION	1.448586258057625E-4	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999928636170042	WITHOUT_CLASSIFICATION	7.136382995669481E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580894544174	WITHOUT_CLASSIFICATION	4.1910545582571014E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580894544174	WITHOUT_CLASSIFICATION	4.1910545582571014E-5	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999201536199259	WITHOUT_CLASSIFICATION	7.984638007403634E-5	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999863424243706	WITHOUT_CLASSIFICATION	1.365757562940582E-4	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999931699834783	WITHOUT_CLASSIFICATION	6.830016521782793E-6	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9989511645588244	WITHOUT_CLASSIFICATION	0.0010488354411755407	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9966429246594555	WITHOUT_CLASSIFICATION	0.0033570753405445307	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999749290195287	WITHOUT_CLASSIFICATION	2.5070980471392683E-5	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999733503817098	WITHOUT_CLASSIFICATION	2.6649618290325932E-5	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9997788657942667	WITHOUT_CLASSIFICATION	2.2113420573329054E-4	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999964449252378	WITHOUT_CLASSIFICATION	3.555074762105727E-6	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9976410173405122	WITHOUT_CLASSIFICATION	0.002358982659487725	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999952140469052	WITHOUT_CLASSIFICATION	4.785953094800211E-6	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999953699151047	WITHOUT_CLASSIFICATION	4.630084895307492E-6	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999980580296998	WITHOUT_CLASSIFICATION	1.9419703002745006E-6	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999434692074959	WITHOUT_CLASSIFICATION	5.6530792504136855E-5	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999850559074254	WITHOUT_CLASSIFICATION	1.494409257460119E-4	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999676466238638	WITHOUT_CLASSIFICATION	3.2353376136240705E-5	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999731942676434	WITHOUT_CLASSIFICATION	2.680573235662982E-5	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999959102016985	WITHOUT_CLASSIFICATION	4.089798301430546E-6	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.999997004852756	WITHOUT_CLASSIFICATION	2.9951472439170575E-6	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999125301319237	WITHOUT_CLASSIFICATION	8.746986807634511E-5	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.6097322244357626	WITHOUT_CLASSIFICATION	0.3902677755642375	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999914712905664	WITHOUT_CLASSIFICATION	8.528709433539375E-6	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999990159824965	WITHOUT_CLASSIFICATION	9.840175034333068E-7	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999924250835666	WITHOUT_CLASSIFICATION	7.574916433485979E-6	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999583507531237	WITHOUT_CLASSIFICATION	4.164924687640059E-5	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999998063404905	WITHOUT_CLASSIFICATION	1.936595095011558E-6	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999930747042065	WITHOUT_CLASSIFICATION	6.925295793390782E-6	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999461103751562	WITHOUT_CLASSIFICATION	5.388962484365739E-5	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999695205529292	WITHOUT_CLASSIFICATION	3.0479447070835905E-5	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999976225189883	WITHOUT_CLASSIFICATION	2.377481011749852E-6	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999689789952376	WITHOUT_CLASSIFICATION	3.102100476230588E-5	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999942174172247	WITHOUT_CLASSIFICATION	5.782582775370964E-6	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999275306508969	WITHOUT_CLASSIFICATION	7.246934910313523E-5	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9995947667987397	WITHOUT_CLASSIFICATION	4.0523320126032065E-4	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9997670504433872	WITHOUT_CLASSIFICATION	2.329495566126494E-4	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999484934421953	WITHOUT_CLASSIFICATION	5.1506557804791605E-5	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999854183719404	WITHOUT_CLASSIFICATION	1.458162805948326E-5	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999986021622085	WITHOUT_CLASSIFICATION	1.3978377915841164E-6	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999940036768341	WITHOUT_CLASSIFICATION	5.996323165940919E-6	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999636758231162	WITHOUT_CLASSIFICATION	3.632417688384819E-5	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999556696884451	WITHOUT_CLASSIFICATION	4.433031155495042E-5	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999920859026097	WITHOUT_CLASSIFICATION	7.914097390334952E-6	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999713745357705	WITHOUT_CLASSIFICATION	2.8625464229594325E-5	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999991453855172	WITHOUT_CLASSIFICATION	8.546144827680749E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999713745357705	WITHOUT_CLASSIFICATION	2.8625464229594325E-5	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999931929505483	WITHOUT_CLASSIFICATION	6.807049451712781E-6	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999784600471933	WITHOUT_CLASSIFICATION	2.1539952806696858E-5	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9998429648236026	WITHOUT_CLASSIFICATION	1.5703517639746402E-4	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999973653167695	WITHOUT_CLASSIFICATION	2.634683230535275E-6	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999870920403002	WITHOUT_CLASSIFICATION	1.2907959699883435E-5	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999477227894312	WITHOUT_CLASSIFICATION	5.227721056881931E-5	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999955863835615	WITHOUT_CLASSIFICATION	4.413616438547383E-6	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999939314161453	WITHOUT_CLASSIFICATION	6.068583854595718E-6	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999858001015808	WITHOUT_CLASSIFICATION	1.4199898419206715E-4	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999994618908744	WITHOUT_CLASSIFICATION	5.381091255890776E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999986553107332	WITHOUT_CLASSIFICATION	1.34468926677979E-6	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999947420148625	WITHOUT_CLASSIFICATION	5.2579851374793665E-6	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.99999882126266	WITHOUT_CLASSIFICATION	1.178737339991086E-6	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9992066365360569	WITHOUT_CLASSIFICATION	7.933634639430856E-4	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999808629526441	WITHOUT_CLASSIFICATION	1.913704735590251E-4	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999751626646698	WITHOUT_CLASSIFICATION	2.4837335330105276E-5	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999696360839049	WITHOUT_CLASSIFICATION	3.0363916095204866E-5	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999960753179986	WITHOUT_CLASSIFICATION	3.924682001376591E-6	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999973374216188	WITHOUT_CLASSIFICATION	2.662578381256237E-6	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999981616597161	WITHOUT_CLASSIFICATION	1.8383402838650641E-6	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999896395731623	WITHOUT_CLASSIFICATION	1.0360426837649536E-5	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999871214754118	WITHOUT_CLASSIFICATION	1.28785245881497E-5	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9988634298936289	WITHOUT_CLASSIFICATION	0.001136570106371194	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999381879792493	WITHOUT_CLASSIFICATION	6.181202075070677E-5	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999630346381485	WITHOUT_CLASSIFICATION	3.696536185157427E-5	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999536556348506	WITHOUT_CLASSIFICATION	4.6344365149405176E-4	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999835738984897	WITHOUT_CLASSIFICATION	1.6426101510294038E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999107811079562	WITHOUT_CLASSIFICATION	8.921889204380898E-5	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999797585942943	WITHOUT_CLASSIFICATION	2.0241405705618946E-5	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9985410535050812	WITHOUT_CLASSIFICATION	0.0014589464949187497	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9998437179254365	WITHOUT_CLASSIFICATION	1.5628207456345667E-4	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.999900187569414	WITHOUT_CLASSIFICATION	9.981243058594297E-5	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999998191246728	WITHOUT_CLASSIFICATION	1.808753271996705E-7	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9998501265066785	WITHOUT_CLASSIFICATION	1.498734933215812E-4	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999647100603494	WITHOUT_CLASSIFICATION	3.5289939650552206E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9997989541693474	WITHOUT_CLASSIFICATION	2.0104583065262094E-4	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998135039677605	WITHOUT_CLASSIFICATION	1.8649603223949474E-4	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999843807850719	WITHOUT_CLASSIFICATION	1.561921492808599E-5	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9996715702435057	WITHOUT_CLASSIFICATION	3.284297564943127E-4	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999987974362603	WITHOUT_CLASSIFICATION	1.2025637397081382E-6	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999628650336115	WITHOUT_CLASSIFICATION	3.713496638848071E-5	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9987236632724644	WITHOUT_CLASSIFICATION	0.0012763367275355991	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9996944492884523	WITHOUT_CLASSIFICATION	3.055507115476734E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999536556348506	WITHOUT_CLASSIFICATION	4.6344365149405176E-4	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9994089260123572	WITHOUT_CLASSIFICATION	5.91073987642787E-4	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999975070327316	WITHOUT_CLASSIFICATION	2.492967268366468E-6	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9995542665530652	WITHOUT_CLASSIFICATION	4.457334469347767E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999911454883008	WITHOUT_CLASSIFICATION	8.854511699169612E-6	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9998518457004578	WITHOUT_CLASSIFICATION	1.481542995421829E-4	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999643866597101	WITHOUT_CLASSIFICATION	3.561334028983228E-5	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999805477249875	WITHOUT_CLASSIFICATION	1.9452275012505453E-4	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9989691112451794	WITHOUT_CLASSIFICATION	0.0010308887548206738	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999743379082896	WITHOUT_CLASSIFICATION	2.5662091710359876E-5	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999964110143413	WITHOUT_CLASSIFICATION	3.588985658820117E-6	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9997331097608739	WITHOUT_CLASSIFICATION	2.6689023912604166E-4	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999506549871446	WITHOUT_CLASSIFICATION	4.934501285534455E-5	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9996937249441255	WITHOUT_CLASSIFICATION	3.062750558744748E-4	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999372732901105	WITHOUT_CLASSIFICATION	6.272670988951865E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999639475295888	WITHOUT_CLASSIFICATION	3.6052470411230964E-5	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999989772547776	WITHOUT_CLASSIFICATION	1.0227452224156404E-6	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.999954611276004	WITHOUT_CLASSIFICATION	4.538872399589389E-5	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999526977178611	WITHOUT_CLASSIFICATION	4.730228213895274E-5	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999893223090142	WITHOUT_CLASSIFICATION	1.0677690985859422E-5	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9994089260123572	WITHOUT_CLASSIFICATION	5.91073987642787E-4	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999739820315183	WITHOUT_CLASSIFICATION	2.6017968481606074E-5	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999790918336147	WITHOUT_CLASSIFICATION	2.090816638540406E-5	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999842357024057	WITHOUT_CLASSIFICATION	1.57642975943087E-5	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999939546706673	WITHOUT_CLASSIFICATION	6.045329332654415E-6	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9988378813252116	WITHOUT_CLASSIFICATION	0.0011621186747884764	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9995229285445287	WITHOUT_CLASSIFICATION	4.7707145547126923E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9995229285445287	WITHOUT_CLASSIFICATION	4.7707145547126923E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999963139379404	WITHOUT_CLASSIFICATION	3.686062059613137E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9995229285445287	WITHOUT_CLASSIFICATION	4.7707145547126923E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9995229285445287	WITHOUT_CLASSIFICATION	4.7707145547126923E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999931989159154	WITHOUT_CLASSIFICATION	6.801084084519267E-6	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9997263004657072	WITHOUT_CLASSIFICATION	2.7369953429279807E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999995579835498	WITHOUT_CLASSIFICATION	4.420164501921925E-6	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999970426865998	WITHOUT_CLASSIFICATION	2.9573134001915073E-6	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9977757488262454	WITHOUT_CLASSIFICATION	0.002224251173754541	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999836523959372	WITHOUT_CLASSIFICATION	1.6347604062744077E-5	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998068601343308	WITHOUT_CLASSIFICATION	1.9313986566919417E-4	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9997172203663376	WITHOUT_CLASSIFICATION	2.8277963366244097E-4	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999028120182488	WITHOUT_CLASSIFICATION	9.718798175120078E-5	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998098398530704	WITHOUT_CLASSIFICATION	1.9016014692969607E-4	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999321030817463	WITHOUT_CLASSIFICATION	6.789691825366545E-5	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9983437625325068	WITHOUT_CLASSIFICATION	0.0016562374674932159	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999538986021704	WITHOUT_CLASSIFICATION	4.610139782956565E-5	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9995164179513477	WITHOUT_CLASSIFICATION	4.8358204865230623E-4	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999869552280711	WITHOUT_CLASSIFICATION	1.3044771928735587E-5	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998569859845308	WITHOUT_CLASSIFICATION	1.4301401546923617E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999871453244479	WITHOUT_CLASSIFICATION	1.285467555202955E-5	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999997797124893	WITHOUT_CLASSIFICATION	2.202875107096666E-6	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999279643339283	WITHOUT_CLASSIFICATION	7.203566607163247E-5	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9993673753449751	WITHOUT_CLASSIFICATION	6.32624655024936E-4	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999951386845134	WITHOUT_CLASSIFICATION	4.861315486531599E-6	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.999977450665683	WITHOUT_CLASSIFICATION	2.254933431697038E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999871453244479	WITHOUT_CLASSIFICATION	1.285467555202955E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999835738984897	WITHOUT_CLASSIFICATION	1.6426101510294038E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999413429637829	WITHOUT_CLASSIFICATION	5.865703621709286E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999991029909207	WITHOUT_CLASSIFICATION	8.970090793049647E-6	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999933789634594	WITHOUT_CLASSIFICATION	6.621036540666856E-6	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999422682832252	WITHOUT_CLASSIFICATION	5.773171677481525E-5	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999913177219841	WITHOUT_CLASSIFICATION	8.682278015972144E-6	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999761439121758	WITHOUT_CLASSIFICATION	2.3856087824122107E-5	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999595709385406	WITHOUT_CLASSIFICATION	4.0429061459352875E-5	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999779809264158	WITHOUT_CLASSIFICATION	2.201907358431679E-5	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9994437313011748	WITHOUT_CLASSIFICATION	5.562686988251922E-4	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999310319300871	WITHOUT_CLASSIFICATION	6.896806991281198E-5	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998776245806352	WITHOUT_CLASSIFICATION	1.223754193648203E-4	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999998979139615	WITHOUT_CLASSIFICATION	1.020860384941108E-6	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999975278128536	WITHOUT_CLASSIFICATION	2.472187146502686E-6	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999488089248189	WITHOUT_CLASSIFICATION	5.11910751811222E-5	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999053918273	WITHOUT_CLASSIFICATION	9.460817282284921E-8	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999970791075651	WITHOUT_CLASSIFICATION	2.920892434874482E-6	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999891508984476	WITHOUT_CLASSIFICATION	1.0849101552374702E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999958961705813	WITHOUT_CLASSIFICATION	4.103829418713809E-6	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999833357589384	WITHOUT_CLASSIFICATION	1.6664241061649444E-5	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9950824546798483	WITHOUT_CLASSIFICATION	0.004917545320151714	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999750375594564	WITHOUT_CLASSIFICATION	2.4962440543621947E-5	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999811079425115	WITHOUT_CLASSIFICATION	1.8892057488521764E-5	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999779809264158	WITHOUT_CLASSIFICATION	2.201907358431679E-5	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999850648726416	WITHOUT_CLASSIFICATION	1.4935127358530123E-5	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999780228752635	WITHOUT_CLASSIFICATION	2.1977124736520788E-5	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9996157674135052	WITHOUT_CLASSIFICATION	3.842325864948505E-4	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999997165282596	WITHOUT_CLASSIFICATION	2.834717403987231E-6	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989973763862	WITHOUT_CLASSIFICATION	1.0026236137252183E-6	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999806920640674	WITHOUT_CLASSIFICATION	1.930793593264256E-5	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9997425501039138	WITHOUT_CLASSIFICATION	2.574498960861899E-4	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999969910896663	WITHOUT_CLASSIFICATION	3.0089103337041828E-6	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999601435328184	WITHOUT_CLASSIFICATION	3.9856467181660625E-5	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9986296583735534	WITHOUT_CLASSIFICATION	0.0013703416264466022	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999590475253011	WITHOUT_CLASSIFICATION	4.095247469902519E-5	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9998591015762892	WITHOUT_CLASSIFICATION	1.4089842371071523E-4	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999918321383252	WITHOUT_CLASSIFICATION	8.167861674870025E-6	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999996306969757	WITHOUT_CLASSIFICATION	3.6930302432013374E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999823273305589	WITHOUT_CLASSIFICATION	1.7672669441136876E-5	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9947763135377575	WITHOUT_CLASSIFICATION	0.005223686462242379	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999659688071371	WITHOUT_CLASSIFICATION	3.403119286299686E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999590475253011	WITHOUT_CLASSIFICATION	4.095247469902519E-5	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999918507763188	WITHOUT_CLASSIFICATION	8.149223681135386E-6	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9998402222825361	WITHOUT_CLASSIFICATION	1.597777174637761E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999967437896096	WITHOUT_CLASSIFICATION	3.256210390462512E-6	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999979328205169	WITHOUT_CLASSIFICATION	2.0671794831462255E-6	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999766224239374	WITHOUT_CLASSIFICATION	2.3377576062614507E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9996307779773524	WITHOUT_CLASSIFICATION	3.6922202264756015E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999823273305589	WITHOUT_CLASSIFICATION	1.7672669441136876E-5	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999920998801722	WITHOUT_CLASSIFICATION	7.900119827752767E-6	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998391266753	WITHOUT_CLASSIFICATION	1.6087332470290178E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995272223949	WITHOUT_CLASSIFICATION	4.7277760511272994E-7	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999843478804166	WITHOUT_CLASSIFICATION	1.5652119583529072E-5	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999728308081027	WITHOUT_CLASSIFICATION	2.7169191897254885E-5	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959767004156	WITHOUT_CLASSIFICATION	4.023299584314854E-6	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999962262022262	WITHOUT_CLASSIFICATION	3.7737977739020677E-6	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999962262022262	WITHOUT_CLASSIFICATION	3.7737977739020677E-6	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999930371086947	WITHOUT_CLASSIFICATION	6.962891305316833E-6	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.999990239057984	WITHOUT_CLASSIFICATION	9.760942015914594E-6	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999672988126068	WITHOUT_CLASSIFICATION	3.270118739315066E-5	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.999974822617581	WITHOUT_CLASSIFICATION	2.5177382419023673E-5	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9998363342850547	WITHOUT_CLASSIFICATION	1.6366571494528802E-4	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856976333642	WITHOUT_CLASSIFICATION	1.430236663574975E-5	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597508781023	WITHOUT_CLASSIFICATION	4.0249121897608185E-5	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966364079472	WITHOUT_CLASSIFICATION	3.363592052640231E-6	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.999886531238403	WITHOUT_CLASSIFICATION	1.1346876159701601E-4	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776195611041	WITHOUT_CLASSIFICATION	2.2380438896014898E-5	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856976333642	WITHOUT_CLASSIFICATION	1.430236663574975E-5	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597508781023	WITHOUT_CLASSIFICATION	4.0249121897608185E-5	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966364079472	WITHOUT_CLASSIFICATION	3.363592052640231E-6	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.999996139442361	WITHOUT_CLASSIFICATION	3.860557638980306E-6	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9997158154842406	WITHOUT_CLASSIFICATION	2.841845157594932E-4	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999947586321892	WITHOUT_CLASSIFICATION	5.241367810714997E-6	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999925790190368	WITHOUT_CLASSIFICATION	7.420980963135691E-6	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999996069397099	WITHOUT_CLASSIFICATION	3.9306029015492735E-7	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999908449882248	WITHOUT_CLASSIFICATION	9.155011775234616E-6	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9991313772047654	WITHOUT_CLASSIFICATION	8.686227952346418E-4	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999707489015881	WITHOUT_CLASSIFICATION	2.9251098411905224E-5	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9997389687068654	WITHOUT_CLASSIFICATION	2.6103129313466173E-4	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999207376597296	WITHOUT_CLASSIFICATION	7.92623402704678E-5	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999986820398177	WITHOUT_CLASSIFICATION	1.3179601823153547E-6	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9956072917361699	WITHOUT_CLASSIFICATION	0.004392708263830114	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9994618102247983	WITHOUT_CLASSIFICATION	5.381897752016478E-4	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999929089561505	WITHOUT_CLASSIFICATION	7.0910438495466315E-6	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999954012065531	WITHOUT_CLASSIFICATION	4.598793446992804E-6	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999619432766154	WITHOUT_CLASSIFICATION	3.8056723384657937E-5	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999143735650038	WITHOUT_CLASSIFICATION	8.56264349962144E-5	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9994279331350254	WITHOUT_CLASSIFICATION	5.720668649746891E-4	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999949153354292	WITHOUT_CLASSIFICATION	5.08466457086669E-6	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999087372034281	WITHOUT_CLASSIFICATION	9.126279657197824E-5	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999327415272731	WITHOUT_CLASSIFICATION	6.725847272693306E-5	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998262931028674	WITHOUT_CLASSIFICATION	1.7370689713257115E-4	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999756726531153	WITHOUT_CLASSIFICATION	2.4327346884615415E-5	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999989609813962	WITHOUT_CLASSIFICATION	1.03901860380831E-6	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999991515141506	WITHOUT_CLASSIFICATION	8.48485849225423E-7	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998221127616703	WITHOUT_CLASSIFICATION	1.778872383296996E-4	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999832055085078	WITHOUT_CLASSIFICATION	1.6794491492105046E-5	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999905118586238	WITHOUT_CLASSIFICATION	9.488141376227516E-6	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999970353350847	WITHOUT_CLASSIFICATION	2.9646649153725065E-6	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868644910178	WITHOUT_CLASSIFICATION	1.3135508982242782E-5	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999053494745767	WITHOUT_CLASSIFICATION	9.465052542338146E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999824452718782	WITHOUT_CLASSIFICATION	1.7554728121919337E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999824452718782	WITHOUT_CLASSIFICATION	1.7554728121919337E-5	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999983637947473	WITHOUT_CLASSIFICATION	1.6362052527632776E-6	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999307078453095	WITHOUT_CLASSIFICATION	6.929215469058307E-5	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999988247469147	WITHOUT_CLASSIFICATION	1.1752530852952044E-5	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9987560785712478	WITHOUT_CLASSIFICATION	0.0012439214287522052	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999815381480411	WITHOUT_CLASSIFICATION	1.846185195883707E-5	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999771512434653	WITHOUT_CLASSIFICATION	2.2848756534787275E-5	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9995189052335507	WITHOUT_CLASSIFICATION	4.8109476644928387E-4	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999888379384797	WITHOUT_CLASSIFICATION	1.1162061520272122E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999655540445338	WITHOUT_CLASSIFICATION	3.444595546628015E-5	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841441977397	WITHOUT_CLASSIFICATION	1.5855802260209294E-5	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890522597636	WITHOUT_CLASSIFICATION	1.0947740236377012E-5	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999905451806228	WITHOUT_CLASSIFICATION	9.454819377307069E-6	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926498156351	WITHOUT_CLASSIFICATION	7.350184364921419E-6	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895222771024	WITHOUT_CLASSIFICATION	1.047772289763376E-5	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946809515649	WITHOUT_CLASSIFICATION	5.319048435234461E-6	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999847916974699	WITHOUT_CLASSIFICATION	1.5208302530168415E-5	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966158487371	WITHOUT_CLASSIFICATION	3.3841512628411932E-6	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933422775262	WITHOUT_CLASSIFICATION	6.657722473732631E-6	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999847925151873	WITHOUT_CLASSIFICATION	1.5207484812740823E-5	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972489634501	WITHOUT_CLASSIFICATION	2.7510365499488746E-6	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999666584165332	WITHOUT_CLASSIFICATION	3.33415834669175E-5	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999403896126642	WITHOUT_CLASSIFICATION	5.9610387335871446E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999942053727994	WITHOUT_CLASSIFICATION	5.79462720059281E-6	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9994634461082095	WITHOUT_CLASSIFICATION	5.36553891790502E-4	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999785222115551	WITHOUT_CLASSIFICATION	2.1477788444870943E-5	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999680171122944	WITHOUT_CLASSIFICATION	3.198288770545121E-5	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999430244120553	WITHOUT_CLASSIFICATION	5.6975587944657684E-5	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9997965654364455	WITHOUT_CLASSIFICATION	2.0343456355455798E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999942053727994	WITHOUT_CLASSIFICATION	5.79462720059281E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999942053727994	WITHOUT_CLASSIFICATION	5.79462720059281E-6	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9998596164805038	WITHOUT_CLASSIFICATION	1.4038351949618332E-4	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999968401939412	WITHOUT_CLASSIFICATION	3.159806058708526E-6	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.99999990157108	WITHOUT_CLASSIFICATION	9.842892007040955E-8	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999817681345706	WITHOUT_CLASSIFICATION	1.823186542939883E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999569078800925	WITHOUT_CLASSIFICATION	4.309211990746606E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999087372034281	WITHOUT_CLASSIFICATION	9.126279657197824E-5	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999945748949052	WITHOUT_CLASSIFICATION	5.42510509479212E-6	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999044944418867	WITHOUT_CLASSIFICATION	9.550555811328274E-5	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999986878604572	WITHOUT_CLASSIFICATION	1.3121395428155004E-6	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999866277361612	WITHOUT_CLASSIFICATION	1.3372263838867888E-5	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999990997676765	WITHOUT_CLASSIFICATION	9.002323234003498E-7	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999874059176388	WITHOUT_CLASSIFICATION	1.2594082361188237E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999964493055651	WITHOUT_CLASSIFICATION	3.5506944349830314E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999964493055651	WITHOUT_CLASSIFICATION	3.5506944349830314E-6	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999990914808671	WITHOUT_CLASSIFICATION	9.085191327800394E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999990914808671	WITHOUT_CLASSIFICATION	9.085191327800394E-7	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999728259103521	WITHOUT_CLASSIFICATION	2.7174089647845216E-5	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999917032059207	WITHOUT_CLASSIFICATION	8.29679407927932E-6	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9984934421449104	WITHOUT_CLASSIFICATION	0.0015065578550896095	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999606947237063	WITHOUT_CLASSIFICATION	3.93052762937449E-5	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9992588231786578	WITHOUT_CLASSIFICATION	7.411768213422736E-4	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999357838842706	WITHOUT_CLASSIFICATION	6.421611572935794E-5	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999184418888989	WITHOUT_CLASSIFICATION	8.155811110111073E-5	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999866476017958	WITHOUT_CLASSIFICATION	1.335239820408126E-5	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999703636566578	WITHOUT_CLASSIFICATION	2.9636343342180352E-5	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.999993994202391	WITHOUT_CLASSIFICATION	6.0057976090092965E-6	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999953014698325	WITHOUT_CLASSIFICATION	4.698530167463835E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997762500508587	WITHOUT_CLASSIFICATION	2.2374994914130331E-4	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999650338582334	WITHOUT_CLASSIFICATION	3.496614176667962E-5	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9998185264365028	WITHOUT_CLASSIFICATION	1.8147356349719528E-4	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999976133444016	WITHOUT_CLASSIFICATION	2.386655598379112E-6	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9998334209512117	WITHOUT_CLASSIFICATION	1.665790487882312E-4	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.999976087005815	WITHOUT_CLASSIFICATION	2.3912994184941658E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.999976087005815	WITHOUT_CLASSIFICATION	2.3912994184941658E-5	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999375284244545	WITHOUT_CLASSIFICATION	6.247157554542023E-5	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999701292146124	WITHOUT_CLASSIFICATION	2.9870785387623426E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999987494130063	WITHOUT_CLASSIFICATION	1.250586993743198E-6	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997373227813136	WITHOUT_CLASSIFICATION	2.6267721868653286E-4	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994008419083	WITHOUT_CLASSIFICATION	5.991580916455399E-7	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996666511174	WITHOUT_CLASSIFICATION	3.333488826501412E-7	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999965237756606	WITHOUT_CLASSIFICATION	3.4762243394285535E-6	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999953847700005	WITHOUT_CLASSIFICATION	4.615229999512694E-5	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999389706594358	WITHOUT_CLASSIFICATION	6.102934056424547E-5	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999970811917658	WITHOUT_CLASSIFICATION	2.918808234194864E-6	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9997495090868785	WITHOUT_CLASSIFICATION	2.504909131214622E-4	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999913759229561	WITHOUT_CLASSIFICATION	8.624077043957827E-6	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998527850574599	WITHOUT_CLASSIFICATION	1.4721494254012898E-4	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999776856900793	WITHOUT_CLASSIFICATION	2.2314309920799985E-5	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999752557188394	WITHOUT_CLASSIFICATION	2.474428116056909E-5	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9994510773623906	WITHOUT_CLASSIFICATION	5.489226376093325E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999973076714822	WITHOUT_CLASSIFICATION	2.6923285178740216E-6	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9994621692356199	WITHOUT_CLASSIFICATION	5.378307643801561E-4	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999363973043072	WITHOUT_CLASSIFICATION	6.360269569279516E-4	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999578810981911	WITHOUT_CLASSIFICATION	4.2118901808948954E-5	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999995434730752	WITHOUT_CLASSIFICATION	4.5652692483762594E-7	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999907621349096	WITHOUT_CLASSIFICATION	9.237865090428393E-6	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999914024591875	WITHOUT_CLASSIFICATION	8.597540812503655E-5	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999911914518684	WITHOUT_CLASSIFICATION	8.808548131492084E-6	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999889281145932	WITHOUT_CLASSIFICATION	1.1071885406798722E-5	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999899962989638	WITHOUT_CLASSIFICATION	1.0003701036195083E-4	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9998389270354471	WITHOUT_CLASSIFICATION	1.6107296455296173E-4	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9996000433784884	WITHOUT_CLASSIFICATION	3.999566215115645E-4	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999949116886953	WITHOUT_CLASSIFICATION	5.088311304769781E-6	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9997713495082018	WITHOUT_CLASSIFICATION	2.2865049179824845E-4	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999994919675573	WITHOUT_CLASSIFICATION	5.08032442560247E-7	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999013566181281	WITHOUT_CLASSIFICATION	9.864338187196029E-5	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9990767275208653	WITHOUT_CLASSIFICATION	9.232724791347279E-4	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9998995024504806	WITHOUT_CLASSIFICATION	1.0049754951930122E-4	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999814007478922	WITHOUT_CLASSIFICATION	1.8599252107752385E-5	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9998941239452299	WITHOUT_CLASSIFICATION	1.0587605477004591E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999900627207632	WITHOUT_CLASSIFICATION	9.937279236916553E-6	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9998682274301821	WITHOUT_CLASSIFICATION	1.3177256981798178E-4	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999589022001858	WITHOUT_CLASSIFICATION	4.109779981420251E-5	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999730628778293	WITHOUT_CLASSIFICATION	2.6937122170757082E-5	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999825848545322	WITHOUT_CLASSIFICATION	1.7415145467857854E-5	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999998385541269	WITHOUT_CLASSIFICATION	1.6144587310535285E-6	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999655053106394	WITHOUT_CLASSIFICATION	3.449468936050607E-5	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999822412743367	WITHOUT_CLASSIFICATION	1.7758725663366404E-5	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999997139984834	WITHOUT_CLASSIFICATION	2.860015166070551E-7	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997407857143467	WITHOUT_CLASSIFICATION	2.592142856533616E-4	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999812204052856	WITHOUT_CLASSIFICATION	1.8779594714472764E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9993906579767482	WITHOUT_CLASSIFICATION	6.093420232518114E-4	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9994884780224806	WITHOUT_CLASSIFICATION	5.115219775193655E-4	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9997447057190854	WITHOUT_CLASSIFICATION	2.552942809146386E-4	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999789172380813	WITHOUT_CLASSIFICATION	2.1082761918708212E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9982388438519597	WITHOUT_CLASSIFICATION	0.0017611561480402385	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999870243746821	WITHOUT_CLASSIFICATION	1.2975625317853147E-5	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999846290006037	WITHOUT_CLASSIFICATION	1.537099939635602E-5	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998511754771664	WITHOUT_CLASSIFICATION	1.4882452283359316E-4	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999670368344404	WITHOUT_CLASSIFICATION	3.296316555958778E-5	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999119442863339	WITHOUT_CLASSIFICATION	8.805571366605474E-5	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999829904996087	WITHOUT_CLASSIFICATION	1.700950039128437E-5	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999989312481042	WITHOUT_CLASSIFICATION	1.068751895805267E-6	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.999884228026391	WITHOUT_CLASSIFICATION	1.1577197360891158E-4	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999931789668253	WITHOUT_CLASSIFICATION	6.821033174681499E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999782488073349	WITHOUT_CLASSIFICATION	2.1751192665199718E-5	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999990009823979	WITHOUT_CLASSIFICATION	9.99017602057299E-7	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999968127737434	WITHOUT_CLASSIFICATION	3.1872262565701206E-6	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999982782248501	WITHOUT_CLASSIFICATION	1.7217751498476156E-6	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999807525322418	WITHOUT_CLASSIFICATION	1.9247467758174334E-5	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9996251450974091	WITHOUT_CLASSIFICATION	3.748549025909298E-4	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999944728128604	WITHOUT_CLASSIFICATION	5.527187139584998E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992148674517021	WITHOUT_CLASSIFICATION	7.851325482979549E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992148674517021	WITHOUT_CLASSIFICATION	7.851325482979549E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999974270484214	WITHOUT_CLASSIFICATION	2.5729515786117103E-6	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9995748766248925	WITHOUT_CLASSIFICATION	4.25123375107478E-4	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999562179007939	WITHOUT_CLASSIFICATION	4.378209920605035E-5	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999684073357019	WITHOUT_CLASSIFICATION	3.159266429815283E-5	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999219685513104	WITHOUT_CLASSIFICATION	7.803144868959748E-5	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999589068404054	WITHOUT_CLASSIFICATION	4.109315959463028E-5	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999255403678303	WITHOUT_CLASSIFICATION	7.44596321696446E-5	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999854685513538	WITHOUT_CLASSIFICATION	1.4531448646161604E-5	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9992938544088803	WITHOUT_CLASSIFICATION	7.0614559111967E-4	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999867344703212	WITHOUT_CLASSIFICATION	1.3265529678916114E-5	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9998815278558701	WITHOUT_CLASSIFICATION	1.1847214412988176E-4	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999796619133323	WITHOUT_CLASSIFICATION	2.0338086667660245E-5	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999859441713284	WITHOUT_CLASSIFICATION	1.4055828671687859E-5	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999996590790718	WITHOUT_CLASSIFICATION	3.409209281310429E-7	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999982194225953	WITHOUT_CLASSIFICATION	1.780577404705213E-5	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999714516555326	WITHOUT_CLASSIFICATION	2.8548344467360206E-5	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999914514972615	WITHOUT_CLASSIFICATION	8.548502738438165E-6	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.999737898500128	WITHOUT_CLASSIFICATION	2.6210149987205113E-4	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999181630132177	WITHOUT_CLASSIFICATION	8.183698678235327E-5	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999829913465416	WITHOUT_CLASSIFICATION	1.7008653458449535E-5	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999591082029634	WITHOUT_CLASSIFICATION	4.089179703667708E-5	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999815067313197	WITHOUT_CLASSIFICATION	1.8493268680353445E-5	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9996818467707257	WITHOUT_CLASSIFICATION	3.18153229274308E-4	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9995276277217955	WITHOUT_CLASSIFICATION	4.7237227820455627E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998648041184348	WITHOUT_CLASSIFICATION	1.351958815651545E-4	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999639830821574	WITHOUT_CLASSIFICATION	3.60169178425324E-5	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999707245791113	WITHOUT_CLASSIFICATION	2.927542088876153E-5	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999662680015745	WITHOUT_CLASSIFICATION	3.3731998425452164E-5	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999974840150371	WITHOUT_CLASSIFICATION	2.515984962974678E-6	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999995383414257	WITHOUT_CLASSIFICATION	4.616585743080265E-7	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999831726479113	WITHOUT_CLASSIFICATION	1.6827352088776476E-5	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999754249743976	WITHOUT_CLASSIFICATION	2.4575025602390448E-5	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999909143449465	WITHOUT_CLASSIFICATION	9.085655053451925E-6	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999845079232592	WITHOUT_CLASSIFICATION	1.549207674080012E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9989766406649675	WITHOUT_CLASSIFICATION	0.0010233593350324097	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9989766406649675	WITHOUT_CLASSIFICATION	0.0010233593350324097	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9992326351510022	WITHOUT_CLASSIFICATION	7.673648489976796E-4	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9998562024758136	WITHOUT_CLASSIFICATION	1.4379752418623593E-4	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999687993763847	WITHOUT_CLASSIFICATION	3.1200623615192396E-5	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999620258820059	WITHOUT_CLASSIFICATION	3.7974117994056006E-5	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.999974587725497	WITHOUT_CLASSIFICATION	2.541227450303242E-5	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9968854181395248	WITHOUT_CLASSIFICATION	0.003114581860475318	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999750420930077	WITHOUT_CLASSIFICATION	2.4957906992336452E-5	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999973046040314	WITHOUT_CLASSIFICATION	2.6953959686355426E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999975705642876	WITHOUT_CLASSIFICATION	2.4294357124735036E-6	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999792586179542	WITHOUT_CLASSIFICATION	2.0741382045750853E-5	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9998192501809368	WITHOUT_CLASSIFICATION	1.8074981906327395E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999207553744975	WITHOUT_CLASSIFICATION	7.924462550243246E-5	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999361858586545	WITHOUT_CLASSIFICATION	6.38141413455018E-4	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999718929416008	WITHOUT_CLASSIFICATION	2.8107058399115896E-5	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999991409348932	WITHOUT_CLASSIFICATION	8.590651068029624E-7	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999909163475104	WITHOUT_CLASSIFICATION	9.083652489605903E-5	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999909163475104	WITHOUT_CLASSIFICATION	9.083652489605903E-5	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.998341936145465	WITHOUT_CLASSIFICATION	0.0016580638545349486	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999823870399384	WITHOUT_CLASSIFICATION	1.761296006166713E-5	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999990054484517	WITHOUT_CLASSIFICATION	9.94551548297679E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999846923421579	WITHOUT_CLASSIFICATION	1.530765784207256E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997762500508587	WITHOUT_CLASSIFICATION	2.2374994914130331E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9862681150345638	WITHOUT_CLASSIFICATION	0.013731884965436179	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999993019915275	WITHOUT_CLASSIFICATION	6.980084723460993E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999971006388245	WITHOUT_CLASSIFICATION	2.8993611754874514E-6	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999971006388245	WITHOUT_CLASSIFICATION	2.8993611754874514E-6	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998497717143614	WITHOUT_CLASSIFICATION	1.50228285638572E-4	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999902678650777	WITHOUT_CLASSIFICATION	9.732134922308814E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9998693662357953	WITHOUT_CLASSIFICATION	1.3063376420481142E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.94156211670782	WITHOUT_CLASSIFICATION	0.058437883292180026	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999934474697914	WITHOUT_CLASSIFICATION	6.552530208653123E-6	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9994174578481806	WITHOUT_CLASSIFICATION	5.825421518193287E-4	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999471783706425	WITHOUT_CLASSIFICATION	5.2821629357511616E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999491783246272	WITHOUT_CLASSIFICATION	5.0821675372836934E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999964363308689	WITHOUT_CLASSIFICATION	3.5636691311139317E-6	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999376003561914	WITHOUT_CLASSIFICATION	6.23996438085901E-5	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995971528130769	WITHOUT_CLASSIFICATION	4.0284718692306813E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999628425689704	WITHOUT_CLASSIFICATION	3.715743102957431E-5	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999706689500264	WITHOUT_CLASSIFICATION	2.9331049973586214E-5	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999853307400884	WITHOUT_CLASSIFICATION	1.4669259911621478E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999931699834783	WITHOUT_CLASSIFICATION	6.830016521782793E-6	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999576584995489	WITHOUT_CLASSIFICATION	4.234150045109683E-5	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.99999730587319	WITHOUT_CLASSIFICATION	2.6941268099420983E-6	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999054871919403	WITHOUT_CLASSIFICATION	9.451280805970833E-5	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9997786093785435	WITHOUT_CLASSIFICATION	2.2139062145658025E-4	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999728553120767	WITHOUT_CLASSIFICATION	2.7144687923298976E-5	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999971063372353	WITHOUT_CLASSIFICATION	2.8936627647592002E-6	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999920739760394	WITHOUT_CLASSIFICATION	7.926023960539109E-6	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9996459693975311	WITHOUT_CLASSIFICATION	3.540306024688314E-4	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9997722426160134	WITHOUT_CLASSIFICATION	2.2775738398655965E-4	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999816799906357	WITHOUT_CLASSIFICATION	1.8320009364325187E-5	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999974058897264	WITHOUT_CLASSIFICATION	2.5941102736102044E-6	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999914859461045	WITHOUT_CLASSIFICATION	8.514053895430545E-6	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999918647275695	WITHOUT_CLASSIFICATION	8.135272430481764E-6	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999457949985997	WITHOUT_CLASSIFICATION	5.420500140035121E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999757360614976	WITHOUT_CLASSIFICATION	2.426393850248393E-5	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9997333127336863	WITHOUT_CLASSIFICATION	2.666872663137697E-4	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999427193795033	WITHOUT_CLASSIFICATION	5.728062049680209E-5	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999881698488696	WITHOUT_CLASSIFICATION	1.1830151130272126E-5	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999761212784423	WITHOUT_CLASSIFICATION	2.3878721557783423E-5	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999718014298691	WITHOUT_CLASSIFICATION	2.8198570130867487E-5	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998526180929825	WITHOUT_CLASSIFICATION	1.4738190701750668E-4	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9998956577740076	WITHOUT_CLASSIFICATION	1.0434222599250437E-4	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999800555222199	WITHOUT_CLASSIFICATION	1.994447778010421E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999880831566299	WITHOUT_CLASSIFICATION	1.1916843370177859E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999814036174574	WITHOUT_CLASSIFICATION	1.8596382542710555E-5	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999462887734478	WITHOUT_CLASSIFICATION	5.371122655213222E-5	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.999951119445726	WITHOUT_CLASSIFICATION	4.8880554274023454E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999471280882283	WITHOUT_CLASSIFICATION	5.2871911771777805E-5	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999267263055646	WITHOUT_CLASSIFICATION	7.327369443547627E-5	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999928737873259	WITHOUT_CLASSIFICATION	7.126212673984703E-6	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999558667594936	WITHOUT_CLASSIFICATION	4.413324050633632E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999880831566299	WITHOUT_CLASSIFICATION	1.1916843370177859E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999814036174574	WITHOUT_CLASSIFICATION	1.8596382542710555E-5	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999948215143888	WITHOUT_CLASSIFICATION	5.178485611177679E-6	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9997833753762345	WITHOUT_CLASSIFICATION	2.1662462376554833E-4	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999926624021003	WITHOUT_CLASSIFICATION	7.337597899720334E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999899968673951	WITHOUT_CLASSIFICATION	1.0003132604881403E-5	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999990999256995	WITHOUT_CLASSIFICATION	9.000743005027492E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999943666596607	WITHOUT_CLASSIFICATION	5.633340339354005E-6	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999871891630349	WITHOUT_CLASSIFICATION	1.2810836965248138E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9998946261149056	WITHOUT_CLASSIFICATION	1.053738850943751E-4	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999436096071997	WITHOUT_CLASSIFICATION	5.639039280026744E-5	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5967608698905951	WITHOUT_CLASSIFICATION	0.4032391301094049	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999796623913986	WITHOUT_CLASSIFICATION	2.0337608601376345E-5	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5967608698905951	WITHOUT_CLASSIFICATION	0.4032391301094049	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999591161805131	WITHOUT_CLASSIFICATION	4.0883819486853886E-5	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999642768656924	WITHOUT_CLASSIFICATION	3.572313430747539E-5	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999478617470603	WITHOUT_CLASSIFICATION	5.213825293982879E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987020912827	WITHOUT_CLASSIFICATION	1.2979087172694137E-6	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999850101170624	WITHOUT_CLASSIFICATION	1.4989882937504566E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.998533790472529	WITHOUT_CLASSIFICATION	0.0014662095274709708	DEFECT
//}	WITHOUT_CLASSIFICATION	0.998533790472529	WITHOUT_CLASSIFICATION	0.0014662095274709708	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999815596722972	WITHOUT_CLASSIFICATION	1.8440327702821533E-5	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999944382778257	WITHOUT_CLASSIFICATION	5.561722174230375E-6	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999927020710742	WITHOUT_CLASSIFICATION	7.297928925808909E-6	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999299853581461	WITHOUT_CLASSIFICATION	7.001464185385348E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999312102115562	WITHOUT_CLASSIFICATION	6.878978844381873E-5	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999952372807084	WITHOUT_CLASSIFICATION	4.762719291664255E-6	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999900765478982	WITHOUT_CLASSIFICATION	9.923452101781096E-6	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999953228545346	WITHOUT_CLASSIFICATION	4.677145465390044E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999048945699348	WITHOUT_CLASSIFICATION	9.510543006508686E-5	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9996247715053693	WITHOUT_CLASSIFICATION	3.752284946306608E-4	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999650251786981	WITHOUT_CLASSIFICATION	3.4974821301771574E-5	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999665241825892	WITHOUT_CLASSIFICATION	3.3475817410733454E-5	DEFECT
//types	WITHOUT_CLASSIFICATION	0.999831420446459	WITHOUT_CLASSIFICATION	1.6857955354103338E-4	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999674264595363	WITHOUT_CLASSIFICATION	3.25735404636816E-5	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999901309089221	WITHOUT_CLASSIFICATION	9.86909107800597E-6	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999882509099539	WITHOUT_CLASSIFICATION	1.1749090045973874E-5	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999907457378135	WITHOUT_CLASSIFICATION	9.254262186422178E-6	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999827389779525	WITHOUT_CLASSIFICATION	1.72610220473764E-5	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999960381362287	WITHOUT_CLASSIFICATION	3.961863771237866E-6	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9974068247585428	WITHOUT_CLASSIFICATION	0.0025931752414572818	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999870209741659	WITHOUT_CLASSIFICATION	1.2979025834033875E-5	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9997956991762335	WITHOUT_CLASSIFICATION	2.0430082376642837E-4	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999832917355197	WITHOUT_CLASSIFICATION	1.6708264480257726E-5	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999934411672472	WITHOUT_CLASSIFICATION	6.558832752866557E-6	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999862269805433	WITHOUT_CLASSIFICATION	1.3773019456736401E-5	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9991871028772791	WITHOUT_CLASSIFICATION	8.12897122720886E-4	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999846964117839	WITHOUT_CLASSIFICATION	1.530358821603431E-5	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9997606313875275	WITHOUT_CLASSIFICATION	2.3936861247257274E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999811824045858	WITHOUT_CLASSIFICATION	1.8817595414214097E-5	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999878021095241	WITHOUT_CLASSIFICATION	1.2197890475868056E-5	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9867996957877103	WITHOUT_CLASSIFICATION	0.013200304212289665	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9997962444989347	WITHOUT_CLASSIFICATION	2.0375550106520483E-4	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999900765478982	WITHOUT_CLASSIFICATION	9.923452101781096E-6	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999413316665121	WITHOUT_CLASSIFICATION	5.866833348789685E-5	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999596075117125	WITHOUT_CLASSIFICATION	4.0392488287433316E-5	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.6394587279395666	DEFECT	0.3605412720604335	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.9998701619133064	WITHOUT_CLASSIFICATION	1.2983808669374226E-4	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999976933872975	WITHOUT_CLASSIFICATION	2.306612702530073E-6	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999853564816145	WITHOUT_CLASSIFICATION	1.46435183854914E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999299853581461	WITHOUT_CLASSIFICATION	7.001464185385348E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999299853581461	WITHOUT_CLASSIFICATION	7.001464185385348E-5	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999961595245956	WITHOUT_CLASSIFICATION	3.840475404333751E-6	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999760491349288	WITHOUT_CLASSIFICATION	2.395086507119326E-5	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999740698562222	WITHOUT_CLASSIFICATION	2.5930143777797957E-5	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999889148236726	WITHOUT_CLASSIFICATION	1.1085176327392616E-5	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999724499651887	WITHOUT_CLASSIFICATION	2.7550034811287E-5	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999366309358573	WITHOUT_CLASSIFICATION	6.336906414274439E-5	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999488899840966	WITHOUT_CLASSIFICATION	5.1110015903474755E-5	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999736222211616	WITHOUT_CLASSIFICATION	2.6377778838484152E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999229933738687	WITHOUT_CLASSIFICATION	7.700662613133718E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999953415793563	WITHOUT_CLASSIFICATION	4.658420643644988E-6	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999977157401641	WITHOUT_CLASSIFICATION	2.284259835911106E-5	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9961753796228842	WITHOUT_CLASSIFICATION	0.003824620377115803	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.999926556338922	WITHOUT_CLASSIFICATION	7.344366107796378E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999953415793563	WITHOUT_CLASSIFICATION	4.658420643644988E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999870188699428	WITHOUT_CLASSIFICATION	1.2981130057200183E-4	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9995898809963235	WITHOUT_CLASSIFICATION	4.101190036764329E-4	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999255884149778	WITHOUT_CLASSIFICATION	7.441158502216285E-5	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.6950354349978269	DEFECT	0.30496456500217317	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9961753796228842	WITHOUT_CLASSIFICATION	0.003824620377115803	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999740729743477	WITHOUT_CLASSIFICATION	2.5927025652188782E-5	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9998920293993261	WITHOUT_CLASSIFICATION	1.0797060067391108E-4	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999977756835405	WITHOUT_CLASSIFICATION	2.2243164594324515E-6	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999670765147591	WITHOUT_CLASSIFICATION	3.2923485240874415E-5	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9989684550252906	WITHOUT_CLASSIFICATION	0.0010315449747093242	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999750620994812	WITHOUT_CLASSIFICATION	2.4937900518917182E-5	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.99993794842704	WITHOUT_CLASSIFICATION	6.205157295996859E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999635638311053	WITHOUT_CLASSIFICATION	3.6436168894673984E-5	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999962543011895	WITHOUT_CLASSIFICATION	3.7456988104039146E-6	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999981578823613	WITHOUT_CLASSIFICATION	1.8421176385490463E-6	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999959285430748	WITHOUT_CLASSIFICATION	4.0714569252024115E-6	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999903079062037	WITHOUT_CLASSIFICATION	9.692093796306869E-6	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999953415793563	WITHOUT_CLASSIFICATION	4.658420643644988E-6	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999740729743477	WITHOUT_CLASSIFICATION	2.5927025652188782E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999977756835405	WITHOUT_CLASSIFICATION	2.2243164594324515E-6	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9996693761012556	WITHOUT_CLASSIFICATION	3.3062389874445684E-4	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999905925734967	WITHOUT_CLASSIFICATION	9.407426503311113E-6	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999505223033565	WITHOUT_CLASSIFICATION	4.947769664358314E-5	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9961753796228842	WITHOUT_CLASSIFICATION	0.003824620377115803	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999945783293998	WITHOUT_CLASSIFICATION	5.42167060025351E-6	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999375867711698	WITHOUT_CLASSIFICATION	6.241322883019936E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998481159830849	WITHOUT_CLASSIFICATION	1.5188401691504957E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999875185383496	WITHOUT_CLASSIFICATION	1.2481461650403172E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999635638311053	WITHOUT_CLASSIFICATION	3.6436168894673984E-5	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999870188699428	WITHOUT_CLASSIFICATION	1.2981130057200183E-4	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999096979331474	WITHOUT_CLASSIFICATION	9.030206685251535E-5	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999681679670845	WITHOUT_CLASSIFICATION	3.183203291540189E-5	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999910265083745	WITHOUT_CLASSIFICATION	8.973491625555666E-6	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999368537706751	WITHOUT_CLASSIFICATION	6.314622932487882E-5	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999013978849951	WITHOUT_CLASSIFICATION	9.860211500494907E-5	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999096236282877	WITHOUT_CLASSIFICATION	9.03763717122713E-5	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.999771010409918	WITHOUT_CLASSIFICATION	2.2898959008186236E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987020912827	WITHOUT_CLASSIFICATION	1.2979087172694137E-6	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998176837025	WITHOUT_CLASSIFICATION	1.8231629749697567E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998191264659457	WITHOUT_CLASSIFICATION	1.8087353405414532E-4	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999568755865628	WITHOUT_CLASSIFICATION	4.3124413437313345E-5	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9993408666830763	WITHOUT_CLASSIFICATION	6.591333169237126E-4	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9998049413579703	WITHOUT_CLASSIFICATION	1.9505864202961685E-4	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9998833772405685	WITHOUT_CLASSIFICATION	1.166227594314208E-4	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999978802941818	WITHOUT_CLASSIFICATION	2.1197058182333927E-6	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999855110853973	WITHOUT_CLASSIFICATION	1.4488914602670125E-5	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999991592834027	WITHOUT_CLASSIFICATION	8.407165974028407E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999875185383496	WITHOUT_CLASSIFICATION	1.2481461650403172E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998191264659457	WITHOUT_CLASSIFICATION	1.8087353405414532E-4	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9996981609352352	WITHOUT_CLASSIFICATION	3.0183906476479117E-4	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.999821668226763	WITHOUT_CLASSIFICATION	1.7833177323702977E-4	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.999799673329751	WITHOUT_CLASSIFICATION	2.0032667024906926E-4	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999732955539155	WITHOUT_CLASSIFICATION	2.6704446084669187E-5	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9994885989708923	WITHOUT_CLASSIFICATION	5.114010291076753E-4	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999985815607486	WITHOUT_CLASSIFICATION	1.41843925139428E-6	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999146958353353	WITHOUT_CLASSIFICATION	8.530416466467215E-5	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9993616545951926	WITHOUT_CLASSIFICATION	6.38345404807371E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999980931171008	WITHOUT_CLASSIFICATION	1.9068828991616868E-6	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998320843301122	WITHOUT_CLASSIFICATION	1.6791566988790026E-4	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999874415597132	WITHOUT_CLASSIFICATION	1.2558440286715534E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998541966594946	WITHOUT_CLASSIFICATION	1.4580334050543162E-4	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999182469243812	WITHOUT_CLASSIFICATION	8.17530756186778E-5	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998742441123224	WITHOUT_CLASSIFICATION	1.2575588767764598E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.999545833692947	WITHOUT_CLASSIFICATION	4.5416630705286836E-4	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999914361550558	WITHOUT_CLASSIFICATION	8.563844944150046E-6	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999985684965405	WITHOUT_CLASSIFICATION	1.4315034596399647E-6	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999971221250111	WITHOUT_CLASSIFICATION	2.8778749889229177E-6	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999094546680278	WITHOUT_CLASSIFICATION	9.054533197223758E-5	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9998779437515649	WITHOUT_CLASSIFICATION	1.2205624843507949E-4	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9999118937456861	WITHOUT_CLASSIFICATION	8.810625431387969E-5	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999999081655686	WITHOUT_CLASSIFICATION	9.183443140873542E-7	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999977628910393	WITHOUT_CLASSIFICATION	2.2371089607394145E-6	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999761030308708	WITHOUT_CLASSIFICATION	2.3896969129188906E-5	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999989056217259	WITHOUT_CLASSIFICATION	1.0943782741351784E-6	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8337165296475084	WITHOUT_CLASSIFICATION	0.16628347035249155	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9995449974913402	WITHOUT_CLASSIFICATION	4.550025086598718E-4	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9990571887461607	WITHOUT_CLASSIFICATION	9.428112538391798E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9995812158483551	WITHOUT_CLASSIFICATION	4.1878415164487104E-4	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5017356656195389	WITHOUT_CLASSIFICATION	0.49826433438046125	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998361911133471	WITHOUT_CLASSIFICATION	1.6380888665285976E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9994616623238014	WITHOUT_CLASSIFICATION	5.383376761985371E-4	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999776033237345	WITHOUT_CLASSIFICATION	2.2396676265447467E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999974141158118	WITHOUT_CLASSIFICATION	2.585884188190558E-6	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999722219560467	WITHOUT_CLASSIFICATION	2.7778043953255166E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999890064116719	WITHOUT_CLASSIFICATION	1.0993588328158863E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999905934664817	WITHOUT_CLASSIFICATION	9.406533518329875E-6	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999960172595762	WITHOUT_CLASSIFICATION	3.982740423745215E-6	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999890064116719	WITHOUT_CLASSIFICATION	1.0993588328158863E-5	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999722219560467	WITHOUT_CLASSIFICATION	2.7778043953255166E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999905934664817	WITHOUT_CLASSIFICATION	9.406533518329875E-6	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999935179272099	WITHOUT_CLASSIFICATION	6.48207279007543E-6	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999961703197047	WITHOUT_CLASSIFICATION	3.829680295252933E-6	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999916836251969	WITHOUT_CLASSIFICATION	8.316374803228668E-6	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999497232382624	WITHOUT_CLASSIFICATION	5.027676173752787E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999581226476	WITHOUT_CLASSIFICATION	4.1877352477818033E-8	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8878274545457141	WITHOUT_CLASSIFICATION	0.11217254545428591	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9951841034811707	WITHOUT_CLASSIFICATION	0.004815896518829292	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999690169874688	WITHOUT_CLASSIFICATION	3.0983012531296934E-5	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999237255688167	WITHOUT_CLASSIFICATION	7.627443118326209E-5	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9997595148011843	WITHOUT_CLASSIFICATION	2.4048519881559612E-4	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999792153146286	WITHOUT_CLASSIFICATION	2.078468537136649E-5	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999709992242811	WITHOUT_CLASSIFICATION	2.9000775718802984E-5	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999983894388121	WITHOUT_CLASSIFICATION	1.6105611878128209E-6	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9997347361036834	WITHOUT_CLASSIFICATION	2.652638963167258E-4	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999993554639314	WITHOUT_CLASSIFICATION	6.44536068576674E-7	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999876280819653	WITHOUT_CLASSIFICATION	1.2371918034851831E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999810182587009	WITHOUT_CLASSIFICATION	1.8981741299194226E-5	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9997917993597485	WITHOUT_CLASSIFICATION	2.0820064025152177E-4	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999986601469388	WITHOUT_CLASSIFICATION	1.3398530612215135E-6	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999852426711467	WITHOUT_CLASSIFICATION	1.4757328853306895E-5	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9997841113626164	WITHOUT_CLASSIFICATION	2.1588863738373844E-4	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999675819102486	WITHOUT_CLASSIFICATION	3.241808975137966E-5	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999541438732835	WITHOUT_CLASSIFICATION	4.585612671639166E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999827370054503	WITHOUT_CLASSIFICATION	1.7262994549647615E-5	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.999982273063252	WITHOUT_CLASSIFICATION	1.772693674805841E-5	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.999982273063252	WITHOUT_CLASSIFICATION	1.772693674805841E-5	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999244708302887	WITHOUT_CLASSIFICATION	7.552916971131427E-5	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999244708302887	WITHOUT_CLASSIFICATION	7.552916971131427E-5	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999683237638294	WITHOUT_CLASSIFICATION	3.1676236170624994E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999810182587009	WITHOUT_CLASSIFICATION	1.8981741299194226E-5	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999959755636049	WITHOUT_CLASSIFICATION	4.024436395117588E-6	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999995436622657	WITHOUT_CLASSIFICATION	4.563377343021672E-6	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999943544059481	WITHOUT_CLASSIFICATION	5.645594051853738E-6	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999943544059481	WITHOUT_CLASSIFICATION	5.645594051853738E-6	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9998822858875557	WITHOUT_CLASSIFICATION	1.1771411244428468E-4	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999818810054327	WITHOUT_CLASSIFICATION	1.811899456728952E-5	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999973823354883	WITHOUT_CLASSIFICATION	2.617664511727141E-6	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999774869187888	WITHOUT_CLASSIFICATION	2.25130812112496E-5	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9984977666596005	WITHOUT_CLASSIFICATION	0.001502233340399409	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9993738244977715	WITHOUT_CLASSIFICATION	6.261755022286418E-4	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999287251803979	WITHOUT_CLASSIFICATION	7.127481960215079E-5	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999886481201837	WITHOUT_CLASSIFICATION	1.1351879816374129E-5	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9998524694213203	WITHOUT_CLASSIFICATION	1.475305786797036E-4	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.999179138386566	WITHOUT_CLASSIFICATION	8.20861613433928E-4	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9996444020481423	WITHOUT_CLASSIFICATION	3.555979518577669E-4	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9997496903422025	WITHOUT_CLASSIFICATION	2.503096577975059E-4	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999912855318707	WITHOUT_CLASSIFICATION	8.714468129389272E-6	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999580744732187	WITHOUT_CLASSIFICATION	4.192552678130404E-5	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9995193966712492	WITHOUT_CLASSIFICATION	4.8060332875079446E-4	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999966330778826	WITHOUT_CLASSIFICATION	3.3669221174000744E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870995079705	WITHOUT_CLASSIFICATION	1.290049202959287E-5	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999871530475731	WITHOUT_CLASSIFICATION	1.2846952426916457E-5	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.999934713048355	WITHOUT_CLASSIFICATION	6.528695164498548E-5	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999987796998228	WITHOUT_CLASSIFICATION	1.2203001772536958E-6	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999941324060833	WITHOUT_CLASSIFICATION	5.867593916801935E-6	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999959491543023	WITHOUT_CLASSIFICATION	4.050845697661443E-6	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999973230809411	WITHOUT_CLASSIFICATION	2.676919058897909E-6	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999694256347773	WITHOUT_CLASSIFICATION	3.0574365222661076E-5	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9987560785712478	WITHOUT_CLASSIFICATION	0.0012439214287522052	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999744777918992	WITHOUT_CLASSIFICATION	2.5522208100791116E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998191264659457	WITHOUT_CLASSIFICATION	1.8087353405414532E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998541966594946	WITHOUT_CLASSIFICATION	1.4580334050543162E-4	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998472969797366	WITHOUT_CLASSIFICATION	1.5270302026335338E-4	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.99993600776767	WITHOUT_CLASSIFICATION	6.399223232998145E-5	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999980467273218	WITHOUT_CLASSIFICATION	1.953272678203716E-5	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999719837074662	WITHOUT_CLASSIFICATION	2.8016292533811554E-5	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.99982900350924	WITHOUT_CLASSIFICATION	1.7099649076013105E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.99982900350924	WITHOUT_CLASSIFICATION	1.7099649076013105E-4	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999741220764979	WITHOUT_CLASSIFICATION	2.5877923502178165E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999520301278613	WITHOUT_CLASSIFICATION	4.796987213876638E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9997967467128057	WITHOUT_CLASSIFICATION	2.0325328719435865E-4	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9997967467128057	WITHOUT_CLASSIFICATION	2.0325328719435865E-4	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9991843036426606	WITHOUT_CLASSIFICATION	8.156963573392855E-4	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998779466892339	WITHOUT_CLASSIFICATION	1.2205331076614656E-4	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.999783407205484	WITHOUT_CLASSIFICATION	2.1659279451604024E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999569078800925	WITHOUT_CLASSIFICATION	4.309211990746606E-5	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999639166890415	WITHOUT_CLASSIFICATION	3.608331095850994E-5	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998454030598538	WITHOUT_CLASSIFICATION	1.5459694014613128E-4	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999593490019665	WITHOUT_CLASSIFICATION	4.065099803348493E-5	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999913136186414	WITHOUT_CLASSIFICATION	8.686381358655236E-6	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999264867648713	WITHOUT_CLASSIFICATION	7.351323512869033E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999264867648713	WITHOUT_CLASSIFICATION	7.351323512869033E-5	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999866832412914	WITHOUT_CLASSIFICATION	1.3316758708537762E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999915127106417	WITHOUT_CLASSIFICATION	8.48728935832377E-6	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999915127106417	WITHOUT_CLASSIFICATION	8.48728935832377E-6	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999404253798029	WITHOUT_CLASSIFICATION	5.957462019708156E-5	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999988625989894	WITHOUT_CLASSIFICATION	1.137401010571407E-6	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9383520828136099	WITHOUT_CLASSIFICATION	0.06164791718639016	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999934538344991	WITHOUT_CLASSIFICATION	6.546165500868402E-6	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999984200417199	WITHOUT_CLASSIFICATION	1.5799582801208385E-6	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.999996541573903	WITHOUT_CLASSIFICATION	3.45842609706506E-6	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999971381307016	WITHOUT_CLASSIFICATION	2.8618692983399765E-6	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999714092740944	WITHOUT_CLASSIFICATION	2.859072590565049E-5	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999901708128149	WITHOUT_CLASSIFICATION	9.82918718503393E-6	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.999548444812252	WITHOUT_CLASSIFICATION	4.5155518774796975E-4	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999882435362433	WITHOUT_CLASSIFICATION	1.1756463756741368E-5	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999399000985144	WITHOUT_CLASSIFICATION	6.009990148565789E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9989841996834735	WITHOUT_CLASSIFICATION	0.0010158003165264362	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9989841996834735	WITHOUT_CLASSIFICATION	0.0010158003165264362	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9989841996834735	WITHOUT_CLASSIFICATION	0.0010158003165264362	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9989841996834735	WITHOUT_CLASSIFICATION	0.0010158003165264362	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999753139194383	WITHOUT_CLASSIFICATION	2.4686080561790702E-5	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998764217226088	WITHOUT_CLASSIFICATION	1.2357827739123517E-4	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998242720907935	WITHOUT_CLASSIFICATION	1.757279092065357E-4	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9996032032860939	WITHOUT_CLASSIFICATION	3.967967139060774E-4	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999993344594558	WITHOUT_CLASSIFICATION	6.655405441964879E-6	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999314439972576	WITHOUT_CLASSIFICATION	6.855600274230452E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997762500508587	WITHOUT_CLASSIFICATION	2.2374994914130331E-4	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999629559124099	WITHOUT_CLASSIFICATION	3.704408759001855E-5	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997726640355934	WITHOUT_CLASSIFICATION	2.273359644065195E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997762500508587	WITHOUT_CLASSIFICATION	2.2374994914130331E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997762500508587	WITHOUT_CLASSIFICATION	2.2374994914130331E-4	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999991724473477	WITHOUT_CLASSIFICATION	8.275526523764929E-7	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999381549178564	WITHOUT_CLASSIFICATION	6.184508214365007E-5	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999937785331171	WITHOUT_CLASSIFICATION	6.221466882940703E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999600408078212	WITHOUT_CLASSIFICATION	3.995919217873056E-5	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999962049373811	WITHOUT_CLASSIFICATION	3.7950626189854915E-6	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.998750174992983	WITHOUT_CLASSIFICATION	0.0012498250070169382	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999964829939105	WITHOUT_CLASSIFICATION	3.5170060894939667E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999600408078212	WITHOUT_CLASSIFICATION	3.995919217873056E-5	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9991970464434057	WITHOUT_CLASSIFICATION	8.029535565944152E-4	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9996026268039083	WITHOUT_CLASSIFICATION	3.973731960916247E-4	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999894578467957	WITHOUT_CLASSIFICATION	1.0542153204237442E-5	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999926980461254	WITHOUT_CLASSIFICATION	7.30195387460251E-5	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9996744969453539	WITHOUT_CLASSIFICATION	3.255030546461217E-4	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998898955896384	WITHOUT_CLASSIFICATION	1.1010441036160096E-4	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999618838168827	WITHOUT_CLASSIFICATION	3.811618311736454E-5	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9997775077276506	WITHOUT_CLASSIFICATION	2.2249227234938932E-4	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981780351801	WITHOUT_CLASSIFICATION	1.8219648198941733E-6	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999819383201014	WITHOUT_CLASSIFICATION	1.806167989859613E-5	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981045545111	WITHOUT_CLASSIFICATION	1.8954454888036606E-6	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999495894651278	WITHOUT_CLASSIFICATION	5.041053487230917E-5	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9997485190057657	WITHOUT_CLASSIFICATION	2.5148099423426637E-4	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996627932276531	WITHOUT_CLASSIFICATION	3.372067723469964E-4	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999492055144743	WITHOUT_CLASSIFICATION	5.079448552571523E-5	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999872868208726	WITHOUT_CLASSIFICATION	1.2713179127498077E-5	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999846818265782	WITHOUT_CLASSIFICATION	1.531817342186094E-5	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999847487488357	WITHOUT_CLASSIFICATION	1.5251251164183103E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999977290551694	WITHOUT_CLASSIFICATION	2.2709448305922254E-5	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999847487488357	WITHOUT_CLASSIFICATION	1.5251251164183103E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999985846705597	WITHOUT_CLASSIFICATION	1.4153294403044977E-5	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999124125014354	WITHOUT_CLASSIFICATION	8.758749856458807E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999805608958648	WITHOUT_CLASSIFICATION	1.943910413521718E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999486255621989	WITHOUT_CLASSIFICATION	5.137443780115416E-5	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999846818265782	WITHOUT_CLASSIFICATION	1.531817342186094E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999977290551694	WITHOUT_CLASSIFICATION	2.2709448305922254E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999985846705597	WITHOUT_CLASSIFICATION	1.4153294403044977E-5	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999557353810169	WITHOUT_CLASSIFICATION	4.426461898304148E-5	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9996920930314138	WITHOUT_CLASSIFICATION	3.079069685862075E-4	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9998696286553563	WITHOUT_CLASSIFICATION	1.3037134464366178E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9998562690507372	WITHOUT_CLASSIFICATION	1.4373094926279135E-4	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998951240486746	WITHOUT_CLASSIFICATION	1.0487595132539826E-4	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998420679050619	WITHOUT_CLASSIFICATION	1.5793209493805235E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870995079705	WITHOUT_CLASSIFICATION	1.290049202959287E-5	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999124125014354	WITHOUT_CLASSIFICATION	8.758749856458807E-5	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999993925807357	WITHOUT_CLASSIFICATION	6.074192641980177E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9946866708166722	WITHOUT_CLASSIFICATION	0.0053133291833278055	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999981550382638	WITHOUT_CLASSIFICATION	1.8449617361360397E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870995079705	WITHOUT_CLASSIFICATION	1.290049202959287E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998191264659457	WITHOUT_CLASSIFICATION	1.8087353405414532E-4	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999824846239239	WITHOUT_CLASSIFICATION	1.7515376076032336E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870995079705	WITHOUT_CLASSIFICATION	1.290049202959287E-5	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999993879528948	WITHOUT_CLASSIFICATION	6.120471051944498E-6	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999434692074959	WITHOUT_CLASSIFICATION	5.6530792504136855E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998191264659457	WITHOUT_CLASSIFICATION	1.8087353405414532E-4	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999725498691627	WITHOUT_CLASSIFICATION	2.7450130837303443E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999860914085061	WITHOUT_CLASSIFICATION	1.3908591493822183E-5	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999914712905664	WITHOUT_CLASSIFICATION	8.528709433539375E-6	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999422426129634	WITHOUT_CLASSIFICATION	5.775738703653253E-5	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999499699341076	WITHOUT_CLASSIFICATION	5.0030065892336415E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999829814525142	WITHOUT_CLASSIFICATION	1.7018547485802274E-5	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999902345811186	WITHOUT_CLASSIFICATION	9.76541888133417E-6	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999859183596446	WITHOUT_CLASSIFICATION	1.408164035549305E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992148674517021	WITHOUT_CLASSIFICATION	7.851325482979549E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999958187323019	WITHOUT_CLASSIFICATION	4.1812676981015165E-6	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9383520828136099	WITHOUT_CLASSIFICATION	0.06164791718639016	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999668929087406	WITHOUT_CLASSIFICATION	3.3107091259246396E-5	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9985811901541465	WITHOUT_CLASSIFICATION	0.001418809845853537	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999860518903374	WITHOUT_CLASSIFICATION	1.3948109662518428E-5	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999731942676434	WITHOUT_CLASSIFICATION	2.680573235662982E-5	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999986247128664	WITHOUT_CLASSIFICATION	1.375287133684285E-6	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999998864385033	WITHOUT_CLASSIFICATION	1.1356149669359467E-6	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999122742555936	WITHOUT_CLASSIFICATION	8.772574440630727E-5	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999588724805836	WITHOUT_CLASSIFICATION	4.1127519416308956E-5	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999806560580468	WITHOUT_CLASSIFICATION	1.9343941953315563E-5	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999846152973159	WITHOUT_CLASSIFICATION	1.5384702684197606E-5	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9383719271356811	WITHOUT_CLASSIFICATION	0.06162807286431887	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999737141394525	WITHOUT_CLASSIFICATION	2.6285860547524237E-5	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999755273290716	WITHOUT_CLASSIFICATION	2.447267092845621E-5	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999953587243886	WITHOUT_CLASSIFICATION	4.6412756113547845E-6	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.99999240790435	WITHOUT_CLASSIFICATION	7.592095649991929E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9980275361357157	WITHOUT_CLASSIFICATION	0.00197246386428423	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999987558461706	WITHOUT_CLASSIFICATION	1.244153829318238E-6	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999957638840361	WITHOUT_CLASSIFICATION	4.236115963868809E-6	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999975654635592	WITHOUT_CLASSIFICATION	2.4345364406912418E-6	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999621120436016	WITHOUT_CLASSIFICATION	3.7887956398423055E-5	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9993152106837275	WITHOUT_CLASSIFICATION	6.847893162724355E-4	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9522792096547679	WITHOUT_CLASSIFICATION	0.04772079034523215	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999556696884451	WITHOUT_CLASSIFICATION	4.433031155495042E-5	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9998832434990637	WITHOUT_CLASSIFICATION	1.1675650093622476E-4	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9999635431129945	WITHOUT_CLASSIFICATION	3.64568870054814E-5	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9984870205277577	WITHOUT_CLASSIFICATION	0.0015129794722422108	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9994652296589486	WITHOUT_CLASSIFICATION	5.347703410514391E-4	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9389184608609058	WITHOUT_CLASSIFICATION	0.06108153913909413	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999917442328002	WITHOUT_CLASSIFICATION	8.255767199735559E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998191264659457	WITHOUT_CLASSIFICATION	1.8087353405414532E-4	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999957909157825	WITHOUT_CLASSIFICATION	4.209084217496074E-6	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9989624436876996	WITHOUT_CLASSIFICATION	0.0010375563123003477	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9989624436876996	WITHOUT_CLASSIFICATION	0.0010375563123003477	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9990876096422155	WITHOUT_CLASSIFICATION	9.123903577844998E-4	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999829814525142	WITHOUT_CLASSIFICATION	1.7018547485802274E-5	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9986442783927132	WITHOUT_CLASSIFICATION	0.0013557216072868543	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999979555363676	WITHOUT_CLASSIFICATION	2.044463632407799E-5	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999059243710055	WITHOUT_CLASSIFICATION	9.407562899459528E-5	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999978388743418	WITHOUT_CLASSIFICATION	2.1611256582141156E-6	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.999975372120762	WITHOUT_CLASSIFICATION	2.462787923796122E-5	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9980881565412056	WITHOUT_CLASSIFICATION	0.0019118434587944329	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999984300876512	WITHOUT_CLASSIFICATION	1.569912348825465E-6	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999864376884564	WITHOUT_CLASSIFICATION	1.3562311543653763E-5	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999864692958516	WITHOUT_CLASSIFICATION	1.3530704148427498E-5	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.999991485188018	WITHOUT_CLASSIFICATION	8.51481198208004E-6	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9996641327816196	WITHOUT_CLASSIFICATION	3.35867218380434E-4	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999706191572436	WITHOUT_CLASSIFICATION	2.9380842756438948E-5	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999445886950858	WITHOUT_CLASSIFICATION	5.541130491420701E-5	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9975118786874315	WITHOUT_CLASSIFICATION	0.0024881213125684835	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998517284607453	WITHOUT_CLASSIFICATION	1.48271539254711E-4	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999858488786202	WITHOUT_CLASSIFICATION	1.415112137988597E-5	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999908884967448	WITHOUT_CLASSIFICATION	9.111503255191778E-6	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999660137039201	WITHOUT_CLASSIFICATION	3.398629607990367E-5	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9997021055356408	WITHOUT_CLASSIFICATION	2.9789446435917426E-4	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999121245598894	WITHOUT_CLASSIFICATION	8.787544011052617E-5	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999953095177188	WITHOUT_CLASSIFICATION	4.690482281280368E-6	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999698369321783	WITHOUT_CLASSIFICATION	3.0163067821619535E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9389184608609058	WITHOUT_CLASSIFICATION	0.06108153913909413	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.999994312475646	WITHOUT_CLASSIFICATION	5.687524353993292E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999930101753773	WITHOUT_CLASSIFICATION	6.9898246226447735E-6	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999917238884917	WITHOUT_CLASSIFICATION	8.276111508253757E-6	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998260559887086	WITHOUT_CLASSIFICATION	1.739440112913855E-4	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999017642172082	WITHOUT_CLASSIFICATION	9.823578279171813E-5	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998287654101687	WITHOUT_CLASSIFICATION	1.7123458983123388E-4	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9987566727862145	WITHOUT_CLASSIFICATION	0.0012433272137855533	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999925603153414	WITHOUT_CLASSIFICATION	7.4396846585950366E-6	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.999998554423887	WITHOUT_CLASSIFICATION	1.4455761130445307E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999990729593244	WITHOUT_CLASSIFICATION	9.270406756115512E-6	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999939812427935	WITHOUT_CLASSIFICATION	6.018757206549326E-6	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9997431523332806	WITHOUT_CLASSIFICATION	2.568476667193916E-4	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.994548516320069	WITHOUT_CLASSIFICATION	0.0054514836799310455	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999987682429918	WITHOUT_CLASSIFICATION	1.2317570081334703E-6	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999951432773124	WITHOUT_CLASSIFICATION	4.856722687572608E-6	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999951432773124	WITHOUT_CLASSIFICATION	4.856722687572608E-6	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999130720633008	WITHOUT_CLASSIFICATION	8.692793669927015E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999936860042348	WITHOUT_CLASSIFICATION	6.313995765325972E-6	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9994637534095733	WITHOUT_CLASSIFICATION	5.362465904267553E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9994637534095733	WITHOUT_CLASSIFICATION	5.362465904267553E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999965391908284	WITHOUT_CLASSIFICATION	3.460809171595972E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9983437625325068	WITHOUT_CLASSIFICATION	0.0016562374674932159	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999830533811811	WITHOUT_CLASSIFICATION	1.6946618818885037E-5	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999979531656801	WITHOUT_CLASSIFICATION	2.0468343198268644E-6	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999356369093176	WITHOUT_CLASSIFICATION	6.436309068238594E-5	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999818158589362	WITHOUT_CLASSIFICATION	1.818414106379043E-5	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999760867742767	WITHOUT_CLASSIFICATION	2.3913225723151307E-5	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999760867742767	WITHOUT_CLASSIFICATION	2.3913225723151307E-5	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999907663280571	WITHOUT_CLASSIFICATION	9.233671943013456E-6	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999903146441355	WITHOUT_CLASSIFICATION	9.685355864520792E-6	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999875418379112	WITHOUT_CLASSIFICATION	1.2458162088791023E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.99998240461629	WITHOUT_CLASSIFICATION	1.759538371004477E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.99998240461629	WITHOUT_CLASSIFICATION	1.759538371004477E-5	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999989882386768	WITHOUT_CLASSIFICATION	1.0117613231376877E-6	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999256789651894	WITHOUT_CLASSIFICATION	7.432103481060852E-5	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9992275893399956	WITHOUT_CLASSIFICATION	7.724106600043042E-4	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999978704318946	WITHOUT_CLASSIFICATION	2.1295681053706317E-6	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999940999457289	WITHOUT_CLASSIFICATION	5.90005427119398E-6	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999936078868281	WITHOUT_CLASSIFICATION	6.39211317185867E-6	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999568856256262	WITHOUT_CLASSIFICATION	4.31143743738589E-5	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999592308438692	WITHOUT_CLASSIFICATION	4.076915613075964E-5	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.999997002528698	WITHOUT_CLASSIFICATION	2.997471301867597E-6	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999532242894879	WITHOUT_CLASSIFICATION	4.677571051204646E-5	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999888021794291	WITHOUT_CLASSIFICATION	1.119782057091935E-5	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999241417997224	WITHOUT_CLASSIFICATION	7.585820027760074E-5	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999109388602978	WITHOUT_CLASSIFICATION	8.90611397022184E-5	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999634849983174	WITHOUT_CLASSIFICATION	3.651500168254076E-5	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999802874759386	WITHOUT_CLASSIFICATION	1.9712524061340443E-5	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999923337759276	WITHOUT_CLASSIFICATION	7.666224072422403E-6	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999944529414737	WITHOUT_CLASSIFICATION	5.547058526343452E-6	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999627110304053	WITHOUT_CLASSIFICATION	3.728896959462299E-5	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999321064037053	WITHOUT_CLASSIFICATION	6.78935962946334E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999944837584172	WITHOUT_CLASSIFICATION	5.516241582766481E-6	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999379633339195	WITHOUT_CLASSIFICATION	6.203666608055223E-5	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998713450946524	WITHOUT_CLASSIFICATION	1.286549053475896E-4	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9998996059492956	WITHOUT_CLASSIFICATION	1.0039405070441784E-4	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999909646879874	WITHOUT_CLASSIFICATION	9.035312012621686E-6	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9999642455233537	WITHOUT_CLASSIFICATION	3.575447664629439E-5	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999957382052986	WITHOUT_CLASSIFICATION	4.261794701267221E-6	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999985078082477	WITHOUT_CLASSIFICATION	1.4921917522379513E-6	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999780092870124	WITHOUT_CLASSIFICATION	2.199071298759432E-4	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999993184507329	WITHOUT_CLASSIFICATION	6.815492671174097E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999954012065531	WITHOUT_CLASSIFICATION	4.598793446992804E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998262931028674	WITHOUT_CLASSIFICATION	1.7370689713257115E-4	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999984463019379	WITHOUT_CLASSIFICATION	1.553698062103752E-6	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999963213770027	WITHOUT_CLASSIFICATION	3.6786229973696872E-6	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998114968367791	WITHOUT_CLASSIFICATION	1.885031632210391E-4	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999991663806328	WITHOUT_CLASSIFICATION	8.336193671504416E-7	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.999825354786866	WITHOUT_CLASSIFICATION	1.7464521313408993E-4	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999581930115995	WITHOUT_CLASSIFICATION	4.180698840048708E-5	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999285875772103	WITHOUT_CLASSIFICATION	7.141242278982012E-5	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999963545985447	WITHOUT_CLASSIFICATION	3.645401455205136E-6	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999673020691159	WITHOUT_CLASSIFICATION	3.2697930884130056E-5	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998892146630494	WITHOUT_CLASSIFICATION	1.1078533695058113E-4	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.999636014219367	WITHOUT_CLASSIFICATION	3.639857806330121E-4	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999858494284445	WITHOUT_CLASSIFICATION	1.4150571555441859E-5	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999968531131922	WITHOUT_CLASSIFICATION	3.1468868078346608E-6	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999920515820833	WITHOUT_CLASSIFICATION	7.948417916702274E-6	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999725910449858	WITHOUT_CLASSIFICATION	2.7408955014085733E-5	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.998923222466431	WITHOUT_CLASSIFICATION	0.001076777533569086	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999768524086916	WITHOUT_CLASSIFICATION	2.3147591308363643E-5	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9998905179100417	WITHOUT_CLASSIFICATION	1.0948208995833347E-4	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999673254438953	WITHOUT_CLASSIFICATION	3.2674556104592E-5	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998356028731896	WITHOUT_CLASSIFICATION	1.6439712681037895E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999419643266353	WITHOUT_CLASSIFICATION	5.803567336460442E-5	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9998026012161603	WITHOUT_CLASSIFICATION	1.9739878383971384E-4	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999134697483	WITHOUT_CLASSIFICATION	8.653025176008752E-8	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9995539101765597	WITHOUT_CLASSIFICATION	4.4608982344022604E-4	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999273695849521	WITHOUT_CLASSIFICATION	7.263041504796255E-5	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.999668062482412	WITHOUT_CLASSIFICATION	3.319375175880168E-4	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999763240023665	WITHOUT_CLASSIFICATION	2.367599763353923E-5	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9988426770018813	WITHOUT_CLASSIFICATION	0.0011573229981186105	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9994888605811697	WITHOUT_CLASSIFICATION	5.111394188303666E-4	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998758360955777	WITHOUT_CLASSIFICATION	1.241639044222937E-4	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998758360955777	WITHOUT_CLASSIFICATION	1.241639044222937E-4	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999868109561404	WITHOUT_CLASSIFICATION	1.3189043859685395E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999983315202092	WITHOUT_CLASSIFICATION	1.6684797907224562E-6	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999889170101207	WITHOUT_CLASSIFICATION	1.10829898793243E-5	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999919798922032	WITHOUT_CLASSIFICATION	8.020107796873686E-6	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999995508288961	WITHOUT_CLASSIFICATION	4.4917110389212976E-6	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999983195337265	WITHOUT_CLASSIFICATION	1.6804662734605318E-6	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999995790753219	WITHOUT_CLASSIFICATION	4.209246780821814E-7	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999998322813618	WITHOUT_CLASSIFICATION	1.677186381973091E-6	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999995334069086	WITHOUT_CLASSIFICATION	4.665930914587182E-7	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999908784050765	WITHOUT_CLASSIFICATION	9.121594923509043E-6	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999990473384404	WITHOUT_CLASSIFICATION	9.526615595952655E-6	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9998402512606743	WITHOUT_CLASSIFICATION	1.5974873932567525E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9997301287103514	WITHOUT_CLASSIFICATION	2.698712896486525E-4	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999987737391313	WITHOUT_CLASSIFICATION	1.2262608687244532E-6	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999659688071371	WITHOUT_CLASSIFICATION	3.403119286299686E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999659688071371	WITHOUT_CLASSIFICATION	3.403119286299686E-5	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999948835648715	WITHOUT_CLASSIFICATION	5.1164351285320445E-6	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999137014189907	WITHOUT_CLASSIFICATION	8.629858100929395E-5	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999982827490557	WITHOUT_CLASSIFICATION	1.717250944350865E-6	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9998238420598371	WITHOUT_CLASSIFICATION	1.7615794016295083E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999590475253011	WITHOUT_CLASSIFICATION	4.095247469902519E-5	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999680715481354	WITHOUT_CLASSIFICATION	3.1928451864647225E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999187867149355	WITHOUT_CLASSIFICATION	8.121328506457287E-5	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9983139995514028	WITHOUT_CLASSIFICATION	0.0016860004485972585	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999990866445605	WITHOUT_CLASSIFICATION	9.133554395803221E-7	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9998856282103075	WITHOUT_CLASSIFICATION	1.1437178969254972E-4	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.999990297591721	WITHOUT_CLASSIFICATION	9.702408278979938E-6	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999288172200208	WITHOUT_CLASSIFICATION	7.11827799791565E-5	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999006647608424	WITHOUT_CLASSIFICATION	9.933523915760195E-4	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999986832439943	WITHOUT_CLASSIFICATION	1.3167560055706489E-6	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999917352393882	WITHOUT_CLASSIFICATION	8.264760611782573E-6	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999986788999173	WITHOUT_CLASSIFICATION	1.3211000826375414E-6	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999929881682608	WITHOUT_CLASSIFICATION	7.011831739193302E-6	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999930328639339	WITHOUT_CLASSIFICATION	6.967136066155623E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999885221562579	WITHOUT_CLASSIFICATION	1.1477843742157866E-5	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999986775700488	WITHOUT_CLASSIFICATION	1.3224299512658419E-6	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999940078251852	WITHOUT_CLASSIFICATION	5.992174814841605E-6	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999987353405935	WITHOUT_CLASSIFICATION	1.2646594065086336E-5	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999985928667794	WITHOUT_CLASSIFICATION	1.4071332207230467E-6	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999545389678735	WITHOUT_CLASSIFICATION	4.546103212644039E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9956072917361699	WITHOUT_CLASSIFICATION	0.004392708263830114	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999927471160058	WITHOUT_CLASSIFICATION	7.252883994216867E-6	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999994195508652	WITHOUT_CLASSIFICATION	5.804491348072296E-6	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999869286743542	WITHOUT_CLASSIFICATION	1.3071325645886378E-5	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999993432448184	WITHOUT_CLASSIFICATION	6.5675518160783075E-6	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999923809845843	WITHOUT_CLASSIFICATION	7.6190154156629735E-6	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9995790867524116	WITHOUT_CLASSIFICATION	4.209132475883836E-4	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999989777760294	WITHOUT_CLASSIFICATION	1.0222239705856647E-6	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999991687668587	WITHOUT_CLASSIFICATION	8.312331413430127E-7	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9994947053008579	WITHOUT_CLASSIFICATION	5.052946991420925E-4	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999202744122339	WITHOUT_CLASSIFICATION	7.97255877661103E-5	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999969182024516	WITHOUT_CLASSIFICATION	3.0817975482984244E-6	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999918779109834	WITHOUT_CLASSIFICATION	8.122089016491624E-6	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999881049326386	WITHOUT_CLASSIFICATION	1.1895067361551228E-5	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999082413650062	WITHOUT_CLASSIFICATION	9.175863499382079E-5	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999955373847702	WITHOUT_CLASSIFICATION	4.4626152297630966E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999798756523524	WITHOUT_CLASSIFICATION	2.0124347647572722E-5	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999798756523524	WITHOUT_CLASSIFICATION	2.0124347647572722E-5	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999977307086205	WITHOUT_CLASSIFICATION	2.269291379417343E-6	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999503538894792	WITHOUT_CLASSIFICATION	4.964611052078735E-4	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999002671431483	WITHOUT_CLASSIFICATION	9.973285685177054E-5	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999899988185695	WITHOUT_CLASSIFICATION	1.000118143050994E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999759474958511	WITHOUT_CLASSIFICATION	2.405250414898342E-5	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9998992377333544	WITHOUT_CLASSIFICATION	1.0076226664556217E-4	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9889309559028117	WITHOUT_CLASSIFICATION	0.011069044097188337	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999841604173597	WITHOUT_CLASSIFICATION	1.58395826403524E-5	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999911019467126	WITHOUT_CLASSIFICATION	8.89805328742175E-6	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999852646515116	WITHOUT_CLASSIFICATION	1.4735348488426132E-5	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939769589508	WITHOUT_CLASSIFICATION	6.023041049262157E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999942053727994	WITHOUT_CLASSIFICATION	5.79462720059281E-6	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999117690925811	WITHOUT_CLASSIFICATION	8.823090741896953E-5	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.999996086344088	WITHOUT_CLASSIFICATION	3.913655912039629E-6	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999076412834825	WITHOUT_CLASSIFICATION	9.235871651744649E-5	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999462562060949	WITHOUT_CLASSIFICATION	5.3743793905018044E-5	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999959104900977	WITHOUT_CLASSIFICATION	4.089509902313701E-5	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999516734155329	WITHOUT_CLASSIFICATION	4.832658446704826E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9994882617588959	WITHOUT_CLASSIFICATION	5.117382411040459E-4	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999985014356776	WITHOUT_CLASSIFICATION	1.4985643223864942E-5	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9994160864288911	WITHOUT_CLASSIFICATION	5.839135711089256E-4	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9998452171349675	WITHOUT_CLASSIFICATION	1.5478286503249616E-4	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999995941262905	WITHOUT_CLASSIFICATION	4.0587370956472854E-7	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.999026838699193	WITHOUT_CLASSIFICATION	9.731613008070476E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999284185352745	WITHOUT_CLASSIFICATION	7.158146472544268E-5	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999866653743683	WITHOUT_CLASSIFICATION	1.3334625631727277E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999958506435505	WITHOUT_CLASSIFICATION	4.149356449471795E-6	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9994755754260977	WITHOUT_CLASSIFICATION	5.24424573902286E-4	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9998961610667949	WITHOUT_CLASSIFICATION	1.0383893320506988E-4	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999769716616453	WITHOUT_CLASSIFICATION	2.302833835474877E-5	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999658694899483	WITHOUT_CLASSIFICATION	3.413051005168382E-5	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999754784509357	WITHOUT_CLASSIFICATION	2.4521549064233747E-5	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.999998963848707	WITHOUT_CLASSIFICATION	1.0361512930210635E-6	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9994276698486386	WITHOUT_CLASSIFICATION	5.723301513613434E-4	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9998687519886272	WITHOUT_CLASSIFICATION	1.3124801137274496E-4	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999381879792493	WITHOUT_CLASSIFICATION	6.181202075070677E-5	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999645113168083	WITHOUT_CLASSIFICATION	3.5488683191711994E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999841764955778	WITHOUT_CLASSIFICATION	1.5823504422175234E-5	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9998212129903302	WITHOUT_CLASSIFICATION	1.787870096696993E-4	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999464464037826	WITHOUT_CLASSIFICATION	5.355359621741729E-5	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.999998779748156	WITHOUT_CLASSIFICATION	1.2202518440247319E-6	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9998088658439465	WITHOUT_CLASSIFICATION	1.9113415605355504E-4	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999800665023103	WITHOUT_CLASSIFICATION	1.9933497689776862E-5	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.999859293701994	WITHOUT_CLASSIFICATION	1.4070629800604578E-4	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999448041687967	WITHOUT_CLASSIFICATION	5.5195831203305216E-5	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.999977260662973	WITHOUT_CLASSIFICATION	2.2739337026986143E-5	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999955139840219	WITHOUT_CLASSIFICATION	4.486015978132538E-6	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9997301287103514	WITHOUT_CLASSIFICATION	2.698712896486525E-4	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999442390504524	WITHOUT_CLASSIFICATION	5.576094954765227E-5	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999996703661619	WITHOUT_CLASSIFICATION	3.296338380587409E-7	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.999553171896523	WITHOUT_CLASSIFICATION	4.468281034769475E-4	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999942929431722	WITHOUT_CLASSIFICATION	5.707056827777724E-6	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999998695332805	WITHOUT_CLASSIFICATION	1.3046671952617796E-7	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999492219360394	WITHOUT_CLASSIFICATION	5.077806396058676E-5	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999823085920171	WITHOUT_CLASSIFICATION	1.7691407982943518E-5	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9996591647144729	WITHOUT_CLASSIFICATION	3.4083528552698915E-4	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999953014698325	WITHOUT_CLASSIFICATION	4.698530167463835E-6	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999978786483176	WITHOUT_CLASSIFICATION	2.1213516824093172E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9762796283669176	WITHOUT_CLASSIFICATION	0.0237203716330824	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999939546706673	WITHOUT_CLASSIFICATION	6.045329332654415E-6	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999908574398118	WITHOUT_CLASSIFICATION	9.142560188264448E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999988729943301	WITHOUT_CLASSIFICATION	1.127005669966788E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985478690384	WITHOUT_CLASSIFICATION	1.4521309614903315E-6	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999986517204447	WITHOUT_CLASSIFICATION	1.3482795552916466E-5	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999865512652482	WITHOUT_CLASSIFICATION	1.3448734751735263E-5	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999990697736374	WITHOUT_CLASSIFICATION	9.302263626400868E-7	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9987659910703217	WITHOUT_CLASSIFICATION	0.0012340089296782482	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985478690384	WITHOUT_CLASSIFICATION	1.4521309614903315E-6	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9989387486528354	WITHOUT_CLASSIFICATION	0.001061251347164715	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9981480581644183	WITHOUT_CLASSIFICATION	0.0018519418355816993	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999497725242188	WITHOUT_CLASSIFICATION	5.022747578126607E-5	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999799374292254	WITHOUT_CLASSIFICATION	2.006257077461926E-5	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999617857427657	WITHOUT_CLASSIFICATION	3.82142572341838E-5	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999807086894368	WITHOUT_CLASSIFICATION	1.9291310563199237E-5	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999696108611	WITHOUT_CLASSIFICATION	3.0389138869352635E-8	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999978152544223	WITHOUT_CLASSIFICATION	2.1847455777620773E-6	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999988365842852	WITHOUT_CLASSIFICATION	1.1634157147716553E-6	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.998228451257804	WITHOUT_CLASSIFICATION	0.0017715487421959965	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9992793491668105	WITHOUT_CLASSIFICATION	7.20650833189518E-4	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9989678438970082	WITHOUT_CLASSIFICATION	0.0010321561029918323	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9970583455788626	WITHOUT_CLASSIFICATION	0.0029416544211374527	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999979165874968	WITHOUT_CLASSIFICATION	2.083412503175093E-6	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999768525454263	WITHOUT_CLASSIFICATION	2.3147454573654272E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999698369321783	WITHOUT_CLASSIFICATION	3.0163067821619535E-5	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999618844315709	WITHOUT_CLASSIFICATION	3.811556842918486E-5	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.999996257061668	WITHOUT_CLASSIFICATION	3.7429383321294176E-6	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999872559561958	WITHOUT_CLASSIFICATION	1.2744043804306731E-5	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9997901295425189	WITHOUT_CLASSIFICATION	2.0987045748102512E-4	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999933786908803	WITHOUT_CLASSIFICATION	6.621309119697137E-5	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999992438423373	WITHOUT_CLASSIFICATION	7.561576626966395E-6	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999632859334012	WITHOUT_CLASSIFICATION	3.671406659873144E-5	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999970634552489	WITHOUT_CLASSIFICATION	2.9365447511508998E-6	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999755598101822	WITHOUT_CLASSIFICATION	2.444018981780638E-5	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999811969738216	WITHOUT_CLASSIFICATION	1.8803026178368558E-5	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9976870836289462	WITHOUT_CLASSIFICATION	0.002312916371053796	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999973076714822	WITHOUT_CLASSIFICATION	2.6923285178740216E-6	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999967766539366	WITHOUT_CLASSIFICATION	3.223346063391121E-6	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9995924144087827	WITHOUT_CLASSIFICATION	4.075855912173881E-4	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999940679120618	WITHOUT_CLASSIFICATION	5.932087938220892E-6	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999156131926779	WITHOUT_CLASSIFICATION	8.438680732215242E-5	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9996387114915911	WITHOUT_CLASSIFICATION	3.6128850840884153E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999896066876173	WITHOUT_CLASSIFICATION	1.039331238277475E-5	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999931802141306	WITHOUT_CLASSIFICATION	6.819785869395036E-6	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999083911999377	WITHOUT_CLASSIFICATION	9.160880006233226E-5	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999904733487276	WITHOUT_CLASSIFICATION	9.526651272391346E-6	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9982332789477899	WITHOUT_CLASSIFICATION	0.0017667210522100752	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.999998985941091	WITHOUT_CLASSIFICATION	1.0140589090285597E-6	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998648041184348	WITHOUT_CLASSIFICATION	1.351958815651545E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998619094198637	WITHOUT_CLASSIFICATION	1.380905801362576E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998619094198637	WITHOUT_CLASSIFICATION	1.380905801362576E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9968854181395248	WITHOUT_CLASSIFICATION	0.003114581860475318	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999792586179542	WITHOUT_CLASSIFICATION	2.0741382045750853E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999846923421579	WITHOUT_CLASSIFICATION	1.530765784207256E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9966015327622515	WITHOUT_CLASSIFICATION	0.003398467237748469	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999569078800925	WITHOUT_CLASSIFICATION	4.309211990746606E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999569078800925	WITHOUT_CLASSIFICATION	4.309211990746606E-5	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9998058809387165	WITHOUT_CLASSIFICATION	1.941190612836015E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999576584995489	WITHOUT_CLASSIFICATION	4.234150045109683E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9990358322674203	WITHOUT_CLASSIFICATION	9.641677325797974E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9996459693975311	WITHOUT_CLASSIFICATION	3.540306024688314E-4	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999987986541633	WITHOUT_CLASSIFICATION	1.201345836702577E-5	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999658825742762	WITHOUT_CLASSIFICATION	3.4117425723728635E-5	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999156188240121	WITHOUT_CLASSIFICATION	8.438117598791001E-5	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999984480724801	WITHOUT_CLASSIFICATION	1.5519275200101623E-6	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999545626804659	WITHOUT_CLASSIFICATION	4.5437319534182966E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998637554706	WITHOUT_CLASSIFICATION	1.3624452939809164E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998637554706	WITHOUT_CLASSIFICATION	1.3624452939809164E-6	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999963000694123	WITHOUT_CLASSIFICATION	3.699930587699359E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999635638311053	WITHOUT_CLASSIFICATION	3.6436168894673984E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999750620994812	WITHOUT_CLASSIFICATION	2.4937900518917182E-5	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.999941182959995	WITHOUT_CLASSIFICATION	5.88170400048938E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998191264659457	WITHOUT_CLASSIFICATION	1.8087353405414532E-4	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999943388667462	WITHOUT_CLASSIFICATION	5.661133253852376E-6	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998176837025	WITHOUT_CLASSIFICATION	1.8231629749697567E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998191264659457	WITHOUT_CLASSIFICATION	1.8087353405414532E-4	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999961173160931	WITHOUT_CLASSIFICATION	3.8826839069607445E-6	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999254871049317	WITHOUT_CLASSIFICATION	7.451289506833174E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.999738294101585	WITHOUT_CLASSIFICATION	2.617058984149959E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999974597350122	WITHOUT_CLASSIFICATION	2.5402649879271125E-6	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.998228451257804	WITHOUT_CLASSIFICATION	0.0017715487421959965	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.999980745824365	WITHOUT_CLASSIFICATION	1.925417563497064E-5	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999550442359058	WITHOUT_CLASSIFICATION	4.495576409420623E-4	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999989126849861	WITHOUT_CLASSIFICATION	1.0873150139018121E-6	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999564521787834	WITHOUT_CLASSIFICATION	4.354782121660354E-5	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999998091618875	WITHOUT_CLASSIFICATION	1.908381124977223E-6	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999976720028397	WITHOUT_CLASSIFICATION	2.3279971603076452E-5	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999711946967046	WITHOUT_CLASSIFICATION	2.8805303295417274E-5	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999991900057178	WITHOUT_CLASSIFICATION	8.099942822124901E-7	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.999796985385541	WITHOUT_CLASSIFICATION	2.0301461445907087E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9985016878273117	WITHOUT_CLASSIFICATION	0.0014983121726882588	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9985016878273117	WITHOUT_CLASSIFICATION	0.0014983121726882588	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999600408078212	WITHOUT_CLASSIFICATION	3.995919217873056E-5	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9995054123490891	WITHOUT_CLASSIFICATION	4.945876509109239E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997762500508587	WITHOUT_CLASSIFICATION	2.2374994914130331E-4	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999169707968599	WITHOUT_CLASSIFICATION	8.30292031400599E-5	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999679415013217	WITHOUT_CLASSIFICATION	3.205849867823887E-5	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9994184897444918	WITHOUT_CLASSIFICATION	5.815102555081244E-4	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999492055144743	WITHOUT_CLASSIFICATION	5.079448552571523E-5	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9997333916977996	WITHOUT_CLASSIFICATION	2.6660830220033593E-4	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999557353810169	WITHOUT_CLASSIFICATION	4.426461898304148E-5	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9995280447789974	WITHOUT_CLASSIFICATION	4.7195522100263154E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870995079705	WITHOUT_CLASSIFICATION	1.290049202959287E-5	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9995046705326472	WITHOUT_CLASSIFICATION	4.953294673528065E-4	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999981829556306	WITHOUT_CLASSIFICATION	1.817044369392931E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999986081562633	WITHOUT_CLASSIFICATION	1.3918437367800555E-6	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999990227918615	WITHOUT_CLASSIFICATION	9.772081386243188E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999940114960263	WITHOUT_CLASSIFICATION	5.988503973705065E-5	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.999899269794806	WITHOUT_CLASSIFICATION	1.0073020519397045E-4	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999667990797433	WITHOUT_CLASSIFICATION	3.3200920256799895E-5	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999314407229866	WITHOUT_CLASSIFICATION	6.855927701339225E-5	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999918482139725	WITHOUT_CLASSIFICATION	8.151786027517562E-6	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9974822665081234	WITHOUT_CLASSIFICATION	0.0025177334918765294	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9994297426574679	WITHOUT_CLASSIFICATION	5.702573425320796E-4	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9992275893399956	WITHOUT_CLASSIFICATION	7.724106600043042E-4	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999942494467319	WITHOUT_CLASSIFICATION	5.750553268119909E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.99990474378435	WITHOUT_CLASSIFICATION	9.525621565003701E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.99990474378435	WITHOUT_CLASSIFICATION	9.525621565003701E-5	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9995893804519821	WITHOUT_CLASSIFICATION	4.1061954801792616E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999914018179864	WITHOUT_CLASSIFICATION	8.598182013550817E-6	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999912244654169	WITHOUT_CLASSIFICATION	8.775534583190193E-6	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999231970224128	WITHOUT_CLASSIFICATION	7.680297758711806E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999823273305589	WITHOUT_CLASSIFICATION	1.7672669441136876E-5	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9984960591190752	WITHOUT_CLASSIFICATION	0.0015039408809248156	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9996295254701623	WITHOUT_CLASSIFICATION	3.70474529837774E-4	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999907925911724	WITHOUT_CLASSIFICATION	9.207408827596854E-6	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9998170862938301	WITHOUT_CLASSIFICATION	1.8291370616986256E-4	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9957630120519497	WITHOUT_CLASSIFICATION	0.004236987948050278	DEFECT
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9992770473991067	WITHOUT_CLASSIFICATION	7.22952600893205E-4	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.998440593429512	WITHOUT_CLASSIFICATION	0.001559406570487956	DEFECT
/*	DEFECT	0.9966429246594555	WITHOUT_CLASSIFICATION	0.0033570753405445307	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9995554000931938	WITHOUT_CLASSIFICATION	4.445999068061364E-4	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.7960227392554798	DEFECT	0.2039772607445202	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.8908264095341549	WITHOUT_CLASSIFICATION	0.1091735904658452	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9515923972894217	WITHOUT_CLASSIFICATION	0.048407602710578375	DEFECT
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.9781022076822959	DEFECT	0.02189779231770409	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.6423522870686097	WITHOUT_CLASSIFICATION	0.3576477129313902	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.6423522870686097	WITHOUT_CLASSIFICATION	0.3576477129313902	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.6065265013994279	WITHOUT_CLASSIFICATION	0.3934734986005723	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9976196053852061	WITHOUT_CLASSIFICATION	0.002380394614793857	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.5802578643099576	WITHOUT_CLASSIFICATION	0.41974213569004226	DEFECT
// this call is side-effecty	DEFECT	0.9999797715546422	WITHOUT_CLASSIFICATION	2.0228445357728066E-5	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.8150975850593655	DEFECT	0.18490241494063467	WITHOUT_CLASSIFICATION
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.6703355665395196	WITHOUT_CLASSIFICATION	0.3296644334604804	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9857095201130271	WITHOUT_CLASSIFICATION	0.01429047988697283	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.747926311859918	DEFECT	0.25207368814008196	WITHOUT_CLASSIFICATION
//TODO: is this completely correct?	DEFECT	0.8758974916820788	WITHOUT_CLASSIFICATION	0.12410250831792127	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.999799381623354	WITHOUT_CLASSIFICATION	2.0061837664590995E-4	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.6371186936995544	DEFECT	0.3628813063004455	WITHOUT_CLASSIFICATION
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9448836457773567	WITHOUT_CLASSIFICATION	0.05511635422264327	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.8498033955544254	WITHOUT_CLASSIFICATION	0.15019660444557456	DEFECT
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9529802456001568	DEFECT	0.047019754399843204	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.6841029196320912	WITHOUT_CLASSIFICATION	0.3158970803679087	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.8229518522024404	DEFECT	0.17704814779755965	WITHOUT_CLASSIFICATION
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.9754785045373089	WITHOUT_CLASSIFICATION	0.02452149546269113	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9957224222634011	WITHOUT_CLASSIFICATION	0.004277577736598781	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.6259759868857305	DEFECT	0.3740240131142694	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.6423522870686097	WITHOUT_CLASSIFICATION	0.3576477129313902	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9965614682066535	DEFECT	0.003438531793346496	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.5599306619596326	DEFECT	0.4400693380403673	WITHOUT_CLASSIFICATION
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.7174669241651136	WITHOUT_CLASSIFICATION	0.2825330758348864	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9998933442535918	WITHOUT_CLASSIFICATION	1.0665574640830664E-4	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.999995728145265	WITHOUT_CLASSIFICATION	4.271854734900316E-6	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9999921785818267	WITHOUT_CLASSIFICATION	7.821418173300766E-6	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9948536505665828	WITHOUT_CLASSIFICATION	0.00514634943341729	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.8766850858579109	WITHOUT_CLASSIFICATION	0.12331491414208907	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.8213654305538718	WITHOUT_CLASSIFICATION	0.17863456944612818	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9979665294814678	WITHOUT_CLASSIFICATION	0.002033470518532207	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.7875748768547168	WITHOUT_CLASSIFICATION	0.21242512314528314	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.9596996069785289	DEFECT	0.04030039302147113	WITHOUT_CLASSIFICATION
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9992423866344146	WITHOUT_CLASSIFICATION	7.576133655854932E-4	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.6804874753176328	DEFECT	0.3195125246823672	WITHOUT_CLASSIFICATION
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.558519169644079	DEFECT	0.44148083035592117	WITHOUT_CLASSIFICATION
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.8842991089476832	WITHOUT_CLASSIFICATION	0.11570089105231682	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.6526224625970266	DEFECT	0.3473775374029734	WITHOUT_CLASSIFICATION
