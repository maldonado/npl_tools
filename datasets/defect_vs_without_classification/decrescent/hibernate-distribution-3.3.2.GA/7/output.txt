test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999871282692	WITHOUT_CLASSIFICATION	1.2871730943360893E-8	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999343107286304	WITHOUT_CLASSIFICATION	6.56892713696949E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999343107286304	WITHOUT_CLASSIFICATION	6.56892713696949E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999343107286304	WITHOUT_CLASSIFICATION	6.56892713696949E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999343107286304	WITHOUT_CLASSIFICATION	6.56892713696949E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999343107286304	WITHOUT_CLASSIFICATION	6.56892713696949E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999343107286304	WITHOUT_CLASSIFICATION	6.56892713696949E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999343107286304	WITHOUT_CLASSIFICATION	6.56892713696949E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999948573813525	WITHOUT_CLASSIFICATION	5.142618647437519E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999948573813525	WITHOUT_CLASSIFICATION	5.142618647437519E-6	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999965515845289	WITHOUT_CLASSIFICATION	3.4484154711306237E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999838436221137	WITHOUT_CLASSIFICATION	1.6156377886347396E-5	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999999361304687	WITHOUT_CLASSIFICATION	6.386953135917562E-8	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999953126826963	WITHOUT_CLASSIFICATION	4.687317303681966E-6	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999953126826963	WITHOUT_CLASSIFICATION	4.687317303681966E-6	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999940906378	WITHOUT_CLASSIFICATION	5.909362220028187E-9	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999980919728292	WITHOUT_CLASSIFICATION	1.9080271708908316E-6	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999998564957818	WITHOUT_CLASSIFICATION	1.4350421809785066E-7	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999851806438923	WITHOUT_CLASSIFICATION	1.4819356107663014E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999876383254752	WITHOUT_CLASSIFICATION	1.2361674524744552E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999876383254752	WITHOUT_CLASSIFICATION	1.2361674524744552E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9998564517430429	WITHOUT_CLASSIFICATION	1.43548256956965E-4	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999997872076526	WITHOUT_CLASSIFICATION	2.1279234737146654E-7	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.9997323312508499	WITHOUT_CLASSIFICATION	2.676687491501195E-4	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999941718288146	WITHOUT_CLASSIFICATION	5.828171185408044E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999968455886509	WITHOUT_CLASSIFICATION	3.154411349219061E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999897614979962	WITHOUT_CLASSIFICATION	1.0238502003780405E-5	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.9999943977003156	WITHOUT_CLASSIFICATION	5.60229968439998E-6	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999617668550161	WITHOUT_CLASSIFICATION	3.823314498379088E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998905327553071	WITHOUT_CLASSIFICATION	1.0946724469290147E-4	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999999673755873	WITHOUT_CLASSIFICATION	3.2624412791352397E-8	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999974532789687	WITHOUT_CLASSIFICATION	2.5467210312143195E-6	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999867558087701	WITHOUT_CLASSIFICATION	1.3244191230035962E-5	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999979729673598	WITHOUT_CLASSIFICATION	2.0270326402129285E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999875839369247	WITHOUT_CLASSIFICATION	1.2416063075297946E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999875839369247	WITHOUT_CLASSIFICATION	1.2416063075297946E-5	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999912934132259	WITHOUT_CLASSIFICATION	8.706586774160286E-6	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999601268801311	WITHOUT_CLASSIFICATION	3.9873119868857125E-5	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999999942891704	WITHOUT_CLASSIFICATION	5.710829602040759E-8	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999994750786636	WITHOUT_CLASSIFICATION	5.249213363910724E-7	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999995393300458	WITHOUT_CLASSIFICATION	4.606699542645183E-7	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.999998681905049	WITHOUT_CLASSIFICATION	1.3180949509538254E-6	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999996934627774	WITHOUT_CLASSIFICATION	3.065372225819924E-7	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999999907301258	WITHOUT_CLASSIFICATION	9.269874183876093E-9	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999993163675567	WITHOUT_CLASSIFICATION	6.836324432887486E-7	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.999999789360837	WITHOUT_CLASSIFICATION	2.1063916292415883E-7	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999983826434783	WITHOUT_CLASSIFICATION	1.6173565216282428E-6	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999928760220534	WITHOUT_CLASSIFICATION	7.123977946489677E-6	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999915631981	WITHOUT_CLASSIFICATION	8.436801937488855E-9	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999989619856448	WITHOUT_CLASSIFICATION	1.0380143551536155E-6	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999966354005064	WITHOUT_CLASSIFICATION	3.364599493534964E-6	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990539175879	WITHOUT_CLASSIFICATION	9.46082412116263E-7	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851110709004	WITHOUT_CLASSIFICATION	1.4888929099713833E-5	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999998992287717	WITHOUT_CLASSIFICATION	1.0077122818643906E-7	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999995067424429	WITHOUT_CLASSIFICATION	4.932575571916479E-7	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999931308043218	WITHOUT_CLASSIFICATION	6.869195678167593E-6	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9712633844210726	WITHOUT_CLASSIFICATION	0.028736615578927312	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.99999672663272	WITHOUT_CLASSIFICATION	3.2733672798682357E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999931308043218	WITHOUT_CLASSIFICATION	6.869195678167593E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.99999672663272	WITHOUT_CLASSIFICATION	3.2733672798682357E-6	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999981532554167	WITHOUT_CLASSIFICATION	1.8467445832095772E-6	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999999232671138	WITHOUT_CLASSIFICATION	7.673288623143035E-8	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999989560952552	WITHOUT_CLASSIFICATION	1.0439047447563421E-6	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999993651731582	WITHOUT_CLASSIFICATION	6.34826841773758E-7	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999981701031	WITHOUT_CLASSIFICATION	1.8298970187189084E-9	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999954443782	WITHOUT_CLASSIFICATION	4.555621778375859E-9	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998309106267471	WITHOUT_CLASSIFICATION	1.6908937325286165E-4	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999305108077897	WITHOUT_CLASSIFICATION	6.948919221036824E-5	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999998486439013	WITHOUT_CLASSIFICATION	1.513560987337626E-7	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9999995281188827	WITHOUT_CLASSIFICATION	4.718811172906664E-7	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999962527090641	WITHOUT_CLASSIFICATION	3.7472909359445764E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.99999672663272	WITHOUT_CLASSIFICATION	3.2733672798682357E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999997152316716	WITHOUT_CLASSIFICATION	2.847683284061256E-7	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999937491060702	WITHOUT_CLASSIFICATION	6.250893929755744E-6	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999996821666738	WITHOUT_CLASSIFICATION	3.178333263097276E-7	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999925634609725	WITHOUT_CLASSIFICATION	7.43653902742659E-6	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.999998567653796	WITHOUT_CLASSIFICATION	1.4323462039766294E-6	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999916753626352	WITHOUT_CLASSIFICATION	8.324637364721816E-6	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999992915326257	WITHOUT_CLASSIFICATION	7.084673742351909E-7	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999995843104543	WITHOUT_CLASSIFICATION	4.1568954565702565E-7	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999996151312953	WITHOUT_CLASSIFICATION	3.848687047049212E-7	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999998872687	WITHOUT_CLASSIFICATION	1.1273126363511409E-10	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999266864464	WITHOUT_CLASSIFICATION	7.331355362893042E-8	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999899134143891	WITHOUT_CLASSIFICATION	1.0086585610754787E-5	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999968377105483	WITHOUT_CLASSIFICATION	3.1622894517714168E-6	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999980464756634	WITHOUT_CLASSIFICATION	1.9535243365993264E-6	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999999998948661	WITHOUT_CLASSIFICATION	1.0513390643672303E-9	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999107911836	WITHOUT_CLASSIFICATION	8.920881650181458E-8	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999896358389	WITHOUT_CLASSIFICATION	1.0364161040139104E-8	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999999994233916	WITHOUT_CLASSIFICATION	5.766084099282924E-9	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999966143521	WITHOUT_CLASSIFICATION	3.385647798976575E-9	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.999999993166014	WITHOUT_CLASSIFICATION	6.833986145540613E-9	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999952386405653	WITHOUT_CLASSIFICATION	4.761359434695308E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999977488593755	WITHOUT_CLASSIFICATION	2.2511406244810464E-6	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999889910487372	WITHOUT_CLASSIFICATION	1.1008951262887722E-5	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999510789748	WITHOUT_CLASSIFICATION	4.892102514331918E-8	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999977488593755	WITHOUT_CLASSIFICATION	2.2511406244810464E-6	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999994951341526	WITHOUT_CLASSIFICATION	5.048658474441969E-7	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999977904311335	WITHOUT_CLASSIFICATION	2.2095688664974196E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999931308043218	WITHOUT_CLASSIFICATION	6.869195678167593E-6	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.999999685085371	WITHOUT_CLASSIFICATION	3.149146290191702E-7	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.9999998530430436	WITHOUT_CLASSIFICATION	1.4695695629417484E-7	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999996451225571	WITHOUT_CLASSIFICATION	3.548774428904297E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999996451225571	WITHOUT_CLASSIFICATION	3.548774428904297E-6	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999794318547973	WITHOUT_CLASSIFICATION	2.056814520271439E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999790478631	WITHOUT_CLASSIFICATION	2.0952136888618405E-8	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999998620370657	WITHOUT_CLASSIFICATION	1.379629343543393E-7	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999996384719	WITHOUT_CLASSIFICATION	3.615281364988896E-10	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999972574063984	WITHOUT_CLASSIFICATION	2.742593601463187E-6	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999629552152	WITHOUT_CLASSIFICATION	3.704478478838464E-8	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999987608233372	WITHOUT_CLASSIFICATION	1.2391766627219655E-6	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9999879875750862	WITHOUT_CLASSIFICATION	1.2012424913683743E-5	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999999927573155	WITHOUT_CLASSIFICATION	7.242684497593905E-8	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999997949640237	WITHOUT_CLASSIFICATION	2.0503597635874895E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999925221946	WITHOUT_CLASSIFICATION	7.477805411302095E-9	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999925221946	WITHOUT_CLASSIFICATION	7.477805411302095E-9	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999934560877978	WITHOUT_CLASSIFICATION	6.54391220221847E-6	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999988837341256	WITHOUT_CLASSIFICATION	1.116265874326549E-6	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999997610415148	WITHOUT_CLASSIFICATION	2.3895848525649754E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999925221946	WITHOUT_CLASSIFICATION	7.477805411302095E-9	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999934560877978	WITHOUT_CLASSIFICATION	6.54391220221847E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999934560877978	WITHOUT_CLASSIFICATION	6.54391220221847E-6	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999781941487	WITHOUT_CLASSIFICATION	2.1805851414073736E-8	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999987523035176	WITHOUT_CLASSIFICATION	1.2476964823762947E-6	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999995485098768	WITHOUT_CLASSIFICATION	4.514901231007919E-7	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999983228338	WITHOUT_CLASSIFICATION	1.6771661421150877E-9	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999977058337824	WITHOUT_CLASSIFICATION	2.2941662176377546E-6	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999977058337824	WITHOUT_CLASSIFICATION	2.2941662176377546E-6	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999999174769268	WITHOUT_CLASSIFICATION	8.252307312496318E-8	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999982425843361	WITHOUT_CLASSIFICATION	1.757415663893106E-6	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999952701511101	WITHOUT_CLASSIFICATION	4.729848889849742E-6	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999890544951598	WITHOUT_CLASSIFICATION	1.0945504840145732E-5	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999890544951598	WITHOUT_CLASSIFICATION	1.0945504840145732E-5	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999984370241581	WITHOUT_CLASSIFICATION	1.562975841757453E-6	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999042811397808	WITHOUT_CLASSIFICATION	9.571886021930091E-5	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999905192356539	WITHOUT_CLASSIFICATION	9.480764346076368E-6	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999939179341	WITHOUT_CLASSIFICATION	6.0820658938251784E-9	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.999999989022267	WITHOUT_CLASSIFICATION	1.0977732884417345E-8	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999999946649492	WITHOUT_CLASSIFICATION	5.335050805531469E-8	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.999993433046306	WITHOUT_CLASSIFICATION	6.566953694076061E-6	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999999850969101	WITHOUT_CLASSIFICATION	1.4903089888432954E-7	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999994507948952	WITHOUT_CLASSIFICATION	5.492051049462729E-7	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999905192356539	WITHOUT_CLASSIFICATION	9.480764346076368E-6	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999704563960707	WITHOUT_CLASSIFICATION	2.9543603929185773E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999816678769915	WITHOUT_CLASSIFICATION	1.83321230084644E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999816678769915	WITHOUT_CLASSIFICATION	1.83321230084644E-5	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999999914651119	WITHOUT_CLASSIFICATION	8.534888098934358E-8	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999989566236517	WITHOUT_CLASSIFICATION	1.0433763483011598E-6	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999221103489	WITHOUT_CLASSIFICATION	7.788965116887003E-8	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998288756445433	WITHOUT_CLASSIFICATION	1.7112435545678468E-4	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999559536974132	WITHOUT_CLASSIFICATION	4.404630258684384E-5	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999999185647711	WITHOUT_CLASSIFICATION	8.143522900124266E-8	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.9999784074814021	WITHOUT_CLASSIFICATION	2.1592518597985467E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9987677818132177	WITHOUT_CLASSIFICATION	0.0012322181867822823	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999990471837	WITHOUT_CLASSIFICATION	9.528163405072146E-10	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993142549138	WITHOUT_CLASSIFICATION	6.857450861856106E-7	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993142549138	WITHOUT_CLASSIFICATION	6.857450861856106E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999954099288918	WITHOUT_CLASSIFICATION	4.590071108252968E-6	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999871282692	WITHOUT_CLASSIFICATION	1.2871730943360893E-8	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999997247055042	WITHOUT_CLASSIFICATION	2.752944957613898E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999343107286304	WITHOUT_CLASSIFICATION	6.56892713696949E-5	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9999969000091595	WITHOUT_CLASSIFICATION	3.0999908405985827E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999948573813525	WITHOUT_CLASSIFICATION	5.142618647437519E-6	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999887433629612	WITHOUT_CLASSIFICATION	1.1256637038885115E-5	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999999229922117	WITHOUT_CLASSIFICATION	7.700778820960031E-8	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999995883636849	WITHOUT_CLASSIFICATION	4.1163631514185936E-7	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9999840231562119	WITHOUT_CLASSIFICATION	1.597684378803322E-5	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9994058854545538	WITHOUT_CLASSIFICATION	5.941145454462106E-4	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999830573619489	WITHOUT_CLASSIFICATION	1.6942638051037537E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.999965047610437	WITHOUT_CLASSIFICATION	3.4952389562945914E-5	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999990132886913	WITHOUT_CLASSIFICATION	9.86711308700456E-7	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999838436221137	WITHOUT_CLASSIFICATION	1.6156377886347396E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999894640319533	WITHOUT_CLASSIFICATION	1.0535968046653961E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999894640319533	WITHOUT_CLASSIFICATION	1.0535968046653961E-5	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9999988183361687	WITHOUT_CLASSIFICATION	1.1816638313005595E-6	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999911953553473	WITHOUT_CLASSIFICATION	8.804644652643274E-6	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999976387664011	WITHOUT_CLASSIFICATION	2.3612335988059002E-6	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999989165575985	WITHOUT_CLASSIFICATION	1.0834424014833998E-6	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999949916705746	WITHOUT_CLASSIFICATION	5.008329425408054E-6	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999710978121	WITHOUT_CLASSIFICATION	2.8902187840517798E-8	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999953126826963	WITHOUT_CLASSIFICATION	4.687317303681966E-6	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999994980549056	WITHOUT_CLASSIFICATION	5.019450943663485E-7	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999969657617374	WITHOUT_CLASSIFICATION	3.0342382625999397E-6	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999983757866117	WITHOUT_CLASSIFICATION	1.6242133883016322E-6	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999977319729432	WITHOUT_CLASSIFICATION	2.2680270568918275E-6	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.9999926394750518	WITHOUT_CLASSIFICATION	7.360524948277338E-6	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.9999161552631172	WITHOUT_CLASSIFICATION	8.384473688288962E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999997398143833	WITHOUT_CLASSIFICATION	2.6018561672989203E-7	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999441796062	WITHOUT_CLASSIFICATION	5.582039373815115E-8	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999996972100923	WITHOUT_CLASSIFICATION	3.027899077150488E-7	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.999993111435558	WITHOUT_CLASSIFICATION	6.88856444190639E-6	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999974538066868	WITHOUT_CLASSIFICATION	2.54619331326334E-6	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.9999996618356072	WITHOUT_CLASSIFICATION	3.3816439287678535E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999343107286304	WITHOUT_CLASSIFICATION	6.56892713696949E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999343107286304	WITHOUT_CLASSIFICATION	6.56892713696949E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999948573813525	WITHOUT_CLASSIFICATION	5.142618647437519E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999948573813525	WITHOUT_CLASSIFICATION	5.142618647437519E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.999965047610437	WITHOUT_CLASSIFICATION	3.4952389562945914E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999894640319533	WITHOUT_CLASSIFICATION	1.0535968046653961E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999997398143833	WITHOUT_CLASSIFICATION	2.6018561672989203E-7	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999940906378	WITHOUT_CLASSIFICATION	5.909362220028187E-9	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999965022348167	WITHOUT_CLASSIFICATION	3.497765183304305E-6	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999943852776653	WITHOUT_CLASSIFICATION	5.614722334743367E-6	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999338483736862	WITHOUT_CLASSIFICATION	6.615162631387237E-5	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.9999916444632176	WITHOUT_CLASSIFICATION	8.355536782419626E-6	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999995159787207	WITHOUT_CLASSIFICATION	4.840212792171803E-7	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.9999634200041069	WITHOUT_CLASSIFICATION	3.6579995893206385E-5	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9995517803087068	WITHOUT_CLASSIFICATION	4.482196912930926E-4	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9999875680068754	WITHOUT_CLASSIFICATION	1.2431993124555968E-5	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9999999486440605	WITHOUT_CLASSIFICATION	5.135593956501651E-8	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999956350252599	WITHOUT_CLASSIFICATION	4.36497474000015E-6	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999956350252599	WITHOUT_CLASSIFICATION	4.36497474000015E-6	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999894775236	WITHOUT_CLASSIFICATION	1.052247648800424E-8	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999984767440188	WITHOUT_CLASSIFICATION	1.5232559812728994E-6	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999970576180864	WITHOUT_CLASSIFICATION	2.9423819136157132E-6	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9996423902868088	WITHOUT_CLASSIFICATION	3.576097131912316E-4	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999975434652	WITHOUT_CLASSIFICATION	2.456534777307276E-9	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.9999998940612389	WITHOUT_CLASSIFICATION	1.0593876118292243E-7	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9999996015663324	WITHOUT_CLASSIFICATION	3.9843366767782437E-7	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999980919728292	WITHOUT_CLASSIFICATION	1.9080271708908316E-6	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.999947050820905	WITHOUT_CLASSIFICATION	5.294917909516033E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999993474040768	WITHOUT_CLASSIFICATION	6.525959231826317E-7	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999993474040768	WITHOUT_CLASSIFICATION	6.525959231826317E-7	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.999999927809306	WITHOUT_CLASSIFICATION	7.219069394285355E-8	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999993784178558	WITHOUT_CLASSIFICATION	6.215821441781194E-7	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9999971846509818	WITHOUT_CLASSIFICATION	2.815349018398353E-6	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999973747772418	WITHOUT_CLASSIFICATION	2.625222758135895E-6	DEFECT
int	WITHOUT_CLASSIFICATION	0.9999617402461697	WITHOUT_CLASSIFICATION	3.82597538303183E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999948573813525	WITHOUT_CLASSIFICATION	5.142618647437519E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.999965047610437	WITHOUT_CLASSIFICATION	3.4952389562945914E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999838436221137	WITHOUT_CLASSIFICATION	1.6156377886347396E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999997398143833	WITHOUT_CLASSIFICATION	2.6018561672989203E-7	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999997398143833	WITHOUT_CLASSIFICATION	2.6018561672989203E-7	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999948853639951	WITHOUT_CLASSIFICATION	5.114636004943848E-6	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999948853639951	WITHOUT_CLASSIFICATION	5.114636004943848E-6	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999991273589651	WITHOUT_CLASSIFICATION	8.72641034801454E-7	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999578720866605	WITHOUT_CLASSIFICATION	4.212791333945017E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999578720866605	WITHOUT_CLASSIFICATION	4.212791333945017E-5	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.9999984503866269	WITHOUT_CLASSIFICATION	1.5496133730164236E-6	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.9999991415231085	WITHOUT_CLASSIFICATION	8.584768915037366E-7	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999994883523278	WITHOUT_CLASSIFICATION	5.116476722432798E-7	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999962754959193	WITHOUT_CLASSIFICATION	3.7245040807260784E-6	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9998274165262351	WITHOUT_CLASSIFICATION	1.7258347376497912E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999851806438923	WITHOUT_CLASSIFICATION	1.4819356107663014E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999851806438923	WITHOUT_CLASSIFICATION	1.4819356107663014E-5	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9999874999342268	WITHOUT_CLASSIFICATION	1.250006577326458E-5	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999676341230709	WITHOUT_CLASSIFICATION	3.2365876929089334E-5	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.9999960723574375	WITHOUT_CLASSIFICATION	3.927642562474284E-6	DEFECT
byte	WITHOUT_CLASSIFICATION	0.99996773325177	WITHOUT_CLASSIFICATION	3.226674823001566E-5	DEFECT
char	WITHOUT_CLASSIFICATION	0.9999981016304188	WITHOUT_CLASSIFICATION	1.8983695811999106E-6	DEFECT
short	WITHOUT_CLASSIFICATION	0.9999960580033205	WITHOUT_CLASSIFICATION	3.941996679522299E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999876383254752	WITHOUT_CLASSIFICATION	1.2361674524744552E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999624382516457	WITHOUT_CLASSIFICATION	3.756174835425125E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999624382516457	WITHOUT_CLASSIFICATION	3.756174835425125E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9998564517430429	WITHOUT_CLASSIFICATION	1.43548256956965E-4	DEFECT
long	WITHOUT_CLASSIFICATION	0.9998564517430429	WITHOUT_CLASSIFICATION	1.43548256956965E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999970717036367	WITHOUT_CLASSIFICATION	2.92829636319334E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999970717036367	WITHOUT_CLASSIFICATION	2.92829636319334E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999378781259	WITHOUT_CLASSIFICATION	6.212187401583542E-8	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999378781259	WITHOUT_CLASSIFICATION	6.212187401583542E-8	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999851806438923	WITHOUT_CLASSIFICATION	1.4819356107663014E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999876383254752	WITHOUT_CLASSIFICATION	1.2361674524744552E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999624382516457	WITHOUT_CLASSIFICATION	3.756174835425125E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999624382516457	WITHOUT_CLASSIFICATION	3.756174835425125E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9998564517430429	WITHOUT_CLASSIFICATION	1.43548256956965E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999970717036367	WITHOUT_CLASSIFICATION	2.92829636319334E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999970717036367	WITHOUT_CLASSIFICATION	2.92829636319334E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999378781259	WITHOUT_CLASSIFICATION	6.212187401583542E-8	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.999998278787958	WITHOUT_CLASSIFICATION	1.7212120419732289E-6	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999988461543482	WITHOUT_CLASSIFICATION	1.1538456517404243E-6	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.9999911163093945	WITHOUT_CLASSIFICATION	8.883690605529955E-6	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999976610147827	WITHOUT_CLASSIFICATION	2.3389852172911303E-6	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9999999420058278	WITHOUT_CLASSIFICATION	5.79941722892204E-8	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999709117089379	WITHOUT_CLASSIFICATION	2.9088291062128863E-5	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999531124587343	WITHOUT_CLASSIFICATION	4.688754126562187E-5	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9906883421086821	WITHOUT_CLASSIFICATION	0.009311657891317928	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998215178531579	WITHOUT_CLASSIFICATION	1.784821468421385E-4	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999642357227	WITHOUT_CLASSIFICATION	3.576427731213402E-8	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999872877472614	WITHOUT_CLASSIFICATION	1.27122527386543E-5	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999997284856047	WITHOUT_CLASSIFICATION	2.715143952446013E-7	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999794318547973	WITHOUT_CLASSIFICATION	2.056814520271439E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999709117089379	WITHOUT_CLASSIFICATION	2.9088291062128863E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999709117089379	WITHOUT_CLASSIFICATION	2.9088291062128863E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999709117089379	WITHOUT_CLASSIFICATION	2.9088291062128863E-5	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999827447816187	WITHOUT_CLASSIFICATION	1.725521838121883E-5	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999997380720431	WITHOUT_CLASSIFICATION	2.6192795687980366E-7	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999997380720431	WITHOUT_CLASSIFICATION	2.6192795687980366E-7	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999712352928544	WITHOUT_CLASSIFICATION	2.8764707145657485E-5	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999908640426062	WITHOUT_CLASSIFICATION	9.135957393817826E-6	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999841859168914	WITHOUT_CLASSIFICATION	1.5814083108647515E-5	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999944923886906	WITHOUT_CLASSIFICATION	5.5076113094201155E-6	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999944923886906	WITHOUT_CLASSIFICATION	5.5076113094201155E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999968455886509	WITHOUT_CLASSIFICATION	3.154411349219061E-6	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999892844702091	WITHOUT_CLASSIFICATION	1.0715529790961459E-5	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999892844702091	WITHOUT_CLASSIFICATION	1.0715529790961459E-5	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999933740739525	WITHOUT_CLASSIFICATION	6.625926047500495E-6	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999998540325317	WITHOUT_CLASSIFICATION	1.4596746821477797E-7	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999967855780364	WITHOUT_CLASSIFICATION	3.214421963642621E-6	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999075589506453	WITHOUT_CLASSIFICATION	9.244104935468285E-5	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.9999707864678772	WITHOUT_CLASSIFICATION	2.9213532122752257E-5	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.9999643389690391	WITHOUT_CLASSIFICATION	3.5661030960823785E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999897614979962	WITHOUT_CLASSIFICATION	1.0238502003780405E-5	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998363064123549	WITHOUT_CLASSIFICATION	1.6369358764517107E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9902022929897432	WITHOUT_CLASSIFICATION	0.00979770701025681	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9999098317468659	WITHOUT_CLASSIFICATION	9.016825313406416E-5	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999921061750079	WITHOUT_CLASSIFICATION	7.893824992133567E-6	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998905327553071	WITHOUT_CLASSIFICATION	1.0946724469290147E-4	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998836547515	WITHOUT_CLASSIFICATION	1.1634524853419708E-7	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999999886140833	WITHOUT_CLASSIFICATION	1.1385916707359567E-7	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999954930996073	WITHOUT_CLASSIFICATION	4.506900392740613E-6	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998905327553071	WITHOUT_CLASSIFICATION	1.0946724469290147E-4	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999989924023547	WITHOUT_CLASSIFICATION	1.0075976453327132E-6	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999974797334207	WITHOUT_CLASSIFICATION	2.5202665792164595E-6	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999977624504358	WITHOUT_CLASSIFICATION	2.237549564135109E-6	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9999295570288038	WITHOUT_CLASSIFICATION	7.04429711961248E-5	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.999997575406853	WITHOUT_CLASSIFICATION	2.4245931470576536E-6	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999960705337614	WITHOUT_CLASSIFICATION	3.929466238580203E-6	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999998142843205	WITHOUT_CLASSIFICATION	1.8571567950025465E-6	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999867558087701	WITHOUT_CLASSIFICATION	1.3244191230035962E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999994361879015	WITHOUT_CLASSIFICATION	5.638120985108373E-7	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999979729673598	WITHOUT_CLASSIFICATION	2.0270326402129285E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999968045845283	WITHOUT_CLASSIFICATION	3.1954154716343445E-6	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.999999494242441	WITHOUT_CLASSIFICATION	5.05757559126659E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999615849668277	WITHOUT_CLASSIFICATION	3.841503317232279E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999897614979962	WITHOUT_CLASSIFICATION	1.0238502003780405E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999994361879015	WITHOUT_CLASSIFICATION	5.638120985108373E-7	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999968045845283	WITHOUT_CLASSIFICATION	3.1954154716343445E-6	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999615849668277	WITHOUT_CLASSIFICATION	3.841503317232279E-5	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999990392565028	WITHOUT_CLASSIFICATION	9.60743497254453E-7	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.9999496687651386	WITHOUT_CLASSIFICATION	5.0331234861324754E-5	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999999447751386	WITHOUT_CLASSIFICATION	5.522486139236764E-7	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999875839369247	WITHOUT_CLASSIFICATION	1.2416063075297946E-5	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999943385033171	WITHOUT_CLASSIFICATION	5.661496682981628E-6	DEFECT
column index	WITHOUT_CLASSIFICATION	0.9999818216932601	WITHOUT_CLASSIFICATION	1.8178306739982448E-5	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.999994264794503	WITHOUT_CLASSIFICATION	5.735205497073353E-6	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999986606321186	WITHOUT_CLASSIFICATION	1.3393678813243597E-6	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999979782412504	WITHOUT_CLASSIFICATION	2.0217587495399298E-6	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999940365555	WITHOUT_CLASSIFICATION	5.96344455250832E-9	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998563151541	WITHOUT_CLASSIFICATION	1.4368484587813835E-7	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999714386937928	WITHOUT_CLASSIFICATION	2.856130620730274E-5	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999990745196	WITHOUT_CLASSIFICATION	9.254803237470389E-10	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999996840666325	WITHOUT_CLASSIFICATION	3.159333675611802E-7	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.9999503450132051	WITHOUT_CLASSIFICATION	4.965498679487799E-5	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999981998963914	WITHOUT_CLASSIFICATION	1.8001036086959361E-6	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999601268801311	WITHOUT_CLASSIFICATION	3.9873119868857125E-5	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999976763884857	WITHOUT_CLASSIFICATION	2.323611514361538E-6	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.999978117751519	WITHOUT_CLASSIFICATION	2.1882248481030427E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999994361879015	WITHOUT_CLASSIFICATION	5.638120985108373E-7	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999997655002536	WITHOUT_CLASSIFICATION	2.3449974646091191E-7	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999973649651	WITHOUT_CLASSIFICATION	2.6350349679785345E-9	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.9999995949881986	WITHOUT_CLASSIFICATION	4.0501180149023664E-7	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999999076409801	WITHOUT_CLASSIFICATION	9.235901986656842E-8	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9999997445394078	WITHOUT_CLASSIFICATION	2.5546059225976316E-7	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999901469654205	WITHOUT_CLASSIFICATION	9.853034579501997E-6	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999996197396	WITHOUT_CLASSIFICATION	3.8026042118645224E-10	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999781646952	WITHOUT_CLASSIFICATION	2.183530478269368E-8	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999661081516565	WITHOUT_CLASSIFICATION	3.389184834333359E-5	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.9999698643203017	WITHOUT_CLASSIFICATION	3.0135679698396388E-5	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999948372237932	WITHOUT_CLASSIFICATION	5.162776206734459E-6	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999996964959353	WITHOUT_CLASSIFICATION	3.0350406469873092E-6	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999156469469676	WITHOUT_CLASSIFICATION	8.435305303235403E-5	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999994750786636	WITHOUT_CLASSIFICATION	5.249213363910724E-7	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9999999076123361	WITHOUT_CLASSIFICATION	9.238766387386718E-8	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999979899982443	WITHOUT_CLASSIFICATION	2.0100017557756767E-6	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9999966055818788	WITHOUT_CLASSIFICATION	3.3944181212922065E-6	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999994187733712	WITHOUT_CLASSIFICATION	5.812266288126144E-7	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9999995800800964	WITHOUT_CLASSIFICATION	4.199199035572788E-7	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999377791002002	WITHOUT_CLASSIFICATION	6.222089979984436E-5	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999987473	WITHOUT_CLASSIFICATION	1.252729161784433E-12	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999936728557789	WITHOUT_CLASSIFICATION	6.327144221092445E-6	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999871691	WITHOUT_CLASSIFICATION	1.283089997198119E-8	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999979617183663	WITHOUT_CLASSIFICATION	2.0382816336622436E-6	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999866199816069	WITHOUT_CLASSIFICATION	1.3380018393046452E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999866199816069	WITHOUT_CLASSIFICATION	1.3380018393046452E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999803885256446	WITHOUT_CLASSIFICATION	1.9611474355361972E-5	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999988518784566	WITHOUT_CLASSIFICATION	1.1481215434175593E-6	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999998189883993	WITHOUT_CLASSIFICATION	1.810116007929354E-7	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999977134840468	WITHOUT_CLASSIFICATION	2.286515953171487E-6	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999997153965653	WITHOUT_CLASSIFICATION	2.8460343476668256E-7	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9982084027701569	WITHOUT_CLASSIFICATION	0.001791597229843115	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999809961619623	WITHOUT_CLASSIFICATION	1.9003838037657936E-5	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999999026196428	WITHOUT_CLASSIFICATION	9.738035725590979E-8	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999916268344615	WITHOUT_CLASSIFICATION	8.373165538568899E-6	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999990329629367	WITHOUT_CLASSIFICATION	9.670370632426193E-7	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999976733966035	WITHOUT_CLASSIFICATION	2.3266033964980888E-6	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999993783841229	WITHOUT_CLASSIFICATION	6.216158771055547E-7	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9999948540644134	WITHOUT_CLASSIFICATION	5.1459355867113385E-6	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999822508843508	WITHOUT_CLASSIFICATION	1.7749115649182023E-5	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999955114420417	WITHOUT_CLASSIFICATION	4.488557958337122E-6	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9990354049417133	WITHOUT_CLASSIFICATION	9.645950582868022E-4	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999927622481583	WITHOUT_CLASSIFICATION	7.237751841765123E-6	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.999996928092041	WITHOUT_CLASSIFICATION	3.0719079590270974E-6	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942984644284	WITHOUT_CLASSIFICATION	5.701535571543082E-6	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999695373922	WITHOUT_CLASSIFICATION	3.046260786622713E-8	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922642120322	WITHOUT_CLASSIFICATION	7.735787967808605E-6	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999504795122	WITHOUT_CLASSIFICATION	4.9520487756670145E-8	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999979116881672	WITHOUT_CLASSIFICATION	2.0883118327118576E-6	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999162079545852	WITHOUT_CLASSIFICATION	8.379204541475E-5	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999991256566864	WITHOUT_CLASSIFICATION	8.743433135495608E-7	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999998174615071	WITHOUT_CLASSIFICATION	1.8253849285506364E-7	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999990472130582	WITHOUT_CLASSIFICATION	9.527869418627148E-7	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999999905290983	WITHOUT_CLASSIFICATION	9.47090174726009E-9	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999983885993654	WITHOUT_CLASSIFICATION	1.6114006346268276E-6	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999922730561126	WITHOUT_CLASSIFICATION	7.726943887365929E-6	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999695373922	WITHOUT_CLASSIFICATION	3.046260786622713E-8	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.99994818899516	WITHOUT_CLASSIFICATION	5.181100484001704E-5	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999999897977863	WITHOUT_CLASSIFICATION	1.0202213704124379E-7	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999998953245055	WITHOUT_CLASSIFICATION	1.0467549454895622E-7	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999440831236024	WITHOUT_CLASSIFICATION	5.591687639757268E-5	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999440831236024	WITHOUT_CLASSIFICATION	5.591687639757268E-5	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999999990489585	WITHOUT_CLASSIFICATION	9.510414692954748E-10	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999993099512712	WITHOUT_CLASSIFICATION	6.900487288530526E-7	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9999939282929408	WITHOUT_CLASSIFICATION	6.071707059246936E-6	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9999939282929408	WITHOUT_CLASSIFICATION	6.071707059246936E-6	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999871691	WITHOUT_CLASSIFICATION	1.283089997198119E-8	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999995095494603	WITHOUT_CLASSIFICATION	4.904505397092626E-6	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999998345417885	WITHOUT_CLASSIFICATION	1.6545821149863471E-6	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999997210766419	WITHOUT_CLASSIFICATION	2.7892335803718053E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999954099288918	WITHOUT_CLASSIFICATION	4.590071108252968E-6	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999998345417885	WITHOUT_CLASSIFICATION	1.6545821149863471E-6	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999997210766419	WITHOUT_CLASSIFICATION	2.7892335803718053E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999998384903515	WITHOUT_CLASSIFICATION	1.615096485682272E-7	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999996482522989	WITHOUT_CLASSIFICATION	3.5174770114351743E-7	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999859859593525	WITHOUT_CLASSIFICATION	1.4014040647462914E-5	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999993022310092	WITHOUT_CLASSIFICATION	6.977689908000875E-7	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9997325645611513	WITHOUT_CLASSIFICATION	2.67435438848627E-4	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999971493539528	WITHOUT_CLASSIFICATION	2.8506460472803977E-6	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999982241499382	WITHOUT_CLASSIFICATION	1.775850061764964E-6	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999982241499382	WITHOUT_CLASSIFICATION	1.775850061764964E-6	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999792577056006	WITHOUT_CLASSIFICATION	2.0742294399414307E-5	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999994971398	WITHOUT_CLASSIFICATION	5.028602213262075E-10	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999985445135325	WITHOUT_CLASSIFICATION	1.4554864675646434E-6	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999999978812567	WITHOUT_CLASSIFICATION	2.1187433058834702E-8	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999999807074629	WITHOUT_CLASSIFICATION	1.9292537071918534E-8	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999988812722113	WITHOUT_CLASSIFICATION	1.118727788722899E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999954099288918	WITHOUT_CLASSIFICATION	4.590071108252968E-6	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999966312972869	WITHOUT_CLASSIFICATION	3.368702713049162E-6	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999968457535751	WITHOUT_CLASSIFICATION	3.1542464249722368E-6	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999968457535751	WITHOUT_CLASSIFICATION	3.1542464249722368E-6	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999952421788906	WITHOUT_CLASSIFICATION	4.757821109323041E-6	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999998384903515	WITHOUT_CLASSIFICATION	1.615096485682272E-7	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999278791504171	WITHOUT_CLASSIFICATION	7.212084958277721E-5	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.992726137740197	WITHOUT_CLASSIFICATION	0.00727386225980299	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999512703506545	WITHOUT_CLASSIFICATION	4.8729649345625854E-5	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999987657310623	WITHOUT_CLASSIFICATION	1.2342689377094452E-6	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9992521162546076	WITHOUT_CLASSIFICATION	7.478837453923339E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999998384903515	WITHOUT_CLASSIFICATION	1.615096485682272E-7	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999987657310623	WITHOUT_CLASSIFICATION	1.2342689377094452E-6	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9992521162546076	WITHOUT_CLASSIFICATION	7.478837453923339E-4	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999941294893	WITHOUT_CLASSIFICATION	5.870510705449695E-9	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999990040330352	WITHOUT_CLASSIFICATION	9.959669647572518E-7	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999972191438477	WITHOUT_CLASSIFICATION	2.7808561522932317E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999998384903515	WITHOUT_CLASSIFICATION	1.615096485682272E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999998384903515	WITHOUT_CLASSIFICATION	1.615096485682272E-7	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9999995171601136	WITHOUT_CLASSIFICATION	4.828398865074774E-7	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9999989609570871	WITHOUT_CLASSIFICATION	1.0390429129083869E-6	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9999976414936689	WITHOUT_CLASSIFICATION	2.358506331143635E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999989619856448	WITHOUT_CLASSIFICATION	1.0380143551536155E-6	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9999968553001883	WITHOUT_CLASSIFICATION	3.14469981177151E-6	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999666202942	WITHOUT_CLASSIFICATION	3.337970582406417E-8	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999998320685429	WITHOUT_CLASSIFICATION	1.6793145700135243E-7	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999100570421	WITHOUT_CLASSIFICATION	8.994295785123721E-8	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999980656819821	WITHOUT_CLASSIFICATION	1.9343180179722345E-6	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9999950919031534	WITHOUT_CLASSIFICATION	4.908096846675635E-6	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999664243239967	WITHOUT_CLASSIFICATION	3.357567600333321E-5	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999986897053339	WITHOUT_CLASSIFICATION	1.310294666076646E-6	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999991322975693	WITHOUT_CLASSIFICATION	8.677024306724156E-7	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999984240668531	WITHOUT_CLASSIFICATION	1.5759331468292948E-6	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942976367042	WITHOUT_CLASSIFICATION	5.70236329573445E-6	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999964957066679	WITHOUT_CLASSIFICATION	3.504293332145936E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999989619856448	WITHOUT_CLASSIFICATION	1.0380143551536155E-6	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999714329994331	WITHOUT_CLASSIFICATION	2.856700056674674E-5	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999998080674292	WITHOUT_CLASSIFICATION	1.9193257092728803E-7	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999941709901	WITHOUT_CLASSIFICATION	5.829009946022265E-9	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999988444038346	WITHOUT_CLASSIFICATION	1.1555961653784608E-6	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9999566528332818	WITHOUT_CLASSIFICATION	4.334716671821402E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9999566528332818	WITHOUT_CLASSIFICATION	4.334716671821402E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999989619856448	WITHOUT_CLASSIFICATION	1.0380143551536155E-6	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9996474705424439	WITHOUT_CLASSIFICATION	3.52529457556171E-4	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999995493739952	WITHOUT_CLASSIFICATION	4.5062600479933506E-7	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999739057281066	WITHOUT_CLASSIFICATION	2.6094271893290544E-5	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999989345263711	WITHOUT_CLASSIFICATION	1.0654736288287653E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999982522543565	WITHOUT_CLASSIFICATION	1.7477456434728603E-6	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999994162890258	WITHOUT_CLASSIFICATION	5.837109741857175E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9998198804817392	WITHOUT_CLASSIFICATION	1.801195182607659E-4	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999999783707152	WITHOUT_CLASSIFICATION	2.162928481021794E-7	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999465071	WITHOUT_CLASSIFICATION	5.349281909526611E-11	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976204495804	WITHOUT_CLASSIFICATION	2.379550419655235E-6	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998084578855	WITHOUT_CLASSIFICATION	1.9154211448799246E-7	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999301151647282	WITHOUT_CLASSIFICATION	6.988483527180432E-5	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999602083927908	WITHOUT_CLASSIFICATION	3.979160720920304E-4	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999804356974349	WITHOUT_CLASSIFICATION	1.956430256519063E-5	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999997003607	WITHOUT_CLASSIFICATION	2.9963923977522115E-10	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992116836308	WITHOUT_CLASSIFICATION	7.88316369182096E-7	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999693116813033	WITHOUT_CLASSIFICATION	3.068831869660481E-5	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999985437934786	WITHOUT_CLASSIFICATION	1.456206521335242E-6	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999925287141547	WITHOUT_CLASSIFICATION	7.471285845276171E-6	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988380826806	WITHOUT_CLASSIFICATION	1.161917319330361E-6	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999892915094212	WITHOUT_CLASSIFICATION	1.0708490578738734E-5	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999999767232643	WITHOUT_CLASSIFICATION	2.3276735704737022E-7	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999998852549008	WITHOUT_CLASSIFICATION	1.1474509911787115E-7	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999644526095239	WITHOUT_CLASSIFICATION	3.554739047617519E-5	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973385469766	WITHOUT_CLASSIFICATION	2.661453023391246E-6	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999872019395158	WITHOUT_CLASSIFICATION	1.2798060484049974E-5	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999823253022087	WITHOUT_CLASSIFICATION	1.7674697791431482E-5	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959726981091	WITHOUT_CLASSIFICATION	4.027301890900812E-6	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971487242434	WITHOUT_CLASSIFICATION	2.851275756526577E-6	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999885640610712	WITHOUT_CLASSIFICATION	1.143593892890969E-5	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985042181789	WITHOUT_CLASSIFICATION	1.4957818211308153E-6	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999993304519135	WITHOUT_CLASSIFICATION	6.695480865095594E-7	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999997309298686	WITHOUT_CLASSIFICATION	2.6907013139002284E-7	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980534820007	WITHOUT_CLASSIFICATION	1.9465179993591997E-6	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999662792605	WITHOUT_CLASSIFICATION	3.372073949911834E-7	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999499649752	WITHOUT_CLASSIFICATION	5.003502480323992E-7	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989847029179	WITHOUT_CLASSIFICATION	1.0152970820880783E-6	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929526373574	WITHOUT_CLASSIFICATION	7.047362642636018E-6	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996388444371	WITHOUT_CLASSIFICATION	3.611555628561215E-7	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995086057526	WITHOUT_CLASSIFICATION	4.913942473708145E-7	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999852265911164	WITHOUT_CLASSIFICATION	1.4773408883713301E-5	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999325886373893	WITHOUT_CLASSIFICATION	6.741136261075442E-5	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884373422231	WITHOUT_CLASSIFICATION	1.1562657776868083E-5	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9102011314424796	WITHOUT_CLASSIFICATION	0.08979886855752035	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999962578681315	WITHOUT_CLASSIFICATION	3.7421318684220876E-6	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999999999999117	WITHOUT_CLASSIFICATION	8.828402679769712E-13	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999993948260029	WITHOUT_CLASSIFICATION	6.051739970607196E-7	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.9999979034605109	WITHOUT_CLASSIFICATION	2.096539489152853E-6	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999993120644829	WITHOUT_CLASSIFICATION	6.879355170233916E-7	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999998403499348	WITHOUT_CLASSIFICATION	1.5965006507304582E-7	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999988644787428	WITHOUT_CLASSIFICATION	1.1355212571994872E-6	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999901995188231	WITHOUT_CLASSIFICATION	9.800481177022305E-6	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999949916946771	WITHOUT_CLASSIFICATION	5.0083053229413065E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976204495804	WITHOUT_CLASSIFICATION	2.379550419655235E-6	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.99999437670376	WITHOUT_CLASSIFICATION	5.623296239972585E-6	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999986442942022	WITHOUT_CLASSIFICATION	1.3557057979101506E-6	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999998927729479	WITHOUT_CLASSIFICATION	1.0722705209528892E-7	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999948793885199	WITHOUT_CLASSIFICATION	5.120611480058439E-6	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.999957891832354	WITHOUT_CLASSIFICATION	4.210816764613028E-5	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.9999392645447139	WITHOUT_CLASSIFICATION	6.073545528608183E-5	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9998340257666335	WITHOUT_CLASSIFICATION	1.65974233366545E-4	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941680158105	WITHOUT_CLASSIFICATION	5.831984189499572E-6	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751551900009	WITHOUT_CLASSIFICATION	2.4844809999121648E-5	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982098545368	WITHOUT_CLASSIFICATION	1.7901454631962508E-6	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886350140388	WITHOUT_CLASSIFICATION	1.1364985961208312E-5	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9998891506385259	WITHOUT_CLASSIFICATION	1.108493614741287E-4	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999319050786	WITHOUT_CLASSIFICATION	6.809492142272056E-8	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999988580390217	WITHOUT_CLASSIFICATION	1.1419609783339871E-6	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999537168339873	WITHOUT_CLASSIFICATION	4.628316601277793E-5	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999989801124	WITHOUT_CLASSIFICATION	1.0198876009374731E-7	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999998851770559	WITHOUT_CLASSIFICATION	1.1482294408897346E-6	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999996120326988	WITHOUT_CLASSIFICATION	3.879673011961446E-6	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999948397728405	WITHOUT_CLASSIFICATION	5.16022715951217E-6	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999959334296	WITHOUT_CLASSIFICATION	4.066570403535656E-9	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999595038751696	WITHOUT_CLASSIFICATION	4.049612483047588E-5	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999970675348768	WITHOUT_CLASSIFICATION	2.9324651231610537E-6	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999991976053005	WITHOUT_CLASSIFICATION	8.023946996108127E-7	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998727537879962	WITHOUT_CLASSIFICATION	1.2724621200386522E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976204495804	WITHOUT_CLASSIFICATION	2.379550419655235E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999993948260029	WITHOUT_CLASSIFICATION	6.051739970607196E-7	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999640372151315	WITHOUT_CLASSIFICATION	3.596278486855095E-5	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999776438893	WITHOUT_CLASSIFICATION	2.2356110669142317E-8	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999995956607793	WITHOUT_CLASSIFICATION	4.043392206330516E-7	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999992887848222	WITHOUT_CLASSIFICATION	7.112151777840329E-6	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999800176439132	WITHOUT_CLASSIFICATION	1.998235608680212E-5	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.9999996437150487	WITHOUT_CLASSIFICATION	3.562849513017612E-7	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9998891506385259	WITHOUT_CLASSIFICATION	1.108493614741287E-4	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9998390274968297	WITHOUT_CLASSIFICATION	1.6097250317026213E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999994998372234	WITHOUT_CLASSIFICATION	5.001627765903171E-7	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999571480721304	WITHOUT_CLASSIFICATION	4.2851927869646765E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999642562271182	WITHOUT_CLASSIFICATION	3.5743772881921575E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999729478536773	WITHOUT_CLASSIFICATION	2.705214632273902E-5	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999557876796	WITHOUT_CLASSIFICATION	4.421232045775882E-8	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976204495804	WITHOUT_CLASSIFICATION	2.379550419655235E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976204495804	WITHOUT_CLASSIFICATION	2.379550419655235E-6	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999992248876965	WITHOUT_CLASSIFICATION	7.751123034213948E-7	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999798098691	WITHOUT_CLASSIFICATION	2.0190130921004397E-8	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999991036588571	WITHOUT_CLASSIFICATION	8.963411428401017E-7	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999912775163967	WITHOUT_CLASSIFICATION	8.72248360334902E-6	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999665147139	WITHOUT_CLASSIFICATION	3.3485286124400814E-8	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999971909942172	WITHOUT_CLASSIFICATION	2.8090057828164188E-6	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999878212971	WITHOUT_CLASSIFICATION	1.2178702876544705E-8	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9999993167254261	WITHOUT_CLASSIFICATION	6.832745739199507E-7	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999969903380088	WITHOUT_CLASSIFICATION	3.0096619912525107E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976204495804	WITHOUT_CLASSIFICATION	2.379550419655235E-6	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999986555748925	WITHOUT_CLASSIFICATION	1.3444251075197616E-6	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999882495114	WITHOUT_CLASSIFICATION	1.1750488604795806E-8	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.999999936800731	WITHOUT_CLASSIFICATION	6.319926902895784E-8	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999998140989913	WITHOUT_CLASSIFICATION	1.8590100862876965E-7	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999939016897158	WITHOUT_CLASSIFICATION	6.098310284234376E-6	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999879611093153	WITHOUT_CLASSIFICATION	1.2038890684800952E-5	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999975363867916	WITHOUT_CLASSIFICATION	2.4636132083281872E-6	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9999999157125937	WITHOUT_CLASSIFICATION	8.428740625587839E-8	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9787031468680185	WITHOUT_CLASSIFICATION	0.021296853131981527	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999991981180057	WITHOUT_CLASSIFICATION	8.018819942688727E-7	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999999265505605	WITHOUT_CLASSIFICATION	7.344943961224786E-8	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999983012033752	WITHOUT_CLASSIFICATION	1.6987966248183776E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999993948260029	WITHOUT_CLASSIFICATION	6.051739970607196E-7	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9992092372964696	WITHOUT_CLASSIFICATION	7.90762703530413E-4	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999999646933981	WITHOUT_CLASSIFICATION	3.5306601794057556E-8	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998794041941798	WITHOUT_CLASSIFICATION	1.2059580582035659E-4	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999984763418538	WITHOUT_CLASSIFICATION	1.5236581462611393E-6	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999912388102329	WITHOUT_CLASSIFICATION	8.761189767109605E-6	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999919600320919	WITHOUT_CLASSIFICATION	8.039967908126634E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999993948260029	WITHOUT_CLASSIFICATION	6.051739970607196E-7	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999975846375041	WITHOUT_CLASSIFICATION	2.4153624959196052E-6	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999882495114	WITHOUT_CLASSIFICATION	1.1750488604795806E-8	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9994120562321845	WITHOUT_CLASSIFICATION	5.879437678154814E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999986555748925	WITHOUT_CLASSIFICATION	1.3444251075197616E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976204495804	WITHOUT_CLASSIFICATION	2.379550419655235E-6	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999436169862	WITHOUT_CLASSIFICATION	5.6383013909191696E-8	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998802653369359	WITHOUT_CLASSIFICATION	1.1973466306416872E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976204495804	WITHOUT_CLASSIFICATION	2.379550419655235E-6	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999997633043551	WITHOUT_CLASSIFICATION	2.366956448516284E-7	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999571480721304	WITHOUT_CLASSIFICATION	4.2851927869646765E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999642562271182	WITHOUT_CLASSIFICATION	3.5743772881921575E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999729478536773	WITHOUT_CLASSIFICATION	2.705214632273902E-5	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.999999872417027	WITHOUT_CLASSIFICATION	1.2758297285981683E-7	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.9999972229619664	WITHOUT_CLASSIFICATION	2.777038033637955E-6	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999999228584294	WITHOUT_CLASSIFICATION	7.714157055789713E-8	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999986555748925	WITHOUT_CLASSIFICATION	1.3444251075197616E-6	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999436169862	WITHOUT_CLASSIFICATION	5.6383013909191696E-8	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976204495804	WITHOUT_CLASSIFICATION	2.379550419655235E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999993948260029	WITHOUT_CLASSIFICATION	6.051739970607196E-7	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999557876796	WITHOUT_CLASSIFICATION	4.421232045775882E-8	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999992248876965	WITHOUT_CLASSIFICATION	7.751123034213948E-7	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999798098691	WITHOUT_CLASSIFICATION	2.0190130921004397E-8	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999336322716	WITHOUT_CLASSIFICATION	6.636772840866045E-8	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963234637039	WITHOUT_CLASSIFICATION	3.6765362960102875E-6	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999997994151588	WITHOUT_CLASSIFICATION	2.0058484109926818E-7	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999859229284	WITHOUT_CLASSIFICATION	1.4077071664937618E-8	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999995079895683	WITHOUT_CLASSIFICATION	4.920104317171226E-7	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999948147873705	WITHOUT_CLASSIFICATION	5.185212629430097E-6	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999852265911164	WITHOUT_CLASSIFICATION	1.4773408883713301E-5	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999613823571475	WITHOUT_CLASSIFICATION	3.86176428525795E-5	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999997946114219	WITHOUT_CLASSIFICATION	2.0538857804514558E-7	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999996121594342	WITHOUT_CLASSIFICATION	3.8784056574535124E-7	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999999874628252	WITHOUT_CLASSIFICATION	1.2537174797258488E-7	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999560018125	WITHOUT_CLASSIFICATION	4.399818753538442E-8	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959726981091	WITHOUT_CLASSIFICATION	4.027301890900812E-6	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971487242434	WITHOUT_CLASSIFICATION	2.851275756526577E-6	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999662792605	WITHOUT_CLASSIFICATION	3.372073949911834E-7	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999560018125	WITHOUT_CLASSIFICATION	4.399818753538442E-8	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999996376435951	WITHOUT_CLASSIFICATION	3.6235640489809215E-7	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999969833474931	WITHOUT_CLASSIFICATION	3.016652506854211E-6	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999756438355959	WITHOUT_CLASSIFICATION	2.4356164404095262E-5	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999853725585007	WITHOUT_CLASSIFICATION	1.4627441499173415E-5	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999965851418354	WITHOUT_CLASSIFICATION	3.4148581645484407E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976204495804	WITHOUT_CLASSIFICATION	2.379550419655235E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976204495804	WITHOUT_CLASSIFICATION	2.379550419655235E-6	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.9999911231552023	WITHOUT_CLASSIFICATION	8.87684479768159E-6	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999499649752	WITHOUT_CLASSIFICATION	5.003502480323992E-7	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996388444371	WITHOUT_CLASSIFICATION	3.611555628561215E-7	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999959334296	WITHOUT_CLASSIFICATION	4.066570403535656E-9	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999997595169141	WITHOUT_CLASSIFICATION	2.4048308587038905E-7	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999991209410498	WITHOUT_CLASSIFICATION	8.790589501986444E-7	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999996145705727	WITHOUT_CLASSIFICATION	3.854294273019018E-7	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999557121971	WITHOUT_CLASSIFICATION	4.428780296665575E-8	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999997136669394	WITHOUT_CLASSIFICATION	2.8633306057697315E-7	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999857083242	WITHOUT_CLASSIFICATION	1.42916758137662E-8	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999978611052062	WITHOUT_CLASSIFICATION	2.138894793822037E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999962250642183	WITHOUT_CLASSIFICATION	3.7749357817488633E-6	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999465071	WITHOUT_CLASSIFICATION	5.349281909526611E-11	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999925881084517	WITHOUT_CLASSIFICATION	7.41189154826405E-6	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999891035005	WITHOUT_CLASSIFICATION	1.0896499559029421E-8	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999993846349937	WITHOUT_CLASSIFICATION	6.153650062930371E-6	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999971136490687	WITHOUT_CLASSIFICATION	2.886350931265527E-6	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999045716962	WITHOUT_CLASSIFICATION	9.542830385215665E-8	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999985662676328	WITHOUT_CLASSIFICATION	1.4337323672144161E-6	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991128840215	WITHOUT_CLASSIFICATION	8.871159784727359E-7	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794423298902	WITHOUT_CLASSIFICATION	2.0557670109771336E-5	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998838722539	WITHOUT_CLASSIFICATION	1.1612774601836815E-7	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999959435993531	WITHOUT_CLASSIFICATION	4.056400646940268E-6	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.999959863213241	WITHOUT_CLASSIFICATION	4.013678675895752E-5	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995985194248	WITHOUT_CLASSIFICATION	4.014805752337711E-7	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998502732719	WITHOUT_CLASSIFICATION	1.497267281283376E-7	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992641975248	WITHOUT_CLASSIFICATION	7.358024750997301E-7	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993011843515	WITHOUT_CLASSIFICATION	6.988156484941188E-7	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999986266630221	WITHOUT_CLASSIFICATION	1.3733369780020159E-6	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999999387367756	WITHOUT_CLASSIFICATION	6.126322443196523E-8	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995454159962	WITHOUT_CLASSIFICATION	4.545840038818381E-7	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999943312171989	WITHOUT_CLASSIFICATION	5.66878280104312E-6	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999822680864	WITHOUT_CLASSIFICATION	1.773191359877177E-8	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975507611661	WITHOUT_CLASSIFICATION	2.4492388339235166E-6	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999999046932946	WITHOUT_CLASSIFICATION	9.530670548884612E-8	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999995977410733	WITHOUT_CLASSIFICATION	4.022589267810011E-7	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999908355139319	WITHOUT_CLASSIFICATION	9.164486068118027E-6	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9999917534988031	WITHOUT_CLASSIFICATION	8.246501196910214E-6	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999937813177912	WITHOUT_CLASSIFICATION	6.218682208827199E-6	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999971368285749	WITHOUT_CLASSIFICATION	2.8631714250217505E-6	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999994948058941	WITHOUT_CLASSIFICATION	5.051941057853733E-7	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999913347919708	WITHOUT_CLASSIFICATION	8.665208029199097E-6	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999999476114506	WITHOUT_CLASSIFICATION	5.2388549421935525E-8	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999997726099022	WITHOUT_CLASSIFICATION	2.273900977125055E-7	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9996874389038578	WITHOUT_CLASSIFICATION	3.12561096142201E-4	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999987051471998	WITHOUT_CLASSIFICATION	1.294852800202543E-6	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999991387334	WITHOUT_CLASSIFICATION	8.612667132386345E-10	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999995595429049	WITHOUT_CLASSIFICATION	4.4045709512584116E-7	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999986957647924	WITHOUT_CLASSIFICATION	1.3042352075583464E-6	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.999999971661143	WITHOUT_CLASSIFICATION	2.833885708589724E-8	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999780288917	WITHOUT_CLASSIFICATION	2.197110828991077E-8	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999982295756646	WITHOUT_CLASSIFICATION	1.7704243353916732E-6	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999949742382	WITHOUT_CLASSIFICATION	5.0257617345264815E-9	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999999607732712	WITHOUT_CLASSIFICATION	3.9226728673204955E-8	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999993926637817	WITHOUT_CLASSIFICATION	6.073362183505996E-7	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9997549017325618	WITHOUT_CLASSIFICATION	2.450982674382429E-4	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999988121930441	WITHOUT_CLASSIFICATION	1.1878069559292479E-6	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999900301206959	WITHOUT_CLASSIFICATION	9.969879304046762E-6	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999882817926	WITHOUT_CLASSIFICATION	1.1718207438756492E-8	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999984536344533	WITHOUT_CLASSIFICATION	1.546365546718582E-6	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.99999888829396	WITHOUT_CLASSIFICATION	1.1117060400522388E-6	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999969878958133	WITHOUT_CLASSIFICATION	3.0121041866457987E-6	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999896965431665	WITHOUT_CLASSIFICATION	1.0303456833539596E-5	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999989321020105	WITHOUT_CLASSIFICATION	1.0678979894854288E-6	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999997135846276	WITHOUT_CLASSIFICATION	2.8641537236949185E-7	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999997514428139	WITHOUT_CLASSIFICATION	2.4855718596047994E-7	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999787011627141	WITHOUT_CLASSIFICATION	2.1298837285798628E-5	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999859289037484	WITHOUT_CLASSIFICATION	1.4071096251662613E-5	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9987872308121803	WITHOUT_CLASSIFICATION	0.0012127691878196295	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999901075048371	WITHOUT_CLASSIFICATION	9.892495162920589E-6	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999882394950825	WITHOUT_CLASSIFICATION	1.1760504917477514E-5	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.9999994266674521	WITHOUT_CLASSIFICATION	5.733325478748295E-7	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999857166866	WITHOUT_CLASSIFICATION	1.4283313408904527E-8	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999981115812286	WITHOUT_CLASSIFICATION	1.888418771343162E-6	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999984476817149	WITHOUT_CLASSIFICATION	1.5523182851541171E-6	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.999497884153696	WITHOUT_CLASSIFICATION	5.021158463040067E-4	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9996606383744506	WITHOUT_CLASSIFICATION	3.3936162554944736E-4	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999989109344717	WITHOUT_CLASSIFICATION	1.0890655283115448E-6	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9229313499801837	WITHOUT_CLASSIFICATION	0.07706865001981626	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999974211197	WITHOUT_CLASSIFICATION	2.578880316050914E-9	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999889689829089	WITHOUT_CLASSIFICATION	1.103101709111028E-4	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999828023797	WITHOUT_CLASSIFICATION	1.7197620284495634E-8	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999917899222	WITHOUT_CLASSIFICATION	8.210077867640475E-9	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999920267254687	WITHOUT_CLASSIFICATION	7.973274531234984E-6	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999869826421	WITHOUT_CLASSIFICATION	1.3017357918645505E-8	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999979095696979	WITHOUT_CLASSIFICATION	2.090430302016254E-6	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999993802190603	WITHOUT_CLASSIFICATION	6.19780939567666E-7	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999877012211732	WITHOUT_CLASSIFICATION	1.2298778826818914E-5	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999986098427319	WITHOUT_CLASSIFICATION	1.3901572680792584E-6	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999992701168231	WITHOUT_CLASSIFICATION	7.298831768905597E-7	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999930757136	WITHOUT_CLASSIFICATION	6.924286357816316E-9	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999996046252	WITHOUT_CLASSIFICATION	3.953749305601263E-10	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999996254653276	WITHOUT_CLASSIFICATION	3.7453467238524706E-7	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999936445361789	WITHOUT_CLASSIFICATION	6.355463821001203E-6	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998924975328	WITHOUT_CLASSIFICATION	1.0750246720045795E-7	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999998037773277	WITHOUT_CLASSIFICATION	1.962226721815239E-7	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999994529052919	WITHOUT_CLASSIFICATION	5.47094707987881E-7	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999935128614808	WITHOUT_CLASSIFICATION	6.487138519192131E-5	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999997750737197	WITHOUT_CLASSIFICATION	2.2492628019647765E-7	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999994910274328	WITHOUT_CLASSIFICATION	5.089725671906995E-7	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9999756070463799	WITHOUT_CLASSIFICATION	2.4392953620081003E-5	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999997925555332	WITHOUT_CLASSIFICATION	2.074444668396815E-7	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999650523336	WITHOUT_CLASSIFICATION	3.494766645511294E-8	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9992631172753136	WITHOUT_CLASSIFICATION	7.368827246865096E-4	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.999974594832628	WITHOUT_CLASSIFICATION	2.5405167371975527E-5	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999997365767606	WITHOUT_CLASSIFICATION	2.634232393979903E-7	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9992631172753136	WITHOUT_CLASSIFICATION	7.368827246865096E-4	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999563650944	WITHOUT_CLASSIFICATION	4.3634905615866055E-8	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999994771885581	WITHOUT_CLASSIFICATION	5.228114418372193E-7	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999996963242177	WITHOUT_CLASSIFICATION	3.0367578230155747E-7	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.999958979613966	WITHOUT_CLASSIFICATION	4.1020386034092154E-5	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9999998699442435	WITHOUT_CLASSIFICATION	1.300557565343106E-7	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999937604063	WITHOUT_CLASSIFICATION	6.239593729170812E-9	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.99999512385917	WITHOUT_CLASSIFICATION	4.876140829985187E-6	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999999596930111	WITHOUT_CLASSIFICATION	4.030698885122507E-8	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999998038871624	WITHOUT_CLASSIFICATION	1.961128376336253E-7	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999984432448619	WITHOUT_CLASSIFICATION	1.556755138046108E-6	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999987080287127	WITHOUT_CLASSIFICATION	1.2919712872860413E-6	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999895507952155	WITHOUT_CLASSIFICATION	1.0449204784553724E-5	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999913872203	WITHOUT_CLASSIFICATION	8.612779699200502E-9	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999991633985	WITHOUT_CLASSIFICATION	8.36601518303407E-10	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998201577056	WITHOUT_CLASSIFICATION	1.7984229430746829E-7	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999983660059588	WITHOUT_CLASSIFICATION	1.633994041216491E-6	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999325090138611	WITHOUT_CLASSIFICATION	6.749098613888403E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999325090138611	WITHOUT_CLASSIFICATION	6.749098613888403E-5	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999992240621606	WITHOUT_CLASSIFICATION	7.759378393494576E-7	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9998587535664679	WITHOUT_CLASSIFICATION	1.412464335321336E-4	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9999796259201003	WITHOUT_CLASSIFICATION	2.0374079899813635E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9999971369403197	WITHOUT_CLASSIFICATION	2.8630596804728786E-6	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999998160528238	WITHOUT_CLASSIFICATION	1.83947176201502E-6	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9340023140068185	WITHOUT_CLASSIFICATION	0.06599768599318154	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9999654674490936	WITHOUT_CLASSIFICATION	3.453255090628792E-5	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999996940056488	WITHOUT_CLASSIFICATION	3.0599435121679063E-7	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9999985836363847	WITHOUT_CLASSIFICATION	1.4163636153307883E-6	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998800339890643	WITHOUT_CLASSIFICATION	1.199660109357113E-4	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999988607268491	WITHOUT_CLASSIFICATION	1.139273150955293E-6	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999996893264	WITHOUT_CLASSIFICATION	3.1067356773752527E-10	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999998828631073	WITHOUT_CLASSIFICATION	1.1713689270705872E-7	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999999550914455	WITHOUT_CLASSIFICATION	4.4908554487117893E-7	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999959512325	WITHOUT_CLASSIFICATION	4.0487675174539194E-9	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999985662676328	WITHOUT_CLASSIFICATION	1.4337323672144161E-6	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999995986017277	WITHOUT_CLASSIFICATION	4.0139827226552287E-7	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999332253305	WITHOUT_CLASSIFICATION	6.67746694795981E-8	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999968263756182	WITHOUT_CLASSIFICATION	3.173624381932394E-6	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999984368876386	WITHOUT_CLASSIFICATION	1.5631123614328401E-6	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999449920995	WITHOUT_CLASSIFICATION	5.500790049055772E-8	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9999993393286617	WITHOUT_CLASSIFICATION	6.606713382922713E-7	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.999999744364184	WITHOUT_CLASSIFICATION	2.5563581599009786E-7	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999995533586366	WITHOUT_CLASSIFICATION	4.46641363472804E-7	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999629524259	WITHOUT_CLASSIFICATION	3.704757402299667E-8	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999028295371	WITHOUT_CLASSIFICATION	9.717046286023464E-8	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999942197872	WITHOUT_CLASSIFICATION	5.78021270810172E-9	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999942195292939	WITHOUT_CLASSIFICATION	5.7804707061367935E-6	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999988368545909	WITHOUT_CLASSIFICATION	1.1631454091693613E-6	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9999799949308488	WITHOUT_CLASSIFICATION	2.0005069151172343E-5	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999954739057962	WITHOUT_CLASSIFICATION	4.5260942037592016E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999997328201835	WITHOUT_CLASSIFICATION	2.671798165021506E-7	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.9999614212464228	WITHOUT_CLASSIFICATION	3.857875357707673E-5	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999997615941352	WITHOUT_CLASSIFICATION	2.3840586486982674E-7	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999972619687612	WITHOUT_CLASSIFICATION	2.7380312389346283E-6	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999996017133939	WITHOUT_CLASSIFICATION	3.982866061405134E-7	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999964369144276	WITHOUT_CLASSIFICATION	3.5630855723982147E-6	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999918619209375	WITHOUT_CLASSIFICATION	8.138079062508746E-6	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999998392143243	WITHOUT_CLASSIFICATION	1.607856756557447E-7	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999042743998474	WITHOUT_CLASSIFICATION	9.572560015255543E-5	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9999996578630099	WITHOUT_CLASSIFICATION	3.4213699004060274E-7	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9999998288899727	WITHOUT_CLASSIFICATION	1.7111002727149645E-7	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9969623734208053	WITHOUT_CLASSIFICATION	0.0030376265791947246	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999992308200785	WITHOUT_CLASSIFICATION	7.691799215149381E-7	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999973182008633	WITHOUT_CLASSIFICATION	2.681799136650827E-6	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999995695398297	WITHOUT_CLASSIFICATION	4.3046017021908193E-7	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999959990876603	WITHOUT_CLASSIFICATION	4.000912339701903E-5	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999784702127739	WITHOUT_CLASSIFICATION	2.1529787226039957E-5	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999687184957959	WITHOUT_CLASSIFICATION	3.128150420396029E-5	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9996154555834584	WITHOUT_CLASSIFICATION	3.845444165415703E-4	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999936127921351	WITHOUT_CLASSIFICATION	6.387207864842278E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999962250642183	WITHOUT_CLASSIFICATION	3.7749357817488633E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999962250642183	WITHOUT_CLASSIFICATION	3.7749357817488633E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999985296899315	WITHOUT_CLASSIFICATION	1.4703100685277534E-6	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999979205302573	WITHOUT_CLASSIFICATION	2.0794697427488037E-6	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9986823791094038	WITHOUT_CLASSIFICATION	0.0013176208905962287	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999753172955631	WITHOUT_CLASSIFICATION	2.4682704436891016E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9986823791094038	WITHOUT_CLASSIFICATION	0.0013176208905962287	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999987935169525	WITHOUT_CLASSIFICATION	1.206483047452779E-6	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999986984240418	WITHOUT_CLASSIFICATION	1.3015759582384304E-6	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.999998527949699	WITHOUT_CLASSIFICATION	1.4720503009218422E-6	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999993451046422	WITHOUT_CLASSIFICATION	6.54895357881606E-7	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999992766170237	WITHOUT_CLASSIFICATION	7.233829762275938E-7	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999984731013215	WITHOUT_CLASSIFICATION	1.526898678462535E-6	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999431381403	WITHOUT_CLASSIFICATION	5.686185962083319E-8	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9999459905091421	WITHOUT_CLASSIFICATION	5.400949085787897E-5	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999884507372	WITHOUT_CLASSIFICATION	1.154926277566705E-8	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999987923502114	WITHOUT_CLASSIFICATION	1.2076497885491641E-6	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999990714630721	WITHOUT_CLASSIFICATION	9.28536927992893E-7	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999988266871503	WITHOUT_CLASSIFICATION	1.1733128496535395E-6	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999992815287749	WITHOUT_CLASSIFICATION	7.184712250761134E-7	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9989893873257305	WITHOUT_CLASSIFICATION	0.0010106126742695008	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999998025928	WITHOUT_CLASSIFICATION	1.9740721444760889E-10	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999998829942569	WITHOUT_CLASSIFICATION	1.1700574310400787E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999983939098313	WITHOUT_CLASSIFICATION	1.6060901687698323E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999983939098313	WITHOUT_CLASSIFICATION	1.6060901687698323E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999977667788321	WITHOUT_CLASSIFICATION	2.2332211679638522E-6	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999994072823072	WITHOUT_CLASSIFICATION	5.927176928033106E-7	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999976535098886	WITHOUT_CLASSIFICATION	2.3464901115016774E-6	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999993590484088	WITHOUT_CLASSIFICATION	6.4095159129398E-7	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999455101376	WITHOUT_CLASSIFICATION	5.448986227974116E-8	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999978977323435	WITHOUT_CLASSIFICATION	2.102267656481149E-6	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999851974527282	WITHOUT_CLASSIFICATION	1.4802547271781622E-5	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999994230476682	WITHOUT_CLASSIFICATION	5.769523317649756E-7	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.9999998107577355	WITHOUT_CLASSIFICATION	1.8924226452228017E-7	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999968742177262	WITHOUT_CLASSIFICATION	3.1257822737619732E-6	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999987358977234	WITHOUT_CLASSIFICATION	1.2641022766952136E-6	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999991762026	WITHOUT_CLASSIFICATION	8.237973478964676E-10	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999797009123	WITHOUT_CLASSIFICATION	2.0299087704939574E-8	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999922465982981	WITHOUT_CLASSIFICATION	7.753401701921293E-6	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999999758624387	WITHOUT_CLASSIFICATION	2.4137561307122904E-7	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999999912918657	WITHOUT_CLASSIFICATION	8.708134309816697E-8	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999994028896285	WITHOUT_CLASSIFICATION	5.971103714693251E-7	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999998400172869	WITHOUT_CLASSIFICATION	1.5998271310214064E-6	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9999991056025875	WITHOUT_CLASSIFICATION	8.943974125598912E-7	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999960112823	WITHOUT_CLASSIFICATION	3.988717702796149E-9	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999894352328146	WITHOUT_CLASSIFICATION	1.0564767185313782E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999800338456	WITHOUT_CLASSIFICATION	1.9966154374898656E-8	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999998955045346	WITHOUT_CLASSIFICATION	1.0449546539443347E-7	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999987592333	WITHOUT_CLASSIFICATION	1.2407666630262174E-9	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9999996825351173	WITHOUT_CLASSIFICATION	3.174648826909573E-7	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999974823104806	WITHOUT_CLASSIFICATION	2.5176895194663787E-6	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999999199769369	WITHOUT_CLASSIFICATION	8.002306310340867E-7	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999416500522493	WITHOUT_CLASSIFICATION	5.8349947750718915E-5	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999944088450675	WITHOUT_CLASSIFICATION	5.591154932583303E-6	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999744258679698	WITHOUT_CLASSIFICATION	2.5574132030233622E-5	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999995631941764	WITHOUT_CLASSIFICATION	4.368058235914112E-7	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999996709915554	WITHOUT_CLASSIFICATION	3.2900844458931775E-7	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999967804200404	WITHOUT_CLASSIFICATION	3.2195799596088166E-5	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999999319274759	WITHOUT_CLASSIFICATION	6.807252402227745E-8	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999975253175379	WITHOUT_CLASSIFICATION	2.474682462083675E-6	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999987944498	WITHOUT_CLASSIFICATION	1.2055502196558199E-9	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999617038131	WITHOUT_CLASSIFICATION	3.829618682423085E-8	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.999997074375607	WITHOUT_CLASSIFICATION	2.925624392902537E-6	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999867256847893	WITHOUT_CLASSIFICATION	1.3274315210794786E-5	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999859739784586	WITHOUT_CLASSIFICATION	1.4026021541326734E-5	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999982512901293	WITHOUT_CLASSIFICATION	1.7487098706679222E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976100347933	WITHOUT_CLASSIFICATION	2.3899652068010752E-6	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9999984694288054	WITHOUT_CLASSIFICATION	1.5305711945496572E-6	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998199631038702	WITHOUT_CLASSIFICATION	1.8003689612978792E-4	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999998531672113	WITHOUT_CLASSIFICATION	1.4683278868883927E-7	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9982860394151735	WITHOUT_CLASSIFICATION	0.0017139605848265343	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9837331900584553	WITHOUT_CLASSIFICATION	0.016266809941544665	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999991942731	WITHOUT_CLASSIFICATION	8.05726967263224E-10	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999988605116749	WITHOUT_CLASSIFICATION	1.1394883251804637E-6	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999874670769583	WITHOUT_CLASSIFICATION	1.2532923041610874E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980686113871	WITHOUT_CLASSIFICATION	1.931388612939353E-6	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999682873109	WITHOUT_CLASSIFICATION	3.1712689215578366E-8	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9995329688602183	WITHOUT_CLASSIFICATION	4.670311397817675E-4	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999999753538895	WITHOUT_CLASSIFICATION	2.4646110461061904E-8	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9999990215684915	WITHOUT_CLASSIFICATION	9.784315085340028E-7	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999975846375041	WITHOUT_CLASSIFICATION	2.4153624959196052E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999975846375041	WITHOUT_CLASSIFICATION	2.4153624959196052E-6	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999999093858562	WITHOUT_CLASSIFICATION	9.061414379408865E-7	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998353419387207	WITHOUT_CLASSIFICATION	1.6465806127921763E-4	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999890031802225	WITHOUT_CLASSIFICATION	1.0996819777500302E-5	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999808325085541	WITHOUT_CLASSIFICATION	1.9167491445924372E-5	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999996292463939	WITHOUT_CLASSIFICATION	3.7075360620734537E-7	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999689360212	WITHOUT_CLASSIFICATION	3.1063978828013146E-8	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999978398099935	WITHOUT_CLASSIFICATION	2.1601900065126807E-6	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999995930558484	WITHOUT_CLASSIFICATION	4.069441516190559E-7	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.999999988629673	WITHOUT_CLASSIFICATION	1.1370326963651677E-8	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999991348224683	WITHOUT_CLASSIFICATION	8.651775317719282E-7	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999839750409	WITHOUT_CLASSIFICATION	1.602495923129831E-8	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999987235180031	WITHOUT_CLASSIFICATION	1.276481996900148E-6	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999910176188568	WITHOUT_CLASSIFICATION	8.982381143094628E-6	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999986357276874	WITHOUT_CLASSIFICATION	1.3642723125685873E-6	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999996024467438	WITHOUT_CLASSIFICATION	3.9755325616616607E-7	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999661288620915	WITHOUT_CLASSIFICATION	3.387113790863182E-5	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999332646147455	WITHOUT_CLASSIFICATION	6.673538525450579E-5	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999865583099251	WITHOUT_CLASSIFICATION	1.344169007488755E-5	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.9999902267966874	WITHOUT_CLASSIFICATION	9.773203312614592E-6	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9997488205733261	WITHOUT_CLASSIFICATION	2.511794266737762E-4	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999733015347003	WITHOUT_CLASSIFICATION	2.669846529964836E-5	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999919026238	WITHOUT_CLASSIFICATION	8.09737626507058E-9	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999516515797828	WITHOUT_CLASSIFICATION	4.834842021725792E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998406134487208	WITHOUT_CLASSIFICATION	1.5938655127931408E-4	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9997045010694318	WITHOUT_CLASSIFICATION	2.954989305682556E-4	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9988137268026003	WITHOUT_CLASSIFICATION	0.001186273197399662	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9409739288104747	WITHOUT_CLASSIFICATION	0.059026071189525256	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999997962180197	WITHOUT_CLASSIFICATION	2.037819803503109E-7	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992216876739444	WITHOUT_CLASSIFICATION	7.783123260556858E-4	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999985435716805	WITHOUT_CLASSIFICATION	1.4564283194170384E-6	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998406134487208	WITHOUT_CLASSIFICATION	1.5938655127931408E-4	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.999997939760389	WITHOUT_CLASSIFICATION	2.0602396110685703E-6	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999775727287801	WITHOUT_CLASSIFICATION	2.2427271219840095E-5	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.9999851856183778	WITHOUT_CLASSIFICATION	1.4814381622268968E-5	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999926334979119	WITHOUT_CLASSIFICATION	7.366502088087044E-6	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999970745903	WITHOUT_CLASSIFICATION	2.9254097344729704E-9	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999998352599361	WITHOUT_CLASSIFICATION	1.6474006391955905E-7	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999986138943429	WITHOUT_CLASSIFICATION	1.3861056570975072E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999323586402	WITHOUT_CLASSIFICATION	6.764135985891957E-8	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999990082816541	WITHOUT_CLASSIFICATION	9.917183459178344E-7	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999926334979119	WITHOUT_CLASSIFICATION	7.366502088087044E-6	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.999999945839012	WITHOUT_CLASSIFICATION	5.416098809039098E-8	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999323586402	WITHOUT_CLASSIFICATION	6.764135985891957E-8	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999910714422846	WITHOUT_CLASSIFICATION	8.92855771540388E-5	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999908848139504	WITHOUT_CLASSIFICATION	9.115186049629265E-6	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999647720392	WITHOUT_CLASSIFICATION	3.522796075641048E-8	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999987358977234	WITHOUT_CLASSIFICATION	1.2641022766952136E-6	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999643914939	WITHOUT_CLASSIFICATION	3.560850604074639E-8	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999994370201271	WITHOUT_CLASSIFICATION	5.629798729850606E-7	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999332238912	WITHOUT_CLASSIFICATION	6.677610878673571E-8	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9996635161957453	WITHOUT_CLASSIFICATION	3.36483804254672E-4	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999874012787	WITHOUT_CLASSIFICATION	1.2598721247952095E-8	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.999998425437806	WITHOUT_CLASSIFICATION	1.5745621940444292E-6	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999941411257	WITHOUT_CLASSIFICATION	5.8588743518068315E-9	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999996942603712	WITHOUT_CLASSIFICATION	3.057396288647638E-7	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999998480777864	WITHOUT_CLASSIFICATION	1.5192221353927714E-7	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.999999250203312	WITHOUT_CLASSIFICATION	7.497966880661285E-7	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999607733820981	WITHOUT_CLASSIFICATION	3.922661790186462E-5	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.999999995871251	WITHOUT_CLASSIFICATION	4.12874892572896E-9	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999112540165	WITHOUT_CLASSIFICATION	8.87459834651119E-8	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9999440589918053	WITHOUT_CLASSIFICATION	5.594100819467485E-5	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999947594818	WITHOUT_CLASSIFICATION	5.240518287565108E-9	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999985055336268	WITHOUT_CLASSIFICATION	1.4944663731003846E-6	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999999585860079	WITHOUT_CLASSIFICATION	4.1413992096331453E-7	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999985388857615	WITHOUT_CLASSIFICATION	1.4611142385415646E-6	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999992189955166	WITHOUT_CLASSIFICATION	7.810044833740343E-7	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999923869683731	WITHOUT_CLASSIFICATION	7.613031626969021E-6	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999861863965185	WITHOUT_CLASSIFICATION	1.3813603481457001E-5	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.99999994830505	WITHOUT_CLASSIFICATION	5.169495000481301E-8	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999981672117509	WITHOUT_CLASSIFICATION	1.8327882490177433E-6	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999999628565582	WITHOUT_CLASSIFICATION	3.714344179831782E-7	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999838827807453	WITHOUT_CLASSIFICATION	1.6117219254624918E-5	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9999982619727465	WITHOUT_CLASSIFICATION	1.7380272533794322E-6	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9999903698328074	WITHOUT_CLASSIFICATION	9.630167192441614E-6	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998405005022	WITHOUT_CLASSIFICATION	1.5949949784612918E-7	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999829456671288	WITHOUT_CLASSIFICATION	1.705433287126966E-5	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999362514733534	WITHOUT_CLASSIFICATION	6.374852664651317E-5	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999976047082393	WITHOUT_CLASSIFICATION	2.3952917606738074E-6	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999977264769424	WITHOUT_CLASSIFICATION	2.273523057629337E-6	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999803399144	WITHOUT_CLASSIFICATION	1.9660085537345604E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999803399144	WITHOUT_CLASSIFICATION	1.9660085537345604E-8	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999997408735	WITHOUT_CLASSIFICATION	2.591264965909144E-10	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999996330948887	WITHOUT_CLASSIFICATION	3.6690511129992772E-6	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999996965051139	WITHOUT_CLASSIFICATION	3.0349488610658784E-7	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999968211947681	WITHOUT_CLASSIFICATION	3.1788052319977544E-6	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999998820355844	WITHOUT_CLASSIFICATION	1.1796441560452898E-6	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9989767460167364	WITHOUT_CLASSIFICATION	0.0010232539832635617	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999972023211376	WITHOUT_CLASSIFICATION	2.7976788623171504E-6	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999993707676409	WITHOUT_CLASSIFICATION	6.292323591044145E-7	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999453800332	WITHOUT_CLASSIFICATION	5.4619966830182905E-8	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999995229289619	WITHOUT_CLASSIFICATION	4.770710381329494E-7	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9995816640884906	WITHOUT_CLASSIFICATION	4.18335911509364E-4	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999903899072	WITHOUT_CLASSIFICATION	9.610092856946741E-9	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999620428969394	WITHOUT_CLASSIFICATION	3.7957103060694706E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999803399144	WITHOUT_CLASSIFICATION	1.9660085537345604E-8	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999952199519963	WITHOUT_CLASSIFICATION	4.78004800379294E-6	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999792282036538	WITHOUT_CLASSIFICATION	2.0771796346182344E-5	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9978948144538226	WITHOUT_CLASSIFICATION	0.002105185546177392	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999999249752315	WITHOUT_CLASSIFICATION	7.502476842601626E-8	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999983647027642	WITHOUT_CLASSIFICATION	1.6352972358704624E-6	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999947562286609	WITHOUT_CLASSIFICATION	5.243771339204889E-6	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999917597094284	WITHOUT_CLASSIFICATION	8.240290571577037E-6	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999986393874	WITHOUT_CLASSIFICATION	1.360612632674158E-9	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999986531039234	WITHOUT_CLASSIFICATION	1.346896076562073E-6	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999997919133359	WITHOUT_CLASSIFICATION	2.0808666411786522E-7	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999983024047504	WITHOUT_CLASSIFICATION	1.6975952495674063E-6	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998405005022	WITHOUT_CLASSIFICATION	1.5949949784612918E-7	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999803399144	WITHOUT_CLASSIFICATION	1.9660085537345604E-8	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.999994777588694	WITHOUT_CLASSIFICATION	5.222411306039262E-6	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998731225018	WITHOUT_CLASSIFICATION	1.2687749813223385E-7	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999981594130343	WITHOUT_CLASSIFICATION	1.8405869656936612E-6	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9999689274025483	WITHOUT_CLASSIFICATION	3.10725974516627E-5	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999988302858	WITHOUT_CLASSIFICATION	1.1697142124851329E-9	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999954342120874	WITHOUT_CLASSIFICATION	4.565787912683745E-6	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986192962492	WITHOUT_CLASSIFICATION	1.3807037508307814E-6	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999991017669494	WITHOUT_CLASSIFICATION	8.982330506081312E-7	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999003930027	WITHOUT_CLASSIFICATION	9.960699738855597E-8	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999381133252452	WITHOUT_CLASSIFICATION	6.188667475479194E-5	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999974774478879	WITHOUT_CLASSIFICATION	2.5225521120328777E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999368839972648	WITHOUT_CLASSIFICATION	6.311600273528774E-5	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999982006956	WITHOUT_CLASSIFICATION	1.7993043284366427E-9	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999987706600169	WITHOUT_CLASSIFICATION	1.2293399831637517E-6	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999987935169525	WITHOUT_CLASSIFICATION	1.206483047452779E-6	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999997028104963	WITHOUT_CLASSIFICATION	2.9718950364989463E-7	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999992080774668	WITHOUT_CLASSIFICATION	7.919225332869066E-7	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999769490745851	WITHOUT_CLASSIFICATION	2.3050925414908577E-5	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.9999992125339234	WITHOUT_CLASSIFICATION	7.874660765952715E-7	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999983863399026	WITHOUT_CLASSIFICATION	1.6136600973520045E-6	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999998814548049	WITHOUT_CLASSIFICATION	1.1854519520235918E-7	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999998814548049	WITHOUT_CLASSIFICATION	1.1854519520235918E-7	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999974091578424	WITHOUT_CLASSIFICATION	2.590842157618362E-6	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999895992284	WITHOUT_CLASSIFICATION	1.0400771605961006E-8	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999943729477624	WITHOUT_CLASSIFICATION	5.627052237554985E-6	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999705122065491	WITHOUT_CLASSIFICATION	2.9487793451033288E-5	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999953443530385	WITHOUT_CLASSIFICATION	4.655646961442901E-6	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999980432203883	WITHOUT_CLASSIFICATION	1.956779611671494E-6	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999987074987449	WITHOUT_CLASSIFICATION	1.2925012551338893E-6	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999221245409797	WITHOUT_CLASSIFICATION	7.787545902024167E-5	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999221245409797	WITHOUT_CLASSIFICATION	7.787545902024167E-5	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999953771149899	WITHOUT_CLASSIFICATION	4.622885010164879E-6	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.999999862142861	WITHOUT_CLASSIFICATION	1.3785713903708042E-7	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999871426331134	WITHOUT_CLASSIFICATION	1.2857366886676775E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999874686143908	WITHOUT_CLASSIFICATION	1.2531385609297173E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999874686143908	WITHOUT_CLASSIFICATION	1.2531385609297173E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999874686143908	WITHOUT_CLASSIFICATION	1.2531385609297173E-5	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999815167497943	WITHOUT_CLASSIFICATION	1.8483250205688558E-5	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999999612878165	WITHOUT_CLASSIFICATION	3.871218350178478E-7	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999410671142	WITHOUT_CLASSIFICATION	5.893288566296349E-8	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.8699285166844114	WITHOUT_CLASSIFICATION	0.13007148331558865	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999591673303757	WITHOUT_CLASSIFICATION	4.083266962440692E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999803399144	WITHOUT_CLASSIFICATION	1.9660085537345604E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999803399144	WITHOUT_CLASSIFICATION	1.9660085537345604E-8	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9998901896471659	WITHOUT_CLASSIFICATION	1.0981035283406433E-4	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999996065418	WITHOUT_CLASSIFICATION	3.9345818382048613E-10	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9997155571795987	WITHOUT_CLASSIFICATION	2.844428204013064E-4	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.999999603589983	WITHOUT_CLASSIFICATION	3.9641001700358406E-7	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999998149476148	WITHOUT_CLASSIFICATION	1.8505238521267738E-7	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.999263238652969	WITHOUT_CLASSIFICATION	7.367613470310858E-4	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999980849106972	WITHOUT_CLASSIFICATION	1.9150893027169986E-6	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.996846331008257	WITHOUT_CLASSIFICATION	0.003153668991742946	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999966282861255	WITHOUT_CLASSIFICATION	3.371713874583573E-6	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999930462047942	WITHOUT_CLASSIFICATION	6.953795205852204E-6	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999997433469678	WITHOUT_CLASSIFICATION	2.566530321649529E-7	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999665057345186	WITHOUT_CLASSIFICATION	3.349426548144908E-5	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999979014919793	WITHOUT_CLASSIFICATION	2.0985080206218223E-6	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999979014919793	WITHOUT_CLASSIFICATION	2.0985080206218223E-6	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999989370206246	WITHOUT_CLASSIFICATION	1.0629793753072073E-6	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999989370206246	WITHOUT_CLASSIFICATION	1.0629793753072073E-6	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999991972961756	WITHOUT_CLASSIFICATION	8.027038244090632E-7	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999975437744311	WITHOUT_CLASSIFICATION	2.4562255689156476E-6	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999975437744311	WITHOUT_CLASSIFICATION	2.4562255689156476E-6	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999991375977256	WITHOUT_CLASSIFICATION	8.624022744760768E-7	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999970831745598	WITHOUT_CLASSIFICATION	2.9168254401001804E-6	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999603452404	WITHOUT_CLASSIFICATION	3.9654759500749314E-8	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999998814548049	WITHOUT_CLASSIFICATION	1.1854519520235918E-7	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999998810355418	WITHOUT_CLASSIFICATION	1.1896445815466344E-7	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999970831745598	WITHOUT_CLASSIFICATION	2.9168254401001804E-6	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999991851866	WITHOUT_CLASSIFICATION	8.148134838116874E-10	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999957527402937	WITHOUT_CLASSIFICATION	4.247259706272753E-6	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999987788032777	WITHOUT_CLASSIFICATION	1.2211967222477004E-6	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999992774987823	WITHOUT_CLASSIFICATION	7.22501217748367E-7	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999996882809	WITHOUT_CLASSIFICATION	3.1171904958802874E-10	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999999949146747	WITHOUT_CLASSIFICATION	5.0853253022417213E-8	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999995870790677	WITHOUT_CLASSIFICATION	4.129209323724724E-7	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9966433274992181	WITHOUT_CLASSIFICATION	0.0033566725007819404	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9990095127498448	WITHOUT_CLASSIFICATION	9.904872501552058E-4	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999962648866348	WITHOUT_CLASSIFICATION	3.735113365034526E-6	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999999924139573	WITHOUT_CLASSIFICATION	7.58604270019283E-8	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999938645955757	WITHOUT_CLASSIFICATION	6.1354044242287596E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999980749787933	WITHOUT_CLASSIFICATION	1.9250212065759263E-6	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.9999999208537351	WITHOUT_CLASSIFICATION	7.914626486322634E-8	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.8805706808038252	WITHOUT_CLASSIFICATION	0.11942931919617482	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999425386140552	WITHOUT_CLASSIFICATION	5.7461385944725E-5	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999999951817652	WITHOUT_CLASSIFICATION	4.8182347915229935E-8	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999985347526369	WITHOUT_CLASSIFICATION	1.4652473631810808E-6	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999985347526369	WITHOUT_CLASSIFICATION	1.4652473631810808E-6	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.999999900156206	WITHOUT_CLASSIFICATION	9.984379395837901E-8	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999995809308491	WITHOUT_CLASSIFICATION	4.190691510250183E-7	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999999890487244	WITHOUT_CLASSIFICATION	1.0951275573103283E-8	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999996138569139	WITHOUT_CLASSIFICATION	3.861430860139275E-7	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999998415064998	WITHOUT_CLASSIFICATION	1.5849350023285743E-7	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999764187289778	WITHOUT_CLASSIFICATION	2.358127102214225E-5	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999999987999831	WITHOUT_CLASSIFICATION	1.2000169020420175E-8	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999991176291249	WITHOUT_CLASSIFICATION	8.823708750072889E-7	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999951817433181	WITHOUT_CLASSIFICATION	4.8182566818025535E-6	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999312166227	WITHOUT_CLASSIFICATION	6.878337734755519E-8	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999997855961118	WITHOUT_CLASSIFICATION	2.144038882574852E-7	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999368839972648	WITHOUT_CLASSIFICATION	6.311600273528774E-5	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999751351145	WITHOUT_CLASSIFICATION	2.4864885543907468E-8	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9998858439474384	WITHOUT_CLASSIFICATION	1.1415605256157945E-4	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999926502199032	WITHOUT_CLASSIFICATION	7.349780096673861E-6	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999869917909235	WITHOUT_CLASSIFICATION	1.3008209076499448E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989316798887	WITHOUT_CLASSIFICATION	1.0683201112296E-6	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989316798887	WITHOUT_CLASSIFICATION	1.0683201112296E-6	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999980813182028	WITHOUT_CLASSIFICATION	1.918681797239286E-6	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9998610163219602	WITHOUT_CLASSIFICATION	1.389836780397512E-4	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9965616579342287	WITHOUT_CLASSIFICATION	0.003438342065771339	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9988509394360223	WITHOUT_CLASSIFICATION	0.001149060563977634	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9995393476454956	WITHOUT_CLASSIFICATION	4.606523545043814E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999765699168081	WITHOUT_CLASSIFICATION	2.3430083192007785E-5	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999999801926214	WITHOUT_CLASSIFICATION	1.9807378659727686E-8	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999953501506923	WITHOUT_CLASSIFICATION	4.649849307705674E-6	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999905692113561	WITHOUT_CLASSIFICATION	9.430788643888161E-6	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999982292689195	WITHOUT_CLASSIFICATION	1.770731080499802E-6	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999978203730963	WITHOUT_CLASSIFICATION	2.1796269036124473E-6	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999953501506923	WITHOUT_CLASSIFICATION	4.649849307705674E-6	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999964308310146	WITHOUT_CLASSIFICATION	3.569168985339876E-6	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999231678873	WITHOUT_CLASSIFICATION	7.683211268621721E-8	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999975783397446	WITHOUT_CLASSIFICATION	2.4216602554451924E-6	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.9999424415778746	WITHOUT_CLASSIFICATION	5.755842212533259E-5	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999564199757	WITHOUT_CLASSIFICATION	4.358002435347447E-8	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999397476813	WITHOUT_CLASSIFICATION	6.025231866130338E-8	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999926993403	WITHOUT_CLASSIFICATION	7.300659748579329E-9	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999998699893228	WITHOUT_CLASSIFICATION	1.3001067720036414E-7	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999996405957047	WITHOUT_CLASSIFICATION	3.594042953366984E-7	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998583094005818	WITHOUT_CLASSIFICATION	1.416905994181472E-4	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999821046648485	WITHOUT_CLASSIFICATION	1.789533515143775E-5	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999924022995744	WITHOUT_CLASSIFICATION	7.5977004255077415E-6	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999490127357	WITHOUT_CLASSIFICATION	5.09872642676152E-8	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999995711536036	WITHOUT_CLASSIFICATION	4.2884639641744577E-7	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999941329725006	WITHOUT_CLASSIFICATION	5.867027499358149E-6	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999678032203	WITHOUT_CLASSIFICATION	3.219677970433691E-8	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999999985613945	WITHOUT_CLASSIFICATION	1.4386055123285801E-8	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999548003760415	WITHOUT_CLASSIFICATION	4.519962395847069E-5	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9998500878810914	WITHOUT_CLASSIFICATION	1.4991211890850718E-4	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999978192331	WITHOUT_CLASSIFICATION	2.180766773569117E-9	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999996405374812	WITHOUT_CLASSIFICATION	3.594625187943896E-6	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999976987278157	WITHOUT_CLASSIFICATION	2.3012721842695197E-6	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9982595222993803	WITHOUT_CLASSIFICATION	0.0017404777006197547	DEFECT
#2	WITHOUT_CLASSIFICATION	0.9999020603607071	WITHOUT_CLASSIFICATION	9.793963929288107E-5	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999837402669	WITHOUT_CLASSIFICATION	1.6259733081181562E-8	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999816678769915	WITHOUT_CLASSIFICATION	1.83321230084644E-5	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999999505218207	WITHOUT_CLASSIFICATION	4.947817929898083E-7	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999995676317572	WITHOUT_CLASSIFICATION	4.323682426883104E-7	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999997948380519	WITHOUT_CLASSIFICATION	2.0516194814221264E-7	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999996890716252	WITHOUT_CLASSIFICATION	3.109283748239355E-7	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999764231585	WITHOUT_CLASSIFICATION	2.357684153718511E-8	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999803162658029	WITHOUT_CLASSIFICATION	1.968373419719051E-5	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998016139283908	WITHOUT_CLASSIFICATION	1.98386071609284E-4	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999964655057	WITHOUT_CLASSIFICATION	3.5344941917379823E-9	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998101223543	WITHOUT_CLASSIFICATION	1.8987764573305104E-7	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999972063248895	WITHOUT_CLASSIFICATION	2.79367511051363E-6	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999003303344	WITHOUT_CLASSIFICATION	9.966966575296304E-8	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999990125516607	WITHOUT_CLASSIFICATION	9.874483393295464E-7	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999894085914	WITHOUT_CLASSIFICATION	1.0591408614072463E-8	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999883569996658	WITHOUT_CLASSIFICATION	1.1643000334171574E-5	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999083055714	WITHOUT_CLASSIFICATION	9.169442858808053E-8	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999985319791349	WITHOUT_CLASSIFICATION	1.4680208651041873E-6	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999115714564	WITHOUT_CLASSIFICATION	8.842854366886352E-8	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999786727536	WITHOUT_CLASSIFICATION	2.1327246515366002E-8	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999989131514543	WITHOUT_CLASSIFICATION	1.0868485457845447E-6	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999987153451347	WITHOUT_CLASSIFICATION	1.284654865222302E-6	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999868445894522	WITHOUT_CLASSIFICATION	1.3155410547798747E-5	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999999893341767	WITHOUT_CLASSIFICATION	1.0665823300710826E-7	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999996383319361	WITHOUT_CLASSIFICATION	3.616680639795549E-7	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999889258319639	WITHOUT_CLASSIFICATION	1.1074168036081537E-5	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979759620715	WITHOUT_CLASSIFICATION	2.0240379284470737E-6	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999997530785558	WITHOUT_CLASSIFICATION	2.4692144417077745E-7	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999972420637	WITHOUT_CLASSIFICATION	2.757936284661916E-9	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9998715343843327	WITHOUT_CLASSIFICATION	1.2846561566729205E-4	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999860228598	WITHOUT_CLASSIFICATION	1.3977140249676934E-8	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999969707122074	WITHOUT_CLASSIFICATION	3.0292877925925628E-6	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999912070159853	WITHOUT_CLASSIFICATION	8.792984014698341E-5	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999873029298119	WITHOUT_CLASSIFICATION	1.2697070188043061E-5	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9999998225556765	WITHOUT_CLASSIFICATION	1.7744432349763566E-7	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999855422744752	WITHOUT_CLASSIFICATION	1.4457725524670097E-5	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999938579753831	WITHOUT_CLASSIFICATION	6.1420246168950285E-6	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999998137525876	WITHOUT_CLASSIFICATION	1.8624741232335218E-7	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.9993944641437321	WITHOUT_CLASSIFICATION	6.055358562679394E-4	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9690650394609327	DEFECT	0.030934960539067333	WITHOUT_CLASSIFICATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999218175034519	WITHOUT_CLASSIFICATION	7.8182496548129E-5	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999981084020644	WITHOUT_CLASSIFICATION	1.8915979356463078E-6	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979759620715	WITHOUT_CLASSIFICATION	2.0240379284470737E-6	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999991508992107	WITHOUT_CLASSIFICATION	8.491007892543608E-7	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999982692124327	WITHOUT_CLASSIFICATION	1.7307875672743691E-6	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996119689505	WITHOUT_CLASSIFICATION	3.880310495322186E-7	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.999999833076158	WITHOUT_CLASSIFICATION	1.669238419267389E-7	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998203752954025	WITHOUT_CLASSIFICATION	1.7962470459753898E-4	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998904035603882	WITHOUT_CLASSIFICATION	1.09596439611745E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999905692113561	WITHOUT_CLASSIFICATION	9.430788643888161E-6	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999998329157195	WITHOUT_CLASSIFICATION	1.670842805160362E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998101223543	WITHOUT_CLASSIFICATION	1.8987764573305104E-7	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9774725875770094	WITHOUT_CLASSIFICATION	0.02252741242299058	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998456258697	WITHOUT_CLASSIFICATION	1.5437413020118062E-7	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999899277108	WITHOUT_CLASSIFICATION	1.0072289227762681E-8	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999909034998	WITHOUT_CLASSIFICATION	9.096500230820447E-9	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999999588010945	WITHOUT_CLASSIFICATION	4.119890550904554E-7	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999943545519253	WITHOUT_CLASSIFICATION	5.645448074647054E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999113509069565	WITHOUT_CLASSIFICATION	8.864909304354089E-5	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999972038352548	WITHOUT_CLASSIFICATION	2.796164745224873E-6	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9936853401488531	WITHOUT_CLASSIFICATION	0.006314659851146995	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999980157914908	WITHOUT_CLASSIFICATION	1.9842085091321704E-6	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998288088842	WITHOUT_CLASSIFICATION	1.7119111584469499E-7	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999998688589697	WITHOUT_CLASSIFICATION	1.3114103037700367E-7	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999850293980304	WITHOUT_CLASSIFICATION	1.497060196970338E-5	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999850293980304	WITHOUT_CLASSIFICATION	1.497060196970338E-5	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999647333199	WITHOUT_CLASSIFICATION	3.526668016209249E-8	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.99999985176957	WITHOUT_CLASSIFICATION	1.482304300006396E-7	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999775070774	WITHOUT_CLASSIFICATION	2.2492922591650336E-8	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999996845044	WITHOUT_CLASSIFICATION	3.154955906591176E-10	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999998549939464	WITHOUT_CLASSIFICATION	1.450060536023194E-7	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999998090739184	WITHOUT_CLASSIFICATION	1.909260816009968E-6	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999859781119407	WITHOUT_CLASSIFICATION	1.4021888059242217E-5	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999994973157627	WITHOUT_CLASSIFICATION	5.026842373696134E-7	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999999655613294	WITHOUT_CLASSIFICATION	3.443867059717059E-7	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999769983717971	WITHOUT_CLASSIFICATION	2.300162820288976E-5	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999084746140205	WITHOUT_CLASSIFICATION	9.152538597934441E-5	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.999997325269359	WITHOUT_CLASSIFICATION	2.674730640904655E-6	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999922213099623	WITHOUT_CLASSIFICATION	7.778690037700103E-6	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999298585296	WITHOUT_CLASSIFICATION	7.014147046513863E-8	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9996850611625224	WITHOUT_CLASSIFICATION	3.149388374775586E-4	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999946996866387	WITHOUT_CLASSIFICATION	5.300313361323505E-6	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999998549120173	WITHOUT_CLASSIFICATION	1.4508798280663252E-7	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999949071108698	WITHOUT_CLASSIFICATION	5.09288913014484E-6	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999997385565	WITHOUT_CLASSIFICATION	2.6144351748424576E-10	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999670265890788	WITHOUT_CLASSIFICATION	3.2973410921237024E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976204495804	WITHOUT_CLASSIFICATION	2.379550419655235E-6	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999998678098398	WITHOUT_CLASSIFICATION	1.3219016019716833E-7	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9987661272413357	WITHOUT_CLASSIFICATION	0.0012338727586643184	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999340722658	WITHOUT_CLASSIFICATION	6.592773408544178E-8	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999998176748791	WITHOUT_CLASSIFICATION	1.8232512089400086E-6	DEFECT
implied	WITHOUT_CLASSIFICATION	0.9999976828037253	WITHOUT_CLASSIFICATION	2.317196274672062E-6	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999999936954446	WITHOUT_CLASSIFICATION	6.30455540250264E-8	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976204495804	WITHOUT_CLASSIFICATION	2.379550419655235E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976204495804	WITHOUT_CLASSIFICATION	2.379550419655235E-6	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999301151647282	WITHOUT_CLASSIFICATION	6.988483527180432E-5	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999975698609699	WITHOUT_CLASSIFICATION	2.4301390301006425E-6	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999982406793146	WITHOUT_CLASSIFICATION	1.7593206853536225E-6	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999869094829336	WITHOUT_CLASSIFICATION	1.3090517066470756E-5	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999971908836098	WITHOUT_CLASSIFICATION	2.809116390067594E-6	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999993639007243	WITHOUT_CLASSIFICATION	6.36099275587628E-7	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999828799441	WITHOUT_CLASSIFICATION	1.7120055949531707E-8	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999968722142563	WITHOUT_CLASSIFICATION	3.127785743767014E-6	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999997588503532	WITHOUT_CLASSIFICATION	2.411496468428188E-7	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997875701426	WITHOUT_CLASSIFICATION	2.124298574354866E-7	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.99999610023366	WITHOUT_CLASSIFICATION	3.89976633987171E-6	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999987191971443	WITHOUT_CLASSIFICATION	1.2808028557380115E-6	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999994714551521	WITHOUT_CLASSIFICATION	5.285448479635228E-7	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999994383403281	WITHOUT_CLASSIFICATION	5.616596719415635E-7	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841521266458	WITHOUT_CLASSIFICATION	1.5847873354186902E-5	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999501814595	WITHOUT_CLASSIFICATION	4.9818540527282956E-8	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999670247510289	WITHOUT_CLASSIFICATION	3.297524897101451E-5	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999992267048045	WITHOUT_CLASSIFICATION	7.732951955868498E-7	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999994243066088	WITHOUT_CLASSIFICATION	5.756933912256178E-7	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999756438355959	WITHOUT_CLASSIFICATION	2.4356164404095262E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9902022929897432	WITHOUT_CLASSIFICATION	0.00979770701025681	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999277913161	WITHOUT_CLASSIFICATION	7.220868388475877E-8	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999521826787	WITHOUT_CLASSIFICATION	4.7817321413631576E-8	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999989562906251	WITHOUT_CLASSIFICATION	1.0437093750144522E-6	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999553705995039	WITHOUT_CLASSIFICATION	4.4629400496180255E-5	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999999997507194	WITHOUT_CLASSIFICATION	2.4928060121322603E-9	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999999961588163	WITHOUT_CLASSIFICATION	3.8411836980989223E-8	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999997999213693	WITHOUT_CLASSIFICATION	2.000786307045476E-6	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999969072894255	WITHOUT_CLASSIFICATION	3.092710574463764E-6	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9998421605810965	WITHOUT_CLASSIFICATION	1.5783941890340177E-4	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999963946027611	WITHOUT_CLASSIFICATION	3.605397238814488E-6	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999993600357387	WITHOUT_CLASSIFICATION	6.399642612939751E-7	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9999955426965128	WITHOUT_CLASSIFICATION	4.457303487167449E-6	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999479198260957	WITHOUT_CLASSIFICATION	5.20801739043872E-5	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999939348878625	WITHOUT_CLASSIFICATION	6.065112137469946E-6	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999963677980876	WITHOUT_CLASSIFICATION	3.6322019123652346E-6	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999993660944478	WITHOUT_CLASSIFICATION	6.339055521680796E-7	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999680591923	WITHOUT_CLASSIFICATION	3.1940807600553714E-8	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999968158790318	WITHOUT_CLASSIFICATION	3.184120968284468E-6	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999935051441263	WITHOUT_CLASSIFICATION	6.494855873592031E-6	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999997821373395	WITHOUT_CLASSIFICATION	2.1786266041145783E-7	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999995194420985	WITHOUT_CLASSIFICATION	4.805579013870218E-7	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999482171662	WITHOUT_CLASSIFICATION	5.178283380989874E-8	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999997729502715	WITHOUT_CLASSIFICATION	2.2704972842767607E-7	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999482171662	WITHOUT_CLASSIFICATION	5.178283380989874E-8	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999982338290967	WITHOUT_CLASSIFICATION	1.766170903348149E-6	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999993722314335	WITHOUT_CLASSIFICATION	6.277685664080431E-7	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999978579527383	WITHOUT_CLASSIFICATION	2.1420472616801617E-6	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999479456247	WITHOUT_CLASSIFICATION	5.205437539062073E-8	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999996869563728	WITHOUT_CLASSIFICATION	3.130436272378892E-7	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999994994828068	WITHOUT_CLASSIFICATION	5.005171932461729E-7	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999989618735525	WITHOUT_CLASSIFICATION	1.038126447412368E-6	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999997056592642	WITHOUT_CLASSIFICATION	2.9434073572854944E-7	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9997032114560382	WITHOUT_CLASSIFICATION	2.9678854396180814E-4	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998773256792	WITHOUT_CLASSIFICATION	1.2267432083276433E-7	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999998863953213	WITHOUT_CLASSIFICATION	1.1360467868363128E-7	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999994994445933	WITHOUT_CLASSIFICATION	5.005554067572968E-7	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999995566067	WITHOUT_CLASSIFICATION	4.433934052068214E-10	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.999916002126177	WITHOUT_CLASSIFICATION	8.399787382299113E-5	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999832271721613	WITHOUT_CLASSIFICATION	1.677282783877037E-5	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999479444236	WITHOUT_CLASSIFICATION	5.205557648933415E-8	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999998081408272	WITHOUT_CLASSIFICATION	1.9185917264828367E-7	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999991355035978	WITHOUT_CLASSIFICATION	8.644964021689243E-7	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999989420735	WITHOUT_CLASSIFICATION	1.0579264254597337E-9	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.999999988960801	WITHOUT_CLASSIFICATION	1.103919907479744E-8	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999992920414902	WITHOUT_CLASSIFICATION	7.079585098810436E-7	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999999271574351	WITHOUT_CLASSIFICATION	7.284256482873776E-8	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9991999864606982	WITHOUT_CLASSIFICATION	8.000135393017207E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999956775541339	WITHOUT_CLASSIFICATION	4.322445866176437E-6	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999998657397909	WITHOUT_CLASSIFICATION	1.3426020909655448E-7	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9995498322325473	WITHOUT_CLASSIFICATION	4.5016776745267635E-4	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9999147510789335	WITHOUT_CLASSIFICATION	8.524892106661952E-5	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9999934754130413	WITHOUT_CLASSIFICATION	6.524586958802557E-6	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999987752156	WITHOUT_CLASSIFICATION	1.2247843898052425E-8	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999748539679474	WITHOUT_CLASSIFICATION	2.5146032052609345E-5	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9999915347977422	WITHOUT_CLASSIFICATION	8.465202257945062E-6	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9664162442029961	WITHOUT_CLASSIFICATION	0.03358375579700396	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.99956743574771	WITHOUT_CLASSIFICATION	4.3256425228997214E-4	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9997035078817814	WITHOUT_CLASSIFICATION	2.964921182186009E-4	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999812791497092	WITHOUT_CLASSIFICATION	1.8720850290756547E-5	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.9999926544540834	WITHOUT_CLASSIFICATION	7.3455459165104995E-6	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.9999928191767969	WITHOUT_CLASSIFICATION	7.1808232030227965E-6	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.99999999063451	WITHOUT_CLASSIFICATION	9.365490064787969E-9	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.9998676357495782	WITHOUT_CLASSIFICATION	1.323642504219628E-4	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999998853220581	WITHOUT_CLASSIFICATION	1.1467794188939182E-7	DEFECT
an association	WITHOUT_CLASSIFICATION	0.999999118706911	WITHOUT_CLASSIFICATION	8.812930889280949E-7	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9999447661374413	WITHOUT_CLASSIFICATION	5.523386255880277E-5	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998794041941798	WITHOUT_CLASSIFICATION	1.2059580582035659E-4	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9995498322325473	WITHOUT_CLASSIFICATION	4.5016776745267635E-4	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9997829523211296	WITHOUT_CLASSIFICATION	2.1704767887043193E-4	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.9999969988743831	WITHOUT_CLASSIFICATION	3.0011256167990592E-6	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9991265921902567	WITHOUT_CLASSIFICATION	8.73407809743399E-4	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999493055378993	WITHOUT_CLASSIFICATION	5.0694462100744455E-5	DEFECT
special case	WITHOUT_CLASSIFICATION	0.9999992542529161	WITHOUT_CLASSIFICATION	7.457470838449819E-7	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999991968675044	WITHOUT_CLASSIFICATION	8.031324955866017E-7	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999293025479	WITHOUT_CLASSIFICATION	7.069745214975843E-8	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.967272454410001	DEFECT	0.03272754558999901	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999999348209253	WITHOUT_CLASSIFICATION	6.517907462167816E-8	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999440122545344	WITHOUT_CLASSIFICATION	5.5987745465478366E-5	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.9999971739960295	WITHOUT_CLASSIFICATION	2.8260039704686666E-6	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999877466247	WITHOUT_CLASSIFICATION	1.2253375204110353E-8	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999861973549629	WITHOUT_CLASSIFICATION	1.380264503714959E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999948884283087	WITHOUT_CLASSIFICATION	5.111571691289294E-5	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999128531503	WITHOUT_CLASSIFICATION	8.71468496901663E-8	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999980235972	WITHOUT_CLASSIFICATION	1.976402749172438E-9	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999352035913	WITHOUT_CLASSIFICATION	6.479640868252755E-8	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999068094536	WITHOUT_CLASSIFICATION	9.319054635318925E-8	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999994812736714	WITHOUT_CLASSIFICATION	5.187263285720927E-7	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9997829523211296	WITHOUT_CLASSIFICATION	2.1704767887043193E-4	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999902303877077	WITHOUT_CLASSIFICATION	9.769612292318382E-6	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9996603628885665	WITHOUT_CLASSIFICATION	3.3963711143350544E-4	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999966798322402	WITHOUT_CLASSIFICATION	3.3201677597788265E-6	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999997940589279	WITHOUT_CLASSIFICATION	2.0594107215850888E-7	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999768294438446	WITHOUT_CLASSIFICATION	2.3170556155450117E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9997463613294241	WITHOUT_CLASSIFICATION	2.5363867057594307E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9997463613294241	WITHOUT_CLASSIFICATION	2.5363867057594307E-4	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999944687110028	WITHOUT_CLASSIFICATION	5.5312889970756406E-6	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9997463613294241	WITHOUT_CLASSIFICATION	2.5363867057594307E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9997463613294241	WITHOUT_CLASSIFICATION	2.5363867057594307E-4	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9957102806427137	WITHOUT_CLASSIFICATION	0.004289719357286298	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999446068490401	WITHOUT_CLASSIFICATION	5.53931509598524E-5	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999999742639379	WITHOUT_CLASSIFICATION	2.573606209458415E-8	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999997136178277	WITHOUT_CLASSIFICATION	2.86382172311253E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9989451616278554	WITHOUT_CLASSIFICATION	0.0010548383721445819	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999999986663688	WITHOUT_CLASSIFICATION	1.3336313131723164E-9	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9984788911538013	WITHOUT_CLASSIFICATION	0.0015211088461987822	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999977292311	WITHOUT_CLASSIFICATION	2.2707688026367644E-9	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999669933622827	WITHOUT_CLASSIFICATION	3.3006637717350365E-5	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999946852892742	WITHOUT_CLASSIFICATION	5.314710725884054E-6	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999923981176051	WITHOUT_CLASSIFICATION	7.601882394905068E-6	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999830306634865	WITHOUT_CLASSIFICATION	1.6969336513577593E-5	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999995400632892	WITHOUT_CLASSIFICATION	4.599367108729562E-7	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999999603848652	WITHOUT_CLASSIFICATION	3.961513478896102E-7	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999997515978313	WITHOUT_CLASSIFICATION	2.4840216879692513E-7	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9939286237781898	WITHOUT_CLASSIFICATION	0.006071376221810235	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999985296899315	WITHOUT_CLASSIFICATION	1.4703100685277534E-6	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999706512801233	WITHOUT_CLASSIFICATION	2.9348719876591447E-5	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999903437798363	WITHOUT_CLASSIFICATION	9.656220163701239E-5	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999991987787614	WITHOUT_CLASSIFICATION	8.012212385527384E-7	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999985966322443	WITHOUT_CLASSIFICATION	1.4033677557413914E-6	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999959513733324	WITHOUT_CLASSIFICATION	4.04862666764224E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999985296899315	WITHOUT_CLASSIFICATION	1.4703100685277534E-6	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9999147510789335	WITHOUT_CLASSIFICATION	8.524892106661952E-5	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.99999075950385	WITHOUT_CLASSIFICATION	9.240496149980819E-6	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993011843515	WITHOUT_CLASSIFICATION	6.988156484941188E-7	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995454159962	WITHOUT_CLASSIFICATION	4.545840038818381E-7	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9999983400587465	WITHOUT_CLASSIFICATION	1.659941253423362E-6	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999135437346384	WITHOUT_CLASSIFICATION	8.645626536158942E-5	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9999998376587487	WITHOUT_CLASSIFICATION	1.6234125127141685E-7	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9987237131064343	WITHOUT_CLASSIFICATION	0.0012762868935656659	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999995792287061	WITHOUT_CLASSIFICATION	4.207712938968014E-7	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999999971479586	WITHOUT_CLASSIFICATION	2.8520413532911494E-9	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999925451088555	WITHOUT_CLASSIFICATION	7.454891144433846E-6	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.999997361711912	WITHOUT_CLASSIFICATION	2.6382880879497614E-6	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999998923761758	WITHOUT_CLASSIFICATION	1.0762382420498428E-6	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999961396286	WITHOUT_CLASSIFICATION	3.860371384277836E-9	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9994511318604368	WITHOUT_CLASSIFICATION	5.488681395632713E-4	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999865412019	WITHOUT_CLASSIFICATION	1.345879802726624E-8	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999830146339986	WITHOUT_CLASSIFICATION	1.6985366001372988E-5	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999754323906944	WITHOUT_CLASSIFICATION	2.4567609305558015E-5	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999998245312083	WITHOUT_CLASSIFICATION	1.754687917035211E-6	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999949668073829	WITHOUT_CLASSIFICATION	5.033192617222523E-6	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.999933945807391	WITHOUT_CLASSIFICATION	6.60541926089225E-5	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999999460824412	WITHOUT_CLASSIFICATION	5.391755873251796E-8	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999444270247	WITHOUT_CLASSIFICATION	5.557297537076212E-8	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999995792287061	WITHOUT_CLASSIFICATION	4.207712938968014E-7	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999702104244	WITHOUT_CLASSIFICATION	2.97895755071801E-8	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9999999053702927	WITHOUT_CLASSIFICATION	9.462970726493054E-8	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999989193529885	WITHOUT_CLASSIFICATION	1.080647011566471E-6	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999996974018426	WITHOUT_CLASSIFICATION	3.025981574098737E-7	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999980846582	WITHOUT_CLASSIFICATION	1.9153417941825946E-8	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.9999976108859997	WITHOUT_CLASSIFICATION	2.389114000264822E-6	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9999967995314282	WITHOUT_CLASSIFICATION	3.2004685717714633E-6	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9999996963163074	WITHOUT_CLASSIFICATION	3.0368369264527216E-7	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9999995367315208	WITHOUT_CLASSIFICATION	4.632684791548662E-7	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.9999525614535953	WITHOUT_CLASSIFICATION	4.7438546404678E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999687996307	WITHOUT_CLASSIFICATION	3.120036939730134E-8	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999984005728215	WITHOUT_CLASSIFICATION	1.5994271784914076E-6	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999943403104424	WITHOUT_CLASSIFICATION	5.659689557461531E-6	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999995616223	WITHOUT_CLASSIFICATION	4.3837763124319014E-10	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999954099288918	WITHOUT_CLASSIFICATION	4.590071108252968E-6	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999909905291569	WITHOUT_CLASSIFICATION	9.009470843093113E-6	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998665782566	WITHOUT_CLASSIFICATION	1.3342174343923583E-7	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999687996307	WITHOUT_CLASSIFICATION	3.120036939730134E-8	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999999927836618	WITHOUT_CLASSIFICATION	7.216338204066709E-8	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999559633937108	WITHOUT_CLASSIFICATION	4.40366062892001E-5	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.999996065624027	WITHOUT_CLASSIFICATION	3.9343759729579964E-6	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999996938515016	WITHOUT_CLASSIFICATION	3.061484984484436E-7	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9999712996194196	WITHOUT_CLASSIFICATION	2.8700380580420192E-5	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.999999792058777	WITHOUT_CLASSIFICATION	2.0794122294444373E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999954099288918	WITHOUT_CLASSIFICATION	4.590071108252968E-6	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999950854795894	WITHOUT_CLASSIFICATION	4.914520410697374E-6	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851475277054	WITHOUT_CLASSIFICATION	1.4852472294677455E-5	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999128466884	WITHOUT_CLASSIFICATION	8.715331152701028E-8	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975991383623	WITHOUT_CLASSIFICATION	2.400861637788176E-6	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983661039389	WITHOUT_CLASSIFICATION	1.6338960611452663E-6	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998521225739	WITHOUT_CLASSIFICATION	1.4787742615699523E-7	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999997963598452	WITHOUT_CLASSIFICATION	2.0364015498547108E-7	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999997963598452	WITHOUT_CLASSIFICATION	2.0364015498547108E-7	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999521165182131	WITHOUT_CLASSIFICATION	4.788348178694256E-5	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999992403662836	WITHOUT_CLASSIFICATION	7.596337163705656E-7	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.9999974347932516	WITHOUT_CLASSIFICATION	2.5652067482757714E-6	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9999606084104966	WITHOUT_CLASSIFICATION	3.939158950345023E-5	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9911911800351784	WITHOUT_CLASSIFICATION	0.008808819964821687	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986398547107	WITHOUT_CLASSIFICATION	1.3601452892752414E-6	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850042883082	WITHOUT_CLASSIFICATION	1.4995711691892838E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946281494317	WITHOUT_CLASSIFICATION	5.371850568305657E-6	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999972401724985	WITHOUT_CLASSIFICATION	2.759827501520284E-6	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999793798017186	WITHOUT_CLASSIFICATION	2.062019828136243E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986398547107	WITHOUT_CLASSIFICATION	1.3601452892752414E-6	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850042883082	WITHOUT_CLASSIFICATION	1.4995711691892838E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946281494317	WITHOUT_CLASSIFICATION	5.371850568305657E-6	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.9999987326359279	WITHOUT_CLASSIFICATION	1.267364072144843E-6	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9999973980788845	WITHOUT_CLASSIFICATION	2.601921115447536E-6	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999997550567157	WITHOUT_CLASSIFICATION	2.4494328430203763E-6	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999999396406029	WITHOUT_CLASSIFICATION	6.035939710290461E-7	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999996507130962	WITHOUT_CLASSIFICATION	3.4928690386858185E-7	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.997830607423491	WITHOUT_CLASSIFICATION	0.0021693925765090124	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999924059425631	WITHOUT_CLASSIFICATION	7.5940574367651876E-6	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999998904190482	WITHOUT_CLASSIFICATION	1.0958095175057636E-7	DEFECT
stats	WITHOUT_CLASSIFICATION	0.99999672562953	WITHOUT_CLASSIFICATION	3.2743704699296283E-6	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999960324335436	WITHOUT_CLASSIFICATION	3.967566456342252E-6	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.999999981614362	WITHOUT_CLASSIFICATION	1.838563798835985E-8	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9994253764420052	WITHOUT_CLASSIFICATION	5.746235579947652E-4	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9996169318236305	WITHOUT_CLASSIFICATION	3.8306817636954334E-4	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999988581588675	WITHOUT_CLASSIFICATION	1.1418411325047848E-6	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999996827349017	WITHOUT_CLASSIFICATION	3.172650982790006E-7	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999919430153018	WITHOUT_CLASSIFICATION	8.056984698259529E-6	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999998807092297	WITHOUT_CLASSIFICATION	1.1929077034259613E-7	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999863811798162	WITHOUT_CLASSIFICATION	1.361882018367588E-5	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999983367496068	WITHOUT_CLASSIFICATION	1.6632503931326966E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.999999248568513	WITHOUT_CLASSIFICATION	7.514314871155309E-7	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999996529787219	WITHOUT_CLASSIFICATION	3.4702127810567723E-6	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9988604975445843	WITHOUT_CLASSIFICATION	0.0011395024554157211	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999881734217	WITHOUT_CLASSIFICATION	1.18265781713133E-8	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999994711330242	WITHOUT_CLASSIFICATION	5.288669758873143E-7	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999872738738	WITHOUT_CLASSIFICATION	1.27261261621749E-8	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999853318663425	WITHOUT_CLASSIFICATION	1.4668133657459467E-5	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860119207957	WITHOUT_CLASSIFICATION	1.3988079204219622E-5	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906646997067	WITHOUT_CLASSIFICATION	9.335300293480354E-6	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999966798576	WITHOUT_CLASSIFICATION	3.3201423220350666E-9	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927713687301	WITHOUT_CLASSIFICATION	7.228631269836978E-6	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997500806946391	WITHOUT_CLASSIFICATION	2.499193053608862E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998924975328	WITHOUT_CLASSIFICATION	1.0750246720045795E-7	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998924975328	WITHOUT_CLASSIFICATION	1.0750246720045795E-7	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999799990165	WITHOUT_CLASSIFICATION	2.0000983486439007E-8	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.999999089602862	WITHOUT_CLASSIFICATION	9.103971380330766E-7	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999998164866659	WITHOUT_CLASSIFICATION	1.8351333417696943E-7	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999368839972648	WITHOUT_CLASSIFICATION	6.311600273528774E-5	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999999872540424	WITHOUT_CLASSIFICATION	1.2745957607782529E-8	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999982478282634	WITHOUT_CLASSIFICATION	1.7521717366383131E-6	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9999934639164045	WITHOUT_CLASSIFICATION	6.536083595447477E-6	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.9999999570870872	WITHOUT_CLASSIFICATION	4.2912912825000224E-8	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999997925555332	WITHOUT_CLASSIFICATION	2.074444668396815E-7	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997423516129	WITHOUT_CLASSIFICATION	2.576483871575732E-7	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992196728568	WITHOUT_CLASSIFICATION	7.803271432764098E-7	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991748351461	WITHOUT_CLASSIFICATION	8.251648537751825E-7	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996949421537	WITHOUT_CLASSIFICATION	3.050578463692533E-7	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999934634643	WITHOUT_CLASSIFICATION	6.536535700259956E-8	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995198588169	WITHOUT_CLASSIFICATION	4.801411831363034E-7	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992493471099	WITHOUT_CLASSIFICATION	7.506528900957261E-7	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997692246326	WITHOUT_CLASSIFICATION	2.30775367284563E-7	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990491429346	WITHOUT_CLASSIFICATION	9.508570654548519E-7	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990376368183	WITHOUT_CLASSIFICATION	9.623631816549128E-7	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999578942003	WITHOUT_CLASSIFICATION	4.210579983222796E-8	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999998529740517	WITHOUT_CLASSIFICATION	1.4702594834087237E-7	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.999141005143351	WITHOUT_CLASSIFICATION	8.589948566489728E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999994479139656	WITHOUT_CLASSIFICATION	5.520860343905176E-6	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999993603085672	WITHOUT_CLASSIFICATION	6.396914328278518E-7	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999662885163	WITHOUT_CLASSIFICATION	3.3711483817946936E-8	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9999991586855015	WITHOUT_CLASSIFICATION	8.41314498551172E-7	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999999911431253	WITHOUT_CLASSIFICATION	8.856874747097691E-9	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999939350795866	WITHOUT_CLASSIFICATION	6.06492041346542E-6	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999994479139656	WITHOUT_CLASSIFICATION	5.520860343905176E-6	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999994479139656	WITHOUT_CLASSIFICATION	5.520860343905176E-6	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999957928310196	WITHOUT_CLASSIFICATION	4.207168980462608E-6	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999994631691257	WITHOUT_CLASSIFICATION	5.368308743247589E-7	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999920330506	WITHOUT_CLASSIFICATION	7.966949363520119E-9	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999988356567129	WITHOUT_CLASSIFICATION	1.1643432871158045E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999980749787933	WITHOUT_CLASSIFICATION	1.9250212065759263E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.999999248568513	WITHOUT_CLASSIFICATION	7.514314871155309E-7	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999796309746	WITHOUT_CLASSIFICATION	2.0369025357354945E-8	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999296199822024	WITHOUT_CLASSIFICATION	7.03800177976144E-5	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999991550406272	WITHOUT_CLASSIFICATION	8.449593727914412E-7	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959140234284	WITHOUT_CLASSIFICATION	4.08597657166904E-6	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999958347685233	WITHOUT_CLASSIFICATION	4.165231476718418E-6	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580062004364	WITHOUT_CLASSIFICATION	4.199379956368629E-5	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999946478091442	WITHOUT_CLASSIFICATION	5.352190855922694E-6	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999946478091442	WITHOUT_CLASSIFICATION	5.352190855922694E-6	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999999387093774	WITHOUT_CLASSIFICATION	6.129062260496815E-7	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999999387093774	WITHOUT_CLASSIFICATION	6.129062260496815E-7	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965265953158	WITHOUT_CLASSIFICATION	3.4734046841326573E-6	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925082646005	WITHOUT_CLASSIFICATION	7.491735399528623E-6	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999909595852808	WITHOUT_CLASSIFICATION	9.040414719072953E-6	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989571868655	WITHOUT_CLASSIFICATION	1.0428131344943534E-6	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999783541292713	WITHOUT_CLASSIFICATION	2.164587072864263E-5	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998717339082536	WITHOUT_CLASSIFICATION	1.2826609174649978E-4	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997640141419083	WITHOUT_CLASSIFICATION	2.3598585809162233E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889943630187	WITHOUT_CLASSIFICATION	1.1005636981272067E-5	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999985449953143	WITHOUT_CLASSIFICATION	1.455004685784469E-6	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.9999999732680932	WITHOUT_CLASSIFICATION	2.673190686509199E-8	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999920198089	WITHOUT_CLASSIFICATION	7.980191091399271E-8	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999962250642183	WITHOUT_CLASSIFICATION	3.7749357817488633E-6	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999996304390587	WITHOUT_CLASSIFICATION	3.695609413517362E-7	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999993906643386	WITHOUT_CLASSIFICATION	6.093356614172008E-7	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999981470803874	WITHOUT_CLASSIFICATION	1.8529196125646936E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.999997012455737	WITHOUT_CLASSIFICATION	2.9875442629889847E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.999997012455737	WITHOUT_CLASSIFICATION	2.9875442629889847E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.999997012455737	WITHOUT_CLASSIFICATION	2.9875442629889847E-6	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999848826311	WITHOUT_CLASSIFICATION	1.5117368938157854E-8	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9998625565622179	WITHOUT_CLASSIFICATION	1.3744343778209847E-4	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999996717528	WITHOUT_CLASSIFICATION	3.282472141252976E-10	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999835426908673	WITHOUT_CLASSIFICATION	1.6457309132713712E-4	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989002179734	WITHOUT_CLASSIFICATION	1.0997820265847416E-6	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994200470953	WITHOUT_CLASSIFICATION	5.799529046310116E-7	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999979227077337	WITHOUT_CLASSIFICATION	2.077292266204095E-6	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998354623161207	WITHOUT_CLASSIFICATION	1.6453768387930017E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999994177902062	WITHOUT_CLASSIFICATION	5.822097938154097E-7	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999133242639	WITHOUT_CLASSIFICATION	8.667573614855696E-8	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999998326857468	WITHOUT_CLASSIFICATION	1.673142532550509E-7	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9977346362306492	WITHOUT_CLASSIFICATION	0.0022653637693507665	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942976367042	WITHOUT_CLASSIFICATION	5.70236329573445E-6	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999984049400668	WITHOUT_CLASSIFICATION	1.5950599332629595E-6	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999993550449474	WITHOUT_CLASSIFICATION	6.449550525799811E-7	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9996332875774325	WITHOUT_CLASSIFICATION	3.6671242256746794E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998549522009	WITHOUT_CLASSIFICATION	1.450477990911972E-7	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999802118994239	WITHOUT_CLASSIFICATION	1.9788100576046058E-5	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999774707555675	WITHOUT_CLASSIFICATION	2.2529244432358672E-5	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999965797211074	WITHOUT_CLASSIFICATION	3.4202788926378037E-6	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999966443199	WITHOUT_CLASSIFICATION	3.355680073222729E-9	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999715838734351	WITHOUT_CLASSIFICATION	2.841612656498642E-5	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999981819219299	WITHOUT_CLASSIFICATION	1.8180780701959588E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999922499938	WITHOUT_CLASSIFICATION	7.75000620688491E-9	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999998531204356	WITHOUT_CLASSIFICATION	1.4687956444115883E-7	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999978727849866	WITHOUT_CLASSIFICATION	2.1272150133995817E-5	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999861200593082	WITHOUT_CLASSIFICATION	1.3879940691649137E-5	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999956858628223	WITHOUT_CLASSIFICATION	4.314137177739169E-6	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999353847491	WITHOUT_CLASSIFICATION	6.461525093742155E-8	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999997615941352	WITHOUT_CLASSIFICATION	2.3840586486982674E-7	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999910310805985	WITHOUT_CLASSIFICATION	8.96891940145067E-6	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.99999617276954	WITHOUT_CLASSIFICATION	3.8272304599987095E-6	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999230027879128	WITHOUT_CLASSIFICATION	7.699721208715849E-5	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.999999679530096	WITHOUT_CLASSIFICATION	3.204699038783675E-7	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9998679696870219	WITHOUT_CLASSIFICATION	1.320303129780328E-4	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999871543957436	WITHOUT_CLASSIFICATION	1.284560425650006E-5	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999865583099251	WITHOUT_CLASSIFICATION	1.344169007488755E-5	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.9999997579761996	WITHOUT_CLASSIFICATION	2.4202380050654917E-7	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999999913871289	WITHOUT_CLASSIFICATION	8.6128711084229E-8	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.9999999363680895	WITHOUT_CLASSIFICATION	6.363191050230563E-8	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999998059406663	WITHOUT_CLASSIFICATION	1.9405933366507272E-7	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999992339433854	WITHOUT_CLASSIFICATION	7.6605661459343E-7	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999246631681846	WITHOUT_CLASSIFICATION	7.533683181533978E-5	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999967080521407	WITHOUT_CLASSIFICATION	3.291947859196922E-6	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999998268088767	WITHOUT_CLASSIFICATION	1.7319112321494398E-7	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999874052382282	WITHOUT_CLASSIFICATION	1.2594761771757045E-5	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.999999775310999	WITHOUT_CLASSIFICATION	2.246890010475001E-7	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999983939098313	WITHOUT_CLASSIFICATION	1.6060901687698323E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999788435428227	WITHOUT_CLASSIFICATION	2.1156457177337402E-5	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999999531613949	WITHOUT_CLASSIFICATION	4.683860511779516E-8	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999962710731276	WITHOUT_CLASSIFICATION	3.7289268723069953E-6	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999787979305739	WITHOUT_CLASSIFICATION	2.120206942616835E-5	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999996384611257	WITHOUT_CLASSIFICATION	3.615388743617156E-7	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9995856341929048	WITHOUT_CLASSIFICATION	4.1436580709516705E-4	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999994902412566	WITHOUT_CLASSIFICATION	5.097587434437597E-7	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.999985160732779	WITHOUT_CLASSIFICATION	1.4839267220981098E-5	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.999998972306234	WITHOUT_CLASSIFICATION	1.027693765930737E-6	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999989181458978	WITHOUT_CLASSIFICATION	1.081854102144674E-6	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999995480382202	WITHOUT_CLASSIFICATION	4.5196177974646126E-7	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999985480092982	WITHOUT_CLASSIFICATION	1.4519907017626501E-6	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999963421202721	WITHOUT_CLASSIFICATION	3.657879727883521E-6	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999561556904	WITHOUT_CLASSIFICATION	4.3844309703494904E-8	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999489099759	WITHOUT_CLASSIFICATION	5.109002417099918E-8	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999999957178185	WITHOUT_CLASSIFICATION	4.282181506706665E-8	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999093166444	WITHOUT_CLASSIFICATION	9.068335563498498E-8	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999983826241656	WITHOUT_CLASSIFICATION	1.6173758343519386E-6	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999979716710579	WITHOUT_CLASSIFICATION	2.0283289421354997E-6	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999999558055679	WITHOUT_CLASSIFICATION	4.419443214011189E-8	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998406134487208	WITHOUT_CLASSIFICATION	1.5938655127931408E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998406134487208	WITHOUT_CLASSIFICATION	1.5938655127931408E-4	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999999493271765	WITHOUT_CLASSIFICATION	5.0672823531724985E-8	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999999506630207	WITHOUT_CLASSIFICATION	4.933697935158071E-8	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999985842012402	WITHOUT_CLASSIFICATION	1.415798759844746E-6	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999992842306684	WITHOUT_CLASSIFICATION	7.157693315213766E-7	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999769397277236	WITHOUT_CLASSIFICATION	2.306027227640968E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999988640638421	WITHOUT_CLASSIFICATION	1.1359361579706684E-6	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999994148457982	WITHOUT_CLASSIFICATION	5.851542017745651E-7	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.999998791057651	WITHOUT_CLASSIFICATION	1.2089423490202189E-6	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999393710101716	WITHOUT_CLASSIFICATION	6.062898982833166E-5	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999999723947582	WITHOUT_CLASSIFICATION	2.760524176421314E-8	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999999767128373	WITHOUT_CLASSIFICATION	2.3287162704625474E-7	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999983003403403	WITHOUT_CLASSIFICATION	1.6996596597126625E-6	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.9999986001036357	WITHOUT_CLASSIFICATION	1.3998963641957636E-6	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999847175126	WITHOUT_CLASSIFICATION	1.528248736644164E-8	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999982265653908	WITHOUT_CLASSIFICATION	1.7734346091431682E-6	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.999998532696959	WITHOUT_CLASSIFICATION	1.467303040969144E-6	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999998060232776	WITHOUT_CLASSIFICATION	1.939767223763751E-7	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9988509915587521	WITHOUT_CLASSIFICATION	0.0011490084412478765	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999817850782003	WITHOUT_CLASSIFICATION	1.8214921799675076E-5	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999999738537572	WITHOUT_CLASSIFICATION	2.6146242814024053E-8	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.9999940063478474	WITHOUT_CLASSIFICATION	5.993652152640037E-6	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999998368283002	WITHOUT_CLASSIFICATION	1.631716998337776E-7	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999902986491228	WITHOUT_CLASSIFICATION	9.701350877226041E-6	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999925922330996	WITHOUT_CLASSIFICATION	7.407766900546254E-6	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999928208122968	WITHOUT_CLASSIFICATION	7.179187703173848E-6	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9999926909211073	WITHOUT_CLASSIFICATION	7.309078892565212E-6	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999993667962147	WITHOUT_CLASSIFICATION	6.33203785220722E-7	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999912464892053	WITHOUT_CLASSIFICATION	8.753510794635742E-6	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.999998918581647	WITHOUT_CLASSIFICATION	1.0814183530760361E-6	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999933804734	WITHOUT_CLASSIFICATION	6.619526537388191E-9	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999998740449714	WITHOUT_CLASSIFICATION	1.2595502868282128E-7	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999997554643372	WITHOUT_CLASSIFICATION	2.4453566285290355E-7	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999993134390401	WITHOUT_CLASSIFICATION	6.865609599205495E-7	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9999923673400902	WITHOUT_CLASSIFICATION	7.632659909658335E-6	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999926301758165	WITHOUT_CLASSIFICATION	7.3698241835414695E-6	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999926301758165	WITHOUT_CLASSIFICATION	7.3698241835414695E-6	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999992358995501	WITHOUT_CLASSIFICATION	7.641004498216677E-7	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.999998277826234	WITHOUT_CLASSIFICATION	1.7221737660228181E-6	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999979319029031	WITHOUT_CLASSIFICATION	2.0680970967886425E-6	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999885365530109	WITHOUT_CLASSIFICATION	1.1463446989068487E-5	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999999999977359	WITHOUT_CLASSIFICATION	2.2640713969305945E-12	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999895009558891	WITHOUT_CLASSIFICATION	1.0499044110844382E-5	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999918536452677	WITHOUT_CLASSIFICATION	8.14635473238319E-6	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999876951355354	WITHOUT_CLASSIFICATION	1.2304864464685381E-5	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999994013351597	WITHOUT_CLASSIFICATION	5.98664840260697E-7	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998967637351006	WITHOUT_CLASSIFICATION	1.0323626489938999E-4	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999507493999	WITHOUT_CLASSIFICATION	4.925060009974356E-7	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9998419449480365	WITHOUT_CLASSIFICATION	1.5805505196359786E-4	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999868029835136	WITHOUT_CLASSIFICATION	1.3197016486325838E-5	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999914674831925	WITHOUT_CLASSIFICATION	8.532516807587064E-6	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999893629732132	WITHOUT_CLASSIFICATION	1.063702678692431E-5	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999995919608234	WITHOUT_CLASSIFICATION	4.0803917650964725E-7	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9993751115319949	WITHOUT_CLASSIFICATION	6.248884680051749E-4	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9993751115319949	WITHOUT_CLASSIFICATION	6.248884680051749E-4	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999695024620764	WITHOUT_CLASSIFICATION	3.0497537923621153E-5	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998196673510401	WITHOUT_CLASSIFICATION	1.8033264895985372E-4	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999952845257548	WITHOUT_CLASSIFICATION	4.71547424508457E-6	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999757011959	WITHOUT_CLASSIFICATION	2.4298804101313044E-8	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999996449246759	WITHOUT_CLASSIFICATION	3.550753241876538E-7	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999962250642183	WITHOUT_CLASSIFICATION	3.7749357817488633E-6	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992216876739444	WITHOUT_CLASSIFICATION	7.783123260556858E-4	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999598077312	WITHOUT_CLASSIFICATION	4.019226885175007E-8	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999256645459	WITHOUT_CLASSIFICATION	7.433545410624955E-8	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999283618701	WITHOUT_CLASSIFICATION	7.163812987840508E-8	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999992661452195	WITHOUT_CLASSIFICATION	7.338547805073531E-7	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999992661452195	WITHOUT_CLASSIFICATION	7.338547805073531E-7	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999939511719279	WITHOUT_CLASSIFICATION	6.048828072047972E-6	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999989839211549	WITHOUT_CLASSIFICATION	1.0160788451145213E-6	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999995986179964	WITHOUT_CLASSIFICATION	4.0138200367459734E-7	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999999871729868	WITHOUT_CLASSIFICATION	1.2827013317385957E-8	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999993890898283	WITHOUT_CLASSIFICATION	6.109101717268991E-7	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9971047940065605	WITHOUT_CLASSIFICATION	0.002895205993439388	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999997167862982	WITHOUT_CLASSIFICATION	2.832137018143982E-7	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999908848139504	WITHOUT_CLASSIFICATION	9.115186049629265E-6	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999988897889707	WITHOUT_CLASSIFICATION	1.1102110293631824E-6	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999603452404	WITHOUT_CLASSIFICATION	3.9654759500749314E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999803399144	WITHOUT_CLASSIFICATION	1.9660085537345604E-8	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999881469811158	WITHOUT_CLASSIFICATION	1.1853018884098873E-5	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9978948144538226	WITHOUT_CLASSIFICATION	0.002105185546177392	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9999689274025483	WITHOUT_CLASSIFICATION	3.10725974516627E-5	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999347936985	WITHOUT_CLASSIFICATION	6.520630152409743E-8	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999991972961756	WITHOUT_CLASSIFICATION	8.027038244090632E-7	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999982406793146	WITHOUT_CLASSIFICATION	1.7593206853536225E-6	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999428041076	WITHOUT_CLASSIFICATION	5.7195892379797805E-8	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999992001707281	WITHOUT_CLASSIFICATION	7.998292718547629E-7	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999994097551658	WITHOUT_CLASSIFICATION	5.902448342453063E-7	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999942756249367	WITHOUT_CLASSIFICATION	5.724375063258971E-6	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999912841202155	WITHOUT_CLASSIFICATION	8.71587978433678E-6	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999998184395607	WITHOUT_CLASSIFICATION	1.8156043933578334E-7	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999991375977256	WITHOUT_CLASSIFICATION	8.624022744760768E-7	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999991337728742	WITHOUT_CLASSIFICATION	8.662271257886408E-7	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999887262038482	WITHOUT_CLASSIFICATION	1.1273796151779305E-5	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999996842403679	WITHOUT_CLASSIFICATION	3.157596320898507E-6	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999755231231435	WITHOUT_CLASSIFICATION	2.4476876856485663E-5	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999992035337589	WITHOUT_CLASSIFICATION	7.964662411515499E-7	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999999978479	WITHOUT_CLASSIFICATION	2.1521081808610694E-12	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999988123555359	WITHOUT_CLASSIFICATION	1.187644464088112E-6	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989316798887	WITHOUT_CLASSIFICATION	1.0683201112296E-6	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999960806969158	WITHOUT_CLASSIFICATION	3.919303084132916E-6	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.999999384131504	WITHOUT_CLASSIFICATION	6.158684960027736E-7	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9860666978464565	WITHOUT_CLASSIFICATION	0.013933302153543471	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999057349576	WITHOUT_CLASSIFICATION	9.426504240304343E-8	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999999702946145	WITHOUT_CLASSIFICATION	2.9705385516312672E-8	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999800829771923	WITHOUT_CLASSIFICATION	1.9917022807725048E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999913971711788	WITHOUT_CLASSIFICATION	8.60282882119954E-6	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999913971711788	WITHOUT_CLASSIFICATION	8.60282882119954E-6	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999614239189	WITHOUT_CLASSIFICATION	3.857608114081722E-8	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998836547515	WITHOUT_CLASSIFICATION	1.1634524853419708E-7	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999710046813	WITHOUT_CLASSIFICATION	2.899531877501458E-8	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.99994005193934	WITHOUT_CLASSIFICATION	5.994806066012307E-5	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999853353403378	WITHOUT_CLASSIFICATION	1.4664659662209455E-5	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999932304983	WITHOUT_CLASSIFICATION	6.769501754472803E-9	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999963816	WITHOUT_CLASSIFICATION	3.618337697603105E-12	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999734032865383	WITHOUT_CLASSIFICATION	2.6596713461692534E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999614239189	WITHOUT_CLASSIFICATION	3.857608114081722E-8	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998836547515	WITHOUT_CLASSIFICATION	1.1634524853419708E-7	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999991610445205	WITHOUT_CLASSIFICATION	8.389554795256817E-7	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999997165951808	WITHOUT_CLASSIFICATION	2.834048191147446E-7	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999996935350689	WITHOUT_CLASSIFICATION	3.064649311146486E-7	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999798815183724	WITHOUT_CLASSIFICATION	2.0118481627725843E-5	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999997424181436	WITHOUT_CLASSIFICATION	2.5758185633340484E-7	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9990188711796988	WITHOUT_CLASSIFICATION	9.811288203012076E-4	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999846778397	WITHOUT_CLASSIFICATION	1.5322160398615185E-8	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999513030545129	WITHOUT_CLASSIFICATION	4.8696945487235294E-5	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999987653036361	WITHOUT_CLASSIFICATION	1.2346963639236052E-6	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9729709705483083	WITHOUT_CLASSIFICATION	0.02702902945169176	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999994404443	WITHOUT_CLASSIFICATION	5.595556391960734E-10	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9729709705483083	WITHOUT_CLASSIFICATION	0.02702902945169176	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999766697461041	WITHOUT_CLASSIFICATION	2.3330253895910943E-5	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999999574112854	WITHOUT_CLASSIFICATION	4.2588714600400354E-7	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998229018680326	WITHOUT_CLASSIFICATION	1.770981319673576E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999863023912	WITHOUT_CLASSIFICATION	1.3697608765229876E-8	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9984719273028454	WITHOUT_CLASSIFICATION	0.0015280726971545612	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999513030545129	WITHOUT_CLASSIFICATION	4.8696945487235294E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999513030545129	WITHOUT_CLASSIFICATION	4.8696945487235294E-5	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999948039190295	WITHOUT_CLASSIFICATION	5.19608097056124E-6	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999998104372384	WITHOUT_CLASSIFICATION	1.8956276159673907E-7	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999972742447184	WITHOUT_CLASSIFICATION	2.7257552816464747E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999921242215805	WITHOUT_CLASSIFICATION	7.875778419493448E-6	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999989414316695	WITHOUT_CLASSIFICATION	1.0585683304743194E-6	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999981544384959	WITHOUT_CLASSIFICATION	1.8455615040418297E-6	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999996259231783	WITHOUT_CLASSIFICATION	3.7407682170106967E-7	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999997630347761	WITHOUT_CLASSIFICATION	2.369652238349312E-7	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999997919925665	WITHOUT_CLASSIFICATION	2.0800743351045395E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999615849668277	WITHOUT_CLASSIFICATION	3.841503317232279E-5	DEFECT
columns	WITHOUT_CLASSIFICATION	0.999995759229191	WITHOUT_CLASSIFICATION	4.240770809044796E-6	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9999998751749131	WITHOUT_CLASSIFICATION	1.2482508704267903E-7	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999939162966651	WITHOUT_CLASSIFICATION	6.083703334822954E-6	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999891105629016	WITHOUT_CLASSIFICATION	1.0889437098328573E-5	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.9999998363894227	WITHOUT_CLASSIFICATION	1.636105773558437E-7	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999998747287316	WITHOUT_CLASSIFICATION	1.2527126836038348E-7	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999982434164348	WITHOUT_CLASSIFICATION	1.7565835650493962E-6	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.99999855530288	WITHOUT_CLASSIFICATION	1.4446971200727532E-6	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999995411851169	WITHOUT_CLASSIFICATION	4.588148831940505E-7	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999997175229823	WITHOUT_CLASSIFICATION	2.8247701763554254E-7	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.9999774212670628	WITHOUT_CLASSIFICATION	2.2578732937182713E-5	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999771916646	WITHOUT_CLASSIFICATION	2.280833534681092E-8	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999967540202367	WITHOUT_CLASSIFICATION	3.2459797633426548E-6	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999989823976256	WITHOUT_CLASSIFICATION	1.0176023743079972E-6	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999999951660113	WITHOUT_CLASSIFICATION	4.833988694245719E-8	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999999079236179	WITHOUT_CLASSIFICATION	9.207638210359271E-7	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999857325908825	WITHOUT_CLASSIFICATION	1.426740911755724E-5	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999998920665032	WITHOUT_CLASSIFICATION	1.0793349687287544E-7	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.999840502778444	WITHOUT_CLASSIFICATION	1.5949722155600304E-4	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999998749874751	WITHOUT_CLASSIFICATION	1.2501252488038117E-7	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999999089653278	WITHOUT_CLASSIFICATION	9.103467229278959E-8	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9991698915250946	WITHOUT_CLASSIFICATION	8.301084749053069E-4	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999269962806597	WITHOUT_CLASSIFICATION	7.30037193402264E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999997630347761	WITHOUT_CLASSIFICATION	2.369652238349312E-7	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9995078725851244	WITHOUT_CLASSIFICATION	4.921274148756155E-4	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9999984341080126	WITHOUT_CLASSIFICATION	1.5658919874014245E-6	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9865771358321838	WITHOUT_CLASSIFICATION	0.013422864167816241	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.9999996121268631	WITHOUT_CLASSIFICATION	3.878731369192226E-7	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999991324155545	WITHOUT_CLASSIFICATION	8.675844454734346E-7	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.9999999614836341	WITHOUT_CLASSIFICATION	3.851636584398081E-8	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999921242215805	WITHOUT_CLASSIFICATION	7.875778419493448E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999921242215805	WITHOUT_CLASSIFICATION	7.875778419493448E-6	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999999852817788	WITHOUT_CLASSIFICATION	1.4718221042564305E-8	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999998026866894	WITHOUT_CLASSIFICATION	1.9731331057597526E-7	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9999941045306787	WITHOUT_CLASSIFICATION	5.8954693212814145E-6	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999999279626256	WITHOUT_CLASSIFICATION	7.203737446182342E-8	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999980171031991	WITHOUT_CLASSIFICATION	1.9828968007631457E-6	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9985565180491752	WITHOUT_CLASSIFICATION	0.0014434819508247093	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9998601941043833	WITHOUT_CLASSIFICATION	1.3980589561668366E-4	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999975661636622	WITHOUT_CLASSIFICATION	2.433836337780098E-6	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999986476038961	WITHOUT_CLASSIFICATION	1.352396103960479E-6	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999947209920312	WITHOUT_CLASSIFICATION	5.279007968741723E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999998994715157	WITHOUT_CLASSIFICATION	1.0052848430432123E-6	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999999513770702	WITHOUT_CLASSIFICATION	4.862292979598027E-7	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997725130628743	WITHOUT_CLASSIFICATION	2.2748693712564816E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999614239189	WITHOUT_CLASSIFICATION	3.857608114081722E-8	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999998994715157	WITHOUT_CLASSIFICATION	1.0052848430432123E-6	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999998341504589	WITHOUT_CLASSIFICATION	1.6584954110240708E-6	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.999997970228656	WITHOUT_CLASSIFICATION	2.0297713440160384E-6	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999843559858618	WITHOUT_CLASSIFICATION	1.564401413818735E-5	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9936125117520631	WITHOUT_CLASSIFICATION	0.0063874882479368995	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997725130628743	WITHOUT_CLASSIFICATION	2.2748693712564816E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998486507953436	WITHOUT_CLASSIFICATION	1.5134920465643498E-4	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999861327035694	WITHOUT_CLASSIFICATION	1.3867296430513258E-5	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999484564626	WITHOUT_CLASSIFICATION	5.154353742432516E-8	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9998402023308894	WITHOUT_CLASSIFICATION	1.59797669110523E-4	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998590427854063	WITHOUT_CLASSIFICATION	1.4095721459380007E-4	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.999999891412338	WITHOUT_CLASSIFICATION	1.085876620467066E-7	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999912529181468	WITHOUT_CLASSIFICATION	8.74708185314984E-6	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999781481737229	WITHOUT_CLASSIFICATION	2.1851826277136286E-5	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999998409589388	WITHOUT_CLASSIFICATION	1.5904106119274956E-7	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.99999996098213	WITHOUT_CLASSIFICATION	3.901787001850985E-8	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9969852302221895	WITHOUT_CLASSIFICATION	0.003014769777810595	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999997720604591	WITHOUT_CLASSIFICATION	2.2793954079923182E-7	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999998994715157	WITHOUT_CLASSIFICATION	1.0052848430432123E-6	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998486507953436	WITHOUT_CLASSIFICATION	1.5134920465643498E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999484564626	WITHOUT_CLASSIFICATION	5.154353742432516E-8	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999892082478298	WITHOUT_CLASSIFICATION	1.0791752170276273E-5	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999977490307649	WITHOUT_CLASSIFICATION	2.250969235183567E-6	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9999996154928598	WITHOUT_CLASSIFICATION	3.845071402268796E-7	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997725130628743	WITHOUT_CLASSIFICATION	2.2748693712564816E-4	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999999504297702	WITHOUT_CLASSIFICATION	4.9570229760355315E-8	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999920753536135	WITHOUT_CLASSIFICATION	7.924646386595227E-6	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998905327553071	WITHOUT_CLASSIFICATION	1.0946724469290147E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999875839369247	WITHOUT_CLASSIFICATION	1.2416063075297946E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999781481737229	WITHOUT_CLASSIFICATION	2.1851826277136286E-5	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999998341504589	WITHOUT_CLASSIFICATION	1.6584954110240708E-6	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.9999754000831466	WITHOUT_CLASSIFICATION	2.4599916853412717E-5	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999991736854817	WITHOUT_CLASSIFICATION	8.263145183128279E-7	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999997273275097	WITHOUT_CLASSIFICATION	2.726724902899112E-7	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999996388235195	WITHOUT_CLASSIFICATION	3.6117648058074336E-7	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.999999911244885	WITHOUT_CLASSIFICATION	8.875511507361731E-8	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999998997600913	WITHOUT_CLASSIFICATION	1.0023990864357914E-7	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9999885109338736	WITHOUT_CLASSIFICATION	1.1489066126306577E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999863023912	WITHOUT_CLASSIFICATION	1.3697608765229876E-8	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999506185266	WITHOUT_CLASSIFICATION	4.938147342974931E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987398929095196	WITHOUT_CLASSIFICATION	0.0012601070904803126	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999999996989843	WITHOUT_CLASSIFICATION	3.0101570345476186E-9	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9991791913622782	WITHOUT_CLASSIFICATION	8.208086377218227E-4	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999316169138135	WITHOUT_CLASSIFICATION	6.838308618652877E-5	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999942810322203	WITHOUT_CLASSIFICATION	5.718967779641882E-6	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999982715848394	WITHOUT_CLASSIFICATION	1.7284151606528877E-6	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9999962802554297	WITHOUT_CLASSIFICATION	3.7197445702369484E-6	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998920489723	WITHOUT_CLASSIFICATION	1.0795102772048906E-7	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999875839369247	WITHOUT_CLASSIFICATION	1.2416063075297946E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987398929095196	WITHOUT_CLASSIFICATION	0.0012601070904803126	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999559686516398	WITHOUT_CLASSIFICATION	4.4031348360185004E-5	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.999985473193756	WITHOUT_CLASSIFICATION	1.452680624396995E-5	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999967472119256	WITHOUT_CLASSIFICATION	3.2527880744456416E-6	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999968113422939	WITHOUT_CLASSIFICATION	3.18865770614677E-6	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9999832887924683	WITHOUT_CLASSIFICATION	1.6711207531672108E-5	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999699932355	WITHOUT_CLASSIFICATION	3.000676448605035E-8	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999876811766283	WITHOUT_CLASSIFICATION	1.2318823371804224E-5	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.999029038555196	WITHOUT_CLASSIFICATION	9.709614448039998E-4	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999538481540833	WITHOUT_CLASSIFICATION	4.615184591669221E-5	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9824688399479787	WITHOUT_CLASSIFICATION	0.017531160052021277	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999997198326809	WITHOUT_CLASSIFICATION	2.8016731909863266E-7	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999969693284461	WITHOUT_CLASSIFICATION	3.030671553926459E-6	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.999999865824856	WITHOUT_CLASSIFICATION	1.3417514404128932E-7	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.9999956888516386	WITHOUT_CLASSIFICATION	4.311148361486967E-6	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999995639642877	WITHOUT_CLASSIFICATION	4.3603571229608486E-7	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998693645921	WITHOUT_CLASSIFICATION	1.3063540781425698E-7	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999996886428247	WITHOUT_CLASSIFICATION	3.1135717520893007E-7	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999728468794	WITHOUT_CLASSIFICATION	2.7153120630756068E-8	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999999346603012	WITHOUT_CLASSIFICATION	6.53396986999008E-8	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999901388101164	WITHOUT_CLASSIFICATION	9.86118988351963E-6	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.9999507450274148	WITHOUT_CLASSIFICATION	4.925497258530675E-5	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999999224085012	WITHOUT_CLASSIFICATION	7.759149875627123E-8	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999998121677421	WITHOUT_CLASSIFICATION	1.8783225789071308E-7	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999595131256	WITHOUT_CLASSIFICATION	4.048687437589259E-8	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999994320207666	WITHOUT_CLASSIFICATION	5.679792333213824E-7	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9985815957250705	WITHOUT_CLASSIFICATION	0.0014184042749295642	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999979604140623	WITHOUT_CLASSIFICATION	2.039585937711805E-6	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998830113844794	WITHOUT_CLASSIFICATION	1.1698861552053939E-4	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998718308202503	WITHOUT_CLASSIFICATION	1.281691797495656E-4	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8195185961910499	WITHOUT_CLASSIFICATION	0.18048140380895	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999990379346474	WITHOUT_CLASSIFICATION	9.62065352598612E-6	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998583094005818	WITHOUT_CLASSIFICATION	1.416905994181472E-4	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999999706413778	WITHOUT_CLASSIFICATION	2.9358622204954246E-7	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999998329157195	WITHOUT_CLASSIFICATION	1.670842805160362E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999298327946256	WITHOUT_CLASSIFICATION	7.016720537446674E-5	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999996915668248	WITHOUT_CLASSIFICATION	3.08433175202599E-7	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999048853145	WITHOUT_CLASSIFICATION	9.511468543353811E-8	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999807689514932	WITHOUT_CLASSIFICATION	1.9231048506815253E-5	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999996915668248	WITHOUT_CLASSIFICATION	3.08433175202599E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999298327946256	WITHOUT_CLASSIFICATION	7.016720537446674E-5	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999048853145	WITHOUT_CLASSIFICATION	9.511468543353811E-8	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.9999991712382749	WITHOUT_CLASSIFICATION	8.287617251608328E-7	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999998738013768	WITHOUT_CLASSIFICATION	1.2619862333323297E-7	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999901353043366	WITHOUT_CLASSIFICATION	9.864695663375615E-6	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999682043073692	WITHOUT_CLASSIFICATION	3.179569263073445E-5	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999885552229	WITHOUT_CLASSIFICATION	1.1444777144208121E-8	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5581237697518108	WITHOUT_CLASSIFICATION	0.44187623024818923	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999781282012372	WITHOUT_CLASSIFICATION	2.187179876280937E-5	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.999979458454299	WITHOUT_CLASSIFICATION	2.054154570090593E-5	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999988879901	WITHOUT_CLASSIFICATION	1.1120099005077877E-9	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999069114432273	WITHOUT_CLASSIFICATION	9.308855677268822E-5	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.9999926669889627	WITHOUT_CLASSIFICATION	7.3330110373317574E-6	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999995991886413	WITHOUT_CLASSIFICATION	4.008113586106853E-7	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998991243409385	WITHOUT_CLASSIFICATION	1.0087565906143502E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999682043073692	WITHOUT_CLASSIFICATION	3.179569263073445E-5	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999996836988938	WITHOUT_CLASSIFICATION	3.163011061539312E-7	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999990466447347	WITHOUT_CLASSIFICATION	9.533552652958892E-7	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999989482483451	WITHOUT_CLASSIFICATION	1.0517516548248784E-6	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999199423547	WITHOUT_CLASSIFICATION	8.00576452457348E-8	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999996787535961	WITHOUT_CLASSIFICATION	3.2124640391786726E-7	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999928718712	WITHOUT_CLASSIFICATION	7.1281287303764336E-9	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999984486134825	WITHOUT_CLASSIFICATION	1.551386517451922E-6	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999996752266	WITHOUT_CLASSIFICATION	3.2477340411350265E-10	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999639715176825	WITHOUT_CLASSIFICATION	3.602848231752648E-5	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999548302564	WITHOUT_CLASSIFICATION	4.516974362852253E-8	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999876443351	WITHOUT_CLASSIFICATION	1.2355664880732546E-8	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999876443351	WITHOUT_CLASSIFICATION	1.2355664880732546E-8	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999924604847	WITHOUT_CLASSIFICATION	7.539515372150064E-9	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999924604847	WITHOUT_CLASSIFICATION	7.539515372150064E-9	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.999988938782643	WITHOUT_CLASSIFICATION	1.1061217357090517E-5	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999989482483451	WITHOUT_CLASSIFICATION	1.0517516548248784E-6	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999999726851209	WITHOUT_CLASSIFICATION	2.73148791565911E-8	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999995525015	WITHOUT_CLASSIFICATION	4.474984532557786E-10	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999825197718	WITHOUT_CLASSIFICATION	1.7480228187538086E-8	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999825197718	WITHOUT_CLASSIFICATION	1.7480228187538086E-8	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999991339546822	WITHOUT_CLASSIFICATION	8.660453177356705E-7	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999999266504567	WITHOUT_CLASSIFICATION	7.334954328071152E-8	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999999998823095	WITHOUT_CLASSIFICATION	1.1769049954770644E-9	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9999999100159522	WITHOUT_CLASSIFICATION	8.998404776206616E-8	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9997424392864582	WITHOUT_CLASSIFICATION	2.575607135418469E-4	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9966756732014979	WITHOUT_CLASSIFICATION	0.0033243267985022494	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999963294216211	WITHOUT_CLASSIFICATION	3.6705783789225533E-6	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999919534731534	WITHOUT_CLASSIFICATION	8.046526846588197E-5	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9999946813192595	WITHOUT_CLASSIFICATION	5.318680740516514E-6	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999964602633062	WITHOUT_CLASSIFICATION	3.539736693636286E-6	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.999998348898179	WITHOUT_CLASSIFICATION	1.651101821132064E-6	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.9999990478821387	WITHOUT_CLASSIFICATION	9.521178613779312E-7	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999998220348202	WITHOUT_CLASSIFICATION	1.7796517982240658E-7	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.999999918690748	WITHOUT_CLASSIFICATION	8.130925191792597E-8	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999999858182617	WITHOUT_CLASSIFICATION	1.4181738402756019E-8	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999994692756614	WITHOUT_CLASSIFICATION	5.307243385529206E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928710436535	WITHOUT_CLASSIFICATION	7.1289563465108436E-6	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999987947464734	WITHOUT_CLASSIFICATION	1.205253526577664E-6	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999998478650666	WITHOUT_CLASSIFICATION	1.5213493345078869E-7	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999989018223732	WITHOUT_CLASSIFICATION	1.0981776268640143E-6	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999992786021797	WITHOUT_CLASSIFICATION	7.213978202198905E-7	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999975287516187	WITHOUT_CLASSIFICATION	2.471248381305871E-6	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999992169573891	WITHOUT_CLASSIFICATION	7.830426107933622E-7	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999997182549151	WITHOUT_CLASSIFICATION	2.817450848644344E-7	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999368839972648	WITHOUT_CLASSIFICATION	6.311600273528774E-5	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999999599273749	WITHOUT_CLASSIFICATION	4.007262508557292E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987398929095196	WITHOUT_CLASSIFICATION	0.0012601070904803126	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999969693284461	WITHOUT_CLASSIFICATION	3.030671553926459E-6	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999987801194523	WITHOUT_CLASSIFICATION	1.2198805477176383E-6	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9996060291917837	WITHOUT_CLASSIFICATION	3.9397080821633814E-4	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873279512628	WITHOUT_CLASSIFICATION	1.2672048737300767E-5	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796594269078	WITHOUT_CLASSIFICATION	2.0340573092158315E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999962515860654	WITHOUT_CLASSIFICATION	3.748413934620428E-6	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999962515860654	WITHOUT_CLASSIFICATION	3.748413934620428E-6	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999203032692334	WITHOUT_CLASSIFICATION	7.969673076664379E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9999981885611225	WITHOUT_CLASSIFICATION	1.8114388775473612E-6	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9998230542507883	WITHOUT_CLASSIFICATION	1.7694574921159375E-4	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9998230542507883	WITHOUT_CLASSIFICATION	1.7694574921159375E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999912070159853	WITHOUT_CLASSIFICATION	8.792984014698341E-5	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9997288598462438	WITHOUT_CLASSIFICATION	2.7114015375620103E-4	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.9998729223619727	WITHOUT_CLASSIFICATION	1.2707763802733584E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999980749787933	WITHOUT_CLASSIFICATION	1.9250212065759263E-6	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9999975676765376	WITHOUT_CLASSIFICATION	2.4323234624160374E-6	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999998153015675	WITHOUT_CLASSIFICATION	1.84698432593542E-7	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.9999989513552399	WITHOUT_CLASSIFICATION	1.0486447601160022E-6	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.999998278787958	WITHOUT_CLASSIFICATION	1.7212120419732289E-6	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999579530766797	WITHOUT_CLASSIFICATION	4.20469233202302E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999579530766797	WITHOUT_CLASSIFICATION	4.20469233202302E-5	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999995830669805	WITHOUT_CLASSIFICATION	4.169330194968001E-6	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999998520378589	WITHOUT_CLASSIFICATION	1.4796214109850384E-7	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999998520378589	WITHOUT_CLASSIFICATION	1.4796214109850384E-7	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999865025681238	WITHOUT_CLASSIFICATION	1.3497431876063572E-5	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999995678247986	WITHOUT_CLASSIFICATION	4.3217520134275554E-7	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9970920256686395	WITHOUT_CLASSIFICATION	0.002907974331360335	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.999998535521422	WITHOUT_CLASSIFICATION	1.4644785779854909E-6	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999995954504268	WITHOUT_CLASSIFICATION	4.045495731525368E-7	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999416346184	WITHOUT_CLASSIFICATION	5.836538157679604E-8	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999998800241376	WITHOUT_CLASSIFICATION	1.1997586243236465E-7	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999990968078541	WITHOUT_CLASSIFICATION	9.031921458044765E-7	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999721884463	WITHOUT_CLASSIFICATION	2.7811553786349688E-8	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9937698249545519	WITHOUT_CLASSIFICATION	0.006230175045448088	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999975692665228	WITHOUT_CLASSIFICATION	2.4307334771188655E-6	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.999996359437866	WITHOUT_CLASSIFICATION	3.640562134029826E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999982522543565	WITHOUT_CLASSIFICATION	1.7477456434728603E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999982522543565	WITHOUT_CLASSIFICATION	1.7477456434728603E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999982522543565	WITHOUT_CLASSIFICATION	1.7477456434728603E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999982522543565	WITHOUT_CLASSIFICATION	1.7477456434728603E-6	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999951790590279	WITHOUT_CLASSIFICATION	4.820940972130869E-6	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.8799423540584987	WITHOUT_CLASSIFICATION	0.1200576459415012	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999639040803691	WITHOUT_CLASSIFICATION	3.609591963091768E-5	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9999980214093233	WITHOUT_CLASSIFICATION	1.978590676779291E-6	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999999129287866	WITHOUT_CLASSIFICATION	8.707121331210545E-8	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9997455677138241	WITHOUT_CLASSIFICATION	2.544322861759017E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999962250642183	WITHOUT_CLASSIFICATION	3.7749357817488633E-6	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999988924417429	WITHOUT_CLASSIFICATION	1.1075582570126886E-6	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.999997171918059	WITHOUT_CLASSIFICATION	2.8280819410385325E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999962250642183	WITHOUT_CLASSIFICATION	3.7749357817488633E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999962250642183	WITHOUT_CLASSIFICATION	3.7749357817488633E-6	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999158889595	WITHOUT_CLASSIFICATION	8.411104042585054E-8	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999996385019508	WITHOUT_CLASSIFICATION	3.614980491414259E-7	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999997000892042	WITHOUT_CLASSIFICATION	2.9991079573956995E-7	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999949431758468	WITHOUT_CLASSIFICATION	5.056824153177758E-6	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999779310379533	WITHOUT_CLASSIFICATION	2.2068962046723314E-5	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999992688490139	WITHOUT_CLASSIFICATION	7.311509859958786E-7	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999999093392715	WITHOUT_CLASSIFICATION	9.066072840664069E-8	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999949431758468	WITHOUT_CLASSIFICATION	5.056824153177758E-6	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999735587051812	WITHOUT_CLASSIFICATION	2.644129481870882E-5	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999909993858985	WITHOUT_CLASSIFICATION	9.000614101510952E-6	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999961947106242	WITHOUT_CLASSIFICATION	3.805289375767559E-6	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999888066003249	WITHOUT_CLASSIFICATION	1.1193399675187864E-5	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999790801604723	WITHOUT_CLASSIFICATION	2.091983952767364E-5	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999289237134048	WITHOUT_CLASSIFICATION	7.107628659514227E-5	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999998029864855	WITHOUT_CLASSIFICATION	1.9701351447800722E-7	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999934767127926	WITHOUT_CLASSIFICATION	6.523287207468874E-6	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998996559094	WITHOUT_CLASSIFICATION	1.0034409057402397E-7	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999996090621518	WITHOUT_CLASSIFICATION	3.909378481714588E-7	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999281692832	WITHOUT_CLASSIFICATION	7.183071677541483E-8	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999999251907805	WITHOUT_CLASSIFICATION	7.48092194397366E-8	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9961998446782259	WITHOUT_CLASSIFICATION	0.003800155321774099	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999666788709602	WITHOUT_CLASSIFICATION	3.3321129039657474E-5	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999997584680557	WITHOUT_CLASSIFICATION	2.4153194433532846E-7	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999971354666035	WITHOUT_CLASSIFICATION	2.864533396458802E-6	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999756287401	WITHOUT_CLASSIFICATION	2.4371259953484753E-8	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999981233913239	WITHOUT_CLASSIFICATION	1.876608676140151E-6	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999998871309937	WITHOUT_CLASSIFICATION	1.128690062625642E-7	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999981233913239	WITHOUT_CLASSIFICATION	1.876608676140151E-6	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999660946514	WITHOUT_CLASSIFICATION	3.390534864592079E-8	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999990146107205	WITHOUT_CLASSIFICATION	9.853892794720583E-7	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999989007396368	WITHOUT_CLASSIFICATION	1.0992603631901465E-6	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999042111012394	WITHOUT_CLASSIFICATION	9.578889876058876E-5	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999999637619503	WITHOUT_CLASSIFICATION	3.623804968789047E-8	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999992644722919	WITHOUT_CLASSIFICATION	7.355277080604435E-7	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999999417601894	WITHOUT_CLASSIFICATION	5.823981065492321E-8	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999756287401	WITHOUT_CLASSIFICATION	2.4371259953484753E-8	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999998871309937	WITHOUT_CLASSIFICATION	1.128690062625642E-7	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999660946514	WITHOUT_CLASSIFICATION	3.390534864592079E-8	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999647658931	WITHOUT_CLASSIFICATION	3.523410690232311E-8	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9999790399410732	WITHOUT_CLASSIFICATION	2.0960058926860163E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.999994397133212	WITHOUT_CLASSIFICATION	5.602866788071399E-6	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999968382142791	WITHOUT_CLASSIFICATION	3.161785720827793E-6	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9999969325606356	WITHOUT_CLASSIFICATION	3.0674393642928397E-6	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9986073747646087	WITHOUT_CLASSIFICATION	0.0013926252353912852	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999811501277	WITHOUT_CLASSIFICATION	1.8849872364329893E-8	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928710436535	WITHOUT_CLASSIFICATION	7.1289563465108436E-6	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999990146107205	WITHOUT_CLASSIFICATION	9.853892794720583E-7	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999928154727902	WITHOUT_CLASSIFICATION	7.18452720983928E-6	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.999994367847756	WITHOUT_CLASSIFICATION	5.632152244045607E-6	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999443925540796	WITHOUT_CLASSIFICATION	5.560744592042391E-5	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999998527423367	WITHOUT_CLASSIFICATION	1.4725766315694282E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928710436535	WITHOUT_CLASSIFICATION	7.1289563465108436E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987398929095196	WITHOUT_CLASSIFICATION	0.0012601070904803126	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999999840253813	WITHOUT_CLASSIFICATION	1.5974618730410827E-8	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928710436535	WITHOUT_CLASSIFICATION	7.1289563465108436E-6	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999987611015	WITHOUT_CLASSIFICATION	1.2388985334481282E-9	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999994383403281	WITHOUT_CLASSIFICATION	5.616596719415635E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987398929095196	WITHOUT_CLASSIFICATION	0.0012601070904803126	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9996808173790307	WITHOUT_CLASSIFICATION	3.191826209692826E-4	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999460629361	WITHOUT_CLASSIFICATION	5.393706386785615E-8	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999277913161	WITHOUT_CLASSIFICATION	7.220868388475877E-8	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.9999901243680148	WITHOUT_CLASSIFICATION	9.875631985117731E-6	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999775870927985	WITHOUT_CLASSIFICATION	2.2412907201509978E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999839368247306	WITHOUT_CLASSIFICATION	1.6063175269343474E-5	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999997407309685	WITHOUT_CLASSIFICATION	2.59269031418297E-7	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.9999980910582464	WITHOUT_CLASSIFICATION	1.908941753563983E-6	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998406134487208	WITHOUT_CLASSIFICATION	1.5938655127931408E-4	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999922289808434	WITHOUT_CLASSIFICATION	7.771019156638756E-6	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9970920256686395	WITHOUT_CLASSIFICATION	0.002907974331360335	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999959278074602	WITHOUT_CLASSIFICATION	4.072192539860571E-6	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9837125357237749	WITHOUT_CLASSIFICATION	0.016287464276225027	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999987327913473	WITHOUT_CLASSIFICATION	1.267208652691657E-6	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999670247510289	WITHOUT_CLASSIFICATION	3.297524897101451E-5	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999994332983222	WITHOUT_CLASSIFICATION	5.667016778925356E-7	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999996055048387	WITHOUT_CLASSIFICATION	3.9449516127053614E-7	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998569673228468	WITHOUT_CLASSIFICATION	1.430326771532354E-4	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999752801476893	WITHOUT_CLASSIFICATION	2.4719852310654747E-5	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999825223549	WITHOUT_CLASSIFICATION	1.7477645132895385E-8	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999901291541179	WITHOUT_CLASSIFICATION	9.870845882126654E-6	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.9969961211843438	WITHOUT_CLASSIFICATION	0.003003878815656203	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996770441956736	WITHOUT_CLASSIFICATION	3.2295580432639486E-4	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998706564491753	WITHOUT_CLASSIFICATION	1.293435508247139E-4	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999999213742667	WITHOUT_CLASSIFICATION	7.862573329511917E-8	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999983299083051	WITHOUT_CLASSIFICATION	1.6700916949675683E-6	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999709117089379	WITHOUT_CLASSIFICATION	2.9088291062128863E-5	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999962381220849	WITHOUT_CLASSIFICATION	3.7618779150471623E-6	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999993813991223	WITHOUT_CLASSIFICATION	6.186008777006543E-7	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999986172165142	WITHOUT_CLASSIFICATION	1.382783485901276E-6	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.999999659396366	WITHOUT_CLASSIFICATION	3.406036339840041E-7	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9990594706872793	WITHOUT_CLASSIFICATION	9.405293127207624E-4	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.9983966736254877	WITHOUT_CLASSIFICATION	0.0016033263745123746	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999997821373395	WITHOUT_CLASSIFICATION	2.1786266041145783E-7	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999872982247049	WITHOUT_CLASSIFICATION	1.2701775295185882E-5	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.9999997958132374	WITHOUT_CLASSIFICATION	2.0418676257025123E-7	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999729035378243	WITHOUT_CLASSIFICATION	2.709646217561602E-5	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999625832793907	WITHOUT_CLASSIFICATION	3.741672060927102E-5	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.982044609663436	WITHOUT_CLASSIFICATION	0.017955390336564053	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999996723679132	WITHOUT_CLASSIFICATION	3.276320868936384E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987398929095196	WITHOUT_CLASSIFICATION	0.0012601070904803126	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999967242684282	WITHOUT_CLASSIFICATION	3.275731571714989E-6	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999816678769915	WITHOUT_CLASSIFICATION	1.83321230084644E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999816678769915	WITHOUT_CLASSIFICATION	1.83321230084644E-5	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999934649896426	WITHOUT_CLASSIFICATION	6.535010357319063E-6	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999839368247306	WITHOUT_CLASSIFICATION	1.6063175269343474E-5	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999460621392742	WITHOUT_CLASSIFICATION	5.393786072589786E-5	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999879062574	WITHOUT_CLASSIFICATION	1.2093742609928612E-8	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998353824660416	WITHOUT_CLASSIFICATION	1.646175339584513E-4	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999880014436325	WITHOUT_CLASSIFICATION	1.1998556367379662E-5	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.9999945753136291	WITHOUT_CLASSIFICATION	5.424686370889675E-6	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9999848180969092	WITHOUT_CLASSIFICATION	1.5181903090874876E-5	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999997433046003	WITHOUT_CLASSIFICATION	2.5669539970051487E-6	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999998247870354	WITHOUT_CLASSIFICATION	1.7521296454705755E-7	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999988643412422	WITHOUT_CLASSIFICATION	1.1356587578205161E-6	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999988938270251	WITHOUT_CLASSIFICATION	1.1061729749149577E-6	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999385481656	WITHOUT_CLASSIFICATION	6.145183434598626E-8	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999999989924221	WITHOUT_CLASSIFICATION	1.0075778929023568E-8	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999249368808	WITHOUT_CLASSIFICATION	7.506311918358649E-8	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999949637581	WITHOUT_CLASSIFICATION	5.036241814469406E-9	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999997218294984	WITHOUT_CLASSIFICATION	2.781705016462945E-7	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999907689938	WITHOUT_CLASSIFICATION	9.231006184110662E-9	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999840753516	WITHOUT_CLASSIFICATION	1.592464845261994E-8	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999980770800285	WITHOUT_CLASSIFICATION	1.9229199715114507E-6	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999996100352335	WITHOUT_CLASSIFICATION	3.8996476653426954E-7	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999941087926366	WITHOUT_CLASSIFICATION	5.891207363399474E-5	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999980270394764	WITHOUT_CLASSIFICATION	1.9729605236275604E-6	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999985128219256	WITHOUT_CLASSIFICATION	1.487178074337467E-6	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.982044609663436	WITHOUT_CLASSIFICATION	0.017955390336564053	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999986899457435	WITHOUT_CLASSIFICATION	1.3100542565479378E-6	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999944115780246	WITHOUT_CLASSIFICATION	5.588421975398108E-6	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999993646849077	WITHOUT_CLASSIFICATION	6.353150922138832E-7	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999892875094553	WITHOUT_CLASSIFICATION	1.0712490544653017E-5	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.981563403742934	WITHOUT_CLASSIFICATION	0.018436596257065997	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999952492260188	WITHOUT_CLASSIFICATION	4.750773981118823E-6	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999960969966283	WITHOUT_CLASSIFICATION	3.90300337174758E-6	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999998489641839	WITHOUT_CLASSIFICATION	1.510358160495019E-7	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998131995562	WITHOUT_CLASSIFICATION	1.8680044379722905E-7	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999973667183	WITHOUT_CLASSIFICATION	2.6332817269348643E-9	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999985166502964	WITHOUT_CLASSIFICATION	1.4833497035625796E-6	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999994270785897	WITHOUT_CLASSIFICATION	5.729214103673192E-7	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999952723243049	WITHOUT_CLASSIFICATION	4.7276756951379335E-6	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9983513854765789	WITHOUT_CLASSIFICATION	0.0016486145234210934	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9966292732934758	WITHOUT_CLASSIFICATION	0.003370726706524104	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999999968042475	WITHOUT_CLASSIFICATION	3.1957524951860376E-8	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999999968042475	WITHOUT_CLASSIFICATION	3.1957524951860376E-8	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999822085900413	WITHOUT_CLASSIFICATION	1.7791409958721135E-5	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999939068542	WITHOUT_CLASSIFICATION	6.093145746509247E-9	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9997823437973979	WITHOUT_CLASSIFICATION	2.1765620260215184E-4	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9997823437973979	WITHOUT_CLASSIFICATION	2.1765620260215184E-4	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999999817881824	WITHOUT_CLASSIFICATION	1.821181751424904E-8	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999830306634865	WITHOUT_CLASSIFICATION	1.6969336513577593E-5	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999873576256492	WITHOUT_CLASSIFICATION	1.2642374350818404E-5	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999981138592	WITHOUT_CLASSIFICATION	1.8861407708300383E-9	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999944984363873	WITHOUT_CLASSIFICATION	5.501563612671552E-6	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999993902679609	WITHOUT_CLASSIFICATION	6.097320390943801E-7	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999996463237539	WITHOUT_CLASSIFICATION	3.5367624602332974E-7	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999996463237539	WITHOUT_CLASSIFICATION	3.5367624602332974E-7	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999999764501327	WITHOUT_CLASSIFICATION	2.3549867306256478E-7	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999987666972737	WITHOUT_CLASSIFICATION	1.2333027262262726E-6	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999999025132092	WITHOUT_CLASSIFICATION	9.748679073975564E-8	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999764799274744	WITHOUT_CLASSIFICATION	2.352007252554917E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999764799274744	WITHOUT_CLASSIFICATION	2.352007252554917E-5	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.999997763295668	WITHOUT_CLASSIFICATION	2.2367043319886876E-6	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999744501846576	WITHOUT_CLASSIFICATION	2.5549815342414155E-5	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9981413020200973	WITHOUT_CLASSIFICATION	0.0018586979799027504	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.999999957074797	WITHOUT_CLASSIFICATION	4.292520284210976E-8	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999922317940014	WITHOUT_CLASSIFICATION	7.76820599847083E-6	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999455829865	WITHOUT_CLASSIFICATION	5.4417013513664686E-8	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999931946207479	WITHOUT_CLASSIFICATION	6.805379252142891E-6	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999996122576161	WITHOUT_CLASSIFICATION	3.877423839428762E-7	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999999952999946	WITHOUT_CLASSIFICATION	4.700005406002578E-9	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999929152635423	WITHOUT_CLASSIFICATION	7.08473645772791E-6	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999990855354	WITHOUT_CLASSIFICATION	9.144644691554813E-10	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9996280857248538	WITHOUT_CLASSIFICATION	3.7191427514611454E-4	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999994999725653	WITHOUT_CLASSIFICATION	5.000274347093144E-7	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9996089764734507	WITHOUT_CLASSIFICATION	3.9102352654931137E-4	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9999990233888061	WITHOUT_CLASSIFICATION	9.766111939673336E-7	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999915307269865	WITHOUT_CLASSIFICATION	8.469273013485291E-6	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999999916615651	WITHOUT_CLASSIFICATION	8.338434901220132E-8	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999990627979208	WITHOUT_CLASSIFICATION	9.372020791102223E-7	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9998939098724605	WITHOUT_CLASSIFICATION	1.0609012753946706E-4	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998919981475645	WITHOUT_CLASSIFICATION	1.080018524355761E-4	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9997431061520151	WITHOUT_CLASSIFICATION	2.56893847984925E-4	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999937372179637	WITHOUT_CLASSIFICATION	6.26278203630334E-6	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.99999980031865	WITHOUT_CLASSIFICATION	1.9968135010964508E-7	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999962663411127	WITHOUT_CLASSIFICATION	3.733658887308058E-6	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.9999990801101684	WITHOUT_CLASSIFICATION	9.198898316941659E-7	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9999908551677511	WITHOUT_CLASSIFICATION	9.144832248900144E-6	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999988184868447	WITHOUT_CLASSIFICATION	1.1815131553091651E-6	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999319637411576	WITHOUT_CLASSIFICATION	6.803625884247034E-5	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999995885209	WITHOUT_CLASSIFICATION	4.114790031366064E-10	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999996827349017	WITHOUT_CLASSIFICATION	3.172650982790006E-7	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9988604975445843	WITHOUT_CLASSIFICATION	0.0011395024554157211	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999997406402099	WITHOUT_CLASSIFICATION	2.5935979007248383E-7	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999998728862225	WITHOUT_CLASSIFICATION	1.2711377749231103E-7	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999934900776251	WITHOUT_CLASSIFICATION	6.509922375004721E-6	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999994939092399	WITHOUT_CLASSIFICATION	5.06090760002749E-7	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999463359530523	WITHOUT_CLASSIFICATION	5.3664046947755674E-5	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9999930814124021	WITHOUT_CLASSIFICATION	6.918587597838427E-6	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999995009991719	WITHOUT_CLASSIFICATION	4.990008281081309E-7	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999940250122276	WITHOUT_CLASSIFICATION	5.9749877724403645E-6	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999995625667186	WITHOUT_CLASSIFICATION	4.3743328139011046E-7	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999631188828946	WITHOUT_CLASSIFICATION	3.6881117105410505E-4	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9991432452199084	WITHOUT_CLASSIFICATION	8.567547800916997E-4	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.9999978011186373	WITHOUT_CLASSIFICATION	2.198881362660679E-6	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.9999995748234891	WITHOUT_CLASSIFICATION	4.2517651093488693E-7	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999993456308144	WITHOUT_CLASSIFICATION	6.543691856089179E-7	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999976635939992	WITHOUT_CLASSIFICATION	2.3364060008563617E-6	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.9992925325373102	WITHOUT_CLASSIFICATION	7.074674626897335E-4	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999992375117087	WITHOUT_CLASSIFICATION	7.624882913194483E-7	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999983785913609	WITHOUT_CLASSIFICATION	1.62140863909246E-5	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999712798748	WITHOUT_CLASSIFICATION	2.8720125219231634E-8	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9992408445593733	WITHOUT_CLASSIFICATION	7.591554406266511E-4	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999997161554198	WITHOUT_CLASSIFICATION	2.838445802045495E-7	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999900202545	WITHOUT_CLASSIFICATION	9.979745506911445E-9	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.999999968716459	WITHOUT_CLASSIFICATION	3.12835408893288E-8	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.999947449288554	WITHOUT_CLASSIFICATION	5.2550711446123175E-5	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999996786141454	WITHOUT_CLASSIFICATION	3.213858546071312E-6	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.999773504396924	WITHOUT_CLASSIFICATION	2.2649560307591625E-4	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999992121519518	WITHOUT_CLASSIFICATION	7.878480482511908E-7	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9995917169398838	WITHOUT_CLASSIFICATION	4.082830601161937E-4	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999993884935667	WITHOUT_CLASSIFICATION	6.115064333201296E-7	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999953977049224	WITHOUT_CLASSIFICATION	4.60229507757571E-6	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999953977049224	WITHOUT_CLASSIFICATION	4.60229507757571E-6	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999999997394574	WITHOUT_CLASSIFICATION	2.6054259563693074E-9	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999988395814294	WITHOUT_CLASSIFICATION	1.1604185705567244E-6	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999992468146	WITHOUT_CLASSIFICATION	7.531854351864304E-10	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999923361069	WITHOUT_CLASSIFICATION	7.663893087968551E-9	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999977544312606	WITHOUT_CLASSIFICATION	2.2455687393828436E-6	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999996009255075	WITHOUT_CLASSIFICATION	3.990744924534345E-7	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999868962973	WITHOUT_CLASSIFICATION	1.3103702623734408E-8	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999911858743	WITHOUT_CLASSIFICATION	8.814125671327133E-9	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999989105021341	WITHOUT_CLASSIFICATION	1.0894978659081048E-6	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999920315034705	WITHOUT_CLASSIFICATION	7.96849652952425E-6	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999636073719038	WITHOUT_CLASSIFICATION	3.63926280962361E-5	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999878238859137	WITHOUT_CLASSIFICATION	1.2176114086378567E-5	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999973664543268	WITHOUT_CLASSIFICATION	2.633545673212569E-6	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999998638154	WITHOUT_CLASSIFICATION	1.3618457315055415E-10	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998665782566	WITHOUT_CLASSIFICATION	1.3342174343923583E-7	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998665782566	WITHOUT_CLASSIFICATION	1.3342174343923583E-7	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999995302373466	WITHOUT_CLASSIFICATION	4.6976265351816397E-7	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9997025758711957	WITHOUT_CLASSIFICATION	2.9742412880423704E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999999982502268	WITHOUT_CLASSIFICATION	1.749773204940603E-8	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999861033967	WITHOUT_CLASSIFICATION	1.389660338275845E-8	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999687996307	WITHOUT_CLASSIFICATION	3.120036939730134E-8	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960185837234	WITHOUT_CLASSIFICATION	3.981416276569124E-6	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999991974171	WITHOUT_CLASSIFICATION	8.025829736307601E-10	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.999994338033274	WITHOUT_CLASSIFICATION	5.661966726023006E-6	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9794463128707775	WITHOUT_CLASSIFICATION	0.02055368712922249	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999998156166	WITHOUT_CLASSIFICATION	1.843834635804018E-10	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999759669260011	WITHOUT_CLASSIFICATION	2.4033073998855327E-5	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999931966753	WITHOUT_CLASSIFICATION	6.8033245622104355E-9	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999121974711	WITHOUT_CLASSIFICATION	8.780252893246779E-8	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999764379467	WITHOUT_CLASSIFICATION	2.3562053203536716E-8	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999606879468	WITHOUT_CLASSIFICATION	3.931205311419309E-8	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999961308061941	WITHOUT_CLASSIFICATION	3.869193805902507E-6	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999640372151315	WITHOUT_CLASSIFICATION	3.596278486855095E-5	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999997633043551	WITHOUT_CLASSIFICATION	2.366956448516284E-7	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999982450557032	WITHOUT_CLASSIFICATION	1.7549442967304487E-6	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999436169862	WITHOUT_CLASSIFICATION	5.6383013909191696E-8	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999994099924	WITHOUT_CLASSIFICATION	5.900077257035388E-10	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999463127853	WITHOUT_CLASSIFICATION	5.368721476396347E-8	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999980534611171	WITHOUT_CLASSIFICATION	1.9465388829352863E-6	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999472991887	WITHOUT_CLASSIFICATION	5.2700811295411766E-8	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998511506664	WITHOUT_CLASSIFICATION	1.4884933365690907E-7	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9999994062249563	WITHOUT_CLASSIFICATION	5.937750435580881E-7	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9994253764420052	WITHOUT_CLASSIFICATION	5.746235579947652E-4	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999952342563653	WITHOUT_CLASSIFICATION	4.765743634646804E-6	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999880421157863	WITHOUT_CLASSIFICATION	1.1957884213645513E-5	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9997700491375147	WITHOUT_CLASSIFICATION	2.2995086248546223E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999983731205168	WITHOUT_CLASSIFICATION	1.6268794831302826E-6	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999996914144021	WITHOUT_CLASSIFICATION	3.0858559778484734E-7	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999974061745877	WITHOUT_CLASSIFICATION	2.593825412368007E-6	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999828772459423	WITHOUT_CLASSIFICATION	1.7122754057705264E-5	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999992321024	WITHOUT_CLASSIFICATION	7.678977622221103E-10	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999969460953305	WITHOUT_CLASSIFICATION	3.0539046693558E-6	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999972533841112	WITHOUT_CLASSIFICATION	2.74661588878825E-6	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999985679438108	WITHOUT_CLASSIFICATION	1.4320561890811886E-6	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999705915773	WITHOUT_CLASSIFICATION	2.9408422623664615E-8	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999583909654	WITHOUT_CLASSIFICATION	4.1609034524177045E-8	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.998751411242226	WITHOUT_CLASSIFICATION	0.0012485887577739865	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9998047781523504	WITHOUT_CLASSIFICATION	1.9522184764964577E-4	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9993528433976454	WITHOUT_CLASSIFICATION	6.471566023545341E-4	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9993528433976454	WITHOUT_CLASSIFICATION	6.471566023545341E-4	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999999927278233	WITHOUT_CLASSIFICATION	7.272176668118612E-9	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998942803234508	WITHOUT_CLASSIFICATION	1.0571967654916705E-4	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999815313026239	WITHOUT_CLASSIFICATION	1.8468697376062178E-5	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999631615009423	WITHOUT_CLASSIFICATION	3.6838499057729436E-5	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999993369413193	WITHOUT_CLASSIFICATION	6.630586806931406E-7	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999116456534	WITHOUT_CLASSIFICATION	8.835434653576991E-8	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998595678985157	WITHOUT_CLASSIFICATION	1.4043210148421216E-4	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999629237193	WITHOUT_CLASSIFICATION	3.707628070831041E-8	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9963810873354765	WITHOUT_CLASSIFICATION	0.0036189126645236017	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992637150984	WITHOUT_CLASSIFICATION	7.36284901484883E-7	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997863068147	WITHOUT_CLASSIFICATION	2.1369318527445685E-7	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999994479139656	WITHOUT_CLASSIFICATION	5.520860343905176E-6	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999991709503225	WITHOUT_CLASSIFICATION	8.290496773486824E-7	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999827247342	WITHOUT_CLASSIFICATION	1.7275265755360787E-8	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999919970375863	WITHOUT_CLASSIFICATION	8.002962413589353E-6	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999985939839523	WITHOUT_CLASSIFICATION	1.4060160476427286E-6	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9998791929173296	WITHOUT_CLASSIFICATION	1.2080708267041105E-4	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.999996220802928	WITHOUT_CLASSIFICATION	3.779197071961867E-6	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999758684767	WITHOUT_CLASSIFICATION	2.413152341970796E-8	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.998987572442829	WITHOUT_CLASSIFICATION	0.0010124275571709307	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999868160857256	WITHOUT_CLASSIFICATION	1.31839142744457E-5	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9993789243224425	WITHOUT_CLASSIFICATION	6.210756775575391E-4	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999973745999912	WITHOUT_CLASSIFICATION	2.6254000087842673E-6	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999994883453	WITHOUT_CLASSIFICATION	5.116547087947684E-10	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999994138486362	WITHOUT_CLASSIFICATION	5.861513638374854E-7	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999474989037253	WITHOUT_CLASSIFICATION	5.25010962747598E-5	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999872421339415	WITHOUT_CLASSIFICATION	1.275786605836652E-5	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999978783585288	WITHOUT_CLASSIFICATION	2.121641471121979E-6	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999989159571441	WITHOUT_CLASSIFICATION	1.084042855953723E-6	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999952804132827	WITHOUT_CLASSIFICATION	4.719586717301409E-6	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999062612164031	WITHOUT_CLASSIFICATION	9.3738783596868E-5	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999929553177	WITHOUT_CLASSIFICATION	7.044682308961093E-9	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999998410064798	WITHOUT_CLASSIFICATION	1.5899352028968678E-7	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999559494709	WITHOUT_CLASSIFICATION	4.4050529076317054E-8	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999980157914908	WITHOUT_CLASSIFICATION	1.9842085091321704E-6	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999984406093	WITHOUT_CLASSIFICATION	1.5593906955404352E-9	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999956775541339	WITHOUT_CLASSIFICATION	4.322445866176437E-6	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.99999999353012	WITHOUT_CLASSIFICATION	6.469879947980544E-9	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999989065443096	WITHOUT_CLASSIFICATION	1.0934556903564094E-6	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999986274392	WITHOUT_CLASSIFICATION	1.3725607850349117E-9	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999997580645072	WITHOUT_CLASSIFICATION	2.41935492743215E-7	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999956892191488	WITHOUT_CLASSIFICATION	4.310780851214393E-6	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999986501494575	WITHOUT_CLASSIFICATION	1.349850542435355E-6	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9997206428850322	WITHOUT_CLASSIFICATION	2.7935711496784995E-4	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999917973124	WITHOUT_CLASSIFICATION	8.20268771404818E-9	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.999999998265765	WITHOUT_CLASSIFICATION	1.7342349309056087E-9	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999655830042	WITHOUT_CLASSIFICATION	3.4416995745272E-8	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.999955533230645	WITHOUT_CLASSIFICATION	4.446676935502851E-5	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999960228061143	WITHOUT_CLASSIFICATION	3.977193885695665E-6	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999973664543268	WITHOUT_CLASSIFICATION	2.633545673212569E-6	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.999999713394288	WITHOUT_CLASSIFICATION	2.8660571203009064E-7	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999998251013	WITHOUT_CLASSIFICATION	1.7489852480657336E-10	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999544690535661	WITHOUT_CLASSIFICATION	4.5530946433822975E-5	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999794246183	WITHOUT_CLASSIFICATION	2.0575381748338395E-8	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999909019015	WITHOUT_CLASSIFICATION	9.098098521375518E-9	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999847658176685	WITHOUT_CLASSIFICATION	1.5234182331416255E-5	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999935235625279	WITHOUT_CLASSIFICATION	6.476437472151726E-6	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9989307307055665	WITHOUT_CLASSIFICATION	0.0010692692944334525	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999920198089	WITHOUT_CLASSIFICATION	7.980191091399271E-8	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9995398286203477	WITHOUT_CLASSIFICATION	4.601713796521747E-4	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999999067681079	WITHOUT_CLASSIFICATION	9.323189202554621E-8	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9998531288577023	WITHOUT_CLASSIFICATION	1.4687114229762014E-4	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999997940589279	WITHOUT_CLASSIFICATION	2.0594107215850888E-7	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999989404484901	WITHOUT_CLASSIFICATION	1.0595515098350595E-6	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999558434379997	WITHOUT_CLASSIFICATION	4.415656200033782E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998891390701	WITHOUT_CLASSIFICATION	1.1086092986335793E-7	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999991593484726	WITHOUT_CLASSIFICATION	8.406515273573493E-7	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999984824671033	WITHOUT_CLASSIFICATION	1.5175328967115045E-6	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999996060334291	WITHOUT_CLASSIFICATION	3.939665709322361E-7	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998874261356606	WITHOUT_CLASSIFICATION	1.1257386433936294E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998891390701	WITHOUT_CLASSIFICATION	1.1086092986335793E-7	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.983640177064732	WITHOUT_CLASSIFICATION	0.016359822935267984	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999878431219735	WITHOUT_CLASSIFICATION	1.2156878026484691E-5	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999996806811	WITHOUT_CLASSIFICATION	3.193188173296082E-10	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999794266894	WITHOUT_CLASSIFICATION	2.057331067659891E-8	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999996693848345	WITHOUT_CLASSIFICATION	3.3061516540244406E-7	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999938585501612	WITHOUT_CLASSIFICATION	6.141449838729603E-6	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999592805	WITHOUT_CLASSIFICATION	4.071954530231874E-11	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999059681141444	WITHOUT_CLASSIFICATION	9.403188585552887E-5	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999476850286	WITHOUT_CLASSIFICATION	5.2314971317645326E-8	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9987070297920774	WITHOUT_CLASSIFICATION	0.0012929702079225946	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.999999581034128	WITHOUT_CLASSIFICATION	4.18965871976585E-7	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999769366306109	WITHOUT_CLASSIFICATION	2.306336938905851E-5	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999968368915655	WITHOUT_CLASSIFICATION	3.1631084345381117E-6	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999999371840389	WITHOUT_CLASSIFICATION	6.281596114950246E-8	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999981578380441	WITHOUT_CLASSIFICATION	1.8421619558074325E-6	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9998945937706369	WITHOUT_CLASSIFICATION	1.054062293630028E-4	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999985128219256	WITHOUT_CLASSIFICATION	1.487178074337467E-6	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999995709705763	WITHOUT_CLASSIFICATION	4.2902942370563906E-7	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999244696343	WITHOUT_CLASSIFICATION	7.553036574014774E-8	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999850160124283	WITHOUT_CLASSIFICATION	1.4983987571718114E-5	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9998147824493354	WITHOUT_CLASSIFICATION	1.8521755066445357E-4	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999967325132	WITHOUT_CLASSIFICATION	3.2674867910852397E-9	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999996318167604	WITHOUT_CLASSIFICATION	3.681832395070615E-7	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999974916200157	WITHOUT_CLASSIFICATION	2.5083799842219093E-6	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999849369	WITHOUT_CLASSIFICATION	1.5063046428608854E-11	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999997235117752	WITHOUT_CLASSIFICATION	2.764882247387383E-7	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999982683424963	WITHOUT_CLASSIFICATION	1.7316575037425717E-6	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998748846559037	WITHOUT_CLASSIFICATION	1.2511534409631215E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998549522009	WITHOUT_CLASSIFICATION	1.450477990911972E-7	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999831047425906	WITHOUT_CLASSIFICATION	1.6895257409506094E-5	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.7853517517597667	WITHOUT_CLASSIFICATION	0.21464824824023337	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9999995807860302	WITHOUT_CLASSIFICATION	4.1921396974624524E-7	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9993718483753762	WITHOUT_CLASSIFICATION	6.2815162462382E-4	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9934095561397468	WITHOUT_CLASSIFICATION	0.006590443860253197	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999983595096753	WITHOUT_CLASSIFICATION	1.6404903247587379E-6	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999990679127	WITHOUT_CLASSIFICATION	9.320873134888278E-10	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999988632491	WITHOUT_CLASSIFICATION	1.1367508554189674E-9	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999999996878271	WITHOUT_CLASSIFICATION	3.12172904547259E-9	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999990539061753	WITHOUT_CLASSIFICATION	9.460938247503597E-7	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999998974496366	WITHOUT_CLASSIFICATION	1.0255036344178614E-7	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999928208122968	WITHOUT_CLASSIFICATION	7.179187703173848E-6	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999992185870612	WITHOUT_CLASSIFICATION	7.814129388967259E-7	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999992185870612	WITHOUT_CLASSIFICATION	7.814129388967259E-7	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999895009558891	WITHOUT_CLASSIFICATION	1.0499044110844382E-5	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999507493999	WITHOUT_CLASSIFICATION	4.925060009974356E-7	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999757011959	WITHOUT_CLASSIFICATION	2.4298804101313044E-8	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999924623094468	WITHOUT_CLASSIFICATION	7.537690553232062E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999980749787933	WITHOUT_CLASSIFICATION	1.9250212065759263E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999980749787933	WITHOUT_CLASSIFICATION	1.9250212065759263E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999513030545129	WITHOUT_CLASSIFICATION	4.8696945487235294E-5	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999949514711	WITHOUT_CLASSIFICATION	5.048528910207884E-9	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999989990341029	WITHOUT_CLASSIFICATION	1.0009658970455893E-6	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999428041076	WITHOUT_CLASSIFICATION	5.7195892379797805E-8	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999998972905205	WITHOUT_CLASSIFICATION	1.0270947946060111E-7	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999991337728742	WITHOUT_CLASSIFICATION	8.662271257886408E-7	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999312700069	WITHOUT_CLASSIFICATION	6.872999314652289E-8	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999977104168785	WITHOUT_CLASSIFICATION	2.2895831215000506E-5	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999962673985383	WITHOUT_CLASSIFICATION	3.7326014617549378E-6	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999910486019	WITHOUT_CLASSIFICATION	8.951398106348234E-9	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.99992060069995	WITHOUT_CLASSIFICATION	7.939930005004472E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999089880541	WITHOUT_CLASSIFICATION	9.101194583123305E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999089880541	WITHOUT_CLASSIFICATION	9.101194583123305E-8	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999992172006	WITHOUT_CLASSIFICATION	7.827993972283386E-10	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999781481737229	WITHOUT_CLASSIFICATION	2.1851826277136286E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.999999891412338	WITHOUT_CLASSIFICATION	1.085876620467066E-7	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999999747660444	WITHOUT_CLASSIFICATION	2.5233955551666955E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987398929095196	WITHOUT_CLASSIFICATION	0.0012601070904803126	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999999805708918	WITHOUT_CLASSIFICATION	1.9429108175809086E-8	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999506185266	WITHOUT_CLASSIFICATION	4.938147342974931E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987398929095196	WITHOUT_CLASSIFICATION	0.0012601070904803126	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999826179442	WITHOUT_CLASSIFICATION	1.7382055788399448E-8	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999611114929873	WITHOUT_CLASSIFICATION	3.888850701282652E-5	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999845700827047	WITHOUT_CLASSIFICATION	1.542991729524322E-5	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999990790523	WITHOUT_CLASSIFICATION	9.209476887099522E-10	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9987070297920774	WITHOUT_CLASSIFICATION	0.0012929702079225946	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999997449708948	WITHOUT_CLASSIFICATION	2.5502910518737715E-7	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9995503656670234	WITHOUT_CLASSIFICATION	4.496343329766852E-4	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999975131913785	WITHOUT_CLASSIFICATION	2.486808621458276E-6	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9999998495981565	WITHOUT_CLASSIFICATION	1.5040184348485393E-7	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999994756459987	WITHOUT_CLASSIFICATION	5.243540012827492E-7	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999988959347965	WITHOUT_CLASSIFICATION	1.1040652034660583E-6	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999999270149543	WITHOUT_CLASSIFICATION	7.298504568780695E-7	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.999999995256219	WITHOUT_CLASSIFICATION	4.7437809682000065E-9	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999976784321398	WITHOUT_CLASSIFICATION	2.321567860184192E-6	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9972573627654957	WITHOUT_CLASSIFICATION	0.002742637234504234	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9972573627654957	WITHOUT_CLASSIFICATION	0.002742637234504234	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999949431758468	WITHOUT_CLASSIFICATION	5.056824153177758E-6	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999986191341	WITHOUT_CLASSIFICATION	1.380865844788395E-9	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999962250642183	WITHOUT_CLASSIFICATION	3.7749357817488633E-6	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999993800299324	WITHOUT_CLASSIFICATION	6.199700676351248E-7	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.999999685085371	WITHOUT_CLASSIFICATION	3.149146290191702E-7	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999998161615047	WITHOUT_CLASSIFICATION	1.8383849529202687E-7	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999997584680557	WITHOUT_CLASSIFICATION	2.4153194433532846E-7	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999913931396137	WITHOUT_CLASSIFICATION	8.60686038622691E-6	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999647658931	WITHOUT_CLASSIFICATION	3.523410690232311E-8	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999993651731582	WITHOUT_CLASSIFICATION	6.34826841773758E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928710436535	WITHOUT_CLASSIFICATION	7.1289563465108436E-6	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9866204916333443	WITHOUT_CLASSIFICATION	0.013379508366655675	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999997594727736	WITHOUT_CLASSIFICATION	2.405272263108593E-7	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999997152316716	WITHOUT_CLASSIFICATION	2.847683284061256E-7	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999982513164565	WITHOUT_CLASSIFICATION	1.7486835435550783E-6	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999266864464	WITHOUT_CLASSIFICATION	7.331355362893042E-8	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999299360957098	WITHOUT_CLASSIFICATION	7.00639042901144E-5	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999899134143891	WITHOUT_CLASSIFICATION	1.0086585610754787E-5	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9988605677446778	WITHOUT_CLASSIFICATION	0.001139432255322259	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9992758259396227	WITHOUT_CLASSIFICATION	7.241740603772882E-4	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999983644956316	WITHOUT_CLASSIFICATION	1.635504368410126E-6	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999977809225	WITHOUT_CLASSIFICATION	2.219077504834921E-9	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9981413020200973	WITHOUT_CLASSIFICATION	0.0018586979799027504	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999939900911	WITHOUT_CLASSIFICATION	6.00990893816333E-9	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999996451225571	WITHOUT_CLASSIFICATION	3.548774428904297E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999996451225571	WITHOUT_CLASSIFICATION	3.548774428904297E-6	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999042811397808	WITHOUT_CLASSIFICATION	9.571886021930091E-5	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998288756445433	WITHOUT_CLASSIFICATION	1.7112435545678468E-4	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999995848454	WITHOUT_CLASSIFICATION	4.151545604868808E-10	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999839494011651	WITHOUT_CLASSIFICATION	1.6050598834975914E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999954099288918	WITHOUT_CLASSIFICATION	4.590071108252968E-6	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9998848451519395	WITHOUT_CLASSIFICATION	1.1515484806036908E-4	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.95604827547256	WITHOUT_CLASSIFICATION	0.04395172452744001	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999954571670977	WITHOUT_CLASSIFICATION	4.542832902217707E-6	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.6913747793384085	WITHOUT_CLASSIFICATION	0.30862522066159154	DEFECT
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.8009869614236605	DEFECT	0.1990130385763394	WITHOUT_CLASSIFICATION
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.8441763622876859	DEFECT	0.15582363771231403	WITHOUT_CLASSIFICATION
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9579708935625663	DEFECT	0.04202910643743375	WITHOUT_CLASSIFICATION
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.99999997891343	WITHOUT_CLASSIFICATION	2.108657003420774E-8	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.9996739848862083	WITHOUT_CLASSIFICATION	3.2601511379165955E-4	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9522858233822284	DEFECT	0.04771417661777152	WITHOUT_CLASSIFICATION
TODO : should this be an error?	DEFECT	0.7222871531591168	WITHOUT_CLASSIFICATION	0.2777128468408832	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.9955710373732262	DEFECT	0.004428962626773876	WITHOUT_CLASSIFICATION
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.819972687700383	DEFECT	0.1800273122996171	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9289514461462235	DEFECT	0.07104855385377648	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9289514461462235	DEFECT	0.07104855385377648	WITHOUT_CLASSIFICATION
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9775721989636728	WITHOUT_CLASSIFICATION	0.02242780103632721	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.999985719253146	WITHOUT_CLASSIFICATION	1.428074685389479E-5	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9938475104237902	DEFECT	0.0061524895762098365	WITHOUT_CLASSIFICATION
this call is side-effecty	DEFECT	0.9999356688345994	WITHOUT_CLASSIFICATION	6.433116540057836E-5	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.9427166449782367	WITHOUT_CLASSIFICATION	0.057283355021763245	DEFECT
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9303679138986917	WITHOUT_CLASSIFICATION	0.0696320861013083	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.8368485216090729	DEFECT	0.16315147839092725	WITHOUT_CLASSIFICATION
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.8762600183372348	WITHOUT_CLASSIFICATION	0.12373998166276522	DEFECT
TODO: is this completely correct?	DEFECT	0.6709487865213132	WITHOUT_CLASSIFICATION	0.3290512134786867	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.9852083940382603	DEFECT	0.014791605961739777	WITHOUT_CLASSIFICATION
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.8203820701952426	DEFECT	0.17961792980475746	WITHOUT_CLASSIFICATION
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9994884982736697	WITHOUT_CLASSIFICATION	5.115017263302757E-4	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.9731169134571233	DEFECT	0.026883086542876748	WITHOUT_CLASSIFICATION
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.9936229443893776	DEFECT	0.006377055610622334	WITHOUT_CLASSIFICATION
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9943897752451402	WITHOUT_CLASSIFICATION	0.005610224754859819	DEFECT
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.8296232917530059	WITHOUT_CLASSIFICATION	0.17037670824699405	DEFECT
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.8629071638717888	DEFECT	0.1370928361282113	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.634279776365749	DEFECT	0.36572022363425116	WITHOUT_CLASSIFICATION
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.769754889736925	DEFECT	0.23024511026307512	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9289514461462235	DEFECT	0.07104855385377648	WITHOUT_CLASSIFICATION
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9998182861509369	DEFECT	1.8171384906316994E-4	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.857998423807575	WITHOUT_CLASSIFICATION	0.142001576192425	DEFECT
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.7373705942552811	WITHOUT_CLASSIFICATION	0.26262940574471894	DEFECT
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9987118467334721	WITHOUT_CLASSIFICATION	0.0012881532665278337	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.999998074822227	WITHOUT_CLASSIFICATION	1.925177772949856E-6	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9983749475754671	WITHOUT_CLASSIFICATION	0.0016250524245329404	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9924402213396653	WITHOUT_CLASSIFICATION	0.007559778660334707	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.8522492375113473	DEFECT	0.14775076248865268	WITHOUT_CLASSIFICATION
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.8920599211157332	DEFECT	0.10794007888426688	WITHOUT_CLASSIFICATION
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.9948518708189837	WITHOUT_CLASSIFICATION	0.005148129181016216	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.9988132622758092	WITHOUT_CLASSIFICATION	0.0011867377241907785	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.9765460317949111	DEFECT	0.02345396820508895	WITHOUT_CLASSIFICATION
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.999790148043452	WITHOUT_CLASSIFICATION	2.0985195654806658E-4	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.9774039631336778	WITHOUT_CLASSIFICATION	0.022596036866322156	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.9763770465697332	WITHOUT_CLASSIFICATION	0.023622953430266845	DEFECT
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.8750514991352479	WITHOUT_CLASSIFICATION	0.12494850086475215	DEFECT
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.9780690681431853	DEFECT	0.021930931856814728	WITHOUT_CLASSIFICATION
