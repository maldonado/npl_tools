test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999734620093	WITHOUT_CLASSIFICATION	2.6537990607609125E-8	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999980568740919	WITHOUT_CLASSIFICATION	1.9431259081070793E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999980568740919	WITHOUT_CLASSIFICATION	1.9431259081070793E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999980568740919	WITHOUT_CLASSIFICATION	1.9431259081070793E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999980568740919	WITHOUT_CLASSIFICATION	1.9431259081070793E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999980568740919	WITHOUT_CLASSIFICATION	1.9431259081070793E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999980568740919	WITHOUT_CLASSIFICATION	1.9431259081070793E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999980568740919	WITHOUT_CLASSIFICATION	1.9431259081070793E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999955992057455	WITHOUT_CLASSIFICATION	4.400794254370409E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999955992057455	WITHOUT_CLASSIFICATION	4.400794254370409E-6	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999844675819162	WITHOUT_CLASSIFICATION	1.553241808382392E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.999989757163279	WITHOUT_CLASSIFICATION	1.0242836721020198E-5	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999998897759992	WITHOUT_CLASSIFICATION	1.1022400084617453E-7	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999923209564493	WITHOUT_CLASSIFICATION	7.679043550833277E-6	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999923209564493	WITHOUT_CLASSIFICATION	7.679043550833277E-6	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999981040425	WITHOUT_CLASSIFICATION	1.8959575409547752E-9	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994527522367	WITHOUT_CLASSIFICATION	5.472477633644068E-7	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999999263572159	WITHOUT_CLASSIFICATION	7.364278407778088E-8	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999920001230803	WITHOUT_CLASSIFICATION	7.999876919626294E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999960814039176	WITHOUT_CLASSIFICATION	3.9185960824517235E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999960814039176	WITHOUT_CLASSIFICATION	3.9185960824517235E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999699667834442	WITHOUT_CLASSIFICATION	3.0033216555780898E-5	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999999780549568	WITHOUT_CLASSIFICATION	2.1945043197010667E-7	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.999862315975401	WITHOUT_CLASSIFICATION	1.3768402459899418E-4	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999987666513277	WITHOUT_CLASSIFICATION	1.2333486723174492E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999985053690068	WITHOUT_CLASSIFICATION	1.49463099321736E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999947308653374	WITHOUT_CLASSIFICATION	5.269134662527275E-6	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.9999971526107396	WITHOUT_CLASSIFICATION	2.8473892603604867E-6	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999709756124091	WITHOUT_CLASSIFICATION	2.9024387590912716E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998405955265652	WITHOUT_CLASSIFICATION	1.594044734347337E-4	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999999637139869	WITHOUT_CLASSIFICATION	3.6286013092313005E-8	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999968397908229	WITHOUT_CLASSIFICATION	3.160209177132764E-6	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.999993799017448	WITHOUT_CLASSIFICATION	6.200982551981043E-6	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999985819518061	WITHOUT_CLASSIFICATION	1.4180481939132542E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999939681782419	WITHOUT_CLASSIFICATION	6.031821758061374E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999939681782419	WITHOUT_CLASSIFICATION	6.031821758061374E-6	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999995662740877	WITHOUT_CLASSIFICATION	4.337259123083626E-7	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999744804029227	WITHOUT_CLASSIFICATION	2.5519597077379696E-5	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999618740246	WITHOUT_CLASSIFICATION	3.812597540723795E-8	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997932619479	WITHOUT_CLASSIFICATION	2.0673805207695968E-7	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999997710067283	WITHOUT_CLASSIFICATION	2.2899327165742896E-7	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999963268373162	WITHOUT_CLASSIFICATION	3.6731626837116543E-6	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999997837212165	WITHOUT_CLASSIFICATION	2.1627878357094167E-7	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999999924741686	WITHOUT_CLASSIFICATION	7.525831422547244E-9	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999996931958715	WITHOUT_CLASSIFICATION	3.0680412849093443E-7	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999997537877785	WITHOUT_CLASSIFICATION	2.4621222151316585E-7	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999997182700141	WITHOUT_CLASSIFICATION	2.8172998580309366E-7	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999720313775563	WITHOUT_CLASSIFICATION	2.7968622443711066E-5	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999208888148	WITHOUT_CLASSIFICATION	7.911118516245788E-8	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994883246055	WITHOUT_CLASSIFICATION	5.116753945593807E-7	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999920713610942	WITHOUT_CLASSIFICATION	7.92863890575513E-6	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984616953121	WITHOUT_CLASSIFICATION	1.5383046878163976E-6	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851001238876	WITHOUT_CLASSIFICATION	1.4899876112433833E-5	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.99999977991324	WITHOUT_CLASSIFICATION	2.200867601328526E-7	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999999523350325	WITHOUT_CLASSIFICATION	4.7664967493643553E-7	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.999996091613858	WITHOUT_CLASSIFICATION	3.908386141963303E-6	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9948095468632332	WITHOUT_CLASSIFICATION	0.005190453136766814	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999983353835099	WITHOUT_CLASSIFICATION	1.664616490085933E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.999996091613858	WITHOUT_CLASSIFICATION	3.908386141963303E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999983353835099	WITHOUT_CLASSIFICATION	1.664616490085933E-6	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999982657168645	WITHOUT_CLASSIFICATION	1.734283135558603E-6	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999999079447249	WITHOUT_CLASSIFICATION	9.205527517849914E-8	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999991245021445	WITHOUT_CLASSIFICATION	8.754978556589241E-7	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999989685401096	WITHOUT_CLASSIFICATION	1.0314598904276216E-6	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999974417657	WITHOUT_CLASSIFICATION	2.5582342553414533E-9	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999993259715	WITHOUT_CLASSIFICATION	6.74028537262426E-10	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999189794794046	WITHOUT_CLASSIFICATION	8.10205205954989E-5	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9998926981730882	WITHOUT_CLASSIFICATION	1.0730182691172076E-4	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999179222616	WITHOUT_CLASSIFICATION	8.207773842859862E-8	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9999987208722024	WITHOUT_CLASSIFICATION	1.2791277975356421E-6	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999976188143856	WITHOUT_CLASSIFICATION	2.3811856143661913E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999983353835099	WITHOUT_CLASSIFICATION	1.664616490085933E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998014495242	WITHOUT_CLASSIFICATION	1.985504759119514E-7	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999967380374718	WITHOUT_CLASSIFICATION	3.2619625282534897E-6	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999995640648315	WITHOUT_CLASSIFICATION	4.3593516851661854E-7	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999991610684207	WITHOUT_CLASSIFICATION	8.389315792108692E-7	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999964570207988	WITHOUT_CLASSIFICATION	3.542979201208227E-6	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999905035604432	WITHOUT_CLASSIFICATION	9.496439556882586E-6	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999997020429147	WITHOUT_CLASSIFICATION	2.979570853450242E-7	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998815679413	WITHOUT_CLASSIFICATION	1.1843205880610287E-7	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999999789703883	WITHOUT_CLASSIFICATION	2.102961170422363E-7	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999980897022	WITHOUT_CLASSIFICATION	1.910297751206304E-9	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999222447509	WITHOUT_CLASSIFICATION	7.775524908472067E-8	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999969741173125	WITHOUT_CLASSIFICATION	3.0258826875157665E-6	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.999995162653726	WITHOUT_CLASSIFICATION	4.8373462740197945E-6	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.999999079519552	WITHOUT_CLASSIFICATION	9.204804480264562E-7	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999997940409	WITHOUT_CLASSIFICATION	2.059592143201942E-10	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999735109246	WITHOUT_CLASSIFICATION	2.64890754627948E-8	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999856977178	WITHOUT_CLASSIFICATION	1.4302282298108382E-8	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999906444349	WITHOUT_CLASSIFICATION	9.355565120425428E-9	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999813151212	WITHOUT_CLASSIFICATION	1.8684878704184426E-8	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999820960129	WITHOUT_CLASSIFICATION	1.7903987059923665E-8	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999703308519802	WITHOUT_CLASSIFICATION	2.9669148019795586E-4	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999963965855212	WITHOUT_CLASSIFICATION	3.6034144788745207E-6	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999748498432064	WITHOUT_CLASSIFICATION	2.515015679352022E-5	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999165641307	WITHOUT_CLASSIFICATION	8.343586936382779E-8	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999963965855212	WITHOUT_CLASSIFICATION	3.6034144788745207E-6	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999995471564241	WITHOUT_CLASSIFICATION	4.5284357585268114E-7	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999968638890989	WITHOUT_CLASSIFICATION	3.1361109011049746E-5	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.999996091613858	WITHOUT_CLASSIFICATION	3.908386141963303E-6	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999998162916467	WITHOUT_CLASSIFICATION	1.837083531923469E-7	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.9999998529119866	WITHOUT_CLASSIFICATION	1.4708801337334403E-7	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999988229727076	WITHOUT_CLASSIFICATION	1.1770272923431979E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999988229727076	WITHOUT_CLASSIFICATION	1.1770272923431979E-6	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999876956845125	WITHOUT_CLASSIFICATION	1.2304315487476378E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999886874616	WITHOUT_CLASSIFICATION	1.1312538235624479E-8	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999998494536247	WITHOUT_CLASSIFICATION	1.5054637523713652E-7	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999997067561	WITHOUT_CLASSIFICATION	2.932438387667225E-10	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999998581229395	WITHOUT_CLASSIFICATION	1.418770605027291E-6	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999717295536	WITHOUT_CLASSIFICATION	2.8270446395214937E-8	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999989123255276	WITHOUT_CLASSIFICATION	1.087674472291366E-6	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9999714126757328	WITHOUT_CLASSIFICATION	2.858732426717348E-5	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999517943308	WITHOUT_CLASSIFICATION	4.8205669308761646E-8	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.99999980887327	WITHOUT_CLASSIFICATION	1.9112672995803988E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999907174482	WITHOUT_CLASSIFICATION	9.282551911690203E-9	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999907174482	WITHOUT_CLASSIFICATION	9.282551911690203E-9	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999898305323575	WITHOUT_CLASSIFICATION	1.0169467642511964E-5	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999982015678633	WITHOUT_CLASSIFICATION	1.7984321365783843E-6	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999995702751353	WITHOUT_CLASSIFICATION	4.297248647479372E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999907174482	WITHOUT_CLASSIFICATION	9.282551911690203E-9	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999898305323575	WITHOUT_CLASSIFICATION	1.0169467642511964E-5	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999898305323575	WITHOUT_CLASSIFICATION	1.0169467642511964E-5	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999756212764	WITHOUT_CLASSIFICATION	2.4378723598681554E-8	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999987833724671	WITHOUT_CLASSIFICATION	1.216627532941377E-6	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999977284822964	WITHOUT_CLASSIFICATION	2.2715177035715195E-6	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999990989062	WITHOUT_CLASSIFICATION	9.010938593210002E-10	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999979002639193	WITHOUT_CLASSIFICATION	2.099736080725627E-6	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999979002639193	WITHOUT_CLASSIFICATION	2.099736080725627E-6	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999999215485554	WITHOUT_CLASSIFICATION	7.845144452269403E-8	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999993782765917	WITHOUT_CLASSIFICATION	6.217234084172223E-7	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999961904921832	WITHOUT_CLASSIFICATION	3.8095078166981255E-6	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999960894747086	WITHOUT_CLASSIFICATION	3.910525291332507E-6	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999960894747086	WITHOUT_CLASSIFICATION	3.910525291332507E-6	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999988821253825	WITHOUT_CLASSIFICATION	1.1178746175397593E-6	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999560534823264	WITHOUT_CLASSIFICATION	4.394651767356902E-5	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999973592996586	WITHOUT_CLASSIFICATION	2.6407003414770255E-6	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999948776843	WITHOUT_CLASSIFICATION	5.122315671888198E-9	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.999999993770143	WITHOUT_CLASSIFICATION	6.2298569409282756E-9	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999842524988	WITHOUT_CLASSIFICATION	1.574750119945003E-8	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999979981809981	WITHOUT_CLASSIFICATION	2.0018190019347566E-6	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999999908692889	WITHOUT_CLASSIFICATION	9.130711099494925E-8	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.999999099787895	WITHOUT_CLASSIFICATION	9.002121049885897E-7	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999973592996586	WITHOUT_CLASSIFICATION	2.6407003414770255E-6	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999808218037441	WITHOUT_CLASSIFICATION	1.917819625587245E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999872958403585	WITHOUT_CLASSIFICATION	1.2704159641635598E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999872958403585	WITHOUT_CLASSIFICATION	1.2704159641635598E-5	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999994497903589	WITHOUT_CLASSIFICATION	5.502096410400748E-7	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999982550576706	WITHOUT_CLASSIFICATION	1.7449423294852045E-6	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999822229992	WITHOUT_CLASSIFICATION	1.7777000715656924E-8	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999023438995299	WITHOUT_CLASSIFICATION	9.765610047014047E-5	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999946556418484	WITHOUT_CLASSIFICATION	5.3443581515622075E-6	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999998416753185	WITHOUT_CLASSIFICATION	1.5832468144551582E-7	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.9999849379102436	WITHOUT_CLASSIFICATION	1.5062089756540671E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9996752144501169	WITHOUT_CLASSIFICATION	3.247855498831754E-4	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999983880772	WITHOUT_CLASSIFICATION	1.6119227733440487E-9	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999996531380307	WITHOUT_CLASSIFICATION	3.4686196931044395E-7	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999996531380307	WITHOUT_CLASSIFICATION	3.4686196931044395E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999973237806377	WITHOUT_CLASSIFICATION	2.676219362431832E-6	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999734620093	WITHOUT_CLASSIFICATION	2.6537990607609125E-8	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999996678828692	WITHOUT_CLASSIFICATION	3.321171307702781E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999980568740919	WITHOUT_CLASSIFICATION	1.9431259081070793E-5	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9999962408307497	WITHOUT_CLASSIFICATION	3.759169250446238E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999955992057455	WITHOUT_CLASSIFICATION	4.400794254370409E-6	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999924073798027	WITHOUT_CLASSIFICATION	7.592620197334582E-6	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999999057891674	WITHOUT_CLASSIFICATION	9.4210832481228E-8	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999996121876176	WITHOUT_CLASSIFICATION	3.8781238237136E-7	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9999898339212223	WITHOUT_CLASSIFICATION	1.0166078777746417E-5	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9994675217125215	WITHOUT_CLASSIFICATION	5.324782874784851E-4	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999918333733143	WITHOUT_CLASSIFICATION	8.166626685582206E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999879910704903	WITHOUT_CLASSIFICATION	1.2008929509642957E-5	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999987538527356	WITHOUT_CLASSIFICATION	1.246147264455316E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.999989757163279	WITHOUT_CLASSIFICATION	1.0242836721020198E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999913739752259	WITHOUT_CLASSIFICATION	8.626024774142158E-6	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999913739752259	WITHOUT_CLASSIFICATION	8.626024774142158E-6	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9999989677157538	WITHOUT_CLASSIFICATION	1.0322842461606187E-6	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999842004946448	WITHOUT_CLASSIFICATION	1.579950535514813E-5	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999990054768824	WITHOUT_CLASSIFICATION	9.945231176448524E-7	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999986026024466	WITHOUT_CLASSIFICATION	1.3973975533715847E-6	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999956592235887	WITHOUT_CLASSIFICATION	4.340776411408141E-6	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999591341839	WITHOUT_CLASSIFICATION	4.086581593275406E-8	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999923209564493	WITHOUT_CLASSIFICATION	7.679043550833277E-6	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999999674520883	WITHOUT_CLASSIFICATION	3.2547911703260553E-7	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999982667839271	WITHOUT_CLASSIFICATION	1.7332160729560739E-6	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999977909823403	WITHOUT_CLASSIFICATION	2.2090176597680625E-6	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999978055223002	WITHOUT_CLASSIFICATION	2.1944776998153124E-6	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.9999928644634298	WITHOUT_CLASSIFICATION	7.135536570119712E-6	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.9999719534001497	WITHOUT_CLASSIFICATION	2.804659985026085E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999998053343633	WITHOUT_CLASSIFICATION	1.9466563663468963E-7	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999504040913	WITHOUT_CLASSIFICATION	4.959590865398248E-8	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999999822878244	WITHOUT_CLASSIFICATION	1.7712175603236365E-7	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999884925695204	WITHOUT_CLASSIFICATION	1.1507430479570237E-5	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999981082304061	WITHOUT_CLASSIFICATION	1.8917695937754955E-6	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.9999997087779097	WITHOUT_CLASSIFICATION	2.9122209041372953E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999980568740919	WITHOUT_CLASSIFICATION	1.9431259081070793E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999980568740919	WITHOUT_CLASSIFICATION	1.9431259081070793E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999955992057455	WITHOUT_CLASSIFICATION	4.400794254370409E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999955992057455	WITHOUT_CLASSIFICATION	4.400794254370409E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999879910704903	WITHOUT_CLASSIFICATION	1.2008929509642957E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999913739752259	WITHOUT_CLASSIFICATION	8.626024774142158E-6	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999998053343633	WITHOUT_CLASSIFICATION	1.9466563663468963E-7	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999981040425	WITHOUT_CLASSIFICATION	1.8959575409547752E-9	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999976151462058	WITHOUT_CLASSIFICATION	2.384853794259231E-6	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999934989755248	WITHOUT_CLASSIFICATION	6.5010244752319016E-6	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999680678927004	WITHOUT_CLASSIFICATION	3.193210729948217E-5	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.9999953678992043	WITHOUT_CLASSIFICATION	4.632100795734589E-6	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999993844318594	WITHOUT_CLASSIFICATION	6.15568140496082E-7	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.9999870291849757	WITHOUT_CLASSIFICATION	1.2970815024389067E-5	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9997454460856965	WITHOUT_CLASSIFICATION	2.545539143035071E-4	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9999956590958723	WITHOUT_CLASSIFICATION	4.340904127675404E-6	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9999998980117709	WITHOUT_CLASSIFICATION	1.0198822901396082E-7	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.999989678227346	WITHOUT_CLASSIFICATION	1.0321772653899694E-5	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.999989678227346	WITHOUT_CLASSIFICATION	1.0321772653899694E-5	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999753042395	WITHOUT_CLASSIFICATION	2.4695760641182343E-8	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999986198940216	WITHOUT_CLASSIFICATION	1.3801059784604033E-6	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999949529212695	WITHOUT_CLASSIFICATION	5.047078730515585E-6	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9998077850391398	WITHOUT_CLASSIFICATION	1.9221496086027892E-4	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999907207958	WITHOUT_CLASSIFICATION	9.279204204027088E-9	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.999999899674684	WITHOUT_CLASSIFICATION	1.0032531605137087E-7	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9999997164303034	WITHOUT_CLASSIFICATION	2.835696966172557E-7	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994527522367	WITHOUT_CLASSIFICATION	5.472477633644068E-7	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.9999793468220001	WITHOUT_CLASSIFICATION	2.065317799983157E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999989808243848	WITHOUT_CLASSIFICATION	1.0191756152460066E-6	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999989808243848	WITHOUT_CLASSIFICATION	1.0191756152460066E-6	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.999999921899755	WITHOUT_CLASSIFICATION	7.81002450422646E-8	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999995643649563	WITHOUT_CLASSIFICATION	4.3563504371723766E-7	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9999987414340767	WITHOUT_CLASSIFICATION	1.2585659233074745E-6	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999992531350712	WITHOUT_CLASSIFICATION	7.468649287652781E-7	DEFECT
int	WITHOUT_CLASSIFICATION	0.9999782288445151	WITHOUT_CLASSIFICATION	2.1771155484868425E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999955992057455	WITHOUT_CLASSIFICATION	4.400794254370409E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999879910704903	WITHOUT_CLASSIFICATION	1.2008929509642957E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.999989757163279	WITHOUT_CLASSIFICATION	1.0242836721020198E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999998053343633	WITHOUT_CLASSIFICATION	1.9466563663468963E-7	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999998053343633	WITHOUT_CLASSIFICATION	1.9466563663468963E-7	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999984845324164	WITHOUT_CLASSIFICATION	1.5154675836220622E-6	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999984845324164	WITHOUT_CLASSIFICATION	1.5154675836220622E-6	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999995798199831	WITHOUT_CLASSIFICATION	4.201800167889202E-7	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999832445428213	WITHOUT_CLASSIFICATION	1.675545717867416E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999832445428213	WITHOUT_CLASSIFICATION	1.675545717867416E-5	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.9999992384312771	WITHOUT_CLASSIFICATION	7.615687228356613E-7	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.9999989565647236	WITHOUT_CLASSIFICATION	1.0434352764297476E-6	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999996349838578	WITHOUT_CLASSIFICATION	3.650161422023487E-7	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999981054550516	WITHOUT_CLASSIFICATION	1.8945449483506278E-6	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999686598330667	WITHOUT_CLASSIFICATION	3.1340166933304516E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999920001230803	WITHOUT_CLASSIFICATION	7.999876919626294E-6	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999920001230803	WITHOUT_CLASSIFICATION	7.999876919626294E-6	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9999900326305329	WITHOUT_CLASSIFICATION	9.96736946713854E-6	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999792688196977	WITHOUT_CLASSIFICATION	2.073118030235712E-5	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.9999994365085175	WITHOUT_CLASSIFICATION	5.634914825265618E-7	DEFECT
byte	WITHOUT_CLASSIFICATION	0.999982652058988	WITHOUT_CLASSIFICATION	1.734794101203851E-5	DEFECT
char	WITHOUT_CLASSIFICATION	0.9999986264601818	WITHOUT_CLASSIFICATION	1.3735398182438956E-6	DEFECT
short	WITHOUT_CLASSIFICATION	0.9999967617637084	WITHOUT_CLASSIFICATION	3.2382362916145493E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999960814039176	WITHOUT_CLASSIFICATION	3.9185960824517235E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999858902536339	WITHOUT_CLASSIFICATION	1.4109746365933618E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999858902536339	WITHOUT_CLASSIFICATION	1.4109746365933618E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999699667834442	WITHOUT_CLASSIFICATION	3.0033216555780898E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999699667834442	WITHOUT_CLASSIFICATION	3.0033216555780898E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999985116098119	WITHOUT_CLASSIFICATION	1.4883901880899513E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999985116098119	WITHOUT_CLASSIFICATION	1.4883901880899513E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999791663828	WITHOUT_CLASSIFICATION	2.0833617119188187E-8	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999791663828	WITHOUT_CLASSIFICATION	2.0833617119188187E-8	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999920001230803	WITHOUT_CLASSIFICATION	7.999876919626294E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999960814039176	WITHOUT_CLASSIFICATION	3.9185960824517235E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999858902536339	WITHOUT_CLASSIFICATION	1.4109746365933618E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999858902536339	WITHOUT_CLASSIFICATION	1.4109746365933618E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999699667834442	WITHOUT_CLASSIFICATION	3.0033216555780898E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999985116098119	WITHOUT_CLASSIFICATION	1.4883901880899513E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999985116098119	WITHOUT_CLASSIFICATION	1.4883901880899513E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999791663828	WITHOUT_CLASSIFICATION	2.0833617119188187E-8	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999940211739083	WITHOUT_CLASSIFICATION	5.97882609161957E-6	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999998795296989	WITHOUT_CLASSIFICATION	1.2047030109983151E-6	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.9999942140470194	WITHOUT_CLASSIFICATION	5.785952980630995E-6	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999972608658966	WITHOUT_CLASSIFICATION	2.7391341035253424E-6	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9999999061783318	WITHOUT_CLASSIFICATION	9.382166825203054E-8	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999905297273599	WITHOUT_CLASSIFICATION	9.470272640209573E-6	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999984171783691	WITHOUT_CLASSIFICATION	1.5828216309053878E-5	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9885277781200955	WITHOUT_CLASSIFICATION	0.01147222187990455	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9996535431949025	WITHOUT_CLASSIFICATION	3.4645680509749716E-4	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999167069008	WITHOUT_CLASSIFICATION	8.3293099297574E-8	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999931581521256	WITHOUT_CLASSIFICATION	6.841847874383055E-6	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999998077719633	WITHOUT_CLASSIFICATION	1.9222803662723387E-7	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999876956845125	WITHOUT_CLASSIFICATION	1.2304315487476378E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999905297273599	WITHOUT_CLASSIFICATION	9.470272640209573E-6	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999905297273599	WITHOUT_CLASSIFICATION	9.470272640209573E-6	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999905297273599	WITHOUT_CLASSIFICATION	9.470272640209573E-6	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999849473639429	WITHOUT_CLASSIFICATION	1.5052636057089945E-5	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999173587797	WITHOUT_CLASSIFICATION	8.26412203501213E-8	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999173587797	WITHOUT_CLASSIFICATION	8.26412203501213E-8	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999911053464647	WITHOUT_CLASSIFICATION	8.894653535229695E-6	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999986043519578	WITHOUT_CLASSIFICATION	1.3956480422605372E-6	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999933104913942	WITHOUT_CLASSIFICATION	6.689508605894307E-6	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999954413743265	WITHOUT_CLASSIFICATION	4.558625673503224E-6	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999954413743265	WITHOUT_CLASSIFICATION	4.558625673503224E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999985053690068	WITHOUT_CLASSIFICATION	1.49463099321736E-6	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999775801871824	WITHOUT_CLASSIFICATION	2.2419812817685195E-5	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999775801871824	WITHOUT_CLASSIFICATION	2.2419812817685195E-5	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999976394200492	WITHOUT_CLASSIFICATION	2.360579950786565E-6	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999999817884427	WITHOUT_CLASSIFICATION	1.8211557286220502E-7	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999976972909778	WITHOUT_CLASSIFICATION	2.3027090222877632E-6	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998781006629558	WITHOUT_CLASSIFICATION	1.2189933704423088E-4	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.9999790438971304	WITHOUT_CLASSIFICATION	2.0956102869558985E-5	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.999985373718615	WITHOUT_CLASSIFICATION	1.4626281385107518E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999947308653374	WITHOUT_CLASSIFICATION	5.269134662527275E-6	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999238495700679	WITHOUT_CLASSIFICATION	7.61504299320586E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9932915403573064	WITHOUT_CLASSIFICATION	0.006708459642693655	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9999688514142974	WITHOUT_CLASSIFICATION	3.114858570259852E-5	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999947327868461	WITHOUT_CLASSIFICATION	5.267213153807832E-6	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998405955265652	WITHOUT_CLASSIFICATION	1.594044734347337E-4	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998368332946	WITHOUT_CLASSIFICATION	1.6316670541395165E-7	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999999561398153	WITHOUT_CLASSIFICATION	4.3860184760600735E-8	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999998374767866	WITHOUT_CLASSIFICATION	1.6252321342076919E-7	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998405955265652	WITHOUT_CLASSIFICATION	1.594044734347337E-4	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999994829520571	WITHOUT_CLASSIFICATION	5.170479429561615E-7	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999989065849079	WITHOUT_CLASSIFICATION	1.0934150920704074E-6	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999996566083016	WITHOUT_CLASSIFICATION	3.4339169839730225E-6	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9999679765960666	WITHOUT_CLASSIFICATION	3.202340393343828E-5	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999967552030855	WITHOUT_CLASSIFICATION	3.24479691439675E-6	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999937956896161	WITHOUT_CLASSIFICATION	6.2043103839072884E-6	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999998124759269	WITHOUT_CLASSIFICATION	1.8752407310056316E-6	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.999993799017448	WITHOUT_CLASSIFICATION	6.200982551981043E-6	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999989835158157	WITHOUT_CLASSIFICATION	1.0164841841595888E-6	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999985819518061	WITHOUT_CLASSIFICATION	1.4180481939132542E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999980677584009	WITHOUT_CLASSIFICATION	1.932241599135893E-6	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9999997546886662	WITHOUT_CLASSIFICATION	2.453113338301256E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999749678649743	WITHOUT_CLASSIFICATION	2.503213502574679E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999947308653374	WITHOUT_CLASSIFICATION	5.269134662527275E-6	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999989835158157	WITHOUT_CLASSIFICATION	1.0164841841595888E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999980677584009	WITHOUT_CLASSIFICATION	1.932241599135893E-6	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999749678649743	WITHOUT_CLASSIFICATION	2.503213502574679E-5	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999990554554549	WITHOUT_CLASSIFICATION	9.44544545111266E-7	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.9999732835900208	WITHOUT_CLASSIFICATION	2.671640997926129E-5	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999999672659097	WITHOUT_CLASSIFICATION	3.273409030627128E-7	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999939681782419	WITHOUT_CLASSIFICATION	6.031821758061374E-6	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999958613821079	WITHOUT_CLASSIFICATION	4.138617892076359E-6	DEFECT
column index	WITHOUT_CLASSIFICATION	0.999980365402861	WITHOUT_CLASSIFICATION	1.9634597139046542E-5	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.9999953032860256	WITHOUT_CLASSIFICATION	4.696713974348239E-6	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999995851188174	WITHOUT_CLASSIFICATION	4.1488118263053976E-7	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999985635914627	WITHOUT_CLASSIFICATION	1.4364085373845617E-6	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999939099099	WITHOUT_CLASSIFICATION	6.090090082243936E-9	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998239999135	WITHOUT_CLASSIFICATION	1.76000086424703E-7	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999986076808584	WITHOUT_CLASSIFICATION	1.392319141652528E-6	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999991540945	WITHOUT_CLASSIFICATION	8.459053632764939E-10	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999993598241271	WITHOUT_CLASSIFICATION	6.401758727732794E-7	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.9999774558929696	WITHOUT_CLASSIFICATION	2.2544107030429885E-5	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999971081217393	WITHOUT_CLASSIFICATION	2.891878260820273E-6	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999744804029227	WITHOUT_CLASSIFICATION	2.5519597077379696E-5	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999971879491135	WITHOUT_CLASSIFICATION	2.812050886471105E-6	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.9999840601114142	WITHOUT_CLASSIFICATION	1.593988858581273E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999989835158157	WITHOUT_CLASSIFICATION	1.0164841841595888E-6	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999998764420944	WITHOUT_CLASSIFICATION	1.235579056151975E-7	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999819966261	WITHOUT_CLASSIFICATION	1.8003373999418498E-8	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.9999998269044582	WITHOUT_CLASSIFICATION	1.7309554178463953E-7	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999995580350743	WITHOUT_CLASSIFICATION	4.4196492576216024E-7	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9999996764497378	WITHOUT_CLASSIFICATION	3.2355026223598174E-7	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999867439894211	WITHOUT_CLASSIFICATION	1.3256010578792835E-5	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999993693125	WITHOUT_CLASSIFICATION	6.306876139968464E-10	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999867309539	WITHOUT_CLASSIFICATION	1.3269046089240433E-8	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999735085694201	WITHOUT_CLASSIFICATION	2.6491430579834514E-5	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.9999690525846759	WITHOUT_CLASSIFICATION	3.094741532408345E-5	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999951056058662	WITHOUT_CLASSIFICATION	4.894394133695171E-6	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999962997998953	WITHOUT_CLASSIFICATION	3.7002001046783583E-6	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999556095359136	WITHOUT_CLASSIFICATION	4.4390464086410435E-5	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997932619479	WITHOUT_CLASSIFICATION	2.0673805207695968E-7	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9999998943178794	WITHOUT_CLASSIFICATION	1.0568212067439864E-7	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999991120370773	WITHOUT_CLASSIFICATION	8.879629227657309E-7	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9999960670255065	WITHOUT_CLASSIFICATION	3.932974493469655E-6	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999992911466404	WITHOUT_CLASSIFICATION	7.088533596338479E-7	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9999995093370142	WITHOUT_CLASSIFICATION	4.906629858167458E-7	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999740067830497	WITHOUT_CLASSIFICATION	2.5993216950324317E-5	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999993113	WITHOUT_CLASSIFICATION	6.886565000023143E-13	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999873905512588	WITHOUT_CLASSIFICATION	1.2609448741095727E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999771620766	WITHOUT_CLASSIFICATION	2.2837923411708193E-8	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999962851997689	WITHOUT_CLASSIFICATION	3.7148002310178064E-6	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999677976109826	WITHOUT_CLASSIFICATION	3.220238901736613E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999677976109826	WITHOUT_CLASSIFICATION	3.220238901736613E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999538194211959	WITHOUT_CLASSIFICATION	4.6180578804115986E-5	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999995235205958	WITHOUT_CLASSIFICATION	4.7647940419100534E-6	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999997806290207	WITHOUT_CLASSIFICATION	2.1937097924032923E-7	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999950530822084	WITHOUT_CLASSIFICATION	4.946917791589192E-6	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999995666240384	WITHOUT_CLASSIFICATION	4.333759615037958E-7	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9984052289607064	WITHOUT_CLASSIFICATION	0.0015947710392935437	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999830074536481	WITHOUT_CLASSIFICATION	1.6992546351897242E-5	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999998856445775	WITHOUT_CLASSIFICATION	1.1435542254728868E-7	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999921992985765	WITHOUT_CLASSIFICATION	7.800701423534355E-6	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999974447865717	WITHOUT_CLASSIFICATION	2.5552134282611963E-6	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999987675888571	WITHOUT_CLASSIFICATION	1.2324111429220403E-6	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999996490932767	WITHOUT_CLASSIFICATION	3.5090672343587927E-7	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9999956883200258	WITHOUT_CLASSIFICATION	4.3116799741498115E-6	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999849670066363	WITHOUT_CLASSIFICATION	1.5032993363842676E-5	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999985448332979	WITHOUT_CLASSIFICATION	1.455166702067122E-6	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9993594728545009	WITHOUT_CLASSIFICATION	6.405271454991518E-4	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999884210593255	WITHOUT_CLASSIFICATION	1.1578940674472498E-5	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9998007255861038	WITHOUT_CLASSIFICATION	1.9927441389616337E-4	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948991067659	WITHOUT_CLASSIFICATION	5.100893234052595E-6	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999993622662443	WITHOUT_CLASSIFICATION	6.377337556507407E-7	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926270924608	WITHOUT_CLASSIFICATION	7.372907539112911E-6	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.999999982161228	WITHOUT_CLASSIFICATION	1.783877200470138E-8	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.999993469030081	WITHOUT_CLASSIFICATION	6.530969918970423E-6	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999309674916559	WITHOUT_CLASSIFICATION	6.903250834408133E-5	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999624174491523	WITHOUT_CLASSIFICATION	3.758255084773721E-5	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999996221335378	WITHOUT_CLASSIFICATION	3.7786646216094734E-7	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999990459610855	WITHOUT_CLASSIFICATION	9.5403891450634E-7	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999998655769191	WITHOUT_CLASSIFICATION	1.3442308092673249E-7	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999996482001168	WITHOUT_CLASSIFICATION	3.517998832674007E-7	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999986917825036	WITHOUT_CLASSIFICATION	1.3082174964516212E-6	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999993622662443	WITHOUT_CLASSIFICATION	6.377337556507407E-7	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999691660755434	WITHOUT_CLASSIFICATION	3.083392445647519E-5	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999999515009487	WITHOUT_CLASSIFICATION	4.8499051280144166E-8	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999999418815837	WITHOUT_CLASSIFICATION	5.8118416271572E-8	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999844928465347	WITHOUT_CLASSIFICATION	1.5507153465323507E-5	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999844928465347	WITHOUT_CLASSIFICATION	1.5507153465323507E-5	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999999525432339	WITHOUT_CLASSIFICATION	4.745676600410402E-8	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999995798661399	WITHOUT_CLASSIFICATION	4.2013386020058525E-7	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.999988994154387	WITHOUT_CLASSIFICATION	1.1005845612950471E-5	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.999988994154387	WITHOUT_CLASSIFICATION	1.1005845612950471E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999771620766	WITHOUT_CLASSIFICATION	2.2837923411708193E-8	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999920734821145	WITHOUT_CLASSIFICATION	7.926517885472526E-6	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999981662755953	WITHOUT_CLASSIFICATION	1.833724404651773E-6	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998983577076	WITHOUT_CLASSIFICATION	1.0164229228233297E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999973237806377	WITHOUT_CLASSIFICATION	2.676219362431832E-6	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999981662755953	WITHOUT_CLASSIFICATION	1.833724404651773E-6	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998983577076	WITHOUT_CLASSIFICATION	1.0164229228233297E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999996247476891	WITHOUT_CLASSIFICATION	3.7525231093942777E-7	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.999999815382567	WITHOUT_CLASSIFICATION	1.8461743305744564E-7	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999924101241081	WITHOUT_CLASSIFICATION	7.589875891830554E-6	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999996754193886	WITHOUT_CLASSIFICATION	3.2458061139157365E-7	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996537551664989	WITHOUT_CLASSIFICATION	3.4624483350109513E-4	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999987873011863	WITHOUT_CLASSIFICATION	1.2126988136617594E-6	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999984275225915	WITHOUT_CLASSIFICATION	1.572477408470275E-6	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999984275225915	WITHOUT_CLASSIFICATION	1.572477408470275E-6	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.99904060342906	WITHOUT_CLASSIFICATION	9.593965709401138E-4	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999981728424	WITHOUT_CLASSIFICATION	1.827157543005904E-9	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999985299795878	WITHOUT_CLASSIFICATION	1.4700204122540792E-6	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999618663571	WITHOUT_CLASSIFICATION	3.813364292583335E-8	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999999831206411	WITHOUT_CLASSIFICATION	1.6879358933653524E-8	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.999999005266358	WITHOUT_CLASSIFICATION	9.94733642051958E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999973237806377	WITHOUT_CLASSIFICATION	2.676219362431832E-6	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.999996541301963	WITHOUT_CLASSIFICATION	3.4586980369853755E-6	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999969828041415	WITHOUT_CLASSIFICATION	3.0171958584819674E-6	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999969828041415	WITHOUT_CLASSIFICATION	3.0171958584819674E-6	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999969367300466	WITHOUT_CLASSIFICATION	3.063269953392861E-6	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999996247476891	WITHOUT_CLASSIFICATION	3.7525231093942777E-7	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999711542105048	WITHOUT_CLASSIFICATION	2.8845789495265454E-5	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9986472210417707	WITHOUT_CLASSIFICATION	0.0013527789582292995	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999340862372533	WITHOUT_CLASSIFICATION	6.591376274665406E-5	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999934919950356	WITHOUT_CLASSIFICATION	6.508004964289396E-6	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9986522343209006	WITHOUT_CLASSIFICATION	0.0013477656790994645	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999996247476891	WITHOUT_CLASSIFICATION	3.7525231093942777E-7	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999934919950356	WITHOUT_CLASSIFICATION	6.508004964289396E-6	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9986522343209006	WITHOUT_CLASSIFICATION	0.0013477656790994645	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999974097531	WITHOUT_CLASSIFICATION	2.590246954182767E-9	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999981273699798	WITHOUT_CLASSIFICATION	1.872630020242164E-6	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999769787725973	WITHOUT_CLASSIFICATION	2.3021227402730617E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999996247476891	WITHOUT_CLASSIFICATION	3.7525231093942777E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999996247476891	WITHOUT_CLASSIFICATION	3.7525231093942777E-7	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9999996146741479	WITHOUT_CLASSIFICATION	3.853258520420796E-7	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9999989116657041	WITHOUT_CLASSIFICATION	1.0883342958359815E-6	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9999974315789057	WITHOUT_CLASSIFICATION	2.5684210941791215E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994883246055	WITHOUT_CLASSIFICATION	5.116753945593807E-7	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9999988304825506	WITHOUT_CLASSIFICATION	1.1695174494670168E-6	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999999982041348	WITHOUT_CLASSIFICATION	1.7958652028609468E-8	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999143236084	WITHOUT_CLASSIFICATION	8.56763916065252E-8	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999391705573	WITHOUT_CLASSIFICATION	6.082944272028731E-8	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999982281462914	WITHOUT_CLASSIFICATION	1.771853708618516E-6	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9999896446948031	WITHOUT_CLASSIFICATION	1.0355305196837332E-5	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999923452360807	WITHOUT_CLASSIFICATION	7.654763919303388E-6	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999990777628971	WITHOUT_CLASSIFICATION	9.222371028210555E-7	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999992476419229	WITHOUT_CLASSIFICATION	7.52358076971653E-7	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999993263093804	WITHOUT_CLASSIFICATION	6.736906197075072E-7	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999366500985167	WITHOUT_CLASSIFICATION	6.334990148323567E-5	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999978287930799	WITHOUT_CLASSIFICATION	2.171206920044434E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994883246055	WITHOUT_CLASSIFICATION	5.116753945593807E-7	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999604558612689	WITHOUT_CLASSIFICATION	3.954413873102504E-5	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999996232668901	WITHOUT_CLASSIFICATION	3.7673310997254715E-7	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999878895539	WITHOUT_CLASSIFICATION	1.2110445996309384E-8	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999986399238661	WITHOUT_CLASSIFICATION	1.3600761339049584E-6	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9999685828974776	WITHOUT_CLASSIFICATION	3.1417102522453764E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9999685828974776	WITHOUT_CLASSIFICATION	3.1417102522453764E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994883246055	WITHOUT_CLASSIFICATION	5.116753945593807E-7	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999786877178266	WITHOUT_CLASSIFICATION	2.1312282173464792E-5	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999999740211284	WITHOUT_CLASSIFICATION	2.5978871645206383E-8	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999725025839624	WITHOUT_CLASSIFICATION	2.7497416037558477E-5	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999990279171465	WITHOUT_CLASSIFICATION	9.720828535653118E-7	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986384574779	WITHOUT_CLASSIFICATION	1.361542522016837E-6	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999996449756069	WITHOUT_CLASSIFICATION	3.550243930808746E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999569777812167	WITHOUT_CLASSIFICATION	4.302221878320518E-5	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999995964920076	WITHOUT_CLASSIFICATION	4.035079924160535E-7	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999801736	WITHOUT_CLASSIFICATION	1.982644435650153E-11	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967930553042	WITHOUT_CLASSIFICATION	3.206944695735978E-6	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998018794661	WITHOUT_CLASSIFICATION	1.9812053389040975E-7	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999884755410736	WITHOUT_CLASSIFICATION	1.1524458926340281E-5	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9996283386870047	WITHOUT_CLASSIFICATION	3.7166131299516474E-4	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999500669402169	WITHOUT_CLASSIFICATION	4.993305978315919E-5	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999997504452	WITHOUT_CLASSIFICATION	2.495547415651586E-10	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995369966486	WITHOUT_CLASSIFICATION	4.6300335151949694E-7	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999975828555555	WITHOUT_CLASSIFICATION	2.417144444504142E-5	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999986279962444	WITHOUT_CLASSIFICATION	1.372003755589518E-6	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999920862108762	WITHOUT_CLASSIFICATION	7.913789123818723E-6	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973489238638	WITHOUT_CLASSIFICATION	2.6510761362228926E-6	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999977409529184	WITHOUT_CLASSIFICATION	2.2590470815729575E-6	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999997797749651	WITHOUT_CLASSIFICATION	2.202250349585469E-7	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999672312092	WITHOUT_CLASSIFICATION	3.2768790790039614E-8	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999821632916772	WITHOUT_CLASSIFICATION	1.7836708322799316E-5	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981860761084	WITHOUT_CLASSIFICATION	1.8139238916033524E-6	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956292127308	WITHOUT_CLASSIFICATION	4.370787269229658E-6	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939996302969	WITHOUT_CLASSIFICATION	6.000369703078464E-6	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997215431956	WITHOUT_CLASSIFICATION	2.7845680440301164E-6	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958322950885	WITHOUT_CLASSIFICATION	4.16770491150536E-6	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928596572383	WITHOUT_CLASSIFICATION	7.140342761813363E-6	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980086697493	WITHOUT_CLASSIFICATION	1.991330250682706E-6	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999998064813899	WITHOUT_CLASSIFICATION	1.9351861001873935E-7	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999999582768345	WITHOUT_CLASSIFICATION	4.172316549882741E-7	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988336399324	WITHOUT_CLASSIFICATION	1.1663600676991597E-6	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998401340437	WITHOUT_CLASSIFICATION	1.5986595626794578E-7	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998157028781	WITHOUT_CLASSIFICATION	1.8429712183761123E-7	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987970910816	WITHOUT_CLASSIFICATION	1.2029089184286236E-6	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932962262044	WITHOUT_CLASSIFICATION	6.703773795672943E-6	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993538148305	WITHOUT_CLASSIFICATION	6.461851694348892E-7	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997723246133	WITHOUT_CLASSIFICATION	2.2767538673624565E-7	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901513754673	WITHOUT_CLASSIFICATION	9.848624532694695E-6	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999755390772779	WITHOUT_CLASSIFICATION	2.446092272211158E-5	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926222048034	WITHOUT_CLASSIFICATION	7.377795196627204E-6	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.8437580902702305	WITHOUT_CLASSIFICATION	0.15624190972976953	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999953710836558	WITHOUT_CLASSIFICATION	4.628916344163707E-6	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999999998723	WITHOUT_CLASSIFICATION	1.2768070994110665E-13	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999985710452374	WITHOUT_CLASSIFICATION	1.4289547626579794E-6	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.9999988678619233	WITHOUT_CLASSIFICATION	1.1321380766945841E-6	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999994512485859	WITHOUT_CLASSIFICATION	5.487514140300771E-7	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999850999688	WITHOUT_CLASSIFICATION	1.4900031214384366E-8	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999981727262022	WITHOUT_CLASSIFICATION	1.8272737979033284E-6	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999801915387422	WITHOUT_CLASSIFICATION	1.980846125785132E-5	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999913405378259	WITHOUT_CLASSIFICATION	8.659462174075606E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967930553042	WITHOUT_CLASSIFICATION	3.206944695735978E-6	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999987292599332	WITHOUT_CLASSIFICATION	1.2707400668095351E-5	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999987449691841	WITHOUT_CLASSIFICATION	1.2550308159384267E-6	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999323370549	WITHOUT_CLASSIFICATION	6.766294513888569E-8	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999970143884764	WITHOUT_CLASSIFICATION	2.985611523599702E-6	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999657799854952	WITHOUT_CLASSIFICATION	3.422001450488154E-5	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.9999821093469219	WITHOUT_CLASSIFICATION	1.7890653078164993E-5	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999203598619398	WITHOUT_CLASSIFICATION	7.964013806015377E-5	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946547990874	WITHOUT_CLASSIFICATION	5.345200912509898E-6	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999801612145188	WITHOUT_CLASSIFICATION	1.98387854812159E-5	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988176571382	WITHOUT_CLASSIFICATION	1.182342861890848E-6	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909576231955	WITHOUT_CLASSIFICATION	9.042376804497017E-6	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.99993266716661	WITHOUT_CLASSIFICATION	6.733283339001291E-5	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999997848010203	WITHOUT_CLASSIFICATION	2.1519897975636368E-7	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999989197337047	WITHOUT_CLASSIFICATION	1.0802662953092942E-6	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999783627819241	WITHOUT_CLASSIFICATION	2.1637218075891807E-5	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999777179566	WITHOUT_CLASSIFICATION	2.228204340986027E-7	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999993617598748	WITHOUT_CLASSIFICATION	6.382401251159239E-7	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999968288101437	WITHOUT_CLASSIFICATION	3.171189856246334E-6	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999913256757866	WITHOUT_CLASSIFICATION	8.674324213318236E-6	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999992368361	WITHOUT_CLASSIFICATION	7.631637231863426E-10	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999510924410865	WITHOUT_CLASSIFICATION	4.8907558913478234E-5	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.999998584682648	WITHOUT_CLASSIFICATION	1.4153173519938737E-6	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.999996646052497	WITHOUT_CLASSIFICATION	3.353947502874467E-6	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.999909180880897	WITHOUT_CLASSIFICATION	9.081911910293555E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967930553042	WITHOUT_CLASSIFICATION	3.206944695735978E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999985710452374	WITHOUT_CLASSIFICATION	1.4289547626579794E-6	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9998793859726459	WITHOUT_CLASSIFICATION	1.206140273540944E-4	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999770871065	WITHOUT_CLASSIFICATION	2.291289339723742E-8	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999999365281618	WITHOUT_CLASSIFICATION	6.347183819165393E-7	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999900205268738	WITHOUT_CLASSIFICATION	9.979473126236826E-6	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999805634125838	WITHOUT_CLASSIFICATION	1.9436587416270826E-5	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.9999998202091392	WITHOUT_CLASSIFICATION	1.7979086085170565E-7	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.99993266716661	WITHOUT_CLASSIFICATION	6.733283339001291E-5	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999145795086781	WITHOUT_CLASSIFICATION	8.542049132198912E-5	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999986516538281	WITHOUT_CLASSIFICATION	1.3483461719232487E-6	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999961187469255	WITHOUT_CLASSIFICATION	3.8812530744997465E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999681491147447	WITHOUT_CLASSIFICATION	3.185088525521332E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999820377491404	WITHOUT_CLASSIFICATION	1.796225085953834E-5	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999649211528	WITHOUT_CLASSIFICATION	3.5078847194823196E-8	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967930553042	WITHOUT_CLASSIFICATION	3.206944695735978E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967930553042	WITHOUT_CLASSIFICATION	3.206944695735978E-6	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.99999954551504	WITHOUT_CLASSIFICATION	4.54484959973678E-7	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999631601677	WITHOUT_CLASSIFICATION	3.683983233601443E-8	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999997890433776	WITHOUT_CLASSIFICATION	2.1095662231757172E-7	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999893466131313	WITHOUT_CLASSIFICATION	1.0653386868709263E-5	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999910668924	WITHOUT_CLASSIFICATION	8.933107491687355E-9	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999996898261429	WITHOUT_CLASSIFICATION	3.101738570975607E-6	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999939642417	WITHOUT_CLASSIFICATION	6.0357583552914985E-9	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9999997316896795	WITHOUT_CLASSIFICATION	2.6831032048929864E-7	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.999996210145627	WITHOUT_CLASSIFICATION	3.789854372931317E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967930553042	WITHOUT_CLASSIFICATION	3.206944695735978E-6	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999991871359202	WITHOUT_CLASSIFICATION	8.128640797563382E-7	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999444283734	WITHOUT_CLASSIFICATION	5.5571626644688214E-8	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999998391098042	WITHOUT_CLASSIFICATION	1.6089019578054168E-7	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999998182191204	WITHOUT_CLASSIFICATION	1.8178087957816766E-7	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999974680441508	WITHOUT_CLASSIFICATION	2.5319558492169907E-6	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999950908171229	WITHOUT_CLASSIFICATION	4.909182877154565E-6	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999987458383951	WITHOUT_CLASSIFICATION	1.2541616048724777E-6	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9999998822670593	WITHOUT_CLASSIFICATION	1.1773294069475059E-7	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9757111060917565	WITHOUT_CLASSIFICATION	0.02428889390824352	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999996671892101	WITHOUT_CLASSIFICATION	3.3281078995095354E-7	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999999653546421	WITHOUT_CLASSIFICATION	3.4645357999608226E-8	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999985453246174	WITHOUT_CLASSIFICATION	1.4546753826309786E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999985710452374	WITHOUT_CLASSIFICATION	1.4289547626579794E-6	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9998286230413245	WITHOUT_CLASSIFICATION	1.7137695867549724E-4	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999999487902514	WITHOUT_CLASSIFICATION	5.120974850204957E-8	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999331063622215	WITHOUT_CLASSIFICATION	6.689363777840323E-5	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999986334364807	WITHOUT_CLASSIFICATION	1.3665635193207117E-6	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999912367710748	WITHOUT_CLASSIFICATION	8.76322892513881E-6	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999887160472668	WITHOUT_CLASSIFICATION	1.1283952733061806E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999985710452374	WITHOUT_CLASSIFICATION	1.4289547626579794E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999978484149223	WITHOUT_CLASSIFICATION	2.151585077706506E-6	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999444283734	WITHOUT_CLASSIFICATION	5.5571626644688214E-8	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9996895285646619	WITHOUT_CLASSIFICATION	3.104714353381829E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999991871359202	WITHOUT_CLASSIFICATION	8.128640797563382E-7	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967930553042	WITHOUT_CLASSIFICATION	3.206944695735978E-6	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999998722571675	WITHOUT_CLASSIFICATION	1.277428325314359E-7	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999277576081629	WITHOUT_CLASSIFICATION	7.224239183718224E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967930553042	WITHOUT_CLASSIFICATION	3.206944695735978E-6	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999997582097848	WITHOUT_CLASSIFICATION	2.4179021515434585E-7	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999961187469255	WITHOUT_CLASSIFICATION	3.8812530744997465E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999681491147447	WITHOUT_CLASSIFICATION	3.185088525521332E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999820377491404	WITHOUT_CLASSIFICATION	1.796225085953834E-5	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999998975862332	WITHOUT_CLASSIFICATION	1.0241376675001345E-7	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.9999974727066896	WITHOUT_CLASSIFICATION	2.527293310356943E-6	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999999670286315	WITHOUT_CLASSIFICATION	3.2971368484240546E-8	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999991871359202	WITHOUT_CLASSIFICATION	8.128640797563382E-7	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999998722571675	WITHOUT_CLASSIFICATION	1.277428325314359E-7	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967930553042	WITHOUT_CLASSIFICATION	3.206944695735978E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999985710452374	WITHOUT_CLASSIFICATION	1.4289547626579794E-6	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999649211528	WITHOUT_CLASSIFICATION	3.5078847194823196E-8	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.99999954551504	WITHOUT_CLASSIFICATION	4.54484959973678E-7	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999631601677	WITHOUT_CLASSIFICATION	3.683983233601443E-8	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999859345577	WITHOUT_CLASSIFICATION	1.4065442190613183E-8	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990521165599	WITHOUT_CLASSIFICATION	9.478834400502529E-7	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999997574834484	WITHOUT_CLASSIFICATION	2.42516551603432E-7	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999618076236	WITHOUT_CLASSIFICATION	3.8192376338215626E-8	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999999689544498	WITHOUT_CLASSIFICATION	3.104555020809513E-7	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999979309488046	WITHOUT_CLASSIFICATION	2.0690511953785766E-6	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901513754673	WITHOUT_CLASSIFICATION	9.848624532694695E-6	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999855557608404	WITHOUT_CLASSIFICATION	1.444423915959419E-5	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999998851304658	WITHOUT_CLASSIFICATION	1.1486953418928309E-7	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999995472489197	WITHOUT_CLASSIFICATION	4.5275108031025507E-7	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999689504977	WITHOUT_CLASSIFICATION	3.104950241597198E-8	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999536953345	WITHOUT_CLASSIFICATION	4.630466558268249E-8	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997215431956	WITHOUT_CLASSIFICATION	2.7845680440301164E-6	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958322950885	WITHOUT_CLASSIFICATION	4.16770491150536E-6	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998401340437	WITHOUT_CLASSIFICATION	1.5986595626794578E-7	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999536953345	WITHOUT_CLASSIFICATION	4.630466558268249E-8	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999998914514371	WITHOUT_CLASSIFICATION	1.0854856297003431E-7	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999985440602419	WITHOUT_CLASSIFICATION	1.4559397580931037E-6	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999956031020977	WITHOUT_CLASSIFICATION	4.396897902303335E-5	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989414681311	WITHOUT_CLASSIFICATION	1.058531868901774E-5	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999817175043882	WITHOUT_CLASSIFICATION	1.8282495611732144E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967930553042	WITHOUT_CLASSIFICATION	3.206944695735978E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967930553042	WITHOUT_CLASSIFICATION	3.206944695735978E-6	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.9999908229998513	WITHOUT_CLASSIFICATION	9.17700014871531E-6	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998157028781	WITHOUT_CLASSIFICATION	1.8429712183761123E-7	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993538148305	WITHOUT_CLASSIFICATION	6.461851694348892E-7	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999992368361	WITHOUT_CLASSIFICATION	7.631637231863426E-10	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999996616919392	WITHOUT_CLASSIFICATION	3.3830806086634055E-7	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999991956143566	WITHOUT_CLASSIFICATION	8.04385643538997E-7	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999998967492079	WITHOUT_CLASSIFICATION	1.0325079217967488E-7	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999998105656661	WITHOUT_CLASSIFICATION	1.8943433396315912E-7	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999999591016657	WITHOUT_CLASSIFICATION	4.0898334308317426E-8	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999935791841	WITHOUT_CLASSIFICATION	6.420815824261557E-9	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999973695747899	WITHOUT_CLASSIFICATION	2.630425210150822E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.999998197103977	WITHOUT_CLASSIFICATION	1.8028960229659298E-6	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999801736	WITHOUT_CLASSIFICATION	1.982644435650153E-11	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999920654349627	WITHOUT_CLASSIFICATION	7.934565037427282E-6	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999964717466	WITHOUT_CLASSIFICATION	3.528253233092716E-9	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999951976588832	WITHOUT_CLASSIFICATION	4.802341116795367E-6	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999984482113847	WITHOUT_CLASSIFICATION	1.551788615264703E-6	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999538564822	WITHOUT_CLASSIFICATION	4.614351774983061E-8	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999986325259299	WITHOUT_CLASSIFICATION	1.3674740699918168E-6	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992892572596	WITHOUT_CLASSIFICATION	7.107427404287247E-7	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806933288351	WITHOUT_CLASSIFICATION	1.930667116488449E-5	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999515326595	WITHOUT_CLASSIFICATION	4.846734049655087E-7	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999937432487378	WITHOUT_CLASSIFICATION	6.256751262145506E-6	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999499512056272	WITHOUT_CLASSIFICATION	5.004879437285888E-5	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99999734436857	WITHOUT_CLASSIFICATION	2.6556314298704483E-6	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991969457022	WITHOUT_CLASSIFICATION	8.030542978329467E-7	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999931732084867	WITHOUT_CLASSIFICATION	6.826791513323364E-6	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999963005311652	WITHOUT_CLASSIFICATION	3.6994688347984003E-6	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999983100957486	WITHOUT_CLASSIFICATION	1.689904251436564E-6	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999999407607588	WITHOUT_CLASSIFICATION	5.923924124237597E-8	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999936905904825	WITHOUT_CLASSIFICATION	6.309409517589949E-6	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999978879042652	WITHOUT_CLASSIFICATION	2.1120957347949E-6	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999408914303	WITHOUT_CLASSIFICATION	5.910856980646136E-8	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987753851276	WITHOUT_CLASSIFICATION	1.2246148723811323E-6	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999997592002099	WITHOUT_CLASSIFICATION	2.407997901470464E-7	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999996613541997	WITHOUT_CLASSIFICATION	3.38645800266972E-7	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999949714961114	WITHOUT_CLASSIFICATION	5.028503888656627E-6	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9999960368632013	WITHOUT_CLASSIFICATION	3.963136798683454E-6	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999946004680317	WITHOUT_CLASSIFICATION	5.399531968354965E-6	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999971482811767	WITHOUT_CLASSIFICATION	2.851718823288455E-6	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999995951425419	WITHOUT_CLASSIFICATION	4.048574581394362E-7	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999958347469527	WITHOUT_CLASSIFICATION	4.165253047229838E-6	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999999652136027	WITHOUT_CLASSIFICATION	3.4786397405823334E-8	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999455319174	WITHOUT_CLASSIFICATION	5.44680826179277E-8	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9997957315171803	WITHOUT_CLASSIFICATION	2.0426848281972115E-4	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999994943418051	WITHOUT_CLASSIFICATION	5.056581949003335E-7	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999914016708	WITHOUT_CLASSIFICATION	8.598329164355597E-9	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999623479664	WITHOUT_CLASSIFICATION	3.765203356181274E-8	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999993477405517	WITHOUT_CLASSIFICATION	6.522594482886761E-7	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999999950251112	WITHOUT_CLASSIFICATION	4.974888846013704E-9	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999933257854	WITHOUT_CLASSIFICATION	6.674214632567427E-9	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999990365158277	WITHOUT_CLASSIFICATION	9.634841723884736E-7	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999988322766	WITHOUT_CLASSIFICATION	1.1677232835981049E-9	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999999926243018	WITHOUT_CLASSIFICATION	7.37569819848462E-9	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999993422868255	WITHOUT_CLASSIFICATION	6.577131744996624E-7	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999042224389936	WITHOUT_CLASSIFICATION	9.577756100644868E-5	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999989833385464	WITHOUT_CLASSIFICATION	1.0166614535704934E-6	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999941760715686	WITHOUT_CLASSIFICATION	5.823928431333869E-6	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999732569539	WITHOUT_CLASSIFICATION	2.6743046076032855E-8	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999993771294365	WITHOUT_CLASSIFICATION	6.228705635234499E-7	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999997805447997	WITHOUT_CLASSIFICATION	2.1945520039906812E-7	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999966663523147	WITHOUT_CLASSIFICATION	3.333647685279528E-6	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999924094648144	WITHOUT_CLASSIFICATION	7.590535185565219E-6	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999996261555264	WITHOUT_CLASSIFICATION	3.738444734959728E-7	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999997725823176	WITHOUT_CLASSIFICATION	2.274176824413817E-7	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999996327085654	WITHOUT_CLASSIFICATION	3.672914347079545E-7	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999865345707527	WITHOUT_CLASSIFICATION	1.3465429247379358E-5	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999010484394203	WITHOUT_CLASSIFICATION	9.895156057974827E-5	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9979205375556875	WITHOUT_CLASSIFICATION	0.0020794624443124378	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999956865993054	WITHOUT_CLASSIFICATION	4.313400694531467E-6	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999946811140059	WITHOUT_CLASSIFICATION	5.31888599409558E-5	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.9999995860255395	WITHOUT_CLASSIFICATION	4.139744605526418E-7	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999332240761	WITHOUT_CLASSIFICATION	6.677592389225958E-8	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999956531980118	WITHOUT_CLASSIFICATION	4.3468019882995435E-6	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999989485439973	WITHOUT_CLASSIFICATION	1.0514560026693818E-6	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.9994455388709557	WITHOUT_CLASSIFICATION	5.544611290443513E-4	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.999047458956561	WITHOUT_CLASSIFICATION	9.525410434390734E-4	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999989997657135	WITHOUT_CLASSIFICATION	1.0002342865917737E-6	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9573191566838584	WITHOUT_CLASSIFICATION	0.04268084331614173	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999997681082	WITHOUT_CLASSIFICATION	2.3189169938861955E-10	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998781444455099	WITHOUT_CLASSIFICATION	1.2185555449014181E-4	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999907338996	WITHOUT_CLASSIFICATION	9.266100431295934E-9	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999960435595	WITHOUT_CLASSIFICATION	3.956440555846267E-9	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999979175227607	WITHOUT_CLASSIFICATION	2.0824772393736437E-6	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999846763216	WITHOUT_CLASSIFICATION	1.5323678481334693E-8	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999960809595465	WITHOUT_CLASSIFICATION	3.919040453391164E-6	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999872882415379	WITHOUT_CLASSIFICATION	1.2711758462116606E-5	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999968795763494	WITHOUT_CLASSIFICATION	3.12042365059124E-6	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999992318446322	WITHOUT_CLASSIFICATION	7.681553676830604E-7	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999992338774423	WITHOUT_CLASSIFICATION	7.661225576218679E-7	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999949981289	WITHOUT_CLASSIFICATION	5.001871129273315E-9	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999357754	WITHOUT_CLASSIFICATION	6.422462001036464E-11	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999996940665594	WITHOUT_CLASSIFICATION	3.059334405772635E-7	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999931720637077	WITHOUT_CLASSIFICATION	6.827936292244919E-6	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999359789216	WITHOUT_CLASSIFICATION	6.402107843878306E-8	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999993747920108	WITHOUT_CLASSIFICATION	6.252079890703852E-7	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999989350610622	WITHOUT_CLASSIFICATION	1.0649389378875083E-6	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999488863038098	WITHOUT_CLASSIFICATION	5.111369619016445E-5	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999998988068812	WITHOUT_CLASSIFICATION	1.0119311881765529E-7	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999997928039411	WITHOUT_CLASSIFICATION	2.0719605877009054E-7	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9999815942305216	WITHOUT_CLASSIFICATION	1.84057694784962E-5	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999998848856032	WITHOUT_CLASSIFICATION	1.1511439684220015E-7	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999910882271	WITHOUT_CLASSIFICATION	8.911772881708379E-9	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9992128449214872	WITHOUT_CLASSIFICATION	7.871550785128392E-4	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.9999320605703492	WITHOUT_CLASSIFICATION	6.79394296507593E-5	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999996080050114	WITHOUT_CLASSIFICATION	3.9199498862076736E-7	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9992128449214872	WITHOUT_CLASSIFICATION	7.871550785128392E-4	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999424039739	WITHOUT_CLASSIFICATION	5.759602602032522E-8	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999990513898234	WITHOUT_CLASSIFICATION	9.486101767576473E-7	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999998560810818	WITHOUT_CLASSIFICATION	1.4391891815084712E-7	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999416931506558	WITHOUT_CLASSIFICATION	5.8306849344203564E-5	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9999993754310093	WITHOUT_CLASSIFICATION	6.245689907017319E-7	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999911419483	WITHOUT_CLASSIFICATION	8.858051773058427E-9	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999928678007445	WITHOUT_CLASSIFICATION	7.1321992554942594E-6	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999999697004288	WITHOUT_CLASSIFICATION	3.0299571110196385E-8	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.999991857252358	WITHOUT_CLASSIFICATION	8.142747642042842E-6	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999972028095483	WITHOUT_CLASSIFICATION	2.797190451594521E-6	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999990431837944	WITHOUT_CLASSIFICATION	9.56816205596253E-7	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999973577027821	WITHOUT_CLASSIFICATION	2.642297217803482E-6	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999842872653	WITHOUT_CLASSIFICATION	1.571273468240648E-8	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999982435843	WITHOUT_CLASSIFICATION	1.7564156073490304E-9	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999125687585	WITHOUT_CLASSIFICATION	8.743124146548502E-8	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.999998700422353	WITHOUT_CLASSIFICATION	1.2995776470257023E-6	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999604911236469	WITHOUT_CLASSIFICATION	3.950887635306837E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999604911236469	WITHOUT_CLASSIFICATION	3.950887635306837E-5	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999994134803932	WITHOUT_CLASSIFICATION	5.865196067453854E-7	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9998885990495091	WITHOUT_CLASSIFICATION	1.1140095049090653E-4	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9999740591265222	WITHOUT_CLASSIFICATION	2.5940873477803615E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9999974253153653	WITHOUT_CLASSIFICATION	2.5746846347854156E-6	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999989647318746	WITHOUT_CLASSIFICATION	1.0352681254866727E-6	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.7168949622686439	WITHOUT_CLASSIFICATION	0.28310503773135615	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9999607329748504	WITHOUT_CLASSIFICATION	3.926702514955034E-5	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999882991369	WITHOUT_CLASSIFICATION	1.1700863098844702E-7	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9999985145219974	WITHOUT_CLASSIFICATION	1.485478002606482E-6	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998625553684974	WITHOUT_CLASSIFICATION	1.3744463150251995E-4	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.999998678987916	WITHOUT_CLASSIFICATION	1.3210120839768603E-6	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999999254422	WITHOUT_CLASSIFICATION	7.455775805902931E-11	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999481093869	WITHOUT_CLASSIFICATION	5.189061311817636E-8	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999996745160189	WITHOUT_CLASSIFICATION	3.254839811641319E-7	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999559086198	WITHOUT_CLASSIFICATION	4.409138033892243E-8	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999986325259299	WITHOUT_CLASSIFICATION	1.3674740699918168E-6	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999993413812297	WITHOUT_CLASSIFICATION	6.586187702069801E-7	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999999939471637	WITHOUT_CLASSIFICATION	6.052836296179654E-8	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999974626675634	WITHOUT_CLASSIFICATION	2.5373324366496384E-6	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999981694580223	WITHOUT_CLASSIFICATION	1.830541977728634E-6	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999983479742467	WITHOUT_CLASSIFICATION	1.652025753255889E-6	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9999994905021834	WITHOUT_CLASSIFICATION	5.094978165423695E-7	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999535638177	WITHOUT_CLASSIFICATION	4.643618237965915E-8	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999997972487034	WITHOUT_CLASSIFICATION	2.0275129677265456E-7	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999999980905694	WITHOUT_CLASSIFICATION	1.909430608122673E-8	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999504652684	WITHOUT_CLASSIFICATION	4.953473172968506E-8	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.99999999780474	WITHOUT_CLASSIFICATION	2.195259982937437E-9	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999956504820816	WITHOUT_CLASSIFICATION	4.349517918285626E-6	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999998501546914	WITHOUT_CLASSIFICATION	1.4984530863393085E-7	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9999902731309747	WITHOUT_CLASSIFICATION	9.726869025247162E-6	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999985112819508	WITHOUT_CLASSIFICATION	1.4887180491233045E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999997707039653	WITHOUT_CLASSIFICATION	2.2929603476113426E-7	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.9999879573103976	WITHOUT_CLASSIFICATION	1.2042689602359082E-5	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999993560942068	WITHOUT_CLASSIFICATION	6.439057931933454E-7	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.99999498636236	WITHOUT_CLASSIFICATION	5.01363764002455E-6	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999992840079132	WITHOUT_CLASSIFICATION	7.159920868745153E-7	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999987937664493	WITHOUT_CLASSIFICATION	1.2062335506864973E-6	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999848582103952	WITHOUT_CLASSIFICATION	1.5141789604894276E-5	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999998902337014	WITHOUT_CLASSIFICATION	1.0976629865569384E-7	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998499498438758	WITHOUT_CLASSIFICATION	1.5005015612431523E-4	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9999969463842922	WITHOUT_CLASSIFICATION	3.0536157079297667E-6	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9999999234365361	WITHOUT_CLASSIFICATION	7.656346384544898E-8	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9937713113044317	WITHOUT_CLASSIFICATION	0.006228688695568186	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999989102386833	WITHOUT_CLASSIFICATION	1.0897613167314405E-6	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999901724467318	WITHOUT_CLASSIFICATION	9.827553268112669E-6	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999998629056699	WITHOUT_CLASSIFICATION	1.3709433014686723E-7	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999821183427925	WITHOUT_CLASSIFICATION	1.788165720744893E-5	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999792386310704	WITHOUT_CLASSIFICATION	2.076136892964425E-5	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999971269972103	WITHOUT_CLASSIFICATION	2.8730027897074724E-5	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999879828401572	WITHOUT_CLASSIFICATION	1.2017159842663885E-5	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999982137453217	WITHOUT_CLASSIFICATION	1.7862546782393504E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.999998197103977	WITHOUT_CLASSIFICATION	1.8028960229659298E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.999998197103977	WITHOUT_CLASSIFICATION	1.8028960229659298E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999985002903015	WITHOUT_CLASSIFICATION	1.499709698625768E-6	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999470627093	WITHOUT_CLASSIFICATION	5.2937290662979616E-8	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9994598780576421	WITHOUT_CLASSIFICATION	5.401219423579028E-4	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997627355485463	WITHOUT_CLASSIFICATION	2.3726445145365638E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9994598780576421	WITHOUT_CLASSIFICATION	5.401219423579028E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999995452219174	WITHOUT_CLASSIFICATION	4.547780825950596E-6	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999982148755925	WITHOUT_CLASSIFICATION	1.785124407582586E-6	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.9999984135887565	WITHOUT_CLASSIFICATION	1.5864112434499517E-6	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999979687395252	WITHOUT_CLASSIFICATION	2.0312604747578555E-6	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999598593721081	WITHOUT_CLASSIFICATION	4.0140627891964054E-5	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999787490499804	WITHOUT_CLASSIFICATION	2.1250950019552977E-5	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998922480429	WITHOUT_CLASSIFICATION	1.0775195712456459E-7	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9999678190174378	WITHOUT_CLASSIFICATION	3.218098256220811E-5	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999961232806	WITHOUT_CLASSIFICATION	3.8767192968639635E-9	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999993705084402	WITHOUT_CLASSIFICATION	6.294915597080437E-7	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999996845300606	WITHOUT_CLASSIFICATION	3.1546993939047737E-7	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999999691616001	WITHOUT_CLASSIFICATION	3.0838399904421026E-7	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999987360097252	WITHOUT_CLASSIFICATION	1.2639902748558056E-6	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.998820087468055	WITHOUT_CLASSIFICATION	0.0011799125319449922	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999999096587	WITHOUT_CLASSIFICATION	9.03413552853113E-11	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999997308806304	WITHOUT_CLASSIFICATION	2.6911936957395535E-7	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.999998810548536	WITHOUT_CLASSIFICATION	1.1894514640366305E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.999998810548536	WITHOUT_CLASSIFICATION	1.1894514640366305E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999966952554363	WITHOUT_CLASSIFICATION	3.304744563696823E-6	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999998667907389	WITHOUT_CLASSIFICATION	1.3320926113079515E-7	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999992641770185	WITHOUT_CLASSIFICATION	7.358229816172291E-7	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999998841661002	WITHOUT_CLASSIFICATION	1.158338998579276E-7	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999437264842	WITHOUT_CLASSIFICATION	5.627351592972206E-8	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999993647628911	WITHOUT_CLASSIFICATION	6.35237108876362E-7	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9998641892693167	WITHOUT_CLASSIFICATION	1.3581073068324106E-4	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999999283091477	WITHOUT_CLASSIFICATION	7.169085230214949E-7	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.9999996606957227	WITHOUT_CLASSIFICATION	3.393042773768491E-7	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999978413864988	WITHOUT_CLASSIFICATION	2.1586135012434768E-6	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999994877177986	WITHOUT_CLASSIFICATION	5.122822015597347E-7	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999997891298	WITHOUT_CLASSIFICATION	2.10870140606452E-10	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999749426686	WITHOUT_CLASSIFICATION	2.505733150905612E-8	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999961885745521	WITHOUT_CLASSIFICATION	3.8114254480058213E-6	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999998664727036	WITHOUT_CLASSIFICATION	1.3352729641053113E-7	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999998429997689	WITHOUT_CLASSIFICATION	1.5700023117446487E-7	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999998851215519	WITHOUT_CLASSIFICATION	1.1487844807473347E-7	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999997207833266	WITHOUT_CLASSIFICATION	2.7921667336172175E-7	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9999989909639767	WITHOUT_CLASSIFICATION	1.0090360233257635E-6	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999953113693	WITHOUT_CLASSIFICATION	4.688630623942293E-9	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999889880147753	WITHOUT_CLASSIFICATION	1.1011985224708969E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999862177466	WITHOUT_CLASSIFICATION	1.3782253383641417E-8	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999428101022	WITHOUT_CLASSIFICATION	5.718989784600408E-8	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999980215409	WITHOUT_CLASSIFICATION	1.9784590823663167E-9	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9999991052868683	WITHOUT_CLASSIFICATION	8.947131316596937E-7	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999972529712514	WITHOUT_CLASSIFICATION	2.747028748601481E-6	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999986152580306	WITHOUT_CLASSIFICATION	1.3847419694691817E-6	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9998947143239032	WITHOUT_CLASSIFICATION	1.0528567609680538E-4	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999975330672554	WITHOUT_CLASSIFICATION	2.4669327446195913E-6	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999574451052544	WITHOUT_CLASSIFICATION	4.255489474564921E-5	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999997653947207	WITHOUT_CLASSIFICATION	2.3460527918745232E-7	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999992563853726	WITHOUT_CLASSIFICATION	7.436146275615249E-7	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996061446034914	WITHOUT_CLASSIFICATION	3.9385539650857145E-4	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999998498605049	WITHOUT_CLASSIFICATION	1.5013949498582158E-7	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999966381370786	WITHOUT_CLASSIFICATION	3.3618629214469323E-6	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999920323257	WITHOUT_CLASSIFICATION	7.967674330092537E-9	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999993699207474	WITHOUT_CLASSIFICATION	6.300792525474778E-7	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999956719761329	WITHOUT_CLASSIFICATION	4.328023867054251E-6	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999979002359302	WITHOUT_CLASSIFICATION	2.0997640697924393E-6	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999879790212599	WITHOUT_CLASSIFICATION	1.2020978740039442E-5	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999936934527803	WITHOUT_CLASSIFICATION	6.306547219610169E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983017213213	WITHOUT_CLASSIFICATION	1.6982786787271243E-6	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9999986727040817	WITHOUT_CLASSIFICATION	1.3272959183900271E-6	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.999905947530462	WITHOUT_CLASSIFICATION	9.40524695378908E-5	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999997015561882	WITHOUT_CLASSIFICATION	2.9844381180702236E-7	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9993597195117984	WITHOUT_CLASSIFICATION	6.402804882015597E-4	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9465691834677311	WITHOUT_CLASSIFICATION	0.053430816532269006	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999999998618983	WITHOUT_CLASSIFICATION	1.3810170136408888E-9	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999993610093886	WITHOUT_CLASSIFICATION	6.389906114638296E-7	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999873936594114	WITHOUT_CLASSIFICATION	1.2606340588594838E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982624048571	WITHOUT_CLASSIFICATION	1.7375951428586719E-6	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999881024236	WITHOUT_CLASSIFICATION	1.189757639884304E-8	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9998173023766335	WITHOUT_CLASSIFICATION	1.8269762336658337E-4	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999999729514559	WITHOUT_CLASSIFICATION	2.704854414760485E-8	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9999993956371072	WITHOUT_CLASSIFICATION	6.043628928847398E-7	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999978484149223	WITHOUT_CLASSIFICATION	2.151585077706506E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999978484149223	WITHOUT_CLASSIFICATION	2.151585077706506E-6	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999982744430571	WITHOUT_CLASSIFICATION	1.7255569428706191E-6	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998627532711059	WITHOUT_CLASSIFICATION	1.3724672889406999E-4	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999996375688942	WITHOUT_CLASSIFICATION	3.624311058117539E-6	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999894924819692	WITHOUT_CLASSIFICATION	1.0507518030635872E-5	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999998177186963	WITHOUT_CLASSIFICATION	1.8228130366591227E-7	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999998043854985	WITHOUT_CLASSIFICATION	1.956145014762145E-7	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999988903288128	WITHOUT_CLASSIFICATION	1.1096711870982596E-6	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999995628434537	WITHOUT_CLASSIFICATION	4.371565463165899E-7	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999996097932728	WITHOUT_CLASSIFICATION	3.902067272183208E-7	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.999999545572472	WITHOUT_CLASSIFICATION	4.544275280690896E-7	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999998993351294	WITHOUT_CLASSIFICATION	1.0066487064193399E-7	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999955214387369	WITHOUT_CLASSIFICATION	4.47856126299081E-6	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999931078107896	WITHOUT_CLASSIFICATION	6.8921892103364935E-6	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999987765811185	WITHOUT_CLASSIFICATION	1.223418881641639E-6	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999996773572694	WITHOUT_CLASSIFICATION	3.22642730607101E-7	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999773161026198	WITHOUT_CLASSIFICATION	2.26838973803441E-5	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999589344758948	WITHOUT_CLASSIFICATION	4.1065524105134245E-5	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999975571314883	WITHOUT_CLASSIFICATION	2.4428685116892186E-6	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.9999942345807606	WITHOUT_CLASSIFICATION	5.765419239453972E-6	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9998594951513601	WITHOUT_CLASSIFICATION	1.405048486399631E-4	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999705860052479	WITHOUT_CLASSIFICATION	2.9413994751990725E-5	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999992218107	WITHOUT_CLASSIFICATION	7.781892455478318E-10	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999866065525681	WITHOUT_CLASSIFICATION	1.3393447431972056E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998653803675749	WITHOUT_CLASSIFICATION	1.3461963242504654E-4	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998195651373851	WITHOUT_CLASSIFICATION	1.8043486261484095E-4	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9974047920945667	WITHOUT_CLASSIFICATION	0.0025952079054334023	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.7696721097507602	WITHOUT_CLASSIFICATION	0.23032789024923983	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999991500035581	WITHOUT_CLASSIFICATION	8.499964418936707E-7	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9985949750050888	WITHOUT_CLASSIFICATION	0.0014050249949112536	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999993098925943	WITHOUT_CLASSIFICATION	6.901074057255976E-7	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998653803675749	WITHOUT_CLASSIFICATION	1.3461963242504654E-4	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999865376458436	WITHOUT_CLASSIFICATION	1.3462354156464474E-5	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999033867819062	WITHOUT_CLASSIFICATION	9.661321809388646E-5	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.9999923531640752	WITHOUT_CLASSIFICATION	7.646835924844469E-6	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999962639204261	WITHOUT_CLASSIFICATION	3.7360795739527406E-6	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999976136075	WITHOUT_CLASSIFICATION	2.3863925494090862E-9	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999999343527591	WITHOUT_CLASSIFICATION	6.564724084897795E-8	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999997479570342	WITHOUT_CLASSIFICATION	2.5204296580547923E-6	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998986251563	WITHOUT_CLASSIFICATION	1.0137484365959901E-7	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999989515420405	WITHOUT_CLASSIFICATION	1.0484579594305808E-6	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999962639204261	WITHOUT_CLASSIFICATION	3.7360795739527406E-6	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999998537935945	WITHOUT_CLASSIFICATION	1.4620640548951505E-7	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998986251563	WITHOUT_CLASSIFICATION	1.0137484365959901E-7	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999672856361627	WITHOUT_CLASSIFICATION	3.271436383725429E-5	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999937782730318	WITHOUT_CLASSIFICATION	6.221726968090386E-6	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999858576065	WITHOUT_CLASSIFICATION	1.41423934424761E-8	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999994877177986	WITHOUT_CLASSIFICATION	5.122822015597347E-7	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999916381749	WITHOUT_CLASSIFICATION	8.361825075497977E-9	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999997565954768	WITHOUT_CLASSIFICATION	2.434045232576062E-7	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999853567941	WITHOUT_CLASSIFICATION	1.4643205764104251E-8	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9997764806000029	WITHOUT_CLASSIFICATION	2.23519399997106E-4	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999998815757815	WITHOUT_CLASSIFICATION	1.1842421862381953E-7	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9999990516804955	WITHOUT_CLASSIFICATION	9.483195045367774E-7	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999999992542582	WITHOUT_CLASSIFICATION	7.457417988327439E-9	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999145791656	WITHOUT_CLASSIFICATION	8.542083440328144E-8	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999999684744487	WITHOUT_CLASSIFICATION	3.15255513060781E-7	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999992882441278	WITHOUT_CLASSIFICATION	7.117558722158927E-7	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999438806295263	WITHOUT_CLASSIFICATION	5.6119370473721615E-5	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999976847398	WITHOUT_CLASSIFICATION	2.315260161855623E-9	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999999963006358	WITHOUT_CLASSIFICATION	3.6993642091400234E-8	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9999600363762018	WITHOUT_CLASSIFICATION	3.996362379825195E-5	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999924897326	WITHOUT_CLASSIFICATION	7.510267469537211E-9	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999987685196343	WITHOUT_CLASSIFICATION	1.231480365607448E-6	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999997377746255	WITHOUT_CLASSIFICATION	2.6222537451197005E-7	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999987121616953	WITHOUT_CLASSIFICATION	1.287838304735961E-6	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999990393296808	WITHOUT_CLASSIFICATION	9.606703191613767E-7	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999993129253997	WITHOUT_CLASSIFICATION	6.870746003024195E-6	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999886990735292	WITHOUT_CLASSIFICATION	1.130092647080441E-5	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999302006846	WITHOUT_CLASSIFICATION	6.979931541704617E-8	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999992942284853	WITHOUT_CLASSIFICATION	7.057715147132396E-7	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999992359367155	WITHOUT_CLASSIFICATION	7.640632845471377E-7	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999899204650633	WITHOUT_CLASSIFICATION	1.0079534936601813E-5	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9999962681967325	WITHOUT_CLASSIFICATION	3.7318032675186307E-6	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9999652631849274	WITHOUT_CLASSIFICATION	3.473681507265721E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999042009222	WITHOUT_CLASSIFICATION	9.579907774052964E-8	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864343517658	WITHOUT_CLASSIFICATION	1.356564823424922E-5	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999401576384085	WITHOUT_CLASSIFICATION	5.9842361591508425E-5	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.999996364714831	WITHOUT_CLASSIFICATION	3.635285169109547E-6	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999991321299619	WITHOUT_CLASSIFICATION	8.678700379854977E-7	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999991870597	WITHOUT_CLASSIFICATION	8.129402959616924E-9	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999991870597	WITHOUT_CLASSIFICATION	8.129402959616924E-9	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999995333414	WITHOUT_CLASSIFICATION	4.666585977598084E-10	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999977576969137	WITHOUT_CLASSIFICATION	2.2423030863203806E-6	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999998832229249	WITHOUT_CLASSIFICATION	1.1677707510829718E-7	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999989748321745	WITHOUT_CLASSIFICATION	1.0251678255099858E-6	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999993272121326	WITHOUT_CLASSIFICATION	6.727878672954704E-7	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.997848558709927	WITHOUT_CLASSIFICATION	0.00215144129007308	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999982648441162	WITHOUT_CLASSIFICATION	1.7351558838270454E-6	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999909524019506	WITHOUT_CLASSIFICATION	9.047598049456118E-6	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998653305319	WITHOUT_CLASSIFICATION	1.3466946816056262E-7	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999998243524542	WITHOUT_CLASSIFICATION	1.7564754580789712E-7	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999431466707545	WITHOUT_CLASSIFICATION	5.685332924550064E-4	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999884616046	WITHOUT_CLASSIFICATION	1.153839542425319E-8	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999948763957829	WITHOUT_CLASSIFICATION	5.123604217064388E-6	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999991870597	WITHOUT_CLASSIFICATION	8.129402959616924E-9	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999943072895938	WITHOUT_CLASSIFICATION	5.692710406197134E-6	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999888169227663	WITHOUT_CLASSIFICATION	1.1183077233715267E-5	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995773115805305	WITHOUT_CLASSIFICATION	4.22688419469507E-4	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999999747666692	WITHOUT_CLASSIFICATION	2.5233330769787924E-8	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999996151198179	WITHOUT_CLASSIFICATION	3.8488018202362165E-7	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999950399999958	WITHOUT_CLASSIFICATION	4.960000004207398E-6	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999965982956271	WITHOUT_CLASSIFICATION	3.4017043729463507E-6	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999999998622559	WITHOUT_CLASSIFICATION	1.3774411197968699E-9	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999989393834715	WITHOUT_CLASSIFICATION	1.0606165285275087E-6	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999999181149528	WITHOUT_CLASSIFICATION	8.188504717278311E-8	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999995085018302	WITHOUT_CLASSIFICATION	4.914981698307098E-7	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999042009222	WITHOUT_CLASSIFICATION	9.579907774052964E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999991870597	WITHOUT_CLASSIFICATION	8.129402959616924E-9	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999902606232487	WITHOUT_CLASSIFICATION	9.739376751279694E-6	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999996110000106	WITHOUT_CLASSIFICATION	3.8899998948121235E-7	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999984817936827	WITHOUT_CLASSIFICATION	1.5182063174304245E-6	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9999840892844335	WITHOUT_CLASSIFICATION	1.5910715566500217E-5	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999902035948	WITHOUT_CLASSIFICATION	9.79640526037905E-9	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999852035666591	WITHOUT_CLASSIFICATION	1.4796433340823827E-5	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971834117026	WITHOUT_CLASSIFICATION	2.8165882974032585E-6	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999998349868365	WITHOUT_CLASSIFICATION	1.6501316333651645E-7	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999999969314938	WITHOUT_CLASSIFICATION	3.0685061958994724E-8	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999811842118324	WITHOUT_CLASSIFICATION	1.8815788167709905E-5	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999935697627825	WITHOUT_CLASSIFICATION	6.430237217484705E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.999972694158607	WITHOUT_CLASSIFICATION	2.7305841392956505E-5	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999994026733	WITHOUT_CLASSIFICATION	5.97326801042017E-10	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999995347972535	WITHOUT_CLASSIFICATION	4.652027464772519E-7	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999995452219174	WITHOUT_CLASSIFICATION	4.547780825950596E-6	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999158334663	WITHOUT_CLASSIFICATION	8.416653376086697E-8	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999986364145533	WITHOUT_CLASSIFICATION	1.363585446749097E-6	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999855413672057	WITHOUT_CLASSIFICATION	1.4458632794348513E-5	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.9999995116102377	WITHOUT_CLASSIFICATION	4.883897622880403E-7	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999995880938938	WITHOUT_CLASSIFICATION	4.1190610627403924E-7	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999996741725685	WITHOUT_CLASSIFICATION	3.2582743152576145E-7	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999996741725685	WITHOUT_CLASSIFICATION	3.2582743152576145E-7	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999981179017053	WITHOUT_CLASSIFICATION	1.8820982947536578E-6	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999949046474	WITHOUT_CLASSIFICATION	5.095352583628389E-9	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999969385488072	WITHOUT_CLASSIFICATION	3.061451192788378E-6	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999793351964777	WITHOUT_CLASSIFICATION	2.0664803522309854E-5	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999860582699832	WITHOUT_CLASSIFICATION	1.3941730016741883E-5	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999931174280311	WITHOUT_CLASSIFICATION	6.882571968972398E-6	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999984601117703	WITHOUT_CLASSIFICATION	1.5398882296685646E-6	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999985950542821	WITHOUT_CLASSIFICATION	1.4049457178917891E-5	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999985950542821	WITHOUT_CLASSIFICATION	1.4049457178917891E-5	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999996079603151	WITHOUT_CLASSIFICATION	3.920396849105812E-6	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999998641625115	WITHOUT_CLASSIFICATION	1.3583748856342114E-7	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999783031418371	WITHOUT_CLASSIFICATION	2.169685816291543E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999956302584692	WITHOUT_CLASSIFICATION	4.369741530817316E-6	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999956302584692	WITHOUT_CLASSIFICATION	4.369741530817316E-6	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999956302584692	WITHOUT_CLASSIFICATION	4.369741530817316E-6	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999346824566515	WITHOUT_CLASSIFICATION	6.531754334845011E-5	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999268301212	WITHOUT_CLASSIFICATION	7.316987876702303E-8	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999537070323	WITHOUT_CLASSIFICATION	4.629296773142946E-8	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9805052368476816	WITHOUT_CLASSIFICATION	0.019494763152318396	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999783459233661	WITHOUT_CLASSIFICATION	2.165407663396276E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999991870597	WITHOUT_CLASSIFICATION	8.129402959616924E-9	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999991870597	WITHOUT_CLASSIFICATION	8.129402959616924E-9	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999899842449633	WITHOUT_CLASSIFICATION	1.0015755036635817E-5	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999999453877	WITHOUT_CLASSIFICATION	5.461239355737028E-11	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999719707440451	WITHOUT_CLASSIFICATION	2.802925595478817E-5	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999996028716309	WITHOUT_CLASSIFICATION	3.9712836903495135E-7	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999269752351	WITHOUT_CLASSIFICATION	7.302476480430467E-8	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.9996476705064286	WITHOUT_CLASSIFICATION	3.5232949357145256E-4	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999987386872451	WITHOUT_CLASSIFICATION	1.2613127550111632E-6	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9981847078733674	WITHOUT_CLASSIFICATION	0.0018152921266324927	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999985354694355	WITHOUT_CLASSIFICATION	1.4645305644174988E-6	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999865021650985	WITHOUT_CLASSIFICATION	1.349783490151421E-5	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999992186327614	WITHOUT_CLASSIFICATION	7.813672385195339E-7	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999674954788833	WITHOUT_CLASSIFICATION	3.250452111664376E-5	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999995924868352	WITHOUT_CLASSIFICATION	4.0751316480112695E-6	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999995924868352	WITHOUT_CLASSIFICATION	4.0751316480112695E-6	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999980643883845	WITHOUT_CLASSIFICATION	1.9356116154925874E-6	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999980643883845	WITHOUT_CLASSIFICATION	1.9356116154925874E-6	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.99999851569893	WITHOUT_CLASSIFICATION	1.484301070088382E-6	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999960885897552	WITHOUT_CLASSIFICATION	3.9114102448893E-6	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999960885897552	WITHOUT_CLASSIFICATION	3.9114102448893E-6	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999999062453591	WITHOUT_CLASSIFICATION	9.375464089668133E-7	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999967116074493	WITHOUT_CLASSIFICATION	3.288392550773211E-6	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999998562858871	WITHOUT_CLASSIFICATION	1.437141129899031E-7	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999996741725685	WITHOUT_CLASSIFICATION	3.2582743152576145E-7	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999997289720245	WITHOUT_CLASSIFICATION	2.7102797555283233E-7	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999967116074493	WITHOUT_CLASSIFICATION	3.288392550773211E-6	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999982037422	WITHOUT_CLASSIFICATION	1.7962576832547067E-9	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999932707608753	WITHOUT_CLASSIFICATION	6.72923912470746E-6	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999984281269665	WITHOUT_CLASSIFICATION	1.5718730335614696E-6	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999992542830993	WITHOUT_CLASSIFICATION	7.457169006948692E-7	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999999998642397	WITHOUT_CLASSIFICATION	1.3576030417102987E-9	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999998799689112	WITHOUT_CLASSIFICATION	1.2003108885216912E-7	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999995940456555	WITHOUT_CLASSIFICATION	4.059543443637591E-7	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9947138772262578	WITHOUT_CLASSIFICATION	0.005286122773742232	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9987943347181121	WITHOUT_CLASSIFICATION	0.0012056652818878875	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999986921125117	WITHOUT_CLASSIFICATION	1.307887488271558E-6	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999998975502946	WITHOUT_CLASSIFICATION	1.0244970538073399E-7	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999871655971951	WITHOUT_CLASSIFICATION	1.283440280495552E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999989424500257	WITHOUT_CLASSIFICATION	1.0575499742042157E-6	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.9999998796869255	WITHOUT_CLASSIFICATION	1.2031307451698852E-7	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9812756912798801	WITHOUT_CLASSIFICATION	0.018724308720119955	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999777920567764	WITHOUT_CLASSIFICATION	2.2207943223565787E-5	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999550235735	WITHOUT_CLASSIFICATION	4.4976426396766255E-8	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999979084839234	WITHOUT_CLASSIFICATION	2.0915160765566003E-6	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999979084839234	WITHOUT_CLASSIFICATION	2.0915160765566003E-6	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999999074040345	WITHOUT_CLASSIFICATION	9.259596546836726E-8	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999998609027186	WITHOUT_CLASSIFICATION	1.39097281246439E-7	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999999851440661	WITHOUT_CLASSIFICATION	1.4855934008265946E-8	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999996769205569	WITHOUT_CLASSIFICATION	3.2307944307416864E-7	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999996986101647	WITHOUT_CLASSIFICATION	3.013898352288401E-7	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999973372807982	WITHOUT_CLASSIFICATION	2.662719201760511E-6	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999999998035972	WITHOUT_CLASSIFICATION	1.9640280036691396E-9	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999997616882539	WITHOUT_CLASSIFICATION	2.3831174608069942E-7	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999952102015817	WITHOUT_CLASSIFICATION	4.78979841832834E-6	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999483840757	WITHOUT_CLASSIFICATION	5.161592436834139E-8	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999997174804467	WITHOUT_CLASSIFICATION	2.8251955329107846E-7	DEFECT
/	WITHOUT_CLASSIFICATION	0.999972694158607	WITHOUT_CLASSIFICATION	2.7305841392956505E-5	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999921795376	WITHOUT_CLASSIFICATION	7.820462299011058E-9	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999058576462851	WITHOUT_CLASSIFICATION	9.414235371488649E-5	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999938110822558	WITHOUT_CLASSIFICATION	6.188917744114725E-6	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999948489300857	WITHOUT_CLASSIFICATION	5.151069914262397E-6	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999897025649	WITHOUT_CLASSIFICATION	1.0297435111337487E-7	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999897025649	WITHOUT_CLASSIFICATION	1.0297435111337487E-7	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999993448667059	WITHOUT_CLASSIFICATION	6.551332941461365E-7	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999163567454971	WITHOUT_CLASSIFICATION	8.364325450286854E-5	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9981667610668203	WITHOUT_CLASSIFICATION	0.001833238933179656	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9975704930729795	WITHOUT_CLASSIFICATION	0.0024295069270204644	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9989899893220887	WITHOUT_CLASSIFICATION	0.0010100106779112115	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999554988062321	WITHOUT_CLASSIFICATION	4.4501193767973156E-5	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999999657215396	WITHOUT_CLASSIFICATION	3.427846040614241E-8	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999994941647071	WITHOUT_CLASSIFICATION	5.058352928991059E-6	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999911586891952	WITHOUT_CLASSIFICATION	8.841310804768351E-6	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999976614800337	WITHOUT_CLASSIFICATION	2.3385199663781404E-6	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999997602530049	WITHOUT_CLASSIFICATION	2.3974699509657674E-6	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999994941647071	WITHOUT_CLASSIFICATION	5.058352928991059E-6	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999974650065293	WITHOUT_CLASSIFICATION	2.534993470786771E-6	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999406174278	WITHOUT_CLASSIFICATION	5.938257215985566E-8	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999972796962111	WITHOUT_CLASSIFICATION	2.7203037887993007E-6	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.9999385711873647	WITHOUT_CLASSIFICATION	6.142881263528607E-5	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999998568524745	WITHOUT_CLASSIFICATION	1.431475253801264E-7	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999528596374	WITHOUT_CLASSIFICATION	4.7140362649489757E-8	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999988097279	WITHOUT_CLASSIFICATION	1.190272099762597E-9	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999993968830106	WITHOUT_CLASSIFICATION	6.031169893476134E-7	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999278909216	WITHOUT_CLASSIFICATION	7.210907833080821E-8	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9992429937247933	WITHOUT_CLASSIFICATION	7.570062752066807E-4	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999921341229985	WITHOUT_CLASSIFICATION	7.865877001492812E-6	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999994333225531	WITHOUT_CLASSIFICATION	5.666774469105344E-6	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999762096341	WITHOUT_CLASSIFICATION	2.3790365856133883E-8	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999999096642539	WITHOUT_CLASSIFICATION	9.033574621771803E-8	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999966497689099	WITHOUT_CLASSIFICATION	3.3502310900552143E-6	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999839982365	WITHOUT_CLASSIFICATION	1.600176346001234E-8	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999973331422	WITHOUT_CLASSIFICATION	2.6668577094506557E-9	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999215980282781	WITHOUT_CLASSIFICATION	7.84019717219282E-5	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9998140932634758	WITHOUT_CLASSIFICATION	1.8590673652423175E-4	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999995030028	WITHOUT_CLASSIFICATION	4.969972665617657E-10	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999997319462808	WITHOUT_CLASSIFICATION	2.6805371920055915E-6	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999995570924157	WITHOUT_CLASSIFICATION	4.4290758420325335E-7	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9989859906541158	WITHOUT_CLASSIFICATION	0.0010140093458842986	DEFECT
#2	WITHOUT_CLASSIFICATION	0.9999620714338904	WITHOUT_CLASSIFICATION	3.79285661095132E-5	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999919878527	WITHOUT_CLASSIFICATION	8.012147326770474E-9	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999872958403585	WITHOUT_CLASSIFICATION	1.2704159641635598E-5	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999996755545677	WITHOUT_CLASSIFICATION	3.244454322868833E-7	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999997770508261	WITHOUT_CLASSIFICATION	2.229491738164986E-7	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999998463753443	WITHOUT_CLASSIFICATION	1.5362465577915135E-7	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999997519699068	WITHOUT_CLASSIFICATION	2.4803009325003137E-7	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999923141466	WITHOUT_CLASSIFICATION	7.685853514118449E-9	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999678464954541	WITHOUT_CLASSIFICATION	3.215350454592359E-5	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999222304622164	WITHOUT_CLASSIFICATION	7.776953778365472E-5	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999993233101	WITHOUT_CLASSIFICATION	6.766899721138457E-10	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999819867904	WITHOUT_CLASSIFICATION	1.8013209552748394E-8	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999991474364356	WITHOUT_CLASSIFICATION	8.525635645172248E-7	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999998855067186	WITHOUT_CLASSIFICATION	1.1449328138453511E-7	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999980967962672	WITHOUT_CLASSIFICATION	1.9032037328736309E-6	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999999993409112	WITHOUT_CLASSIFICATION	6.590887918495762E-9	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999947127456464	WITHOUT_CLASSIFICATION	5.287254353508918E-6	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999372603295	WITHOUT_CLASSIFICATION	6.273967041238283E-8	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999977246917625	WITHOUT_CLASSIFICATION	2.275308237509395E-6	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999415253622	WITHOUT_CLASSIFICATION	5.8474637783507706E-8	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999668226208	WITHOUT_CLASSIFICATION	3.317737917862783E-8	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999905086235488	WITHOUT_CLASSIFICATION	9.49137645119499E-6	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999977662506639	WITHOUT_CLASSIFICATION	2.2337493360314822E-6	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999338905326264	WITHOUT_CLASSIFICATION	6.610946737361371E-5	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999999944123506	WITHOUT_CLASSIFICATION	5.587649388079688E-8	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999999256591098	WITHOUT_CLASSIFICATION	7.434089023360969E-8	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999917039141916	WITHOUT_CLASSIFICATION	8.29608580833888E-6	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984045392286	WITHOUT_CLASSIFICATION	1.5954607714646225E-6	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999999828907966	WITHOUT_CLASSIFICATION	1.7109203466657304E-8	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999972180237	WITHOUT_CLASSIFICATION	2.781976407383652E-9	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999725792024879	WITHOUT_CLASSIFICATION	2.7420797512094455E-4	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999927465054	WITHOUT_CLASSIFICATION	7.253494634332244E-9	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999966979180898	WITHOUT_CLASSIFICATION	3.302081910213513E-6	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999790121752407	WITHOUT_CLASSIFICATION	2.0987824759408864E-5	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999799581861831	WITHOUT_CLASSIFICATION	2.004181381683593E-5	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9999993553212613	WITHOUT_CLASSIFICATION	6.446787386691831E-7	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.99999753166105	WITHOUT_CLASSIFICATION	2.468338949994586E-6	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999980108283926	WITHOUT_CLASSIFICATION	1.9891716074368E-6	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999998183190447	WITHOUT_CLASSIFICATION	1.816809552149679E-7	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.9998863539016934	WITHOUT_CLASSIFICATION	1.1364609830652423E-4	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9749378267051308	DEFECT	0.02506217329486916	WITHOUT_CLASSIFICATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998315156012454	WITHOUT_CLASSIFICATION	1.684843987545405E-4	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999782553738644	WITHOUT_CLASSIFICATION	2.1744626135544333E-5	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984045392286	WITHOUT_CLASSIFICATION	1.5954607714646225E-6	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999996247138243	WITHOUT_CLASSIFICATION	3.7528617565685125E-7	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999987669263029	WITHOUT_CLASSIFICATION	1.233073697204847E-6	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.999996011939508	WITHOUT_CLASSIFICATION	3.988060491985432E-6	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999997200895424	WITHOUT_CLASSIFICATION	2.799104575652103E-7	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999216487123411	WITHOUT_CLASSIFICATION	7.835128765891655E-5	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998821923841067	WITHOUT_CLASSIFICATION	1.17807615893312E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999911586891952	WITHOUT_CLASSIFICATION	8.841310804768351E-6	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999997977472637	WITHOUT_CLASSIFICATION	2.0225273629647882E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999819867904	WITHOUT_CLASSIFICATION	1.8013209552748394E-8	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9938561913098354	WITHOUT_CLASSIFICATION	0.006143808690164666	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999075879277	WITHOUT_CLASSIFICATION	9.241207224439241E-8	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999911587403	WITHOUT_CLASSIFICATION	8.841259714287702E-9	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999921736757	WITHOUT_CLASSIFICATION	7.826324196857265E-9	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999998047094901	WITHOUT_CLASSIFICATION	1.9529050997646894E-7	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.999991976618783	WITHOUT_CLASSIFICATION	8.023381216919122E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999849726954613	WITHOUT_CLASSIFICATION	1.5027304538854252E-5	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999995305366786	WITHOUT_CLASSIFICATION	4.6946332149868726E-7	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.993634119483733	WITHOUT_CLASSIFICATION	0.00636588051626699	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999975130893258	WITHOUT_CLASSIFICATION	2.486910674093577E-6	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999996216448133	WITHOUT_CLASSIFICATION	3.7835518669725996E-7	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999999941933519	WITHOUT_CLASSIFICATION	5.8066481004569924E-8	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999957970103659	WITHOUT_CLASSIFICATION	4.2029896341499855E-6	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999957970103659	WITHOUT_CLASSIFICATION	4.2029896341499855E-6	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999506463856	WITHOUT_CLASSIFICATION	4.9353614402908925E-8	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999997101981218	WITHOUT_CLASSIFICATION	2.89801878229805E-7	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999984097939	WITHOUT_CLASSIFICATION	1.5902061781366621E-9	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999986902093	WITHOUT_CLASSIFICATION	1.3097906524728716E-9	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999784222336	WITHOUT_CLASSIFICATION	2.1577766447769893E-8	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999997004468772	WITHOUT_CLASSIFICATION	2.9955312279791445E-6	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999996611357457	WITHOUT_CLASSIFICATION	3.3886425430630306E-6	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999971227868387	WITHOUT_CLASSIFICATION	2.8772131612919705E-6	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999993048529059	WITHOUT_CLASSIFICATION	6.951470939899233E-7	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999967138103967	WITHOUT_CLASSIFICATION	3.286189603252009E-6	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999447229964052	WITHOUT_CLASSIFICATION	5.5277003594770545E-5	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.9999945671919946	WITHOUT_CLASSIFICATION	5.432808005338998E-6	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999939667376894	WITHOUT_CLASSIFICATION	6.033262310582505E-6	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998600785972	WITHOUT_CLASSIFICATION	1.399214028111572E-7	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998789294335891	WITHOUT_CLASSIFICATION	1.2107056641081874E-4	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999948302817039	WITHOUT_CLASSIFICATION	5.169718296136409E-6	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999998898663907	WITHOUT_CLASSIFICATION	1.1013360924448228E-7	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999947641714297	WITHOUT_CLASSIFICATION	5.23582857026686E-6	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999998179653	WITHOUT_CLASSIFICATION	1.8203476919005203E-10	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999973141777765	WITHOUT_CLASSIFICATION	2.6858222234374112E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967930553042	WITHOUT_CLASSIFICATION	3.206944695735978E-6	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999998234158434	WITHOUT_CLASSIFICATION	1.7658415661177081E-7	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9996804201174465	WITHOUT_CLASSIFICATION	3.1957988255343274E-4	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999779589854	WITHOUT_CLASSIFICATION	2.2041014468156215E-8	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999985233039983	WITHOUT_CLASSIFICATION	1.4766960016566195E-6	DEFECT
implied	WITHOUT_CLASSIFICATION	0.9999985422827712	WITHOUT_CLASSIFICATION	1.4577172287375112E-6	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999999476592254	WITHOUT_CLASSIFICATION	5.23407745818108E-8	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967930553042	WITHOUT_CLASSIFICATION	3.206944695735978E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967930553042	WITHOUT_CLASSIFICATION	3.206944695735978E-6	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999884755410736	WITHOUT_CLASSIFICATION	1.1524458926340281E-5	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999986115613237	WITHOUT_CLASSIFICATION	1.3884386762723656E-6	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999997849795979	WITHOUT_CLASSIFICATION	2.1502040208461465E-6	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999867952216349	WITHOUT_CLASSIFICATION	1.32047783650727E-5	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.999995305808124	WITHOUT_CLASSIFICATION	4.694191875965654E-6	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999989839961371	WITHOUT_CLASSIFICATION	1.0160038628948445E-6	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999998270445778	WITHOUT_CLASSIFICATION	1.7295542218005093E-7	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999995145273178	WITHOUT_CLASSIFICATION	4.854726821620825E-7	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999994496432854	WITHOUT_CLASSIFICATION	5.503567146233463E-7	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999447025054	WITHOUT_CLASSIFICATION	5.529749448393411E-8	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999943418788714	WITHOUT_CLASSIFICATION	5.65812112864423E-6	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999983024487281	WITHOUT_CLASSIFICATION	1.697551271887385E-6	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999996158243363	WITHOUT_CLASSIFICATION	3.8417566381419256E-7	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999995105020199	WITHOUT_CLASSIFICATION	4.894979801609765E-7	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892175214353	WITHOUT_CLASSIFICATION	1.0782478564574345E-5	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999832581715	WITHOUT_CLASSIFICATION	1.6741828577972028E-8	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999603309241546	WITHOUT_CLASSIFICATION	3.966907584541294E-5	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.99999750150174	WITHOUT_CLASSIFICATION	2.4984982600534418E-6	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999985566939479	WITHOUT_CLASSIFICATION	1.4433060520919443E-6	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999956031020977	WITHOUT_CLASSIFICATION	4.396897902303335E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9932915403573064	WITHOUT_CLASSIFICATION	0.006708459642693655	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998338835826	WITHOUT_CLASSIFICATION	1.6611641742755437E-7	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999453382193	WITHOUT_CLASSIFICATION	5.466178063036358E-8	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999996002133057	WITHOUT_CLASSIFICATION	3.9978669440080607E-7	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999532619725597	WITHOUT_CLASSIFICATION	4.673802744025515E-5	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999965054549	WITHOUT_CLASSIFICATION	3.494545075376828E-9	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999601662187	WITHOUT_CLASSIFICATION	3.9833781301252864E-8	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999989059193078	WITHOUT_CLASSIFICATION	1.0940806921350728E-6	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999985157394241	WITHOUT_CLASSIFICATION	1.4842605759074808E-6	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999469223374181	WITHOUT_CLASSIFICATION	5.307766258192451E-5	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999974554465303	WITHOUT_CLASSIFICATION	2.544553469702353E-6	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999994427198202	WITHOUT_CLASSIFICATION	5.572801797951736E-7	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9999947995674717	WITHOUT_CLASSIFICATION	5.200432528239813E-6	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999425800917702	WITHOUT_CLASSIFICATION	5.741990822976783E-5	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999981579568413	WITHOUT_CLASSIFICATION	1.8420431586967634E-5	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999960772154425	WITHOUT_CLASSIFICATION	3.922784557560563E-6	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999990200352201	WITHOUT_CLASSIFICATION	9.799647799171111E-7	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999408562332	WITHOUT_CLASSIFICATION	5.914376677390002E-8	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999917910539182	WITHOUT_CLASSIFICATION	8.208946081760007E-6	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999962564309202	WITHOUT_CLASSIFICATION	3.743569079762002E-6	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999998132109762	WITHOUT_CLASSIFICATION	1.867890238134582E-7	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999997482301671	WITHOUT_CLASSIFICATION	2.517698328921994E-7	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999428539021	WITHOUT_CLASSIFICATION	5.7146097928813385E-8	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999997570542788	WITHOUT_CLASSIFICATION	2.429457211188783E-7	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999428539021	WITHOUT_CLASSIFICATION	5.7146097928813385E-8	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.999997171385064	WITHOUT_CLASSIFICATION	2.8286149360003836E-6	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999990428090778	WITHOUT_CLASSIFICATION	9.571909221963105E-7	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999993141504957	WITHOUT_CLASSIFICATION	6.858495042989601E-7	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999207242638	WITHOUT_CLASSIFICATION	7.927573618795481E-8	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999993672912126	WITHOUT_CLASSIFICATION	6.327087873682995E-7	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999996020320471	WITHOUT_CLASSIFICATION	3.9796795290775747E-7	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999210494895	WITHOUT_CLASSIFICATION	7.895051042224034E-8	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999998303930367	WITHOUT_CLASSIFICATION	1.6960696327399739E-7	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999635180992952	WITHOUT_CLASSIFICATION	3.648190070483424E-5	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999997890344006	WITHOUT_CLASSIFICATION	2.1096559946602912E-7	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999825709946	WITHOUT_CLASSIFICATION	1.7429005348668915E-8	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999999671331228	WITHOUT_CLASSIFICATION	3.286687720028006E-7	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999999999105267	WITHOUT_CLASSIFICATION	8.947329956764275E-10	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999502930461411	WITHOUT_CLASSIFICATION	4.970695385887269E-5	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999952435719793	WITHOUT_CLASSIFICATION	4.756428020583577E-6	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999750342202	WITHOUT_CLASSIFICATION	2.4965779818013684E-8	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999998619245536	WITHOUT_CLASSIFICATION	1.3807544633152907E-7	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999995648360339	WITHOUT_CLASSIFICATION	4.3516396601220466E-7	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999976669824	WITHOUT_CLASSIFICATION	2.3330176140118456E-9	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999879949313	WITHOUT_CLASSIFICATION	1.200506870808808E-8	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999991538942445	WITHOUT_CLASSIFICATION	8.461057554462612E-7	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999998759745775	WITHOUT_CLASSIFICATION	1.240254224235051E-7	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9990891626543782	WITHOUT_CLASSIFICATION	9.108373456217502E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999991334853141	WITHOUT_CLASSIFICATION	8.665146858660955E-7	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999997685679961	WITHOUT_CLASSIFICATION	2.314320038934759E-7	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9988972276791314	WITHOUT_CLASSIFICATION	0.0011027723208686716	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.999898795689483	WITHOUT_CLASSIFICATION	1.0120431051690474E-4	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9999962741197777	WITHOUT_CLASSIFICATION	3.725880222442009E-6	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999914896365	WITHOUT_CLASSIFICATION	8.510363578334685E-9	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.999990771544351	WITHOUT_CLASSIFICATION	9.22845564905181E-6	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9999930417500568	WITHOUT_CLASSIFICATION	6.958249943195001E-6	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9783127510482825	WITHOUT_CLASSIFICATION	0.021687248951717458	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999196075812299	WITHOUT_CLASSIFICATION	8.039241877010453E-5	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999067309251524	WITHOUT_CLASSIFICATION	9.326907484764442E-5	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999980446543727	WITHOUT_CLASSIFICATION	1.9553456273072714E-5	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.999989829518087	WITHOUT_CLASSIFICATION	1.017048191294921E-5	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.999976744207319	WITHOUT_CLASSIFICATION	2.3255792681128842E-5	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999993752763	WITHOUT_CLASSIFICATION	6.24723701695175E-9	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.9998469091147902	WITHOUT_CLASSIFICATION	1.5309088520967925E-4	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999997941266026	WITHOUT_CLASSIFICATION	2.0587339745033872E-7	DEFECT
an association	WITHOUT_CLASSIFICATION	0.9999989893746744	WITHOUT_CLASSIFICATION	1.0106253255739575E-6	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9999698273905955	WITHOUT_CLASSIFICATION	3.0172609404557865E-5	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999331063622215	WITHOUT_CLASSIFICATION	6.689363777840323E-5	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9988972276791314	WITHOUT_CLASSIFICATION	0.0011027723208686716	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9998297262830207	WITHOUT_CLASSIFICATION	1.7027371697926781E-4	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.9999964019457517	WITHOUT_CLASSIFICATION	3.598054248371743E-6	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9996053465844512	WITHOUT_CLASSIFICATION	3.9465341554871866E-4	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999699607708786	WITHOUT_CLASSIFICATION	3.0039229121391654E-5	DEFECT
special case	WITHOUT_CLASSIFICATION	0.9999987437485843	WITHOUT_CLASSIFICATION	1.256251415704918E-6	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999987739918925	WITHOUT_CLASSIFICATION	1.22600810741447E-6	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999367363677	WITHOUT_CLASSIFICATION	6.326363233427923E-8	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.873494883888108	DEFECT	0.12650511611189189	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999998809457981	WITHOUT_CLASSIFICATION	1.1905420192599749E-7	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999016697533021	WITHOUT_CLASSIFICATION	9.833024669790492E-5	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.999994976722809	WITHOUT_CLASSIFICATION	5.023277190887568E-6	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999902780015	WITHOUT_CLASSIFICATION	9.721998477564636E-9	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999784875795954	WITHOUT_CLASSIFICATION	2.1512420404699276E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999197870620998	WITHOUT_CLASSIFICATION	8.021293790013388E-5	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999998260857115	WITHOUT_CLASSIFICATION	1.7391428849633583E-7	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999883616023	WITHOUT_CLASSIFICATION	1.163839777966877E-8	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999028140409	WITHOUT_CLASSIFICATION	9.718595905431459E-8	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999999802586155	WITHOUT_CLASSIFICATION	1.9741384508062347E-7	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.999999345866227	WITHOUT_CLASSIFICATION	6.541337731420098E-7	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9998297262830207	WITHOUT_CLASSIFICATION	1.7027371697926781E-4	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999947580635585	WITHOUT_CLASSIFICATION	5.241936441495054E-6	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9990494048788098	WITHOUT_CLASSIFICATION	9.505951211903559E-4	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999846895627447	WITHOUT_CLASSIFICATION	1.5310437255325556E-5	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999994622787832	WITHOUT_CLASSIFICATION	5.377212168466365E-7	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999848761682217	WITHOUT_CLASSIFICATION	1.5123831778230779E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998156082062402	WITHOUT_CLASSIFICATION	1.843917937598402E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998156082062402	WITHOUT_CLASSIFICATION	1.843917937598402E-4	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999956645657896	WITHOUT_CLASSIFICATION	4.3354342104677225E-6	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998156082062402	WITHOUT_CLASSIFICATION	1.843917937598402E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998156082062402	WITHOUT_CLASSIFICATION	1.843917937598402E-4	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9899878735167136	WITHOUT_CLASSIFICATION	0.01001212648328651	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999923820841703	WITHOUT_CLASSIFICATION	7.617915829739138E-6	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999999794252632	WITHOUT_CLASSIFICATION	2.0574736823213136E-8	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998666983542	WITHOUT_CLASSIFICATION	1.3330164588774508E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997655143357235	WITHOUT_CLASSIFICATION	2.344856642765656E-4	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999999947397876	WITHOUT_CLASSIFICATION	5.2602123039773874E-9	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9994546744875957	WITHOUT_CLASSIFICATION	5.453255124041916E-4	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999999171449	WITHOUT_CLASSIFICATION	8.285509805012306E-11	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999658978827984	WITHOUT_CLASSIFICATION	3.4102117201574515E-5	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999931675591807	WITHOUT_CLASSIFICATION	6.832440819389517E-6	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999996665750108	WITHOUT_CLASSIFICATION	3.3342498919458152E-6	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999410101975587	WITHOUT_CLASSIFICATION	5.89898024414981E-5	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999992843392055	WITHOUT_CLASSIFICATION	7.156607944712394E-7	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999977598161669	WITHOUT_CLASSIFICATION	2.24018383303212E-6	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999997920035322	WITHOUT_CLASSIFICATION	2.0799646783392168E-7	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9947408389977421	WITHOUT_CLASSIFICATION	0.005259161002257898	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999985002903015	WITHOUT_CLASSIFICATION	1.499709698625768E-6	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999477353308042	WITHOUT_CLASSIFICATION	5.22646691958604E-5	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999448480576645	WITHOUT_CLASSIFICATION	5.515194233557047E-5	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999956343697757	WITHOUT_CLASSIFICATION	4.365630224277495E-6	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999985270117718	WITHOUT_CLASSIFICATION	1.4729882281987722E-6	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.999995841245739	WITHOUT_CLASSIFICATION	4.158754260960634E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999985002903015	WITHOUT_CLASSIFICATION	1.499709698625768E-6	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.999898795689483	WITHOUT_CLASSIFICATION	1.0120431051690474E-4	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.9999929660460941	WITHOUT_CLASSIFICATION	7.033953905989877E-6	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999963005311652	WITHOUT_CLASSIFICATION	3.6994688347984003E-6	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999936905904825	WITHOUT_CLASSIFICATION	6.309409517589949E-6	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9999981874735999	WITHOUT_CLASSIFICATION	1.8125264000628406E-6	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999758541675164	WITHOUT_CLASSIFICATION	2.4145832483477505E-5	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9999994625098811	WITHOUT_CLASSIFICATION	5.374901188898903E-7	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9985385022501652	WITHOUT_CLASSIFICATION	0.0014614977498348634	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999993420648646	WITHOUT_CLASSIFICATION	6.579351354036541E-7	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999999992297173	WITHOUT_CLASSIFICATION	7.702826975186357E-9	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999955285421135	WITHOUT_CLASSIFICATION	4.471457886489398E-6	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999992394849536	WITHOUT_CLASSIFICATION	7.605150464290351E-7	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999991896316809	WITHOUT_CLASSIFICATION	8.10368319010264E-7	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999970492938	WITHOUT_CLASSIFICATION	2.950706136750692E-9	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998858345806197	WITHOUT_CLASSIFICATION	1.1416541938024776E-4	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999514899528	WITHOUT_CLASSIFICATION	4.8510047270918956E-8	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999822569857167	WITHOUT_CLASSIFICATION	1.7743014283324475E-5	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999799748423771	WITHOUT_CLASSIFICATION	2.0025157622979792E-5	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999991208290324	WITHOUT_CLASSIFICATION	8.79170967568106E-7	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999968186100863	WITHOUT_CLASSIFICATION	3.1813899136199242E-6	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999469319648266	WITHOUT_CLASSIFICATION	5.306803517329562E-5	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999999216244625	WITHOUT_CLASSIFICATION	7.83755375221508E-8	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999083514807	WITHOUT_CLASSIFICATION	9.16485192257203E-8	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999993420648646	WITHOUT_CLASSIFICATION	6.579351354036541E-7	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999707044674	WITHOUT_CLASSIFICATION	2.929553256032689E-8	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9999999141908132	WITHOUT_CLASSIFICATION	8.580918672542642E-8	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999990691948629	WITHOUT_CLASSIFICATION	9.308051371034049E-7	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999999315515091	WITHOUT_CLASSIFICATION	6.844849089281755E-7	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999748479955	WITHOUT_CLASSIFICATION	2.515200447685153E-8	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.999996868150494	WITHOUT_CLASSIFICATION	3.1318495060122964E-6	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9999954539495797	WITHOUT_CLASSIFICATION	4.546050420303073E-6	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9999997779424334	WITHOUT_CLASSIFICATION	2.2205756659959713E-7	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9999996552261434	WITHOUT_CLASSIFICATION	3.447738565319787E-7	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.9999726561539847	WITHOUT_CLASSIFICATION	2.7343846015420933E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999632071491	WITHOUT_CLASSIFICATION	3.679285083113951E-8	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999977610447469	WITHOUT_CLASSIFICATION	2.2389552531525496E-6	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999970328688923	WITHOUT_CLASSIFICATION	2.9671311076917394E-6	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999999303836	WITHOUT_CLASSIFICATION	6.961645468524955E-11	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999973237806377	WITHOUT_CLASSIFICATION	2.676219362431832E-6	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999875966173695	WITHOUT_CLASSIFICATION	1.2403382630582876E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999427532251	WITHOUT_CLASSIFICATION	5.7246774831099394E-8	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999632071491	WITHOUT_CLASSIFICATION	3.679285083113951E-8	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999998991618269	WITHOUT_CLASSIFICATION	1.0083817310425002E-7	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9997908946402547	WITHOUT_CLASSIFICATION	2.0910535974524353E-4	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999983728023486	WITHOUT_CLASSIFICATION	1.6271976514276027E-6	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999999272443263	WITHOUT_CLASSIFICATION	7.275567376840629E-8	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9999721340638467	WITHOUT_CLASSIFICATION	2.786593615338858E-5	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999986688967045	WITHOUT_CLASSIFICATION	1.3311032954900645E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999973237806377	WITHOUT_CLASSIFICATION	2.676219362431832E-6	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999986009878568	WITHOUT_CLASSIFICATION	1.39901214325518E-6	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927884436484	WITHOUT_CLASSIFICATION	7.211556351601204E-6	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998957900692	WITHOUT_CLASSIFICATION	1.0420993077975299E-7	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980876173714	WITHOUT_CLASSIFICATION	1.9123826285772015E-6	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989849874061	WITHOUT_CLASSIFICATION	1.0150125938541242E-6	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999033078067	WITHOUT_CLASSIFICATION	9.669219327741528E-8	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999997550626636	WITHOUT_CLASSIFICATION	2.44937336418924E-7	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999997550626636	WITHOUT_CLASSIFICATION	2.44937336418924E-7	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999855446061274	WITHOUT_CLASSIFICATION	1.4455393872679079E-5	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999990242523923	WITHOUT_CLASSIFICATION	9.757476077100034E-7	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.9999976993431673	WITHOUT_CLASSIFICATION	2.3006568327177524E-6	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9999541052279798	WITHOUT_CLASSIFICATION	4.5894772020344786E-5	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9179059560482733	WITHOUT_CLASSIFICATION	0.08209404395172663	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982971125683	WITHOUT_CLASSIFICATION	1.702887431734392E-6	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921431291957	WITHOUT_CLASSIFICATION	7.85687080425638E-6	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999863822314784	WITHOUT_CLASSIFICATION	1.3617768521649956E-5	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999994713165727	WITHOUT_CLASSIFICATION	5.286834273112319E-7	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896725667461	WITHOUT_CLASSIFICATION	1.0327433253960485E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982971125683	WITHOUT_CLASSIFICATION	1.702887431734392E-6	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921431291957	WITHOUT_CLASSIFICATION	7.85687080425638E-6	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999863822314784	WITHOUT_CLASSIFICATION	1.3617768521649956E-5	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.9999991547098033	WITHOUT_CLASSIFICATION	8.452901967186194E-7	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9999981221086263	WITHOUT_CLASSIFICATION	1.8778913737262109E-6	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999994177405783	WITHOUT_CLASSIFICATION	5.822594215634688E-7	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999997947785277	WITHOUT_CLASSIFICATION	2.0522147229597644E-6	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.999999782283351	WITHOUT_CLASSIFICATION	2.1771664896526025E-7	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.999535660056721	WITHOUT_CLASSIFICATION	4.6433994327901027E-4	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999250895376253	WITHOUT_CLASSIFICATION	7.491046237467927E-5	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999998797099268	WITHOUT_CLASSIFICATION	1.2029007322482631E-7	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9999971059532338	WITHOUT_CLASSIFICATION	2.8940467661502643E-6	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999988707655457	WITHOUT_CLASSIFICATION	1.129234454242504E-6	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.999999900449512	WITHOUT_CLASSIFICATION	9.9550487926182E-8	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.993871879110205	WITHOUT_CLASSIFICATION	0.006128120889795045	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9993801931155073	WITHOUT_CLASSIFICATION	6.198068844927654E-4	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999994478527783	WITHOUT_CLASSIFICATION	5.521472217025388E-7	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999997531184965	WITHOUT_CLASSIFICATION	2.468815033837574E-7	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999960369649399	WITHOUT_CLASSIFICATION	3.963035060041784E-6	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999996262146998	WITHOUT_CLASSIFICATION	3.7378530021368096E-7	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999809022866238	WITHOUT_CLASSIFICATION	1.9097713376157476E-5	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999980707298525	WITHOUT_CLASSIFICATION	1.929270147552594E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999957414089685	WITHOUT_CLASSIFICATION	4.258591031411823E-6	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999971253448577	WITHOUT_CLASSIFICATION	2.874655142358002E-6	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9899612805247984	WITHOUT_CLASSIFICATION	0.010038719475201562	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999998067782881	WITHOUT_CLASSIFICATION	1.932217118150997E-7	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999987556799231	WITHOUT_CLASSIFICATION	1.2443200768044955E-6	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999935908089	WITHOUT_CLASSIFICATION	6.4091911022311876E-9	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999912949152442	WITHOUT_CLASSIFICATION	8.70508475576998E-6	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817532575759	WITHOUT_CLASSIFICATION	1.8246742424149086E-5	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949563047116	WITHOUT_CLASSIFICATION	5.043695288403019E-6	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999713290998	WITHOUT_CLASSIFICATION	2.8670900223491685E-8	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961314520767	WITHOUT_CLASSIFICATION	3.868547923268181E-6	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998745517843646	WITHOUT_CLASSIFICATION	1.2544821563535968E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999359789216	WITHOUT_CLASSIFICATION	6.402107843878306E-8	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999359789216	WITHOUT_CLASSIFICATION	6.402107843878306E-8	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999999973070623	WITHOUT_CLASSIFICATION	2.6929376850411398E-8	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.999999415318473	WITHOUT_CLASSIFICATION	5.846815269939814E-7	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999980031682969	WITHOUT_CLASSIFICATION	1.9968317030105803E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.999972694158607	WITHOUT_CLASSIFICATION	2.7305841392956505E-5	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999999854124005	WITHOUT_CLASSIFICATION	1.4587599413917793E-8	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999991531502807	WITHOUT_CLASSIFICATION	8.468497194924011E-7	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9999962535357885	WITHOUT_CLASSIFICATION	3.7464642115293786E-6	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.9999999375050644	WITHOUT_CLASSIFICATION	6.249493564078643E-8	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999998848856032	WITHOUT_CLASSIFICATION	1.1511439684220015E-7	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996783217238	WITHOUT_CLASSIFICATION	3.216782761889955E-7	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991875152128	WITHOUT_CLASSIFICATION	8.1248478717168E-7	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989544551815	WITHOUT_CLASSIFICATION	1.0455448184949674E-6	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999613383472	WITHOUT_CLASSIFICATION	3.8661652801219405E-7	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999123257604	WITHOUT_CLASSIFICATION	8.7674239624409E-8	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994704636499	WITHOUT_CLASSIFICATION	5.295363500882018E-7	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998924738968	WITHOUT_CLASSIFICATION	1.075261032021612E-6	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997742459809	WITHOUT_CLASSIFICATION	2.2575401913889195E-7	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989733035465	WITHOUT_CLASSIFICATION	1.026696453435479E-6	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991313361126	WITHOUT_CLASSIFICATION	8.686638874125152E-7	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999643395909	WITHOUT_CLASSIFICATION	3.566040896830232E-8	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999998230266551	WITHOUT_CLASSIFICATION	1.7697334491744326E-7	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.982402910987767	WITHOUT_CLASSIFICATION	0.017597089012232954	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999984158799367	WITHOUT_CLASSIFICATION	1.5841200633051717E-5	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999996931096362	WITHOUT_CLASSIFICATION	3.0689036378030635E-7	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999340789418	WITHOUT_CLASSIFICATION	6.592105821978621E-8	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9999991625585429	WITHOUT_CLASSIFICATION	8.374414569780081E-7	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999999939137267	WITHOUT_CLASSIFICATION	6.086273193787955E-9	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999965437891369	WITHOUT_CLASSIFICATION	3.4562108630288243E-6	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999984158799367	WITHOUT_CLASSIFICATION	1.5841200633051717E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999984158799367	WITHOUT_CLASSIFICATION	1.5841200633051717E-5	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999951711942816	WITHOUT_CLASSIFICATION	4.828805718357728E-6	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999960437763846	WITHOUT_CLASSIFICATION	3.956223615439787E-6	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999942252855	WITHOUT_CLASSIFICATION	5.774714504101081E-8	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999994428068861	WITHOUT_CLASSIFICATION	5.571931138343844E-7	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999989424500257	WITHOUT_CLASSIFICATION	1.0575499742042157E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999957414089685	WITHOUT_CLASSIFICATION	4.258591031411823E-6	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999794106763	WITHOUT_CLASSIFICATION	2.0589323745036542E-8	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999641906118715	WITHOUT_CLASSIFICATION	3.5809388128480956E-5	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.99999895170056	WITHOUT_CLASSIFICATION	1.048299440045785E-6	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933818916641	WITHOUT_CLASSIFICATION	6.618108336019878E-6	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999991106420664	WITHOUT_CLASSIFICATION	8.893579335591786E-7	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708740925797	WITHOUT_CLASSIFICATION	2.9125907420271664E-5	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999970597004153	WITHOUT_CLASSIFICATION	2.9402995846550557E-6	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999970597004153	WITHOUT_CLASSIFICATION	2.9402995846550557E-6	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999999538899191	WITHOUT_CLASSIFICATION	4.6110080890457146E-7	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999999538899191	WITHOUT_CLASSIFICATION	4.6110080890457146E-7	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998746050504	WITHOUT_CLASSIFICATION	1.253949496011401E-6	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936929555793	WITHOUT_CLASSIFICATION	6.307044420767534E-6	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999985229106089	WITHOUT_CLASSIFICATION	1.4770893912029916E-6	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991986570769	WITHOUT_CLASSIFICATION	8.013429230429753E-7	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999879215813713	WITHOUT_CLASSIFICATION	1.207841862868473E-5	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.999587638562543	WITHOUT_CLASSIFICATION	4.1236143745701867E-4	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998851713025605	WITHOUT_CLASSIFICATION	1.1482869743951137E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911479188237	WITHOUT_CLASSIFICATION	8.852081176383982E-6	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999995704502211	WITHOUT_CLASSIFICATION	4.295497788135026E-7	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.9999999401799836	WITHOUT_CLASSIFICATION	5.982001639286892E-8	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999664496477	WITHOUT_CLASSIFICATION	3.3550352293210324E-7	DEFECT
package	WITHOUT_CLASSIFICATION	0.999998197103977	WITHOUT_CLASSIFICATION	1.8028960229659298E-6	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999992544885312	WITHOUT_CLASSIFICATION	7.455114687291737E-7	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999997033645657	WITHOUT_CLASSIFICATION	2.966354343890833E-7	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999985542582701	WITHOUT_CLASSIFICATION	1.4457417298941998E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999965251987469	WITHOUT_CLASSIFICATION	3.4748012531705416E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999965251987469	WITHOUT_CLASSIFICATION	3.4748012531705416E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999965251987469	WITHOUT_CLASSIFICATION	3.4748012531705416E-6	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999857777366	WITHOUT_CLASSIFICATION	1.422226333747247E-8	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9999621570679136	WITHOUT_CLASSIFICATION	3.784293208648735E-5	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999994882639	WITHOUT_CLASSIFICATION	5.117360931844527E-10	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999862813325614	WITHOUT_CLASSIFICATION	1.3718667438597826E-4	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997609705983	WITHOUT_CLASSIFICATION	2.3902940170024268E-6	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993038110025	WITHOUT_CLASSIFICATION	6.96188997428888E-7	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999979384425197	WITHOUT_CLASSIFICATION	2.0615574802870775E-6	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996345490801962	WITHOUT_CLASSIFICATION	3.6545091980378844E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999984627469298	WITHOUT_CLASSIFICATION	1.5372530701190838E-6	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999576897148	WITHOUT_CLASSIFICATION	4.231028510471873E-8	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999217755523	WITHOUT_CLASSIFICATION	7.822444774182835E-8	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9951491202614243	WITHOUT_CLASSIFICATION	0.004850879738575679	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999366500985167	WITHOUT_CLASSIFICATION	6.334990148323567E-5	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999982297631486	WITHOUT_CLASSIFICATION	1.7702368514454779E-6	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999996208903204	WITHOUT_CLASSIFICATION	3.791096796978837E-7	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9922600713878906	WITHOUT_CLASSIFICATION	0.007739928612109376	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999954756727	WITHOUT_CLASSIFICATION	4.524327287433408E-8	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999917170342508	WITHOUT_CLASSIFICATION	8.282965749129919E-6	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999907317464148	WITHOUT_CLASSIFICATION	9.268253585165773E-6	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999971492530081	WITHOUT_CLASSIFICATION	2.850746991934253E-6	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.999999998301077	WITHOUT_CLASSIFICATION	1.6989229235579366E-9	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999980820103409	WITHOUT_CLASSIFICATION	1.9179896590903243E-5	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999985953274153	WITHOUT_CLASSIFICATION	1.4046725847435733E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999952530271	WITHOUT_CLASSIFICATION	4.7469729523399375E-9	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999998228106838	WITHOUT_CLASSIFICATION	1.7718931626320032E-7	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999956573935856	WITHOUT_CLASSIFICATION	4.342606414394978E-6	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999878270756454	WITHOUT_CLASSIFICATION	1.217292435467929E-5	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999891926558011	WITHOUT_CLASSIFICATION	1.0807344198807363E-5	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999814027577	WITHOUT_CLASSIFICATION	1.859724231683245E-8	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999993560942068	WITHOUT_CLASSIFICATION	6.439057931933454E-7	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9998574125300776	WITHOUT_CLASSIFICATION	1.4258746992230572E-4	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999959567391674	WITHOUT_CLASSIFICATION	4.0432608325692325E-6	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.999821012633248	WITHOUT_CLASSIFICATION	1.789873667520249E-4	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999994778899703	WITHOUT_CLASSIFICATION	5.221100296755914E-7	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9996772149067622	WITHOUT_CLASSIFICATION	3.2278509323778687E-4	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999903155375456	WITHOUT_CLASSIFICATION	9.684462454404261E-6	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999975571314883	WITHOUT_CLASSIFICATION	2.4428685116892186E-6	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.999999776921311	WITHOUT_CLASSIFICATION	2.2307868889690086E-7	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999998855947134	WITHOUT_CLASSIFICATION	1.1440528661873171E-7	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.9999999186578296	WITHOUT_CLASSIFICATION	8.134217042017768E-8	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999994988446623	WITHOUT_CLASSIFICATION	5.011553376897983E-7	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999995255453277	WITHOUT_CLASSIFICATION	4.7445467236113506E-7	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9998857110963889	WITHOUT_CLASSIFICATION	1.1428890361110229E-4	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.99999882130107	WITHOUT_CLASSIFICATION	1.1786989301155162E-6	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999993967765265	WITHOUT_CLASSIFICATION	6.032234735666645E-7	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999862540530081	WITHOUT_CLASSIFICATION	1.374594699186863E-5	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.9999998066658258	WITHOUT_CLASSIFICATION	1.9333417430668215E-7	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.999998810548536	WITHOUT_CLASSIFICATION	1.1894514640366305E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999901970867061	WITHOUT_CLASSIFICATION	9.802913294006572E-6	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999999075499375	WITHOUT_CLASSIFICATION	9.245006258150606E-8	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999976708431002	WITHOUT_CLASSIFICATION	2.329156899717284E-6	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999907370379522	WITHOUT_CLASSIFICATION	9.262962047762191E-6	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999998955849723	WITHOUT_CLASSIFICATION	1.0441502770473555E-7	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9984025738304572	WITHOUT_CLASSIFICATION	0.0015974261695428965	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999976968765849	WITHOUT_CLASSIFICATION	2.3031234152039557E-6	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.9999927531867082	WITHOUT_CLASSIFICATION	7.2468132917984334E-6	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999993230816339	WITHOUT_CLASSIFICATION	6.769183661148725E-7	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999982141260092	WITHOUT_CLASSIFICATION	1.7858739908710972E-6	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999997467739914	WITHOUT_CLASSIFICATION	2.532260087086921E-7	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999991456965869	WITHOUT_CLASSIFICATION	8.543034130497177E-7	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999956368275119	WITHOUT_CLASSIFICATION	4.3631724880765465E-6	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999913966523	WITHOUT_CLASSIFICATION	8.603347722294932E-9	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999998393440321	WITHOUT_CLASSIFICATION	1.6065596795272518E-7	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999999746850524	WITHOUT_CLASSIFICATION	2.5314947599639796E-7	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999187926427	WITHOUT_CLASSIFICATION	8.120735731894955E-8	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999815821131905	WITHOUT_CLASSIFICATION	1.841788680949708E-5	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999998544136826	WITHOUT_CLASSIFICATION	1.455863175222488E-7	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998718614266	WITHOUT_CLASSIFICATION	1.281385734242646E-7	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998653803675749	WITHOUT_CLASSIFICATION	1.3461963242504654E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998653803675749	WITHOUT_CLASSIFICATION	1.3461963242504654E-4	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999999353544275	WITHOUT_CLASSIFICATION	6.464557239279061E-8	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999998664350447	WITHOUT_CLASSIFICATION	1.3356495526850427E-7	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999993803046976	WITHOUT_CLASSIFICATION	6.196953023775378E-7	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999990792497614	WITHOUT_CLASSIFICATION	9.207502387435639E-7	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999905130790611	WITHOUT_CLASSIFICATION	9.4869209390191E-6	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999996788852744	WITHOUT_CLASSIFICATION	3.2111472557216867E-7	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999987948095872	WITHOUT_CLASSIFICATION	1.2051904128284724E-6	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999996008025263	WITHOUT_CLASSIFICATION	3.9919747377963715E-7	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999519741820393	WITHOUT_CLASSIFICATION	4.802581796079324E-5	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999999507080216	WITHOUT_CLASSIFICATION	4.929197830591411E-8	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999999889757156	WITHOUT_CLASSIFICATION	1.1024284386127666E-7	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999993702686284	WITHOUT_CLASSIFICATION	6.297313715242861E-7	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.9999989040973528	WITHOUT_CLASSIFICATION	1.0959026471432656E-6	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999882335979	WITHOUT_CLASSIFICATION	1.176640210762023E-8	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999943077376856	WITHOUT_CLASSIFICATION	5.6922623144826716E-6	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999988888013719	WITHOUT_CLASSIFICATION	1.1111986280849554E-6	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999998328599483	WITHOUT_CLASSIFICATION	1.6714005173792576E-7	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998001429318882	WITHOUT_CLASSIFICATION	1.9985706811181207E-4	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999865198077575	WITHOUT_CLASSIFICATION	1.3480192242459607E-5	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999999902242639	WITHOUT_CLASSIFICATION	9.775736113692014E-9	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.9999958679965952	WITHOUT_CLASSIFICATION	4.132003404702973E-6	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999994870028301	WITHOUT_CLASSIFICATION	5.129971697586658E-7	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999809333700298	WITHOUT_CLASSIFICATION	1.9066629970305376E-5	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999410786631522	WITHOUT_CLASSIFICATION	5.892133684780119E-5	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999997055872928	WITHOUT_CLASSIFICATION	2.9441270720800042E-6	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9999913409470734	WITHOUT_CLASSIFICATION	8.659052926559927E-6	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999997320977981	WITHOUT_CLASSIFICATION	2.679022019134902E-7	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999904750774071	WITHOUT_CLASSIFICATION	9.524922592841832E-6	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999987867524345	WITHOUT_CLASSIFICATION	1.2132475655717629E-6	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999911453777	WITHOUT_CLASSIFICATION	8.854622321278058E-9	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999992440412808	WITHOUT_CLASSIFICATION	7.559587191290475E-7	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999996390233117	WITHOUT_CLASSIFICATION	3.609766883095788E-7	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999989025025583	WITHOUT_CLASSIFICATION	1.0974974416917593E-6	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9999968047849223	WITHOUT_CLASSIFICATION	3.195215077656691E-6	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999958119755556	WITHOUT_CLASSIFICATION	4.18802444426591E-6	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999958119755556	WITHOUT_CLASSIFICATION	4.18802444426591E-6	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999971427820383	WITHOUT_CLASSIFICATION	2.8572179616483336E-6	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999967262299524	WITHOUT_CLASSIFICATION	3.2737700475595434E-6	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999985148867025	WITHOUT_CLASSIFICATION	1.4851132974043388E-6	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999940080802254	WITHOUT_CLASSIFICATION	5.991919774608474E-6	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999999999988762	WITHOUT_CLASSIFICATION	1.1236631542220648E-12	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999840600437621	WITHOUT_CLASSIFICATION	1.5939956237929447E-5	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999524692018771	WITHOUT_CLASSIFICATION	4.753079812282218E-5	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999932838598715	WITHOUT_CLASSIFICATION	6.716140128504897E-6	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999979558913744	WITHOUT_CLASSIFICATION	2.044108625679193E-6	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999296756650946	WITHOUT_CLASSIFICATION	7.032433490536218E-5	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.99999939313561	WITHOUT_CLASSIFICATION	6.0686438997077E-7	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9998134417205904	WITHOUT_CLASSIFICATION	1.8655827940952324E-4	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999908051928316	WITHOUT_CLASSIFICATION	9.194807168459791E-6	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999967826472299	WITHOUT_CLASSIFICATION	3.2173527702057586E-6	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999978049264177	WITHOUT_CLASSIFICATION	2.195073582421668E-6	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999996492300189	WITHOUT_CLASSIFICATION	3.507699810170278E-7	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9993204207794443	WITHOUT_CLASSIFICATION	6.795792205557721E-4	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9993204207794443	WITHOUT_CLASSIFICATION	6.795792205557721E-4	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999804044889044	WITHOUT_CLASSIFICATION	1.9595511095730216E-5	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999868387633971	WITHOUT_CLASSIFICATION	1.316123660291147E-4	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999971467444478	WITHOUT_CLASSIFICATION	2.8532555522127014E-6	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999804746147	WITHOUT_CLASSIFICATION	1.9525385294033526E-8	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999996667808804	WITHOUT_CLASSIFICATION	3.3321911962684583E-7	DEFECT
package	WITHOUT_CLASSIFICATION	0.999998197103977	WITHOUT_CLASSIFICATION	1.8028960229659298E-6	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9985949750050888	WITHOUT_CLASSIFICATION	0.0014050249949112536	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999148696598	WITHOUT_CLASSIFICATION	8.513034031492979E-8	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999996703916387	WITHOUT_CLASSIFICATION	3.2960836123797304E-7	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999766830348	WITHOUT_CLASSIFICATION	2.3316965203007306E-7	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999996809894175	WITHOUT_CLASSIFICATION	3.190105825308803E-7	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999996809894175	WITHOUT_CLASSIFICATION	3.190105825308803E-7	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999969636293342	WITHOUT_CLASSIFICATION	3.036370665861638E-6	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999994381499099	WITHOUT_CLASSIFICATION	5.618500901434369E-7	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999995762330024	WITHOUT_CLASSIFICATION	4.2376699757224265E-7	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999995961638048	WITHOUT_CLASSIFICATION	4.038361952181333E-7	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.999999103332228	WITHOUT_CLASSIFICATION	8.966677720016572E-7	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9889943831247847	WITHOUT_CLASSIFICATION	0.011005616875215259	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999998808662596	WITHOUT_CLASSIFICATION	1.1913374037829833E-7	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999937782730318	WITHOUT_CLASSIFICATION	6.221726968090386E-6	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999977327382561	WITHOUT_CLASSIFICATION	2.2672617439519622E-6	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999998562858871	WITHOUT_CLASSIFICATION	1.437141129899031E-7	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999991870597	WITHOUT_CLASSIFICATION	8.129402959616924E-9	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999909140262085	WITHOUT_CLASSIFICATION	9.085973791402073E-6	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995773115805305	WITHOUT_CLASSIFICATION	4.22688419469507E-4	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9999840892844335	WITHOUT_CLASSIFICATION	1.5910715566500217E-5	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999864864186	WITHOUT_CLASSIFICATION	1.3513581423081494E-8	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.99999851569893	WITHOUT_CLASSIFICATION	1.484301070088382E-6	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999997849795979	WITHOUT_CLASSIFICATION	2.1502040208461465E-6	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999571346622	WITHOUT_CLASSIFICATION	4.286533778806803E-8	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999984779088762	WITHOUT_CLASSIFICATION	1.522091123887898E-6	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999996877314035	WITHOUT_CLASSIFICATION	3.1226859657432266E-7	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999929863080245	WITHOUT_CLASSIFICATION	7.0136919755155835E-6	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999858833983436	WITHOUT_CLASSIFICATION	1.4116601656462156E-5	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999997082073072	WITHOUT_CLASSIFICATION	2.9179269272531925E-7	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999999062453591	WITHOUT_CLASSIFICATION	9.375464089668133E-7	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999966890928652	WITHOUT_CLASSIFICATION	3.3109071348979703E-6	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999963639272097	WITHOUT_CLASSIFICATION	3.6360727904219427E-6	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999977176966689	WITHOUT_CLASSIFICATION	2.282303331094212E-6	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999840971911005	WITHOUT_CLASSIFICATION	1.5902808899576144E-5	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999992920168577	WITHOUT_CLASSIFICATION	7.079831423548767E-7	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999999999999734	WITHOUT_CLASSIFICATION	2.6605218666499067E-13	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999995577758646	WITHOUT_CLASSIFICATION	4.422241353512135E-7	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999897025649	WITHOUT_CLASSIFICATION	1.0297435111337487E-7	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999970489320864	WITHOUT_CLASSIFICATION	2.9510679136559334E-6	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.9999996406385375	WITHOUT_CLASSIFICATION	3.5936146253898524E-7	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9967735651722924	WITHOUT_CLASSIFICATION	0.003226434827707638	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999627817533	WITHOUT_CLASSIFICATION	3.721824671954267E-8	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999999825640594	WITHOUT_CLASSIFICATION	1.7435940568750515E-8	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999869123224151	WITHOUT_CLASSIFICATION	1.308767758497322E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999934175365597	WITHOUT_CLASSIFICATION	6.5824634403189736E-6	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999934175365597	WITHOUT_CLASSIFICATION	6.5824634403189736E-6	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999427698607	WITHOUT_CLASSIFICATION	5.7230139282628224E-8	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998368332946	WITHOUT_CLASSIFICATION	1.6316670541395165E-7	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999874589264	WITHOUT_CLASSIFICATION	1.2541073523715207E-8	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9999711488742951	WITHOUT_CLASSIFICATION	2.8851125705040915E-5	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999789433408185	WITHOUT_CLASSIFICATION	2.1056659181510666E-5	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999964422299	WITHOUT_CLASSIFICATION	3.557770081400728E-9	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999917233	WITHOUT_CLASSIFICATION	8.276706950195703E-12	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999888105125677	WITHOUT_CLASSIFICATION	1.1189487432349878E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999427698607	WITHOUT_CLASSIFICATION	5.7230139282628224E-8	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998368332946	WITHOUT_CLASSIFICATION	1.6316670541395165E-7	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999999541560986	WITHOUT_CLASSIFICATION	4.5843901401039446E-7	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999996062843645	WITHOUT_CLASSIFICATION	3.9371563549895217E-7	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999995680906236	WITHOUT_CLASSIFICATION	4.319093763388359E-7	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999781039100227	WITHOUT_CLASSIFICATION	2.1896089977194232E-5	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999994595717563	WITHOUT_CLASSIFICATION	5.404282437229913E-7	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9993669108475309	WITHOUT_CLASSIFICATION	6.330891524689906E-4	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999886438242	WITHOUT_CLASSIFICATION	1.1356175874004278E-8	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999749026475847	WITHOUT_CLASSIFICATION	2.509735241529745E-5	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999991411693431	WITHOUT_CLASSIFICATION	8.58830656821649E-7	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9806937003192223	WITHOUT_CLASSIFICATION	0.01930629968077767	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999998073986	WITHOUT_CLASSIFICATION	1.9260141041052024E-10	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9806937003192223	WITHOUT_CLASSIFICATION	0.01930629968077767	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999569809046929	WITHOUT_CLASSIFICATION	4.3019095307155115E-5	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999998893099461	WITHOUT_CLASSIFICATION	1.1069005384499188E-7	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9996611882061697	WITHOUT_CLASSIFICATION	3.3881179383031084E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999505860416	WITHOUT_CLASSIFICATION	4.9413958426184814E-8	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999770870446409	WITHOUT_CLASSIFICATION	2.291295535910356E-4	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999749026475847	WITHOUT_CLASSIFICATION	2.509735241529745E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999749026475847	WITHOUT_CLASSIFICATION	2.509735241529745E-5	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999925663712929	WITHOUT_CLASSIFICATION	7.433628707107582E-6	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999994399546865	WITHOUT_CLASSIFICATION	5.600453135478506E-7	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999994842807837	WITHOUT_CLASSIFICATION	5.1571921629242515E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999919531213894	WITHOUT_CLASSIFICATION	8.046878610659647E-6	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999947558067536	WITHOUT_CLASSIFICATION	5.2441932464155755E-6	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999965444490072	WITHOUT_CLASSIFICATION	3.455550992831897E-6	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999999127324687	WITHOUT_CLASSIFICATION	8.726753133415755E-8	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999997412501266	WITHOUT_CLASSIFICATION	2.587498733738313E-7	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999998706741334	WITHOUT_CLASSIFICATION	1.293258666116083E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999749678649743	WITHOUT_CLASSIFICATION	2.503213502574679E-5	DEFECT
columns	WITHOUT_CLASSIFICATION	0.9999982146381996	WITHOUT_CLASSIFICATION	1.7853618004734698E-6	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9999998032835632	WITHOUT_CLASSIFICATION	1.9671643678387215E-7	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999983057217301	WITHOUT_CLASSIFICATION	1.694278269884126E-6	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999947479077833	WITHOUT_CLASSIFICATION	5.2520922167099015E-6	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.9999998246250704	WITHOUT_CLASSIFICATION	1.7537492948401297E-7	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999999361996934	WITHOUT_CLASSIFICATION	6.380030657692663E-8	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999993961314498	WITHOUT_CLASSIFICATION	6.038685500744032E-7	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999989807413804	WITHOUT_CLASSIFICATION	1.0192586197071635E-6	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999994095217087	WITHOUT_CLASSIFICATION	5.90478291290862E-7	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999993270790916	WITHOUT_CLASSIFICATION	6.729209083960991E-7	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.9999904553645393	WITHOUT_CLASSIFICATION	9.544635460642997E-6	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999699386577	WITHOUT_CLASSIFICATION	3.0061342265839646E-8	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999972403281887	WITHOUT_CLASSIFICATION	2.7596718112776184E-6	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999987150032029	WITHOUT_CLASSIFICATION	1.284996797078751E-6	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999999699807027	WITHOUT_CLASSIFICATION	3.0019297351091104E-8	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999997040443072	WITHOUT_CLASSIFICATION	2.959556928030756E-7	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999783739910941	WITHOUT_CLASSIFICATION	2.1626008905899746E-5	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999997068399035	WITHOUT_CLASSIFICATION	2.931600965237512E-7	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999057673447366	WITHOUT_CLASSIFICATION	9.423265526340747E-5	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999997726672043	WITHOUT_CLASSIFICATION	2.2733279567183934E-7	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999997742313452	WITHOUT_CLASSIFICATION	2.2576865471971405E-7	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9984132143841742	WITHOUT_CLASSIFICATION	0.0015867856158257826	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999467871939848	WITHOUT_CLASSIFICATION	5.321280601513617E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999997412501266	WITHOUT_CLASSIFICATION	2.587498733738313E-7	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9995109126596546	WITHOUT_CLASSIFICATION	4.89087340345408E-4	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9999975011235787	WITHOUT_CLASSIFICATION	2.4988764213866975E-6	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9857787557339525	WITHOUT_CLASSIFICATION	0.014221244266047539	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.9999995392134237	WITHOUT_CLASSIFICATION	4.607865763666842E-7	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.999999293432331	WITHOUT_CLASSIFICATION	7.065676689492291E-7	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.9999999755105297	WITHOUT_CLASSIFICATION	2.448947034348017E-8	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999919531213894	WITHOUT_CLASSIFICATION	8.046878610659647E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999919531213894	WITHOUT_CLASSIFICATION	8.046878610659647E-6	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999999790089726	WITHOUT_CLASSIFICATION	2.0991027329689335E-8	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999998305104284	WITHOUT_CLASSIFICATION	1.694895715390335E-7	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9999914888590631	WITHOUT_CLASSIFICATION	8.511140936915098E-6	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999999609924947	WITHOUT_CLASSIFICATION	3.900750532102736E-8	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999958574880571	WITHOUT_CLASSIFICATION	4.142511942943368E-6	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9995742116945792	WITHOUT_CLASSIFICATION	4.257883054208232E-4	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9998104965704013	WITHOUT_CLASSIFICATION	1.8950342959863246E-4	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999996667265492	WITHOUT_CLASSIFICATION	3.3327345087783206E-7	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999990791523277	WITHOUT_CLASSIFICATION	9.208476723462716E-7	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999944849300433	WITHOUT_CLASSIFICATION	5.51506995676933E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999042833932	WITHOUT_CLASSIFICATION	9.571660679231956E-7	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999996694033852	WITHOUT_CLASSIFICATION	3.3059661474940976E-7	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998351690933511	WITHOUT_CLASSIFICATION	1.648309066488314E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999427698607	WITHOUT_CLASSIFICATION	5.7230139282628224E-8	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999042833932	WITHOUT_CLASSIFICATION	9.571660679231956E-7	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999989176086882	WITHOUT_CLASSIFICATION	1.0823913118254014E-6	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999991363977139	WITHOUT_CLASSIFICATION	8.63602286100549E-7	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999855794162978	WITHOUT_CLASSIFICATION	1.4420583702239696E-5	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9596661467528637	WITHOUT_CLASSIFICATION	0.040333853247136335	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998351690933511	WITHOUT_CLASSIFICATION	1.648309066488314E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999804853498084	WITHOUT_CLASSIFICATION	1.9514650191596584E-4	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999876888033803	WITHOUT_CLASSIFICATION	1.2311196619727984E-5	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999562785941	WITHOUT_CLASSIFICATION	4.372140595914389E-8	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9996649339200313	WITHOUT_CLASSIFICATION	3.3506607996865834E-4	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998882916162917	WITHOUT_CLASSIFICATION	1.1170838370836897E-4	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999998486927516	WITHOUT_CLASSIFICATION	1.513072483618023E-7	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999938199795717	WITHOUT_CLASSIFICATION	6.180020428321546E-6	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999816830483321	WITHOUT_CLASSIFICATION	1.8316951667933394E-5	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999997104906487	WITHOUT_CLASSIFICATION	2.895093512430454E-7	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999999456623978	WITHOUT_CLASSIFICATION	5.433760209683811E-8	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9965103845499784	WITHOUT_CLASSIFICATION	0.0034896154500215033	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999996807031492	WITHOUT_CLASSIFICATION	3.1929685088849607E-7	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999042833932	WITHOUT_CLASSIFICATION	9.571660679231956E-7	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999804853498084	WITHOUT_CLASSIFICATION	1.9514650191596584E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999562785941	WITHOUT_CLASSIFICATION	4.372140595914389E-8	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999918700805025	WITHOUT_CLASSIFICATION	8.129919497525466E-6	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.999995127608215	WITHOUT_CLASSIFICATION	4.872391784966158E-6	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.999999492632582	WITHOUT_CLASSIFICATION	5.073674179594107E-7	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998351690933511	WITHOUT_CLASSIFICATION	1.648309066488314E-4	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999999613459981	WITHOUT_CLASSIFICATION	3.865400192970968E-8	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999890404083097	WITHOUT_CLASSIFICATION	1.0959591690193845E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998405955265652	WITHOUT_CLASSIFICATION	1.594044734347337E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999939681782419	WITHOUT_CLASSIFICATION	6.031821758061374E-6	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999816830483321	WITHOUT_CLASSIFICATION	1.8316951667933394E-5	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999989176086882	WITHOUT_CLASSIFICATION	1.0823913118254014E-6	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.9999858116201447	WITHOUT_CLASSIFICATION	1.418837985532185E-5	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999984346784765	WITHOUT_CLASSIFICATION	1.5653215234689692E-6	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999996919184071	WITHOUT_CLASSIFICATION	3.0808159297758555E-7	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999998672812778	WITHOUT_CLASSIFICATION	1.327187222656652E-7	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999999343865306	WITHOUT_CLASSIFICATION	6.561346951985595E-8	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999999184002606	WITHOUT_CLASSIFICATION	8.159973935398662E-8	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9999898889889298	WITHOUT_CLASSIFICATION	1.0111011070219277E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999505860416	WITHOUT_CLASSIFICATION	4.9413958426184814E-8	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999697684188	WITHOUT_CLASSIFICATION	3.0231581160487006E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994538065459991	WITHOUT_CLASSIFICATION	5.461934540009563E-4	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999967299029	WITHOUT_CLASSIFICATION	3.2700969375060535E-9	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9986615656706045	WITHOUT_CLASSIFICATION	0.0013384343293955043	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999680553428165	WITHOUT_CLASSIFICATION	3.1944657183444956E-5	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.999997188022936	WITHOUT_CLASSIFICATION	2.811977064004559E-6	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999970445762254	WITHOUT_CLASSIFICATION	2.9554237746379684E-6	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9999939450948891	WITHOUT_CLASSIFICATION	6.054905110804122E-6	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999261007162	WITHOUT_CLASSIFICATION	7.389928384891832E-8	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999939681782419	WITHOUT_CLASSIFICATION	6.031821758061374E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994538065459991	WITHOUT_CLASSIFICATION	5.461934540009563E-4	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999885316188577	WITHOUT_CLASSIFICATION	1.1468381142320719E-5	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.9999928854856686	WITHOUT_CLASSIFICATION	7.114514331511625E-6	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999971147641961	WITHOUT_CLASSIFICATION	2.8852358039551413E-6	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999935375798307	WITHOUT_CLASSIFICATION	6.462420169263472E-6	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9999940548696011	WITHOUT_CLASSIFICATION	5.945130398880505E-6	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999752083768	WITHOUT_CLASSIFICATION	2.4791623153661144E-8	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999923789507766	WITHOUT_CLASSIFICATION	7.621049223341743E-6	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.9993161701640816	WITHOUT_CLASSIFICATION	6.838298359183536E-4	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999416804840685	WITHOUT_CLASSIFICATION	5.8319515931626254E-5	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9770068609196528	WITHOUT_CLASSIFICATION	0.022993139080347173	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999997426666596	WITHOUT_CLASSIFICATION	2.5733334033797555E-7	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999980713461288	WITHOUT_CLASSIFICATION	1.9286538711210926E-6	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999998467055365	WITHOUT_CLASSIFICATION	1.5329446339449682E-7	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.9999866425512358	WITHOUT_CLASSIFICATION	1.3357448764106258E-5	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999997535034979	WITHOUT_CLASSIFICATION	2.464965020496695E-7	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998910940874	WITHOUT_CLASSIFICATION	1.0890591262410168E-7	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999425520282	WITHOUT_CLASSIFICATION	5.744797181141342E-8	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999818555376	WITHOUT_CLASSIFICATION	1.8144462352031573E-8	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999999409014463	WITHOUT_CLASSIFICATION	5.909855375103946E-8	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999959292238741	WITHOUT_CLASSIFICATION	4.07077612586769E-6	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.9999786218698259	WITHOUT_CLASSIFICATION	2.137813017418057E-5	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999999945767243	WITHOUT_CLASSIFICATION	5.4232756893609504E-8	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999996815484111	WITHOUT_CLASSIFICATION	3.1845158878570097E-7	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999721157327	WITHOUT_CLASSIFICATION	2.7884267368045992E-8	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999996902777528	WITHOUT_CLASSIFICATION	3.097222471698499E-7	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9962429734218942	WITHOUT_CLASSIFICATION	0.003757026578105813	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999979192850296	WITHOUT_CLASSIFICATION	2.0807149703653818E-6	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999009623953289	WITHOUT_CLASSIFICATION	9.90376046710392E-5	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998908842878301	WITHOUT_CLASSIFICATION	1.091157121698477E-4	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8800893245015783	WITHOUT_CLASSIFICATION	0.11991067549842173	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999932610771836	WITHOUT_CLASSIFICATION	6.738922816462731E-6	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9992429937247933	WITHOUT_CLASSIFICATION	7.570062752066807E-4	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999996786604873	WITHOUT_CLASSIFICATION	3.2133951258033766E-7	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999997977472637	WITHOUT_CLASSIFICATION	2.0225273629647882E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999319363508239	WITHOUT_CLASSIFICATION	6.806364917609157E-5	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999995757474684	WITHOUT_CLASSIFICATION	4.2425253152350975E-7	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999998409853531	WITHOUT_CLASSIFICATION	1.590146469359218E-7	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999963870278947	WITHOUT_CLASSIFICATION	3.6129721053052786E-6	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999995757474684	WITHOUT_CLASSIFICATION	4.2425253152350975E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999319363508239	WITHOUT_CLASSIFICATION	6.806364917609157E-5	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999998409853531	WITHOUT_CLASSIFICATION	1.590146469359218E-7	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.9999992459804309	WITHOUT_CLASSIFICATION	7.540195691090094E-7	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999999700150133	WITHOUT_CLASSIFICATION	2.9984986629514095E-8	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999567133886663	WITHOUT_CLASSIFICATION	4.3286611333608355E-5	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.999976242364794	WITHOUT_CLASSIFICATION	2.3757635206009072E-5	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999617353759	WITHOUT_CLASSIFICATION	3.826462404528071E-8	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5773464478852525	WITHOUT_CLASSIFICATION	0.42265355211474753	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999364956324083	WITHOUT_CLASSIFICATION	6.35043675917106E-5	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999880325001584	WITHOUT_CLASSIFICATION	1.1967499841507862E-5	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999995441495	WITHOUT_CLASSIFICATION	4.5585043768937066E-10	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999762088752002	WITHOUT_CLASSIFICATION	2.3791124799705238E-5	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.9999902492701687	WITHOUT_CLASSIFICATION	9.750729831440467E-6	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999995954882425	WITHOUT_CLASSIFICATION	4.0451175765268985E-7	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998105986968717	WITHOUT_CLASSIFICATION	1.8940130312838276E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.999976242364794	WITHOUT_CLASSIFICATION	2.3757635206009072E-5	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999996877901564	WITHOUT_CLASSIFICATION	3.122098436866067E-7	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999993745366451	WITHOUT_CLASSIFICATION	6.254633548252527E-7	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999986075168275	WITHOUT_CLASSIFICATION	1.392483172568954E-6	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999639215116	WITHOUT_CLASSIFICATION	3.6078488412847184E-8	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999999332245414	WITHOUT_CLASSIFICATION	6.677545860433063E-8	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999940968504	WITHOUT_CLASSIFICATION	5.903149639229458E-9	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999949056973759	WITHOUT_CLASSIFICATION	5.094302624061486E-6	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999998194695	WITHOUT_CLASSIFICATION	1.8053060966563214E-10	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999460036100223	WITHOUT_CLASSIFICATION	5.3996389977672994E-5	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999812529964	WITHOUT_CLASSIFICATION	1.8747003692972107E-8	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999973776033	WITHOUT_CLASSIFICATION	2.6223966262678873E-9	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999973776033	WITHOUT_CLASSIFICATION	2.6223966262678873E-9	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999968598083	WITHOUT_CLASSIFICATION	3.14019160937797E-9	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999968598083	WITHOUT_CLASSIFICATION	3.14019160937797E-9	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.9999876191631165	WITHOUT_CLASSIFICATION	1.2380836883440606E-5	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999986075168275	WITHOUT_CLASSIFICATION	1.392483172568954E-6	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999999367130923	WITHOUT_CLASSIFICATION	6.328690779181083E-8	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999991664541	WITHOUT_CLASSIFICATION	8.335457795592636E-10	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999731349103	WITHOUT_CLASSIFICATION	2.686508975128707E-8	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999731349103	WITHOUT_CLASSIFICATION	2.686508975128707E-8	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999991116527425	WITHOUT_CLASSIFICATION	8.883472575048638E-7	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999999311203994	WITHOUT_CLASSIFICATION	6.887960059700961E-8	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999986937407	WITHOUT_CLASSIFICATION	1.3062592860548447E-9	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9999998429974668	WITHOUT_CLASSIFICATION	1.5700253322104243E-7	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9998836195878144	WITHOUT_CLASSIFICATION	1.1638041218560426E-4	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9986195945923371	WITHOUT_CLASSIFICATION	0.0013804054076628986	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999962132314736	WITHOUT_CLASSIFICATION	3.7867685264362028E-6	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999495478278827	WITHOUT_CLASSIFICATION	5.045217211743918E-5	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.999996776131887	WITHOUT_CLASSIFICATION	3.223868112994793E-6	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999988082857589	WITHOUT_CLASSIFICATION	1.1917142410662533E-6	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.999997858268057	WITHOUT_CLASSIFICATION	2.141731943030227E-6	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.9999989215206377	WITHOUT_CLASSIFICATION	1.078479362226365E-6	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999997769406426	WITHOUT_CLASSIFICATION	2.2305935751336865E-7	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.9999999246261115	WITHOUT_CLASSIFICATION	7.5373888456112E-8	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999999732083876	WITHOUT_CLASSIFICATION	2.6791612373999452E-8	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999998336884224	WITHOUT_CLASSIFICATION	1.6631157775227284E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996503602453	WITHOUT_CLASSIFICATION	3.4963975469763735E-6	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999991861750727	WITHOUT_CLASSIFICATION	8.138249273561371E-7	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999997012825517	WITHOUT_CLASSIFICATION	2.987174484068484E-7	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999987488637678	WITHOUT_CLASSIFICATION	1.2511362321914569E-6	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999975397361232	WITHOUT_CLASSIFICATION	2.4602638769242775E-6	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999815284408694	WITHOUT_CLASSIFICATION	1.8471559130609376E-5	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999962532650147	WITHOUT_CLASSIFICATION	3.746734985307911E-6	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999998341288405	WITHOUT_CLASSIFICATION	1.6587115954078076E-7	DEFECT
/	WITHOUT_CLASSIFICATION	0.999972694158607	WITHOUT_CLASSIFICATION	2.7305841392956505E-5	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999425350751	WITHOUT_CLASSIFICATION	5.7464924973123775E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994538065459991	WITHOUT_CLASSIFICATION	5.461934540009563E-4	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999980713461288	WITHOUT_CLASSIFICATION	1.9286538711210926E-6	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.999998637226781	WITHOUT_CLASSIFICATION	1.362773218973823E-6	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.99980884451013	WITHOUT_CLASSIFICATION	1.911554898699457E-4	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914417627991	WITHOUT_CLASSIFICATION	8.558237200937742E-6	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999819257790205	WITHOUT_CLASSIFICATION	1.8074220979525375E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999970023238545	WITHOUT_CLASSIFICATION	2.9976761455665857E-6	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999970023238545	WITHOUT_CLASSIFICATION	2.9976761455665857E-6	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999610029826989	WITHOUT_CLASSIFICATION	3.899701730110239E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9999990032697136	WITHOUT_CLASSIFICATION	9.967302863562357E-7	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999343908777705	WITHOUT_CLASSIFICATION	6.56091222295821E-5	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999343908777705	WITHOUT_CLASSIFICATION	6.56091222295821E-5	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999790121752407	WITHOUT_CLASSIFICATION	2.0987824759408864E-5	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999251230583937	WITHOUT_CLASSIFICATION	7.487694160632601E-5	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.9998958153404955	WITHOUT_CLASSIFICATION	1.0418465950439848E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999989424500257	WITHOUT_CLASSIFICATION	1.0575499742042157E-6	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.999998607883024	WITHOUT_CLASSIFICATION	1.3921169759760723E-6	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999998283844227	WITHOUT_CLASSIFICATION	1.7161557729454673E-6	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.9999991780685575	WITHOUT_CLASSIFICATION	8.21931442353327E-7	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999940211739083	WITHOUT_CLASSIFICATION	5.97882609161957E-6	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999856431161965	WITHOUT_CLASSIFICATION	1.435688380355313E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999856431161965	WITHOUT_CLASSIFICATION	1.435688380355313E-5	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999999139292638	WITHOUT_CLASSIFICATION	8.60707361920929E-7	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999996004850676	WITHOUT_CLASSIFICATION	3.995149323243432E-7	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999996004850676	WITHOUT_CLASSIFICATION	3.995149323243432E-7	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999949974103329	WITHOUT_CLASSIFICATION	5.002589667097429E-6	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999991298632662	WITHOUT_CLASSIFICATION	8.701367337316248E-7	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9977391198611104	WITHOUT_CLASSIFICATION	0.0022608801388896006	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.9999986712073063	WITHOUT_CLASSIFICATION	1.3287926936592027E-6	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999994204480747	WITHOUT_CLASSIFICATION	5.795519253016163E-7	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999656327007	WITHOUT_CLASSIFICATION	3.43672992669128E-8	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999999374019719	WITHOUT_CLASSIFICATION	6.259802813776878E-8	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999996917844778	WITHOUT_CLASSIFICATION	3.0821552221382785E-7	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999718476109	WITHOUT_CLASSIFICATION	2.815238908583783E-8	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9797721260468853	WITHOUT_CLASSIFICATION	0.020227873953114654	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999984005826487	WITHOUT_CLASSIFICATION	1.5994173513729143E-6	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999940163516133	WITHOUT_CLASSIFICATION	5.98364838658353E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986384574779	WITHOUT_CLASSIFICATION	1.361542522016837E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986384574779	WITHOUT_CLASSIFICATION	1.361542522016837E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986384574779	WITHOUT_CLASSIFICATION	1.361542522016837E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986384574779	WITHOUT_CLASSIFICATION	1.361542522016837E-6	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999995473279364	WITHOUT_CLASSIFICATION	4.526720636003372E-6	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9819889278348031	WITHOUT_CLASSIFICATION	0.018011072165196845	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999801948541672	WITHOUT_CLASSIFICATION	1.9805145832819522E-5	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9999988447610795	WITHOUT_CLASSIFICATION	1.1552389205561389E-6	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999999512120521	WITHOUT_CLASSIFICATION	4.878794794230427E-8	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9997541364850088	WITHOUT_CLASSIFICATION	2.4586351499123637E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.999998197103977	WITHOUT_CLASSIFICATION	1.8028960229659298E-6	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999995526102308	WITHOUT_CLASSIFICATION	4.4738976921637054E-7	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999959209517704	WITHOUT_CLASSIFICATION	4.0790482296543175E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.999998197103977	WITHOUT_CLASSIFICATION	1.8028960229659298E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.999998197103977	WITHOUT_CLASSIFICATION	1.8028960229659298E-6	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999999980698623	WITHOUT_CLASSIFICATION	1.930137697840162E-8	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999997110379973	WITHOUT_CLASSIFICATION	2.889620027523797E-7	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999997812050525	WITHOUT_CLASSIFICATION	2.1879494748591518E-7	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.99996721649397	WITHOUT_CLASSIFICATION	3.2783506030005856E-5	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999943345927361	WITHOUT_CLASSIFICATION	5.6654072637895005E-6	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999989635445332	WITHOUT_CLASSIFICATION	1.0364554667235455E-6	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999998022623506	WITHOUT_CLASSIFICATION	1.9773764939065339E-7	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.99996721649397	WITHOUT_CLASSIFICATION	3.2783506030005856E-5	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999944652457187	WITHOUT_CLASSIFICATION	5.534754281350059E-6	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999976624380412	WITHOUT_CLASSIFICATION	2.337561958805137E-5	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999885845603594	WITHOUT_CLASSIFICATION	1.1415439640552433E-5	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999890743730038	WITHOUT_CLASSIFICATION	1.0925626996234171E-5	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999398296601552	WITHOUT_CLASSIFICATION	6.0170339844784667E-5	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999625531526344	WITHOUT_CLASSIFICATION	3.744684736556941E-5	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999997646373034	WITHOUT_CLASSIFICATION	2.3536269661311214E-7	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999936918227816	WITHOUT_CLASSIFICATION	6.3081772183639414E-6	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999450598286	WITHOUT_CLASSIFICATION	5.494017144897831E-8	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999997738018721	WITHOUT_CLASSIFICATION	2.261981280273198E-7	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999970153619	WITHOUT_CLASSIFICATION	2.98463810188334E-8	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999997507809927	WITHOUT_CLASSIFICATION	2.492190073512919E-7	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9977853561830321	WITHOUT_CLASSIFICATION	0.002214643816967859	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999837014653453	WITHOUT_CLASSIFICATION	1.6298534654636237E-5	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999999571295043	WITHOUT_CLASSIFICATION	4.287049570986904E-7	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999488852939159	WITHOUT_CLASSIFICATION	5.1114706084213855E-5	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999697526555	WITHOUT_CLASSIFICATION	3.0247344623812876E-8	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999977776929864	WITHOUT_CLASSIFICATION	2.2223070136215577E-6	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999997040451355	WITHOUT_CLASSIFICATION	2.9595486448911686E-7	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999977776929864	WITHOUT_CLASSIFICATION	2.2223070136215577E-6	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999277335976	WITHOUT_CLASSIFICATION	7.226640237473419E-8	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999995291584224	WITHOUT_CLASSIFICATION	4.708415776487372E-7	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999993918610434	WITHOUT_CLASSIFICATION	6.081389566382885E-7	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999631740615292	WITHOUT_CLASSIFICATION	3.682593847085407E-5	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999999305397981	WITHOUT_CLASSIFICATION	6.946020198012492E-8	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999988391922091	WITHOUT_CLASSIFICATION	1.1608077909362482E-6	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999998144590766	WITHOUT_CLASSIFICATION	1.855409235304252E-7	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999697526555	WITHOUT_CLASSIFICATION	3.0247344623812876E-8	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999997040451355	WITHOUT_CLASSIFICATION	2.9595486448911686E-7	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999277335976	WITHOUT_CLASSIFICATION	7.226640237473419E-8	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999771939976	WITHOUT_CLASSIFICATION	2.280600244128865E-8	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9999782404401536	WITHOUT_CLASSIFICATION	2.175955984641828E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.999993361495333	WITHOUT_CLASSIFICATION	6.638504666920136E-6	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.999954888033609	WITHOUT_CLASSIFICATION	4.511196639106108E-5	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9999961996261242	WITHOUT_CLASSIFICATION	3.800373875846681E-6	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9997261077378397	WITHOUT_CLASSIFICATION	2.738922621603775E-4	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999949786382	WITHOUT_CLASSIFICATION	5.02136168787993E-9	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996503602453	WITHOUT_CLASSIFICATION	3.4963975469763735E-6	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999995291584224	WITHOUT_CLASSIFICATION	4.708415776487372E-7	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999986508144788	WITHOUT_CLASSIFICATION	1.349185521221435E-6	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999860583727884	WITHOUT_CLASSIFICATION	1.3941627211445232E-5	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998072430598739	WITHOUT_CLASSIFICATION	1.9275694012612236E-4	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999997877269766	WITHOUT_CLASSIFICATION	2.122730234567662E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996503602453	WITHOUT_CLASSIFICATION	3.4963975469763735E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994538065459991	WITHOUT_CLASSIFICATION	5.461934540009563E-4	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999999891109633	WITHOUT_CLASSIFICATION	1.0889036645866276E-8	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996503602453	WITHOUT_CLASSIFICATION	3.4963975469763735E-6	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999993146758	WITHOUT_CLASSIFICATION	6.853241815153365E-10	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999995105020199	WITHOUT_CLASSIFICATION	4.894979801609765E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994538065459991	WITHOUT_CLASSIFICATION	5.461934540009563E-4	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9977388835692176	WITHOUT_CLASSIFICATION	0.0022611164307824675	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999699039486	WITHOUT_CLASSIFICATION	3.009605142099382E-8	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998338835826	WITHOUT_CLASSIFICATION	1.6611641742755437E-7	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.999989140824112	WITHOUT_CLASSIFICATION	1.0859175887943503E-5	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999850950488495	WITHOUT_CLASSIFICATION	1.4904951150427547E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999991225707446	WITHOUT_CLASSIFICATION	8.774292553985778E-6	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999994959921521	WITHOUT_CLASSIFICATION	5.040078479060844E-7	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.9999962948353021	WITHOUT_CLASSIFICATION	3.7051646979529212E-6	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998653803675749	WITHOUT_CLASSIFICATION	1.3461963242504654E-4	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999971937335994	WITHOUT_CLASSIFICATION	2.8062664006643286E-6	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9977391198611104	WITHOUT_CLASSIFICATION	0.0022608801388896006	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999899726607722	WITHOUT_CLASSIFICATION	1.0027339227857954E-5	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9875225486970894	WITHOUT_CLASSIFICATION	0.012477451302910543	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999991486376086	WITHOUT_CLASSIFICATION	8.513623914744525E-7	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999603309241546	WITHOUT_CLASSIFICATION	3.966907584541294E-5	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999999364000286	WITHOUT_CLASSIFICATION	6.359997139340162E-7	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999997878269298	WITHOUT_CLASSIFICATION	2.1217307016296662E-7	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999643814135334	WITHOUT_CLASSIFICATION	3.561858646660552E-5	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999899903720519	WITHOUT_CLASSIFICATION	1.000962794800477E-5	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999870084126	WITHOUT_CLASSIFICATION	1.2991587395528423E-8	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999963047107361	WITHOUT_CLASSIFICATION	3.69528926383912E-6	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.9976950945325773	WITHOUT_CLASSIFICATION	0.0023049054674227198	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9937262411598877	WITHOUT_CLASSIFICATION	0.006273758840112217	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9978636412375238	WITHOUT_CLASSIFICATION	0.002136358762476166	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999998159085272	WITHOUT_CLASSIFICATION	1.8409147276876135E-7	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999999288813271	WITHOUT_CLASSIFICATION	7.111867289157467E-7	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999905297273599	WITHOUT_CLASSIFICATION	9.470272640209573E-6	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999986403841727	WITHOUT_CLASSIFICATION	1.3596158273735214E-6	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999954594386139	WITHOUT_CLASSIFICATION	4.540561386075297E-6	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999884250964076	WITHOUT_CLASSIFICATION	1.1574903592333728E-5	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999991474234132	WITHOUT_CLASSIFICATION	8.525765868202506E-7	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9997537875853221	WITHOUT_CLASSIFICATION	2.4621241467795446E-4	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.9987888407798757	WITHOUT_CLASSIFICATION	0.0012111592201242537	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999998132109762	WITHOUT_CLASSIFICATION	1.867890238134582E-7	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999934473480069	WITHOUT_CLASSIFICATION	6.552651993156563E-6	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.9999996199576332	WITHOUT_CLASSIFICATION	3.8004236679268103E-7	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999868449923672	WITHOUT_CLASSIFICATION	1.315500763271154E-5	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999898781611837	WITHOUT_CLASSIFICATION	1.012183881633317E-5	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9832795520449156	WITHOUT_CLASSIFICATION	0.01672044795508444	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999998169215085	WITHOUT_CLASSIFICATION	1.8307849145014322E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994538065459991	WITHOUT_CLASSIFICATION	5.461934540009563E-4	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999969526502533	WITHOUT_CLASSIFICATION	3.0473497466732127E-6	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999872958403585	WITHOUT_CLASSIFICATION	1.2704159641635598E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999872958403585	WITHOUT_CLASSIFICATION	1.2704159641635598E-5	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999996156286764	WITHOUT_CLASSIFICATION	3.843713235936642E-6	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999991225707446	WITHOUT_CLASSIFICATION	8.774292553985778E-6	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999806802756417	WITHOUT_CLASSIFICATION	1.931972435836753E-5	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999873357721	WITHOUT_CLASSIFICATION	1.26642279395638E-8	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9996037984396741	WITHOUT_CLASSIFICATION	3.9620156032597176E-4	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999896607452431	WITHOUT_CLASSIFICATION	1.0339254756823004E-5	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.9999945715074824	WITHOUT_CLASSIFICATION	5.428492517665838E-6	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9999906021298974	WITHOUT_CLASSIFICATION	9.397870102515498E-6	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999977162554406	WITHOUT_CLASSIFICATION	2.283744559340083E-6	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999736400291	WITHOUT_CLASSIFICATION	2.635997088630992E-8	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999946124730588	WITHOUT_CLASSIFICATION	5.387526941281307E-6	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999983177901783	WITHOUT_CLASSIFICATION	1.6822098216254528E-6	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998895600314	WITHOUT_CLASSIFICATION	1.1043996855100731E-7	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999528097057	WITHOUT_CLASSIFICATION	4.719029433511475E-8	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999303826012	WITHOUT_CLASSIFICATION	6.961739886534231E-8	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999980349848	WITHOUT_CLASSIFICATION	1.965015201040101E-9	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999998484271125	WITHOUT_CLASSIFICATION	1.5157288745881315E-7	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999851693536	WITHOUT_CLASSIFICATION	1.4830646457414747E-8	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999999989392362	WITHOUT_CLASSIFICATION	1.0607637973564317E-8	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999978825667918	WITHOUT_CLASSIFICATION	2.1174332081789463E-6	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999996785501595	WITHOUT_CLASSIFICATION	3.2144984048390633E-7	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999627718738475	WITHOUT_CLASSIFICATION	3.722812615253248E-5	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999995962554769	WITHOUT_CLASSIFICATION	4.03744523103425E-6	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999950287883383	WITHOUT_CLASSIFICATION	4.971211661698017E-6	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9832795520449156	WITHOUT_CLASSIFICATION	0.01672044795508444	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.999997763545296	WITHOUT_CLASSIFICATION	2.2364547039771256E-6	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9998790583160297	WITHOUT_CLASSIFICATION	1.2094168397022317E-4	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.999998391320465	WITHOUT_CLASSIFICATION	1.6086795350374276E-6	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999909970292881	WITHOUT_CLASSIFICATION	9.00297071192349E-6	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9987328491126289	WITHOUT_CLASSIFICATION	0.0012671508873710077	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999981893239238	WITHOUT_CLASSIFICATION	1.810676076161251E-6	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999973895371277	WITHOUT_CLASSIFICATION	2.610462872201084E-6	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999997306476055	WITHOUT_CLASSIFICATION	2.6935239444274043E-7	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999997245366977	WITHOUT_CLASSIFICATION	2.754633021964647E-7	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.999999966004021	WITHOUT_CLASSIFICATION	3.3995979121118596E-8	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999987503585649	WITHOUT_CLASSIFICATION	1.249641435128646E-6	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999996993884083	WITHOUT_CLASSIFICATION	3.0061159169975524E-7	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999977289390173	WITHOUT_CLASSIFICATION	2.2710609826652862E-6	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9993756118905187	WITHOUT_CLASSIFICATION	6.243881094811978E-4	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9726898086464936	WITHOUT_CLASSIFICATION	0.027310191353506392	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999874445751	WITHOUT_CLASSIFICATION	1.255542482098526E-8	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999874445751	WITHOUT_CLASSIFICATION	1.255542482098526E-8	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999799527595878	WITHOUT_CLASSIFICATION	2.004724041216126E-5	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999917737709	WITHOUT_CLASSIFICATION	8.226229050521401E-9	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9996230739132648	WITHOUT_CLASSIFICATION	3.769260867352315E-4	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9996230739132648	WITHOUT_CLASSIFICATION	3.769260867352315E-4	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999999723369029	WITHOUT_CLASSIFICATION	2.766309707518516E-8	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999410101975587	WITHOUT_CLASSIFICATION	5.89898024414981E-5	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999422898247431	WITHOUT_CLASSIFICATION	5.7710175256883246E-5	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999931599063	WITHOUT_CLASSIFICATION	6.840093709489326E-9	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999962585136616	WITHOUT_CLASSIFICATION	3.741486338535348E-6	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999896268803005	WITHOUT_CLASSIFICATION	1.0373119699533645E-5	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999995710498857	WITHOUT_CLASSIFICATION	4.289501143448294E-7	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999995710498857	WITHOUT_CLASSIFICATION	4.289501143448294E-7	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999951637392067	WITHOUT_CLASSIFICATION	4.836260793278946E-6	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999989331224984	WITHOUT_CLASSIFICATION	1.0668775015302879E-6	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999998646740643	WITHOUT_CLASSIFICATION	1.3532593575777093E-7	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999655900625127	WITHOUT_CLASSIFICATION	3.44099374872459E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999655900625127	WITHOUT_CLASSIFICATION	3.44099374872459E-5	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.9999984066682608	WITHOUT_CLASSIFICATION	1.5933317392010402E-6	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999942864484587	WITHOUT_CLASSIFICATION	5.713551541287104E-6	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9992470232329105	WITHOUT_CLASSIFICATION	7.529767670894732E-4	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999999089765068	WITHOUT_CLASSIFICATION	9.10234931451888E-8	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999874817452319	WITHOUT_CLASSIFICATION	1.2518254768008333E-5	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.999999946383264	WITHOUT_CLASSIFICATION	5.361673608048753E-8	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999946725983532	WITHOUT_CLASSIFICATION	5.327401646823679E-6	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999997861256129	WITHOUT_CLASSIFICATION	2.1387438705122419E-7	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999999947738863	WITHOUT_CLASSIFICATION	5.226113694448663E-9	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999953080040916	WITHOUT_CLASSIFICATION	4.69199590831002E-6	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999976967703	WITHOUT_CLASSIFICATION	2.3032296467953745E-9	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9998564898313987	WITHOUT_CLASSIFICATION	1.4351016860133787E-4	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999996511177855	WITHOUT_CLASSIFICATION	3.4888221445639657E-7	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9998334299354902	WITHOUT_CLASSIFICATION	1.6657006450981665E-4	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9999993739015576	WITHOUT_CLASSIFICATION	6.26098442512079E-7	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999621473116793	WITHOUT_CLASSIFICATION	3.7852688320750355E-5	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999998462299642	WITHOUT_CLASSIFICATION	1.537700358451172E-7	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999976992580997	WITHOUT_CLASSIFICATION	2.3007419003129086E-6	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999658716753906	WITHOUT_CLASSIFICATION	3.412832460927149E-5	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999556205361665	WITHOUT_CLASSIFICATION	4.437946383351936E-5	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999891278489281	WITHOUT_CLASSIFICATION	1.087215107189258E-4	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999852715218166	WITHOUT_CLASSIFICATION	1.4728478183386002E-5	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999979000230989	WITHOUT_CLASSIFICATION	2.099976901211318E-6	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999996713647309	WITHOUT_CLASSIFICATION	3.286352690987682E-6	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.9999975655505473	WITHOUT_CLASSIFICATION	2.434449452788761E-6	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9999973167406587	WITHOUT_CLASSIFICATION	2.6832593413634542E-6	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999975043095568	WITHOUT_CLASSIFICATION	2.495690443076336E-6	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999968126446546	WITHOUT_CLASSIFICATION	3.1873553454027994E-5	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999997025562	WITHOUT_CLASSIFICATION	2.9744383418060303E-10	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999997531184965	WITHOUT_CLASSIFICATION	2.468815033837574E-7	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9899612805247984	WITHOUT_CLASSIFICATION	0.010038719475201562	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999437246343	WITHOUT_CLASSIFICATION	5.627536581354551E-8	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999999872597964	WITHOUT_CLASSIFICATION	1.274020359529725E-7	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999944068370747	WITHOUT_CLASSIFICATION	5.5931629252858196E-6	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999996424973222	WITHOUT_CLASSIFICATION	3.5750267777943854E-7	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999591240693515	WITHOUT_CLASSIFICATION	4.087593064853782E-5	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9999954927852629	WITHOUT_CLASSIFICATION	4.507214737035716E-6	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999783469844	WITHOUT_CLASSIFICATION	2.165301559574455E-7	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999967281556155	WITHOUT_CLASSIFICATION	3.2718443844847995E-6	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999996679277742	WITHOUT_CLASSIFICATION	3.320722257305924E-7	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999357978290716	WITHOUT_CLASSIFICATION	6.420217092840268E-5	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9994270343872615	WITHOUT_CLASSIFICATION	5.729656127384228E-4	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.999996111810894	WITHOUT_CLASSIFICATION	3.888189105928261E-6	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.9999994491289911	WITHOUT_CLASSIFICATION	5.508710088506416E-7	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999994889155709	WITHOUT_CLASSIFICATION	5.110844290113164E-7	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999963936537799	WITHOUT_CLASSIFICATION	3.6063462201632936E-6	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.9995724547122389	WITHOUT_CLASSIFICATION	4.275452877611621E-4	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999989112448625	WITHOUT_CLASSIFICATION	1.0887551375474159E-6	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999873208752768	WITHOUT_CLASSIFICATION	1.267912472329615E-5	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999752460084	WITHOUT_CLASSIFICATION	2.4753991599306815E-8	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.999441656180675	WITHOUT_CLASSIFICATION	5.583438193249563E-4	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999998246991769	WITHOUT_CLASSIFICATION	1.7530082302329746E-7	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999996531039794	WITHOUT_CLASSIFICATION	3.468960205519852E-7	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999889067944	WITHOUT_CLASSIFICATION	1.1093205473806795E-8	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999332884784369	WITHOUT_CLASSIFICATION	6.671152156306432E-5	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999983596759108	WITHOUT_CLASSIFICATION	1.6403240891649815E-6	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9997961743024733	WITHOUT_CLASSIFICATION	2.038256975266805E-4	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999987970276047	WITHOUT_CLASSIFICATION	1.2029723951448662E-6	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998102641214697	WITHOUT_CLASSIFICATION	1.8973587853036858E-4	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999996429655353	WITHOUT_CLASSIFICATION	3.570344646684395E-7	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999856406598445	WITHOUT_CLASSIFICATION	1.4359340155544591E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999856406598445	WITHOUT_CLASSIFICATION	1.4359340155544591E-5	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999983964131	WITHOUT_CLASSIFICATION	1.6035869580391977E-9	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999990783987582	WITHOUT_CLASSIFICATION	9.216012417955681E-7	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999999459331	WITHOUT_CLASSIFICATION	5.4066834662404995E-11	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999915946403	WITHOUT_CLASSIFICATION	8.405359816301063E-9	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999702222456602	WITHOUT_CLASSIFICATION	2.977775433977511E-5	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999984313629775	WITHOUT_CLASSIFICATION	1.5686370224758207E-6	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999624012795	WITHOUT_CLASSIFICATION	3.7598720372640976E-8	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999914422084	WITHOUT_CLASSIFICATION	8.557791595126812E-9	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999947312794902	WITHOUT_CLASSIFICATION	5.26872050985228E-6	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999932185432647	WITHOUT_CLASSIFICATION	6.781456735301205E-6	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999753321349485	WITHOUT_CLASSIFICATION	2.4667865051440645E-5	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999942398326425	WITHOUT_CLASSIFICATION	5.760167357642325E-6	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999984750310766	WITHOUT_CLASSIFICATION	1.5249689233562564E-6	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.999999999779331	WITHOUT_CLASSIFICATION	2.2066911856393867E-10	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999427532251	WITHOUT_CLASSIFICATION	5.7246774831099394E-8	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999427532251	WITHOUT_CLASSIFICATION	5.7246774831099394E-8	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999997078739218	WITHOUT_CLASSIFICATION	2.9212607814771293E-7	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9994081548585916	WITHOUT_CLASSIFICATION	5.91845141408435E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999834027958	WITHOUT_CLASSIFICATION	1.6597204177159322E-8	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999651730842	WITHOUT_CLASSIFICATION	3.482691578642318E-8	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999632071491	WITHOUT_CLASSIFICATION	3.679285083113951E-8	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972994551812	WITHOUT_CLASSIFICATION	2.70054481880477E-6	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.99999997973034	WITHOUT_CLASSIFICATION	2.0269659993775684E-8	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9999951741459322	WITHOUT_CLASSIFICATION	4.825854067814147E-6	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9937168879534829	WITHOUT_CLASSIFICATION	0.006283112046517054	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999999323381	WITHOUT_CLASSIFICATION	6.766183267553333E-11	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999989079275331	WITHOUT_CLASSIFICATION	1.0920724668208653E-6	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.999999994793898	WITHOUT_CLASSIFICATION	5.20610196276684E-9	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999686547026	WITHOUT_CLASSIFICATION	3.1345297337643816E-8	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999973362719	WITHOUT_CLASSIFICATION	2.6637282161748796E-9	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999665152324	WITHOUT_CLASSIFICATION	3.348476754541405E-8	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999976492093502	WITHOUT_CLASSIFICATION	2.3507906498580324E-6	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9998793859726459	WITHOUT_CLASSIFICATION	1.206140273540944E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999997582097848	WITHOUT_CLASSIFICATION	2.4179021515434585E-7	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999956132928332	WITHOUT_CLASSIFICATION	4.386707166786289E-6	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999998722571675	WITHOUT_CLASSIFICATION	1.277428325314359E-7	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999993997837	WITHOUT_CLASSIFICATION	6.002162144940374E-10	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999822145499	WITHOUT_CLASSIFICATION	1.7785450184363733E-8	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999938793303416	WITHOUT_CLASSIFICATION	6.120669658407718E-6	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999258728166	WITHOUT_CLASSIFICATION	7.412718340597272E-8	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998400661433	WITHOUT_CLASSIFICATION	1.599338567109703E-7	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9999993026930614	WITHOUT_CLASSIFICATION	6.973069385784237E-7	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.993871879110205	WITHOUT_CLASSIFICATION	0.006128120889795045	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999898644658752	WITHOUT_CLASSIFICATION	1.0135534124822796E-5	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999918834168349	WITHOUT_CLASSIFICATION	8.116583165110189E-6	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9995453821704543	WITHOUT_CLASSIFICATION	4.546178295456946E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999999134293653	WITHOUT_CLASSIFICATION	8.657063454352225E-8	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999992210852459	WITHOUT_CLASSIFICATION	7.78914754168864E-7	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999971844668595	WITHOUT_CLASSIFICATION	2.8155331405320196E-6	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999907574970537	WITHOUT_CLASSIFICATION	9.24250294626455E-6	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999993544321	WITHOUT_CLASSIFICATION	6.455678300894504E-10	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999979881013963	WITHOUT_CLASSIFICATION	2.0118986036852677E-6	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9998666061404544	WITHOUT_CLASSIFICATION	1.3339385954563813E-4	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999704390921	WITHOUT_CLASSIFICATION	2.956090790716232E-7	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998604699909	WITHOUT_CLASSIFICATION	1.3953000909692462E-7	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999313035302	WITHOUT_CLASSIFICATION	6.869646980029E-8	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9985857057665034	WITHOUT_CLASSIFICATION	0.0014142942334966172	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999888480989513	WITHOUT_CLASSIFICATION	1.1151901048704193E-5	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9990256357649553	WITHOUT_CLASSIFICATION	9.743642350446686E-4	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9990256357649553	WITHOUT_CLASSIFICATION	9.743642350446686E-4	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.999999991938518	WITHOUT_CLASSIFICATION	8.061482019693506E-9	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999623799790626	WITHOUT_CLASSIFICATION	3.7620020937455344E-5	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999182359148617	WITHOUT_CLASSIFICATION	8.176408513816594E-5	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999517006345655	WITHOUT_CLASSIFICATION	4.8299365434507795E-5	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999947290206551	WITHOUT_CLASSIFICATION	5.270979344907563E-6	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999994656358728	WITHOUT_CLASSIFICATION	5.343641271632811E-7	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998712918405119	WITHOUT_CLASSIFICATION	1.2870815948803197E-4	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999951041476	WITHOUT_CLASSIFICATION	4.895852381902465E-9	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9954201308959033	WITHOUT_CLASSIFICATION	0.004579869104096697	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991185676259	WITHOUT_CLASSIFICATION	8.814323740627702E-7	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997906827618	WITHOUT_CLASSIFICATION	2.093172381900583E-7	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999984158799367	WITHOUT_CLASSIFICATION	1.5841200633051717E-5	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999648814450771	WITHOUT_CLASSIFICATION	3.511855492290859E-5	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999855151516	WITHOUT_CLASSIFICATION	1.448484838584308E-8	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999984509295248	WITHOUT_CLASSIFICATION	1.5490704752660614E-6	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999976956237225	WITHOUT_CLASSIFICATION	2.304376277404423E-6	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9973075171425436	WITHOUT_CLASSIFICATION	0.0026924828574563867	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999989301174504	WITHOUT_CLASSIFICATION	1.0698825495784687E-6	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999301568532	WITHOUT_CLASSIFICATION	6.984314686296556E-8	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999245103442448	WITHOUT_CLASSIFICATION	7.548965575516817E-5	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999990052738681	WITHOUT_CLASSIFICATION	9.947261318640833E-7	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9997974124678339	WITHOUT_CLASSIFICATION	2.0258753216602295E-4	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999974714980467	WITHOUT_CLASSIFICATION	2.5285019532788757E-6	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999989543229	WITHOUT_CLASSIFICATION	1.045677169326166E-9	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999995112587092	WITHOUT_CLASSIFICATION	4.887412907652808E-7	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999776051609076	WITHOUT_CLASSIFICATION	2.2394839092301195E-5	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999830590712139	WITHOUT_CLASSIFICATION	1.6940928786113452E-5	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999973881995473	WITHOUT_CLASSIFICATION	2.611800452661842E-6	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999977363189912	WITHOUT_CLASSIFICATION	2.2636810086656584E-6	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999043210557	WITHOUT_CLASSIFICATION	9.567894436260841E-8	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999190671926218	WITHOUT_CLASSIFICATION	8.093280737818714E-5	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999896811999	WITHOUT_CLASSIFICATION	1.0318800097058265E-8	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999995560175424	WITHOUT_CLASSIFICATION	4.439824575270008E-7	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999943123127	WITHOUT_CLASSIFICATION	5.687687404371774E-9	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999975130893258	WITHOUT_CLASSIFICATION	2.486910674093577E-6	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999992758967	WITHOUT_CLASSIFICATION	7.241033721280124E-10	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999991334853141	WITHOUT_CLASSIFICATION	8.665146858660955E-7	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999708018524	WITHOUT_CLASSIFICATION	2.9198147590025296E-8	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999987944101343	WITHOUT_CLASSIFICATION	1.2055898657435295E-6	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999989012804	WITHOUT_CLASSIFICATION	1.0987196023800761E-9	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999999741042366	WITHOUT_CLASSIFICATION	2.5895763415270482E-8	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998721457300553	WITHOUT_CLASSIFICATION	1.2785426994461256E-4	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999992621427503	WITHOUT_CLASSIFICATION	7.378572497872874E-7	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999225969533995	WITHOUT_CLASSIFICATION	7.740304660051134E-5	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.99999998941122	WITHOUT_CLASSIFICATION	1.0588779899164102E-8	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999999993507847	WITHOUT_CLASSIFICATION	6.492153518393872E-10	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999957569199	WITHOUT_CLASSIFICATION	4.243080139329165E-9	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.999917730459539	WITHOUT_CLASSIFICATION	8.226954046102224E-5	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.999997213204969	WITHOUT_CLASSIFICATION	2.7867950309674566E-6	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999984750310766	WITHOUT_CLASSIFICATION	1.5249689233562564E-6	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999996965786208	WITHOUT_CLASSIFICATION	3.0342137927469477E-7	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999995999292	WITHOUT_CLASSIFICATION	4.0007074121652236E-10	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999300053748693	WITHOUT_CLASSIFICATION	6.999462513071761E-5	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999821242722	WITHOUT_CLASSIFICATION	1.787572780778569E-8	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999935582516	WITHOUT_CLASSIFICATION	6.441748341526685E-9	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999500727622229	WITHOUT_CLASSIFICATION	4.9927237776957E-5	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9998307533581817	WITHOUT_CLASSIFICATION	1.6924664181833392E-4	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9998707490848192	WITHOUT_CLASSIFICATION	1.292509151807447E-4	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999664496477	WITHOUT_CLASSIFICATION	3.3550352293210324E-7	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9998271584095473	WITHOUT_CLASSIFICATION	1.7284159045284048E-4	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999992628103356	WITHOUT_CLASSIFICATION	7.371896644778529E-7	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999852886230832	WITHOUT_CLASSIFICATION	1.471137691668039E-5	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999994622787832	WITHOUT_CLASSIFICATION	5.377212168466365E-7	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999959239720883	WITHOUT_CLASSIFICATION	4.076027911645481E-6	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999747669244694	WITHOUT_CLASSIFICATION	2.5233075530647614E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999588401319	WITHOUT_CLASSIFICATION	4.115986811256266E-8	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999916641337497	WITHOUT_CLASSIFICATION	8.335866250283872E-6	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999947177547414	WITHOUT_CLASSIFICATION	5.282245258641156E-6	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999998814620402	WITHOUT_CLASSIFICATION	1.1853795975366524E-7	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999307758459192	WITHOUT_CLASSIFICATION	6.922415408076277E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999588401319	WITHOUT_CLASSIFICATION	4.115986811256266E-8	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9892814495835934	WITHOUT_CLASSIFICATION	0.010718550416406685	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999659693985804	WITHOUT_CLASSIFICATION	3.4030601419583634E-5	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999998761309	WITHOUT_CLASSIFICATION	1.238691320133744E-10	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999997311316275	WITHOUT_CLASSIFICATION	2.688683724864008E-7	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999992479456329	WITHOUT_CLASSIFICATION	7.520543671667341E-7	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999920219557984	WITHOUT_CLASSIFICATION	7.978044201605169E-6	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999458936	WITHOUT_CLASSIFICATION	5.4106321689610845E-11	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999543589374973	WITHOUT_CLASSIFICATION	4.564106250268141E-5	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999407249827	WITHOUT_CLASSIFICATION	5.9275017364709486E-8	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9993553759422286	WITHOUT_CLASSIFICATION	6.446240577713709E-4	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999998201165666	WITHOUT_CLASSIFICATION	1.798834334432781E-7	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.999994877484702	WITHOUT_CLASSIFICATION	5.122515298015735E-6	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999947072041778	WITHOUT_CLASSIFICATION	5.292795822112792E-6	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999998886021296	WITHOUT_CLASSIFICATION	1.113978704076087E-7	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999980131292641	WITHOUT_CLASSIFICATION	1.9868707359873836E-6	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9990244485020354	WITHOUT_CLASSIFICATION	9.755514979645929E-4	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999950287883383	WITHOUT_CLASSIFICATION	4.971211661698017E-6	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999998916361144	WITHOUT_CLASSIFICATION	1.083638856759424E-7	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999381150929	WITHOUT_CLASSIFICATION	6.188490709246136E-8	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999964897948148	WITHOUT_CLASSIFICATION	3.510205185283536E-6	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9997697006571662	WITHOUT_CLASSIFICATION	2.302993428338018E-4	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999994472921	WITHOUT_CLASSIFICATION	5.5270796861276E-10	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999983449042955	WITHOUT_CLASSIFICATION	1.6550957045328004E-6	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999994503546684	WITHOUT_CLASSIFICATION	5.496453316779477E-7	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999975523	WITHOUT_CLASSIFICATION	2.4478421112190028E-12	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999346062951	WITHOUT_CLASSIFICATION	6.539370486373475E-8	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999872536612088	WITHOUT_CLASSIFICATION	1.2746338791276064E-5	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9988971230126497	WITHOUT_CLASSIFICATION	0.0011028769873504052	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999954756727	WITHOUT_CLASSIFICATION	4.524327287433408E-8	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999858566839536	WITHOUT_CLASSIFICATION	1.4143316046368734E-5	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.8732559253509153	WITHOUT_CLASSIFICATION	0.12674407464908458	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9999997744934416	WITHOUT_CLASSIFICATION	2.2550655840481133E-7	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9997587911965836	WITHOUT_CLASSIFICATION	2.4120880341646598E-4	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9907908965638633	WITHOUT_CLASSIFICATION	0.009209103436136725	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999987622861812	WITHOUT_CLASSIFICATION	1.2377138187020742E-6	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999999988286837	WITHOUT_CLASSIFICATION	1.1713162960804756E-8	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999951287253	WITHOUT_CLASSIFICATION	4.871274733392432E-9	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999591270676	WITHOUT_CLASSIFICATION	4.0872932349419206E-8	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999939163130555	WITHOUT_CLASSIFICATION	6.083686944483612E-6	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999706243934	WITHOUT_CLASSIFICATION	2.9375606654060774E-8	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999997055872928	WITHOUT_CLASSIFICATION	2.9441270720800042E-6	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999995125239746	WITHOUT_CLASSIFICATION	4.874760253913387E-7	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999995125239746	WITHOUT_CLASSIFICATION	4.874760253913387E-7	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999840600437621	WITHOUT_CLASSIFICATION	1.5939956237929447E-5	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.99999939313561	WITHOUT_CLASSIFICATION	6.0686438997077E-7	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999804746147	WITHOUT_CLASSIFICATION	1.9525385294033526E-8	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999871958435541	WITHOUT_CLASSIFICATION	1.2804156445881201E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999989424500257	WITHOUT_CLASSIFICATION	1.0575499742042157E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999989424500257	WITHOUT_CLASSIFICATION	1.0575499742042157E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999749026475847	WITHOUT_CLASSIFICATION	2.509735241529745E-5	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999968393452	WITHOUT_CLASSIFICATION	3.160654868251106E-9	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999970192729694	WITHOUT_CLASSIFICATION	2.9807270305948176E-6	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999571346622	WITHOUT_CLASSIFICATION	4.286533778806803E-8	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999998507241014	WITHOUT_CLASSIFICATION	1.4927589853226284E-7	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999966890928652	WITHOUT_CLASSIFICATION	3.3109071348979703E-6	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999961075356	WITHOUT_CLASSIFICATION	3.8924643458903105E-9	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999933739170683	WITHOUT_CLASSIFICATION	6.626082931658384E-6	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999986389483064	WITHOUT_CLASSIFICATION	1.3610516935296251E-6	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999621741942	WITHOUT_CLASSIFICATION	3.782580576533101E-8	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999918147231359	WITHOUT_CLASSIFICATION	8.18527686398061E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995675893337	WITHOUT_CLASSIFICATION	4.324106661944264E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995675893337	WITHOUT_CLASSIFICATION	4.324106661944264E-7	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999965192277	WITHOUT_CLASSIFICATION	3.4807724678619505E-9	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999816830483321	WITHOUT_CLASSIFICATION	1.8316951667933394E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999998486927516	WITHOUT_CLASSIFICATION	1.513072483618023E-7	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999999858228723	WITHOUT_CLASSIFICATION	1.4177127776514654E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994538065459991	WITHOUT_CLASSIFICATION	5.461934540009563E-4	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999999989522788	WITHOUT_CLASSIFICATION	1.0477212012589265E-8	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999697684188	WITHOUT_CLASSIFICATION	3.0231581160487006E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994538065459991	WITHOUT_CLASSIFICATION	5.461934540009563E-4	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999863886359	WITHOUT_CLASSIFICATION	1.3611364064173399E-8	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999527394072735	WITHOUT_CLASSIFICATION	4.7260592726515816E-5	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999953482691768	WITHOUT_CLASSIFICATION	4.651730823175038E-6	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999563540611	WITHOUT_CLASSIFICATION	4.3645938922756613E-8	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9993553759422286	WITHOUT_CLASSIFICATION	6.446240577713709E-4	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999998881739021	WITHOUT_CLASSIFICATION	1.1182609790961441E-7	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9991854276170673	WITHOUT_CLASSIFICATION	8.145723829328005E-4	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999949576801193	WITHOUT_CLASSIFICATION	5.042319880694502E-6	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9999997433285234	WITHOUT_CLASSIFICATION	2.5667147658301065E-7	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999994498603402	WITHOUT_CLASSIFICATION	5.501396598494887E-7	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999988922337592	WITHOUT_CLASSIFICATION	1.1077662408797815E-6	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999986372071452	WITHOUT_CLASSIFICATION	1.3627928547579384E-6	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999999990438257	WITHOUT_CLASSIFICATION	9.56174203327969E-10	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.999995648715629	WITHOUT_CLASSIFICATION	4.351284371033116E-6	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9983079433187365	WITHOUT_CLASSIFICATION	0.0016920566812635403	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9983079433187365	WITHOUT_CLASSIFICATION	0.0016920566812635403	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.99996721649397	WITHOUT_CLASSIFICATION	3.2783506030005856E-5	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999989186454	WITHOUT_CLASSIFICATION	1.0813545322510381E-9	DEFECT
package	WITHOUT_CLASSIFICATION	0.999998197103977	WITHOUT_CLASSIFICATION	1.8028960229659298E-6	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999993987659848	WITHOUT_CLASSIFICATION	6.012340153170345E-7	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999998162916467	WITHOUT_CLASSIFICATION	1.837083531923469E-7	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.999999964558829	WITHOUT_CLASSIFICATION	3.54411710756899E-8	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999999571295043	WITHOUT_CLASSIFICATION	4.287049570986904E-7	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999990106998303	WITHOUT_CLASSIFICATION	9.893001697181767E-7	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999771939976	WITHOUT_CLASSIFICATION	2.280600244128865E-8	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999989685401096	WITHOUT_CLASSIFICATION	1.0314598904276216E-6	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996503602453	WITHOUT_CLASSIFICATION	3.4963975469763735E-6	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.7980929484597211	WITHOUT_CLASSIFICATION	0.20190705154027896	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999996561326323	WITHOUT_CLASSIFICATION	3.4386736770545504E-7	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998014495242	WITHOUT_CLASSIFICATION	1.985504759119514E-7	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999987170503661	WITHOUT_CLASSIFICATION	1.2829496339113075E-6	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999222447509	WITHOUT_CLASSIFICATION	7.775524908472067E-8	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999773904970019	WITHOUT_CLASSIFICATION	2.2609502998115293E-5	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999969741173125	WITHOUT_CLASSIFICATION	3.0258826875157665E-6	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9969270987839091	WITHOUT_CLASSIFICATION	0.0030729012160909137	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9953196602064993	WITHOUT_CLASSIFICATION	0.0046803397935006276	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999977203823188	WITHOUT_CLASSIFICATION	2.2796176811097156E-6	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999983173885	WITHOUT_CLASSIFICATION	1.6826114028766352E-9	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9992470232329105	WITHOUT_CLASSIFICATION	7.529767670894732E-4	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999807387216	WITHOUT_CLASSIFICATION	1.9261278430702826E-8	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999988229727076	WITHOUT_CLASSIFICATION	1.1770272923431979E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999988229727076	WITHOUT_CLASSIFICATION	1.1770272923431979E-6	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999560534823264	WITHOUT_CLASSIFICATION	4.394651767356902E-5	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999023438995299	WITHOUT_CLASSIFICATION	9.765610047014047E-5	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.999999999817783	WITHOUT_CLASSIFICATION	1.8221708124605015E-10	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999987084938398	WITHOUT_CLASSIFICATION	1.291506160163943E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999973237806377	WITHOUT_CLASSIFICATION	2.676219362431832E-6	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999867156362068	WITHOUT_CLASSIFICATION	1.3284363793276958E-5	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9958029887490668	WITHOUT_CLASSIFICATION	0.004197011250933198	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999946754101702	WITHOUT_CLASSIFICATION	5.324589829735198E-6	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.6770645069177612	WITHOUT_CLASSIFICATION	0.32293549308223884	DEFECT
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.9044470976059051	DEFECT	0.09555290239409495	WITHOUT_CLASSIFICATION
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.7669136381059556	DEFECT	0.23308636189404439	WITHOUT_CLASSIFICATION
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9589008422396778	DEFECT	0.04109915776032224	WITHOUT_CLASSIFICATION
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.9999999825767724	WITHOUT_CLASSIFICATION	1.742322764726242E-8	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.9983480545035507	WITHOUT_CLASSIFICATION	0.0016519454964492933	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.974043066875796	DEFECT	0.02595693312420393	WITHOUT_CLASSIFICATION
TODO : should this be an error?	DEFECT	0.9996700713141387	DEFECT	3.2992868586144593E-4	WITHOUT_CLASSIFICATION
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.9998430886981535	DEFECT	1.5691130184636678E-4	WITHOUT_CLASSIFICATION
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.6527947564783054	DEFECT	0.34720524352169463	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9215424611218069	DEFECT	0.07845753887819311	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9215424611218069	DEFECT	0.07845753887819311	WITHOUT_CLASSIFICATION
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9903495778618594	WITHOUT_CLASSIFICATION	0.009650422138140638	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999868590187823	WITHOUT_CLASSIFICATION	1.3140981217768028E-5	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9963398654849762	DEFECT	0.0036601345150237474	WITHOUT_CLASSIFICATION
this call is side-effecty	DEFECT	0.999957247489359	WITHOUT_CLASSIFICATION	4.275251064104779E-5	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.9862617886909365	WITHOUT_CLASSIFICATION	0.013738211309063419	DEFECT
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.5040903863402446	WITHOUT_CLASSIFICATION	0.49590961365975533	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.5555610282008981	WITHOUT_CLASSIFICATION	0.44443897179910186	DEFECT
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.8078265882047775	WITHOUT_CLASSIFICATION	0.19217341179522265	DEFECT
TODO: is this completely correct?	DEFECT	0.7927597212876567	DEFECT	0.20724027871234332	WITHOUT_CLASSIFICATION
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.9961335276031417	DEFECT	0.003866472396858308	WITHOUT_CLASSIFICATION
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.7192425533227843	DEFECT	0.28075744667721564	WITHOUT_CLASSIFICATION
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9996071770900208	WITHOUT_CLASSIFICATION	3.9282290997913526E-4	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.9934858634600383	DEFECT	0.006514136539961754	WITHOUT_CLASSIFICATION
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.9994098445150416	DEFECT	5.90155484958441E-4	WITHOUT_CLASSIFICATION
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.990061239873701	WITHOUT_CLASSIFICATION	0.009938760126298985	DEFECT
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.7585181171109208	WITHOUT_CLASSIFICATION	0.2414818828890792	DEFECT
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.8853478120662971	DEFECT	0.11465218793370296	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.8209902164846222	DEFECT	0.17900978351537777	WITHOUT_CLASSIFICATION
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.8420394809327315	DEFECT	0.15796051906726857	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9215424611218069	DEFECT	0.07845753887819311	WITHOUT_CLASSIFICATION
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9999349643395488	DEFECT	6.503566045118941E-5	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.7760050339870698	WITHOUT_CLASSIFICATION	0.22399496601293015	DEFECT
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.5473119429588109	DEFECT	0.45268805704118914	WITHOUT_CLASSIFICATION
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.998841973360019	WITHOUT_CLASSIFICATION	0.0011580266399810314	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.9999960780060164	WITHOUT_CLASSIFICATION	3.921993983651859E-6	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9914489598309596	WITHOUT_CLASSIFICATION	0.008551040169040399	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9944959800284824	WITHOUT_CLASSIFICATION	0.005504019971517656	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.9305993848686207	DEFECT	0.06940061513137932	WITHOUT_CLASSIFICATION
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.8474943254987382	DEFECT	0.1525056745012619	WITHOUT_CLASSIFICATION
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.9968273614408455	WITHOUT_CLASSIFICATION	0.0031726385591544803	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.9993162986973771	WITHOUT_CLASSIFICATION	6.837013026228818E-4	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.9828196571340982	DEFECT	0.017180342865901737	WITHOUT_CLASSIFICATION
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9995685747525144	WITHOUT_CLASSIFICATION	4.3142524748568156E-4	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.8763949794656046	WITHOUT_CLASSIFICATION	0.12360502053439539	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.962635219136686	WITHOUT_CLASSIFICATION	0.037364780863313914	DEFECT
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.8579622656914735	WITHOUT_CLASSIFICATION	0.14203773430852643	DEFECT
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.7799575330639976	DEFECT	0.22004246693600243	WITHOUT_CLASSIFICATION
