//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999998714528597	WITHOUT_CLASSIFICATION	1.2854714016049077E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999942788647262	WITHOUT_CLASSIFICATION	5.721135273820567E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999942788647262	WITHOUT_CLASSIFICATION	5.721135273820567E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999942788647262	WITHOUT_CLASSIFICATION	5.721135273820567E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999942788647262	WITHOUT_CLASSIFICATION	5.721135273820567E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999942788647262	WITHOUT_CLASSIFICATION	5.721135273820567E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999942788647262	WITHOUT_CLASSIFICATION	5.721135273820567E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999942788647262	WITHOUT_CLASSIFICATION	5.721135273820567E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999967771310269	WITHOUT_CLASSIFICATION	3.2228689731106306E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999967771310269	WITHOUT_CLASSIFICATION	3.2228689731106306E-6	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999993034816619	WITHOUT_CLASSIFICATION	6.965183380938198E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999967418357668	WITHOUT_CLASSIFICATION	3.258164233138577E-6	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999995461953826	WITHOUT_CLASSIFICATION	4.538046174659906E-7	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999956737860207	WITHOUT_CLASSIFICATION	4.326213979277238E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999956737860207	WITHOUT_CLASSIFICATION	4.326213979277238E-6	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999791065721	WITHOUT_CLASSIFICATION	2.089342785874519E-8	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999968377590137	WITHOUT_CLASSIFICATION	3.162240986314475E-6	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999992825110284	WITHOUT_CLASSIFICATION	7.174889714501709E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999993046559332	WITHOUT_CLASSIFICATION	6.953440667542021E-7	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999990351425365	WITHOUT_CLASSIFICATION	9.64857463494278E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999990351425365	WITHOUT_CLASSIFICATION	9.64857463494278E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9995676905135403	WITHOUT_CLASSIFICATION	4.3230948645959664E-4	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999987680824715	WITHOUT_CLASSIFICATION	1.2319175285302313E-6	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9986621987113802	WITHOUT_CLASSIFICATION	0.0013378012886198112	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999918702840799	WITHOUT_CLASSIFICATION	8.129715920201268E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999997029332113	WITHOUT_CLASSIFICATION	2.97066788816317E-7	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999951272429485	WITHOUT_CLASSIFICATION	4.872757051588837E-6	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999013789683433	WITHOUT_CLASSIFICATION	9.862103165674559E-5	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999955429142108	WITHOUT_CLASSIFICATION	4.457085789241566E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999951671847974	WITHOUT_CLASSIFICATION	4.832815202568288E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9778673883576475	WITHOUT_CLASSIFICATION	0.022132611642352452	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999972774276196	WITHOUT_CLASSIFICATION	2.722572380487216E-6	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999956117930523	WITHOUT_CLASSIFICATION	4.3882069477237605E-6	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999984020665293	WITHOUT_CLASSIFICATION	1.597933470706329E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999949664679557	WITHOUT_CLASSIFICATION	5.033532044260894E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999949664679557	WITHOUT_CLASSIFICATION	5.033532044260894E-6	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999956028554962	WITHOUT_CLASSIFICATION	4.397144503892193E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999678299382082	WITHOUT_CLASSIFICATION	3.217006179182615E-5	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999997519086153	WITHOUT_CLASSIFICATION	2.4809138458200606E-7	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999988432726076	WITHOUT_CLASSIFICATION	1.1567273923887963E-6	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999962482268098	WITHOUT_CLASSIFICATION	3.751773190179215E-6	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9831388477817473	WITHOUT_CLASSIFICATION	0.01686115221825275	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9831388477817473	WITHOUT_CLASSIFICATION	0.01686115221825275	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999994553217727	WITHOUT_CLASSIFICATION	5.446782273938626E-7	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999068207205155	WITHOUT_CLASSIFICATION	9.317927948449273E-5	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999051382179	WITHOUT_CLASSIFICATION	9.48617820217428E-8	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999977443290207	WITHOUT_CLASSIFICATION	2.2556709793555943E-6	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999853009749643	WITHOUT_CLASSIFICATION	1.4699025035698294E-5	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996343970723	WITHOUT_CLASSIFICATION	3.656029277053348E-7	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971604146584	WITHOUT_CLASSIFICATION	2.839585341665929E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999967002959742	WITHOUT_CLASSIFICATION	3.2997040257993467E-6	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9998128649124262	WITHOUT_CLASSIFICATION	1.8713508757386887E-4	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.697591677491032	WITHOUT_CLASSIFICATION	0.30240832250896793	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999354024487753	WITHOUT_CLASSIFICATION	6.459755122461399E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9998128649124262	WITHOUT_CLASSIFICATION	1.8713508757386887E-4	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999354024487753	WITHOUT_CLASSIFICATION	6.459755122461399E-5	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999935044825438	WITHOUT_CLASSIFICATION	6.495517456328464E-6	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9993299883133271	WITHOUT_CLASSIFICATION	6.700116866729506E-4	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.999996735902429	WITHOUT_CLASSIFICATION	3.264097571003734E-6	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999981404635741	WITHOUT_CLASSIFICATION	1.8595364258961147E-5	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999987288901823	WITHOUT_CLASSIFICATION	1.2711098176362E-6	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999996668397535	WITHOUT_CLASSIFICATION	3.33160246573244E-7	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9997712503232722	WITHOUT_CLASSIFICATION	2.2874967672783803E-4	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999232341330466	WITHOUT_CLASSIFICATION	7.676586695329114E-5	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999806070715712	WITHOUT_CLASSIFICATION	1.9392928428841646E-5	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999994247344555	WITHOUT_CLASSIFICATION	5.752655444414486E-7	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999986385675746	WITHOUT_CLASSIFICATION	1.361432425328748E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999779204922815	WITHOUT_CLASSIFICATION	2.2079507718455372E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999991360316225	WITHOUT_CLASSIFICATION	8.639683775261222E-7	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999909687059088	WITHOUT_CLASSIFICATION	9.031294091285728E-6	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999940398928452	WITHOUT_CLASSIFICATION	5.960107154808187E-6	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9998754211431731	WITHOUT_CLASSIFICATION	1.2457885682697035E-4	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999994050038689	WITHOUT_CLASSIFICATION	5.949961311901108E-7	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999762381172026	WITHOUT_CLASSIFICATION	2.376188279741597E-5	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999984229823364	WITHOUT_CLASSIFICATION	1.5770176635696963E-6	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999985344003518	WITHOUT_CLASSIFICATION	1.4655996481688228E-6	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999999204717083	WITHOUT_CLASSIFICATION	7.952829171765067E-8	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999997004314	WITHOUT_CLASSIFICATION	2.99568561220087E-10	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999999912391202	WITHOUT_CLASSIFICATION	8.760879791140947E-8	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999607943623118	WITHOUT_CLASSIFICATION	3.920563768826131E-5	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9998380870650766	WITHOUT_CLASSIFICATION	1.619129349233662E-4	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999980741418532	WITHOUT_CLASSIFICATION	1.9258581467857023E-6	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999999983722617	WITHOUT_CLASSIFICATION	1.6277383003071633E-8	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999387807307	WITHOUT_CLASSIFICATION	6.121926935129069E-8	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999998723494418	WITHOUT_CLASSIFICATION	1.2765055834203865E-7	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999999968830875	WITHOUT_CLASSIFICATION	3.116912484456418E-8	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999996377045565	WITHOUT_CLASSIFICATION	3.622954435886504E-7	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999906698175	WITHOUT_CLASSIFICATION	9.330182506688316E-9	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999916164072717	WITHOUT_CLASSIFICATION	8.383592728265691E-6	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999972333780235	WITHOUT_CLASSIFICATION	2.7666219765003845E-5	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999958337163833	WITHOUT_CLASSIFICATION	4.166283616700468E-6	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999999901512914	WITHOUT_CLASSIFICATION	9.848708607292782E-8	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999972333780235	WITHOUT_CLASSIFICATION	2.7666219765003845E-5	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998820146353	WITHOUT_CLASSIFICATION	1.1798536466781558E-7	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999783003191534	WITHOUT_CLASSIFICATION	2.1699680846608804E-5	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999794192017929	WITHOUT_CLASSIFICATION	2.058079820710033E-5	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999968346986315	WITHOUT_CLASSIFICATION	3.1653013683628756E-6	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999999311228859	WITHOUT_CLASSIFICATION	6.88771141244312E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999758647938021	WITHOUT_CLASSIFICATION	2.413520619788236E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999758647938021	WITHOUT_CLASSIFICATION	2.413520619788236E-5	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999293836090369	WITHOUT_CLASSIFICATION	7.061639096307751E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999986168805308	WITHOUT_CLASSIFICATION	1.3831194690977766E-6	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999737021811181	WITHOUT_CLASSIFICATION	2.6297818881841326E-5	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999738328121	WITHOUT_CLASSIFICATION	2.616718791851302E-8	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999968279808753	WITHOUT_CLASSIFICATION	3.172019124658354E-6	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999480296251	WITHOUT_CLASSIFICATION	5.1970374826721436E-8	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999998640366056	WITHOUT_CLASSIFICATION	1.3596339439097507E-6	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999963045558679	WITHOUT_CLASSIFICATION	3.695444132244764E-6	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999256310828	WITHOUT_CLASSIFICATION	7.436891725245779E-8	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999998951611105	WITHOUT_CLASSIFICATION	1.0483888940574907E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999646453492	WITHOUT_CLASSIFICATION	3.5354650706555096E-8	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999646453492	WITHOUT_CLASSIFICATION	3.5354650706555096E-8	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9994507028916457	WITHOUT_CLASSIFICATION	5.492971083541758E-4	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999973781224591	WITHOUT_CLASSIFICATION	2.621877540877763E-6	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999994680313002	WITHOUT_CLASSIFICATION	5.319686997497342E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999646453492	WITHOUT_CLASSIFICATION	3.5354650706555096E-8	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9994507028916457	WITHOUT_CLASSIFICATION	5.492971083541758E-4	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9994507028916457	WITHOUT_CLASSIFICATION	5.492971083541758E-4	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999237624049	WITHOUT_CLASSIFICATION	7.623759510527644E-8	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999808838029999	WITHOUT_CLASSIFICATION	1.9116197000109108E-5	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9998881319691852	WITHOUT_CLASSIFICATION	1.1186803081479856E-4	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999993640639686	WITHOUT_CLASSIFICATION	6.359360313521459E-7	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999882769209937	WITHOUT_CLASSIFICATION	1.1723079006401305E-5	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999882769209937	WITHOUT_CLASSIFICATION	1.1723079006401305E-5	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999991059241324	WITHOUT_CLASSIFICATION	8.940758674347155E-7	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999975818007004	WITHOUT_CLASSIFICATION	2.4181992996086598E-6	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999961023221112	WITHOUT_CLASSIFICATION	3.897677888790032E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999985435622637	WITHOUT_CLASSIFICATION	1.4564377363222677E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999985435622637	WITHOUT_CLASSIFICATION	1.4564377363222677E-6	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999997326291961	WITHOUT_CLASSIFICATION	2.67370803904442E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9988970430705298	WITHOUT_CLASSIFICATION	0.001102956929470166	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999923378463671	WITHOUT_CLASSIFICATION	7.66215363297612E-6	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999997503411773	WITHOUT_CLASSIFICATION	2.496588226863797E-7	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999736809998	WITHOUT_CLASSIFICATION	2.631900020185338E-8	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999998084421702	WITHOUT_CLASSIFICATION	1.9155782979489694E-6	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9998849226152148	WITHOUT_CLASSIFICATION	1.1507738478524502E-4	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999967569276667	WITHOUT_CLASSIFICATION	3.243072333274991E-6	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999997516298883	WITHOUT_CLASSIFICATION	2.483701117166802E-7	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999923378463671	WITHOUT_CLASSIFICATION	7.66215363297612E-6	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999079180429249	WITHOUT_CLASSIFICATION	9.208195707519384E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999909940402866	WITHOUT_CLASSIFICATION	9.005959713316085E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999909940402866	WITHOUT_CLASSIFICATION	9.005959713316085E-6	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999994809640212	WITHOUT_CLASSIFICATION	5.190359788230928E-7	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999990021651906	WITHOUT_CLASSIFICATION	9.978348094810778E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9996451642368639	WITHOUT_CLASSIFICATION	3.5483576313610803E-4	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9997113172016376	WITHOUT_CLASSIFICATION	2.886827983624586E-4	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999997942471796	WITHOUT_CLASSIFICATION	2.0575282043335191E-7	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9999416793541339	WITHOUT_CLASSIFICATION	5.832064586597616E-5	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9979980644114035	WITHOUT_CLASSIFICATION	0.002001935588596435	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999745391965	WITHOUT_CLASSIFICATION	2.5460803485021057E-8	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999996987668158	WITHOUT_CLASSIFICATION	3.0123318424819586E-7	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999996987668158	WITHOUT_CLASSIFICATION	3.0123318424819586E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999974662816794	WITHOUT_CLASSIFICATION	2.5337183205255873E-6	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999998714528597	WITHOUT_CLASSIFICATION	1.2854714016049077E-7	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999992950010347	WITHOUT_CLASSIFICATION	7.049989652909067E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999942788647262	WITHOUT_CLASSIFICATION	5.721135273820567E-6	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999978732300433	WITHOUT_CLASSIFICATION	2.1267699565981628E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999967771310269	WITHOUT_CLASSIFICATION	3.2228689731106306E-6	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999978013139509	WITHOUT_CLASSIFICATION	2.198686049045525E-6	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999998780437426	WITHOUT_CLASSIFICATION	1.2195625741137523E-7	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999997716843118	WITHOUT_CLASSIFICATION	2.2831568820363675E-7	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999955249763341	WITHOUT_CLASSIFICATION	4.475023665847014E-6	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9998540652051381	WITHOUT_CLASSIFICATION	1.459347948618426E-4	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999896617734411	WITHOUT_CLASSIFICATION	1.0338226558939181E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999486352786401	WITHOUT_CLASSIFICATION	5.136472135995412E-5	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999967408728136	WITHOUT_CLASSIFICATION	3.2591271863298295E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999967418357668	WITHOUT_CLASSIFICATION	3.258164233138577E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999947635130545	WITHOUT_CLASSIFICATION	5.236486945526152E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999947635130545	WITHOUT_CLASSIFICATION	5.236486945526152E-6	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999991404514562	WITHOUT_CLASSIFICATION	8.595485438445424E-7	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999884856126846	WITHOUT_CLASSIFICATION	1.1514387315422898E-5	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999986239905642	WITHOUT_CLASSIFICATION	1.3760094357977124E-6	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999985933937331	WITHOUT_CLASSIFICATION	1.406606266957127E-6	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999992033709783	WITHOUT_CLASSIFICATION	7.966290216202989E-7	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999997632647869	WITHOUT_CLASSIFICATION	2.3673521296170242E-7	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999956737860207	WITHOUT_CLASSIFICATION	4.326213979277238E-6	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999955926707198	WITHOUT_CLASSIFICATION	4.407329280160049E-6	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.999996318541932	WITHOUT_CLASSIFICATION	3.6814580679642584E-6	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999960857678567	WITHOUT_CLASSIFICATION	3.914232143314365E-6	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999991895154201	WITHOUT_CLASSIFICATION	8.104845798614883E-7	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999933656656703	WITHOUT_CLASSIFICATION	6.634334329777844E-6	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999930219914966	WITHOUT_CLASSIFICATION	6.978008503421009E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999998585205593	WITHOUT_CLASSIFICATION	1.414794408289916E-7	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999995059834759	WITHOUT_CLASSIFICATION	4.940165240690481E-7	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999998530192674	WITHOUT_CLASSIFICATION	1.469807325933087E-7	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999909295445618	WITHOUT_CLASSIFICATION	9.070455438218663E-6	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999803479019603	WITHOUT_CLASSIFICATION	1.9652098039643736E-5	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.999999919194948	WITHOUT_CLASSIFICATION	8.080505195403861E-8	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999942788647262	WITHOUT_CLASSIFICATION	5.721135273820567E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999942788647262	WITHOUT_CLASSIFICATION	5.721135273820567E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999967771310269	WITHOUT_CLASSIFICATION	3.2228689731106306E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999967771310269	WITHOUT_CLASSIFICATION	3.2228689731106306E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999486352786401	WITHOUT_CLASSIFICATION	5.136472135995412E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999947635130545	WITHOUT_CLASSIFICATION	5.236486945526152E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999998585205593	WITHOUT_CLASSIFICATION	1.414794408289916E-7	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999791065721	WITHOUT_CLASSIFICATION	2.089342785874519E-8	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999994494383296	WITHOUT_CLASSIFICATION	5.505616703874332E-7	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999898331361144	WITHOUT_CLASSIFICATION	1.0166863885557355E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999965648795739	WITHOUT_CLASSIFICATION	3.4351204261972144E-6	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999869097813803	WITHOUT_CLASSIFICATION	1.3090218619672035E-5	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999946630322554	WITHOUT_CLASSIFICATION	5.3369677445117E-6	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999817035478906	WITHOUT_CLASSIFICATION	1.829645210943872E-5	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999884233249247	WITHOUT_CLASSIFICATION	1.1576675075299894E-4	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9998670318010382	WITHOUT_CLASSIFICATION	1.3296819896174366E-4	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999999711505545	WITHOUT_CLASSIFICATION	2.8849445533133E-8	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999986150314143	WITHOUT_CLASSIFICATION	1.3849685856699155E-6	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999986150314143	WITHOUT_CLASSIFICATION	1.3849685856699155E-6	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999999990433499	WITHOUT_CLASSIFICATION	9.566501028093352E-9	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999991417581465	WITHOUT_CLASSIFICATION	8.582418534691174E-7	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999971368280236	WITHOUT_CLASSIFICATION	2.8631719764688623E-6	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999881720039829	WITHOUT_CLASSIFICATION	1.1827996017059711E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999921309384	WITHOUT_CLASSIFICATION	7.869061657023241E-9	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999997643629984	WITHOUT_CLASSIFICATION	2.3563700159422086E-7	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999995075242287	WITHOUT_CLASSIFICATION	4.924757712787978E-7	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999968377590137	WITHOUT_CLASSIFICATION	3.162240986314475E-6	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999780870148497	WITHOUT_CLASSIFICATION	2.1912985150344283E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999995902664292	WITHOUT_CLASSIFICATION	4.0973357090591114E-7	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999995902664292	WITHOUT_CLASSIFICATION	4.0973357090591114E-7	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999998363345226	WITHOUT_CLASSIFICATION	1.6366547741470218E-7	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999995318594895	WITHOUT_CLASSIFICATION	4.6814051055088324E-7	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999994758584737	WITHOUT_CLASSIFICATION	5.241415261741961E-7	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999886959766605	WITHOUT_CLASSIFICATION	1.130402333942163E-5	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999785161403763	WITHOUT_CLASSIFICATION	2.1483859623691895E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999967771310269	WITHOUT_CLASSIFICATION	3.2228689731106306E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999486352786401	WITHOUT_CLASSIFICATION	5.136472135995412E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999967418357668	WITHOUT_CLASSIFICATION	3.258164233138577E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999998585205593	WITHOUT_CLASSIFICATION	1.414794408289916E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999998585205593	WITHOUT_CLASSIFICATION	1.414794408289916E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999971368571118	WITHOUT_CLASSIFICATION	2.8631428882108836E-6	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999971368571118	WITHOUT_CLASSIFICATION	2.8631428882108836E-6	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999990643767883	WITHOUT_CLASSIFICATION	9.356232116273602E-7	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999928969485627	WITHOUT_CLASSIFICATION	7.1030514371605235E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999928969485627	WITHOUT_CLASSIFICATION	7.1030514371605235E-6	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999972005113097	WITHOUT_CLASSIFICATION	2.7994886903660113E-6	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999978133709787	WITHOUT_CLASSIFICATION	2.186629021201504E-6	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999989485241774	WITHOUT_CLASSIFICATION	1.0514758225499348E-6	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999985963327455	WITHOUT_CLASSIFICATION	1.4036672545207887E-6	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9997356347985928	WITHOUT_CLASSIFICATION	2.6436520140720555E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999993046559332	WITHOUT_CLASSIFICATION	6.953440667542021E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999993046559332	WITHOUT_CLASSIFICATION	6.953440667542021E-7	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9999553291021366	WITHOUT_CLASSIFICATION	4.467089786338601E-5	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999994304865126	WITHOUT_CLASSIFICATION	5.695134873023191E-7	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999977878673402	WITHOUT_CLASSIFICATION	2.212132659865155E-6	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999952880748083	WITHOUT_CLASSIFICATION	4.71192519159802E-6	DEFECT
// char	WITHOUT_CLASSIFICATION	0.999998072438282	WITHOUT_CLASSIFICATION	1.9275617181162364E-6	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999936922587727	WITHOUT_CLASSIFICATION	6.307741227431357E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999990351425365	WITHOUT_CLASSIFICATION	9.64857463494278E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999779180045083	WITHOUT_CLASSIFICATION	2.2081995491645766E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999779180045083	WITHOUT_CLASSIFICATION	2.2081995491645766E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9995676905135403	WITHOUT_CLASSIFICATION	4.3230948645959664E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9995676905135403	WITHOUT_CLASSIFICATION	4.3230948645959664E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999964984255296	WITHOUT_CLASSIFICATION	3.501574470477553E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999964984255296	WITHOUT_CLASSIFICATION	3.501574470477553E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999185509776	WITHOUT_CLASSIFICATION	8.144902234549278E-8	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999185509776	WITHOUT_CLASSIFICATION	8.144902234549278E-8	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999993046559332	WITHOUT_CLASSIFICATION	6.953440667542021E-7	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999990351425365	WITHOUT_CLASSIFICATION	9.64857463494278E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999779180045083	WITHOUT_CLASSIFICATION	2.2081995491645766E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999779180045083	WITHOUT_CLASSIFICATION	2.2081995491645766E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9995676905135403	WITHOUT_CLASSIFICATION	4.3230948645959664E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999964984255296	WITHOUT_CLASSIFICATION	3.501574470477553E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999964984255296	WITHOUT_CLASSIFICATION	3.501574470477553E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999185509776	WITHOUT_CLASSIFICATION	8.144902234549278E-8	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999999152441649	WITHOUT_CLASSIFICATION	8.475583517417493E-8	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999937354391217	WITHOUT_CLASSIFICATION	6.2645608783810664E-6	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999485715514602	WITHOUT_CLASSIFICATION	5.142844853980098E-5	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999891979578385	WITHOUT_CLASSIFICATION	1.0802042161509285E-5	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999998090078999	WITHOUT_CLASSIFICATION	1.9099210019846213E-7	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999762094269935	WITHOUT_CLASSIFICATION	2.3790573006511723E-5	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9993770203006195	WITHOUT_CLASSIFICATION	6.229796993806457E-4	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.7331242979368128	WITHOUT_CLASSIFICATION	0.2668757020631872	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9980243684613573	WITHOUT_CLASSIFICATION	0.0019756315386426594	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999855189972167	WITHOUT_CLASSIFICATION	1.4481002783218432E-5	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999915241445887	WITHOUT_CLASSIFICATION	8.475855411271918E-6	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999991457227916	WITHOUT_CLASSIFICATION	8.542772085010807E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999293836090369	WITHOUT_CLASSIFICATION	7.061639096307751E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999762094269935	WITHOUT_CLASSIFICATION	2.3790573006511723E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9994428086170623	WITHOUT_CLASSIFICATION	5.571913829377919E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9994428086170623	WITHOUT_CLASSIFICATION	5.571913829377919E-4	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999938798343965	WITHOUT_CLASSIFICATION	6.1201656035796155E-6	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999982297496446	WITHOUT_CLASSIFICATION	1.7702503554134387E-6	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999982297496446	WITHOUT_CLASSIFICATION	1.7702503554134387E-6	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999217459097995	WITHOUT_CLASSIFICATION	7.825409020045531E-5	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999897736247344	WITHOUT_CLASSIFICATION	1.0226375265549373E-5	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999998564475612	WITHOUT_CLASSIFICATION	1.4355243880269515E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999988864689786	WITHOUT_CLASSIFICATION	1.1135310213279741E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999988864689786	WITHOUT_CLASSIFICATION	1.1135310213279741E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999997029332113	WITHOUT_CLASSIFICATION	2.97066788816317E-7	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999975587789508	WITHOUT_CLASSIFICATION	2.441221049205527E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999975587789508	WITHOUT_CLASSIFICATION	2.441221049205527E-6	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999971027770519	WITHOUT_CLASSIFICATION	2.8972229481539082E-6	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999973630557473	WITHOUT_CLASSIFICATION	2.636944252735848E-6	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999982269376668	WITHOUT_CLASSIFICATION	1.773062333189442E-6	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999932751096122	WITHOUT_CLASSIFICATION	6.72489038787099E-6	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999921759307372	WITHOUT_CLASSIFICATION	7.824069262844648E-6	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999620021395507	WITHOUT_CLASSIFICATION	3.7997860449376845E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999951272429485	WITHOUT_CLASSIFICATION	4.872757051588837E-6	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999902157940269	WITHOUT_CLASSIFICATION	9.784205973077744E-6	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9952860197147582	WITHOUT_CLASSIFICATION	0.004713980285241815	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999625412607468	WITHOUT_CLASSIFICATION	3.745873925323173E-5	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999875467870563	WITHOUT_CLASSIFICATION	1.2453212943633937E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999951671847974	WITHOUT_CLASSIFICATION	4.832815202568288E-6	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999797648269	WITHOUT_CLASSIFICATION	2.023517304567051E-8	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999980195042707	WITHOUT_CLASSIFICATION	1.9804957293906507E-6	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999996631312452	WITHOUT_CLASSIFICATION	3.368687547512651E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999951671847974	WITHOUT_CLASSIFICATION	4.832815202568288E-6	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999998210603329	WITHOUT_CLASSIFICATION	1.7893966710227188E-6	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999976396134199	WITHOUT_CLASSIFICATION	2.3603865801127413E-6	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999977330527353	WITHOUT_CLASSIFICATION	2.2669472646199576E-6	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9999345866029015	WITHOUT_CLASSIFICATION	6.54133970985738E-5	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999903362605904	WITHOUT_CLASSIFICATION	9.663739409681856E-6	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999982894295407	WITHOUT_CLASSIFICATION	1.710570459217205E-6	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999992658614055	WITHOUT_CLASSIFICATION	7.341385943627358E-7	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999956117930523	WITHOUT_CLASSIFICATION	4.3882069477237605E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999972930626173	WITHOUT_CLASSIFICATION	2.706937382587121E-6	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999984020665293	WITHOUT_CLASSIFICATION	1.597933470706329E-6	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999960761737441	WITHOUT_CLASSIFICATION	3.923826255880755E-6	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999997158386278	WITHOUT_CLASSIFICATION	2.8416137224470424E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999784949022037	WITHOUT_CLASSIFICATION	2.1505097796393574E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999951272429485	WITHOUT_CLASSIFICATION	4.872757051588837E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999972930626173	WITHOUT_CLASSIFICATION	2.706937382587121E-6	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999960761737441	WITHOUT_CLASSIFICATION	3.923826255880755E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999784949022037	WITHOUT_CLASSIFICATION	2.1505097796393574E-5	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999979677859511	WITHOUT_CLASSIFICATION	2.0322140489464817E-6	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999512803205716	WITHOUT_CLASSIFICATION	4.871967942842984E-5	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999996107445337	WITHOUT_CLASSIFICATION	3.8925546624265773E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999949664679557	WITHOUT_CLASSIFICATION	5.033532044260894E-6	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.999996793256865	WITHOUT_CLASSIFICATION	3.206743134969929E-6	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999014468028634	WITHOUT_CLASSIFICATION	9.85531971366453E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9999902518460474	WITHOUT_CLASSIFICATION	9.748153952535645E-6	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999728738884773	WITHOUT_CLASSIFICATION	2.7126111522706516E-5	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999929217748241	WITHOUT_CLASSIFICATION	7.078225175895469E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999752567637	WITHOUT_CLASSIFICATION	2.4743236287622588E-8	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999990862548586	WITHOUT_CLASSIFICATION	9.137451415115064E-7	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999606926428494	WITHOUT_CLASSIFICATION	3.930735715061422E-5	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999554581795	WITHOUT_CLASSIFICATION	4.454182045116964E-8	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999970508790537	WITHOUT_CLASSIFICATION	2.949120946450828E-6	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999124726878462	WITHOUT_CLASSIFICATION	8.752731215374398E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999987199744768	WITHOUT_CLASSIFICATION	1.2800255233156017E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999678299382082	WITHOUT_CLASSIFICATION	3.217006179182615E-5	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999996933424424	WITHOUT_CLASSIFICATION	3.0665755756943066E-7	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999895814433475	WITHOUT_CLASSIFICATION	1.0418556652581464E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999972930626173	WITHOUT_CLASSIFICATION	2.706937382587121E-6	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999998852944618	WITHOUT_CLASSIFICATION	1.1470553827144535E-7	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999442018511	WITHOUT_CLASSIFICATION	5.579814886619016E-8	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999984666462821	WITHOUT_CLASSIFICATION	1.5333537179396193E-6	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999999618285144	WITHOUT_CLASSIFICATION	3.817148571318499E-8	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999999739613717	WITHOUT_CLASSIFICATION	2.6038628296703958E-8	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999784318457502	WITHOUT_CLASSIFICATION	2.156815424976821E-5	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999793112844	WITHOUT_CLASSIFICATION	2.068871560872313E-8	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999787540836	WITHOUT_CLASSIFICATION	2.12459163030408E-8	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999429306716385	WITHOUT_CLASSIFICATION	5.7069328361408104E-5	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999912801739024	WITHOUT_CLASSIFICATION	8.719826097630771E-6	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999931495621344	WITHOUT_CLASSIFICATION	6.85043786568348E-6	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.99999635630969	WITHOUT_CLASSIFICATION	3.6436903100965314E-6	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999986762233767	WITHOUT_CLASSIFICATION	1.3237766232933194E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999988432726076	WITHOUT_CLASSIFICATION	1.1567273923887963E-6	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999039750681	WITHOUT_CLASSIFICATION	9.602493188524005E-8	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999910093324288	WITHOUT_CLASSIFICATION	8.99066757121576E-6	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999799713434742	WITHOUT_CLASSIFICATION	2.0028656525859338E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999950516405355	WITHOUT_CLASSIFICATION	4.948359464611501E-6	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999984237707609	WITHOUT_CLASSIFICATION	1.5762292391621292E-6	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999940184547788	WITHOUT_CLASSIFICATION	5.981545221232033E-6	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999991213	WITHOUT_CLASSIFICATION	8.787630319040235E-13	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998097118966799	WITHOUT_CLASSIFICATION	1.902881033200332E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999996106762866	WITHOUT_CLASSIFICATION	3.893237134348989E-7	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.999996395522482	WITHOUT_CLASSIFICATION	3.604477517931289E-6	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999524058594361	WITHOUT_CLASSIFICATION	4.759414056383482E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999524058594361	WITHOUT_CLASSIFICATION	4.759414056383482E-5	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999926785186841	WITHOUT_CLASSIFICATION	7.321481315980692E-6	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999973716087642	WITHOUT_CLASSIFICATION	2.628391235861882E-6	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999991914466353	WITHOUT_CLASSIFICATION	8.085533647828508E-7	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999968223142024	WITHOUT_CLASSIFICATION	3.1776857976292795E-6	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999996535121244	WITHOUT_CLASSIFICATION	3.464878756080049E-6	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9991761847320437	WITHOUT_CLASSIFICATION	8.238152679562341E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999918130210597	WITHOUT_CLASSIFICATION	8.186978940369549E-6	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999942932052546	WITHOUT_CLASSIFICATION	5.706794745399029E-6	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999913078640585	WITHOUT_CLASSIFICATION	8.69213594137411E-6	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999994388677679	WITHOUT_CLASSIFICATION	5.61132232095279E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999743551832138	WITHOUT_CLASSIFICATION	2.5644816786165616E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999217237319226	WITHOUT_CLASSIFICATION	7.827626807741532E-5	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9995513367898587	WITHOUT_CLASSIFICATION	4.486632101412477E-4	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999814304643253	WITHOUT_CLASSIFICATION	1.856953567472265E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974212545852	WITHOUT_CLASSIFICATION	2.5787454147502384E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884614595232	WITHOUT_CLASSIFICATION	1.1538540476687353E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999554652929168	WITHOUT_CLASSIFICATION	4.453470708312953E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999839990517154	WITHOUT_CLASSIFICATION	1.600094828452918E-5	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9994859704181227	WITHOUT_CLASSIFICATION	5.1402958187732E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999853757363708	WITHOUT_CLASSIFICATION	1.4624263629213663E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.99997826053637	WITHOUT_CLASSIFICATION	2.1739463630085586E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.99997826053637	WITHOUT_CLASSIFICATION	2.1739463630085586E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999785023777296	WITHOUT_CLASSIFICATION	2.1497622270525544E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999785023777296	WITHOUT_CLASSIFICATION	2.1497622270525544E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999996106762866	WITHOUT_CLASSIFICATION	3.893237134348989E-7	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999972671223674	WITHOUT_CLASSIFICATION	2.7328776326269093E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998897217592425	WITHOUT_CLASSIFICATION	1.102782407575266E-4	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999984668531836	WITHOUT_CLASSIFICATION	1.533146816316312E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999974662816794	WITHOUT_CLASSIFICATION	2.5337183205255873E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998897217592425	WITHOUT_CLASSIFICATION	1.102782407575266E-4	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999984668531836	WITHOUT_CLASSIFICATION	1.533146816316312E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999948718239614	WITHOUT_CLASSIFICATION	5.128176038655794E-6	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999995004660988	WITHOUT_CLASSIFICATION	4.995339012102758E-7	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999691839047564	WITHOUT_CLASSIFICATION	3.081609524351662E-5	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.99999985247774	WITHOUT_CLASSIFICATION	1.4752225991632946E-7	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998527849891681	WITHOUT_CLASSIFICATION	1.4721501083182455E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999665999682428	WITHOUT_CLASSIFICATION	3.340003175717402E-5	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999996415753986	WITHOUT_CLASSIFICATION	3.584246014321635E-7	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.999998894011017	WITHOUT_CLASSIFICATION	1.1059889828536253E-6	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999951801168825	WITHOUT_CLASSIFICATION	4.819883117618396E-6	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999988093754	WITHOUT_CLASSIFICATION	1.1906245267422642E-9	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999995977321871	WITHOUT_CLASSIFICATION	4.022678129090223E-6	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999997707058245	WITHOUT_CLASSIFICATION	2.2929417553089038E-7	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999888982286	WITHOUT_CLASSIFICATION	1.1101771426308141E-8	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999935934940744	WITHOUT_CLASSIFICATION	6.4065059256706915E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999974662816794	WITHOUT_CLASSIFICATION	2.5337183205255873E-6	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999867968304901	WITHOUT_CLASSIFICATION	1.3203169509923268E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999763364973846	WITHOUT_CLASSIFICATION	2.3663502615436525E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999763364973846	WITHOUT_CLASSIFICATION	2.3663502615436525E-5	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999515645928808	WITHOUT_CLASSIFICATION	4.843540711909431E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999948718239614	WITHOUT_CLASSIFICATION	5.128176038655794E-6	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9995574895577757	WITHOUT_CLASSIFICATION	4.425104422242109E-4	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9996158083113797	WITHOUT_CLASSIFICATION	3.8419168862019915E-4	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9967451457631448	WITHOUT_CLASSIFICATION	0.0032548542368553307	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999962957658352	WITHOUT_CLASSIFICATION	3.7042341648057415E-5	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9988540909027538	WITHOUT_CLASSIFICATION	0.0011459090972461374	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999948718239614	WITHOUT_CLASSIFICATION	5.128176038655794E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999962957658352	WITHOUT_CLASSIFICATION	3.7042341648057415E-5	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9988540909027538	WITHOUT_CLASSIFICATION	0.0011459090972461374	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999954513152551	WITHOUT_CLASSIFICATION	4.5486847449445365E-6	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999991197264271	WITHOUT_CLASSIFICATION	8.802735728554977E-7	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9997061831257954	WITHOUT_CLASSIFICATION	2.938168742046359E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999948718239614	WITHOUT_CLASSIFICATION	5.128176038655794E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999948718239614	WITHOUT_CLASSIFICATION	5.128176038655794E-6	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999924002036719	WITHOUT_CLASSIFICATION	7.599796328088001E-6	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999979915297764	WITHOUT_CLASSIFICATION	2.008470223474725E-6	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999965785246311	WITHOUT_CLASSIFICATION	3.421475368897315E-6	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999983924110932	WITHOUT_CLASSIFICATION	1.6075889068580512E-6	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999970040000457	WITHOUT_CLASSIFICATION	2.995999954262732E-6	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999997935182007	WITHOUT_CLASSIFICATION	2.0648179931734827E-7	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999998759107386	WITHOUT_CLASSIFICATION	1.2408926138329134E-7	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999998302485372	WITHOUT_CLASSIFICATION	1.69751462825551E-7	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999992786781946	WITHOUT_CLASSIFICATION	7.213218053900406E-6	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999730784829609	WITHOUT_CLASSIFICATION	2.6921517039118878E-5	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999759543356567	WITHOUT_CLASSIFICATION	2.4045664343334726E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999974977769924	WITHOUT_CLASSIFICATION	2.502223007550097E-6	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999265196179	WITHOUT_CLASSIFICATION	7.348038219943878E-8	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999999319741202	WITHOUT_CLASSIFICATION	6.802587979672472E-7	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869619835022	WITHOUT_CLASSIFICATION	1.3038016497657808E-5	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9998626286059361	WITHOUT_CLASSIFICATION	1.373713940638603E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999977443290207	WITHOUT_CLASSIFICATION	2.2556709793555943E-6	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999957567964598	WITHOUT_CLASSIFICATION	4.243203540291237E-6	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9991608234897374	WITHOUT_CLASSIFICATION	8.391765102625035E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999223331058	WITHOUT_CLASSIFICATION	7.766689432499985E-8	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999912429372039	WITHOUT_CLASSIFICATION	8.757062796183634E-6	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999046708575425	WITHOUT_CLASSIFICATION	9.532914245757789E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999046708575425	WITHOUT_CLASSIFICATION	9.532914245757789E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999977443290207	WITHOUT_CLASSIFICATION	2.2556709793555943E-6	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999578743495796	WITHOUT_CLASSIFICATION	4.212565042039622E-4	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999484734528049	WITHOUT_CLASSIFICATION	5.1526547195144645E-5	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9912820086659115	WITHOUT_CLASSIFICATION	0.008717991334088468	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999990920096041	WITHOUT_CLASSIFICATION	9.079903958378661E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999485663889213	WITHOUT_CLASSIFICATION	5.143361107868187E-5	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999994580072781	WITHOUT_CLASSIFICATION	5.419927218613958E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9978536069221748	WITHOUT_CLASSIFICATION	0.002146393077825035	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999999970869689	WITHOUT_CLASSIFICATION	2.913031015024062E-9	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999986110585	WITHOUT_CLASSIFICATION	1.3889415611106013E-9	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906834302066	WITHOUT_CLASSIFICATION	9.31656979342751E-6	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999992996784668	WITHOUT_CLASSIFICATION	7.003215332185225E-7	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9958202777965125	WITHOUT_CLASSIFICATION	0.004179722203487453	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999897916852944	WITHOUT_CLASSIFICATION	1.0208314705601487E-4	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999675023092448	WITHOUT_CLASSIFICATION	3.249769075523594E-5	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999999992850364	WITHOUT_CLASSIFICATION	7.149636010945806E-9	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999899841373872	WITHOUT_CLASSIFICATION	1.0015862612813737E-5	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999789880164003	WITHOUT_CLASSIFICATION	2.101198359971612E-5	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999635074004924	WITHOUT_CLASSIFICATION	3.649259950759294E-5	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999967793271876	WITHOUT_CLASSIFICATION	3.2206728124124042E-6	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995016507817	WITHOUT_CLASSIFICATION	4.983492183787776E-7	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999595037183824	WITHOUT_CLASSIFICATION	4.049628161760159E-5	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999985674103037	WITHOUT_CLASSIFICATION	1.4325896962978898E-5	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999994448449528	WITHOUT_CLASSIFICATION	5.551550472015642E-7	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998739493504182	WITHOUT_CLASSIFICATION	1.2605064958180875E-4	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729634901491	WITHOUT_CLASSIFICATION	2.7036509850964653E-5	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751490182252	WITHOUT_CLASSIFICATION	2.4850981774758734E-5	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890972476828	WITHOUT_CLASSIFICATION	1.0902752317325444E-5	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999953457989256	WITHOUT_CLASSIFICATION	4.65420107440505E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713478464893	WITHOUT_CLASSIFICATION	2.8652153510551177E-5	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999584387959963	WITHOUT_CLASSIFICATION	4.156120400369386E-5	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999552185164483	WITHOUT_CLASSIFICATION	4.47814835517591E-5	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.999998734385851	WITHOUT_CLASSIFICATION	1.2656141490215953E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999979271558427	WITHOUT_CLASSIFICATION	2.0728441573875136E-6	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953555505402	WITHOUT_CLASSIFICATION	4.644449459709708E-6	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993479526372	WITHOUT_CLASSIFICATION	6.520473627941969E-7	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945414973036	WITHOUT_CLASSIFICATION	5.458502696366221E-6	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999837988373331	WITHOUT_CLASSIFICATION	1.6201162666900792E-5	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999585663922499	WITHOUT_CLASSIFICATION	4.143360775006442E-5	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960453674824	WITHOUT_CLASSIFICATION	3.954632517508609E-6	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999801089646545	WITHOUT_CLASSIFICATION	1.9891035345453537E-5	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547521543285	WITHOUT_CLASSIFICATION	4.5247845671484245E-5	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9997886218381409	WITHOUT_CLASSIFICATION	2.1137816185915016E-4	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960078169278	WITHOUT_CLASSIFICATION	3.992183072194717E-5	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9953495546031591	WITHOUT_CLASSIFICATION	0.0046504453968409095	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998136025520479	WITHOUT_CLASSIFICATION	1.8639744795199002E-4	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999993323347	WITHOUT_CLASSIFICATION	6.676652939827509E-10	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999992048705107	WITHOUT_CLASSIFICATION	7.951294892397325E-7	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9999979081451249	WITHOUT_CLASSIFICATION	2.0918548750974598E-6	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999984068144527	WITHOUT_CLASSIFICATION	1.593185547252279E-6	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999983763309648	WITHOUT_CLASSIFICATION	1.623669035181346E-6	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999986484536915	WITHOUT_CLASSIFICATION	1.3515463086311172E-6	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999991599599746	WITHOUT_CLASSIFICATION	8.400400253971174E-6	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999968009773448	WITHOUT_CLASSIFICATION	3.199022655259631E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906834302066	WITHOUT_CLASSIFICATION	9.31656979342751E-6	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999999229437055	WITHOUT_CLASSIFICATION	7.705629450142927E-7	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999923888146992	WITHOUT_CLASSIFICATION	7.611185300806356E-6	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999961209887879	WITHOUT_CLASSIFICATION	3.8790112121313825E-6	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9892204318789133	WITHOUT_CLASSIFICATION	0.010779568121086713	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9997467541068494	WITHOUT_CLASSIFICATION	2.532458931505134E-4	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999841024642889	WITHOUT_CLASSIFICATION	1.5897535711042272E-5	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9994199725412702	WITHOUT_CLASSIFICATION	5.800274587298543E-4	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935212735434	WITHOUT_CLASSIFICATION	6.4787264566870595E-6	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640371350847	WITHOUT_CLASSIFICATION	3.596286491514712E-5	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969621392955	WITHOUT_CLASSIFICATION	3.0378607045252633E-6	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999845017265424	WITHOUT_CLASSIFICATION	1.549827345754915E-5	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999837983267833	WITHOUT_CLASSIFICATION	1.62016732166517E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999997872858025	WITHOUT_CLASSIFICATION	2.1271419742065272E-7	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999988005901722	WITHOUT_CLASSIFICATION	1.1994098278114775E-6	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9995700618253612	WITHOUT_CLASSIFICATION	4.299381746388767E-4	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999302287008	WITHOUT_CLASSIFICATION	6.977129913683744E-8	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999973657928315	WITHOUT_CLASSIFICATION	2.6342071685161856E-6	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999850830574006	WITHOUT_CLASSIFICATION	1.4916942599367452E-5	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999992259443137	WITHOUT_CLASSIFICATION	7.74055686238601E-7	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999893790236	WITHOUT_CLASSIFICATION	1.0620976416929822E-8	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999999657248467	WITHOUT_CLASSIFICATION	3.427515330632705E-7	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999987266547746	WITHOUT_CLASSIFICATION	1.273345225349758E-6	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999795547131138	WITHOUT_CLASSIFICATION	2.044528688613188E-5	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999998166967643	WITHOUT_CLASSIFICATION	1.833032355797063E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906834302066	WITHOUT_CLASSIFICATION	9.31656979342751E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999992048705107	WITHOUT_CLASSIFICATION	7.951294892397325E-7	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999865446986951	WITHOUT_CLASSIFICATION	1.345530130486727E-5	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999996360862826	WITHOUT_CLASSIFICATION	3.6391371729824964E-7	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999580522856409	WITHOUT_CLASSIFICATION	4.194771435911875E-5	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9978868157728567	WITHOUT_CLASSIFICATION	0.002113184227143413	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999497813421946	WITHOUT_CLASSIFICATION	5.021865780531644E-5	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999993683194032	WITHOUT_CLASSIFICATION	6.316805969175585E-7	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999077717836333	WITHOUT_CLASSIFICATION	9.22282163667137E-5	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9978855944363945	WITHOUT_CLASSIFICATION	0.0021144055636054294	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.99996786040819	WITHOUT_CLASSIFICATION	3.213959181005861E-5	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999641445025435	WITHOUT_CLASSIFICATION	3.585549745656E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999531046769161	WITHOUT_CLASSIFICATION	4.689532308387114E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999727663275394	WITHOUT_CLASSIFICATION	2.723367246064335E-5	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999903379478	WITHOUT_CLASSIFICATION	9.662052197180668E-9	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906834302066	WITHOUT_CLASSIFICATION	9.31656979342751E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906834302066	WITHOUT_CLASSIFICATION	9.31656979342751E-6	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999689460930085	WITHOUT_CLASSIFICATION	3.105390699147649E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999948402699949	WITHOUT_CLASSIFICATION	5.1597300052066585E-6	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999996985497073	WITHOUT_CLASSIFICATION	3.0145029270994034E-7	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999047187946507	WITHOUT_CLASSIFICATION	9.52812053494042E-5	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995094050353187	WITHOUT_CLASSIFICATION	4.905949646812694E-4	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999170379938	WITHOUT_CLASSIFICATION	8.296200609141323E-8	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999990091837047	WITHOUT_CLASSIFICATION	9.908162953654113E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906834302066	WITHOUT_CLASSIFICATION	9.31656979342751E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999998331085261	WITHOUT_CLASSIFICATION	1.6689147395081429E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999989229617965	WITHOUT_CLASSIFICATION	1.0770382035222433E-6	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998743966295052	WITHOUT_CLASSIFICATION	1.256033704947982E-4	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999954818597261	WITHOUT_CLASSIFICATION	4.518140273899922E-6	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999941565735977	WITHOUT_CLASSIFICATION	5.843426402322214E-6	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999605510271	WITHOUT_CLASSIFICATION	3.944897280407394E-8	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9778673883576475	WITHOUT_CLASSIFICATION	0.022132611642352452	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999974272090267	WITHOUT_CLASSIFICATION	2.5727909732477956E-6	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999999723133639	WITHOUT_CLASSIFICATION	2.7686636099577076E-7	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999947239635394	WITHOUT_CLASSIFICATION	5.27603646060346E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999992048705107	WITHOUT_CLASSIFICATION	7.951294892397325E-7	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9833228750094062	WITHOUT_CLASSIFICATION	0.01667712499059383	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999839256168097	WITHOUT_CLASSIFICATION	1.607438319031487E-5	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9881931672287546	WITHOUT_CLASSIFICATION	0.01180683277124546	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999992048705107	WITHOUT_CLASSIFICATION	7.951294892397325E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.999999700214863	WITHOUT_CLASSIFICATION	2.997851370298276E-7	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999998331085261	WITHOUT_CLASSIFICATION	1.6689147395081429E-7	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9979234260914268	WITHOUT_CLASSIFICATION	0.002076573908573176	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906834302066	WITHOUT_CLASSIFICATION	9.31656979342751E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9990698322430083	WITHOUT_CLASSIFICATION	9.301677569916014E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906834302066	WITHOUT_CLASSIFICATION	9.31656979342751E-6	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999800636662889	WITHOUT_CLASSIFICATION	1.993633371113419E-5	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999641445025435	WITHOUT_CLASSIFICATION	3.585549745656E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999531046769161	WITHOUT_CLASSIFICATION	4.689532308387114E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999727663275394	WITHOUT_CLASSIFICATION	2.723367246064335E-5	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999242832439	WITHOUT_CLASSIFICATION	7.571675607172514E-8	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999994815042371	WITHOUT_CLASSIFICATION	5.184957628596362E-7	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999933920519721	WITHOUT_CLASSIFICATION	6.607948027878233E-6	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9998080542286785	WITHOUT_CLASSIFICATION	1.919457713215974E-4	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999253698674976	WITHOUT_CLASSIFICATION	7.46301325023829E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906834302066	WITHOUT_CLASSIFICATION	9.31656979342751E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999992048705107	WITHOUT_CLASSIFICATION	7.951294892397325E-7	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999903379478	WITHOUT_CLASSIFICATION	9.662052197180668E-9	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999689460930085	WITHOUT_CLASSIFICATION	3.105390699147649E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998039000401	WITHOUT_CLASSIFICATION	1.9609995992099155E-7	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975835919838	WITHOUT_CLASSIFICATION	2.416408016206032E-5	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999995058526081	WITHOUT_CLASSIFICATION	4.941473919506588E-7	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999989939671377	WITHOUT_CLASSIFICATION	1.006032862385252E-6	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999987540232399	WITHOUT_CLASSIFICATION	1.2459767600679494E-6	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999986813794199	WITHOUT_CLASSIFICATION	1.3186205800999707E-6	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547521543285	WITHOUT_CLASSIFICATION	4.5247845671484245E-5	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9998657307344068	WITHOUT_CLASSIFICATION	1.3426926559330135E-4	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999998930060907	WITHOUT_CLASSIFICATION	1.0699390928141715E-7	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999995487088078	WITHOUT_CLASSIFICATION	4.5129119221887543E-7	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999567400989	WITHOUT_CLASSIFICATION	4.325990105617332E-8	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999601608615	WITHOUT_CLASSIFICATION	3.9839138640083695E-8	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999953457989256	WITHOUT_CLASSIFICATION	4.65420107440505E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713478464893	WITHOUT_CLASSIFICATION	2.8652153510551177E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993479526372	WITHOUT_CLASSIFICATION	6.520473627941969E-7	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999601608615	WITHOUT_CLASSIFICATION	3.9839138640083695E-8	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999997210540889	WITHOUT_CLASSIFICATION	2.7894591121731333E-7	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999963525768968	WITHOUT_CLASSIFICATION	3.647423103109798E-6	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992451374992127	WITHOUT_CLASSIFICATION	7.548625007871946E-4	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998907134921226	WITHOUT_CLASSIFICATION	1.0928650787744332E-4	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9978397792093555	WITHOUT_CLASSIFICATION	0.002160220790644497	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906834302066	WITHOUT_CLASSIFICATION	9.31656979342751E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906834302066	WITHOUT_CLASSIFICATION	9.31656979342751E-6	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.999798236994211	WITHOUT_CLASSIFICATION	2.0176300578899964E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945414973036	WITHOUT_CLASSIFICATION	5.458502696366221E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960453674824	WITHOUT_CLASSIFICATION	3.954632517508609E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999893790236	WITHOUT_CLASSIFICATION	1.0620976416929822E-8	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999952181326105	WITHOUT_CLASSIFICATION	4.781867389478048E-6	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999999439034973	WITHOUT_CLASSIFICATION	5.609650269513271E-7	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999992942771857	WITHOUT_CLASSIFICATION	7.057228143498092E-7	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999469980895	WITHOUT_CLASSIFICATION	5.3001910592969E-8	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999991817368156	WITHOUT_CLASSIFICATION	8.182631843186147E-7	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999996740528871	WITHOUT_CLASSIFICATION	3.259471127696397E-7	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999859123845467	WITHOUT_CLASSIFICATION	1.408761545322474E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999823671318658	WITHOUT_CLASSIFICATION	1.7632868134200953E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999986110585	WITHOUT_CLASSIFICATION	1.3889415611106013E-9	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999988130366902	WITHOUT_CLASSIFICATION	1.1869633098032743E-5	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999998094710536	WITHOUT_CLASSIFICATION	1.905289463995815E-7	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999905662353995	WITHOUT_CLASSIFICATION	9.43376460052291E-6	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999890086508004	WITHOUT_CLASSIFICATION	1.0991349199640285E-5	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999998728418978	WITHOUT_CLASSIFICATION	1.2715810216532495E-7	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999983783813621	WITHOUT_CLASSIFICATION	1.6216186379089905E-6	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981744331359	WITHOUT_CLASSIFICATION	1.8255668641604677E-6	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736184443857	WITHOUT_CLASSIFICATION	2.6381555614255996E-5	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999756875446	WITHOUT_CLASSIFICATION	2.431245540984184E-7	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999908138020549	WITHOUT_CLASSIFICATION	9.186197945161316E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999708855651367	WITHOUT_CLASSIFICATION	2.9114434863277155E-5	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991259980054	WITHOUT_CLASSIFICATION	8.740019946674348E-7	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996002808219	WITHOUT_CLASSIFICATION	3.9971917809609035E-7	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997775828038	WITHOUT_CLASSIFICATION	2.2241719628857785E-7	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997493411332	WITHOUT_CLASSIFICATION	2.506588667396332E-7	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999956639865037	WITHOUT_CLASSIFICATION	4.336013496215052E-6	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999998721660951	WITHOUT_CLASSIFICATION	1.278339049002211E-7	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997590374391	WITHOUT_CLASSIFICATION	2.4096256088500726E-7	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999058548064236	WITHOUT_CLASSIFICATION	9.414519357636716E-5	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999608095737	WITHOUT_CLASSIFICATION	3.919042628059622E-8	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945756267227	WITHOUT_CLASSIFICATION	5.424373277288602E-6	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999999311069131	WITHOUT_CLASSIFICATION	6.889308691009061E-7	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999032396907124	WITHOUT_CLASSIFICATION	9.676030928765866E-5	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999559354673259	WITHOUT_CLASSIFICATION	4.4064532674208504E-5	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999738334242401	WITHOUT_CLASSIFICATION	2.6166575759942777E-5	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999894472051731	WITHOUT_CLASSIFICATION	1.0552794826954877E-5	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999945493125135	WITHOUT_CLASSIFICATION	5.450687486526845E-6	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999946467953083	WITHOUT_CLASSIFICATION	5.3532046916981305E-6	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999974278952541	WITHOUT_CLASSIFICATION	2.572104745892747E-5	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999986773159101	WITHOUT_CLASSIFICATION	1.3226840899809834E-6	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999973569307605	WITHOUT_CLASSIFICATION	2.6430692394731984E-6	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9998932921157614	WITHOUT_CLASSIFICATION	1.067078842386696E-4	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999978871029493	WITHOUT_CLASSIFICATION	2.1128970506765098E-6	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999998980759067	WITHOUT_CLASSIFICATION	1.0192409321108117E-7	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999994959271981	WITHOUT_CLASSIFICATION	5.040728019286494E-7	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999951779295789	WITHOUT_CLASSIFICATION	4.822070421090373E-6	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999998656959905	WITHOUT_CLASSIFICATION	1.343040094527677E-7	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999994981902893	WITHOUT_CLASSIFICATION	5.01809710669588E-7	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999995421664616	WITHOUT_CLASSIFICATION	4.578335384853984E-7	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999373791402	WITHOUT_CLASSIFICATION	6.262085984199807E-8	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999997960675194	WITHOUT_CLASSIFICATION	2.0393248052067996E-7	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999979585126798	WITHOUT_CLASSIFICATION	2.041487320293407E-6	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9797461165257291	WITHOUT_CLASSIFICATION	0.020253883474271005	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.999999691317678	WITHOUT_CLASSIFICATION	3.086823220649836E-7	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999581108743895	WITHOUT_CLASSIFICATION	4.188912561060321E-5	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999578492702	WITHOUT_CLASSIFICATION	4.215072971874997E-8	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999996952750497	WITHOUT_CLASSIFICATION	3.047249502479968E-7	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999989374795332	WITHOUT_CLASSIFICATION	1.0625204667808228E-6	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999947750161281	WITHOUT_CLASSIFICATION	5.2249838719645744E-6	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999985453834153	WITHOUT_CLASSIFICATION	1.4546165846809425E-6	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999994817776552	WITHOUT_CLASSIFICATION	5.182223447974094E-7	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999995091802282	WITHOUT_CLASSIFICATION	4.908197718919617E-7	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999974907136356	WITHOUT_CLASSIFICATION	2.5092863643475863E-6	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999969546441647	WITHOUT_CLASSIFICATION	3.0453558353873893E-6	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999878784849288	WITHOUT_CLASSIFICATION	1.212151507115322E-5	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9987162068863692	WITHOUT_CLASSIFICATION	0.0012837931136308724	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999801308059199	WITHOUT_CLASSIFICATION	1.9869194080120836E-5	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999992186277574	WITHOUT_CLASSIFICATION	7.813722426081165E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999936084245152	WITHOUT_CLASSIFICATION	6.391575484866488E-6	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999993460114285	WITHOUT_CLASSIFICATION	6.539885715648437E-7	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999820884340496	WITHOUT_CLASSIFICATION	1.7911565950374942E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999970324689944	WITHOUT_CLASSIFICATION	2.967531005663205E-6	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9954278810222477	WITHOUT_CLASSIFICATION	0.004572118977752273	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9991782689601975	WITHOUT_CLASSIFICATION	8.217310398025282E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999989071213603	WITHOUT_CLASSIFICATION	1.092878639769835E-6	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9962519734546589	WITHOUT_CLASSIFICATION	0.0037480265453411206	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999970956173362	WITHOUT_CLASSIFICATION	2.9043826639257096E-6	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9986814379983384	WITHOUT_CLASSIFICATION	0.0013185620016615478	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999668590675154	WITHOUT_CLASSIFICATION	3.314093248459132E-5	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999798338218892	WITHOUT_CLASSIFICATION	2.0166178110762077E-5	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999996668114129	WITHOUT_CLASSIFICATION	3.331885870925188E-6	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999997656189286	WITHOUT_CLASSIFICATION	2.3438107144690147E-7	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999982938740894	WITHOUT_CLASSIFICATION	1.7061259106064768E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999968909207616	WITHOUT_CLASSIFICATION	3.1090792384067764E-6	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998888833070818	WITHOUT_CLASSIFICATION	1.1111669291812376E-4	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999888988765536	WITHOUT_CLASSIFICATION	1.1101123446305733E-5	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999996676908001	WITHOUT_CLASSIFICATION	3.323091999490274E-7	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999998635897235	WITHOUT_CLASSIFICATION	1.3641027649856824E-7	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999999152035534	WITHOUT_CLASSIFICATION	8.479644658809923E-7	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999994419426014	WITHOUT_CLASSIFICATION	5.580573986156427E-7	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999905745202768	WITHOUT_CLASSIFICATION	9.425479723117925E-6	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999970013041733	WITHOUT_CLASSIFICATION	2.998695826774169E-6	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999983059316434	WITHOUT_CLASSIFICATION	1.6940683566133137E-6	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999981838277493	WITHOUT_CLASSIFICATION	1.8161722507033486E-6	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998717449487895	WITHOUT_CLASSIFICATION	1.282550512105069E-4	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9997977525323948	WITHOUT_CLASSIFICATION	2.0224746760528405E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999941147746715	WITHOUT_CLASSIFICATION	5.885225328527519E-6	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999890146346799	WITHOUT_CLASSIFICATION	1.0985365320138976E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999994413273873	WITHOUT_CLASSIFICATION	5.586726127187273E-7	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999975861206283	WITHOUT_CLASSIFICATION	2.413879371735605E-6	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9993042855263293	WITHOUT_CLASSIFICATION	6.957144736706956E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999348057302581	WITHOUT_CLASSIFICATION	6.519426974194877E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999996003454805	WITHOUT_CLASSIFICATION	3.996545195601549E-7	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9993042855263293	WITHOUT_CLASSIFICATION	6.957144736706956E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999642616615	WITHOUT_CLASSIFICATION	3.5738338527573625E-8	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999999481462134	WITHOUT_CLASSIFICATION	5.185378660356071E-8	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999979867842873	WITHOUT_CLASSIFICATION	2.013215712619777E-6	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998160336061435	WITHOUT_CLASSIFICATION	1.8396639385652138E-4	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999998305876784	WITHOUT_CLASSIFICATION	1.6941232161354716E-7	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999718773194	WITHOUT_CLASSIFICATION	2.8122680702641385E-8	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999658552648774	WITHOUT_CLASSIFICATION	3.4144735122662325E-5	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999998916976893	WITHOUT_CLASSIFICATION	1.0830231069677268E-7	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999992021351894	WITHOUT_CLASSIFICATION	7.978648106685204E-7	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999943983174587	WITHOUT_CLASSIFICATION	5.6016825412911745E-6	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999972884791798	WITHOUT_CLASSIFICATION	2.7115208202286256E-6	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999969359825697	WITHOUT_CLASSIFICATION	3.064017430228534E-6	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999088107878	WITHOUT_CLASSIFICATION	9.118921218261286E-8	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999851271563	WITHOUT_CLASSIFICATION	1.4872843803730868E-8	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999990786517488	WITHOUT_CLASSIFICATION	9.213482513588026E-7	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999944333171755	WITHOUT_CLASSIFICATION	5.566682824488015E-6	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999564539784838	WITHOUT_CLASSIFICATION	4.354602151616963E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999564539784838	WITHOUT_CLASSIFICATION	4.354602151616963E-5	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999971909961797	WITHOUT_CLASSIFICATION	2.8090038202799618E-6	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9998698059719399	WITHOUT_CLASSIFICATION	1.3019402806014682E-4	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998930349892424	WITHOUT_CLASSIFICATION	1.069650107576154E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.999987610620528	WITHOUT_CLASSIFICATION	1.2389379472057455E-5	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999974784732291	WITHOUT_CLASSIFICATION	2.5215267708637553E-6	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.8729268658054283	WITHOUT_CLASSIFICATION	0.12707313419457167	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9998686120587613	WITHOUT_CLASSIFICATION	1.3138794123869593E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999842311631	WITHOUT_CLASSIFICATION	1.5768836851996853E-8	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999971313684467	WITHOUT_CLASSIFICATION	2.8686315532457585E-6	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9993667493095529	WITHOUT_CLASSIFICATION	6.332506904470749E-4	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9992300600494649	WITHOUT_CLASSIFICATION	7.699399505351378E-4	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999929304301	WITHOUT_CLASSIFICATION	7.069569873859805E-9	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999581594602	WITHOUT_CLASSIFICATION	4.1840539885942715E-8	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999994769539636	WITHOUT_CLASSIFICATION	5.230460364486544E-7	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999698037079	WITHOUT_CLASSIFICATION	3.019629223130957E-8	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999983783813621	WITHOUT_CLASSIFICATION	1.6216186379089905E-6	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999941827609352	WITHOUT_CLASSIFICATION	5.81723906476182E-6	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999996869743583	WITHOUT_CLASSIFICATION	3.1302564176147707E-7	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9997881254406985	WITHOUT_CLASSIFICATION	2.1187455930140212E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999982055052404	WITHOUT_CLASSIFICATION	1.7944947594910892E-6	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999406693908	WITHOUT_CLASSIFICATION	5.933060916152319E-8	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9999626281638638	WITHOUT_CLASSIFICATION	3.737183613616889E-5	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999986486858529	WITHOUT_CLASSIFICATION	1.3513141471429754E-6	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998093471886	WITHOUT_CLASSIFICATION	1.906528114522494E-7	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999996685052133	WITHOUT_CLASSIFICATION	3.314947867075662E-7	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999990281569633	WITHOUT_CLASSIFICATION	9.718430367531576E-7	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999497095847	WITHOUT_CLASSIFICATION	5.029041519096453E-8	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999999145423039	WITHOUT_CLASSIFICATION	8.545769610338117E-7	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.999994453881896	WITHOUT_CLASSIFICATION	5.5461181040358614E-6	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999794321025757	WITHOUT_CLASSIFICATION	2.056789742428897E-5	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.999998133818233	WITHOUT_CLASSIFICATION	1.866181767062573E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999984108515407	WITHOUT_CLASSIFICATION	1.5891484593447808E-6	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9996747254185092	WITHOUT_CLASSIFICATION	3.252745814908512E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999992499879395	WITHOUT_CLASSIFICATION	7.500120605782089E-7	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999946119091505	WITHOUT_CLASSIFICATION	5.3880908494843515E-6	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999980661868315	WITHOUT_CLASSIFICATION	1.9338131684940044E-6	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999934144611479	WITHOUT_CLASSIFICATION	6.5855388520691575E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999618251053033	WITHOUT_CLASSIFICATION	3.817489469675069E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999947455918681	WITHOUT_CLASSIFICATION	5.254408131869922E-6	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9993699628863413	WITHOUT_CLASSIFICATION	6.300371136587134E-4	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999999020601716	WITHOUT_CLASSIFICATION	9.793982836436708E-8	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999994282391345	WITHOUT_CLASSIFICATION	5.717608654698355E-7	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9980237396501818	WITHOUT_CLASSIFICATION	0.0019762603498182972	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999998428566468	WITHOUT_CLASSIFICATION	1.5714335319736678E-6	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999891654585586	WITHOUT_CLASSIFICATION	1.0834541441284272E-5	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999985926973955	WITHOUT_CLASSIFICATION	1.40730260454193E-6	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999687506918553	WITHOUT_CLASSIFICATION	3.124930814479723E-5	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999586136878301	WITHOUT_CLASSIFICATION	4.138631216976294E-5	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916584861472	WITHOUT_CLASSIFICATION	8.341513852773478E-6	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.8299317693376322	WITHOUT_CLASSIFICATION	0.17006823066236765	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999685499526504	WITHOUT_CLASSIFICATION	3.145004734962528E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999823671318658	WITHOUT_CLASSIFICATION	1.7632868134200953E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999823671318658	WITHOUT_CLASSIFICATION	1.7632868134200953E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999261023671	WITHOUT_CLASSIFICATION	7.389763289672418E-7	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9994771406841457	WITHOUT_CLASSIFICATION	5.228593158542425E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9955438428237041	WITHOUT_CLASSIFICATION	0.004456157176295883	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995125352096315	WITHOUT_CLASSIFICATION	4.87464790368596E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9955438428237041	WITHOUT_CLASSIFICATION	0.004456157176295883	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999964022905709	WITHOUT_CLASSIFICATION	3.5977094291357083E-6	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999976045842971	WITHOUT_CLASSIFICATION	2.395415702840684E-6	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999993810010747	WITHOUT_CLASSIFICATION	6.189989254307176E-7	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999998864288181	WITHOUT_CLASSIFICATION	1.1357118190050576E-6	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.99999981368405	WITHOUT_CLASSIFICATION	1.8631594993913233E-7	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.999998555705704	WITHOUT_CLASSIFICATION	1.444294295976301E-6	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998762826106	WITHOUT_CLASSIFICATION	1.237173895287066E-7	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999899145560024	WITHOUT_CLASSIFICATION	1.008544399772367E-5	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999997331227817	WITHOUT_CLASSIFICATION	2.6687721840286934E-7	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999990010534107	WITHOUT_CLASSIFICATION	9.989465893507792E-7	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999972698857542	WITHOUT_CLASSIFICATION	2.7301142457637144E-6	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999883873932552	WITHOUT_CLASSIFICATION	1.1612606744789661E-5	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999956935601501	WITHOUT_CLASSIFICATION	4.3064398498705474E-6	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.996482163045828	WITHOUT_CLASSIFICATION	0.0035178369541719917	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999939277988	WITHOUT_CLASSIFICATION	6.072201169308968E-9	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999255688833274	WITHOUT_CLASSIFICATION	7.443111667260703E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999865205409353	WITHOUT_CLASSIFICATION	1.3479459064783436E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999865205409353	WITHOUT_CLASSIFICATION	1.3479459064783436E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999961872639201	WITHOUT_CLASSIFICATION	3.812736079853347E-6	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999980896237469	WITHOUT_CLASSIFICATION	1.910376253010328E-6	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999986845581985	WITHOUT_CLASSIFICATION	1.3154418014375417E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999998128822032	WITHOUT_CLASSIFICATION	1.8711779682324175E-7	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999956968337662	WITHOUT_CLASSIFICATION	4.303166233842683E-6	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999569935292846	WITHOUT_CLASSIFICATION	4.300647071535505E-5	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999773826680773	WITHOUT_CLASSIFICATION	2.26173319226309E-5	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999927385879847	WITHOUT_CLASSIFICATION	7.261412015323532E-6	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999997205292752	WITHOUT_CLASSIFICATION	2.7947072485648936E-7	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999990180775203	WITHOUT_CLASSIFICATION	9.819224796845491E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999977941035474	WITHOUT_CLASSIFICATION	2.205896452517923E-6	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.99999995601115	WITHOUT_CLASSIFICATION	4.398884998353945E-8	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999993167051665	WITHOUT_CLASSIFICATION	6.832948336271847E-7	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999886035768579	WITHOUT_CLASSIFICATION	1.1396423142122155E-5	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999965422573588	WITHOUT_CLASSIFICATION	3.4577426411839636E-6	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999995413911211	WITHOUT_CLASSIFICATION	4.5860887884140924E-7	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999996497112161	WITHOUT_CLASSIFICATION	3.5028878380413086E-7	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999994253712127	WITHOUT_CLASSIFICATION	5.746287873018545E-6	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999985222273904	WITHOUT_CLASSIFICATION	1.4777726096972984E-6	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999954311042	WITHOUT_CLASSIFICATION	4.5688958153016826E-9	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999986196880181	WITHOUT_CLASSIFICATION	1.380311981879666E-6	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999425730824	WITHOUT_CLASSIFICATION	5.7426917565300325E-8	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999810432451	WITHOUT_CLASSIFICATION	1.895675499230946E-8	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999775828284	WITHOUT_CLASSIFICATION	2.2417171477853164E-8	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.99999745863903	WITHOUT_CLASSIFICATION	2.541360969926662E-6	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.999999261461604	WITHOUT_CLASSIFICATION	7.385383960143952E-7	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999951783418022	WITHOUT_CLASSIFICATION	4.8216581978852585E-6	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999233732366183	WITHOUT_CLASSIFICATION	7.66267633816749E-5	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999826868889201	WITHOUT_CLASSIFICATION	1.731311107988744E-5	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999808794677794	WITHOUT_CLASSIFICATION	1.912053222064322E-5	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999946772111182	WITHOUT_CLASSIFICATION	5.32278888171257E-6	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999992624745083	WITHOUT_CLASSIFICATION	7.375254916895888E-7	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9994780398974119	WITHOUT_CLASSIFICATION	5.219601025879968E-4	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999985822895656	WITHOUT_CLASSIFICATION	1.417710434438139E-6	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999850247989036	WITHOUT_CLASSIFICATION	1.4975201096476085E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999139228144	WITHOUT_CLASSIFICATION	8.607718558514679E-8	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999798855779	WITHOUT_CLASSIFICATION	2.011442209247928E-7	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999984783631839	WITHOUT_CLASSIFICATION	1.5216368161261197E-6	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9998229127342112	WITHOUT_CLASSIFICATION	1.7708726578894235E-4	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999961292423856	WITHOUT_CLASSIFICATION	3.870757614429485E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999955796411365	WITHOUT_CLASSIFICATION	4.420358863591621E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999789877712192	WITHOUT_CLASSIFICATION	2.101222878086007E-5	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999954691366996	WITHOUT_CLASSIFICATION	4.530863300439417E-6	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9997550058725229	WITHOUT_CLASSIFICATION	2.4499412747715996E-4	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999999812785724	WITHOUT_CLASSIFICATION	1.8721427595627186E-7	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9862038075360408	WITHOUT_CLASSIFICATION	0.013796192463959214	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9827651285419725	WITHOUT_CLASSIFICATION	0.017234871458027448	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999620842542	WITHOUT_CLASSIFICATION	3.791574577804496E-8	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999989000002901	WITHOUT_CLASSIFICATION	1.0999997098749657E-6	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999973668690252	WITHOUT_CLASSIFICATION	2.6331309748092548E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999913830997431	WITHOUT_CLASSIFICATION	8.616900256839237E-6	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999998254099974	WITHOUT_CLASSIFICATION	1.7459000260096451E-7	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9983829152890584	WITHOUT_CLASSIFICATION	0.0016170847109415606	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999999827272463	WITHOUT_CLASSIFICATION	1.7272753701630374E-7	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999969911358049	WITHOUT_CLASSIFICATION	3.0088641951922336E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.999999700214863	WITHOUT_CLASSIFICATION	2.997851370298276E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.999999700214863	WITHOUT_CLASSIFICATION	2.997851370298276E-7	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999995293054719	WITHOUT_CLASSIFICATION	4.706945281271796E-7	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999471717783566	WITHOUT_CLASSIFICATION	5.282822164352315E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999786663270298	WITHOUT_CLASSIFICATION	2.13336729701003E-5	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999942844476211	WITHOUT_CLASSIFICATION	5.715552378937088E-6	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999968597049353	WITHOUT_CLASSIFICATION	3.14029506455917E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999538398562461	WITHOUT_CLASSIFICATION	4.616014375394759E-5	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999878709254699	WITHOUT_CLASSIFICATION	1.212907453010835E-5	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999999462850786	WITHOUT_CLASSIFICATION	5.371492142661712E-8	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.99998993623946	WITHOUT_CLASSIFICATION	1.0063760540075682E-5	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999998165760315	WITHOUT_CLASSIFICATION	1.8342396846159612E-7	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999942163544089	WITHOUT_CLASSIFICATION	5.783645591093212E-5	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999769627924358	WITHOUT_CLASSIFICATION	2.3037207564333136E-5	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999938004639431	WITHOUT_CLASSIFICATION	6.199536056824644E-6	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999811046086	WITHOUT_CLASSIFICATION	1.889539142532284E-8	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999976365933448	WITHOUT_CLASSIFICATION	2.363406655192283E-5	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9997216595999022	WITHOUT_CLASSIFICATION	2.783404000977671E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999340503392643	WITHOUT_CLASSIFICATION	6.594966073571012E-5	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9999972150379611	WITHOUT_CLASSIFICATION	2.7849620389367064E-6	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9998170751964123	WITHOUT_CLASSIFICATION	1.8292480358776791E-4	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999554230859342	WITHOUT_CLASSIFICATION	4.4576914065798646E-5	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999920090722522	WITHOUT_CLASSIFICATION	7.990927747863858E-6	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999133499673806	WITHOUT_CLASSIFICATION	8.66500326194535E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998829614868641	WITHOUT_CLASSIFICATION	1.1703851313602187E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9934472569411658	WITHOUT_CLASSIFICATION	0.006552743058834194	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999271784886714	WITHOUT_CLASSIFICATION	7.282151132859025E-5	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9951120352218653	WITHOUT_CLASSIFICATION	0.004887964778134647	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.99996457893217	WITHOUT_CLASSIFICATION	3.5421067830079713E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9989342420825068	WITHOUT_CLASSIFICATION	0.0010657579174931787	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999971680335149	WITHOUT_CLASSIFICATION	2.8319664851194855E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998829614868641	WITHOUT_CLASSIFICATION	1.1703851313602187E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999870719537869	WITHOUT_CLASSIFICATION	1.2928046213106364E-5	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.999999130150994	WITHOUT_CLASSIFICATION	8.698490060384175E-7	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9999131411439139	WITHOUT_CLASSIFICATION	8.685885608616253E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999850545168203	WITHOUT_CLASSIFICATION	1.494548317973486E-5	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999935885042	WITHOUT_CLASSIFICATION	6.411495823219438E-9	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999999341666145	WITHOUT_CLASSIFICATION	6.583338550853448E-8	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9995235030801325	WITHOUT_CLASSIFICATION	4.764969198675947E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998461151881	WITHOUT_CLASSIFICATION	1.5388481192777105E-7	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999993485146794	WITHOUT_CLASSIFICATION	6.51485320569564E-7	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999850545168203	WITHOUT_CLASSIFICATION	1.494548317973486E-5	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999998130115723	WITHOUT_CLASSIFICATION	1.8698842768454963E-7	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998359641492	WITHOUT_CLASSIFICATION	1.6403585083237055E-7	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9987796682043611	WITHOUT_CLASSIFICATION	0.0012203317956388801	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999608007101456	WITHOUT_CLASSIFICATION	3.919928985446889E-5	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999953324957449	WITHOUT_CLASSIFICATION	4.667504255134733E-6	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999977941035474	WITHOUT_CLASSIFICATION	2.205896452517923E-6	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999997397765765	WITHOUT_CLASSIFICATION	2.602234234382299E-7	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999998599744673	WITHOUT_CLASSIFICATION	1.4002553270377976E-6	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999929444306984	WITHOUT_CLASSIFICATION	7.055569301621761E-6	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9983984353369382	WITHOUT_CLASSIFICATION	0.0016015646630617355	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999994349003162	WITHOUT_CLASSIFICATION	5.650996837574136E-7	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.999994880224251	WITHOUT_CLASSIFICATION	5.119775748923697E-6	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999855889449	WITHOUT_CLASSIFICATION	1.44110550367617E-8	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999990166538003	WITHOUT_CLASSIFICATION	9.833461996070231E-7	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999994511434923	WITHOUT_CLASSIFICATION	5.488565076291627E-7	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.999997967657627	WITHOUT_CLASSIFICATION	2.032342372904457E-6	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999546646602684	WITHOUT_CLASSIFICATION	4.533533973164645E-5	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999876826441	WITHOUT_CLASSIFICATION	1.2317355808250466E-8	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999987341275718	WITHOUT_CLASSIFICATION	1.2658724282024273E-6	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999537141745328	WITHOUT_CLASSIFICATION	4.6285825467294496E-5	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999984120456	WITHOUT_CLASSIFICATION	1.587954360638941E-9	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999957425232233	WITHOUT_CLASSIFICATION	4.257476776654898E-6	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999991457597943	WITHOUT_CLASSIFICATION	8.542402056262358E-7	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999980849397885	WITHOUT_CLASSIFICATION	1.9150602114551746E-6	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999986868226262	WITHOUT_CLASSIFICATION	1.3131773738079432E-6	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998454429932152	WITHOUT_CLASSIFICATION	1.545570067848022E-4	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9998192316059019	WITHOUT_CLASSIFICATION	1.8076839409812936E-4	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999428292763	WITHOUT_CLASSIFICATION	5.7170723714384925E-8	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999354223707431	WITHOUT_CLASSIFICATION	6.457762925701303E-5	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999973088314669	WITHOUT_CLASSIFICATION	2.6911685331087784E-6	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999887522165745	WITHOUT_CLASSIFICATION	1.1247783425496654E-4	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.999999068289272	WITHOUT_CLASSIFICATION	9.317107280570629E-7	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999884177643511	WITHOUT_CLASSIFICATION	1.1582235648967062E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994580768887	WITHOUT_CLASSIFICATION	5.419231112685025E-7	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759772437495	WITHOUT_CLASSIFICATION	2.4022756250465053E-5	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9939206965061992	WITHOUT_CLASSIFICATION	0.006079303493800799	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999999488033781	WITHOUT_CLASSIFICATION	5.119662189862122E-7	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999868906934379	WITHOUT_CLASSIFICATION	1.3109306562109593E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999606556845	WITHOUT_CLASSIFICATION	3.934431547487533E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999606556845	WITHOUT_CLASSIFICATION	3.934431547487533E-8	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999998758050805	WITHOUT_CLASSIFICATION	1.2419491938625796E-7	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999725391304091	WITHOUT_CLASSIFICATION	2.7460869590929393E-5	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999972710477851	WITHOUT_CLASSIFICATION	2.7289522149181855E-6	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9997930256513833	WITHOUT_CLASSIFICATION	2.0697434861671242E-4	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999605086441015	WITHOUT_CLASSIFICATION	3.949135589850481E-5	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9987586208757244	WITHOUT_CLASSIFICATION	0.0012413791242755902	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999986257744063	WITHOUT_CLASSIFICATION	1.374225593654882E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999920760211498	WITHOUT_CLASSIFICATION	7.923978850203826E-6	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999982691505362	WITHOUT_CLASSIFICATION	1.730849463760818E-6	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999958306111116	WITHOUT_CLASSIFICATION	4.169388888447505E-6	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9905340011637724	WITHOUT_CLASSIFICATION	0.009465998836227538	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999814575666	WITHOUT_CLASSIFICATION	1.8542433368109442E-8	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999512645594846	WITHOUT_CLASSIFICATION	4.873544051535416E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999606556845	WITHOUT_CLASSIFICATION	3.934431547487533E-8	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999613197318853	WITHOUT_CLASSIFICATION	3.868026811480103E-5	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999951691334964	WITHOUT_CLASSIFICATION	4.830866503534217E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999275732442167	WITHOUT_CLASSIFICATION	7.24267557834059E-5	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999997399488658	WITHOUT_CLASSIFICATION	2.600511341984723E-7	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999969246102567	WITHOUT_CLASSIFICATION	3.075389743180685E-6	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999978881699844	WITHOUT_CLASSIFICATION	2.111830015593224E-6	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999265938255579	WITHOUT_CLASSIFICATION	7.340617444206249E-5	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999964750936	WITHOUT_CLASSIFICATION	3.524906354816029E-9	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999993106127514	WITHOUT_CLASSIFICATION	6.893872486021002E-6	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999991668557643	WITHOUT_CLASSIFICATION	8.331442358046902E-7	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999966608591443	WITHOUT_CLASSIFICATION	3.339140855605315E-6	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994580768887	WITHOUT_CLASSIFICATION	5.419231112685025E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999606556845	WITHOUT_CLASSIFICATION	3.934431547487533E-8	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.99991774315274	WITHOUT_CLASSIFICATION	8.225684726004558E-5	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999997828983718	WITHOUT_CLASSIFICATION	2.1710162822445117E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999977336004039	WITHOUT_CLASSIFICATION	2.266399596086408E-6	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999922592469629	WITHOUT_CLASSIFICATION	7.740753037149097E-6	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999999989360477	WITHOUT_CLASSIFICATION	1.063952309394298E-8	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999978122278833	WITHOUT_CLASSIFICATION	2.187772116698513E-5	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972537275006	WITHOUT_CLASSIFICATION	2.7462724994832214E-6	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999991511757627	WITHOUT_CLASSIFICATION	8.48824237330782E-7	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999972356564919	WITHOUT_CLASSIFICATION	2.7643435080593463E-6	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9996286338501041	WITHOUT_CLASSIFICATION	3.713661498958755E-4	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999960794349012	WITHOUT_CLASSIFICATION	3.920565098819297E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999134448932777	WITHOUT_CLASSIFICATION	8.6555106722282E-5	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999994592567	WITHOUT_CLASSIFICATION	5.407434592131766E-10	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999997595499778	WITHOUT_CLASSIFICATION	2.4045002222003437E-7	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999964022905709	WITHOUT_CLASSIFICATION	3.5977094291357083E-6	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999962163768941	WITHOUT_CLASSIFICATION	3.7836231060103387E-6	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999912282665272	WITHOUT_CLASSIFICATION	8.771733472909861E-6	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.999605596698939	WITHOUT_CLASSIFICATION	3.944033010610214E-4	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.999998665141665	WITHOUT_CLASSIFICATION	1.334858335011481E-6	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999986196727871	WITHOUT_CLASSIFICATION	1.380327212900964E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999792829531993	WITHOUT_CLASSIFICATION	2.0717046800697186E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999792829531993	WITHOUT_CLASSIFICATION	2.0717046800697186E-5	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999994061825906	WITHOUT_CLASSIFICATION	5.938174094039189E-6	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999988165572291	WITHOUT_CLASSIFICATION	1.1834427708587803E-6	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999972336578518	WITHOUT_CLASSIFICATION	2.7663421481339838E-6	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998003065767819	WITHOUT_CLASSIFICATION	1.9969342321819882E-4	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999930384231954	WITHOUT_CLASSIFICATION	6.961576804503849E-6	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.999994176452279	WITHOUT_CLASSIFICATION	5.823547721134298E-6	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999990589535958	WITHOUT_CLASSIFICATION	9.410464043514445E-7	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999709143183005	WITHOUT_CLASSIFICATION	2.9085681699500096E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999709143183005	WITHOUT_CLASSIFICATION	2.9085681699500096E-5	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9996352825020125	WITHOUT_CLASSIFICATION	3.647174979874959E-4	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999998301253485	WITHOUT_CLASSIFICATION	1.698746515934723E-7	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999970552348062	WITHOUT_CLASSIFICATION	2.944765193830742E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999975515246051	WITHOUT_CLASSIFICATION	2.448475394899279E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999975515246051	WITHOUT_CLASSIFICATION	2.448475394899279E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999975515246051	WITHOUT_CLASSIFICATION	2.448475394899279E-5	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999722444004974	WITHOUT_CLASSIFICATION	2.7755599502600297E-4	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999996786220761	WITHOUT_CLASSIFICATION	3.2137792390822856E-7	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999996204851036	WITHOUT_CLASSIFICATION	3.7951489638026217E-7	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.5538766049927583	WITHOUT_CLASSIFICATION	0.44612339500724163	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999559141384418	WITHOUT_CLASSIFICATION	4.408586155826024E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999606556845	WITHOUT_CLASSIFICATION	3.934431547487533E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999606556845	WITHOUT_CLASSIFICATION	3.934431547487533E-8	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999048703933752	WITHOUT_CLASSIFICATION	9.512960662483588E-5	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999924594039	WITHOUT_CLASSIFICATION	7.540596147134384E-9	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9988326708644379	WITHOUT_CLASSIFICATION	0.0011673291355620945	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999851973362	WITHOUT_CLASSIFICATION	1.480266381726051E-8	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9979720644089626	WITHOUT_CLASSIFICATION	0.002027935591037448	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999971066763442	WITHOUT_CLASSIFICATION	2.8933236556586806E-6	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9990794292360277	WITHOUT_CLASSIFICATION	9.205707639722754E-4	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9997862457754234	WITHOUT_CLASSIFICATION	2.1375422457665697E-4	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999953104245498	WITHOUT_CLASSIFICATION	4.689575450201255E-5	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999992357145189	WITHOUT_CLASSIFICATION	7.64285481128929E-7	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999947309128536	WITHOUT_CLASSIFICATION	5.269087146395139E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999992432542119	WITHOUT_CLASSIFICATION	7.567457882094117E-7	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999992432542119	WITHOUT_CLASSIFICATION	7.567457882094117E-7	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999993574631695	WITHOUT_CLASSIFICATION	6.425368304963491E-7	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999993574631695	WITHOUT_CLASSIFICATION	6.425368304963491E-7	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999994990180804	WITHOUT_CLASSIFICATION	5.00981919743154E-7	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999981856273396	WITHOUT_CLASSIFICATION	1.8143726605029382E-6	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999981856273396	WITHOUT_CLASSIFICATION	1.8143726605029382E-6	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999989949136722	WITHOUT_CLASSIFICATION	1.0050863278857142E-6	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999968441041105	WITHOUT_CLASSIFICATION	3.1558958894357522E-6	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999993347425241	WITHOUT_CLASSIFICATION	6.652574758476167E-7	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999792829531993	WITHOUT_CLASSIFICATION	2.0717046800697186E-5	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999996765623426	WITHOUT_CLASSIFICATION	3.234376575066242E-7	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999968441041105	WITHOUT_CLASSIFICATION	3.1558958894357522E-6	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999425716622379	WITHOUT_CLASSIFICATION	5.742833776214889E-5	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999949180947251	WITHOUT_CLASSIFICATION	5.0819052748681E-6	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999999016602086	WITHOUT_CLASSIFICATION	9.833979139555918E-7	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.999999589191205	WITHOUT_CLASSIFICATION	4.108087950190975E-7	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999496280249	WITHOUT_CLASSIFICATION	5.037197511483553E-8	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999998927506699	WITHOUT_CLASSIFICATION	1.0724933012424651E-7	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999996917296271	WITHOUT_CLASSIFICATION	3.0827037296043236E-7	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9965631975768067	WITHOUT_CLASSIFICATION	0.0034368024231934253	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9967710543853816	WITHOUT_CLASSIFICATION	0.0032289456146183788	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999172345363622	WITHOUT_CLASSIFICATION	8.276546363786867E-5	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999869311512244	WITHOUT_CLASSIFICATION	1.3068848775540772E-5	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.999940797621575	WITHOUT_CLASSIFICATION	5.9202378425104166E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999959885424601	WITHOUT_CLASSIFICATION	4.011457539852824E-6	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999992546499666	WITHOUT_CLASSIFICATION	7.45350033447454E-7	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.926072810240048	WITHOUT_CLASSIFICATION	0.07392718975995213	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999823331123883	WITHOUT_CLASSIFICATION	1.7666887611691094E-5	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999735577564	WITHOUT_CLASSIFICATION	2.644224365702551E-8	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999997166046928	WITHOUT_CLASSIFICATION	2.8339530733382265E-7	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999997166046928	WITHOUT_CLASSIFICATION	2.8339530733382265E-7	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999999050143457	WITHOUT_CLASSIFICATION	9.49856543105573E-7	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.999998665000886	WITHOUT_CLASSIFICATION	1.3349991140089208E-6	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999997004033758	WITHOUT_CLASSIFICATION	2.995966240916098E-7	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999986905147642	WITHOUT_CLASSIFICATION	1.3094852358461699E-6	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999998012946578	WITHOUT_CLASSIFICATION	1.987053422038866E-6	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999747666979623	WITHOUT_CLASSIFICATION	2.5233302037770243E-5	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999999941959887	WITHOUT_CLASSIFICATION	5.8040112970489175E-8	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999691614149253	WITHOUT_CLASSIFICATION	3.083858507472532E-5	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999988414798337	WITHOUT_CLASSIFICATION	1.1585201662953831E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999997915683874	WITHOUT_CLASSIFICATION	2.0843161265012541E-7	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999986536331124	WITHOUT_CLASSIFICATION	1.3463668876159886E-6	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999134448932777	WITHOUT_CLASSIFICATION	8.6555106722282E-5	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999287132029	WITHOUT_CLASSIFICATION	7.128679714727457E-8	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999983527044299	WITHOUT_CLASSIFICATION	1.6472955700681638E-6	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999842422952645	WITHOUT_CLASSIFICATION	1.575770473556533E-5	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.999989462561183	WITHOUT_CLASSIFICATION	1.0537438816897095E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999956079456808	WITHOUT_CLASSIFICATION	4.392054319183015E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999956079456808	WITHOUT_CLASSIFICATION	4.392054319183015E-6	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.999997199471181	WITHOUT_CLASSIFICATION	2.8005288189455143E-6	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9954718682797399	WITHOUT_CLASSIFICATION	0.004528131720260188	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9991331666319561	WITHOUT_CLASSIFICATION	8.66833368043932E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9969924396205467	WITHOUT_CLASSIFICATION	0.0030075603794532417	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9998014543842417	WITHOUT_CLASSIFICATION	1.9854561575833262E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999955763703433	WITHOUT_CLASSIFICATION	4.4236296567660484E-6	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999996338464177	WITHOUT_CLASSIFICATION	3.6615358234877207E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999786397327591	WITHOUT_CLASSIFICATION	2.1360267240883383E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999924506615451	WITHOUT_CLASSIFICATION	7.549338454962725E-6	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999921352689582	WITHOUT_CLASSIFICATION	7.864731041697083E-6	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999921746504971	WITHOUT_CLASSIFICATION	7.825349502974942E-6	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999786397327591	WITHOUT_CLASSIFICATION	2.1360267240883383E-5	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9978185186647417	WITHOUT_CLASSIFICATION	0.002181481335258328	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999312824509	WITHOUT_CLASSIFICATION	6.871754906434782E-8	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999998582589821	WITHOUT_CLASSIFICATION	1.4174101786943923E-7	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999941957462887	WITHOUT_CLASSIFICATION	5.8042537113308985E-6	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999933725418299	WITHOUT_CLASSIFICATION	6.627458170232103E-6	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999998011280895	WITHOUT_CLASSIFICATION	1.988719105912955E-7	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999999981986921	WITHOUT_CLASSIFICATION	1.801307902326919E-8	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999969999408074	WITHOUT_CLASSIFICATION	3.000059192618181E-6	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999993073293977	WITHOUT_CLASSIFICATION	6.926706023669339E-7	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999747205525723	WITHOUT_CLASSIFICATION	2.527944742769053E-5	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9993952334992555	WITHOUT_CLASSIFICATION	6.047665007444524E-4	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999909434587059	WITHOUT_CLASSIFICATION	9.056541294157745E-6	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999993373548205	WITHOUT_CLASSIFICATION	6.626451795851754E-7	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999993043184845	WITHOUT_CLASSIFICATION	6.95681515448492E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999898072641017	WITHOUT_CLASSIFICATION	1.019273589836516E-5	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999727755895	WITHOUT_CLASSIFICATION	2.7224410489921982E-8	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999989778653842	WITHOUT_CLASSIFICATION	1.0221346158788621E-6	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999953569986811	WITHOUT_CLASSIFICATION	4.643001318839829E-6	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999909007876996	WITHOUT_CLASSIFICATION	9.099212300360111E-6	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999859765256	WITHOUT_CLASSIFICATION	1.4023474344720486E-8	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999716309161543	WITHOUT_CLASSIFICATION	2.8369083845802953E-5	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999777978287097	WITHOUT_CLASSIFICATION	2.2202171290417385E-5	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998735233561946	WITHOUT_CLASSIFICATION	1.264766438053265E-4	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999705897133379	WITHOUT_CLASSIFICATION	2.941028666211511E-5	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999420757032	WITHOUT_CLASSIFICATION	5.792429683066992E-8	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999909940402866	WITHOUT_CLASSIFICATION	9.005959713316085E-6	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999983120851129	WITHOUT_CLASSIFICATION	1.687914887147948E-6	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999920662857834	WITHOUT_CLASSIFICATION	7.933714216574571E-6	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999998083105835	WITHOUT_CLASSIFICATION	1.9168941647323627E-7	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999967944935431	WITHOUT_CLASSIFICATION	3.205506456852849E-6	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999234888429	WITHOUT_CLASSIFICATION	7.651115708230242E-8	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999338875195266	WITHOUT_CLASSIFICATION	6.611248047338765E-5	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9941253536259155	WITHOUT_CLASSIFICATION	0.005874646374084444	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999998606607604	WITHOUT_CLASSIFICATION	1.3933923957823273E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999991216603584	WITHOUT_CLASSIFICATION	8.783396416254501E-7	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999999230777481	WITHOUT_CLASSIFICATION	7.692225192382602E-8	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999275547959	WITHOUT_CLASSIFICATION	7.244520403480633E-8	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999984849654326	WITHOUT_CLASSIFICATION	1.5150345672694376E-6	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999999964201814	WITHOUT_CLASSIFICATION	3.579818600908111E-8	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9996978960597255	WITHOUT_CLASSIFICATION	3.021039402745389E-4	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999986952169311	WITHOUT_CLASSIFICATION	1.304783068949891E-6	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999949878761228	WITHOUT_CLASSIFICATION	5.012123877161312E-6	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999989151222354	WITHOUT_CLASSIFICATION	1.0848777645787556E-6	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999557270866	WITHOUT_CLASSIFICATION	4.427291346382891E-8	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999792724761	WITHOUT_CLASSIFICATION	2.0727523927512624E-8	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999994704041055	WITHOUT_CLASSIFICATION	5.295958945173942E-7	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999912242427599	WITHOUT_CLASSIFICATION	8.775757240140418E-6	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999997896100221	WITHOUT_CLASSIFICATION	2.1038997789317055E-6	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999208587597564	WITHOUT_CLASSIFICATION	7.914124024357341E-5	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999989023444363	WITHOUT_CLASSIFICATION	1.097655563692474E-5	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993389552057	WITHOUT_CLASSIFICATION	6.610447943798462E-7	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999986328792666	WITHOUT_CLASSIFICATION	1.3671207334629301E-6	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999871137649	WITHOUT_CLASSIFICATION	1.2886235012954763E-8	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999903239642075	WITHOUT_CLASSIFICATION	9.676035792512095E-5	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999749474346	WITHOUT_CLASSIFICATION	2.5052565397177504E-8	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999989360500444	WITHOUT_CLASSIFICATION	1.0639499556185333E-6	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999709361502473	WITHOUT_CLASSIFICATION	2.906384975270779E-4	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999990983228932	WITHOUT_CLASSIFICATION	9.016771068139471E-6	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999996791896898	WITHOUT_CLASSIFICATION	3.208103102450322E-7	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999302890332098	WITHOUT_CLASSIFICATION	6.97109667901982E-5	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999970199615696	WITHOUT_CLASSIFICATION	2.9800384303913327E-5	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999983377068036	WITHOUT_CLASSIFICATION	1.6622931963609642E-6	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9994631272929001	WITHOUT_CLASSIFICATION	5.368727070999341E-4	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9463776611248639	DEFECT	0.05362233887513617	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999762829599341	WITHOUT_CLASSIFICATION	2.3717040065896784E-5	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999968695484215	WITHOUT_CLASSIFICATION	3.130451578500264E-5	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993389552057	WITHOUT_CLASSIFICATION	6.610447943798462E-7	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999983522252227	WITHOUT_CLASSIFICATION	1.6477747772621406E-6	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9996040540270866	WITHOUT_CLASSIFICATION	3.959459729134159E-4	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997143775284	WITHOUT_CLASSIFICATION	2.8562247155298615E-7	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999994170959932	WITHOUT_CLASSIFICATION	5.829040068088062E-7	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999892703050259	WITHOUT_CLASSIFICATION	1.0729694974096638E-5	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9996491308566197	WITHOUT_CLASSIFICATION	3.508691433803574E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999924506615451	WITHOUT_CLASSIFICATION	7.549338454962725E-6	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999983821433088	WITHOUT_CLASSIFICATION	1.617856691206229E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999991216603584	WITHOUT_CLASSIFICATION	8.783396416254501E-7	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9873269500168642	WITHOUT_CLASSIFICATION	0.012673049983135745	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999988650074483	WITHOUT_CLASSIFICATION	1.134992551718579E-6	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999556564197	WITHOUT_CLASSIFICATION	4.4343580224057825E-8	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999371504873	WITHOUT_CLASSIFICATION	6.28495126370258E-8	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999994551434706	WITHOUT_CLASSIFICATION	5.448565294860697E-7	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9998572799672419	WITHOUT_CLASSIFICATION	1.427200327579869E-4	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999940764337328	WITHOUT_CLASSIFICATION	5.923566267125852E-6	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999945567131907	WITHOUT_CLASSIFICATION	5.443286809254261E-6	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9933820524831717	WITHOUT_CLASSIFICATION	0.006617947516828407	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999972787442354	WITHOUT_CLASSIFICATION	2.721255764627693E-6	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999993894072402	WITHOUT_CLASSIFICATION	6.105927597649445E-7	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999940446829334	WITHOUT_CLASSIFICATION	5.955317066552673E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999989312487029	WITHOUT_CLASSIFICATION	1.068751297136539E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999989312487029	WITHOUT_CLASSIFICATION	1.068751297136539E-6	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999993621871971	WITHOUT_CLASSIFICATION	6.378128028690954E-7	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999992725233882	WITHOUT_CLASSIFICATION	7.274766118499253E-7	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999770664465	WITHOUT_CLASSIFICATION	2.2933553491976494E-8	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999996943516	WITHOUT_CLASSIFICATION	3.056484666899236E-10	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999978513367023	WITHOUT_CLASSIFICATION	2.1486632977601905E-6	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999989932309482	WITHOUT_CLASSIFICATION	1.0067690517560437E-6	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999000380930795	WITHOUT_CLASSIFICATION	9.996190692049319E-5	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999835426230196	WITHOUT_CLASSIFICATION	1.6457376980453847E-5	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999986518629986	WITHOUT_CLASSIFICATION	1.3481370013697766E-6	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999974200521717	WITHOUT_CLASSIFICATION	2.579947828294755E-5	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9996681783643294	WITHOUT_CLASSIFICATION	3.3182163567059374E-4	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9998763208664144	WITHOUT_CLASSIFICATION	1.2367913358568396E-4	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9998382915349052	WITHOUT_CLASSIFICATION	1.6170846509475504E-4	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999979866730315	WITHOUT_CLASSIFICATION	2.013326968481194E-6	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9997497835104582	WITHOUT_CLASSIFICATION	2.5021648954176324E-4	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999595159847962	WITHOUT_CLASSIFICATION	4.048401520377082E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999965200574976	WITHOUT_CLASSIFICATION	3.479942502396645E-5	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999846995077	WITHOUT_CLASSIFICATION	1.5300492340773977E-8	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999647850683863	WITHOUT_CLASSIFICATION	3.521493161377546E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906834302066	WITHOUT_CLASSIFICATION	9.31656979342751E-6	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999719607741	WITHOUT_CLASSIFICATION	2.8039225831097646E-8	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9993502504401384	WITHOUT_CLASSIFICATION	6.497495598615608E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999999887756351	WITHOUT_CLASSIFICATION	1.1224364897285175E-7	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999961383654279	WITHOUT_CLASSIFICATION	3.861634572089152E-6	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9999747272978943	WITHOUT_CLASSIFICATION	2.5272702105828833E-5	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999996371599683	WITHOUT_CLASSIFICATION	3.6284003167751496E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906834302066	WITHOUT_CLASSIFICATION	9.31656979342751E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906834302066	WITHOUT_CLASSIFICATION	9.31656979342751E-6	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9958202777965125	WITHOUT_CLASSIFICATION	0.004179722203487453	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999798589741142	WITHOUT_CLASSIFICATION	2.0141025885770275E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999956691649357	WITHOUT_CLASSIFICATION	4.33083506443265E-6	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996657131906653	WITHOUT_CLASSIFICATION	3.342868093345954E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9778673883576475	WITHOUT_CLASSIFICATION	0.022132611642352452	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.999943953217794	WITHOUT_CLASSIFICATION	5.604678220603683E-5	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999998989120065	WITHOUT_CLASSIFICATION	1.0108799361101537E-7	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999969076402557	WITHOUT_CLASSIFICATION	3.092359744281805E-6	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999991147313233	WITHOUT_CLASSIFICATION	8.852686767425678E-7	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999635484620272	WITHOUT_CLASSIFICATION	3.645153797295308E-5	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999990838839015	WITHOUT_CLASSIFICATION	9.161160985064923E-6	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999950851792415	WITHOUT_CLASSIFICATION	4.914820758502792E-6	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999999090714359	WITHOUT_CLASSIFICATION	9.092856408153644E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999972188624128	WITHOUT_CLASSIFICATION	2.7811375872477237E-6	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997963620925089	WITHOUT_CLASSIFICATION	2.0363790749125706E-4	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999989692835367	WITHOUT_CLASSIFICATION	1.0307164632294399E-6	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999813961244608	WITHOUT_CLASSIFICATION	1.860387553925517E-5	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999868631598514	WITHOUT_CLASSIFICATION	1.3136840148515186E-5	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999974619360321	WITHOUT_CLASSIFICATION	2.5380639679083875E-6	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992451374992127	WITHOUT_CLASSIFICATION	7.548625007871946E-4	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9979771154240443	WITHOUT_CLASSIFICATION	0.002022884575955686	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999996542091911	WITHOUT_CLASSIFICATION	3.4579080889707607E-7	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999997759091469	WITHOUT_CLASSIFICATION	2.2409085307996625E-7	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999995964381624	WITHOUT_CLASSIFICATION	4.0356183762630166E-7	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997659918295349	WITHOUT_CLASSIFICATION	2.340081704650781E-4	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999999996683121	WITHOUT_CLASSIFICATION	3.3168789824803303E-9	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999999470832841	WITHOUT_CLASSIFICATION	5.291671590213567E-7	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999997268852845	WITHOUT_CLASSIFICATION	2.73114715498954E-6	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999987289711849	WITHOUT_CLASSIFICATION	1.2710288151003181E-6	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999918509124217	WITHOUT_CLASSIFICATION	8.149087578165734E-6	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999927359599089	WITHOUT_CLASSIFICATION	7.264040091073567E-6	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999983771817265	WITHOUT_CLASSIFICATION	1.6228182735546974E-6	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999965233649502	WITHOUT_CLASSIFICATION	3.476635049993771E-6	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999623360883809	WITHOUT_CLASSIFICATION	3.766391161915559E-5	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9997643307153198	WITHOUT_CLASSIFICATION	2.3566928468029524E-4	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999937237040539	WITHOUT_CLASSIFICATION	6.276295946028512E-6	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999983405619235	WITHOUT_CLASSIFICATION	1.6594380764345698E-6	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999913967477	WITHOUT_CLASSIFICATION	8.603252355738012E-9	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999978300368907	WITHOUT_CLASSIFICATION	2.169963109284154E-6	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999686358577484	WITHOUT_CLASSIFICATION	3.136414225153665E-5	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999994314359432	WITHOUT_CLASSIFICATION	5.685640568227347E-7	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999984877780844	WITHOUT_CLASSIFICATION	1.5122219156235925E-6	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999994849506595	WITHOUT_CLASSIFICATION	5.150493404219013E-7	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.999998958542093	WITHOUT_CLASSIFICATION	1.041457906970322E-6	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999994849506595	WITHOUT_CLASSIFICATION	5.150493404219013E-7	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999931920244868	WITHOUT_CLASSIFICATION	6.807975513167806E-6	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999874093970931	WITHOUT_CLASSIFICATION	1.2590602906888075E-5	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999960991134644	WITHOUT_CLASSIFICATION	3.900886535497268E-6	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999997322633923	WITHOUT_CLASSIFICATION	2.6773660771661996E-7	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999997369822119	WITHOUT_CLASSIFICATION	2.6301778810449943E-6	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999994270743849	WITHOUT_CLASSIFICATION	5.729256149810366E-7	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999906405374446	WITHOUT_CLASSIFICATION	9.359462555497197E-6	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999168635584	WITHOUT_CLASSIFICATION	8.313644155398349E-8	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9997557418136529	WITHOUT_CLASSIFICATION	2.4425818634710487E-4	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999991681587308	WITHOUT_CLASSIFICATION	8.318412691633226E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999997487847383	WITHOUT_CLASSIFICATION	2.5121526170841835E-6	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999951341156793	WITHOUT_CLASSIFICATION	4.8658843207851396E-6	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999995646135	WITHOUT_CLASSIFICATION	4.3538640677737756E-10	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9892092430058111	WITHOUT_CLASSIFICATION	0.010790756994188857	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9987900307517446	WITHOUT_CLASSIFICATION	0.00120996924825542	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999995636487833	WITHOUT_CLASSIFICATION	4.3635121669109135E-7	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999968396050868	WITHOUT_CLASSIFICATION	3.1603949132015795E-5	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999968324469591	WITHOUT_CLASSIFICATION	3.167553040799454E-6	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999997411852047	WITHOUT_CLASSIFICATION	2.588147952383942E-7	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999997749081435	WITHOUT_CLASSIFICATION	2.2509185663437772E-7	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999602207862671	WITHOUT_CLASSIFICATION	3.9779213732904205E-5	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999887531740657	WITHOUT_CLASSIFICATION	1.1246825934351116E-5	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9978428935808451	WITHOUT_CLASSIFICATION	0.002157106419154801	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999521432236015	WITHOUT_CLASSIFICATION	4.7856776398563805E-5	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999998995748836	WITHOUT_CLASSIFICATION	1.004251164037815E-6	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998712723769888	WITHOUT_CLASSIFICATION	1.287276230111306E-4	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999847921288411	WITHOUT_CLASSIFICATION	1.5207871158906799E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999920031466993	WITHOUT_CLASSIFICATION	7.996853300655311E-6	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997459373156	WITHOUT_CLASSIFICATION	2.540626844273999E-7	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9986708772833752	WITHOUT_CLASSIFICATION	0.0013291227166247635	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9999647169457929	WITHOUT_CLASSIFICATION	3.528305420704396E-5	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.969803304686001	WITHOUT_CLASSIFICATION	0.030196695313999152	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9997924876726412	WITHOUT_CLASSIFICATION	2.0751232735882915E-4	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999093327360885	WITHOUT_CLASSIFICATION	9.06672639115332E-5	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999972050480559	WITHOUT_CLASSIFICATION	2.794951944097356E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9999792875145151	WITHOUT_CLASSIFICATION	2.0712485484849453E-5	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999983075119232	WITHOUT_CLASSIFICATION	1.6924880767182556E-6	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999996884845308	WITHOUT_CLASSIFICATION	3.1151546920595495E-7	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9998730511577236	WITHOUT_CLASSIFICATION	1.2694884227645026E-4	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999997368662447	WITHOUT_CLASSIFICATION	2.631337553773276E-7	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999998117778464	WITHOUT_CLASSIFICATION	1.882221536923245E-7	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.999820291907281	WITHOUT_CLASSIFICATION	1.7970809271897372E-4	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9881931672287546	WITHOUT_CLASSIFICATION	0.01180683277124546	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998712723769888	WITHOUT_CLASSIFICATION	1.287276230111306E-4	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9998553772638135	WITHOUT_CLASSIFICATION	1.4462273618659163E-4	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999979967738417	WITHOUT_CLASSIFICATION	2.0032261583101567E-6	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9973429339796477	WITHOUT_CLASSIFICATION	0.002657066020352271	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9995422430721905	WITHOUT_CLASSIFICATION	4.577569278095122E-4	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999979784430962	WITHOUT_CLASSIFICATION	2.021556903699463E-6	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999994539759514	WITHOUT_CLASSIFICATION	5.46024048542875E-7	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999990779891306	WITHOUT_CLASSIFICATION	9.220108695436203E-7	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.7232724659990599	DEFECT	0.2767275340009401	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999990590215274	WITHOUT_CLASSIFICATION	9.409784725643908E-7	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999357438831867	WITHOUT_CLASSIFICATION	6.425611681330537E-5	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999916138878864	WITHOUT_CLASSIFICATION	8.386112113529471E-6	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999994172955429	WITHOUT_CLASSIFICATION	5.827044571737449E-7	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999914696068617	WITHOUT_CLASSIFICATION	8.530393138303571E-5	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999941919311821	WITHOUT_CLASSIFICATION	5.808068817891442E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999996864899496	WITHOUT_CLASSIFICATION	3.1351005029787843E-7	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999973744903	WITHOUT_CLASSIFICATION	2.625509758343595E-9	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999996466946258	WITHOUT_CLASSIFICATION	3.5330537417580934E-7	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999995299687117	WITHOUT_CLASSIFICATION	4.700312884352908E-7	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999960892675914	WITHOUT_CLASSIFICATION	3.910732408520237E-6	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9998553772638135	WITHOUT_CLASSIFICATION	1.4462273618659163E-4	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999938869485244	WITHOUT_CLASSIFICATION	6.113051475665674E-6	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9718787757082811	WITHOUT_CLASSIFICATION	0.02812122429171892	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999924342931016	WITHOUT_CLASSIFICATION	7.565706898409378E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999971346267226	WITHOUT_CLASSIFICATION	2.8653732773947797E-6	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9997444991009065	WITHOUT_CLASSIFICATION	2.5550089909354574E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9986439935321526	WITHOUT_CLASSIFICATION	0.001356006467847394	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9986439935321526	WITHOUT_CLASSIFICATION	0.001356006467847394	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999995982001083	WITHOUT_CLASSIFICATION	4.017998917070058E-6	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9986439935321526	WITHOUT_CLASSIFICATION	0.001356006467847394	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9986439935321526	WITHOUT_CLASSIFICATION	0.001356006467847394	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9985092724592368	WITHOUT_CLASSIFICATION	0.0014907275407631422	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9991167204536842	WITHOUT_CLASSIFICATION	8.832795463158586E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998216005455	WITHOUT_CLASSIFICATION	1.7839945441643868E-7	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999999736399379	WITHOUT_CLASSIFICATION	2.6360062105252126E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9863814951202979	WITHOUT_CLASSIFICATION	0.013618504879701942	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999981652568831	WITHOUT_CLASSIFICATION	1.8347431169070735E-6	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9981531680842075	WITHOUT_CLASSIFICATION	0.0018468319157924889	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999924204257142	WITHOUT_CLASSIFICATION	7.579574285732417E-6	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999563263755662	WITHOUT_CLASSIFICATION	4.3673624433704085E-5	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999941067089635	WITHOUT_CLASSIFICATION	5.893291036460108E-6	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999968069229974	WITHOUT_CLASSIFICATION	3.193077002529756E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999187141205365	WITHOUT_CLASSIFICATION	8.128587946354902E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999991397228342	WITHOUT_CLASSIFICATION	8.602771657487469E-7	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999977452878387	WITHOUT_CLASSIFICATION	2.254712161333115E-6	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999985362695608	WITHOUT_CLASSIFICATION	1.4637304392090186E-6	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9994310224225277	WITHOUT_CLASSIFICATION	5.689775774723557E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999261023671	WITHOUT_CLASSIFICATION	7.389763289672418E-7	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999226782746329	WITHOUT_CLASSIFICATION	7.732172536714031E-5	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9996564876034374	WITHOUT_CLASSIFICATION	3.435123965626277E-4	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999997989053468	WITHOUT_CLASSIFICATION	2.0109465319596646E-6	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999966641644575	WITHOUT_CLASSIFICATION	3.3358355424642785E-6	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999843009727835	WITHOUT_CLASSIFICATION	1.5699027216460954E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999261023671	WITHOUT_CLASSIFICATION	7.389763289672418E-7	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999847921288411	WITHOUT_CLASSIFICATION	1.5207871158906799E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999951284331199	WITHOUT_CLASSIFICATION	4.871566880095083E-6	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997493411332	WITHOUT_CLASSIFICATION	2.506588667396332E-7	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997590374391	WITHOUT_CLASSIFICATION	2.4096256088500726E-7	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999957359097791	WITHOUT_CLASSIFICATION	4.264090220941524E-6	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999860574315074	WITHOUT_CLASSIFICATION	1.394256849265325E-5	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999979168231213	WITHOUT_CLASSIFICATION	2.0831768787474943E-6	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9997425545638865	WITHOUT_CLASSIFICATION	2.5744543611347376E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999995767285335	WITHOUT_CLASSIFICATION	4.232714664358174E-7	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999993484559153	WITHOUT_CLASSIFICATION	6.515440847918685E-7	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999165608024495	WITHOUT_CLASSIFICATION	8.343919755037573E-5	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999621504362636	WITHOUT_CLASSIFICATION	3.7849563736439626E-5	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999991022699101	WITHOUT_CLASSIFICATION	8.977300899460215E-7	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999999943531785	WITHOUT_CLASSIFICATION	5.6468214933440626E-8	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9997798285708932	WITHOUT_CLASSIFICATION	2.201714291068595E-4	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999773961391	WITHOUT_CLASSIFICATION	2.2603860836406155E-8	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999883033324305	WITHOUT_CLASSIFICATION	1.1696667569457053E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999977167699378	WITHOUT_CLASSIFICATION	2.283230062211978E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999957415703793	WITHOUT_CLASSIFICATION	4.258429620785064E-6	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999996610496137	WITHOUT_CLASSIFICATION	3.389503862989623E-6	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9992140423386996	WITHOUT_CLASSIFICATION	7.859576613004328E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999997207999148	WITHOUT_CLASSIFICATION	2.792000851614106E-7	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999891854377614	WITHOUT_CLASSIFICATION	1.0814562238633519E-5	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999995767285335	WITHOUT_CLASSIFICATION	4.232714664358174E-7	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999998726865891	WITHOUT_CLASSIFICATION	1.2731341089615774E-7	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999994806821266	WITHOUT_CLASSIFICATION	5.193178733696779E-7	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999835569284979	WITHOUT_CLASSIFICATION	1.6443071502081696E-5	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999998370753965	WITHOUT_CLASSIFICATION	1.6292460357067018E-7	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997735862052	WITHOUT_CLASSIFICATION	2.264137947210055E-7	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999791752067019	WITHOUT_CLASSIFICATION	2.0824793298123453E-5	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9999887155230828	WITHOUT_CLASSIFICATION	1.1284476917167744E-5	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999998584925047	WITHOUT_CLASSIFICATION	1.4150749519518468E-7	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999983867360139	WITHOUT_CLASSIFICATION	1.6132639860622536E-6	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999321885761359	WITHOUT_CLASSIFICATION	6.78114238641753E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997073140358	WITHOUT_CLASSIFICATION	2.926859642097793E-7	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999435215381277	WITHOUT_CLASSIFICATION	5.6478461872345095E-5	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.999993197235396	WITHOUT_CLASSIFICATION	6.802764604003815E-6	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999997999972	WITHOUT_CLASSIFICATION	2.0000280692473745E-10	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999974662816794	WITHOUT_CLASSIFICATION	2.5337183205255873E-6	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999979742886247	WITHOUT_CLASSIFICATION	2.025711375299345E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999986994311512	WITHOUT_CLASSIFICATION	1.3005688489137283E-6	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997073140358	WITHOUT_CLASSIFICATION	2.926859642097793E-7	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999371729389	WITHOUT_CLASSIFICATION	6.282706107186666E-8	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9997316499710999	WITHOUT_CLASSIFICATION	2.6835002890005356E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999993975757391	WITHOUT_CLASSIFICATION	6.024242609640911E-7	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999970301173454	WITHOUT_CLASSIFICATION	2.9698826546429057E-6	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9998876516567964	WITHOUT_CLASSIFICATION	1.1234834320356306E-4	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999997074295397	WITHOUT_CLASSIFICATION	2.9257046021837357E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999974662816794	WITHOUT_CLASSIFICATION	2.5337183205255873E-6	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999927594767878	WITHOUT_CLASSIFICATION	7.240523212189788E-6	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958880652114	WITHOUT_CLASSIFICATION	4.111934788562984E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999190830536	WITHOUT_CLASSIFICATION	8.091694644457114E-8	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976168678851	WITHOUT_CLASSIFICATION	2.3831321149478624E-6	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999823558580365	WITHOUT_CLASSIFICATION	1.7644141963389824E-5	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985150943211	WITHOUT_CLASSIFICATION	1.4849056788207955E-6	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999985674462278	WITHOUT_CLASSIFICATION	1.4325537722440542E-6	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999985674462278	WITHOUT_CLASSIFICATION	1.4325537722440542E-6	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999984915491242	WITHOUT_CLASSIFICATION	1.508450875717413E-6	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999991299819869	WITHOUT_CLASSIFICATION	8.700180130776118E-7	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999988911913062	WITHOUT_CLASSIFICATION	1.1088086936919647E-6	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999791091145144	WITHOUT_CLASSIFICATION	2.0890885485554443E-5	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9450498652457251	WITHOUT_CLASSIFICATION	0.05495013475427486	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993418105143	WITHOUT_CLASSIFICATION	6.581894856676226E-7	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974606896707	WITHOUT_CLASSIFICATION	2.5393103293173804E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995140392987	WITHOUT_CLASSIFICATION	4.859607013039133E-6	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999994785717327	WITHOUT_CLASSIFICATION	5.214282674015712E-7	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999984648409074	WITHOUT_CLASSIFICATION	1.5351590926068975E-5	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993418105143	WITHOUT_CLASSIFICATION	6.581894856676226E-7	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974606896707	WITHOUT_CLASSIFICATION	2.5393103293173804E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995140392987	WITHOUT_CLASSIFICATION	4.859607013039133E-6	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999994480911103	WITHOUT_CLASSIFICATION	5.519088896210746E-7	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9999910112808783	WITHOUT_CLASSIFICATION	8.98871912170354E-6	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999002667780011	WITHOUT_CLASSIFICATION	9.973322199893371E-5	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999925690380028	WITHOUT_CLASSIFICATION	7.430961997249315E-6	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999998597621407	WITHOUT_CLASSIFICATION	1.4023785934700852E-7	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9998914556502888	WITHOUT_CLASSIFICATION	1.0854434971119983E-4	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999870077617001	WITHOUT_CLASSIFICATION	1.2992238299930285E-5	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999995012700447	WITHOUT_CLASSIFICATION	4.987299553574642E-7	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9999689367280746	WITHOUT_CLASSIFICATION	3.106327192543342E-5	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999991917525604	WITHOUT_CLASSIFICATION	8.082474397273869E-7	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999802821394	WITHOUT_CLASSIFICATION	1.9717860553142935E-8	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9952308465204438	WITHOUT_CLASSIFICATION	0.004769153479556231	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9997127314034633	WITHOUT_CLASSIFICATION	2.872685965368021E-4	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999999401569461	WITHOUT_CLASSIFICATION	5.984305390106022E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999969663625436	WITHOUT_CLASSIFICATION	3.033637456310755E-6	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998936172401468	WITHOUT_CLASSIFICATION	1.0638275985318494E-4	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999995941515882	WITHOUT_CLASSIFICATION	4.0584841177638633E-7	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999984816721244	WITHOUT_CLASSIFICATION	1.518327875611266E-5	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999979340861402	WITHOUT_CLASSIFICATION	2.0659138598476576E-6	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999991601561257	WITHOUT_CLASSIFICATION	8.398438742500764E-7	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999962117825842	WITHOUT_CLASSIFICATION	3.7882174157374673E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9991843761409718	WITHOUT_CLASSIFICATION	8.156238590281812E-4	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999998808798841	WITHOUT_CLASSIFICATION	1.1912011600155521E-7	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999140625141	WITHOUT_CLASSIFICATION	8.59374858903453E-8	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999125142496	WITHOUT_CLASSIFICATION	8.748575040581867E-8	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9997191176620552	WITHOUT_CLASSIFICATION	2.808823379447169E-4	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895813773395	WITHOUT_CLASSIFICATION	1.0418622660477146E-5	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999887923037102	WITHOUT_CLASSIFICATION	1.1207696289837309E-5	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999624414545	WITHOUT_CLASSIFICATION	3.755854540710299E-8	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974850342951	WITHOUT_CLASSIFICATION	2.5149657049595805E-6	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999116690604772	WITHOUT_CLASSIFICATION	8.833093952275539E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999970013041733	WITHOUT_CLASSIFICATION	2.998695826774169E-6	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999970013041733	WITHOUT_CLASSIFICATION	2.998695826774169E-6	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999962710173	WITHOUT_CLASSIFICATION	3.728982737412934E-9	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999984581075408	WITHOUT_CLASSIFICATION	1.5418924592027912E-6	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999991870237801	WITHOUT_CLASSIFICATION	8.129762199556626E-7	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999134448932777	WITHOUT_CLASSIFICATION	8.6555106722282E-5	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999987804294995	WITHOUT_CLASSIFICATION	1.2195705005769896E-6	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999825256489657	WITHOUT_CLASSIFICATION	1.7474351034337424E-5	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9997946963097197	WITHOUT_CLASSIFICATION	2.053036902802874E-4	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.999999911627796	WITHOUT_CLASSIFICATION	8.837220406275732E-8	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999994413273873	WITHOUT_CLASSIFICATION	5.586726127187273E-7	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990710996053	WITHOUT_CLASSIFICATION	9.289003946152418E-7	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985504388811	WITHOUT_CLASSIFICATION	1.4495611190136387E-6	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919141591677	WITHOUT_CLASSIFICATION	8.085840832282618E-6	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988122678328	WITHOUT_CLASSIFICATION	1.1877321672490842E-6	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994811145186	WITHOUT_CLASSIFICATION	5.188854813350731E-7	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991994373127	WITHOUT_CLASSIFICATION	8.00562687314593E-7	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988748864157	WITHOUT_CLASSIFICATION	1.12511358432579E-6	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978623076754	WITHOUT_CLASSIFICATION	2.1376923244864815E-6	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974535023467	WITHOUT_CLASSIFICATION	2.54649765333102E-6	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954037925716	WITHOUT_CLASSIFICATION	4.596207428349174E-6	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999789081534	WITHOUT_CLASSIFICATION	2.109184659973564E-7	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999974314436302	WITHOUT_CLASSIFICATION	2.5685563697935296E-6	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9988219972106773	WITHOUT_CLASSIFICATION	0.0011780027893227396	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999967150874375	WITHOUT_CLASSIFICATION	3.284912562562185E-6	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999906743593291	WITHOUT_CLASSIFICATION	9.325640671001527E-6	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999077873566	WITHOUT_CLASSIFICATION	9.221264345016586E-8	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999969256373908	WITHOUT_CLASSIFICATION	3.0743626091507875E-6	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999744343728	WITHOUT_CLASSIFICATION	2.5565627228944038E-8	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999607838210495	WITHOUT_CLASSIFICATION	3.921617895052715E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999967150874375	WITHOUT_CLASSIFICATION	3.284912562562185E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999967150874375	WITHOUT_CLASSIFICATION	3.284912562562185E-6	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999996269637562	WITHOUT_CLASSIFICATION	3.7303624379682848E-6	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999995628620255	WITHOUT_CLASSIFICATION	4.3713797450388806E-7	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999973458267	WITHOUT_CLASSIFICATION	2.6541734591912393E-9	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999993492356254	WITHOUT_CLASSIFICATION	6.50764374645837E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999959885424601	WITHOUT_CLASSIFICATION	4.011457539852824E-6	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999991601561257	WITHOUT_CLASSIFICATION	8.398438742500764E-7	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999510047255	WITHOUT_CLASSIFICATION	4.8995274494293115E-8	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9994938811669548	WITHOUT_CLASSIFICATION	5.061188330451566E-4	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999837915403254	WITHOUT_CLASSIFICATION	1.620845967459119E-5	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922439958515	WITHOUT_CLASSIFICATION	7.756004148530128E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999985281664757	WITHOUT_CLASSIFICATION	1.471833524367735E-6	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868553533052	WITHOUT_CLASSIFICATION	1.3144646694667128E-5	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999990168827172	WITHOUT_CLASSIFICATION	9.831172828134764E-7	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999990168827172	WITHOUT_CLASSIFICATION	9.831172828134764E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999022332002	WITHOUT_CLASSIFICATION	9.776679975057555E-8	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999022332002	WITHOUT_CLASSIFICATION	9.776679975057555E-8	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931345978554	WITHOUT_CLASSIFICATION	6.865402144616616E-6	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968778663796	WITHOUT_CLASSIFICATION	3.1221336204810187E-6	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9997495167651576	WITHOUT_CLASSIFICATION	2.5048323484236644E-4	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955067033893	WITHOUT_CLASSIFICATION	4.4932966106466995E-6	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9995817920408314	WITHOUT_CLASSIFICATION	4.182079591684637E-4	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999505984980943	WITHOUT_CLASSIFICATION	4.9401501905602464E-5	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998075799856435	WITHOUT_CLASSIFICATION	1.9242001435651598E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731575232973	WITHOUT_CLASSIFICATION	2.684247670267054E-5	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999635939043012	WITHOUT_CLASSIFICATION	3.640609569871658E-5	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999998940113684	WITHOUT_CLASSIFICATION	1.0598863163951655E-7	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998616862094	WITHOUT_CLASSIFICATION	1.3831379069033461E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999823671318658	WITHOUT_CLASSIFICATION	1.7632868134200953E-5	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999954381583027	WITHOUT_CLASSIFICATION	4.561841697171841E-6	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999477900117387	WITHOUT_CLASSIFICATION	5.2209988261422744E-5	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999941016528281	WITHOUT_CLASSIFICATION	5.8983471719536E-6	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.999987607596769	WITHOUT_CLASSIFICATION	1.2392403231069788E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999990677501924	WITHOUT_CLASSIFICATION	9.322498075971381E-7	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999990677501924	WITHOUT_CLASSIFICATION	9.322498075971381E-7	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999998783521209	WITHOUT_CLASSIFICATION	1.216478791094139E-7	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.999983650233247	WITHOUT_CLASSIFICATION	1.6349766753005843E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999984037253	WITHOUT_CLASSIFICATION	1.5962747063950886E-8	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999472288833202	WITHOUT_CLASSIFICATION	5.277111667984476E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865299672565	WITHOUT_CLASSIFICATION	1.3470032743568761E-5	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979155968148	WITHOUT_CLASSIFICATION	2.0844031851961054E-6	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999995245444393	WITHOUT_CLASSIFICATION	4.754555606165821E-7	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999142286728298	WITHOUT_CLASSIFICATION	8.577132717017934E-5	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999992883851038	WITHOUT_CLASSIFICATION	7.116148963143209E-7	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999218106941	WITHOUT_CLASSIFICATION	7.818930592141293E-8	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999219209250784	WITHOUT_CLASSIFICATION	7.807907492164504E-5	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9992710096019641	WITHOUT_CLASSIFICATION	7.289903980358657E-4	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869619835022	WITHOUT_CLASSIFICATION	1.3038016497657808E-5	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999971547646742	WITHOUT_CLASSIFICATION	2.8452353259018656E-6	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999972484582239	WITHOUT_CLASSIFICATION	2.751541776177342E-6	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998303288265966	WITHOUT_CLASSIFICATION	1.6967117340338668E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999991534417797	WITHOUT_CLASSIFICATION	8.465582201782229E-7	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9998354834212877	WITHOUT_CLASSIFICATION	1.6451657871222855E-4	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9997353300421471	WITHOUT_CLASSIFICATION	2.646699578529487E-4	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999872911870671	WITHOUT_CLASSIFICATION	1.2708812932969124E-5	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999950626548	WITHOUT_CLASSIFICATION	4.9373451838626615E-9	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999896558912251	WITHOUT_CLASSIFICATION	1.034410877497909E-5	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999992228215546	WITHOUT_CLASSIFICATION	7.771784453372022E-7	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999975622087195	WITHOUT_CLASSIFICATION	2.4377912805385405E-6	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999986976596882	WITHOUT_CLASSIFICATION	1.302340311827684E-6	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9995920258692653	WITHOUT_CLASSIFICATION	4.079741307345936E-4	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999256790288868	WITHOUT_CLASSIFICATION	7.432097111318408E-5	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999899578642674	WITHOUT_CLASSIFICATION	1.0042135732766631E-5	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999939065237	WITHOUT_CLASSIFICATION	6.093476329085331E-9	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999992499879395	WITHOUT_CLASSIFICATION	7.500120605782089E-7	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999603427809322	WITHOUT_CLASSIFICATION	3.9657219067955755E-5	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999942413506326	WITHOUT_CLASSIFICATION	5.758649367365531E-6	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999932150444604	WITHOUT_CLASSIFICATION	6.784955539671871E-6	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.999999532064826	WITHOUT_CLASSIFICATION	4.6793517406631607E-7	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999868254847984	WITHOUT_CLASSIFICATION	1.3174515201590306E-5	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999986841842178	WITHOUT_CLASSIFICATION	1.3158157822392E-6	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999340503392643	WITHOUT_CLASSIFICATION	6.594966073571012E-5	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999998982185384	WITHOUT_CLASSIFICATION	1.0178146160377266E-7	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999998562298892	WITHOUT_CLASSIFICATION	1.43770110832597E-7	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.999999951130672	WITHOUT_CLASSIFICATION	4.886932798217176E-8	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999982964947589	WITHOUT_CLASSIFICATION	1.7035052410623164E-6	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999996985985133	WITHOUT_CLASSIFICATION	3.01401486754044E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9963811865809504	WITHOUT_CLASSIFICATION	0.0036188134190494534	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999954821255566	WITHOUT_CLASSIFICATION	4.5178744434471454E-6	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999919193890672	WITHOUT_CLASSIFICATION	8.080610932732728E-6	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998256323314342	WITHOUT_CLASSIFICATION	1.7436766856584196E-4	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999997845876782	WITHOUT_CLASSIFICATION	2.1541232169939783E-7	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999865205409353	WITHOUT_CLASSIFICATION	1.3479459064783436E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999962809700068	WITHOUT_CLASSIFICATION	3.7190299931915894E-5	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999979369760971	WITHOUT_CLASSIFICATION	2.063023902965721E-6	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999964105337443	WITHOUT_CLASSIFICATION	3.589466255755195E-6	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999803387805775	WITHOUT_CLASSIFICATION	1.9661219422527897E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999905676868992	WITHOUT_CLASSIFICATION	9.43231310082201E-6	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998585177612336	WITHOUT_CLASSIFICATION	1.41482238766357E-4	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999786314335583	WITHOUT_CLASSIFICATION	2.136856644182605E-5	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999296164254239	WITHOUT_CLASSIFICATION	7.038357457610986E-5	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999859616673108	WITHOUT_CLASSIFICATION	1.4038332689159098E-5	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999754098493256	WITHOUT_CLASSIFICATION	2.459015067434332E-5	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999703422529	WITHOUT_CLASSIFICATION	2.9657747137578293E-8	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999870696175494	WITHOUT_CLASSIFICATION	1.2930382450601433E-5	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999973806569442	WITHOUT_CLASSIFICATION	2.6193430558243783E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999999283778776	WITHOUT_CLASSIFICATION	7.162212239532159E-7	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999906376065	WITHOUT_CLASSIFICATION	9.362393538400402E-9	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999999813710254	WITHOUT_CLASSIFICATION	1.8628974590430578E-7	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999997250792094	WITHOUT_CLASSIFICATION	2.7492079054091935E-7	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999973746160227	WITHOUT_CLASSIFICATION	2.6253839772657787E-6	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999549626719874	WITHOUT_CLASSIFICATION	4.503732801260096E-5	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999996667259439	WITHOUT_CLASSIFICATION	3.332740560567447E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998829614868641	WITHOUT_CLASSIFICATION	1.1703851313602187E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998829614868641	WITHOUT_CLASSIFICATION	1.1703851313602187E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999999688569409	WITHOUT_CLASSIFICATION	3.114305904647894E-8	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999918029060584	WITHOUT_CLASSIFICATION	8.197093941509975E-6	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999946737960567	WITHOUT_CLASSIFICATION	5.326203943349357E-6	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999984583762238	WITHOUT_CLASSIFICATION	1.541623776204369E-5	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999988601407346	WITHOUT_CLASSIFICATION	1.1398592653930688E-5	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999935978833858	WITHOUT_CLASSIFICATION	6.402116614146526E-6	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999995953350839	WITHOUT_CLASSIFICATION	4.04664916105244E-6	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999928883233357	WITHOUT_CLASSIFICATION	7.111676664248361E-6	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999186061751765	WITHOUT_CLASSIFICATION	8.139382482351445E-5	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999838379780123	WITHOUT_CLASSIFICATION	1.6162021987749226E-5	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999978990296693	WITHOUT_CLASSIFICATION	2.100970330676549E-6	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999994433031766	WITHOUT_CLASSIFICATION	5.566968235346916E-7	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.999999749741148	WITHOUT_CLASSIFICATION	2.502588519551507E-7	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999651712898	WITHOUT_CLASSIFICATION	3.482871034041804E-8	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999966796015549	WITHOUT_CLASSIFICATION	3.3203984450342377E-6	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999867868999189	WITHOUT_CLASSIFICATION	1.321310008120409E-5	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999976135177255	WITHOUT_CLASSIFICATION	2.3864822744625907E-6	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.991097609091877	WITHOUT_CLASSIFICATION	0.008902390908122934	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999994906219419	WITHOUT_CLASSIFICATION	5.093780580571579E-7	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999968855212837	WITHOUT_CLASSIFICATION	3.1144787163521246E-6	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999958708845931	WITHOUT_CLASSIFICATION	4.129115406835276E-6	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.99999920405718	WITHOUT_CLASSIFICATION	7.959428199998632E-7	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.999988649694198	WITHOUT_CLASSIFICATION	1.135030580201141E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999978096760005	WITHOUT_CLASSIFICATION	2.1903239994574888E-6	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9996501530958416	WITHOUT_CLASSIFICATION	3.4984690415837573E-4	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.999977741932993	WITHOUT_CLASSIFICATION	2.225806700689504E-5	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999969476100994	WITHOUT_CLASSIFICATION	3.05238990062936E-6	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999885006369186	WITHOUT_CLASSIFICATION	1.1499363081453733E-5	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999988073569869	WITHOUT_CLASSIFICATION	1.19264301314752E-6	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999025203788	WITHOUT_CLASSIFICATION	9.747962111299627E-8	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999995862470538	WITHOUT_CLASSIFICATION	4.137529462966466E-7	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999998753723489	WITHOUT_CLASSIFICATION	1.2462765114556576E-7	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999995003863058	WITHOUT_CLASSIFICATION	4.996136941387388E-7	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999960271356807	WITHOUT_CLASSIFICATION	3.972864319357837E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999707455675412	WITHOUT_CLASSIFICATION	2.925443245881214E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999707455675412	WITHOUT_CLASSIFICATION	2.925443245881214E-5	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999920368680927	WITHOUT_CLASSIFICATION	7.963131907274964E-6	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.999851103550319	WITHOUT_CLASSIFICATION	1.488964496808959E-4	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999670159513909	WITHOUT_CLASSIFICATION	3.29840486089589E-5	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999789489164113	WITHOUT_CLASSIFICATION	2.1051083588728223E-5	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999986978975	WITHOUT_CLASSIFICATION	1.3021025036773816E-9	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999028343101056	WITHOUT_CLASSIFICATION	9.716568989438008E-5	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999975167096183	WITHOUT_CLASSIFICATION	2.4832903817632217E-6	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999904188999633	WITHOUT_CLASSIFICATION	9.581100036699084E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9996454717574776	WITHOUT_CLASSIFICATION	3.5452824252232715E-4	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999750717171277	WITHOUT_CLASSIFICATION	2.492828287224143E-5	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9996312825892505	WITHOUT_CLASSIFICATION	3.687174107495573E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999874426715174	WITHOUT_CLASSIFICATION	1.2557328482580958E-5	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999968270314928	WITHOUT_CLASSIFICATION	3.172968507164185E-6	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999850546634876	WITHOUT_CLASSIFICATION	1.4945336512365021E-5	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999998882647544	WITHOUT_CLASSIFICATION	1.1173524563934922E-7	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.991637647172285	WITHOUT_CLASSIFICATION	0.008362352827715046	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.991637647172285	WITHOUT_CLASSIFICATION	0.008362352827715046	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999806740503675	WITHOUT_CLASSIFICATION	1.9325949632588557E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999956829274897	WITHOUT_CLASSIFICATION	4.317072510307632E-6	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999979320581361	WITHOUT_CLASSIFICATION	2.0679418638102163E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998422643676	WITHOUT_CLASSIFICATION	1.5773563234671578E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999823671318658	WITHOUT_CLASSIFICATION	1.7632868134200953E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9989342420825068	WITHOUT_CLASSIFICATION	0.0010657579174931787	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.999999925970993	WITHOUT_CLASSIFICATION	7.402900706405327E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999992652520795	WITHOUT_CLASSIFICATION	7.347479205128303E-7	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999992652520795	WITHOUT_CLASSIFICATION	7.347479205128303E-7	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999587897311658	WITHOUT_CLASSIFICATION	4.1210268834209275E-5	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999998856074515	WITHOUT_CLASSIFICATION	1.1439254860282079E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999997415726938	WITHOUT_CLASSIFICATION	2.584273061701916E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.99819358333661	WITHOUT_CLASSIFICATION	0.0018064166633900897	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999981998386367	WITHOUT_CLASSIFICATION	1.8001613632793384E-6	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999608007101456	WITHOUT_CLASSIFICATION	3.919928985446889E-5	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999825533105272	WITHOUT_CLASSIFICATION	1.744668947286935E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999993347425241	WITHOUT_CLASSIFICATION	6.652574758476167E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999606556845	WITHOUT_CLASSIFICATION	3.934431547487533E-8	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9996793854514179	WITHOUT_CLASSIFICATION	3.20614548582222E-4	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999275732442167	WITHOUT_CLASSIFICATION	7.24267557834059E-5	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999922592469629	WITHOUT_CLASSIFICATION	7.740753037149097E-6	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999244423131	WITHOUT_CLASSIFICATION	7.555768677187217E-8	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999994990180804	WITHOUT_CLASSIFICATION	5.00981919743154E-7	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999956691649357	WITHOUT_CLASSIFICATION	4.33083506443265E-6	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999982334539981	WITHOUT_CLASSIFICATION	1.7665460019346336E-6	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999973924477776	WITHOUT_CLASSIFICATION	2.6075522223328E-6	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999955602964645	WITHOUT_CLASSIFICATION	4.439703535471178E-6	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999911290090241	WITHOUT_CLASSIFICATION	8.870990975878633E-6	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999718932898369	WITHOUT_CLASSIFICATION	2.810671016310761E-5	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999994118386095	WITHOUT_CLASSIFICATION	5.881613905164943E-7	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999989949136722	WITHOUT_CLASSIFICATION	1.0050863278857142E-6	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9995276080096367	WITHOUT_CLASSIFICATION	4.7239199036334175E-4	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9998785683278318	WITHOUT_CLASSIFICATION	1.214316721682864E-4	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999982956612035	WITHOUT_CLASSIFICATION	1.7043387964931155E-6	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999924904845194	WITHOUT_CLASSIFICATION	7.509515480497956E-6	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999928816465626	WITHOUT_CLASSIFICATION	7.118353437426238E-6	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999999998854431	WITHOUT_CLASSIFICATION	1.1455689822972597E-9	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999867760686231	WITHOUT_CLASSIFICATION	1.3223931376844242E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999956079456808	WITHOUT_CLASSIFICATION	4.392054319183015E-6	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999682137825534	WITHOUT_CLASSIFICATION	3.1786217446517854E-5	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999923470216986	WITHOUT_CLASSIFICATION	7.652978301417373E-6	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9996531009761671	WITHOUT_CLASSIFICATION	3.4689902383283784E-4	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999997214682292	WITHOUT_CLASSIFICATION	2.785317707432439E-7	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999997683538955	WITHOUT_CLASSIFICATION	2.3164610447741124E-7	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999087318085315	WITHOUT_CLASSIFICATION	9.126819146862753E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999708389586959	WITHOUT_CLASSIFICATION	2.9161041304101924E-5	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999822902791081	WITHOUT_CLASSIFICATION	1.7709720891881474E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999996835889906	WITHOUT_CLASSIFICATION	3.1641100935441835E-7	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999999912063823	WITHOUT_CLASSIFICATION	8.79361770373873E-8	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999999252054681	WITHOUT_CLASSIFICATION	7.479453189822235E-7	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9997292396775179	WITHOUT_CLASSIFICATION	2.70760322481995E-4	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999924853533901	WITHOUT_CLASSIFICATION	7.514646609797449E-6	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.99999865981159	WITHOUT_CLASSIFICATION	1.3401884100185818E-6	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999995851916	WITHOUT_CLASSIFICATION	4.148083476341702E-10	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999241856527684	WITHOUT_CLASSIFICATION	7.581434723162192E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999996835889906	WITHOUT_CLASSIFICATION	3.1641100935441835E-7	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999999912063823	WITHOUT_CLASSIFICATION	8.79361770373873E-8	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999945921761332	WITHOUT_CLASSIFICATION	5.407823866734058E-6	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999998092620325	WITHOUT_CLASSIFICATION	1.9073796749575626E-6	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999089154525	WITHOUT_CLASSIFICATION	9.108454747096283E-8	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999960462322504	WITHOUT_CLASSIFICATION	3.9537677496693694E-6	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999968633880686	WITHOUT_CLASSIFICATION	3.136611931509981E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999990360155508	WITHOUT_CLASSIFICATION	9.639844491489681E-7	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999061670264455	WITHOUT_CLASSIFICATION	9.383297355458881E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999835481337642	WITHOUT_CLASSIFICATION	1.6451866235809935E-5	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999986302902195	WITHOUT_CLASSIFICATION	1.3697097805501349E-6	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9961157434614794	WITHOUT_CLASSIFICATION	0.0038842565385205905	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999998901065	WITHOUT_CLASSIFICATION	1.0989352390394717E-10	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9961157434614794	WITHOUT_CLASSIFICATION	0.0038842565385205905	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999963795454085	WITHOUT_CLASSIFICATION	3.620454591473694E-6	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999973404153214	WITHOUT_CLASSIFICATION	2.65958467856589E-6	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999851113140793	WITHOUT_CLASSIFICATION	1.4888685920711936E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998976297729	WITHOUT_CLASSIFICATION	1.0237022707240547E-7	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9948457137612016	WITHOUT_CLASSIFICATION	0.005154286238798521	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999415082159695	WITHOUT_CLASSIFICATION	5.849178403045785E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999415082159695	WITHOUT_CLASSIFICATION	5.849178403045785E-5	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999928995014349	WITHOUT_CLASSIFICATION	7.100498565062714E-6	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999988963437395	WITHOUT_CLASSIFICATION	1.103656260564988E-6	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999950308597935	WITHOUT_CLASSIFICATION	4.969140206570472E-6	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998585145227294	WITHOUT_CLASSIFICATION	1.4148547727061464E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999981957788194	WITHOUT_CLASSIFICATION	1.8042211804925871E-6	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999821007805864	WITHOUT_CLASSIFICATION	1.7899219413630656E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999987892698433	WITHOUT_CLASSIFICATION	1.210730156677688E-6	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999995400208294	WITHOUT_CLASSIFICATION	4.599791706742528E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999784949022037	WITHOUT_CLASSIFICATION	2.1505097796393574E-5	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9999542741973834	WITHOUT_CLASSIFICATION	4.5725802616633894E-5	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999992311054775	WITHOUT_CLASSIFICATION	7.688945224730356E-7	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999756930863142	WITHOUT_CLASSIFICATION	2.430691368588905E-5	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9999755484025004	WITHOUT_CLASSIFICATION	2.445159749965712E-5	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999986352404108	WITHOUT_CLASSIFICATION	1.364759589254924E-6	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999997968328719	WITHOUT_CLASSIFICATION	2.031671282304937E-7	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999873370706668	WITHOUT_CLASSIFICATION	1.26629293331625E-5	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999952761613955	WITHOUT_CLASSIFICATION	4.723838604613004E-6	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999998030320487	WITHOUT_CLASSIFICATION	1.9696795115551745E-7	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999966173604743	WITHOUT_CLASSIFICATION	3.382639525821831E-6	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998110312204771	WITHOUT_CLASSIFICATION	1.8896877952294592E-4	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999999834207928	WITHOUT_CLASSIFICATION	1.657920720586138E-7	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999939497741583	WITHOUT_CLASSIFICATION	6.05022584173857E-6	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999924108849892	WITHOUT_CLASSIFICATION	7.589115010791223E-6	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999997183073553	WITHOUT_CLASSIFICATION	2.816926447447746E-7	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999989832013157	WITHOUT_CLASSIFICATION	1.0167986842385677E-6	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999780008292318	WITHOUT_CLASSIFICATION	2.1999170768183398E-5	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999998203939299	WITHOUT_CLASSIFICATION	1.7960607010236284E-7	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9991117911840439	WITHOUT_CLASSIFICATION	8.882088159561944E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999996617989416	WITHOUT_CLASSIFICATION	3.382010583286706E-7	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999996196573085	WITHOUT_CLASSIFICATION	3.8034269148375174E-7	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999443189238267	WITHOUT_CLASSIFICATION	5.568107617319922E-5	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999228069388708	WITHOUT_CLASSIFICATION	7.71930611291315E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999987892698433	WITHOUT_CLASSIFICATION	1.210730156677688E-6	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999442507659613	WITHOUT_CLASSIFICATION	5.57492340387766E-5	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999869886870433	WITHOUT_CLASSIFICATION	1.3011312956705652E-5	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9879009058694741	WITHOUT_CLASSIFICATION	0.012099094130525985	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999982875734307	WITHOUT_CLASSIFICATION	1.7124265692893429E-6	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999992937300257	WITHOUT_CLASSIFICATION	7.062699741910468E-7	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999997972911843	WITHOUT_CLASSIFICATION	2.0270881577182435E-7	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998585145227294	WITHOUT_CLASSIFICATION	1.4148547727061464E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998585145227294	WITHOUT_CLASSIFICATION	1.4148547727061464E-4	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999993359679127	WITHOUT_CLASSIFICATION	6.64032087337629E-7	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999995216475014	WITHOUT_CLASSIFICATION	4.783524986518504E-7	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999944448602237	WITHOUT_CLASSIFICATION	5.5551397763041465E-6	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.999998971617556	WITHOUT_CLASSIFICATION	1.0283824440116942E-6	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9998340874375978	WITHOUT_CLASSIFICATION	1.6591256240209264E-4	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9992170756362486	WITHOUT_CLASSIFICATION	7.829243637513917E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9994110813533503	WITHOUT_CLASSIFICATION	5.889186466496934E-4	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999986116487964	WITHOUT_CLASSIFICATION	1.3883512035583248E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999800954614575	WITHOUT_CLASSIFICATION	1.990453854247891E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999983092599629	WITHOUT_CLASSIFICATION	1.69074003716604E-6	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999992442435391	WITHOUT_CLASSIFICATION	7.557564609974681E-7	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999852610799107	WITHOUT_CLASSIFICATION	1.4738920089288468E-4	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999987690180575	WITHOUT_CLASSIFICATION	1.2309819424604802E-6	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999983092599629	WITHOUT_CLASSIFICATION	1.69074003716604E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999984125670084	WITHOUT_CLASSIFICATION	1.5874329916459922E-6	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.999995788779237	WITHOUT_CLASSIFICATION	4.211220762975723E-6	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999907672105481	WITHOUT_CLASSIFICATION	9.232789451819916E-6	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9959443461991405	WITHOUT_CLASSIFICATION	0.0040556538008594475	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999852610799107	WITHOUT_CLASSIFICATION	1.4738920089288468E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999664203357803	WITHOUT_CLASSIFICATION	3.357966421969106E-5	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999468420174594	WITHOUT_CLASSIFICATION	5.315798254059003E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999977464200875	WITHOUT_CLASSIFICATION	2.2535799124113377E-6	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999079252680032	WITHOUT_CLASSIFICATION	9.207473199684024E-5	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.999928484952893	WITHOUT_CLASSIFICATION	7.151504710705675E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999993095302466	WITHOUT_CLASSIFICATION	6.90469753391043E-7	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999930753447984	WITHOUT_CLASSIFICATION	6.924655201575638E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999935023994161	WITHOUT_CLASSIFICATION	6.497600583909251E-6	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999987071157426	WITHOUT_CLASSIFICATION	1.2928842573415598E-6	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999998612539682	WITHOUT_CLASSIFICATION	1.3874603176215397E-7	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999019180797983	WITHOUT_CLASSIFICATION	9.808192020164717E-5	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999993111464412	WITHOUT_CLASSIFICATION	6.888535587463035E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999983092599629	WITHOUT_CLASSIFICATION	1.69074003716604E-6	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999664203357803	WITHOUT_CLASSIFICATION	3.357966421969106E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999977464200875	WITHOUT_CLASSIFICATION	2.2535799124113377E-6	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999037686325926	WITHOUT_CLASSIFICATION	9.623136740738335E-5	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999690016415208	WITHOUT_CLASSIFICATION	3.0998358479263604E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999930985297457	WITHOUT_CLASSIFICATION	6.901470254303131E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999852610799107	WITHOUT_CLASSIFICATION	1.4738920089288468E-4	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999997562042724	WITHOUT_CLASSIFICATION	2.437957276415779E-7	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999974069021117	WITHOUT_CLASSIFICATION	2.5930978882607953E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999951671847974	WITHOUT_CLASSIFICATION	4.832815202568288E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999949664679557	WITHOUT_CLASSIFICATION	5.033532044260894E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999935023994161	WITHOUT_CLASSIFICATION	6.497600583909251E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999984125670084	WITHOUT_CLASSIFICATION	1.5874329916459922E-6	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999829828033521	WITHOUT_CLASSIFICATION	1.701719664789086E-5	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999985159813986	WITHOUT_CLASSIFICATION	1.4840186014792372E-6	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.999998512859288	WITHOUT_CLASSIFICATION	1.487140712037898E-6	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.99999516065946	WITHOUT_CLASSIFICATION	4.839340539972039E-6	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999985586975572	WITHOUT_CLASSIFICATION	1.441302442785158E-6	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999989710156016	WITHOUT_CLASSIFICATION	1.0289843984082101E-6	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999595810756485	WITHOUT_CLASSIFICATION	4.041892435140962E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998976297729	WITHOUT_CLASSIFICATION	1.0237022707240547E-7	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992630828842	WITHOUT_CLASSIFICATION	7.369171158760079E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999550045190465	WITHOUT_CLASSIFICATION	4.499548095342364E-5	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999913949739	WITHOUT_CLASSIFICATION	8.605026097593546E-9	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999285507572463	WITHOUT_CLASSIFICATION	7.14492427536986E-4	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999954653604809	WITHOUT_CLASSIFICATION	4.534639519118978E-5	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999849150309026	WITHOUT_CLASSIFICATION	1.5084969097461533E-5	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999960925294592	WITHOUT_CLASSIFICATION	3.907470540822406E-6	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999938373347882	WITHOUT_CLASSIFICATION	6.16266521178708E-6	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999997460011893	WITHOUT_CLASSIFICATION	2.5399881063388155E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999949664679557	WITHOUT_CLASSIFICATION	5.033532044260894E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999550045190465	WITHOUT_CLASSIFICATION	4.499548095342364E-5	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999817751512037	WITHOUT_CLASSIFICATION	1.8224848796294945E-5	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999752334999565	WITHOUT_CLASSIFICATION	2.476650004347443E-5	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999877647509177	WITHOUT_CLASSIFICATION	1.223524908243961E-5	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999987527564694	WITHOUT_CLASSIFICATION	1.2472435305864833E-6	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.999962776229206	WITHOUT_CLASSIFICATION	3.722377079395972E-5	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999997553118147	WITHOUT_CLASSIFICATION	2.446881852496897E-7	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999792919085079	WITHOUT_CLASSIFICATION	2.0708091492104795E-5	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9973177891035053	WITHOUT_CLASSIFICATION	0.0026822108964946628	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999957974783953	WITHOUT_CLASSIFICATION	4.202521604730027E-6	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9996915766885781	WITHOUT_CLASSIFICATION	3.084233114219715E-4	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.999998681670146	WITHOUT_CLASSIFICATION	1.3183298540456898E-6	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999723331579171	WITHOUT_CLASSIFICATION	2.7666842082836538E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999974300006483	WITHOUT_CLASSIFICATION	2.569999351640322E-6	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999706795702142	WITHOUT_CLASSIFICATION	2.9320429785798104E-5	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.999999228537805	WITHOUT_CLASSIFICATION	7.714621950555286E-7	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999997685203296	WITHOUT_CLASSIFICATION	2.314796705650303E-7	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999953118301871	WITHOUT_CLASSIFICATION	4.688169812905047E-5	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999998684215686	WITHOUT_CLASSIFICATION	1.3157843144886371E-7	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999997937601706	WITHOUT_CLASSIFICATION	2.0623982942283119E-7	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999971539919762	WITHOUT_CLASSIFICATION	2.8460080238072867E-6	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.999943302360903	WITHOUT_CLASSIFICATION	5.669763909707535E-5	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999998295926635	WITHOUT_CLASSIFICATION	1.7040733647381734E-7	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999309635474	WITHOUT_CLASSIFICATION	6.903645256893339E-8	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999991750875005	WITHOUT_CLASSIFICATION	8.249124994910929E-7	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999997722763668	WITHOUT_CLASSIFICATION	2.2772363313559102E-7	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9984941613784157	WITHOUT_CLASSIFICATION	0.0015058386215842307	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999809518969771	WITHOUT_CLASSIFICATION	1.9048103022990056E-5	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.99946908561626	WITHOUT_CLASSIFICATION	5.309143837400794E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9993669434207384	WITHOUT_CLASSIFICATION	6.330565792616603E-4	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8424039115587714	WITHOUT_CLASSIFICATION	0.15759608844122852	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999960438535958	WITHOUT_CLASSIFICATION	3.956146404312709E-6	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999747205525723	WITHOUT_CLASSIFICATION	2.527944742769053E-5	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999990978303355	WITHOUT_CLASSIFICATION	9.021696645517178E-7	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999983821433088	WITHOUT_CLASSIFICATION	1.617856691206229E-6	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9998887197694586	WITHOUT_CLASSIFICATION	1.1128023054146475E-4	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999998157936638	WITHOUT_CLASSIFICATION	1.842063362361673E-7	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999998423524445	WITHOUT_CLASSIFICATION	1.5764755545983988E-7	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999438023165511	WITHOUT_CLASSIFICATION	5.6197683448830954E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999998157936638	WITHOUT_CLASSIFICATION	1.842063362361673E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9998887197694586	WITHOUT_CLASSIFICATION	1.1128023054146475E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999998423524445	WITHOUT_CLASSIFICATION	1.5764755545983988E-7	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.99999972216244	WITHOUT_CLASSIFICATION	2.7783755998745957E-7	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999998736532004	WITHOUT_CLASSIFICATION	1.263467996195476E-7	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999855768632747	WITHOUT_CLASSIFICATION	1.4423136725164582E-5	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.999980052891339	WITHOUT_CLASSIFICATION	1.994710866103862E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999998202281603	WITHOUT_CLASSIFICATION	1.7977183974608526E-7	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8357621582709422	WITHOUT_CLASSIFICATION	0.1642378417290577	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999290182730425	WITHOUT_CLASSIFICATION	7.0981726957484E-5	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998672424723863	WITHOUT_CLASSIFICATION	1.3275752761360756E-4	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999415455486	WITHOUT_CLASSIFICATION	5.845445129572334E-8	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998074842210636	WITHOUT_CLASSIFICATION	1.9251577893643525E-4	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999790871743618	WITHOUT_CLASSIFICATION	2.0912825638179057E-5	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999558053931608	WITHOUT_CLASSIFICATION	4.4194606839264125E-5	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999172476245312	WITHOUT_CLASSIFICATION	8.275237546880213E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999816170404572	WITHOUT_CLASSIFICATION	1.8382959542724382E-5	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998915173067	WITHOUT_CLASSIFICATION	1.0848269334328704E-7	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999822909727079	WITHOUT_CLASSIFICATION	1.770902729217774E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999321415324409	WITHOUT_CLASSIFICATION	6.785846755907887E-5	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999884762488367	WITHOUT_CLASSIFICATION	1.152375116325166E-5	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999389390880836	WITHOUT_CLASSIFICATION	6.106091191643474E-5	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999872276125	WITHOUT_CLASSIFICATION	1.2772387618521224E-8	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.999990554664433	WITHOUT_CLASSIFICATION	9.445335566940627E-6	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999880349132	WITHOUT_CLASSIFICATION	1.1965086794787916E-8	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999719153224063	WITHOUT_CLASSIFICATION	2.808467759367208E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999165706349	WITHOUT_CLASSIFICATION	8.342936514407828E-8	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999834420616	WITHOUT_CLASSIFICATION	1.655793840658506E-8	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999834420616	WITHOUT_CLASSIFICATION	1.655793840658506E-8	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999326128177	WITHOUT_CLASSIFICATION	6.738718224391488E-8	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999326128177	WITHOUT_CLASSIFICATION	6.738718224391488E-8	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999407280053073	WITHOUT_CLASSIFICATION	5.927199469257698E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999321415324409	WITHOUT_CLASSIFICATION	6.785846755907887E-5	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999994953294935	WITHOUT_CLASSIFICATION	5.046705064395365E-7	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999897221542	WITHOUT_CLASSIFICATION	1.0277845681336251E-8	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999999966616469	WITHOUT_CLASSIFICATION	3.3383531103873075E-8	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999999966616469	WITHOUT_CLASSIFICATION	3.3383531103873075E-8	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999896846634581	WITHOUT_CLASSIFICATION	1.031533654196112E-5	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999993764319948	WITHOUT_CLASSIFICATION	6.235680052564744E-7	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999998843646751	WITHOUT_CLASSIFICATION	1.1563532493055314E-7	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999997752983685	WITHOUT_CLASSIFICATION	2.2470163140027837E-7	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9642928313676237	WITHOUT_CLASSIFICATION	0.03570716863237638	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9975257038874106	WITHOUT_CLASSIFICATION	0.002474296112589343	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999506038735552	WITHOUT_CLASSIFICATION	4.93961264448254E-5	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999957644402104	WITHOUT_CLASSIFICATION	4.235559789532477E-6	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999571873911224	WITHOUT_CLASSIFICATION	4.281260887771973E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999613100594038	WITHOUT_CLASSIFICATION	3.868994059617246E-5	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999873946803258	WITHOUT_CLASSIFICATION	1.2605319674243467E-5	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999986358767976	WITHOUT_CLASSIFICATION	1.3641232024334232E-6	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999989752464944	WITHOUT_CLASSIFICATION	1.0247535055954552E-6	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999971583110228	WITHOUT_CLASSIFICATION	2.8416889771563512E-6	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999998455245085	WITHOUT_CLASSIFICATION	1.5447549155460718E-7	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999999764395989	WITHOUT_CLASSIFICATION	2.3560401091611397E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942653786665	WITHOUT_CLASSIFICATION	5.73462133344428E-6	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999960588954607	WITHOUT_CLASSIFICATION	3.9411045392936815E-6	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999279811834736	WITHOUT_CLASSIFICATION	7.201881652633228E-5	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999982687487076	WITHOUT_CLASSIFICATION	1.7312512924704768E-6	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999997128664581	WITHOUT_CLASSIFICATION	2.871335419950123E-7	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999981352832388	WITHOUT_CLASSIFICATION	1.864716761253533E-6	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999634075023	WITHOUT_CLASSIFICATION	3.659249769569808E-8	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999943724847998	WITHOUT_CLASSIFICATION	5.6275152001759745E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999134448932777	WITHOUT_CLASSIFICATION	8.6555106722282E-5	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999999992410296	WITHOUT_CLASSIFICATION	7.589703934523679E-9	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999550045190465	WITHOUT_CLASSIFICATION	4.499548095342364E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999723331579171	WITHOUT_CLASSIFICATION	2.7666842082836538E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999914210720533	WITHOUT_CLASSIFICATION	8.578927946706124E-6	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9997129074876607	WITHOUT_CLASSIFICATION	2.8709251233927584E-4	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987599338745	WITHOUT_CLASSIFICATION	1.2400661254886154E-5	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999695099025856	WITHOUT_CLASSIFICATION	3.0490097414445316E-5	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999564565003572	WITHOUT_CLASSIFICATION	4.354349964270208E-5	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999564565003572	WITHOUT_CLASSIFICATION	4.354349964270208E-5	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999746186707966	WITHOUT_CLASSIFICATION	2.5381329203346322E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999926187078064	WITHOUT_CLASSIFICATION	7.381292193624353E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9996284648605073	WITHOUT_CLASSIFICATION	3.7153513949263916E-4	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9996284648605073	WITHOUT_CLASSIFICATION	3.7153513949263916E-4	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999709361502473	WITHOUT_CLASSIFICATION	2.906384975270779E-4	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999774431797562	WITHOUT_CLASSIFICATION	2.255682024380427E-4	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999625053700493	WITHOUT_CLASSIFICATION	3.7494629950772065E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999959885424601	WITHOUT_CLASSIFICATION	4.011457539852824E-6	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999957073757538	WITHOUT_CLASSIFICATION	4.292624246202341E-6	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999847826258544	WITHOUT_CLASSIFICATION	1.5217374145537826E-5	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999989440831428	WITHOUT_CLASSIFICATION	1.0559168571906235E-6	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999999152441649	WITHOUT_CLASSIFICATION	8.475583517417493E-8	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998451254721561	WITHOUT_CLASSIFICATION	1.5487452784396032E-4	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998451254721561	WITHOUT_CLASSIFICATION	1.5487452784396032E-4	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999968372156206	WITHOUT_CLASSIFICATION	3.1627843793777E-6	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999995131552812	WITHOUT_CLASSIFICATION	4.868447187188326E-7	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999995131552812	WITHOUT_CLASSIFICATION	4.868447187188326E-7	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999443929712658	WITHOUT_CLASSIFICATION	5.5607028734269804E-5	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999998604740461	WITHOUT_CLASSIFICATION	1.395259539791983E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9978627196429147	WITHOUT_CLASSIFICATION	0.0021372803570851957	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999996137285827	WITHOUT_CLASSIFICATION	3.862714173708792E-7	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999997385085468	WITHOUT_CLASSIFICATION	2.6149145316629795E-7	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999996767170567	WITHOUT_CLASSIFICATION	3.2328294328508143E-7	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999999465052545	WITHOUT_CLASSIFICATION	5.349474553197168E-8	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999951824769573	WITHOUT_CLASSIFICATION	4.817523042708658E-6	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999193654269	WITHOUT_CLASSIFICATION	8.06345731353894E-8	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.926477786811284	WITHOUT_CLASSIFICATION	0.07352221318871592	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999921945601639	WITHOUT_CLASSIFICATION	7.805439836046223E-6	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999774934836617	WITHOUT_CLASSIFICATION	2.250651633833946E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999485663889213	WITHOUT_CLASSIFICATION	5.143361107868187E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999485663889213	WITHOUT_CLASSIFICATION	5.143361107868187E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999485663889213	WITHOUT_CLASSIFICATION	5.143361107868187E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999485663889213	WITHOUT_CLASSIFICATION	5.143361107868187E-5	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999583109905825	WITHOUT_CLASSIFICATION	4.168900941750808E-5	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.7362729497427555	WITHOUT_CLASSIFICATION	0.2637270502572445	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999995101384336	WITHOUT_CLASSIFICATION	4.898615663921256E-6	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9998783419783072	WITHOUT_CLASSIFICATION	1.2165802169290688E-4	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999992792090416	WITHOUT_CLASSIFICATION	7.207909583812081E-7	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.999827322476889	WITHOUT_CLASSIFICATION	1.7267752311105928E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999823671318658	WITHOUT_CLASSIFICATION	1.7632868134200953E-5	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998534312800511	WITHOUT_CLASSIFICATION	1.4656871994889143E-4	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999952046757284	WITHOUT_CLASSIFICATION	4.795324271487097E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999823671318658	WITHOUT_CLASSIFICATION	1.7632868134200953E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999823671318658	WITHOUT_CLASSIFICATION	1.7632868134200953E-5	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999786862023	WITHOUT_CLASSIFICATION	2.1313797653957514E-8	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999991028221055	WITHOUT_CLASSIFICATION	8.971778945733227E-7	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999988621535563	WITHOUT_CLASSIFICATION	1.137846443699538E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999962295690292	WITHOUT_CLASSIFICATION	3.770430970646334E-6	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999928796317159	WITHOUT_CLASSIFICATION	7.12036828406016E-6	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999988872280374	WITHOUT_CLASSIFICATION	1.1127719626042396E-5	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999975441168911	WITHOUT_CLASSIFICATION	2.455883108822026E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999962295690292	WITHOUT_CLASSIFICATION	3.770430970646334E-6	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9906809590159593	WITHOUT_CLASSIFICATION	0.009319040984040673	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999947422073133	WITHOUT_CLASSIFICATION	5.257792686720129E-6	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999047770921	WITHOUT_CLASSIFICATION	9.522290792464357E-8	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999537858036727	WITHOUT_CLASSIFICATION	4.621419632725753E-5	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9997198058324676	WITHOUT_CLASSIFICATION	2.8019416753235804E-4	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998828196812262	WITHOUT_CLASSIFICATION	1.1718031877380858E-4	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999992956860183	WITHOUT_CLASSIFICATION	7.043139817270309E-7	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999699179482492	WITHOUT_CLASSIFICATION	3.0082051750808324E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999177176762	WITHOUT_CLASSIFICATION	8.228232390131058E-8	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999999220170338	WITHOUT_CLASSIFICATION	7.798296619932984E-7	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999929364916	WITHOUT_CLASSIFICATION	7.063508390352842E-8	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999987594547676	WITHOUT_CLASSIFICATION	1.2405452324412423E-6	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.998299742724557	WITHOUT_CLASSIFICATION	0.0017002572754430192	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999553538570265	WITHOUT_CLASSIFICATION	4.4646142973443244E-5	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999629495804426	WITHOUT_CLASSIFICATION	3.705041955734737E-5	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999940284644189	WITHOUT_CLASSIFICATION	5.971535581130905E-6	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998170368977	WITHOUT_CLASSIFICATION	1.8296310229789976E-7	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999695288677267	WITHOUT_CLASSIFICATION	3.047113227336415E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999545848386	WITHOUT_CLASSIFICATION	4.541516150667987E-8	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999695288677267	WITHOUT_CLASSIFICATION	3.047113227336415E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999998366947522	WITHOUT_CLASSIFICATION	1.6330524780669542E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999895936949722	WITHOUT_CLASSIFICATION	1.0406305027782063E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9994070389375742	WITHOUT_CLASSIFICATION	5.929610624258774E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999959960073498	WITHOUT_CLASSIFICATION	4.0039926502183875E-6	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998170368977	WITHOUT_CLASSIFICATION	1.8296310229789976E-7	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999545848386	WITHOUT_CLASSIFICATION	4.541516150667987E-8	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999998366947522	WITHOUT_CLASSIFICATION	1.6330524780669542E-6	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999983564621249	WITHOUT_CLASSIFICATION	1.6435378750755207E-6	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999804367049885	WITHOUT_CLASSIFICATION	1.956329501159518E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9999931687577875	WITHOUT_CLASSIFICATION	6.831242212525729E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9999795222945376	WITHOUT_CLASSIFICATION	2.0477705462454587E-5	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9839566876658454	WITHOUT_CLASSIFICATION	0.016043312334154628	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999993838521825	WITHOUT_CLASSIFICATION	6.161478175773565E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942653786665	WITHOUT_CLASSIFICATION	5.73462133344428E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999895936949722	WITHOUT_CLASSIFICATION	1.0406305027782063E-5	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999974937450228	WITHOUT_CLASSIFICATION	2.5062549771673865E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9945026966492081	WITHOUT_CLASSIFICATION	0.005497303350791813	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999996700883284	WITHOUT_CLASSIFICATION	3.299116715836655E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942653786665	WITHOUT_CLASSIFICATION	5.73462133344428E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999550045190465	WITHOUT_CLASSIFICATION	4.499548095342364E-5	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999999917048198	WITHOUT_CLASSIFICATION	8.295180194951391E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942653786665	WITHOUT_CLASSIFICATION	5.73462133344428E-6	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999785766297	WITHOUT_CLASSIFICATION	2.1423370278691357E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999972188624128	WITHOUT_CLASSIFICATION	2.7811375872477237E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999550045190465	WITHOUT_CLASSIFICATION	4.499548095342364E-5	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9996597395420872	WITHOUT_CLASSIFICATION	3.402604579128298E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999994435070013	WITHOUT_CLASSIFICATION	5.564929987415581E-7	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999996542091911	WITHOUT_CLASSIFICATION	3.4579080889707607E-7	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999979897239707	WITHOUT_CLASSIFICATION	2.010276029252096E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998615800189051	WITHOUT_CLASSIFICATION	1.3841998109485055E-4	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999597421812825	WITHOUT_CLASSIFICATION	4.0257818717490996E-5	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999993906688822	WITHOUT_CLASSIFICATION	6.09331117838533E-7	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999985909098411	WITHOUT_CLASSIFICATION	1.4090901589551184E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998829614868641	WITHOUT_CLASSIFICATION	1.1703851313602187E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999998905100785	WITHOUT_CLASSIFICATION	1.0948992141088754E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9978627196429147	WITHOUT_CLASSIFICATION	0.0021372803570851957	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999969828460773	WITHOUT_CLASSIFICATION	3.017153922751286E-6	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9594337781224669	WITHOUT_CLASSIFICATION	0.04056622187753304	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999983395074842	WITHOUT_CLASSIFICATION	1.6604925158481092E-6	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999813961244608	WITHOUT_CLASSIFICATION	1.860387553925517E-5	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999998310120767	WITHOUT_CLASSIFICATION	1.6898792329009154E-6	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999192321105	WITHOUT_CLASSIFICATION	8.076788947441024E-8	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9981222079012894	WITHOUT_CLASSIFICATION	0.0018777920987106697	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999674825889605	WITHOUT_CLASSIFICATION	3.251741103943819E-5	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999255894306	WITHOUT_CLASSIFICATION	7.441056940534611E-7	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999863502074297	WITHOUT_CLASSIFICATION	1.3649792570390158E-5	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.997678369568111	WITHOUT_CLASSIFICATION	0.0023216304318890734	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999962711623484	WITHOUT_CLASSIFICATION	3.728837651595726E-5	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999877219720618	WITHOUT_CLASSIFICATION	1.2278027938260568E-5	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999999832920721	WITHOUT_CLASSIFICATION	1.6707927839408876E-8	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999999787966379	WITHOUT_CLASSIFICATION	2.120336209997847E-7	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9994428086170623	WITHOUT_CLASSIFICATION	5.571913829377919E-4	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999711163407466	WITHOUT_CLASSIFICATION	2.8883659253354717E-5	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.999999548272993	WITHOUT_CLASSIFICATION	4.517270070271161E-7	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999995465330577	WITHOUT_CLASSIFICATION	4.5346694234852184E-7	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999991614601189	WITHOUT_CLASSIFICATION	8.385398810464565E-7	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.994876594359924	WITHOUT_CLASSIFICATION	0.005123405640075936	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9992995005734923	WITHOUT_CLASSIFICATION	7.004994265077624E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999994314359432	WITHOUT_CLASSIFICATION	5.685640568227347E-7	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999824399123736	WITHOUT_CLASSIFICATION	1.7560087626468118E-5	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9999966481873854	WITHOUT_CLASSIFICATION	3.351812614567819E-6	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998410862091841	WITHOUT_CLASSIFICATION	1.5891379081582518E-4	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9998650495483665	WITHOUT_CLASSIFICATION	1.3495045163351412E-4	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9986154961045635	WITHOUT_CLASSIFICATION	0.001384503895436543	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999981102652388	WITHOUT_CLASSIFICATION	1.8897347612807777E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999550045190465	WITHOUT_CLASSIFICATION	4.499548095342364E-5	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999389820505722	WITHOUT_CLASSIFICATION	6.101794942784473E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999526092166205	WITHOUT_CLASSIFICATION	4.739078337947863E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999526092166205	WITHOUT_CLASSIFICATION	4.739078337947863E-5	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9754367556799389	WITHOUT_CLASSIFICATION	0.024563244320061073	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999597421812825	WITHOUT_CLASSIFICATION	4.0257818717490996E-5	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9979912688967176	WITHOUT_CLASSIFICATION	0.0020087311032824314	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999030225326	WITHOUT_CLASSIFICATION	9.697746736641391E-8	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999451964589479	WITHOUT_CLASSIFICATION	5.480354105224312E-5	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.999906172199029	WITHOUT_CLASSIFICATION	9.382780097106934E-5	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999934104821492	WITHOUT_CLASSIFICATION	6.589517850856923E-6	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9998545776473475	WITHOUT_CLASSIFICATION	1.4542235265249505E-4	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999637819009258	WITHOUT_CLASSIFICATION	3.6218099074142395E-5	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999597616692	WITHOUT_CLASSIFICATION	4.0238330721419694E-8	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999955665883107	WITHOUT_CLASSIFICATION	4.433411689288867E-6	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999995841349529	WITHOUT_CLASSIFICATION	4.1586504714082633E-7	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999991416790888	WITHOUT_CLASSIFICATION	8.583209111013656E-7	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999864724334	WITHOUT_CLASSIFICATION	1.3527566658188008E-8	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999998986825253	WITHOUT_CLASSIFICATION	1.0131747470501748E-7	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999879982464509	WITHOUT_CLASSIFICATION	1.2001753549088343E-4	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999984918920246	WITHOUT_CLASSIFICATION	1.5081079753521997E-6	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999998584351735	WITHOUT_CLASSIFICATION	1.4156482653043717E-7	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999915412017	WITHOUT_CLASSIFICATION	8.45879833532548E-9	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999979796544343	WITHOUT_CLASSIFICATION	2.0203455657463927E-6	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999961635550068	WITHOUT_CLASSIFICATION	3.83644499324189E-6	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999836464662722	WITHOUT_CLASSIFICATION	1.635353372765455E-5	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999990821759116	WITHOUT_CLASSIFICATION	9.178240882551591E-7	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999953514336121	WITHOUT_CLASSIFICATION	4.648566387960327E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9986154961045635	WITHOUT_CLASSIFICATION	0.001384503895436543	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999987703042034	WITHOUT_CLASSIFICATION	1.2296957966755918E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999994713786533	WITHOUT_CLASSIFICATION	5.286213466054023E-7	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999986956927828	WITHOUT_CLASSIFICATION	1.3043072172675912E-6	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999983502151808	WITHOUT_CLASSIFICATION	1.6497848192255627E-6	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.996489549236887	WITHOUT_CLASSIFICATION	0.003510450763113038	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999519480586093	WITHOUT_CLASSIFICATION	4.805194139076857E-5	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999663348661351	WITHOUT_CLASSIFICATION	3.366513386491926E-5	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999994738354039	WITHOUT_CLASSIFICATION	5.261645961395454E-7	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999992925352943	WITHOUT_CLASSIFICATION	7.074647057819426E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999991088475406	WITHOUT_CLASSIFICATION	8.911524593685933E-7	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999987392162346	WITHOUT_CLASSIFICATION	1.260783765380772E-6	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999874960412468	WITHOUT_CLASSIFICATION	1.2503958753209526E-5	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9979966810181886	WITHOUT_CLASSIFICATION	0.0020033189818113592	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9995732410585417	WITHOUT_CLASSIFICATION	4.267589414582628E-4	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999990113462934	WITHOUT_CLASSIFICATION	9.886537064782267E-7	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999990113462934	WITHOUT_CLASSIFICATION	9.886537064782267E-7	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999861786390007	WITHOUT_CLASSIFICATION	1.382136099935826E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999919494892	WITHOUT_CLASSIFICATION	8.050510772513192E-9	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999736599532199	WITHOUT_CLASSIFICATION	2.634004678010218E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999736599532199	WITHOUT_CLASSIFICATION	2.634004678010218E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999739776538	WITHOUT_CLASSIFICATION	2.602234611131127E-8	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999187141205365	WITHOUT_CLASSIFICATION	8.128587946354902E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999601543290724	WITHOUT_CLASSIFICATION	3.9845670927598806E-5	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999941319647	WITHOUT_CLASSIFICATION	5.868035311583844E-9	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999922896705874	WITHOUT_CLASSIFICATION	7.710329412664768E-6	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999980491899189	WITHOUT_CLASSIFICATION	1.950810081111376E-6	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999985423120884	WITHOUT_CLASSIFICATION	1.4576879116433303E-6	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999985423120884	WITHOUT_CLASSIFICATION	1.4576879116433303E-6	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999994659406827	WITHOUT_CLASSIFICATION	5.340593172135524E-7	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999993361581061	WITHOUT_CLASSIFICATION	6.638418939584027E-7	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999986906782037	WITHOUT_CLASSIFICATION	1.3093217962951361E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.999992910735849	WITHOUT_CLASSIFICATION	7.089264151041266E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.999992910735849	WITHOUT_CLASSIFICATION	7.089264151041266E-6	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999993985678447	WITHOUT_CLASSIFICATION	6.014321552647528E-7	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999981169113141	WITHOUT_CLASSIFICATION	1.883088685867515E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9996103605180556	WITHOUT_CLASSIFICATION	3.896394819443547E-4	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999999716429964	WITHOUT_CLASSIFICATION	2.8357003623437013E-8	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999939456950185	WITHOUT_CLASSIFICATION	6.054304981498499E-5	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999985179978529	WITHOUT_CLASSIFICATION	1.4820021470484243E-6	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999886702621266	WITHOUT_CLASSIFICATION	1.1329737873378192E-5	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999990716579271	WITHOUT_CLASSIFICATION	9.283420727833701E-7	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999233252661	WITHOUT_CLASSIFICATION	7.667473393670111E-8	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999908476143733	WITHOUT_CLASSIFICATION	9.152385626760416E-6	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999964321862888	WITHOUT_CLASSIFICATION	3.5678137113141245E-6	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9997754415324133	WITHOUT_CLASSIFICATION	2.2455846758671745E-4	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999990149321014	WITHOUT_CLASSIFICATION	9.850678985838875E-7	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9998803686929411	WITHOUT_CLASSIFICATION	1.1963130705881772E-4	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999983695318981	WITHOUT_CLASSIFICATION	1.6304681018087571E-6	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999904709172485	WITHOUT_CLASSIFICATION	9.529082751498748E-6	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999347631099	WITHOUT_CLASSIFICATION	6.523689002881498E-8	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9997515035900066	WITHOUT_CLASSIFICATION	2.484964099932955E-4	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999838238756524	WITHOUT_CLASSIFICATION	1.6176124347618105E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999955984790766	WITHOUT_CLASSIFICATION	4.401520923358114E-6	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999611178568791	WITHOUT_CLASSIFICATION	3.888214312089275E-5	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9997445557427471	WITHOUT_CLASSIFICATION	2.554442572528585E-4	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.999943912198947	WITHOUT_CLASSIFICATION	5.60878010529766E-5	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999867857883484	WITHOUT_CLASSIFICATION	1.3214211651430934E-5	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9999941691583529	WITHOUT_CLASSIFICATION	5.830841647100745E-6	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999955773708216	WITHOUT_CLASSIFICATION	4.422629178397544E-6	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999998128684674	WITHOUT_CLASSIFICATION	1.8713153260817146E-7	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999577356291164	WITHOUT_CLASSIFICATION	4.226437088362728E-5	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999999985907527	WITHOUT_CLASSIFICATION	1.409247290813027E-8	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999969663625436	WITHOUT_CLASSIFICATION	3.033637456310755E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9991843761409718	WITHOUT_CLASSIFICATION	8.156238590281812E-4	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999992414592391	WITHOUT_CLASSIFICATION	7.585407608935669E-7	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999997233381451	WITHOUT_CLASSIFICATION	2.766618547835751E-7	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.999875903041874	WITHOUT_CLASSIFICATION	1.2409695812594192E-4	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999986955177848	WITHOUT_CLASSIFICATION	1.3044822152188711E-6	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999420310525141	WITHOUT_CLASSIFICATION	5.796894748600445E-5	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999892136390309	WITHOUT_CLASSIFICATION	1.0786360969122085E-5	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999987623652491	WITHOUT_CLASSIFICATION	1.2376347508074586E-6	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999999185731427	WITHOUT_CLASSIFICATION	8.142685722953456E-8	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999984303390491	WITHOUT_CLASSIFICATION	1.5696609508561432E-6	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9995884804215164	WITHOUT_CLASSIFICATION	4.11519578483617E-4	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9993327057796857	WITHOUT_CLASSIFICATION	6.672942203143018E-4	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999955893463122	WITHOUT_CLASSIFICATION	4.4106536878547725E-6	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999998026280034	WITHOUT_CLASSIFICATION	1.9737199664364595E-7	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.999998329181249	WITHOUT_CLASSIFICATION	1.6708187509142537E-6	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999950372321798	WITHOUT_CLASSIFICATION	4.962767820215715E-6	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9974891190007997	WITHOUT_CLASSIFICATION	0.0025108809992002083	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999893758596768	WITHOUT_CLASSIFICATION	1.0624140323134241E-5	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999939808620222	WITHOUT_CLASSIFICATION	6.019137977852693E-6	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999988053729504	WITHOUT_CLASSIFICATION	1.1946270496362051E-6	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9996565380917924	WITHOUT_CLASSIFICATION	3.434619082075171E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999995427287531	WITHOUT_CLASSIFICATION	4.5727124691994505E-7	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999994485908011	WITHOUT_CLASSIFICATION	5.514091988062567E-7	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999994700535	WITHOUT_CLASSIFICATION	5.299465062351402E-10	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9998994112525093	WITHOUT_CLASSIFICATION	1.0058874749081002E-4	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999977187666192	WITHOUT_CLASSIFICATION	2.281233380740841E-6	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9994108786710377	WITHOUT_CLASSIFICATION	5.891213289622531E-4	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999945274709358	WITHOUT_CLASSIFICATION	5.472529064266936E-6	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9994682005235509	WITHOUT_CLASSIFICATION	5.317994764491407E-4	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9995732511446168	WITHOUT_CLASSIFICATION	4.267488553831692E-4	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999882576620179	WITHOUT_CLASSIFICATION	1.1742337982019347E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999882576620179	WITHOUT_CLASSIFICATION	1.1742337982019347E-5	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999406941159	WITHOUT_CLASSIFICATION	5.9305884119642634E-8	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.999997151303847	WITHOUT_CLASSIFICATION	2.8486961529199574E-6	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999999993035128	WITHOUT_CLASSIFICATION	6.964872044977939E-9	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999946958164	WITHOUT_CLASSIFICATION	5.304183602740173E-9	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999808121388782	WITHOUT_CLASSIFICATION	1.918786112181256E-5	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999994135060358	WITHOUT_CLASSIFICATION	5.864939642935086E-7	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999868011054	WITHOUT_CLASSIFICATION	1.3198894778900129E-8	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999998674995721	WITHOUT_CLASSIFICATION	1.3250042779572762E-7	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999882195274074	WITHOUT_CLASSIFICATION	1.1780472592555781E-5	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999895279111582	WITHOUT_CLASSIFICATION	1.0472088841620064E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999999667554583	WITHOUT_CLASSIFICATION	3.3244541699277326E-7	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9996846332682677	WITHOUT_CLASSIFICATION	3.153667317322518E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999670457448231	WITHOUT_CLASSIFICATION	3.295425517691364E-5	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999991610871	WITHOUT_CLASSIFICATION	8.389128418835007E-10	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999986994311512	WITHOUT_CLASSIFICATION	1.3005688489137283E-6	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999986994311512	WITHOUT_CLASSIFICATION	1.3005688489137283E-6	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999988535453187	WITHOUT_CLASSIFICATION	1.1464546813092888E-6	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9995642581543399	WITHOUT_CLASSIFICATION	4.357418456600925E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999997921622704	WITHOUT_CLASSIFICATION	2.078377296064733E-7	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999989881903507	WITHOUT_CLASSIFICATION	1.011809649318826E-6	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997073140358	WITHOUT_CLASSIFICATION	2.926859642097793E-7	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982330347209	WITHOUT_CLASSIFICATION	1.7669652790718484E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999883675157557	WITHOUT_CLASSIFICATION	1.1632484244225918E-5	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9745356987927145	WITHOUT_CLASSIFICATION	0.025464301207285493	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999921345822	WITHOUT_CLASSIFICATION	7.865417753587197E-9	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999991453260613	WITHOUT_CLASSIFICATION	8.546739387469983E-7	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999546464757	WITHOUT_CLASSIFICATION	4.5353524233875985E-8	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999976312272985	WITHOUT_CLASSIFICATION	2.368772701472795E-6	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999584006993544	WITHOUT_CLASSIFICATION	4.1599300645742154E-5	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999285715409	WITHOUT_CLASSIFICATION	7.14284592236649E-8	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.999990531383381	WITHOUT_CLASSIFICATION	9.468616619018808E-6	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999865446986951	WITHOUT_CLASSIFICATION	1.345530130486727E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999800636662889	WITHOUT_CLASSIFICATION	1.993633371113419E-5	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999988546414544	WITHOUT_CLASSIFICATION	1.1453585455480616E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999312298162041	WITHOUT_CLASSIFICATION	6.877018379596736E-5	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999996900257655	WITHOUT_CLASSIFICATION	3.0997423457621303E-7	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999867811593257	WITHOUT_CLASSIFICATION	1.3218840674425357E-5	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999894677902839	WITHOUT_CLASSIFICATION	1.0532209716094757E-5	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998791245271	WITHOUT_CLASSIFICATION	1.20875472836852E-7	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999983373595303	WITHOUT_CLASSIFICATION	1.662640469659966E-6	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9952308465204438	WITHOUT_CLASSIFICATION	0.004769153479556231	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999939617595464	WITHOUT_CLASSIFICATION	6.0382404537002194E-6	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999619518670391	WITHOUT_CLASSIFICATION	3.804813296097536E-5	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9995247433545364	WITHOUT_CLASSIFICATION	4.75256645463479E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999980034272666	WITHOUT_CLASSIFICATION	1.9965727334238372E-6	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999998598711629	WITHOUT_CLASSIFICATION	1.4012883703145027E-7	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.999991142815485	WITHOUT_CLASSIFICATION	8.857184514997387E-6	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999994684603117	WITHOUT_CLASSIFICATION	5.315396881598802E-7	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999816796109	WITHOUT_CLASSIFICATION	1.832038904335322E-8	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999983763369825	WITHOUT_CLASSIFICATION	1.6236630175007654E-5	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999997382261552	WITHOUT_CLASSIFICATION	2.617738448640775E-7	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999971182103244	WITHOUT_CLASSIFICATION	2.8817896754544417E-6	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999481026941	WITHOUT_CLASSIFICATION	5.1897305839042594E-8	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999998078908647	WITHOUT_CLASSIFICATION	1.921091352565441E-7	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999597062058587	WITHOUT_CLASSIFICATION	4.029379414121865E-5	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9998207271480011	WITHOUT_CLASSIFICATION	1.792728519989736E-4	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9980132438545981	WITHOUT_CLASSIFICATION	0.0019867561454018586	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9980132438545981	WITHOUT_CLASSIFICATION	0.0019867561454018586	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999708918323	WITHOUT_CLASSIFICATION	2.9108167681379652E-8	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9992779214033845	WITHOUT_CLASSIFICATION	7.220785966154886E-4	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999492401564276	WITHOUT_CLASSIFICATION	5.0759843572451814E-5	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999192524072358	WITHOUT_CLASSIFICATION	8.074759276422694E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999996212311745	WITHOUT_CLASSIFICATION	3.787688254933506E-7	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.999997922117764	WITHOUT_CLASSIFICATION	2.0778822360352548E-6	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9993181853706506	WITHOUT_CLASSIFICATION	6.818146293494224E-4	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999995060962594	WITHOUT_CLASSIFICATION	4.93903740596319E-7	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9985645757592787	WITHOUT_CLASSIFICATION	0.0014354242407211989	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998354924124	WITHOUT_CLASSIFICATION	1.6450758760175356E-6	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993274327865	WITHOUT_CLASSIFICATION	6.725672133355229E-7	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999967150874375	WITHOUT_CLASSIFICATION	3.284912562562185E-6	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999909238280518	WITHOUT_CLASSIFICATION	9.076171948125974E-6	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999964666073285	WITHOUT_CLASSIFICATION	3.5333926713934008E-6	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999234724498229	WITHOUT_CLASSIFICATION	7.652755017700741E-5	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999992054248875	WITHOUT_CLASSIFICATION	7.945751125548242E-7	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9958603500776724	WITHOUT_CLASSIFICATION	0.0041396499223276696	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9998631572046333	WITHOUT_CLASSIFICATION	1.368427953667191E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9978148518464329	WITHOUT_CLASSIFICATION	0.0021851481535671105	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999916117122173	WITHOUT_CLASSIFICATION	8.388287782736396E-6	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.994085781807306	WITHOUT_CLASSIFICATION	0.00591421819269401	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9987030806369499	WITHOUT_CLASSIFICATION	0.001296919363050105	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999983056029	WITHOUT_CLASSIFICATION	1.6943970646755602E-9	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9997215818812155	WITHOUT_CLASSIFICATION	2.7841811878448393E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999163755059259	WITHOUT_CLASSIFICATION	8.362449407411602E-5	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9996673300796128	WITHOUT_CLASSIFICATION	3.3266992038708307E-4	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999960092610214	WITHOUT_CLASSIFICATION	3.990738978596584E-6	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999998910260006	WITHOUT_CLASSIFICATION	1.0897399931298997E-7	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9997342027480749	WITHOUT_CLASSIFICATION	2.657972519250743E-4	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999677408395843	WITHOUT_CLASSIFICATION	3.225916041572356E-5	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9998626657530095	WITHOUT_CLASSIFICATION	1.3733424699053344E-4	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9997875371394165	WITHOUT_CLASSIFICATION	2.1246286058347732E-4	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999994895314298	WITHOUT_CLASSIFICATION	5.104685702627187E-7	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999972787442354	WITHOUT_CLASSIFICATION	2.721255764627693E-6	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999360835808	WITHOUT_CLASSIFICATION	6.391641921830805E-8	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999521432236015	WITHOUT_CLASSIFICATION	4.7856776398563805E-5	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999993403067552	WITHOUT_CLASSIFICATION	6.596932447214323E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999997515627126	WITHOUT_CLASSIFICATION	2.4843728732546936E-7	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9998430448297418	WITHOUT_CLASSIFICATION	1.5695517025813286E-4	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999920509974317	WITHOUT_CLASSIFICATION	7.949002568256403E-6	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997421575755	WITHOUT_CLASSIFICATION	2.5784242452315983E-7	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.998078341817635	WITHOUT_CLASSIFICATION	0.0019216581823650047	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999998400399729	WITHOUT_CLASSIFICATION	1.5996002711200541E-6	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999990864284253	WITHOUT_CLASSIFICATION	9.135715746618054E-7	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999041796802	WITHOUT_CLASSIFICATION	9.582031972352965E-8	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9976728754082655	WITHOUT_CLASSIFICATION	0.00232712459173439	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997446564385	WITHOUT_CLASSIFICATION	2.553435614939303E-7	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999670457448231	WITHOUT_CLASSIFICATION	3.295425517691364E-5	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999926010288352	WITHOUT_CLASSIFICATION	7.39897116471782E-6	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999760172671	WITHOUT_CLASSIFICATION	2.3982732856799112E-8	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999152758451545	WITHOUT_CLASSIFICATION	8.472415484551091E-5	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999943317838988	WITHOUT_CLASSIFICATION	5.6682161011457465E-6	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999996731082	WITHOUT_CLASSIFICATION	3.268917730298703E-10	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999901171503347	WITHOUT_CLASSIFICATION	9.882849665232123E-6	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999775202877063	WITHOUT_CLASSIFICATION	2.2479712293672574E-5	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9997868651190785	WITHOUT_CLASSIFICATION	2.131348809215673E-4	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998616862094	WITHOUT_CLASSIFICATION	1.3831379069033461E-7	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999555544375521	WITHOUT_CLASSIFICATION	4.4445562447879116E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9806866478499425	WITHOUT_CLASSIFICATION	0.01931335215005751	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999971346267226	WITHOUT_CLASSIFICATION	2.8653732773947797E-6	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999880433660214	WITHOUT_CLASSIFICATION	1.1956633978590375E-5	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999799411257	WITHOUT_CLASSIFICATION	2.0058874331508616E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992577706349	WITHOUT_CLASSIFICATION	7.422293649927219E-7	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999979030100442	WITHOUT_CLASSIFICATION	2.096989955667784E-6	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999882328507474	WITHOUT_CLASSIFICATION	1.1767149252527276E-5	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999645200167	WITHOUT_CLASSIFICATION	3.5479983238508313E-8	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9992118295828437	WITHOUT_CLASSIFICATION	7.881704171564053E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992577706349	WITHOUT_CLASSIFICATION	7.422293649927219E-7	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9980694582649635	WITHOUT_CLASSIFICATION	0.0019305417350364657	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9998859242128629	WITHOUT_CLASSIFICATION	1.1407578713713238E-4	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999917853223	WITHOUT_CLASSIFICATION	8.214677635548725E-9	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999982398254291	WITHOUT_CLASSIFICATION	1.7601745709385968E-6	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999994082474402	WITHOUT_CLASSIFICATION	5.917525598018993E-7	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999901212044604	WITHOUT_CLASSIFICATION	9.878795539597352E-5	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999985023514	WITHOUT_CLASSIFICATION	1.4976485927315582E-9	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999514146297659	WITHOUT_CLASSIFICATION	4.858537023416212E-5	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999296420308	WITHOUT_CLASSIFICATION	7.035796918799312E-8	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9981162969337821	WITHOUT_CLASSIFICATION	0.0018837030662177752	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999679081495471	WITHOUT_CLASSIFICATION	3.209185045299525E-5	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999895774730263	WITHOUT_CLASSIFICATION	1.0422526973605455E-5	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9994949732340813	WITHOUT_CLASSIFICATION	5.050267659186895E-4	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999596845962	WITHOUT_CLASSIFICATION	4.0315403801069585E-8	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.999998561772084	WITHOUT_CLASSIFICATION	1.4382279160767131E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999953514336121	WITHOUT_CLASSIFICATION	4.648566387960327E-6	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999218013269	WITHOUT_CLASSIFICATION	7.819867315544524E-8	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999994734491052	WITHOUT_CLASSIFICATION	5.265508948107451E-7	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999687499033201	WITHOUT_CLASSIFICATION	3.1250096679861634E-5	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9998464694392252	WITHOUT_CLASSIFICATION	1.53530560774816E-4	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999899938811	WITHOUT_CLASSIFICATION	1.0006118852442373E-8	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999998960692856	WITHOUT_CLASSIFICATION	1.0393071439284096E-6	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999813446733367	WITHOUT_CLASSIFICATION	1.865532666325968E-5	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999989889776	WITHOUT_CLASSIFICATION	1.0110223547983612E-9	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999326961726	WITHOUT_CLASSIFICATION	6.730382741665712E-8	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999124703833536	WITHOUT_CLASSIFICATION	8.752961664632033E-5	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9294064383905379	WITHOUT_CLASSIFICATION	0.07059356160946205	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999991534417797	WITHOUT_CLASSIFICATION	8.465582201782229E-7	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999976811392318	WITHOUT_CLASSIFICATION	2.31886076809384E-6	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.7451685746985923	DEFECT	0.2548314253014076	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999998861556009	WITHOUT_CLASSIFICATION	1.1384439917699842E-7	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9982818748727477	WITHOUT_CLASSIFICATION	0.001718125127252342	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9992676159913767	WITHOUT_CLASSIFICATION	7.323840086233026E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999941082163396	WITHOUT_CLASSIFICATION	5.891783660299379E-6	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999955560359	WITHOUT_CLASSIFICATION	4.443964021911165E-9	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999909966744	WITHOUT_CLASSIFICATION	9.003325627566839E-9	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999990011808392	WITHOUT_CLASSIFICATION	9.98819160819139E-7	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999954173129841	WITHOUT_CLASSIFICATION	4.582687015868036E-6	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999493959782	WITHOUT_CLASSIFICATION	5.0604021751284076E-8	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9996501530958416	WITHOUT_CLASSIFICATION	3.4984690415837573E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999984884438251	WITHOUT_CLASSIFICATION	1.5115561748435935E-6	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999984884438251	WITHOUT_CLASSIFICATION	1.5115561748435935E-6	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999028343101056	WITHOUT_CLASSIFICATION	9.716568989438008E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999750717171277	WITHOUT_CLASSIFICATION	2.492828287224143E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998422643676	WITHOUT_CLASSIFICATION	1.5773563234671578E-7	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9831388477817473	WITHOUT_CLASSIFICATION	0.01686115221825275	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999959885424601	WITHOUT_CLASSIFICATION	4.011457539852824E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999959885424601	WITHOUT_CLASSIFICATION	4.011457539852824E-6	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9999795441231829	WITHOUT_CLASSIFICATION	2.0455876817077704E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999982334539981	WITHOUT_CLASSIFICATION	1.7665460019346336E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999011411891918	WITHOUT_CLASSIFICATION	9.8858810808199E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9995276080096367	WITHOUT_CLASSIFICATION	4.7239199036334175E-4	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999961670980853	WITHOUT_CLASSIFICATION	3.832901914752865E-6	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999499793863516	WITHOUT_CLASSIFICATION	5.002061364848902E-5	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999787042844774	WITHOUT_CLASSIFICATION	2.129571552258301E-5	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999644877898	WITHOUT_CLASSIFICATION	3.551221013546598E-8	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999345406633073	WITHOUT_CLASSIFICATION	6.545933669261747E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989274525698	WITHOUT_CLASSIFICATION	1.072547430130646E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989274525698	WITHOUT_CLASSIFICATION	1.072547430130646E-6	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999982204769166	WITHOUT_CLASSIFICATION	1.7795230833996586E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999935023994161	WITHOUT_CLASSIFICATION	6.497600583909251E-6	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999993095302466	WITHOUT_CLASSIFICATION	6.90469753391043E-7	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.999910955535698	WITHOUT_CLASSIFICATION	8.904446430193523E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999550045190465	WITHOUT_CLASSIFICATION	4.499548095342364E-5	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999968720180336	WITHOUT_CLASSIFICATION	3.1279819664256946E-6	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992630828842	WITHOUT_CLASSIFICATION	7.369171158760079E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999550045190465	WITHOUT_CLASSIFICATION	4.499548095342364E-5	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999716505339	WITHOUT_CLASSIFICATION	2.8349466162568123E-8	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999122827761635	WITHOUT_CLASSIFICATION	8.771722383655633E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9998429235300622	WITHOUT_CLASSIFICATION	1.5707646993779676E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999997042036702	WITHOUT_CLASSIFICATION	2.957963298260378E-7	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9981162969337821	WITHOUT_CLASSIFICATION	0.0018837030662177752	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999600534540013	WITHOUT_CLASSIFICATION	3.9946545998717965E-5	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9985176903661399	WITHOUT_CLASSIFICATION	0.0014823096338600105	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999755268861672	WITHOUT_CLASSIFICATION	2.447311383289434E-5	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999999633576477	WITHOUT_CLASSIFICATION	3.6642352258365965E-8	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999054899641	WITHOUT_CLASSIFICATION	9.451003588872404E-7	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999991332455695	WITHOUT_CLASSIFICATION	8.667544304074986E-7	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999910721613975	WITHOUT_CLASSIFICATION	8.927838602482426E-6	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999802953066	WITHOUT_CLASSIFICATION	1.9704693509175713E-8	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999233994009624	WITHOUT_CLASSIFICATION	7.660059903764686E-5	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9990756541003843	WITHOUT_CLASSIFICATION	9.243458996157382E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9990756541003843	WITHOUT_CLASSIFICATION	9.243458996157382E-4	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999962295690292	WITHOUT_CLASSIFICATION	3.770430970646334E-6	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999989995651106	WITHOUT_CLASSIFICATION	1.0004348893662156E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999823671318658	WITHOUT_CLASSIFICATION	1.7632868134200953E-5	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999838169253229	WITHOUT_CLASSIFICATION	1.618307467712254E-5	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999968346986315	WITHOUT_CLASSIFICATION	3.1653013683628756E-6	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999998900701645	WITHOUT_CLASSIFICATION	1.099298355388696E-7	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999629495804426	WITHOUT_CLASSIFICATION	3.705041955734737E-5	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9944243880687942	WITHOUT_CLASSIFICATION	0.0055756119312057985	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999983564621249	WITHOUT_CLASSIFICATION	1.6435378750755207E-6	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999981404635741	WITHOUT_CLASSIFICATION	1.8595364258961147E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942653786665	WITHOUT_CLASSIFICATION	5.73462133344428E-6	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9211824840691479	DEFECT	0.078817515930852	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999847764465954	WITHOUT_CLASSIFICATION	1.5223553404569886E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999991360316225	WITHOUT_CLASSIFICATION	8.639683775261222E-7	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999996983204059	WITHOUT_CLASSIFICATION	3.016795940068712E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999999912391202	WITHOUT_CLASSIFICATION	8.760879791140947E-8	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999927957771351	WITHOUT_CLASSIFICATION	7.20422286500173E-6	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999607943623118	WITHOUT_CLASSIFICATION	3.920563768826131E-5	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.99984827849869	WITHOUT_CLASSIFICATION	1.517215013099927E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999902291422931	WITHOUT_CLASSIFICATION	9.77085770693317E-6	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999992982974198	WITHOUT_CLASSIFICATION	7.017025800653389E-7	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999974887023827	WITHOUT_CLASSIFICATION	2.5112976173272628E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9996103605180556	WITHOUT_CLASSIFICATION	3.896394819443547E-4	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999997231966	WITHOUT_CLASSIFICATION	2.7680345860139953E-10	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999758647938021	WITHOUT_CLASSIFICATION	2.413520619788236E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999758647938021	WITHOUT_CLASSIFICATION	2.413520619788236E-5	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9988970430705298	WITHOUT_CLASSIFICATION	0.001102956929470166	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9996451642368639	WITHOUT_CLASSIFICATION	3.5483576313610803E-4	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.999999959192737	WITHOUT_CLASSIFICATION	4.080726301409755E-8	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999837398630571	WITHOUT_CLASSIFICATION	1.6260136942933173E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999974662816794	WITHOUT_CLASSIFICATION	2.5337183205255873E-6	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999664572587886	WITHOUT_CLASSIFICATION	3.35427412112598E-5	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9982215189489552	WITHOUT_CLASSIFICATION	0.0017784810510448601	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9995855070523431	WITHOUT_CLASSIFICATION	4.144929476569892E-4	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9954655088094972	WITHOUT_CLASSIFICATION	0.004534491190502717	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9648962041215473	DEFECT	0.035103795878452644	WITHOUT_CLASSIFICATION
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9360750526951471	DEFECT	0.0639249473048528	WITHOUT_CLASSIFICATION
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9108579563417243	DEFECT	0.0891420436582757	WITHOUT_CLASSIFICATION
/*	DEFECT	0.9778673883576475	WITHOUT_CLASSIFICATION	0.022132611642352452	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9949697258788499	WITHOUT_CLASSIFICATION	0.00503027412115009	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9674809643915191	DEFECT	0.03251903560848091	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.9821994003458511	WITHOUT_CLASSIFICATION	0.017800599654148864	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9999233497152775	DEFECT	7.66502847224586E-5	WITHOUT_CLASSIFICATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.6245539079741368	DEFECT	0.3754460920258633	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.5922286519000377	DEFECT	0.4077713480999624	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.5922286519000377	DEFECT	0.4077713480999624	WITHOUT_CLASSIFICATION
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9510070304445122	WITHOUT_CLASSIFICATION	0.048992969555487875	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9997451454948436	WITHOUT_CLASSIFICATION	2.5485450515637853E-4	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.8335427547808475	DEFECT	0.1664572452191524	WITHOUT_CLASSIFICATION
// this call is side-effecty	DEFECT	0.9999915352256386	WITHOUT_CLASSIFICATION	8.464774361410024E-6	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.8900585498159048	WITHOUT_CLASSIFICATION	0.10994145018409514	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9603584917781889	WITHOUT_CLASSIFICATION	0.03964150822181102	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.8299667074369717	WITHOUT_CLASSIFICATION	0.17003329256302827	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9984232504914001	WITHOUT_CLASSIFICATION	0.001576749508599888	DEFECT
//TODO: is this completely correct?	DEFECT	0.9428253904284319	WITHOUT_CLASSIFICATION	0.05717460957156806	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999760952974627	WITHOUT_CLASSIFICATION	2.3904702537250288E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.8187145472495194	DEFECT	0.18128545275048058	WITHOUT_CLASSIFICATION
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9989572268470077	WITHOUT_CLASSIFICATION	0.0010427731529922622	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.9320230514940476	DEFECT	0.06797694850595232	WITHOUT_CLASSIFICATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.6885992158853563	WITHOUT_CLASSIFICATION	0.31140078411464356	DEFECT
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9972563312034189	WITHOUT_CLASSIFICATION	0.002743668796581085	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9937443527460609	WITHOUT_CLASSIFICATION	0.006255647253939101	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.7381019375255139	WITHOUT_CLASSIFICATION	0.261898062474486	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9922621984898456	WITHOUT_CLASSIFICATION	0.007737801510154302	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9773081519679954	WITHOUT_CLASSIFICATION	0.022691848032004625	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.5922286519000377	DEFECT	0.4077713480999624	WITHOUT_CLASSIFICATION
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9998875086579581	DEFECT	1.1249134204193932E-4	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9957125220586116	WITHOUT_CLASSIFICATION	0.0042874779413883835	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.7111852862623324	WITHOUT_CLASSIFICATION	0.2888147137376676	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.8597797040541163	WITHOUT_CLASSIFICATION	0.14022029594588362	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9994095652518284	WITHOUT_CLASSIFICATION	5.904347481715852E-4	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9999729182849126	WITHOUT_CLASSIFICATION	2.7081715087352176E-5	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9992563337530107	WITHOUT_CLASSIFICATION	7.43666246989346E-4	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.813104992266788	DEFECT	0.18689500773321197	WITHOUT_CLASSIFICATION
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9476713796253408	WITHOUT_CLASSIFICATION	0.05232862037465926	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9865218058125669	WITHOUT_CLASSIFICATION	0.013478194187433117	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9998346304119146	WITHOUT_CLASSIFICATION	1.6536958808535722E-4	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.8002886735561479	DEFECT	0.19971132644385214	WITHOUT_CLASSIFICATION
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9861382907768399	WITHOUT_CLASSIFICATION	0.013861709223160207	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.9710213401976608	WITHOUT_CLASSIFICATION	0.028978659802339136	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.971860344188529	WITHOUT_CLASSIFICATION	0.028139655811471015	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.6611938789584808	DEFECT	0.3388061210415191	WITHOUT_CLASSIFICATION
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9538956539872451	DEFECT	0.04610434601275487	WITHOUT_CLASSIFICATION
