test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997556275119481	WITHOUT_CLASSIFICATION	2.4437248805190203E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999226063700575	WITHOUT_CLASSIFICATION	7.739362994249324E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999226063700575	WITHOUT_CLASSIFICATION	7.739362994249324E-5	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9987144541508994	WITHOUT_CLASSIFICATION	0.0012855458491005348	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9997141934346778	WITHOUT_CLASSIFICATION	2.858065653222121E-4	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9996252856592658	WITHOUT_CLASSIFICATION	3.7471434073418555E-4	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9996252856592658	WITHOUT_CLASSIFICATION	3.7471434073418555E-4	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9998706728369356	WITHOUT_CLASSIFICATION	1.2932716306443692E-4	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9995982750002635	WITHOUT_CLASSIFICATION	4.0172499973647704E-4	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9993875437274041	WITHOUT_CLASSIFICATION	6.124562725958134E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9997837791449977	WITHOUT_CLASSIFICATION	2.16220855002162E-4	DEFECT
double	WITHOUT_CLASSIFICATION	0.9998360141701139	WITHOUT_CLASSIFICATION	1.6398582988607675E-4	DEFECT
double	WITHOUT_CLASSIFICATION	0.9998360141701139	WITHOUT_CLASSIFICATION	1.6398582988607675E-4	DEFECT
long	WITHOUT_CLASSIFICATION	0.999803687383423	WITHOUT_CLASSIFICATION	1.96312616576905E-4	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.998305930528251	WITHOUT_CLASSIFICATION	0.0016940694717489774	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.9997362901036914	WITHOUT_CLASSIFICATION	2.637098963086874E-4	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9998897865447345	WITHOUT_CLASSIFICATION	1.1021345526553053E-4	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9969899171399969	WITHOUT_CLASSIFICATION	0.003010082860003144	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.9998335984928993	WITHOUT_CLASSIFICATION	1.6640150710060537E-4	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9996195104319662	WITHOUT_CLASSIFICATION	3.8048956803379716E-4	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999699039326767	WITHOUT_CLASSIFICATION	3.009606732330379E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9998303493481058	WITHOUT_CLASSIFICATION	1.696506518942575E-4	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9998323497237552	WITHOUT_CLASSIFICATION	1.6765027624474944E-4	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9997601928254635	WITHOUT_CLASSIFICATION	2.3980717453647704E-4	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9995616772800086	WITHOUT_CLASSIFICATION	4.383227199914696E-4	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9370058053000894	WITHOUT_CLASSIFICATION	0.06299419469991059	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9998979123117577	WITHOUT_CLASSIFICATION	1.0208768824221626E-4	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9996583747741349	WITHOUT_CLASSIFICATION	3.416252258651814E-4	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9998668139459688	WITHOUT_CLASSIFICATION	1.3318605403117223E-4	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9991013821749642	WITHOUT_CLASSIFICATION	8.986178250358814E-4	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9997772042866991	WITHOUT_CLASSIFICATION	2.227957133009886E-4	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9995862339890462	WITHOUT_CLASSIFICATION	4.1376601095379986E-4	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999083023905627	WITHOUT_CLASSIFICATION	9.169760943720831E-5	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9991862209132636	WITHOUT_CLASSIFICATION	8.137790867363754E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999219951186178	WITHOUT_CLASSIFICATION	7.800488138216634E-5	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9997722152232236	WITHOUT_CLASSIFICATION	2.2778477677631973E-4	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995041917392722	WITHOUT_CLASSIFICATION	4.958082607278663E-4	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995041917392722	WITHOUT_CLASSIFICATION	4.958082607278663E-4	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999078026557481	WITHOUT_CLASSIFICATION	9.219734425189778E-4	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9933158211744553	WITHOUT_CLASSIFICATION	0.006684178825544836	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9998328231894541	WITHOUT_CLASSIFICATION	1.6717681054585022E-4	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9998328231894541	WITHOUT_CLASSIFICATION	1.6717681054585022E-4	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999078026557481	WITHOUT_CLASSIFICATION	9.219734425189778E-4	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9984648730904894	WITHOUT_CLASSIFICATION	0.0015351269095106633	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9995605636740675	WITHOUT_CLASSIFICATION	4.3943632593244767E-4	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9994524623470114	WITHOUT_CLASSIFICATION	5.475376529887503E-4	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9990423654485099	WITHOUT_CLASSIFICATION	9.57634551490013E-4	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999844363670363	WITHOUT_CLASSIFICATION	1.5563632963766256E-5	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9896486296815565	WITHOUT_CLASSIFICATION	0.010351370318443454	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9994440879763926	WITHOUT_CLASSIFICATION	5.559120236073E-4	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998931121990341	WITHOUT_CLASSIFICATION	1.0688780096591466E-4	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9995908933692382	WITHOUT_CLASSIFICATION	4.091066307617527E-4	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9997424010188555	WITHOUT_CLASSIFICATION	2.575989811445847E-4	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9998328231894541	WITHOUT_CLASSIFICATION	1.6717681054585022E-4	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999930391492683	WITHOUT_CLASSIFICATION	6.9608507317663546E-6	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9991338090062266	WITHOUT_CLASSIFICATION	8.661909937733906E-4	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9966805704161358	WITHOUT_CLASSIFICATION	0.003319429583864257	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9993239335056552	WITHOUT_CLASSIFICATION	6.760664943449428E-4	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.999779489570787	WITHOUT_CLASSIFICATION	2.2051042921302665E-4	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9994661389776055	WITHOUT_CLASSIFICATION	5.338610223944968E-4	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997886023625863	WITHOUT_CLASSIFICATION	2.113976374138499E-4	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997576894367325	WITHOUT_CLASSIFICATION	2.4231056326759723E-4	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9998634638525566	WITHOUT_CLASSIFICATION	1.3653614744338742E-4	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9998868677836469	WITHOUT_CLASSIFICATION	1.1313221635317858E-4	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9986286943799809	WITHOUT_CLASSIFICATION	0.0013713056200191087	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998439820515895	WITHOUT_CLASSIFICATION	1.5601794841057373E-4	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9993623084413308	WITHOUT_CLASSIFICATION	6.376915586692515E-4	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9988138015906833	WITHOUT_CLASSIFICATION	0.0011861984093166737	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9996535500754025	WITHOUT_CLASSIFICATION	3.464499245975658E-4	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9988018489015599	WITHOUT_CLASSIFICATION	0.0011981510984400304	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9997127249702423	WITHOUT_CLASSIFICATION	2.8727502975759665E-4	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9996234436516472	WITHOUT_CLASSIFICATION	3.7655634835277946E-4	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9988710857631514	WITHOUT_CLASSIFICATION	0.0011289142368486045	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9990721863187768	WITHOUT_CLASSIFICATION	9.278136812232705E-4	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9994520178005271	WITHOUT_CLASSIFICATION	5.479821994729207E-4	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996109399787569	WITHOUT_CLASSIFICATION	3.8906002124300203E-4	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998285339359918	WITHOUT_CLASSIFICATION	1.7146606400819165E-4	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9998857745979383	WITHOUT_CLASSIFICATION	1.1422540206172204E-4	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996109399787569	WITHOUT_CLASSIFICATION	3.8906002124300203E-4	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9992134145923347	WITHOUT_CLASSIFICATION	7.865854076654141E-4	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9966309899235763	WITHOUT_CLASSIFICATION	0.0033690100764236335	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9998001787500292	WITHOUT_CLASSIFICATION	1.9982124997087693E-4	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.9995785381296257	WITHOUT_CLASSIFICATION	4.2146187037429E-4	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998580154885569	WITHOUT_CLASSIFICATION	1.4198451144310946E-4	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998580154885569	WITHOUT_CLASSIFICATION	1.4198451144310946E-4	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9995880504997467	WITHOUT_CLASSIFICATION	4.119495002532172E-4	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9991317894986574	WITHOUT_CLASSIFICATION	8.682105013424408E-4	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.999529979562194	WITHOUT_CLASSIFICATION	4.700204378058972E-4	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999680686702672	WITHOUT_CLASSIFICATION	3.193132973272166E-5	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9995361051666751	WITHOUT_CLASSIFICATION	4.638948333249007E-4	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998494615246082	WITHOUT_CLASSIFICATION	1.5053847539170127E-4	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999842370420103	WITHOUT_CLASSIFICATION	1.5762957989696568E-4	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9998534593149704	WITHOUT_CLASSIFICATION	1.4654068502970637E-4	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9994721532349665	WITHOUT_CLASSIFICATION	5.27846765033461E-4	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9995502539030134	WITHOUT_CLASSIFICATION	4.497460969865385E-4	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.99980093382084	WITHOUT_CLASSIFICATION	1.9906617916010618E-4	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.99980093382084	WITHOUT_CLASSIFICATION	1.9906617916010618E-4	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9994796572778668	WITHOUT_CLASSIFICATION	5.203427221332729E-4	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9994582372446804	WITHOUT_CLASSIFICATION	5.417627553195204E-4	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9996632967719297	WITHOUT_CLASSIFICATION	3.3670322807035497E-4	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.99980093382084	WITHOUT_CLASSIFICATION	1.9906617916010618E-4	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9994796572778668	WITHOUT_CLASSIFICATION	5.203427221332729E-4	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9994796572778668	WITHOUT_CLASSIFICATION	5.203427221332729E-4	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9997194558035989	WITHOUT_CLASSIFICATION	2.805441964011938E-4	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.999728505498226	WITHOUT_CLASSIFICATION	2.714945017740113E-4	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9973581790383892	WITHOUT_CLASSIFICATION	0.002641820961610804	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9991959394850737	WITHOUT_CLASSIFICATION	8.040605149263352E-4	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9980047446798088	WITHOUT_CLASSIFICATION	0.0019952553201912325	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9980047446798088	WITHOUT_CLASSIFICATION	0.0019952553201912325	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9994844732744039	WITHOUT_CLASSIFICATION	5.155267255960649E-4	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996265042108416	WITHOUT_CLASSIFICATION	3.734957891583031E-4	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9997671846284866	WITHOUT_CLASSIFICATION	2.3281537151348806E-4	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9996254464934624	WITHOUT_CLASSIFICATION	3.745535065374806E-4	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9996254464934624	WITHOUT_CLASSIFICATION	3.745535065374806E-4	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9997424095766193	WITHOUT_CLASSIFICATION	2.575904233806859E-4	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9930586844319547	WITHOUT_CLASSIFICATION	0.006941315568045247	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9993166980965664	WITHOUT_CLASSIFICATION	6.83301903433613E-4	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9968453440222343	WITHOUT_CLASSIFICATION	0.0031546559777655713	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9998457475284461	WITHOUT_CLASSIFICATION	1.5425247155384793E-4	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9995507020737797	WITHOUT_CLASSIFICATION	4.492979262202674E-4	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9991832517340948	WITHOUT_CLASSIFICATION	8.167482659050508E-4	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999453038263078	WITHOUT_CLASSIFICATION	5.469617369232723E-5	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9993166980965664	WITHOUT_CLASSIFICATION	6.83301903433613E-4	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9997835231920718	WITHOUT_CLASSIFICATION	2.164768079283335E-4	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9994890825854343	WITHOUT_CLASSIFICATION	5.109174145656756E-4	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9994890825854343	WITHOUT_CLASSIFICATION	5.109174145656756E-4	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999311384841689	WITHOUT_CLASSIFICATION	6.886151583101984E-5	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998917813231413	WITHOUT_CLASSIFICATION	1.0821867685869794E-4	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9996029750845141	WITHOUT_CLASSIFICATION	3.970249154857994E-4	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9987840207327219	WITHOUT_CLASSIFICATION	0.0012159792672780246	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9987536972878205	WITHOUT_CLASSIFICATION	0.0012463027121794304	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999453038263078	WITHOUT_CLASSIFICATION	5.469617369232723E-5	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.999794290311258	WITHOUT_CLASSIFICATION	2.0570968874215507E-4	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9998592495687046	WITHOUT_CLASSIFICATION	1.40750431295408E-4	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9998291303231784	WITHOUT_CLASSIFICATION	1.7086967682158817E-4	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998409664101703	WITHOUT_CLASSIFICATION	1.5903358982966305E-4	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998409664101703	WITHOUT_CLASSIFICATION	1.5903358982966305E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9995850528743826	WITHOUT_CLASSIFICATION	4.149471256174833E-4	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997556275119481	WITHOUT_CLASSIFICATION	2.4437248805190203E-4	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9996462033951111	WITHOUT_CLASSIFICATION	3.537966048889061E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999226063700575	WITHOUT_CLASSIFICATION	7.739362994249324E-5	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9997111442106377	WITHOUT_CLASSIFICATION	2.8885578936225647E-4	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9995860982049689	WITHOUT_CLASSIFICATION	4.1390179503108317E-4	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9996292095938555	WITHOUT_CLASSIFICATION	3.7079040614440827E-4	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9993173024864189	WITHOUT_CLASSIFICATION	6.826975135811562E-4	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.998620455512179	WITHOUT_CLASSIFICATION	0.0013795444878209335	DEFECT
new	WITHOUT_CLASSIFICATION	0.9998637480817916	WITHOUT_CLASSIFICATION	1.3625191820850944E-4	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9998339098785338	WITHOUT_CLASSIFICATION	1.6609012146612996E-4	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9997568438880587	WITHOUT_CLASSIFICATION	2.431561119413178E-4	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9993173024864189	WITHOUT_CLASSIFICATION	6.826975135811562E-4	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9966529350037976	WITHOUT_CLASSIFICATION	0.0033470649962024706	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9990266149475502	WITHOUT_CLASSIFICATION	9.733850524497E-4	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.9996292095938555	WITHOUT_CLASSIFICATION	3.7079040614440827E-4	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9997776448190632	WITHOUT_CLASSIFICATION	2.22355180936887E-4	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9993504796194779	WITHOUT_CLASSIFICATION	6.495203805222128E-4	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9996252856592658	WITHOUT_CLASSIFICATION	3.7471434073418555E-4	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9989242246420293	WITHOUT_CLASSIFICATION	0.0010757753579707515	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9998525910471515	WITHOUT_CLASSIFICATION	1.4740895284854792E-4	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9997773531117005	WITHOUT_CLASSIFICATION	2.2264688829948744E-4	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.999633966545599	WITHOUT_CLASSIFICATION	3.660334544009618E-4	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9998320307167984	WITHOUT_CLASSIFICATION	1.6796928320161967E-4	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9993932428813699	WITHOUT_CLASSIFICATION	6.067571186301843E-4	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9990841160992662	WITHOUT_CLASSIFICATION	9.158839007336841E-4	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.9995597721374934	WITHOUT_CLASSIFICATION	4.402278625065414E-4	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999107076588086	WITHOUT_CLASSIFICATION	8.929234119141143E-4	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.9990543889980215	WITHOUT_CLASSIFICATION	9.45611001978477E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999226063700575	WITHOUT_CLASSIFICATION	7.739362994249324E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999226063700575	WITHOUT_CLASSIFICATION	7.739362994249324E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9998339098785338	WITHOUT_CLASSIFICATION	1.6609012146612996E-4	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9998320307167984	WITHOUT_CLASSIFICATION	1.6796928320161967E-4	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9998706728369356	WITHOUT_CLASSIFICATION	1.2932716306443692E-4	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9993651726777456	WITHOUT_CLASSIFICATION	6.348273222543208E-4	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9997745087035508	WITHOUT_CLASSIFICATION	2.2549129644923972E-4	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9995054234204522	WITHOUT_CLASSIFICATION	4.945765795477856E-4	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9989095933810225	WITHOUT_CLASSIFICATION	0.0010904066189775384	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9998357720062842	WITHOUT_CLASSIFICATION	1.6422799371584125E-4	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9997262803028578	WITHOUT_CLASSIFICATION	2.737196971421657E-4	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9994995785880076	WITHOUT_CLASSIFICATION	5.004214119922846E-4	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9994995785880076	WITHOUT_CLASSIFICATION	5.004214119922846E-4	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9997196431866437	WITHOUT_CLASSIFICATION	2.8035681335618047E-4	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9996520418292771	WITHOUT_CLASSIFICATION	3.4795817072276036E-4	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9995580731966797	WITHOUT_CLASSIFICATION	4.4192680332037375E-4	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9998064858009061	WITHOUT_CLASSIFICATION	1.9351419909392162E-4	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9997662825450887	WITHOUT_CLASSIFICATION	2.3371745491139142E-4	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.9994183560744888	WITHOUT_CLASSIFICATION	5.816439255111993E-4	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9997232903795239	WITHOUT_CLASSIFICATION	2.767096204760748E-4	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9995982750002635	WITHOUT_CLASSIFICATION	4.0172499973647704E-4	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999055803258134	WITHOUT_CLASSIFICATION	9.441967418664665E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999055803258134	WITHOUT_CLASSIFICATION	9.441967418664665E-5	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.9997946521425982	WITHOUT_CLASSIFICATION	2.053478574017702E-4	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9995341467622894	WITHOUT_CLASSIFICATION	4.658532377106691E-4	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9997946521425982	WITHOUT_CLASSIFICATION	2.053478574017702E-4	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9998011125527777	WITHOUT_CLASSIFICATION	1.9888744722238447E-4	DEFECT
int	WITHOUT_CLASSIFICATION	0.9998674392364783	WITHOUT_CLASSIFICATION	1.3256076352170955E-4	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999226063700575	WITHOUT_CLASSIFICATION	7.739362994249324E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9998339098785338	WITHOUT_CLASSIFICATION	1.6609012146612996E-4	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9998320307167984	WITHOUT_CLASSIFICATION	1.6796928320161967E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9998320307167984	WITHOUT_CLASSIFICATION	1.6796928320161967E-4	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.9999226063700575	WITHOUT_CLASSIFICATION	7.739362994249324E-5	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9997276842622689	WITHOUT_CLASSIFICATION	2.7231573773111553E-4	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9990295014197462	WITHOUT_CLASSIFICATION	9.704985802537959E-4	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9997837791449977	WITHOUT_CLASSIFICATION	2.16220855002162E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9997837791449977	WITHOUT_CLASSIFICATION	2.16220855002162E-4	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9996853962026995	WITHOUT_CLASSIFICATION	3.146037973005653E-4	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9997949169747229	WITHOUT_CLASSIFICATION	2.0508302527710878E-4	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.9998589797119302	WITHOUT_CLASSIFICATION	1.4102028806991252E-4	DEFECT
byte	WITHOUT_CLASSIFICATION	0.9998624680584692	WITHOUT_CLASSIFICATION	1.375319415307851E-4	DEFECT
char	WITHOUT_CLASSIFICATION	0.999856092545369	WITHOUT_CLASSIFICATION	1.439074546309931E-4	DEFECT
short	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
double	WITHOUT_CLASSIFICATION	0.9998360141701139	WITHOUT_CLASSIFICATION	1.6398582988607675E-4	DEFECT
float	WITHOUT_CLASSIFICATION	0.9998340120063206	WITHOUT_CLASSIFICATION	1.65987993679379E-4	DEFECT
float	WITHOUT_CLASSIFICATION	0.9998340120063206	WITHOUT_CLASSIFICATION	1.65987993679379E-4	DEFECT
long	WITHOUT_CLASSIFICATION	0.999803687383423	WITHOUT_CLASSIFICATION	1.96312616576905E-4	DEFECT
long	WITHOUT_CLASSIFICATION	0.999803687383423	WITHOUT_CLASSIFICATION	1.96312616576905E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.99990947981389	WITHOUT_CLASSIFICATION	9.052018611008906E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.99990947981389	WITHOUT_CLASSIFICATION	9.052018611008906E-5	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9995676817432021	WITHOUT_CLASSIFICATION	4.3231825679790017E-4	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9995676817432021	WITHOUT_CLASSIFICATION	4.3231825679790017E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9997837791449977	WITHOUT_CLASSIFICATION	2.16220855002162E-4	DEFECT
double	WITHOUT_CLASSIFICATION	0.9998360141701139	WITHOUT_CLASSIFICATION	1.6398582988607675E-4	DEFECT
float	WITHOUT_CLASSIFICATION	0.9998340120063206	WITHOUT_CLASSIFICATION	1.65987993679379E-4	DEFECT
float	WITHOUT_CLASSIFICATION	0.9998340120063206	WITHOUT_CLASSIFICATION	1.65987993679379E-4	DEFECT
long	WITHOUT_CLASSIFICATION	0.999803687383423	WITHOUT_CLASSIFICATION	1.96312616576905E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.99990947981389	WITHOUT_CLASSIFICATION	9.052018611008906E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.99990947981389	WITHOUT_CLASSIFICATION	9.052018611008906E-5	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9995676817432021	WITHOUT_CLASSIFICATION	4.3231825679790017E-4	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9998241696790794	WITHOUT_CLASSIFICATION	1.758303209205826E-4	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9996304919030669	WITHOUT_CLASSIFICATION	3.6950809693314803E-4	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.9995560353053693	WITHOUT_CLASSIFICATION	4.4396469463071333E-4	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998792667473858	WITHOUT_CLASSIFICATION	1.207332526141092E-4	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9997030153116845	WITHOUT_CLASSIFICATION	2.969846883154651E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9780848556423555	WITHOUT_CLASSIFICATION	0.021915144357644557	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9991618734014638	WITHOUT_CLASSIFICATION	8.381265985362249E-4	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9997098654365768	WITHOUT_CLASSIFICATION	2.90134563423236E-4	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9987982730789005	WITHOUT_CLASSIFICATION	0.001201726921099514	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9996124352473096	WITHOUT_CLASSIFICATION	3.875647526904401E-4	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.999772959505137	WITHOUT_CLASSIFICATION	2.2704049486289463E-4	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9995880504997467	WITHOUT_CLASSIFICATION	4.119495002532172E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9995897338060807	WITHOUT_CLASSIFICATION	4.1026619391923023E-4	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9993211537808206	WITHOUT_CLASSIFICATION	6.788462191793238E-4	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9993211537808206	WITHOUT_CLASSIFICATION	6.788462191793238E-4	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9995443620696824	WITHOUT_CLASSIFICATION	4.5563793031749275E-4	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999412453124196	WITHOUT_CLASSIFICATION	5.875468758050485E-5	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9989756682826256	WITHOUT_CLASSIFICATION	0.0010243317173743713	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9978576565616594	WITHOUT_CLASSIFICATION	0.002142343438340715	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9978576565616594	WITHOUT_CLASSIFICATION	0.002142343438340715	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9969899171399969	WITHOUT_CLASSIFICATION	0.003010082860003144	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.99616064354284	WITHOUT_CLASSIFICATION	0.0038393564571600914	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.99616064354284	WITHOUT_CLASSIFICATION	0.0038393564571600914	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9985309265138975	WITHOUT_CLASSIFICATION	0.001469073486102421	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9995236105858976	WITHOUT_CLASSIFICATION	4.7638941410236326E-4	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.999699039326767	WITHOUT_CLASSIFICATION	3.009606732330379E-4	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.8846039344834309	WITHOUT_CLASSIFICATION	0.11539606551656913	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9998335984928993	WITHOUT_CLASSIFICATION	1.6640150710060537E-4	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9996410480835379	WITHOUT_CLASSIFICATION	3.589519164620845E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997465048948986	WITHOUT_CLASSIFICATION	2.53495105101379E-4	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9997930883831861	WITHOUT_CLASSIFICATION	2.0691161681398186E-4	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9995989577435678	WITHOUT_CLASSIFICATION	4.010422564322828E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9995616772800086	WITHOUT_CLASSIFICATION	4.383227199914696E-4	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9998745608621997	WITHOUT_CLASSIFICATION	1.2543913780029695E-4	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999699039326767	WITHOUT_CLASSIFICATION	3.009606732330379E-4	DEFECT
properties	WITHOUT_CLASSIFICATION	0.99983380072327	WITHOUT_CLASSIFICATION	1.6619927673007032E-4	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9996179349680896	WITHOUT_CLASSIFICATION	3.820650319103883E-4	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9998327075551933	WITHOUT_CLASSIFICATION	1.6729244480667715E-4	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
properties	WITHOUT_CLASSIFICATION	0.99983380072327	WITHOUT_CLASSIFICATION	1.6619927673007032E-4	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9998327075551933	WITHOUT_CLASSIFICATION	1.6729244480667715E-4	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9996453047583224	WITHOUT_CLASSIFICATION	3.5469524167759155E-4	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9996453047583224	WITHOUT_CLASSIFICATION	3.5469524167759155E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
column index	WITHOUT_CLASSIFICATION	0.9994701702373429	WITHOUT_CLASSIFICATION	5.298297626571541E-4	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9998984014392543	WITHOUT_CLASSIFICATION	1.0159856074564297E-4	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999425941878682	WITHOUT_CLASSIFICATION	5.740581213185846E-5	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.99973779957773	WITHOUT_CLASSIFICATION	2.6220042227002047E-4	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9997554339222574	WITHOUT_CLASSIFICATION	2.4456607774264104E-4	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9995811471378959	WITHOUT_CLASSIFICATION	4.18852862104148E-4	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9982286339671469	WITHOUT_CLASSIFICATION	0.0017713660328530865	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9997554339222574	WITHOUT_CLASSIFICATION	2.4456607774264104E-4	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9998323497237552	WITHOUT_CLASSIFICATION	1.6765027624474944E-4	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9995901185700079	WITHOUT_CLASSIFICATION	4.098814299921584E-4	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9992924890925418	WITHOUT_CLASSIFICATION	7.075109074580998E-4	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.999867012442547	WITHOUT_CLASSIFICATION	1.32987557453012E-4	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999415951470657	WITHOUT_CLASSIFICATION	5.840485293427185E-5	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9998017971722899	WITHOUT_CLASSIFICATION	1.9820282771000286E-4	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9994220393371167	WITHOUT_CLASSIFICATION	5.77960662883361E-4	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999628337810269	WITHOUT_CLASSIFICATION	3.716621897319614E-5	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9996462073125719	WITHOUT_CLASSIFICATION	3.5379268742804343E-4	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9995911065848149	WITHOUT_CLASSIFICATION	4.0889341518522205E-4	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9995899605017279	WITHOUT_CLASSIFICATION	4.100394982721465E-4	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9989256242758354	WITHOUT_CLASSIFICATION	0.0010743757241646688	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9995616772800086	WITHOUT_CLASSIFICATION	4.383227199914696E-4	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9995861859245074	WITHOUT_CLASSIFICATION	4.138140754925951E-4	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9996014146578646	WITHOUT_CLASSIFICATION	3.9858534213545416E-4	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9994457784399242	WITHOUT_CLASSIFICATION	5.54221560075776E-4	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.9995263960211144	WITHOUT_CLASSIFICATION	4.736039788855425E-4	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9995263960211144	WITHOUT_CLASSIFICATION	4.736039788855425E-4	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9996203699641268	WITHOUT_CLASSIFICATION	3.7963003587309036E-4	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999863531008403	WITHOUT_CLASSIFICATION	1.3646899159730787E-5	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9997724788649238	WITHOUT_CLASSIFICATION	2.2752113507632348E-4	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9997110213662821	WITHOUT_CLASSIFICATION	2.8897863371781413E-4	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9996533931972541	WITHOUT_CLASSIFICATION	3.466068027458324E-4	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998488256480327	WITHOUT_CLASSIFICATION	1.5117435196733027E-4	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998488256480327	WITHOUT_CLASSIFICATION	1.5117435196733027E-4	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9997448984836657	WITHOUT_CLASSIFICATION	2.551015163343643E-4	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9997282131658731	WITHOUT_CLASSIFICATION	2.717868341269651E-4	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9997295405635525	WITHOUT_CLASSIFICATION	2.7045943644747654E-4	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997589322410303	WITHOUT_CLASSIFICATION	2.4106775896980378E-4	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999390741496136	WITHOUT_CLASSIFICATION	6.09258503864199E-5	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998485370107827	WITHOUT_CLASSIFICATION	1.5146298921732396E-4	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9992436137729201	WITHOUT_CLASSIFICATION	7.563862270799493E-4	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9995276200207033	WITHOUT_CLASSIFICATION	4.723799792967165E-4	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9987393899368368	WITHOUT_CLASSIFICATION	0.0012606100631631853	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9996327411170637	WITHOUT_CLASSIFICATION	3.6725888293630423E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9991040744802919	WITHOUT_CLASSIFICATION	8.959255197081187E-4	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999607572881552	WITHOUT_CLASSIFICATION	3.9242711844800833E-4	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9998410284545431	WITHOUT_CLASSIFICATION	1.5897154545685725E-4	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995899137834178	WITHOUT_CLASSIFICATION	4.100862165821159E-4	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9996063439102767	WITHOUT_CLASSIFICATION	3.936560897233556E-4	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9998384131735493	WITHOUT_CLASSIFICATION	1.615868264507092E-4	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9985192920923015	WITHOUT_CLASSIFICATION	0.0014807079076984732	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9991040744802919	WITHOUT_CLASSIFICATION	8.959255197081187E-4	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9997525461987007	WITHOUT_CLASSIFICATION	2.4745380129930546E-4	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996195104319662	WITHOUT_CLASSIFICATION	3.8048956803379716E-4	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9996195104319662	WITHOUT_CLASSIFICATION	3.8048956803379716E-4	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999895667463344	WITHOUT_CLASSIFICATION	1.0433253665599104E-4	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9995292013788636	WITHOUT_CLASSIFICATION	4.7079862113651736E-4	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9998410284545431	WITHOUT_CLASSIFICATION	1.5897154545685725E-4	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9993896926882164	WITHOUT_CLASSIFICATION	6.103073117836343E-4	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9995315350597842	WITHOUT_CLASSIFICATION	4.6846494021585236E-4	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999529979562194	WITHOUT_CLASSIFICATION	4.700204378058972E-4	DEFECT
found	WITHOUT_CLASSIFICATION	0.9998487080285042	WITHOUT_CLASSIFICATION	1.5129197149565038E-4	DEFECT
found	WITHOUT_CLASSIFICATION	0.9998487080285042	WITHOUT_CLASSIFICATION	1.5129197149565038E-4	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9996738694402453	WITHOUT_CLASSIFICATION	3.261305597547528E-4	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9997110213662821	WITHOUT_CLASSIFICATION	2.8897863371781413E-4	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9988962370950288	WITHOUT_CLASSIFICATION	0.001103762904971101	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9984747871952131	WITHOUT_CLASSIFICATION	0.001525212804787	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999547131927965	WITHOUT_CLASSIFICATION	4.5286807203509733E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9995850528743826	WITHOUT_CLASSIFICATION	4.149471256174833E-4	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9984747871952131	WITHOUT_CLASSIFICATION	0.001525212804787	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999547131927965	WITHOUT_CLASSIFICATION	4.5286807203509733E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997765920814475	WITHOUT_CLASSIFICATION	2.234079185523751E-4	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9993088215347558	WITHOUT_CLASSIFICATION	6.911784652441936E-4	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9995581803216389	WITHOUT_CLASSIFICATION	4.4181967836104266E-4	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9996351855439004	WITHOUT_CLASSIFICATION	3.64814456099584E-4	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9991595649042009	WITHOUT_CLASSIFICATION	8.404350957991281E-4	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9998723774922393	WITHOUT_CLASSIFICATION	1.2762250776065566E-4	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9992909810467008	WITHOUT_CLASSIFICATION	7.090189532991508E-4	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9992909810467008	WITHOUT_CLASSIFICATION	7.090189532991508E-4	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9987346463145605	WITHOUT_CLASSIFICATION	0.0012653536854394032	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9994806644465898	WITHOUT_CLASSIFICATION	5.193355534102756E-4	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9996477071435469	WITHOUT_CLASSIFICATION	3.522928564531573E-4	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9995957398655211	WITHOUT_CLASSIFICATION	4.042601344789561E-4	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9996870809551216	WITHOUT_CLASSIFICATION	3.129190448784463E-4	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9990893938707605	WITHOUT_CLASSIFICATION	9.106061292394809E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9995850528743826	WITHOUT_CLASSIFICATION	4.149471256174833E-4	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9990893938707605	WITHOUT_CLASSIFICATION	9.106061292394809E-4	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9997190396450292	WITHOUT_CLASSIFICATION	2.8096035497081047E-4	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9997190396450292	WITHOUT_CLASSIFICATION	2.8096035497081047E-4	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9991041048599273	WITHOUT_CLASSIFICATION	8.958951400726968E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997765920814475	WITHOUT_CLASSIFICATION	2.234079185523751E-4	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9995793020326547	WITHOUT_CLASSIFICATION	4.206979673453571E-4	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999462138555139	WITHOUT_CLASSIFICATION	5.378614448618111E-5	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9992740168000549	WITHOUT_CLASSIFICATION	7.25983199945114E-4	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995199262262631	WITHOUT_CLASSIFICATION	4.8007377373698824E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9990341434176337	WITHOUT_CLASSIFICATION	9.658565823661357E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997765920814475	WITHOUT_CLASSIFICATION	2.234079185523751E-4	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995199262262631	WITHOUT_CLASSIFICATION	4.8007377373698824E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9990341434176337	WITHOUT_CLASSIFICATION	9.658565823661357E-4	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.999741057677941	WITHOUT_CLASSIFICATION	2.5894232205909024E-4	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9996302810488421	WITHOUT_CLASSIFICATION	3.69718951157928E-4	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9994318929134539	WITHOUT_CLASSIFICATION	5.68107086546151E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997765920814475	WITHOUT_CLASSIFICATION	2.234079185523751E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997765920814475	WITHOUT_CLASSIFICATION	2.234079185523751E-4	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9998611533751683	WITHOUT_CLASSIFICATION	1.388466248315907E-4	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9996294502712963	WITHOUT_CLASSIFICATION	3.705497287035896E-4	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9993927445402546	WITHOUT_CLASSIFICATION	6.072554597452537E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999219951186178	WITHOUT_CLASSIFICATION	7.800488138216634E-5	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9997945287161484	WITHOUT_CLASSIFICATION	2.0547128385169826E-4	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999090798770579	WITHOUT_CLASSIFICATION	9.092012294208428E-5	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9993211159075218	WITHOUT_CLASSIFICATION	6.788840924781598E-4	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9997481056950298	WITHOUT_CLASSIFICATION	2.5189430497015694E-4	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9994346158416384	WITHOUT_CLASSIFICATION	5.653841583615487E-4	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9985575449852051	WITHOUT_CLASSIFICATION	0.0014424550147949613	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999652310644019	WITHOUT_CLASSIFICATION	3.4768935598102475E-4	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9998932155450632	WITHOUT_CLASSIFICATION	1.067844549369054E-4	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999005795051327	WITHOUT_CLASSIFICATION	9.94204948672888E-5	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9998425643923327	WITHOUT_CLASSIFICATION	1.5743560766738355E-4	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995775919533163	WITHOUT_CLASSIFICATION	4.224080466836656E-4	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9976812328337126	WITHOUT_CLASSIFICATION	0.0023187671662874697	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999219951186178	WITHOUT_CLASSIFICATION	7.800488138216634E-5	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.9997500806277152	WITHOUT_CLASSIFICATION	2.4991937228482935E-4	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.999607572881552	WITHOUT_CLASSIFICATION	3.9242711844800833E-4	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999529979562194	WITHOUT_CLASSIFICATION	4.700204378058972E-4	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998081352474946	WITHOUT_CLASSIFICATION	1.9186475250544669E-4	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9995912816432154	WITHOUT_CLASSIFICATION	4.0871835678451743E-4	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9995912816432154	WITHOUT_CLASSIFICATION	4.0871835678451743E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999219951186178	WITHOUT_CLASSIFICATION	7.800488138216634E-5	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.998142283604465	WITHOUT_CLASSIFICATION	0.0018577163955350619	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.999819734258885	WITHOUT_CLASSIFICATION	1.8026574111492527E-4	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9938968724922865	WITHOUT_CLASSIFICATION	0.006103127507713555	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9996543952557425	WITHOUT_CLASSIFICATION	3.456047442575089E-4	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9997510281138763	WITHOUT_CLASSIFICATION	2.489718861236775E-4	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9978248893742507	WITHOUT_CLASSIFICATION	0.0021751106257491964	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9996427218716846	WITHOUT_CLASSIFICATION	3.5727812831545255E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9997041087380371	WITHOUT_CLASSIFICATION	2.9589126196294597E-4	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9997519683313335	WITHOUT_CLASSIFICATION	2.480316686664495E-4	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9996803098400656	WITHOUT_CLASSIFICATION	3.196901599344902E-4	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9997313857924656	WITHOUT_CLASSIFICATION	2.686142075344923E-4	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999346909352554	WITHOUT_CLASSIFICATION	6.530906474450882E-5	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999251642893582	WITHOUT_CLASSIFICATION	7.483571064179955E-4	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9990876064496742	WITHOUT_CLASSIFICATION	9.123935503258605E-4	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9988342737272125	WITHOUT_CLASSIFICATION	0.0011657262727876084	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.999903907043769	WITHOUT_CLASSIFICATION	9.609295623101027E-5	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998324837145878	WITHOUT_CLASSIFICATION	1.675162854123574E-4	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999548094705488	WITHOUT_CLASSIFICATION	4.519052945106886E-5	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9990680961330782	WITHOUT_CLASSIFICATION	9.319038669217981E-4	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9997840466496309	WITHOUT_CLASSIFICATION	2.1595335036909733E-4	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997635525997084	WITHOUT_CLASSIFICATION	2.3644740029152194E-4	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997635525997084	WITHOUT_CLASSIFICATION	2.3644740029152194E-4	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995785252353045	WITHOUT_CLASSIFICATION	4.2147476469537665E-4	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996669965928686	WITHOUT_CLASSIFICATION	3.3300340713133365E-4	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995750791682633	WITHOUT_CLASSIFICATION	4.24920831736816E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995750791682633	WITHOUT_CLASSIFICATION	4.24920831736816E-4	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995750791682633	WITHOUT_CLASSIFICATION	4.24920831736816E-4	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995750791682633	WITHOUT_CLASSIFICATION	4.24920831736816E-4	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999768650869071	WITHOUT_CLASSIFICATION	2.3134913092975232E-5	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999691365267914	WITHOUT_CLASSIFICATION	3.0863473208537126E-5	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995810211596916	WITHOUT_CLASSIFICATION	4.189788403083022E-4	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995947154514766	WITHOUT_CLASSIFICATION	4.052845485234384E-4	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999575533648069	WITHOUT_CLASSIFICATION	4.2446635193102075E-4	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996319153210032	WITHOUT_CLASSIFICATION	3.680846789967811E-4	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995750791682633	WITHOUT_CLASSIFICATION	4.24920831736816E-4	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995750791682633	WITHOUT_CLASSIFICATION	4.24920831736816E-4	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995808787876114	WITHOUT_CLASSIFICATION	4.1912121238861586E-4	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995750791682633	WITHOUT_CLASSIFICATION	4.24920831736816E-4	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9992359623432743	WITHOUT_CLASSIFICATION	7.640376567255953E-4	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9990976384423068	WITHOUT_CLASSIFICATION	9.023615576932131E-4	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993781506359054	WITHOUT_CLASSIFICATION	6.21849364094655E-4	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9998033086590902	WITHOUT_CLASSIFICATION	1.9669134090975296E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9995721788072998	WITHOUT_CLASSIFICATION	4.2782119270018463E-4	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.9996474683479228	WITHOUT_CLASSIFICATION	3.5253165207718614E-4	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9991489476678267	WITHOUT_CLASSIFICATION	8.510523321733058E-4	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9995013737053582	WITHOUT_CLASSIFICATION	4.986262946417704E-4	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9997231435435597	WITHOUT_CLASSIFICATION	2.76856456440325E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9996232446068304	WITHOUT_CLASSIFICATION	3.7675539316958087E-4	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9996954868838036	WITHOUT_CLASSIFICATION	3.0451311619642625E-4	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9990645715642524	WITHOUT_CLASSIFICATION	9.3542843574752E-4	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9974843287832624	WITHOUT_CLASSIFICATION	0.00251567121673761	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9983020753277514	WITHOUT_CLASSIFICATION	0.0016979246722486699	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995721906980075	WITHOUT_CLASSIFICATION	4.278093019924671E-4	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997673059989404	WITHOUT_CLASSIFICATION	2.3269400105956246E-4	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995611438371858	WITHOUT_CLASSIFICATION	4.3885616281433146E-4	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9976954473155657	WITHOUT_CLASSIFICATION	0.0023045526844342927	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9996663821878484	WITHOUT_CLASSIFICATION	3.3361781215159074E-4	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9996946179599326	WITHOUT_CLASSIFICATION	3.053820400673078E-4	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9991525388358735	WITHOUT_CLASSIFICATION	8.474611641264711E-4	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996867780202068	WITHOUT_CLASSIFICATION	3.132219797931661E-4	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9997399981050064	WITHOUT_CLASSIFICATION	2.600018949937214E-4	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9979436174621261	WITHOUT_CLASSIFICATION	0.0020563825378739097	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9996566140525209	WITHOUT_CLASSIFICATION	3.4338594747903304E-4	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998760322400108	WITHOUT_CLASSIFICATION	1.2396775998921986E-4	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998217991428251	WITHOUT_CLASSIFICATION	1.782008571748297E-4	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9986600938049941	WITHOUT_CLASSIFICATION	0.001339906195005816	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9991349759296091	WITHOUT_CLASSIFICATION	8.650240703908527E-4	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998857105894867	WITHOUT_CLASSIFICATION	1.1428941051319308E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9995721788072998	WITHOUT_CLASSIFICATION	4.2782119270018463E-4	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999095887515482	WITHOUT_CLASSIFICATION	9.04112484518023E-5	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9992550641170752	WITHOUT_CLASSIFICATION	7.449358829247667E-4	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9995142178690729	WITHOUT_CLASSIFICATION	4.85782130927091E-4	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993781506359054	WITHOUT_CLASSIFICATION	6.21849364094655E-4	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.9996251940806685	WITHOUT_CLASSIFICATION	3.7480591933145447E-4	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9976954473155657	WITHOUT_CLASSIFICATION	0.0023045526844342927	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9994397538600452	WITHOUT_CLASSIFICATION	5.602461399546852E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9983369424617617	WITHOUT_CLASSIFICATION	0.0016630575382382408	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9990610167223305	WITHOUT_CLASSIFICATION	9.389832776694379E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9995550223437301	WITHOUT_CLASSIFICATION	4.449776562700531E-4	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999827678632639	WITHOUT_CLASSIFICATION	1.723213673610129E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9994284925915184	WITHOUT_CLASSIFICATION	5.715074084814948E-4	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9998228614761836	WITHOUT_CLASSIFICATION	1.7713852381639136E-4	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9997298778458974	WITHOUT_CLASSIFICATION	2.701221541026537E-4	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9997786704617109	WITHOUT_CLASSIFICATION	2.2132953828909684E-4	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9996712128652506	WITHOUT_CLASSIFICATION	3.2878713474937933E-4	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993781506359054	WITHOUT_CLASSIFICATION	6.21849364094655E-4	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9998416941734356	WITHOUT_CLASSIFICATION	1.5830582656440047E-4	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9997993957812481	WITHOUT_CLASSIFICATION	2.0060421875187786E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9981238269087372	WITHOUT_CLASSIFICATION	0.0018761730912627004	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998081850334717	WITHOUT_CLASSIFICATION	1.918149665282518E-4	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9998188521724811	WITHOUT_CLASSIFICATION	1.8114782751883809E-4	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9997294824767514	WITHOUT_CLASSIFICATION	2.7051752324862104E-4	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9984317099368637	WITHOUT_CLASSIFICATION	0.0015682900631362117	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9997863988447541	WITHOUT_CLASSIFICATION	2.1360115524605422E-4	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9983945089887423	WITHOUT_CLASSIFICATION	0.0016054910112577913	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9996472503735546	WITHOUT_CLASSIFICATION	3.5274962644538316E-4	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.998112082450456	WITHOUT_CLASSIFICATION	0.001887917549544024	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9998258059161015	WITHOUT_CLASSIFICATION	1.7419408389841894E-4	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998258059161015	WITHOUT_CLASSIFICATION	1.7419408389841894E-4	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993781506359054	WITHOUT_CLASSIFICATION	6.21849364094655E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9995721788072998	WITHOUT_CLASSIFICATION	4.2782119270018463E-4	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9961441202260205	WITHOUT_CLASSIFICATION	0.003855879773979443	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9996442277257177	WITHOUT_CLASSIFICATION	3.5577227428229964E-4	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9861399948474323	WITHOUT_CLASSIFICATION	0.013860005152567648	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9995721788072998	WITHOUT_CLASSIFICATION	4.2782119270018463E-4	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.999588289659139	WITHOUT_CLASSIFICATION	4.117103408609797E-4	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998081850334717	WITHOUT_CLASSIFICATION	1.918149665282518E-4	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9998373897478883	WITHOUT_CLASSIFICATION	1.6261025211172748E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9981238269087372	WITHOUT_CLASSIFICATION	0.0018761730912627004	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.7726789031534379	WITHOUT_CLASSIFICATION	0.22732109684656213	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9955575652166861	WITHOUT_CLASSIFICATION	0.004442434783313909	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9931967425465084	WITHOUT_CLASSIFICATION	0.006803257453491638	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9990610167223305	WITHOUT_CLASSIFICATION	9.389832776694379E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9995550223437301	WITHOUT_CLASSIFICATION	4.449776562700531E-4	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9997095914753727	WITHOUT_CLASSIFICATION	2.9040852462727373E-4	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.9997155494876979	WITHOUT_CLASSIFICATION	2.844505123019849E-4	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9996608286068132	WITHOUT_CLASSIFICATION	3.3917139318688066E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9981238269087372	WITHOUT_CLASSIFICATION	0.0018761730912627004	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.7726789031534379	WITHOUT_CLASSIFICATION	0.22732109684656213	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9995721788072998	WITHOUT_CLASSIFICATION	4.2782119270018463E-4	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999827678632639	WITHOUT_CLASSIFICATION	1.723213673610129E-4	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9994284925915184	WITHOUT_CLASSIFICATION	5.715074084814948E-4	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9998228614761836	WITHOUT_CLASSIFICATION	1.7713852381639136E-4	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997527920856877	WITHOUT_CLASSIFICATION	2.472079143124016E-4	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995365101577787	WITHOUT_CLASSIFICATION	4.634898422214E-4	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9995799460860715	WITHOUT_CLASSIFICATION	4.2005391392857354E-4	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9994139190467168	WITHOUT_CLASSIFICATION	5.860809532831185E-4	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9996293789504735	WITHOUT_CLASSIFICATION	3.706210495264727E-4	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995750791682633	WITHOUT_CLASSIFICATION	4.24920831736816E-4	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9993836068686432	WITHOUT_CLASSIFICATION	6.163931313567959E-4	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998038692201168	WITHOUT_CLASSIFICATION	1.961307798831816E-4	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9996546252869402	WITHOUT_CLASSIFICATION	3.4537471305982523E-4	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999221884769909	WITHOUT_CLASSIFICATION	7.781152300910073E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995750791682633	WITHOUT_CLASSIFICATION	4.24920831736816E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995750791682633	WITHOUT_CLASSIFICATION	4.24920831736816E-4	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995947154514766	WITHOUT_CLASSIFICATION	4.052845485234384E-4	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999156891422393	WITHOUT_CLASSIFICATION	8.43108577606977E-5	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9996331904820689	WITHOUT_CLASSIFICATION	3.6680951793111803E-4	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999598758574684	WITHOUT_CLASSIFICATION	4.012414253159367E-4	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995750791682633	WITHOUT_CLASSIFICATION	4.24920831736816E-4	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9992714409923008	WITHOUT_CLASSIFICATION	7.285590076991403E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999575533648069	WITHOUT_CLASSIFICATION	4.2446635193102075E-4	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995750791682633	WITHOUT_CLASSIFICATION	4.24920831736816E-4	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998760322400108	WITHOUT_CLASSIFICATION	1.2396775998921986E-4	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9985851316973214	WITHOUT_CLASSIFICATION	0.0014148683026785885	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.998285809416178	WITHOUT_CLASSIFICATION	0.001714190583821963	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9992118410713295	WITHOUT_CLASSIFICATION	7.88158928670362E-4	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9997512445261443	WITHOUT_CLASSIFICATION	2.487554738556383E-4	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999392660945462	WITHOUT_CLASSIFICATION	6.073390545381258E-5	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9996453047583224	WITHOUT_CLASSIFICATION	3.5469524167759155E-4	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9994233827847935	WITHOUT_CLASSIFICATION	5.766172152064883E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.999842922878908	WITHOUT_CLASSIFICATION	1.5707712109200067E-4	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9996427218716846	WITHOUT_CLASSIFICATION	3.5727812831545255E-4	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9997337309300157	WITHOUT_CLASSIFICATION	2.662690699843081E-4	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9976520829239726	WITHOUT_CLASSIFICATION	0.002347917076027516	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9995395929665327	WITHOUT_CLASSIFICATION	4.6040703346729846E-4	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9997189123922132	WITHOUT_CLASSIFICATION	2.8108760778677156E-4	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9994762381458514	WITHOUT_CLASSIFICATION	5.237618541485377E-4	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9995837226732263	WITHOUT_CLASSIFICATION	4.162773267737905E-4	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994945999501282	WITHOUT_CLASSIFICATION	5.054000498716818E-4	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993855373273726	WITHOUT_CLASSIFICATION	6.144626726274613E-4	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998246317441563	WITHOUT_CLASSIFICATION	1.7536825584377392E-4	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998188893322744	WITHOUT_CLASSIFICATION	1.8111066772573536E-4	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9993525541066159	WITHOUT_CLASSIFICATION	6.474458933841153E-4	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999690256518734	WITHOUT_CLASSIFICATION	3.0974348126609834E-4	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996750518698762	WITHOUT_CLASSIFICATION	3.24948130123811E-4	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.996817281098961	WITHOUT_CLASSIFICATION	0.0031827189010390916	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9973209812624637	WITHOUT_CLASSIFICATION	0.0026790187375363653	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999816027679805	WITHOUT_CLASSIFICATION	1.8397232019492314E-4	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999607179590893	WITHOUT_CLASSIFICATION	3.928204091070895E-4	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.996817281098961	WITHOUT_CLASSIFICATION	0.0031827189010390916	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999211332042833	WITHOUT_CLASSIFICATION	7.886679571664275E-5	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998218608089237	WITHOUT_CLASSIFICATION	1.781391910764025E-4	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999742301459318	WITHOUT_CLASSIFICATION	2.5769854068198367E-4	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9993767086704495	WITHOUT_CLASSIFICATION	6.232913295505902E-4	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9948912544578106	WITHOUT_CLASSIFICATION	0.005108745542189507	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9994372860253747	WITHOUT_CLASSIFICATION	5.627139746252296E-4	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9993886466601922	WITHOUT_CLASSIFICATION	6.113533398078649E-4	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998654140125492	WITHOUT_CLASSIFICATION	1.3458598745074454E-4	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998654140125492	WITHOUT_CLASSIFICATION	1.3458598745074454E-4	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9994311149095808	WITHOUT_CLASSIFICATION	5.688850904192528E-4	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9989222576042709	WITHOUT_CLASSIFICATION	0.0010777423957291515	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9996512207705132	WITHOUT_CLASSIFICATION	3.487792294868836E-4	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9997578043667268	WITHOUT_CLASSIFICATION	2.4219563327308095E-4	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9996230277674739	WITHOUT_CLASSIFICATION	3.769722325261025E-4	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999385040866859	WITHOUT_CLASSIFICATION	6.149591331409499E-4	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999191818726768	WITHOUT_CLASSIFICATION	8.08181273231845E-5	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9995784825619688	WITHOUT_CLASSIFICATION	4.2151743803127135E-4	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9996574967068252	WITHOUT_CLASSIFICATION	3.42503293174787E-4	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9997751255103035	WITHOUT_CLASSIFICATION	2.2487448969647392E-4	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9997842993371806	WITHOUT_CLASSIFICATION	2.1570066281929016E-4	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9997207064936653	WITHOUT_CLASSIFICATION	2.7929350633470866E-4	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9984978533646047	WITHOUT_CLASSIFICATION	0.001502146635395248	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9976842525127769	WITHOUT_CLASSIFICATION	0.0023157474872230275	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9996188407479825	WITHOUT_CLASSIFICATION	3.81159252017487E-4	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9909772635701258	WITHOUT_CLASSIFICATION	0.00902273642987407	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9995174201668086	WITHOUT_CLASSIFICATION	4.825798331914183E-4	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9973805978843142	WITHOUT_CLASSIFICATION	0.0026194021156857204	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9997936754763149	WITHOUT_CLASSIFICATION	2.0632452368505994E-4	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9997795490360545	WITHOUT_CLASSIFICATION	2.2045096394553135E-4	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9995920282351997	WITHOUT_CLASSIFICATION	4.0797176480031507E-4	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999860742466013	WITHOUT_CLASSIFICATION	1.3925753398700796E-4	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9958833808227752	WITHOUT_CLASSIFICATION	0.004116619177224877	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9997457409188525	WITHOUT_CLASSIFICATION	2.542590811474581E-4	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9997473125661822	WITHOUT_CLASSIFICATION	2.526874338178049E-4	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9990201026589439	WITHOUT_CLASSIFICATION	9.7989734105598E-4	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9992999995168841	WITHOUT_CLASSIFICATION	7.000004831158103E-4	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9992744382877471	WITHOUT_CLASSIFICATION	7.255617122529038E-4	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9994296931680516	WITHOUT_CLASSIFICATION	5.703068319484513E-4	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9982598708096411	WITHOUT_CLASSIFICATION	0.0017401291903589129	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9996802338177017	WITHOUT_CLASSIFICATION	3.1976618229832967E-4	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.9997091528589881	WITHOUT_CLASSIFICATION	2.908471410118514E-4	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998893682308233	WITHOUT_CLASSIFICATION	1.1063176917680083E-4	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999085185897335	WITHOUT_CLASSIFICATION	9.148141026656988E-5	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9995436991188688	WITHOUT_CLASSIFICATION	4.5630088113127957E-4	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.9994005433986067	WITHOUT_CLASSIFICATION	5.994566013932133E-4	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9981417350096474	WITHOUT_CLASSIFICATION	0.0018582649903526177	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9997977324972784	WITHOUT_CLASSIFICATION	2.022675027217029E-4	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9729113985137282	WITHOUT_CLASSIFICATION	0.027088601486271787	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9996236220142025	WITHOUT_CLASSIFICATION	3.763779857974024E-4	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999496777828902	WITHOUT_CLASSIFICATION	5.032221710985073E-5	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9996712128652506	WITHOUT_CLASSIFICATION	3.2878713474937933E-4	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9996712128652506	WITHOUT_CLASSIFICATION	3.2878713474937933E-4	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9991224245136211	WITHOUT_CLASSIFICATION	8.775754863789135E-4	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9997422334326945	WITHOUT_CLASSIFICATION	2.5776656730542506E-4	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9997876014832642	WITHOUT_CLASSIFICATION	2.123985167359071E-4	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9998428532403989	WITHOUT_CLASSIFICATION	1.5714675960103825E-4	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9997544529374611	WITHOUT_CLASSIFICATION	2.455470625388703E-4	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9998373067819785	WITHOUT_CLASSIFICATION	1.6269321802147676E-4	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9997972292768468	WITHOUT_CLASSIFICATION	2.0277072315320795E-4	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9984308231163203	WITHOUT_CLASSIFICATION	0.0015691768836797323	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9998492049515599	WITHOUT_CLASSIFICATION	1.507950484400612E-4	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9998114288647927	WITHOUT_CLASSIFICATION	1.8857113520734755E-4	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996685080413138	WITHOUT_CLASSIFICATION	3.3149195868611183E-4	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999575458286406	WITHOUT_CLASSIFICATION	4.245417135934622E-5	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999529979562194	WITHOUT_CLASSIFICATION	4.700204378058972E-4	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9997997643666215	WITHOUT_CLASSIFICATION	2.002356333784567E-4	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9997628934045535	WITHOUT_CLASSIFICATION	2.3710659544664986E-4	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.998967979217561	WITHOUT_CLASSIFICATION	0.0010320207824390088	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9996413488916972	WITHOUT_CLASSIFICATION	3.586511083027753E-4	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9982835511683891	WITHOUT_CLASSIFICATION	0.0017164488316109452	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9967685882067039	WITHOUT_CLASSIFICATION	0.0032314117932961284	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.99625641012927	WITHOUT_CLASSIFICATION	0.0037435898707300014	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9993121627731937	WITHOUT_CLASSIFICATION	6.87837226806305E-4	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9967685882067039	WITHOUT_CLASSIFICATION	0.0032314117932961284	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9997417749231525	WITHOUT_CLASSIFICATION	2.5822507684745234E-4	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9993685000010799	WITHOUT_CLASSIFICATION	6.314999989201426E-4	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9994496281869801	WITHOUT_CLASSIFICATION	5.503718130198794E-4	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9990535850765674	WITHOUT_CLASSIFICATION	9.464149234325864E-4	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9996366583465182	WITHOUT_CLASSIFICATION	3.633416534818171E-4	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.999818788733588	WITHOUT_CLASSIFICATION	1.8121126641206916E-4	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9995885363085846	WITHOUT_CLASSIFICATION	4.1146369141535107E-4	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998420728006707	WITHOUT_CLASSIFICATION	1.5792719932917823E-4	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9992155323660175	WITHOUT_CLASSIFICATION	7.84467633982604E-4	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9996990262654422	WITHOUT_CLASSIFICATION	3.0097373455778526E-4	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9998542598172004	WITHOUT_CLASSIFICATION	1.4574018279946502E-4	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9998540300685512	WITHOUT_CLASSIFICATION	1.4596993144884579E-4	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999319946797797	WITHOUT_CLASSIFICATION	6.800532022026149E-5	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9998878092715431	WITHOUT_CLASSIFICATION	1.1219072845688738E-4	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999156946168237	WITHOUT_CLASSIFICATION	8.430538317628034E-5	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9996779216764262	WITHOUT_CLASSIFICATION	3.220783235737548E-4	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9997836987196413	WITHOUT_CLASSIFICATION	2.16301280358724E-4	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9995135569349822	WITHOUT_CLASSIFICATION	4.86443065017834E-4	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9977392711519264	WITHOUT_CLASSIFICATION	0.002260728848073641	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9996954962023148	WITHOUT_CLASSIFICATION	3.0450379768520253E-4	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9993766694060262	WITHOUT_CLASSIFICATION	6.233305939738148E-4	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9996294502712963	WITHOUT_CLASSIFICATION	3.705497287035896E-4	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9912443242539726	WITHOUT_CLASSIFICATION	0.008755675746027364	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9977332900869259	WITHOUT_CLASSIFICATION	0.002266709913074168	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9993811861081072	WITHOUT_CLASSIFICATION	6.188138918928589E-4	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9990760603554574	WITHOUT_CLASSIFICATION	9.239396445427536E-4	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9997182167142297	WITHOUT_CLASSIFICATION	2.817832857702867E-4	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9996712081291124	WITHOUT_CLASSIFICATION	3.287918708876275E-4	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9995837226732263	WITHOUT_CLASSIFICATION	4.162773267737905E-4	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9980189304688866	WITHOUT_CLASSIFICATION	0.0019810695311134837	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9995312928373469	WITHOUT_CLASSIFICATION	4.687071626530658E-4	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9924757010411374	WITHOUT_CLASSIFICATION	0.007524298958862622	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9995415003637683	WITHOUT_CLASSIFICATION	4.584996362315712E-4	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998201101093023	WITHOUT_CLASSIFICATION	1.7988989069779712E-4	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9997719140269362	WITHOUT_CLASSIFICATION	2.2808597306382008E-4	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9998043133829773	WITHOUT_CLASSIFICATION	1.9568661702278514E-4	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9996138811258245	WITHOUT_CLASSIFICATION	3.861188741755078E-4	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9995593278957491	WITHOUT_CLASSIFICATION	4.406721042508521E-4	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9995593278957491	WITHOUT_CLASSIFICATION	4.406721042508521E-4	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9998923220960559	WITHOUT_CLASSIFICATION	1.076779039439445E-4	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9998342865177621	WITHOUT_CLASSIFICATION	1.657134822379641E-4	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9992126824856917	WITHOUT_CLASSIFICATION	7.873175143083524E-4	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9997336790561182	WITHOUT_CLASSIFICATION	2.663209438818652E-4	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999197125847029	WITHOUT_CLASSIFICATION	8.028741529707952E-5	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9995758000506821	WITHOUT_CLASSIFICATION	4.241999493177598E-4	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9995081721713344	WITHOUT_CLASSIFICATION	4.918278286656566E-4	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9998265463729579	WITHOUT_CLASSIFICATION	1.734536270421108E-4	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9998994617250607	WITHOUT_CLASSIFICATION	1.0053827493927895E-4	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999161611026457	WITHOUT_CLASSIFICATION	8.383889735430013E-5	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998268507481806	WITHOUT_CLASSIFICATION	1.7314925181944354E-4	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9995820025169397	WITHOUT_CLASSIFICATION	4.1799748306028E-4	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9974268798905668	WITHOUT_CLASSIFICATION	0.0025731201094331556	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9996093202713003	WITHOUT_CLASSIFICATION	3.9067972869971396E-4	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9998526061025519	WITHOUT_CLASSIFICATION	1.4739389744809143E-4	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999649834381208	WITHOUT_CLASSIFICATION	3.5016561879186095E-4	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999070587251713	WITHOUT_CLASSIFICATION	9.294127482870484E-5	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9992265171461505	WITHOUT_CLASSIFICATION	7.734828538495567E-4	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9939765991263182	WITHOUT_CLASSIFICATION	0.006023400873681768	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996211873837857	WITHOUT_CLASSIFICATION	3.788126162143012E-4	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995749812967325	WITHOUT_CLASSIFICATION	4.2501870326746124E-4	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996929186995437	WITHOUT_CLASSIFICATION	3.0708130045637013E-4	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9977961670347221	WITHOUT_CLASSIFICATION	0.002203832965277937	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9991609014948174	WITHOUT_CLASSIFICATION	8.390985051825205E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.999842922878908	WITHOUT_CLASSIFICATION	1.5707712109200067E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.999842922878908	WITHOUT_CLASSIFICATION	1.5707712109200067E-4	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9996225173775843	WITHOUT_CLASSIFICATION	3.774826224156759E-4	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9973132212565063	WITHOUT_CLASSIFICATION	0.0026867787434936463	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9973346224451041	WITHOUT_CLASSIFICATION	0.0026653775548960298	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996196901411931	WITHOUT_CLASSIFICATION	3.803098588069139E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9973346224451041	WITHOUT_CLASSIFICATION	0.0026653775548960298	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9990627740810918	WITHOUT_CLASSIFICATION	9.372259189081173E-4	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9995955501772426	WITHOUT_CLASSIFICATION	4.0444982275742185E-4	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.9996276276953158	WITHOUT_CLASSIFICATION	3.7237230468425834E-4	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999468619183619	WITHOUT_CLASSIFICATION	5.313808163806128E-5	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9997892955324207	WITHOUT_CLASSIFICATION	2.1070446757940402E-4	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9997985417933078	WITHOUT_CLASSIFICATION	2.0145820669221871E-4	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9997593582550341	WITHOUT_CLASSIFICATION	2.4064174496591363E-4	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9985873614136438	WITHOUT_CLASSIFICATION	0.0014126385863561502	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9998850915445922	WITHOUT_CLASSIFICATION	1.1490845540786773E-4	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999090731264361	WITHOUT_CLASSIFICATION	9.092687356392698E-5	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9994338157733458	WITHOUT_CLASSIFICATION	5.661842266541777E-4	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9997223308375952	WITHOUT_CLASSIFICATION	2.776691624048198E-4	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9996328349937372	WITHOUT_CLASSIFICATION	3.6716500626281944E-4	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9974512765362777	WITHOUT_CLASSIFICATION	0.0025487234637223124	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9985378386283994	WITHOUT_CLASSIFICATION	0.0014621613716005097	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9994399686970354	WITHOUT_CLASSIFICATION	5.600313029646033E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.999816611112223	WITHOUT_CLASSIFICATION	1.833888877770709E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.999816611112223	WITHOUT_CLASSIFICATION	1.833888877770709E-4	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9997499000398847	WITHOUT_CLASSIFICATION	2.5009996011521746E-4	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9997422020037496	WITHOUT_CLASSIFICATION	2.577979962504097E-4	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.99985563836177	WITHOUT_CLASSIFICATION	1.4436163822985104E-4	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9998361123193328	WITHOUT_CLASSIFICATION	1.638876806672058E-4	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9998502231790081	WITHOUT_CLASSIFICATION	1.497768209918957E-4	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999061911059811	WITHOUT_CLASSIFICATION	9.380889401897037E-5	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9151193476563177	WITHOUT_CLASSIFICATION	0.08488065234368224	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9993128955375721	WITHOUT_CLASSIFICATION	6.871044624279587E-4	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.9996305553613779	WITHOUT_CLASSIFICATION	3.694446386220658E-4	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999913755710034	WITHOUT_CLASSIFICATION	8.624428996586649E-5	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999825966233408	WITHOUT_CLASSIFICATION	1.740337665920079E-4	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999844736978788	WITHOUT_CLASSIFICATION	1.552630212121763E-5	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9994874257146227	WITHOUT_CLASSIFICATION	5.12574285377293E-4	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9993217761374678	WITHOUT_CLASSIFICATION	6.78223862532266E-4	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9997470961075331	WITHOUT_CLASSIFICATION	2.5290389246692937E-4	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9895349056132688	WITHOUT_CLASSIFICATION	0.010465094386731133	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9997066006157097	WITHOUT_CLASSIFICATION	2.9339938429028765E-4	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9996597994447798	WITHOUT_CLASSIFICATION	3.4020055522021657E-4	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9996744044129492	WITHOUT_CLASSIFICATION	3.255955870508295E-4	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9996485507600937	WITHOUT_CLASSIFICATION	3.5144923990622346E-4	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999173786891287	WITHOUT_CLASSIFICATION	8.262131087126456E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9978269914309814	WITHOUT_CLASSIFICATION	0.0021730085690186388	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9994499920164488	WITHOUT_CLASSIFICATION	5.500079835512329E-4	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9995932470778892	WITHOUT_CLASSIFICATION	4.067529221108215E-4	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9999079627774743	WITHOUT_CLASSIFICATION	9.203722252576827E-5	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9997957329673439	WITHOUT_CLASSIFICATION	2.0426703265611935E-4	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999758303837832	WITHOUT_CLASSIFICATION	2.4169616216800175E-4	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9991086433629284	WITHOUT_CLASSIFICATION	8.913566370716232E-4	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9998543351888975	WITHOUT_CLASSIFICATION	1.456648111025395E-4	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9987717185879615	WITHOUT_CLASSIFICATION	0.0012282814120383834	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9996091698916408	WITHOUT_CLASSIFICATION	3.908301083591775E-4	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.999962932728858	WITHOUT_CLASSIFICATION	3.7067271142051834E-5	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999867003763758	WITHOUT_CLASSIFICATION	1.3299623624202038E-4	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9996096608633837	WITHOUT_CLASSIFICATION	3.903391366164073E-4	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999530272752499	WITHOUT_CLASSIFICATION	4.6972724750176895E-5	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999149272048068	WITHOUT_CLASSIFICATION	8.507279519324671E-5	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999116410676229	WITHOUT_CLASSIFICATION	8.835893237706897E-5	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.9997585970828878	WITHOUT_CLASSIFICATION	2.4140291711223874E-4	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9994006286475725	WITHOUT_CLASSIFICATION	5.99371352427435E-4	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9978017250137541	WITHOUT_CLASSIFICATION	0.002198274986245908	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9996876417718689	WITHOUT_CLASSIFICATION	3.1235822813114694E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995637998012029	WITHOUT_CLASSIFICATION	4.362001987971077E-4	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9995085405159845	WITHOUT_CLASSIFICATION	4.914594840155186E-4	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9954820306282491	WITHOUT_CLASSIFICATION	0.004517969371750929	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9974250079254764	WITHOUT_CLASSIFICATION	0.0025749920745236194	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9986222461947197	WITHOUT_CLASSIFICATION	0.0013777538052802177	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9989891573106571	WITHOUT_CLASSIFICATION	0.001010842689342902	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999258524568154	WITHOUT_CLASSIFICATION	7.414754318457259E-5	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9995153154415848	WITHOUT_CLASSIFICATION	4.8468455841519075E-4	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9990122444654805	WITHOUT_CLASSIFICATION	9.87755534519438E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995637998012029	WITHOUT_CLASSIFICATION	4.362001987971077E-4	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999745867785635	WITHOUT_CLASSIFICATION	2.541322143649741E-4	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999647552232304	WITHOUT_CLASSIFICATION	3.524477676974432E-5	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9995864437831445	WITHOUT_CLASSIFICATION	4.135562168554584E-4	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9995499195505053	WITHOUT_CLASSIFICATION	4.5008044949458717E-4	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.999588289659139	WITHOUT_CLASSIFICATION	4.117103408609797E-4	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.999588289659139	WITHOUT_CLASSIFICATION	4.117103408609797E-4	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.99987659132021	WITHOUT_CLASSIFICATION	1.234086797900932E-4	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999402266463567	WITHOUT_CLASSIFICATION	5.97733536433059E-4	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9996462354130773	WITHOUT_CLASSIFICATION	3.537645869227691E-4	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9986427863357535	WITHOUT_CLASSIFICATION	0.0013572136642464561	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9995310363379566	WITHOUT_CLASSIFICATION	4.689636620434844E-4	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9995223672582109	WITHOUT_CLASSIFICATION	4.776327417890873E-4	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9998095339693572	WITHOUT_CLASSIFICATION	1.904660306427793E-4	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9990304904662519	WITHOUT_CLASSIFICATION	9.695095337479615E-4	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9989585139767283	WITHOUT_CLASSIFICATION	0.0010414860232716044	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9990930503926626	WITHOUT_CLASSIFICATION	9.06949607337504E-4	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.9998177153735514	WITHOUT_CLASSIFICATION	1.8228462644857984E-4	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9996000365794034	WITHOUT_CLASSIFICATION	3.9996342059655295E-4	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9994449160745875	WITHOUT_CLASSIFICATION	5.550839254123967E-4	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9996257979716093	WITHOUT_CLASSIFICATION	3.7420202839069455E-4	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9992113346126565	WITHOUT_CLASSIFICATION	7.886653873435019E-4	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997026091522164	WITHOUT_CLASSIFICATION	2.9739084778352635E-4	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9991897749247874	WITHOUT_CLASSIFICATION	8.102250752125086E-4	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9997454068688804	WITHOUT_CLASSIFICATION	2.5459313111960964E-4	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999641663136723	WITHOUT_CLASSIFICATION	3.583368632769038E-4	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9994929704983458	WITHOUT_CLASSIFICATION	5.070295016540564E-4	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999612019008721	WITHOUT_CLASSIFICATION	3.879809912776873E-5	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9989658821589811	WITHOUT_CLASSIFICATION	0.0010341178410188691	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.99822369986971	WITHOUT_CLASSIFICATION	0.001776300130290057	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996474682993768	WITHOUT_CLASSIFICATION	3.525317006231648E-4	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9997753027475978	WITHOUT_CLASSIFICATION	2.246972524021974E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999266427298625	WITHOUT_CLASSIFICATION	7.335727013749867E-5	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9981645955070791	WITHOUT_CLASSIFICATION	0.0018354044929208098	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9990009568605186	WITHOUT_CLASSIFICATION	9.99043139481408E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9992019794367452	WITHOUT_CLASSIFICATION	7.980205632548714E-4	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9987683201329446	WITHOUT_CLASSIFICATION	0.0012316798670553633	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9993522496142352	WITHOUT_CLASSIFICATION	6.477503857649202E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9992019794367452	WITHOUT_CLASSIFICATION	7.980205632548714E-4	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9993729109207017	WITHOUT_CLASSIFICATION	6.270890792982665E-4	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9990009568605186	WITHOUT_CLASSIFICATION	9.99043139481408E-4	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9994745879020839	WITHOUT_CLASSIFICATION	5.25412097916109E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9992019794367452	WITHOUT_CLASSIFICATION	7.980205632548714E-4	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998077313040137	WITHOUT_CLASSIFICATION	1.922686959863284E-4	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9997381174877027	WITHOUT_CLASSIFICATION	2.6188251229737505E-4	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999825966233408	WITHOUT_CLASSIFICATION	1.740337665920079E-4	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9994508927764736	WITHOUT_CLASSIFICATION	5.491072235264286E-4	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9996453047583224	WITHOUT_CLASSIFICATION	3.5469524167759155E-4	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9996684069078681	WITHOUT_CLASSIFICATION	3.315930921319046E-4	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9996540468263123	WITHOUT_CLASSIFICATION	3.459531736877135E-4	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9988735248258513	WITHOUT_CLASSIFICATION	0.0011264751741487395	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9998343360247359	WITHOUT_CLASSIFICATION	1.6566397526402959E-4	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9985090973033444	WITHOUT_CLASSIFICATION	0.0014909026966556187	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9996529311910086	WITHOUT_CLASSIFICATION	3.4706880899132664E-4	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9997481918248585	WITHOUT_CLASSIFICATION	2.518081751414548E-4	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9997283139772232	WITHOUT_CLASSIFICATION	2.716860227767434E-4	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9997142759797454	WITHOUT_CLASSIFICATION	2.857240202546369E-4	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9998215026451158	WITHOUT_CLASSIFICATION	1.7849735488427413E-4	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9994938765936351	WITHOUT_CLASSIFICATION	5.061234063648374E-4	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9996611939866505	WITHOUT_CLASSIFICATION	3.3880601334946057E-4	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999652754827313	WITHOUT_CLASSIFICATION	3.4724517268704163E-4	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.999688367595442	WITHOUT_CLASSIFICATION	3.1163240455792866E-4	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.999879561628669	WITHOUT_CLASSIFICATION	1.2043837133103608E-4	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9997697661673727	WITHOUT_CLASSIFICATION	2.3023383262736087E-4	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9998205864987663	WITHOUT_CLASSIFICATION	1.7941350123381258E-4	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9995957849013786	WITHOUT_CLASSIFICATION	4.0421509862142416E-4	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9996922514860024	WITHOUT_CLASSIFICATION	3.0774851399755073E-4	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9995248654349521	WITHOUT_CLASSIFICATION	4.751345650478514E-4	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.999738324343323	WITHOUT_CLASSIFICATION	2.6167565667695804E-4	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993013916127778	WITHOUT_CLASSIFICATION	6.986083872221899E-4	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996203916796157	WITHOUT_CLASSIFICATION	3.796083203842178E-4	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9956737111736889	WITHOUT_CLASSIFICATION	0.004326288826311183	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9997150952767936	WITHOUT_CLASSIFICATION	2.849047232064799E-4	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9996634980780597	WITHOUT_CLASSIFICATION	3.36501921940426E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999556841840356	WITHOUT_CLASSIFICATION	4.431581596439943E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999556841840356	WITHOUT_CLASSIFICATION	4.431581596439943E-4	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9998150276738609	WITHOUT_CLASSIFICATION	1.84972326139207E-4	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998093054804074	WITHOUT_CLASSIFICATION	1.906945195926333E-4	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9996229783586162	WITHOUT_CLASSIFICATION	3.7702164138372256E-4	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999030246142102	WITHOUT_CLASSIFICATION	9.69753857898197E-5	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9991049792018577	WITHOUT_CLASSIFICATION	8.950207981423687E-4	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9798886490638026	WITHOUT_CLASSIFICATION	0.02011135093619742	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9997105856167101	WITHOUT_CLASSIFICATION	2.8941438328986094E-4	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999839417631054	WITHOUT_CLASSIFICATION	1.60582368945961E-4	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9996057759779688	WITHOUT_CLASSIFICATION	3.9422402203116437E-4	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999425043653986	WITHOUT_CLASSIFICATION	5.7495634601477695E-5	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9998179071873508	WITHOUT_CLASSIFICATION	1.8209281264934988E-4	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999084389442923	WITHOUT_CLASSIFICATION	9.156105570774433E-5	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9976302294024904	WITHOUT_CLASSIFICATION	0.0023697705975096474	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999556841840356	WITHOUT_CLASSIFICATION	4.431581596439943E-4	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999032178570062	WITHOUT_CLASSIFICATION	9.678214299380079E-4	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9995193823683604	WITHOUT_CLASSIFICATION	4.8061763163958403E-4	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9973160851634862	WITHOUT_CLASSIFICATION	0.0026839148365137597	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9981294811609113	WITHOUT_CLASSIFICATION	0.0018705188390886964	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9997786214400924	WITHOUT_CLASSIFICATION	2.2137855990751032E-4	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9987135839854849	WITHOUT_CLASSIFICATION	0.0012864160145151541	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9996988377127036	WITHOUT_CLASSIFICATION	3.0116228729636243E-4	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9996839722359727	WITHOUT_CLASSIFICATION	3.160277640272256E-4	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999904879876973	WITHOUT_CLASSIFICATION	9.512012302699781E-5	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9993209836618523	WITHOUT_CLASSIFICATION	6.790163381477287E-4	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998014297448211	WITHOUT_CLASSIFICATION	1.9857025517893751E-4	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993013916127778	WITHOUT_CLASSIFICATION	6.986083872221899E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999556841840356	WITHOUT_CLASSIFICATION	4.431581596439943E-4	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998386411060294	WITHOUT_CLASSIFICATION	1.6135889397062426E-4	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9995135973601204	WITHOUT_CLASSIFICATION	4.864026398796393E-4	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9998661556431345	WITHOUT_CLASSIFICATION	1.3384435686539866E-4	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9995260729739016	WITHOUT_CLASSIFICATION	4.739270260983097E-4	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9996194100367964	WITHOUT_CLASSIFICATION	3.8058996320355925E-4	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9997350606755335	WITHOUT_CLASSIFICATION	2.6493932446644927E-4	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996473199360726	WITHOUT_CLASSIFICATION	3.5268006392738445E-4	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999246282798077	WITHOUT_CLASSIFICATION	7.537172019244593E-5	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9997182201961315	WITHOUT_CLASSIFICATION	2.817798038684054E-4	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9984756960538186	WITHOUT_CLASSIFICATION	0.0015243039461813553	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9985593036119075	WITHOUT_CLASSIFICATION	0.0014406963880925084	DEFECT
/	WITHOUT_CLASSIFICATION	0.9998543351888975	WITHOUT_CLASSIFICATION	1.456648111025395E-4	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9998402519861741	WITHOUT_CLASSIFICATION	1.5974801382582439E-4	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9998296800591026	WITHOUT_CLASSIFICATION	1.7031994089751354E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9990627740810918	WITHOUT_CLASSIFICATION	9.372259189081173E-4	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9985313124572708	WITHOUT_CLASSIFICATION	0.001468687542729249	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9991688973240641	WITHOUT_CLASSIFICATION	8.311026759358494E-4	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9991573822012291	WITHOUT_CLASSIFICATION	8.426177987709139E-4	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.9999207201720955	WITHOUT_CLASSIFICATION	7.927982790444861E-5	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9997353302857142	WITHOUT_CLASSIFICATION	2.6466971428588324E-4	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999686307204117	WITHOUT_CLASSIFICATION	3.136927958830777E-4	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999686307204117	WITHOUT_CLASSIFICATION	3.136927958830777E-4	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9996767902967472	WITHOUT_CLASSIFICATION	3.232097032528029E-4	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9975921269821024	WITHOUT_CLASSIFICATION	0.0024078730178976695	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9997492669457748	WITHOUT_CLASSIFICATION	2.507330542251636E-4	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9996339993890806	WITHOUT_CLASSIFICATION	3.660006109194465E-4	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9990150832901851	WITHOUT_CLASSIFICATION	9.849167098149418E-4	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.999786255559281	WITHOUT_CLASSIFICATION	2.1374444071899735E-4	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9989020571138956	WITHOUT_CLASSIFICATION	0.001097942886104471	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9940299354308548	WITHOUT_CLASSIFICATION	0.005970064569145169	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9940299354308548	WITHOUT_CLASSIFICATION	0.005970064569145169	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9984520765655516	WITHOUT_CLASSIFICATION	0.0015479234344484216	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9995245902338888	WITHOUT_CLASSIFICATION	4.7540976611123455E-4	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9994286522052245	WITHOUT_CLASSIFICATION	5.713477947755118E-4	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996389933931586	WITHOUT_CLASSIFICATION	3.610066068414313E-4	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996389933931586	WITHOUT_CLASSIFICATION	3.610066068414313E-4	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996389933931586	WITHOUT_CLASSIFICATION	3.610066068414313E-4	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9996498986627514	WITHOUT_CLASSIFICATION	3.50101337248474E-4	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9997743537560918	WITHOUT_CLASSIFICATION	2.256462439080755E-4	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9996890032851528	WITHOUT_CLASSIFICATION	3.109967148472766E-4	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999540849965989	WITHOUT_CLASSIFICATION	4.591500340108237E-5	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9994817787073925	WITHOUT_CLASSIFICATION	5.182212926075807E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999556841840356	WITHOUT_CLASSIFICATION	4.431581596439943E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999556841840356	WITHOUT_CLASSIFICATION	4.431581596439943E-4	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999023570580757	WITHOUT_CLASSIFICATION	9.764294192438267E-5	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9997118224774678	WITHOUT_CLASSIFICATION	2.8817752253208686E-4	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9901657975766583	WITHOUT_CLASSIFICATION	0.00983420242334164	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9996195104319662	WITHOUT_CLASSIFICATION	3.8048956803379716E-4	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999880276863532	WITHOUT_CLASSIFICATION	1.1972313646814129E-4	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.9995493802734184	WITHOUT_CLASSIFICATION	4.506197265815824E-4	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9998291107357395	WITHOUT_CLASSIFICATION	1.708892642605146E-4	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9995191467503104	WITHOUT_CLASSIFICATION	4.808532496895996E-4	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999512828235408	WITHOUT_CLASSIFICATION	4.8717176459178115E-5	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999179045200389	WITHOUT_CLASSIFICATION	8.209547996107504E-5	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9998586678637607	WITHOUT_CLASSIFICATION	1.413321362394507E-4	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9995217068894104	WITHOUT_CLASSIFICATION	4.782931105895795E-4	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9997674749907153	WITHOUT_CLASSIFICATION	2.3252500928482763E-4	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9997674749907153	WITHOUT_CLASSIFICATION	2.3252500928482763E-4	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9997674749907153	WITHOUT_CLASSIFICATION	2.3252500928482763E-4	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9997674749907153	WITHOUT_CLASSIFICATION	2.3252500928482763E-4	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9997674749907153	WITHOUT_CLASSIFICATION	2.3252500928482763E-4	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9996319224300529	WITHOUT_CLASSIFICATION	3.68077569947123E-4	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9996319224300529	WITHOUT_CLASSIFICATION	3.68077569947123E-4	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9996319224300529	WITHOUT_CLASSIFICATION	3.68077569947123E-4	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9996319224300529	WITHOUT_CLASSIFICATION	3.68077569947123E-4	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9991669309990592	WITHOUT_CLASSIFICATION	8.330690009407663E-4	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999686307204117	WITHOUT_CLASSIFICATION	3.136927958830777E-4	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999625045182436	WITHOUT_CLASSIFICATION	3.749548175640597E-4	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9996319224300529	WITHOUT_CLASSIFICATION	3.68077569947123E-4	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9865030849822475	WITHOUT_CLASSIFICATION	0.013496915017752463	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9998241663863751	WITHOUT_CLASSIFICATION	1.7583361362488817E-4	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9997439706993599	WITHOUT_CLASSIFICATION	2.5602930064015785E-4	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9997652966335533	WITHOUT_CLASSIFICATION	2.3470336644682477E-4	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999612304368657	WITHOUT_CLASSIFICATION	3.876956313431044E-5	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9997046327319138	WITHOUT_CLASSIFICATION	2.9536726808618915E-4	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999570322396717	WITHOUT_CLASSIFICATION	4.296776032836333E-5	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999828328077212	WITHOUT_CLASSIFICATION	1.7167192278753107E-5	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9998502793862976	WITHOUT_CLASSIFICATION	1.4972061370231206E-4	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9953257416193944	WITHOUT_CLASSIFICATION	0.004674258380605643	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999701394249207	WITHOUT_CLASSIFICATION	2.986057507921564E-5	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9998359298379792	WITHOUT_CLASSIFICATION	1.640701620209168E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9998552305385929	WITHOUT_CLASSIFICATION	1.4476946140703343E-4	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.999543360277323	WITHOUT_CLASSIFICATION	4.5663972267694124E-4	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9996192412035168	WITHOUT_CLASSIFICATION	3.8075879648314997E-4	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9994217700699024	WITHOUT_CLASSIFICATION	5.782299300975386E-4	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999804453846666	WITHOUT_CLASSIFICATION	1.9554615333392035E-4	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996646797771678	WITHOUT_CLASSIFICATION	3.353202228321941E-4	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996646797771678	WITHOUT_CLASSIFICATION	3.353202228321941E-4	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.9996983289699881	WITHOUT_CLASSIFICATION	3.0167103001187124E-4	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9995506677530777	WITHOUT_CLASSIFICATION	4.493322469223248E-4	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9996897048307717	WITHOUT_CLASSIFICATION	3.1029516922824213E-4	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9997495663558043	WITHOUT_CLASSIFICATION	2.5043364419577696E-4	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9991541760801876	WITHOUT_CLASSIFICATION	8.458239198124189E-4	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999025522351273	WITHOUT_CLASSIFICATION	9.744776487270321E-5	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9996447316721926	WITHOUT_CLASSIFICATION	3.552683278074412E-4	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999853350386569	WITHOUT_CLASSIFICATION	1.466496134309636E-4	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9997992357593116	WITHOUT_CLASSIFICATION	2.007642406883834E-4	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998634645606705	WITHOUT_CLASSIFICATION	1.3653543932945215E-4	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9982224586274405	WITHOUT_CLASSIFICATION	0.0017775413725594586	DEFECT
/	WITHOUT_CLASSIFICATION	0.9998543351888975	WITHOUT_CLASSIFICATION	1.456648111025395E-4	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9996618156618662	WITHOUT_CLASSIFICATION	3.381843381337877E-4	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9986336900549607	WITHOUT_CLASSIFICATION	0.0013663099450392602	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9996919144340907	WITHOUT_CLASSIFICATION	3.080855659093277E-4	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9997535945125257	WITHOUT_CLASSIFICATION	2.464054874743947E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9993808368335064	WITHOUT_CLASSIFICATION	6.191631664935973E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9993808368335064	WITHOUT_CLASSIFICATION	6.191631664935973E-4	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9984737488549666	WITHOUT_CLASSIFICATION	0.0015262511450333167	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999644476458952	WITHOUT_CLASSIFICATION	3.555235410483256E-5	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9997703919443247	WITHOUT_CLASSIFICATION	2.2960805567540606E-4	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9998549574975455	WITHOUT_CLASSIFICATION	1.4504250245447856E-4	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9997583713171885	WITHOUT_CLASSIFICATION	2.4162868281163752E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9996533245533012	WITHOUT_CLASSIFICATION	3.4667544669873417E-4	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9993768483011558	WITHOUT_CLASSIFICATION	6.231516988441301E-4	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9966958679097614	WITHOUT_CLASSIFICATION	0.003304132090238556	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996493003955114	WITHOUT_CLASSIFICATION	3.506996044886178E-4	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9987169237420603	WITHOUT_CLASSIFICATION	0.0012830762579396128	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9988633278032187	WITHOUT_CLASSIFICATION	0.0011366721967812849	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9966958679097614	WITHOUT_CLASSIFICATION	0.003304132090238556	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999909245468828	WITHOUT_CLASSIFICATION	9.075453117200004E-5	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9972104788385207	WITHOUT_CLASSIFICATION	0.002789521161479414	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999472734702854	WITHOUT_CLASSIFICATION	5.2726529714456845E-5	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.9983212103573671	WITHOUT_CLASSIFICATION	0.0016787896426328495	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9990518852371844	WITHOUT_CLASSIFICATION	9.481147628155737E-4	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999771350825651	WITHOUT_CLASSIFICATION	2.2864917434903023E-4	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9994788111644843	WITHOUT_CLASSIFICATION	5.211888355156756E-4	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9991857459250127	WITHOUT_CLASSIFICATION	8.142540749873249E-4	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9997095895821567	WITHOUT_CLASSIFICATION	2.904104178432955E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.994295337114993	WITHOUT_CLASSIFICATION	0.005704662885007145	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9997497881532807	WITHOUT_CLASSIFICATION	2.502118467193415E-4	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9994335274512207	WITHOUT_CLASSIFICATION	5.664725487791755E-4	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9994307686906986	WITHOUT_CLASSIFICATION	5.692313093014935E-4	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9997917879455636	WITHOUT_CLASSIFICATION	2.0821205443643913E-4	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999747787906203	WITHOUT_CLASSIFICATION	2.5221209379692745E-4	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999209719361529	WITHOUT_CLASSIFICATION	7.90280638470801E-5	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9997884505571998	WITHOUT_CLASSIFICATION	2.1154944280023542E-4	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9985398330231534	WITHOUT_CLASSIFICATION	0.0014601669768466489	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9985398330231534	WITHOUT_CLASSIFICATION	0.0014601669768466489	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9994788111644843	WITHOUT_CLASSIFICATION	5.211888355156756E-4	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9959406667334714	WITHOUT_CLASSIFICATION	0.0040593332665286195	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9994227312171388	WITHOUT_CLASSIFICATION	5.772687828613388E-4	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9995031691713145	WITHOUT_CLASSIFICATION	4.968308286854747E-4	DEFECT
#2	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9998125317774265	WITHOUT_CLASSIFICATION	1.8746822257343837E-4	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9994890825854343	WITHOUT_CLASSIFICATION	5.109174145656756E-4	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9994217158320398	WITHOUT_CLASSIFICATION	5.782841679603029E-4	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9994773202995038	WITHOUT_CLASSIFICATION	5.226797004962895E-4	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999346401508073	WITHOUT_CLASSIFICATION	6.535984919269755E-4	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9997658588793658	WITHOUT_CLASSIFICATION	2.341411206341916E-4	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9995189569785089	WITHOUT_CLASSIFICATION	4.810430214911011E-4	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9961816953103532	WITHOUT_CLASSIFICATION	0.0038183046896468568	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9984962208240042	WITHOUT_CLASSIFICATION	0.0015037791759957013	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999218123038083	WITHOUT_CLASSIFICATION	7.818769619172862E-5	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998598848381736	WITHOUT_CLASSIFICATION	1.4011516182646703E-4	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9996324001305856	WITHOUT_CLASSIFICATION	3.6759986941438687E-4	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999459654227268	WITHOUT_CLASSIFICATION	5.403457727312057E-5	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9995279211124152	WITHOUT_CLASSIFICATION	4.720788875848674E-4	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9992218760954801	WITHOUT_CLASSIFICATION	7.781239045198518E-4	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9998368164138435	WITHOUT_CLASSIFICATION	1.6318358615654335E-4	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9993829522863178	WITHOUT_CLASSIFICATION	6.170477136821675E-4	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9979465748683203	WITHOUT_CLASSIFICATION	0.0020534251316797186	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9990533414028877	WITHOUT_CLASSIFICATION	9.466585971124021E-4	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999821331160764	WITHOUT_CLASSIFICATION	1.7866883923592418E-4	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999638665859106	WITHOUT_CLASSIFICATION	3.613341408941244E-5	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9995450413590159	WITHOUT_CLASSIFICATION	4.549586409839837E-4	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999726930441434	WITHOUT_CLASSIFICATION	2.7306955856600505E-4	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998886823176568	WITHOUT_CLASSIFICATION	1.1131768234320477E-4	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999200160782515	WITHOUT_CLASSIFICATION	7.998392174842078E-5	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9992040091928579	WITHOUT_CLASSIFICATION	7.95990807142018E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995041917392722	WITHOUT_CLASSIFICATION	4.958082607278663E-4	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9998598848381736	WITHOUT_CLASSIFICATION	1.4011516182646703E-4	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9997215267230962	WITHOUT_CLASSIFICATION	2.784732769036906E-4	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9997792877467747	WITHOUT_CLASSIFICATION	2.207122532253441E-4	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9995104741568668	WITHOUT_CLASSIFICATION	4.895258431331249E-4	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9992793925312272	WITHOUT_CLASSIFICATION	7.206074687727786E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9962048864493894	WITHOUT_CLASSIFICATION	0.0037951135506106193	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9996900787977475	WITHOUT_CLASSIFICATION	3.099212022524809E-4	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9993845191006926	WITHOUT_CLASSIFICATION	6.154808993072873E-4	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9995644297242696	WITHOUT_CLASSIFICATION	4.355702757303637E-4	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9988920040441829	WITHOUT_CLASSIFICATION	0.0011079959558171534	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9997700813841911	WITHOUT_CLASSIFICATION	2.2991861580890313E-4	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.9991959535025129	WITHOUT_CLASSIFICATION	8.040464974870875E-4	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9843203459066873	WITHOUT_CLASSIFICATION	0.015679654093312692	DEFECT
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.999695247060919	WITHOUT_CLASSIFICATION	3.0475293908103677E-4	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9990769293227062	WITHOUT_CLASSIFICATION	9.230706772937793E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995041917392722	WITHOUT_CLASSIFICATION	4.958082607278663E-4	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9997754372179318	WITHOUT_CLASSIFICATION	2.2456278206827059E-4	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9991030538291037	WITHOUT_CLASSIFICATION	8.969461708962863E-4	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9994906431308499	WITHOUT_CLASSIFICATION	5.093568691500387E-4	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9995431044180081	WITHOUT_CLASSIFICATION	4.5689558199192874E-4	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9995560188104757	WITHOUT_CLASSIFICATION	4.439811895242919E-4	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9994840925330637	WITHOUT_CLASSIFICATION	5.159074669361834E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996493003955114	WITHOUT_CLASSIFICATION	3.506996044886178E-4	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999837958081669	WITHOUT_CLASSIFICATION	1.6204191833184804E-5	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998598848381736	WITHOUT_CLASSIFICATION	1.4011516182646703E-4	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9997935732257687	WITHOUT_CLASSIFICATION	2.0642677423131085E-4	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9997611687416394	WITHOUT_CLASSIFICATION	2.3883125836058312E-4	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9995465586881487	WITHOUT_CLASSIFICATION	4.5344131185136175E-4	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9995447296733786	WITHOUT_CLASSIFICATION	4.552703266214051E-4	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998663990109536	WITHOUT_CLASSIFICATION	1.336009890463695E-4	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.999919235210526	WITHOUT_CLASSIFICATION	8.07647894739749E-5	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9983175996462457	WITHOUT_CLASSIFICATION	0.0016824003537544035	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9996897516704594	WITHOUT_CLASSIFICATION	3.1024832954073015E-4	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9139942372291506	WITHOUT_CLASSIFICATION	0.08600576277084938	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9923896779982367	WITHOUT_CLASSIFICATION	0.007610322001763287	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9995764581047406	WITHOUT_CLASSIFICATION	4.2354189525937194E-4	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9998793367563378	WITHOUT_CLASSIFICATION	1.2066324366217306E-4	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.998756862014461	WITHOUT_CLASSIFICATION	0.0012431379855389654	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.998756862014461	WITHOUT_CLASSIFICATION	0.0012431379855389654	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999716083742771	WITHOUT_CLASSIFICATION	2.839162572297958E-5	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9993657065928112	WITHOUT_CLASSIFICATION	6.342934071887347E-4	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9990094906548876	WITHOUT_CLASSIFICATION	9.905093451123871E-4	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9992675431476385	WITHOUT_CLASSIFICATION	7.324568523613759E-4	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9998408787924047	WITHOUT_CLASSIFICATION	1.5912120759532745E-4	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9994777052682892	WITHOUT_CLASSIFICATION	5.222947317108424E-4	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9994226856391448	WITHOUT_CLASSIFICATION	5.773143608552219E-4	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9991879566201087	WITHOUT_CLASSIFICATION	8.120433798912763E-4	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.99979898637881	WITHOUT_CLASSIFICATION	2.0101362118983023E-4	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.9994528933559106	WITHOUT_CLASSIFICATION	5.471066440894733E-4	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.9994528933559106	WITHOUT_CLASSIFICATION	5.471066440894733E-4	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9991341114120622	WITHOUT_CLASSIFICATION	8.658885879377789E-4	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9989358888776029	WITHOUT_CLASSIFICATION	0.0010641111223971273	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998476565477625	WITHOUT_CLASSIFICATION	1.523434522374848E-4	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9994335474771782	WITHOUT_CLASSIFICATION	5.66452522821838E-4	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9995969093222461	WITHOUT_CLASSIFICATION	4.030906777538289E-4	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9975474885844178	WITHOUT_CLASSIFICATION	0.0024525114155821994	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9995892560065825	WITHOUT_CLASSIFICATION	4.1074399341744914E-4	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9924165548520325	WITHOUT_CLASSIFICATION	0.007583445147967471	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9995432756868907	WITHOUT_CLASSIFICATION	4.5672431310924387E-4	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.998915743582671	WITHOUT_CLASSIFICATION	0.0010842564173290214	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9990648123874866	WITHOUT_CLASSIFICATION	9.351876125135753E-4	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9996086267335877	WITHOUT_CLASSIFICATION	3.913732664122331E-4	DEFECT
implied	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9998193617643897	WITHOUT_CLASSIFICATION	1.8063823561030636E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9997519683313335	WITHOUT_CLASSIFICATION	2.480316686664495E-4	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.997795534424105	WITHOUT_CLASSIFICATION	0.0022044655758951086	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997424095766193	WITHOUT_CLASSIFICATION	2.575904233806859E-4	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993781506359054	WITHOUT_CLASSIFICATION	6.21849364094655E-4	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9994366221588902	WITHOUT_CLASSIFICATION	5.633778411098193E-4	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.999607572881552	WITHOUT_CLASSIFICATION	3.9242711844800833E-4	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.999484580067923	WITHOUT_CLASSIFICATION	5.15419932077002E-4	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9998922852345651	WITHOUT_CLASSIFICATION	1.0771476543494322E-4	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9979174812559022	WITHOUT_CLASSIFICATION	0.002082518744097788	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9998450049124341	WITHOUT_CLASSIFICATION	1.5499508756585363E-4	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999006235128252	WITHOUT_CLASSIFICATION	9.937648717484366E-5	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9997780632413222	WITHOUT_CLASSIFICATION	2.2193675867779227E-4	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9995360157566067	WITHOUT_CLASSIFICATION	4.6398424339339633E-4	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996160222234458	WITHOUT_CLASSIFICATION	3.839777765541435E-4	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9995884311805371	WITHOUT_CLASSIFICATION	4.115688194629243E-4	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9997718624656292	WITHOUT_CLASSIFICATION	2.281375343707145E-4	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.99962415124928	WITHOUT_CLASSIFICATION	3.758487507200381E-4	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999598758574684	WITHOUT_CLASSIFICATION	4.012414253159367E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.8846039344834309	WITHOUT_CLASSIFICATION	0.11539606551656913	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9989654497683867	WITHOUT_CLASSIFICATION	0.0010345502316133225	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999799644507406	WITHOUT_CLASSIFICATION	2.0035549259389134E-5	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9993615871560171	WITHOUT_CLASSIFICATION	6.384128439829655E-4	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996262770298022	WITHOUT_CLASSIFICATION	3.7372297019774056E-4	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999813391370731	WITHOUT_CLASSIFICATION	1.866086292691483E-5	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9996867088359067	WITHOUT_CLASSIFICATION	3.132911640931869E-4	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9995417710339808	WITHOUT_CLASSIFICATION	4.582289660192213E-4	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9997725624808865	WITHOUT_CLASSIFICATION	2.2743751911357847E-4	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9998214055498594	WITHOUT_CLASSIFICATION	1.7859445014052462E-4	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999142551641436	WITHOUT_CLASSIFICATION	8.574483585641157E-4	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9996830740735154	WITHOUT_CLASSIFICATION	3.169259264844705E-4	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9996251940806685	WITHOUT_CLASSIFICATION	3.7480591933145447E-4	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9996012053521834	WITHOUT_CLASSIFICATION	3.9879464781653664E-4	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9993995388421901	WITHOUT_CLASSIFICATION	6.004611578099464E-4	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9998662808721301	WITHOUT_CLASSIFICATION	1.3371912786995234E-4	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9996275935039127	WITHOUT_CLASSIFICATION	3.724064960872554E-4	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9997403846306564	WITHOUT_CLASSIFICATION	2.59615369343632E-4	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9997201360533573	WITHOUT_CLASSIFICATION	2.7986394664263607E-4	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9989736379260775	WITHOUT_CLASSIFICATION	0.001026362073922514	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9986074262857924	WITHOUT_CLASSIFICATION	0.0013925737142075905	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996658242017147	WITHOUT_CLASSIFICATION	3.341757982853744E-4	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9997008487631942	WITHOUT_CLASSIFICATION	2.9915123680586826E-4	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996658242017147	WITHOUT_CLASSIFICATION	3.341757982853744E-4	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9989106580964588	WITHOUT_CLASSIFICATION	0.0010893419035411505	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9994712223201743	WITHOUT_CLASSIFICATION	5.28777679825847E-4	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9997338602089358	WITHOUT_CLASSIFICATION	2.661397910641889E-4	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998136582687331	WITHOUT_CLASSIFICATION	1.8634173126689808E-4	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9994479414842524	WITHOUT_CLASSIFICATION	5.520585157476719E-4	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9997338602089358	WITHOUT_CLASSIFICATION	2.661397910641889E-4	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9998733772852912	WITHOUT_CLASSIFICATION	1.2662271470876906E-4	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9994352334783764	WITHOUT_CLASSIFICATION	5.647665216236643E-4	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998140610699865	WITHOUT_CLASSIFICATION	1.859389300134628E-4	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9992305584268797	WITHOUT_CLASSIFICATION	7.694415731204341E-4	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999094941625032	WITHOUT_CLASSIFICATION	9.050583749682935E-5	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9996119590824825	WITHOUT_CLASSIFICATION	3.8804091751759074E-4	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9998840432709948	WITHOUT_CLASSIFICATION	1.159567290051225E-4	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9988441380278376	WITHOUT_CLASSIFICATION	0.001155861972162382	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9990471303439977	WITHOUT_CLASSIFICATION	9.528696560023601E-4	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9996196293806818	WITHOUT_CLASSIFICATION	3.8037061931824127E-4	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999775298529338	WITHOUT_CLASSIFICATION	2.2470147066191846E-4	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9997918467123745	WITHOUT_CLASSIFICATION	2.081532876253587E-4	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999722988127473	WITHOUT_CLASSIFICATION	2.770118725270009E-4	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9997796901639627	WITHOUT_CLASSIFICATION	2.203098360371881E-4	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9998937645341439	WITHOUT_CLASSIFICATION	1.062354658560704E-4	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9995673174484807	WITHOUT_CLASSIFICATION	4.3268255151925864E-4	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9989557914141737	WITHOUT_CLASSIFICATION	0.0010442085858263573	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9887106803033175	WITHOUT_CLASSIFICATION	0.011289319696682535	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9995827321211339	WITHOUT_CLASSIFICATION	4.172678788660835E-4	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993971988558358	WITHOUT_CLASSIFICATION	6.028011441641844E-4	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9997499181682558	WITHOUT_CLASSIFICATION	2.500818317443258E-4	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9997531031980117	WITHOUT_CLASSIFICATION	2.468968019883794E-4	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9995354370965536	WITHOUT_CLASSIFICATION	4.6456290344640104E-4	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9983644762596929	WITHOUT_CLASSIFICATION	0.0016355237403070171	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9997766494442423	WITHOUT_CLASSIFICATION	2.233505557577154E-4	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9929146417367322	WITHOUT_CLASSIFICATION	0.007085358263267884	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9992963520849871	WITHOUT_CLASSIFICATION	7.036479150128412E-4	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9997221995731442	WITHOUT_CLASSIFICATION	2.778004268558334E-4	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.9996030327137425	WITHOUT_CLASSIFICATION	3.969672862575866E-4	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.9996487895843402	WITHOUT_CLASSIFICATION	3.512104156598493E-4	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9995354370965536	WITHOUT_CLASSIFICATION	4.6456290344640104E-4	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999529979562194	WITHOUT_CLASSIFICATION	4.700204378058972E-4	DEFECT
an association	WITHOUT_CLASSIFICATION	0.9998223614244616	WITHOUT_CLASSIFICATION	1.776385755384813E-4	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9997435055305347	WITHOUT_CLASSIFICATION	2.5649446946524496E-4	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9861399948474323	WITHOUT_CLASSIFICATION	0.013860005152567648	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993971988558358	WITHOUT_CLASSIFICATION	6.028011441641844E-4	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.9996207443772223	WITHOUT_CLASSIFICATION	3.792556227777474E-4	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9994453998336401	WITHOUT_CLASSIFICATION	5.5460016635992E-4	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9992747741221715	WITHOUT_CLASSIFICATION	7.252258778286043E-4	DEFECT
special case	WITHOUT_CLASSIFICATION	0.9992050385656431	WITHOUT_CLASSIFICATION	7.94961434356886E-4	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9998047029435115	WITHOUT_CLASSIFICATION	1.9529705648849702E-4	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9998228515177588	WITHOUT_CLASSIFICATION	1.7714848224114702E-4	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9995943810525337	WITHOUT_CLASSIFICATION	4.0561894746631916E-4	DEFECT
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9995827321211339	WITHOUT_CLASSIFICATION	4.172678788660835E-4	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9989636653807973	WITHOUT_CLASSIFICATION	0.0010363346192026445	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.9997261601734817	WITHOUT_CLASSIFICATION	2.738398265183509E-4	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999761615893932	WITHOUT_CLASSIFICATION	2.3838410606865957E-5	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9998550702430875	WITHOUT_CLASSIFICATION	1.4492975691253248E-4	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9991361246003515	WITHOUT_CLASSIFICATION	8.638753996485851E-4	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9998376488675411	WITHOUT_CLASSIFICATION	1.623511324588231E-4	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998005349214933	WITHOUT_CLASSIFICATION	1.9946507850653088E-4	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.999806083473537	WITHOUT_CLASSIFICATION	1.93916526462859E-4	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9995647200675166	WITHOUT_CLASSIFICATION	4.3527993248346697E-4	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9986564116624889	WITHOUT_CLASSIFICATION	0.0013435883375111227	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9988951117650028	WITHOUT_CLASSIFICATION	0.0011048882349972895	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9980566963053635	WITHOUT_CLASSIFICATION	0.0019433036946364885	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9995049682124397	WITHOUT_CLASSIFICATION	4.950317875603239E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9995049682124397	WITHOUT_CLASSIFICATION	4.950317875603239E-4	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997510281138763	WITHOUT_CLASSIFICATION	2.4897188612367727E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9995049682124397	WITHOUT_CLASSIFICATION	4.950317875603239E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9995049682124397	WITHOUT_CLASSIFICATION	4.950317875603239E-4	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9997646857981991	WITHOUT_CLASSIFICATION	2.3531420180084102E-4	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9995484469676423	WITHOUT_CLASSIFICATION	4.515530323576831E-4	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9995606898287814	WITHOUT_CLASSIFICATION	4.393101712185541E-4	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9995606898287814	WITHOUT_CLASSIFICATION	4.393101712185541E-4	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9978248893742507	WITHOUT_CLASSIFICATION	0.0021751106257491964	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9995687552300143	WITHOUT_CLASSIFICATION	4.312447699856419E-4	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9996398333785435	WITHOUT_CLASSIFICATION	3.6016662145651557E-4	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.99995592103393	WITHOUT_CLASSIFICATION	4.4078966069989055E-5	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9996209111987899	WITHOUT_CLASSIFICATION	3.7908880121008664E-4	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.999337608187053	WITHOUT_CLASSIFICATION	6.62391812947074E-4	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9995276560900253	WITHOUT_CLASSIFICATION	4.723439099748082E-4	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9997656835027875	WITHOUT_CLASSIFICATION	2.343164972125251E-4	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9995933747077468	WITHOUT_CLASSIFICATION	4.066252922531586E-4	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9968199801801638	WITHOUT_CLASSIFICATION	0.003180019819836074	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999937344095034	WITHOUT_CLASSIFICATION	6.265590496595355E-5	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.998966457718817	WITHOUT_CLASSIFICATION	0.0010335422811830442	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9996225173775843	WITHOUT_CLASSIFICATION	3.774826224156759E-4	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998690760553919	WITHOUT_CLASSIFICATION	1.3092394460805214E-4	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999163789286459	WITHOUT_CLASSIFICATION	8.362107135411487E-5	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9968399666072162	WITHOUT_CLASSIFICATION	0.0031600333927837964	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999408084940618	WITHOUT_CLASSIFICATION	5.9191505938320925E-5	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.999463497654235	WITHOUT_CLASSIFICATION	5.365023457649506E-4	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9996225173775843	WITHOUT_CLASSIFICATION	3.774826224156759E-4	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9997499181682558	WITHOUT_CLASSIFICATION	2.500818317443258E-4	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.9996956168036985	WITHOUT_CLASSIFICATION	3.043831963014664E-4	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9973209812624637	WITHOUT_CLASSIFICATION	0.0026790187375363653	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.996817281098961	WITHOUT_CLASSIFICATION	0.0031827189010390916	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9994145943075766	WITHOUT_CLASSIFICATION	5.854056924233709E-4	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998183499561947	WITHOUT_CLASSIFICATION	1.816500438052974E-4	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.999337608187053	WITHOUT_CLASSIFICATION	6.62391812947074E-4	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9996203610112505	WITHOUT_CLASSIFICATION	3.7963898874941097E-4	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9996844162781483	WITHOUT_CLASSIFICATION	3.1558372185162093E-4	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998511056708398	WITHOUT_CLASSIFICATION	1.4889432916031982E-4	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.9996341520369987	WITHOUT_CLASSIFICATION	3.65847963001367E-4	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998254004145763	WITHOUT_CLASSIFICATION	1.745995854235974E-4	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9998754217128092	WITHOUT_CLASSIFICATION	1.2457828719076937E-4	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998363656549303	WITHOUT_CLASSIFICATION	1.636343450696938E-4	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9984205867745412	WITHOUT_CLASSIFICATION	0.0015794132254588293	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9998766377157198	WITHOUT_CLASSIFICATION	1.2336228428027363E-4	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.9997608350595512	WITHOUT_CLASSIFICATION	2.3916494044890459E-4	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998244951653091	WITHOUT_CLASSIFICATION	1.755048346908358E-4	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9986518742765692	WITHOUT_CLASSIFICATION	0.0013481257234307749	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9995451109276411	WITHOUT_CLASSIFICATION	4.548890723589168E-4	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9996661423163106	WITHOUT_CLASSIFICATION	3.3385768368940035E-4	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9996820068033322	WITHOUT_CLASSIFICATION	3.1799319666783E-4	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9993228908559615	WITHOUT_CLASSIFICATION	6.771091440384631E-4	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9996844162781483	WITHOUT_CLASSIFICATION	3.1558372185162093E-4	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.9996970376309604	WITHOUT_CLASSIFICATION	3.0296236903966264E-4	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9995142568616268	WITHOUT_CLASSIFICATION	4.8574313837327504E-4	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999799322312201	WITHOUT_CLASSIFICATION	2.0067768779897616E-4	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9997680515609796	WITHOUT_CLASSIFICATION	2.319484390204059E-4	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995041917392722	WITHOUT_CLASSIFICATION	4.958082607278663E-4	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.99955787135932	WITHOUT_CLASSIFICATION	4.421286406800189E-4	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9991734568240065	WITHOUT_CLASSIFICATION	8.265431759934782E-4	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.99955787135932	WITHOUT_CLASSIFICATION	4.421286406800189E-4	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.9995915917187888	WITHOUT_CLASSIFICATION	4.0840828121121314E-4	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9997832708099974	WITHOUT_CLASSIFICATION	2.1672919000264833E-4	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9979882032347602	WITHOUT_CLASSIFICATION	0.002011796765239734	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999203683298776	WITHOUT_CLASSIFICATION	7.963167012242353E-5	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9997938032236943	WITHOUT_CLASSIFICATION	2.0619677630565029E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9995850528743826	WITHOUT_CLASSIFICATION	4.149471256174833E-4	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9996013665652841	WITHOUT_CLASSIFICATION	3.986334347160021E-4	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998869457296842	WITHOUT_CLASSIFICATION	1.1305427031572798E-4	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9997832708099974	WITHOUT_CLASSIFICATION	2.1672919000264833E-4	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9998687371583579	WITHOUT_CLASSIFICATION	1.3126284164209685E-4	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9961020254766951	WITHOUT_CLASSIFICATION	0.0038979745233049604	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9997795490360545	WITHOUT_CLASSIFICATION	2.2045096394553135E-4	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998932727581187	WITHOUT_CLASSIFICATION	1.0672724188134251E-4	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9995245902338888	WITHOUT_CLASSIFICATION	4.7540976611123455E-4	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9997558823540103	WITHOUT_CLASSIFICATION	2.4411764598969465E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9995850528743826	WITHOUT_CLASSIFICATION	4.149471256174833E-4	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9995251251977008	WITHOUT_CLASSIFICATION	4.7487480229918994E-4	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996255652916513	WITHOUT_CLASSIFICATION	3.7443470834867484E-4	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996124352473096	WITHOUT_CLASSIFICATION	3.875647526904401E-4	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999578515256599	WITHOUT_CLASSIFICATION	4.214847434010673E-4	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999578515256599	WITHOUT_CLASSIFICATION	4.214847434010673E-4	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999578515256599	WITHOUT_CLASSIFICATION	4.214847434010673E-4	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998432625314695	WITHOUT_CLASSIFICATION	1.5673746853050283E-4	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998432625314695	WITHOUT_CLASSIFICATION	1.5673746853050283E-4	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9995099677026607	WITHOUT_CLASSIFICATION	4.900322973393286E-4	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999532449509524	WITHOUT_CLASSIFICATION	4.675504904769508E-5	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.999588742792684	WITHOUT_CLASSIFICATION	4.1125720731611105E-4	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9986346678628623	WITHOUT_CLASSIFICATION	0.0013653321371378065	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995041917392722	WITHOUT_CLASSIFICATION	4.958082607278663E-4	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9996169252375093	WITHOUT_CLASSIFICATION	3.830747624907298E-4	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996219522464236	WITHOUT_CLASSIFICATION	3.780477535764382E-4	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995041917392722	WITHOUT_CLASSIFICATION	4.958082607278663E-4	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9998017036670129	WITHOUT_CLASSIFICATION	1.982963329871208E-4	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999807490625776	WITHOUT_CLASSIFICATION	1.9250937422396908E-4	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999068531746124	WITHOUT_CLASSIFICATION	9.314682538756085E-5	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9955165737233737	WITHOUT_CLASSIFICATION	0.004483426276626424	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998071012698638	WITHOUT_CLASSIFICATION	1.9289873013623405E-4	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9998073607901958	WITHOUT_CLASSIFICATION	1.9263920980403752E-4	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9998329031774833	WITHOUT_CLASSIFICATION	1.6709682251671794E-4	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9997993921014124	WITHOUT_CLASSIFICATION	2.0060789858759496E-4	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9989420028102982	WITHOUT_CLASSIFICATION	0.001057997189701796	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9989888380393617	WITHOUT_CLASSIFICATION	0.0010111619606383059	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9996060722683406	WITHOUT_CLASSIFICATION	3.9392773165936333E-4	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999011356267892	WITHOUT_CLASSIFICATION	9.886437321079522E-5	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9996622818332274	WITHOUT_CLASSIFICATION	3.3771816677262027E-4	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9998935680435594	WITHOUT_CLASSIFICATION	1.0643195644054446E-4	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.9997518419774795	WITHOUT_CLASSIFICATION	2.481580225205713E-4	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9990157095896625	WITHOUT_CLASSIFICATION	9.842904103375613E-4	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999448114487345	WITHOUT_CLASSIFICATION	5.518855126549104E-4	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999116290443693	WITHOUT_CLASSIFICATION	8.837095563069985E-5	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9997810760053261	WITHOUT_CLASSIFICATION	2.1892399467403643E-4	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9998698521044453	WITHOUT_CLASSIFICATION	1.301478955546107E-4	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9990750760233982	WITHOUT_CLASSIFICATION	9.249239766018386E-4	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9973364193693371	WITHOUT_CLASSIFICATION	0.002663580630662893	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999801668147604	WITHOUT_CLASSIFICATION	1.9833185239540478E-5	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995713154692574	WITHOUT_CLASSIFICATION	4.2868453074260967E-4	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995705471721082	WITHOUT_CLASSIFICATION	4.294528278918682E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996685080413138	WITHOUT_CLASSIFICATION	3.3149195868611183E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996685080413138	WITHOUT_CLASSIFICATION	3.3149195868611183E-4	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9995697329428441	WITHOUT_CLASSIFICATION	4.3026705715585694E-4	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9972012918635348	WITHOUT_CLASSIFICATION	0.002798708136465239	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9995561691980224	WITHOUT_CLASSIFICATION	4.43830801977514E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9998543351888975	WITHOUT_CLASSIFICATION	1.456648111025395E-4	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9997317838482754	WITHOUT_CLASSIFICATION	2.6821615172453386E-4	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9998485913800709	WITHOUT_CLASSIFICATION	1.5140861992916045E-4	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9998500504875326	WITHOUT_CLASSIFICATION	1.4994951246748598E-4	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.9998002334474648	WITHOUT_CLASSIFICATION	1.997665525352279E-4	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9996413488916972	WITHOUT_CLASSIFICATION	3.586511083027753E-4	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995717313052253	WITHOUT_CLASSIFICATION	4.2826869477476933E-4	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995717313052253	WITHOUT_CLASSIFICATION	4.2826869477476933E-4	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995717313052253	WITHOUT_CLASSIFICATION	4.2826869477476933E-4	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995717313052253	WITHOUT_CLASSIFICATION	4.2826869477476933E-4	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995717313052253	WITHOUT_CLASSIFICATION	4.2826869477476933E-4	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995717313052253	WITHOUT_CLASSIFICATION	4.2826869477476933E-4	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995717313052253	WITHOUT_CLASSIFICATION	4.2826869477476933E-4	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995717313052253	WITHOUT_CLASSIFICATION	4.2826869477476933E-4	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995717313052253	WITHOUT_CLASSIFICATION	4.2826869477476933E-4	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995717313052253	WITHOUT_CLASSIFICATION	4.2826869477476933E-4	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995717313052253	WITHOUT_CLASSIFICATION	4.2826869477476933E-4	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9983020192580444	WITHOUT_CLASSIFICATION	0.001697980741955693	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9987697389011164	WITHOUT_CLASSIFICATION	0.0012302610988836392	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998800305956348	WITHOUT_CLASSIFICATION	1.19969404365095E-4	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9881599829079888	WITHOUT_CLASSIFICATION	0.011840017092011221	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9990325838310308	WITHOUT_CLASSIFICATION	9.674161689692857E-4	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9993105385392936	WITHOUT_CLASSIFICATION	6.894614607064497E-4	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9992254068247319	WITHOUT_CLASSIFICATION	7.745931752680517E-4	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9990232656063772	WITHOUT_CLASSIFICATION	9.767343936226787E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998800305956348	WITHOUT_CLASSIFICATION	1.19969404365095E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998800305956348	WITHOUT_CLASSIFICATION	1.19969404365095E-4	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.999855963007774	WITHOUT_CLASSIFICATION	1.4403699222597695E-4	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9995838748767634	WITHOUT_CLASSIFICATION	4.161251232365814E-4	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999631912072547	WITHOUT_CLASSIFICATION	3.680879274527176E-5	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9993401793594054	WITHOUT_CLASSIFICATION	6.598206405944849E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9998552305385929	WITHOUT_CLASSIFICATION	1.4476946140703343E-4	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9990157095896625	WITHOUT_CLASSIFICATION	9.842904103375613E-4	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999383547057094	WITHOUT_CLASSIFICATION	6.164529429059195E-4	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9996807083438383	WITHOUT_CLASSIFICATION	3.1929165616178054E-4	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9997356632717244	WITHOUT_CLASSIFICATION	2.643367282756838E-4	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996473478206085	WITHOUT_CLASSIFICATION	3.526521793914987E-4	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999707680494231	WITHOUT_CLASSIFICATION	2.9231950576895485E-4	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996743939206159	WITHOUT_CLASSIFICATION	3.25606079384147E-4	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996289856040126	WITHOUT_CLASSIFICATION	3.7101439598741855E-4	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996289856040126	WITHOUT_CLASSIFICATION	3.7101439598741855E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996289856040126	WITHOUT_CLASSIFICATION	3.7101439598741855E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996289856040126	WITHOUT_CLASSIFICATION	3.7101439598741855E-4	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995041917392722	WITHOUT_CLASSIFICATION	4.958082607278663E-4	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996271596494886	WITHOUT_CLASSIFICATION	3.7284035051143134E-4	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9989189825691099	WITHOUT_CLASSIFICATION	0.0010810174308900288	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995041917392722	WITHOUT_CLASSIFICATION	4.958082607278663E-4	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9835604238814151	WITHOUT_CLASSIFICATION	0.016439576118584955	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9990680986381882	WITHOUT_CLASSIFICATION	9.319013618118731E-4	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995764282501366	WITHOUT_CLASSIFICATION	4.2357174986349977E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996424164393953	WITHOUT_CLASSIFICATION	3.5758356060466373E-4	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9998404264916385	WITHOUT_CLASSIFICATION	1.5957350836149338E-4	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.9998552702729429	WITHOUT_CLASSIFICATION	1.4472972705704666E-4	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9998635607431203	WITHOUT_CLASSIFICATION	1.364392568797115E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.999842922878908	WITHOUT_CLASSIFICATION	1.5707712109200067E-4	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9995620109852279	WITHOUT_CLASSIFICATION	4.379890147720591E-4	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9995143262696049	WITHOUT_CLASSIFICATION	4.8567373039506235E-4	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.999625426823719	WITHOUT_CLASSIFICATION	3.745731762809495E-4	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9998532580359676	WITHOUT_CLASSIFICATION	1.4674196403235837E-4	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9998532580359676	WITHOUT_CLASSIFICATION	1.4674196403235837E-4	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9998532580359676	WITHOUT_CLASSIFICATION	1.4674196403235837E-4	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9952200333931472	WITHOUT_CLASSIFICATION	0.004779966606852838	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9998186479399519	WITHOUT_CLASSIFICATION	1.8135206004807594E-4	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999261548543609	WITHOUT_CLASSIFICATION	7.384514563917636E-5	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995041917392722	WITHOUT_CLASSIFICATION	4.958082607278663E-4	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995041917392722	WITHOUT_CLASSIFICATION	4.958082607278663E-4	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9993889082762792	WITHOUT_CLASSIFICATION	6.11091723720701E-4	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999578515256599	WITHOUT_CLASSIFICATION	4.214847434010673E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9927648560685548	WITHOUT_CLASSIFICATION	0.007235143931445129	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9998087556338616	WITHOUT_CLASSIFICATION	1.9124436613846948E-4	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9995330908722997	WITHOUT_CLASSIFICATION	4.669091277002521E-4	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9993233210168432	WITHOUT_CLASSIFICATION	6.766789831568404E-4	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995775919533163	WITHOUT_CLASSIFICATION	4.224080466836656E-4	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998943141916763	WITHOUT_CLASSIFICATION	1.0568580832359056E-4	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998297224728883	WITHOUT_CLASSIFICATION	1.702775271117844E-4	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9981518399645805	WITHOUT_CLASSIFICATION	0.0018481600354195808	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999427829024542	WITHOUT_CLASSIFICATION	5.72170975458627E-5	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9982409523185439	WITHOUT_CLASSIFICATION	0.0017590476814561395	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9984270905167918	WITHOUT_CLASSIFICATION	0.0015729094832082331	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9996236506965424	WITHOUT_CLASSIFICATION	3.7634930345766514E-4	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999402260626703	WITHOUT_CLASSIFICATION	5.977393732973299E-5	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9998928052637044	WITHOUT_CLASSIFICATION	1.0719473629559534E-4	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9998609246530066	WITHOUT_CLASSIFICATION	1.3907534699337168E-4	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9998676204704265	WITHOUT_CLASSIFICATION	1.3237952957352093E-4	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999613810607697	WITHOUT_CLASSIFICATION	3.861893923029992E-4	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9990000278006701	WITHOUT_CLASSIFICATION	9.99972199329893E-4	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9998379621253626	WITHOUT_CLASSIFICATION	1.620378746374E-4	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9997574943811894	WITHOUT_CLASSIFICATION	2.4250561881042527E-4	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9982072702655939	WITHOUT_CLASSIFICATION	0.0017927297344062308	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9995081721713344	WITHOUT_CLASSIFICATION	4.918278286656566E-4	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9998733206112141	WITHOUT_CLASSIFICATION	1.266793887858326E-4	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.99990128497099	WITHOUT_CLASSIFICATION	9.87150290100182E-5	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9982168165963671	WITHOUT_CLASSIFICATION	0.0017831834036329192	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9998767881115441	WITHOUT_CLASSIFICATION	1.2321188845594564E-4	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.999880374131115	WITHOUT_CLASSIFICATION	1.196258688851019E-4	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997026091522164	WITHOUT_CLASSIFICATION	2.9739084778352635E-4	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.9997882998549946	WITHOUT_CLASSIFICATION	2.1170014500536042E-4	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9992757763676798	WITHOUT_CLASSIFICATION	7.242236323201896E-4	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.999786090758695	WITHOUT_CLASSIFICATION	2.1390924130506399E-4	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9990764537600374	WITHOUT_CLASSIFICATION	9.235462399625967E-4	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9992054690060956	WITHOUT_CLASSIFICATION	7.945309939044086E-4	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999269137356601	WITHOUT_CLASSIFICATION	7.308626433989852E-5	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999760986821131	WITHOUT_CLASSIFICATION	2.3901317886902953E-4	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9998413109168248	WITHOUT_CLASSIFICATION	1.5868908317511512E-4	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.999607179590893	WITHOUT_CLASSIFICATION	3.928204091070895E-4	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.9993996913716876	WITHOUT_CLASSIFICATION	6.003086283124194E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.999816611112223	WITHOUT_CLASSIFICATION	1.833888877770709E-4	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9990203595858387	WITHOUT_CLASSIFICATION	9.796404141613315E-4	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9998486672911153	WITHOUT_CLASSIFICATION	1.5133270888475489E-4	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9998938429884896	WITHOUT_CLASSIFICATION	1.0615701151049978E-4	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9928615207996698	WITHOUT_CLASSIFICATION	0.007138479200330078	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9990244544182262	WITHOUT_CLASSIFICATION	9.755455817738793E-4	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998149009971242	WITHOUT_CLASSIFICATION	1.8509900287590886E-4	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9986508199775029	WITHOUT_CLASSIFICATION	0.001349180022497036	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.999758801750997	WITHOUT_CLASSIFICATION	2.4119824900307587E-4	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.999674493051273	WITHOUT_CLASSIFICATION	3.2550694872712023E-4	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9998331649386242	WITHOUT_CLASSIFICATION	1.6683506137575227E-4	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9998373896742053	WITHOUT_CLASSIFICATION	1.6261032579465307E-4	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.998903701700972	WITHOUT_CLASSIFICATION	0.0010962982990279791	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999322832816119	WITHOUT_CLASSIFICATION	6.771671838805938E-5	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9997761667792482	WITHOUT_CLASSIFICATION	2.2383322075187568E-4	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999297198864348	WITHOUT_CLASSIFICATION	7.02801135652483E-5	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.99967469127322	WITHOUT_CLASSIFICATION	3.2530872677999893E-4	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9995009287676957	WITHOUT_CLASSIFICATION	4.99071232304274E-4	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9995980747954648	WITHOUT_CLASSIFICATION	4.019252045351207E-4	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999847833437983	WITHOUT_CLASSIFICATION	1.5216656201701465E-4	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9995649212078576	WITHOUT_CLASSIFICATION	4.3507879214238395E-4	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9952835843281403	WITHOUT_CLASSIFICATION	0.004716415671859699	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9992441705379668	WITHOUT_CLASSIFICATION	7.558294620331234E-4	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999816779850321	WITHOUT_CLASSIFICATION	1.8322014967908157E-4	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999278597804855	WITHOUT_CLASSIFICATION	7.214021951452205E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9996067418854387	WITHOUT_CLASSIFICATION	3.932581145612149E-4	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9995566562393098	WITHOUT_CLASSIFICATION	4.43343760690263E-4	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9992810286255345	WITHOUT_CLASSIFICATION	7.189713744655758E-4	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9992760673348786	WITHOUT_CLASSIFICATION	7.239326651213277E-4	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.999870860970776	WITHOUT_CLASSIFICATION	1.291390292239884E-4	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9995811288967494	WITHOUT_CLASSIFICATION	4.18871103250502E-4	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9993656653204337	WITHOUT_CLASSIFICATION	6.343346795662648E-4	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.9996550192640443	WITHOUT_CLASSIFICATION	3.4498073595561627E-4	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999556573389865	WITHOUT_CLASSIFICATION	4.434266101355033E-5	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999181211544607	WITHOUT_CLASSIFICATION	8.187884553932248E-5	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9996520511412145	WITHOUT_CLASSIFICATION	3.4794885878562074E-4	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9995645733038705	WITHOUT_CLASSIFICATION	4.3542669612945447E-4	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9963155724608508	WITHOUT_CLASSIFICATION	0.0036844275391493047	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9084668855920612	WITHOUT_CLASSIFICATION	0.0915331144079388	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9991228338153817	WITHOUT_CLASSIFICATION	8.771661846182928E-4	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.9998019782339919	WITHOUT_CLASSIFICATION	1.980217660080212E-4	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999104904926958	WITHOUT_CLASSIFICATION	8.950950730430582E-5	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9988422272968855	WITHOUT_CLASSIFICATION	0.0011577727031144606	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9992571605866196	WITHOUT_CLASSIFICATION	7.428394133802713E-4	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9984526234073045	WITHOUT_CLASSIFICATION	0.0015473765926955984	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.999814940187903	WITHOUT_CLASSIFICATION	1.8505981209695224E-4	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998289842877349	WITHOUT_CLASSIFICATION	1.7101571226500498E-4	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998349929879703	WITHOUT_CLASSIFICATION	1.650070120298198E-4	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.9998629854033833	WITHOUT_CLASSIFICATION	1.3701459661679698E-4	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9998064063149475	WITHOUT_CLASSIFICATION	1.9359368505241796E-4	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9998777120120705	WITHOUT_CLASSIFICATION	1.2228798792948288E-4	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9996135114806398	WITHOUT_CLASSIFICATION	3.864885193601564E-4	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9997334656876311	WITHOUT_CLASSIFICATION	2.665343123688381E-4	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9996618938262999	WITHOUT_CLASSIFICATION	3.3810617370012705E-4	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9989112536120017	WITHOUT_CLASSIFICATION	0.0010887463879982844	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9989112536120017	WITHOUT_CLASSIFICATION	0.0010887463879982844	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9994147366807387	WITHOUT_CLASSIFICATION	5.852633192614111E-4	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.999490357070168	WITHOUT_CLASSIFICATION	5.09642929832065E-4	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9953239586142834	WITHOUT_CLASSIFICATION	0.004676041385716719	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.998647922049902	WITHOUT_CLASSIFICATION	0.001352077950097899	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9995533028078158	WITHOUT_CLASSIFICATION	4.4669719218416677E-4	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999747711051935	WITHOUT_CLASSIFICATION	2.5228894806493193E-4	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9995565177114152	WITHOUT_CLASSIFICATION	4.434822885848521E-4	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9996341265542241	WITHOUT_CLASSIFICATION	3.6587344577591944E-4	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9979715957633005	WITHOUT_CLASSIFICATION	0.0020284042366995967	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9997110525811779	WITHOUT_CLASSIFICATION	2.8894741882214093E-4	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9995971398124811	WITHOUT_CLASSIFICATION	4.0286018751884626E-4	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9994755644341027	WITHOUT_CLASSIFICATION	5.244355658973759E-4	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9980446083488917	WITHOUT_CLASSIFICATION	0.001955391651108191	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9997351021329899	WITHOUT_CLASSIFICATION	2.648978670101488E-4	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9997237529403301	WITHOUT_CLASSIFICATION	2.762470596698688E-4	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9968778250492569	WITHOUT_CLASSIFICATION	0.003122174950743115	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9968778250492569	WITHOUT_CLASSIFICATION	0.003122174950743115	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999158074591233	WITHOUT_CLASSIFICATION	8.419254087655423E-5	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999577904652984	WITHOUT_CLASSIFICATION	4.2209534701595844E-4	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999850195010644	WITHOUT_CLASSIFICATION	1.4980498935607663E-4	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9995431787128508	WITHOUT_CLASSIFICATION	4.5682128714917433E-4	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997185833630777	WITHOUT_CLASSIFICATION	2.8141663692233436E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.999842922878908	WITHOUT_CLASSIFICATION	1.5707712109200067E-4	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996474682993768	WITHOUT_CLASSIFICATION	3.525317006231648E-4	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997185833630777	WITHOUT_CLASSIFICATION	2.8141663692233436E-4	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999141965421077	WITHOUT_CLASSIFICATION	8.580345789241624E-5	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.999686371063103	WITHOUT_CLASSIFICATION	3.1362893689703287E-4	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9997444322500493	WITHOUT_CLASSIFICATION	2.5556774995068326E-4	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9997444322500493	WITHOUT_CLASSIFICATION	2.5556774995068326E-4	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9997247397539705	WITHOUT_CLASSIFICATION	2.7526024602953105E-4	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999719401095496	WITHOUT_CLASSIFICATION	2.8059890450358878E-5	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9975918223103691	WITHOUT_CLASSIFICATION	0.00240817768963079	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9961560218662625	WITHOUT_CLASSIFICATION	0.0038439781337374418	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9994896560852745	WITHOUT_CLASSIFICATION	5.103439147254043E-4	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9993658605744603	WITHOUT_CLASSIFICATION	6.341394255396078E-4	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9991669309990592	WITHOUT_CLASSIFICATION	8.330690009407663E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999556841840356	WITHOUT_CLASSIFICATION	4.431581596439943E-4	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9809167238535407	WITHOUT_CLASSIFICATION	0.019083276146459414	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9973160851634862	WITHOUT_CLASSIFICATION	0.0026839148365137597	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9995260729739016	WITHOUT_CLASSIFICATION	4.739270260983097E-4	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.998272445918909	WITHOUT_CLASSIFICATION	0.0017275540810910474	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9997674749907153	WITHOUT_CLASSIFICATION	2.3252500928482763E-4	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997424095766193	WITHOUT_CLASSIFICATION	2.575904233806859E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9984876873419034	WITHOUT_CLASSIFICATION	0.0015123126580966857	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999529979562194	WITHOUT_CLASSIFICATION	4.700204378058972E-4	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999432846200764	WITHOUT_CLASSIFICATION	5.67153799235111E-5	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9939549925024411	WITHOUT_CLASSIFICATION	0.006045007497558842	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997275412660772	WITHOUT_CLASSIFICATION	2.724587339228398E-4	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9997149641366371	WITHOUT_CLASSIFICATION	2.8503586336292607E-4	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9996319224300529	WITHOUT_CLASSIFICATION	3.68077569947123E-4	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9988838753335749	WITHOUT_CLASSIFICATION	0.0011161246664251276	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9996941980653683	WITHOUT_CLASSIFICATION	3.0580193463175114E-4	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9996743939206159	WITHOUT_CLASSIFICATION	3.25606079384147E-4	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9996919056035023	WITHOUT_CLASSIFICATION	3.0809439649776514E-4	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9996278844043766	WITHOUT_CLASSIFICATION	3.721155956234634E-4	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999181321240872	WITHOUT_CLASSIFICATION	8.186787591283038E-5	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9996273362141739	WITHOUT_CLASSIFICATION	3.7266378582610814E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9993808368335064	WITHOUT_CLASSIFICATION	6.191631664935973E-4	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9996778246961323	WITHOUT_CLASSIFICATION	3.22175303867654E-4	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.9995864121455424	WITHOUT_CLASSIFICATION	4.135878544574948E-4	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9994776225892156	WITHOUT_CLASSIFICATION	5.223774107844118E-4	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9985176145668393	WITHOUT_CLASSIFICATION	0.0014823854331607281	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9997960942513092	WITHOUT_CLASSIFICATION	2.0390574869087378E-4	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9997742355363102	WITHOUT_CLASSIFICATION	2.257644636897198E-4	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9997876358559017	WITHOUT_CLASSIFICATION	2.1236414409830925E-4	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9997876358559017	WITHOUT_CLASSIFICATION	2.1236414409830925E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997465048948986	WITHOUT_CLASSIFICATION	2.53495105101379E-4	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9991271072885544	WITHOUT_CLASSIFICATION	8.728927114456973E-4	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9996124187725636	WITHOUT_CLASSIFICATION	3.8758122743644296E-4	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9997375776333688	WITHOUT_CLASSIFICATION	2.6242236663130323E-4	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9998464626579608	WITHOUT_CLASSIFICATION	1.535373420392364E-4	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9996946854616429	WITHOUT_CLASSIFICATION	3.053145383571064E-4	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9995008883525105	WITHOUT_CLASSIFICATION	4.991116474894339E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997465048948986	WITHOUT_CLASSIFICATION	2.53495105101379E-4	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999826132620448	WITHOUT_CLASSIFICATION	1.7386737955204674E-4	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999713588177783	WITHOUT_CLASSIFICATION	2.864118222169516E-4	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999061248807969	WITHOUT_CLASSIFICATION	9.387511920309849E-5	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9998182305100642	WITHOUT_CLASSIFICATION	1.817694899357139E-4	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9994502895237937	WITHOUT_CLASSIFICATION	5.497104762062693E-4	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9951221194722125	WITHOUT_CLASSIFICATION	0.004877880527787465	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9997363578799785	WITHOUT_CLASSIFICATION	2.636421200215086E-4	DEFECT
}	WITHOUT_CLASSIFICATION	0.9998417748609435	WITHOUT_CLASSIFICATION	1.5822513905658272E-4	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9997061785171061	WITHOUT_CLASSIFICATION	2.938214828939287E-4	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9779390130526237	WITHOUT_CLASSIFICATION	0.022060986947376418	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9967409605368518	WITHOUT_CLASSIFICATION	0.003259039463148159	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9779390130526237	WITHOUT_CLASSIFICATION	0.022060986947376418	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9993213713520263	WITHOUT_CLASSIFICATION	6.786286479738419E-4	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9995649212078576	WITHOUT_CLASSIFICATION	4.3507879214238395E-4	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9993213713520263	WITHOUT_CLASSIFICATION	6.786286479738419E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998228480427857	WITHOUT_CLASSIFICATION	1.7715195721432767E-4	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999802254699972	WITHOUT_CLASSIFICATION	1.977453000280709E-4	DEFECT
}	WITHOUT_CLASSIFICATION	0.9998417748609435	WITHOUT_CLASSIFICATION	1.5822513905658272E-4	DEFECT
}	WITHOUT_CLASSIFICATION	0.9998417748609435	WITHOUT_CLASSIFICATION	1.5822513905658272E-4	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9997972292768468	WITHOUT_CLASSIFICATION	2.0277072315320795E-4	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9997972292768468	WITHOUT_CLASSIFICATION	2.0277072315320795E-4	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9997972292768468	WITHOUT_CLASSIFICATION	2.0277072315320795E-4	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9995904130918531	WITHOUT_CLASSIFICATION	4.095869081469328E-4	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9998719118009192	WITHOUT_CLASSIFICATION	1.2808819908094023E-4	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9997260485457778	WITHOUT_CLASSIFICATION	2.7395145422211194E-4	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.999933913095565	WITHOUT_CLASSIFICATION	6.608690443496911E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9996095226389586	WITHOUT_CLASSIFICATION	3.904773610413952E-4	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9996712128652506	WITHOUT_CLASSIFICATION	3.2878713474937933E-4	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9998327075551933	WITHOUT_CLASSIFICATION	1.6729244480667715E-4	DEFECT
columns	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9996268194290415	WITHOUT_CLASSIFICATION	3.731805709585245E-4	DEFECT
types	WITHOUT_CLASSIFICATION	0.9998720410152594	WITHOUT_CLASSIFICATION	1.279589847406223E-4	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.9998364034230209	WITHOUT_CLASSIFICATION	1.635965769790853E-4	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9996450211322254	WITHOUT_CLASSIFICATION	3.5497886777460525E-4	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9996610206673723	WITHOUT_CLASSIFICATION	3.3897933262768033E-4	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9996309892651603	WITHOUT_CLASSIFICATION	3.6901073483975135E-4	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.99979308421327	WITHOUT_CLASSIFICATION	2.0691578673009967E-4	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999529979562194	WITHOUT_CLASSIFICATION	4.700204378058972E-4	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997809230021691	WITHOUT_CLASSIFICATION	2.1907699783098688E-4	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9996284981219336	WITHOUT_CLASSIFICATION	3.7150187806646605E-4	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997095336649237	WITHOUT_CLASSIFICATION	2.9046633507638593E-4	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999529979562194	WITHOUT_CLASSIFICATION	4.700204378058972E-4	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999538834663124	WITHOUT_CLASSIFICATION	4.6116533687612957E-4	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9976362616747547	WITHOUT_CLASSIFICATION	0.0023637383252453088	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9993757416081314	WITHOUT_CLASSIFICATION	6.242583918685935E-4	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9992582424275764	WITHOUT_CLASSIFICATION	7.417575724234903E-4	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9993391655845254	WITHOUT_CLASSIFICATION	6.608344154746084E-4	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9623721647862828	WITHOUT_CLASSIFICATION	0.037627835213717216	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9983191906789268	WITHOUT_CLASSIFICATION	0.001680809321073174	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9996095226389586	WITHOUT_CLASSIFICATION	3.904773610413952E-4	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9997639284795832	WITHOUT_CLASSIFICATION	2.3607152041677036E-4	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9998130860941918	WITHOUT_CLASSIFICATION	1.8691390580827797E-4	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.6425701117907857	WITHOUT_CLASSIFICATION	0.3574298882092143	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.9998223614244616	WITHOUT_CLASSIFICATION	1.776385755384813E-4	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9997096133948625	WITHOUT_CLASSIFICATION	2.9038660513749475E-4	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.9998698722686902	WITHOUT_CLASSIFICATION	1.3012773130980645E-4	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9995904130918531	WITHOUT_CLASSIFICATION	4.095869081469328E-4	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9995904130918531	WITHOUT_CLASSIFICATION	4.095869081469328E-4	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9997764728028693	WITHOUT_CLASSIFICATION	2.2352719713078539E-4	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9998220964299008	WITHOUT_CLASSIFICATION	1.7790357009922554E-4	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9996814806815434	WITHOUT_CLASSIFICATION	3.185193184565975E-4	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9984718430603652	WITHOUT_CLASSIFICATION	0.001528156939634814	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9995044352196794	WITHOUT_CLASSIFICATION	4.955647803205826E-4	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9996597959644115	WITHOUT_CLASSIFICATION	3.4020403558858203E-4	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9995258339734836	WITHOUT_CLASSIFICATION	4.7416602651636315E-4	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9996222661413968	WITHOUT_CLASSIFICATION	3.7773385860319277E-4	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9993501719485299	WITHOUT_CLASSIFICATION	6.498280514699945E-4	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997078641983088	WITHOUT_CLASSIFICATION	2.9213580169118935E-4	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9996450211322254	WITHOUT_CLASSIFICATION	3.5497886777460525E-4	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997078641983088	WITHOUT_CLASSIFICATION	2.9213580169118935E-4	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9995398465237413	WITHOUT_CLASSIFICATION	4.601534762586705E-4	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9997399804509356	WITHOUT_CLASSIFICATION	2.60019549064343E-4	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9997478622192221	WITHOUT_CLASSIFICATION	2.5213778077791816E-4	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.6096989213769196	WITHOUT_CLASSIFICATION	0.39030107862308033	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9985290362167094	WITHOUT_CLASSIFICATION	0.0014709637832906678	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9992451553047027	WITHOUT_CLASSIFICATION	7.548446952972377E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9998876795502287	WITHOUT_CLASSIFICATION	1.123204497712203E-4	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9998170678169891	WITHOUT_CLASSIFICATION	1.8293218301097065E-4	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9997935120384914	WITHOUT_CLASSIFICATION	2.064879615084684E-4	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9995616772800086	WITHOUT_CLASSIFICATION	4.383227199914696E-4	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9995616772800086	WITHOUT_CLASSIFICATION	4.383227199914696E-4	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9938899695071298	WITHOUT_CLASSIFICATION	0.00611003049287015	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9996079502870934	WITHOUT_CLASSIFICATION	3.920497129066685E-4	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997078641983088	WITHOUT_CLASSIFICATION	2.9213580169118935E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9985290362167094	WITHOUT_CLASSIFICATION	0.0014709637832906678	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9998876795502287	WITHOUT_CLASSIFICATION	1.123204497712203E-4	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9991112077475199	WITHOUT_CLASSIFICATION	8.887922524800644E-4	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999031052618288	WITHOUT_CLASSIFICATION	9.689473817123591E-5	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9997084825910881	WITHOUT_CLASSIFICATION	2.915174089119032E-4	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997204491508167	WITHOUT_CLASSIFICATION	2.795508491833473E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9995398465237413	WITHOUT_CLASSIFICATION	4.601534762586705E-4	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9995641818820922	WITHOUT_CLASSIFICATION	4.358181179078365E-4	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.9995971663523476	WITHOUT_CLASSIFICATION	4.0283364765233265E-4	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999670677678277	WITHOUT_CLASSIFICATION	3.293223217230014E-4	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9994492377164997	WITHOUT_CLASSIFICATION	5.507622835003042E-4	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9994492377164997	WITHOUT_CLASSIFICATION	5.507622835003042E-4	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9995245902338888	WITHOUT_CLASSIFICATION	4.7540976611123455E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998228480427857	WITHOUT_CLASSIFICATION	1.7715195721432767E-4	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999696126944125	WITHOUT_CLASSIFICATION	3.0387305587501476E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9992456615831846	WITHOUT_CLASSIFICATION	7.543384168154153E-4	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9957273361193074	WITHOUT_CLASSIFICATION	0.004272663880692558	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9990511596973498	WITHOUT_CLASSIFICATION	9.488403026501381E-4	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9990390490192512	WITHOUT_CLASSIFICATION	9.60950980748852E-4	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9991945331883336	WITHOUT_CLASSIFICATION	8.054668116663148E-4	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9993608147074043	WITHOUT_CLASSIFICATION	6.39185292595727E-4	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9996488911235297	WITHOUT_CLASSIFICATION	3.511088764702656E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9993054300943857	WITHOUT_CLASSIFICATION	6.945699056142068E-4	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9994194206616975	WITHOUT_CLASSIFICATION	5.805793383025551E-4	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9986672403945667	WITHOUT_CLASSIFICATION	0.001332759605433421	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.999704047794072	WITHOUT_CLASSIFICATION	2.959522059280137E-4	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9987627765156912	WITHOUT_CLASSIFICATION	0.001237223484308819	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9995142375934981	WITHOUT_CLASSIFICATION	4.857624065018268E-4	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9996864291558765	WITHOUT_CLASSIFICATION	3.135708441235307E-4	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999651032674473	WITHOUT_CLASSIFICATION	3.489673255277477E-5	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9993203346768824	WITHOUT_CLASSIFICATION	6.796653231175298E-4	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.9995596179980506	WITHOUT_CLASSIFICATION	4.403820019493672E-4	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.997935761468843	WITHOUT_CLASSIFICATION	0.002064238531157034	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9997177909292865	WITHOUT_CLASSIFICATION	2.822090707135596E-4	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9997558167061237	WITHOUT_CLASSIFICATION	2.441832938761895E-4	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9996540061399724	WITHOUT_CLASSIFICATION	3.4599386002761163E-4	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9996733917363766	WITHOUT_CLASSIFICATION	3.2660826362344007E-4	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9987815510681157	WITHOUT_CLASSIFICATION	0.001218448931884283	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9996117678752975	WITHOUT_CLASSIFICATION	3.8823212470252225E-4	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9997581719518475	WITHOUT_CLASSIFICATION	2.418280481523962E-4	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9995657386815947	WITHOUT_CLASSIFICATION	4.3426131840536866E-4	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9995677078759823	WITHOUT_CLASSIFICATION	4.322921240176662E-4	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7823354884398992	WITHOUT_CLASSIFICATION	0.21766451156010072	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9958323524302195	WITHOUT_CLASSIFICATION	0.004167647569780509	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9996844394748825	WITHOUT_CLASSIFICATION	3.1556052511755057E-4	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9994727220431996	WITHOUT_CLASSIFICATION	5.272779568003617E-4	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8224308723950394	WITHOUT_CLASSIFICATION	0.17756912760496046	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9991588086336424	WITHOUT_CLASSIFICATION	8.4119136635766E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.994295337114993	WITHOUT_CLASSIFICATION	0.005704662885007145	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9998718671754234	WITHOUT_CLASSIFICATION	1.2813282457663826E-4	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999837958081669	WITHOUT_CLASSIFICATION	1.6204191833184804E-5	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996770142322783	WITHOUT_CLASSIFICATION	3.22985767721719E-4	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9997543003869779	WITHOUT_CLASSIFICATION	2.4569961302209575E-4	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9997780632413222	WITHOUT_CLASSIFICATION	2.2193675867779227E-4	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9996671186083891	WITHOUT_CLASSIFICATION	3.328813916109659E-4	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9997543003869779	WITHOUT_CLASSIFICATION	2.4569961302209575E-4	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996770142322783	WITHOUT_CLASSIFICATION	3.22985767721719E-4	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9997780632413222	WITHOUT_CLASSIFICATION	2.2193675867779227E-4	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.999735631297965	WITHOUT_CLASSIFICATION	2.643687020349351E-4	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9991218579798782	WITHOUT_CLASSIFICATION	8.781420201218837E-4	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.998576793610342	WITHOUT_CLASSIFICATION	0.0014232063896579686	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9995245902338888	WITHOUT_CLASSIFICATION	4.7540976611123455E-4	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999056554425054	WITHOUT_CLASSIFICATION	9.434455749449358E-5	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9994673528567822	WITHOUT_CLASSIFICATION	5.326471432178069E-4	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9995947104107936	WITHOUT_CLASSIFICATION	4.0528958920640706E-4	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998941633422039	WITHOUT_CLASSIFICATION	1.058366577961333E-4	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999735649220732	WITHOUT_CLASSIFICATION	2.6435077926806928E-5	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9994762232521496	WITHOUT_CLASSIFICATION	5.23776747850475E-4	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.9994942922056815	WITHOUT_CLASSIFICATION	5.057077943183821E-4	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9994625375439864	WITHOUT_CLASSIFICATION	5.374624560137202E-4	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997149141321848	WITHOUT_CLASSIFICATION	2.850858678151819E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9995245902338888	WITHOUT_CLASSIFICATION	4.7540976611123455E-4	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998944648716308	WITHOUT_CLASSIFICATION	1.0553512836924485E-4	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9998611028294612	WITHOUT_CLASSIFICATION	1.3889717053888295E-4	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9992695112271709	WITHOUT_CLASSIFICATION	7.304887728290715E-4	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999710320159136	WITHOUT_CLASSIFICATION	2.8967984086313725E-5	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9995669319636219	WITHOUT_CLASSIFICATION	4.3306803637805725E-4	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9989679612618433	WITHOUT_CLASSIFICATION	0.001032038738156738	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9747311042970634	WITHOUT_CLASSIFICATION	0.02526889570293658	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9997398091957467	WITHOUT_CLASSIFICATION	2.601908042533312E-4	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9991948118679634	WITHOUT_CLASSIFICATION	8.051881320366329E-4	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9980447870239813	WITHOUT_CLASSIFICATION	0.001955212976018827	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9989679612618433	WITHOUT_CLASSIFICATION	0.001032038738156738	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9989679612618433	WITHOUT_CLASSIFICATION	0.001032038738156738	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.998331983387803	WITHOUT_CLASSIFICATION	0.0016680166121970316	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.998331983387803	WITHOUT_CLASSIFICATION	0.0016680166121970316	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.9983642521744424	WITHOUT_CLASSIFICATION	0.0016357478255576638	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9992695112271709	WITHOUT_CLASSIFICATION	7.304887728290715E-4	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9997181619086202	WITHOUT_CLASSIFICATION	2.818380913797891E-4	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9996263513231388	WITHOUT_CLASSIFICATION	3.736486768612312E-4	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.99985744226901	WITHOUT_CLASSIFICATION	1.4255773099007465E-4	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.99985744226901	WITHOUT_CLASSIFICATION	1.4255773099007465E-4	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9991880923078108	WITHOUT_CLASSIFICATION	8.119076921891762E-4	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999131036349655	WITHOUT_CLASSIFICATION	8.689636503436493E-5	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999669935711333	WITHOUT_CLASSIFICATION	3.3006428866692046E-5	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9997275620580248	WITHOUT_CLASSIFICATION	2.724379419751981E-4	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9973856033419678	WITHOUT_CLASSIFICATION	0.0026143966580321368	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.8682774701738949	WITHOUT_CLASSIFICATION	0.1317225298261051	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9997126684528386	WITHOUT_CLASSIFICATION	2.8733154716142087E-4	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998423883426683	WITHOUT_CLASSIFICATION	1.5761165733169967E-4	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.99930297044484	WITHOUT_CLASSIFICATION	6.97029555159912E-4	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9962809408007225	WITHOUT_CLASSIFICATION	0.003719059199277398	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.9995636521007104	WITHOUT_CLASSIFICATION	4.3634789928952557E-4	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.9996153861612131	WITHOUT_CLASSIFICATION	3.846138387868687E-4	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.9998431215351832	WITHOUT_CLASSIFICATION	1.568784648169329E-4	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9988034900274597	WITHOUT_CLASSIFICATION	0.0011965099725402403	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9993460181600446	WITHOUT_CLASSIFICATION	6.539818399553528E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995734736060043	WITHOUT_CLASSIFICATION	4.2652639399570785E-4	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9996048457228036	WITHOUT_CLASSIFICATION	3.9515427719637435E-4	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9986361692813864	WITHOUT_CLASSIFICATION	0.0013638307186135956	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9997564898302378	WITHOUT_CLASSIFICATION	2.4351016976226905E-4	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9996218388921065	WITHOUT_CLASSIFICATION	3.781611078934958E-4	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9990212624229611	WITHOUT_CLASSIFICATION	9.787375770389615E-4	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9993960923785192	WITHOUT_CLASSIFICATION	6.039076214808096E-4	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9994243917467247	WITHOUT_CLASSIFICATION	5.756082532753637E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9998543351888975	WITHOUT_CLASSIFICATION	1.456648111025395E-4	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9996447070372487	WITHOUT_CLASSIFICATION	3.5529296275125513E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999651032674473	WITHOUT_CLASSIFICATION	3.489673255277477E-5	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9991305631128765	WITHOUT_CLASSIFICATION	8.694368871235031E-4	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.99937367237408	WITHOUT_CLASSIFICATION	6.263276259200002E-4	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9996129565692136	WITHOUT_CLASSIFICATION	3.870434307864376E-4	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9996129565692136	WITHOUT_CLASSIFICATION	3.870434307864376E-4	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9991165204457368	WITHOUT_CLASSIFICATION	8.834795542632111E-4	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9998833831037669	WITHOUT_CLASSIFICATION	1.1661689623308605E-4	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9995142568616268	WITHOUT_CLASSIFICATION	4.8574313837327504E-4	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9995142568616268	WITHOUT_CLASSIFICATION	4.8574313837327504E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9962048864493894	WITHOUT_CLASSIFICATION	0.0037951135506106193	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9985382759674112	WITHOUT_CLASSIFICATION	0.0014617240325888277	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.9977727009983315	WITHOUT_CLASSIFICATION	0.0022272990016684985	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9998552305385929	WITHOUT_CLASSIFICATION	1.4476946140703343E-4	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9996079419281185	WITHOUT_CLASSIFICATION	3.920580718814529E-4	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9993625575253029	WITHOUT_CLASSIFICATION	6.374424746971315E-4	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9998241696790794	WITHOUT_CLASSIFICATION	1.758303209205826E-4	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996893990736495	WITHOUT_CLASSIFICATION	3.106009263504821E-4	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996893990736495	WITHOUT_CLASSIFICATION	3.106009263504821E-4	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9991650879414332	WITHOUT_CLASSIFICATION	8.349120585667084E-4	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9998704963929769	WITHOUT_CLASSIFICATION	1.2950360702313604E-4	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9998704963929769	WITHOUT_CLASSIFICATION	1.2950360702313604E-4	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996962286107292	WITHOUT_CLASSIFICATION	3.03771389270829E-4	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9996607699244417	WITHOUT_CLASSIFICATION	3.3923007555829117E-4	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.9994772173415325	WITHOUT_CLASSIFICATION	5.227826584674573E-4	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9996488866011569	WITHOUT_CLASSIFICATION	3.5111339884311436E-4	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9997472796023125	WITHOUT_CLASSIFICATION	2.5272039768751856E-4	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9986458776893643	WITHOUT_CLASSIFICATION	0.0013541223106356974	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9997752248289098	WITHOUT_CLASSIFICATION	2.2477517109020039E-4	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999512186137757	WITHOUT_CLASSIFICATION	4.878138622430555E-4	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9969989373023745	WITHOUT_CLASSIFICATION	0.0030010626976254506	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.999228663685849	WITHOUT_CLASSIFICATION	7.713363141509438E-4	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9987478369839499	WITHOUT_CLASSIFICATION	0.0012521630160502156	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9993943429652559	WITHOUT_CLASSIFICATION	6.05657034744058E-4	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9995202331015374	WITHOUT_CLASSIFICATION	4.797668984626258E-4	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9998500504875326	WITHOUT_CLASSIFICATION	1.4994951246748598E-4	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9996195104319662	WITHOUT_CLASSIFICATION	3.8048956803379716E-4	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9994770735079888	WITHOUT_CLASSIFICATION	5.229264920113502E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.999842922878908	WITHOUT_CLASSIFICATION	1.5707712109200067E-4	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9975804533538497	WITHOUT_CLASSIFICATION	0.0024195466461502677	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9993494487902397	WITHOUT_CLASSIFICATION	6.505512097603912E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.999842922878908	WITHOUT_CLASSIFICATION	1.5707712109200067E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.999842922878908	WITHOUT_CLASSIFICATION	1.5707712109200067E-4	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9997686764924675	WITHOUT_CLASSIFICATION	2.3132350753257973E-4	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.999538084479263	WITHOUT_CLASSIFICATION	4.619155207370449E-4	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998626117620621	WITHOUT_CLASSIFICATION	1.3738823793786207E-4	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9998777334776856	WITHOUT_CLASSIFICATION	1.2226652231441928E-4	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.987905083678833	WITHOUT_CLASSIFICATION	0.01209491632116695	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999914300663826	WITHOUT_CLASSIFICATION	8.569933617396262E-5	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998626117620621	WITHOUT_CLASSIFICATION	1.3738823793786207E-4	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9996922124825598	WITHOUT_CLASSIFICATION	3.0778751744021216E-4	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9996019379335506	WITHOUT_CLASSIFICATION	3.98062066449456E-4	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9998864740573722	WITHOUT_CLASSIFICATION	1.1352594262776322E-4	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9998085201340343	WITHOUT_CLASSIFICATION	1.9147986596567302E-4	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9998023673753789	WITHOUT_CLASSIFICATION	1.9763262462108076E-4	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9990133975842872	WITHOUT_CLASSIFICATION	9.866024157128255E-4	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9994764803887267	WITHOUT_CLASSIFICATION	5.235196112732269E-4	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9994740703203525	WITHOUT_CLASSIFICATION	5.25929679647542E-4	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996949106292726	WITHOUT_CLASSIFICATION	3.0508937072733813E-4	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9995534812978004	WITHOUT_CLASSIFICATION	4.465187021995918E-4	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996949106292726	WITHOUT_CLASSIFICATION	3.0508937072733813E-4	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9995628376820581	WITHOUT_CLASSIFICATION	4.3716231794194865E-4	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9994524907680956	WITHOUT_CLASSIFICATION	5.475092319044203E-4	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9969772892680527	WITHOUT_CLASSIFICATION	0.0030227107319472928	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9978914076684422	WITHOUT_CLASSIFICATION	0.002108592331557841	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9986883275357991	WITHOUT_CLASSIFICATION	0.0013116724642010266	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9997830684382527	WITHOUT_CLASSIFICATION	2.1693156174733258E-4	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9995301992696071	WITHOUT_CLASSIFICATION	4.69800730393019E-4	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9993236388007272	WITHOUT_CLASSIFICATION	6.763611992727191E-4	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9995301992696071	WITHOUT_CLASSIFICATION	4.69800730393019E-4	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996360079495376	WITHOUT_CLASSIFICATION	3.6399205046245143E-4	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9957773831752281	WITHOUT_CLASSIFICATION	0.004222616824771941	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9996341265542241	WITHOUT_CLASSIFICATION	3.6587344577591944E-4	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9997589854976622	WITHOUT_CLASSIFICATION	2.4101450233788608E-4	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.999632231069652	WITHOUT_CLASSIFICATION	3.6776893034795013E-4	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.999529979562194	WITHOUT_CLASSIFICATION	4.700204378058972E-4	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9994677385166744	WITHOUT_CLASSIFICATION	5.322614833256459E-4	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9997830684382527	WITHOUT_CLASSIFICATION	2.1693156174733258E-4	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9993236388007272	WITHOUT_CLASSIFICATION	6.763611992727191E-4	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996360079495376	WITHOUT_CLASSIFICATION	3.6399205046245143E-4	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9992633873394752	WITHOUT_CLASSIFICATION	7.366126605247681E-4	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9998092650562285	WITHOUT_CLASSIFICATION	1.9073494377141353E-4	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9989875320216233	WITHOUT_CLASSIFICATION	0.0010124679783766624	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.99939527048074	WITHOUT_CLASSIFICATION	6.047295192600802E-4	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9991442589381055	WITHOUT_CLASSIFICATION	8.557410618945399E-4	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999241311016892	WITHOUT_CLASSIFICATION	7.586889831079802E-4	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9992508210039078	WITHOUT_CLASSIFICATION	7.491789960920558E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995734736060043	WITHOUT_CLASSIFICATION	4.2652639399570785E-4	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9957773831752281	WITHOUT_CLASSIFICATION	0.004222616824771941	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999660473980241	WITHOUT_CLASSIFICATION	3.395260197596502E-5	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9997972292768468	WITHOUT_CLASSIFICATION	2.0277072315320795E-4	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.996916092944371	WITHOUT_CLASSIFICATION	0.003083907055628884	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.999762564299413	WITHOUT_CLASSIFICATION	2.3743570058708098E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995734736060043	WITHOUT_CLASSIFICATION	4.2652639399570785E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9997348853218708	WITHOUT_CLASSIFICATION	2.651146781291375E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995734736060043	WITHOUT_CLASSIFICATION	4.2652639399570785E-4	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9998805841086049	WITHOUT_CLASSIFICATION	1.1941589139500927E-4	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9995360157566067	WITHOUT_CLASSIFICATION	4.6398424339339633E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9995721083085856	WITHOUT_CLASSIFICATION	4.278916914144939E-4	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9995940551602989	WITHOUT_CLASSIFICATION	4.059448397010961E-4	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9989654497683867	WITHOUT_CLASSIFICATION	0.0010345502316133225	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9992245910686822	WITHOUT_CLASSIFICATION	7.754089313178869E-4	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999219951186178	WITHOUT_CLASSIFICATION	7.800488138216634E-5	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998388492368471	WITHOUT_CLASSIFICATION	1.6115076315283152E-4	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.99986204335864	WITHOUT_CLASSIFICATION	1.379566413599737E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999002420982203	WITHOUT_CLASSIFICATION	9.975790177981022E-5	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9998109306749358	WITHOUT_CLASSIFICATION	1.8906932506414448E-4	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9915947058771772	WITHOUT_CLASSIFICATION	0.008405294122822753	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.9994272278181361	WITHOUT_CLASSIFICATION	5.727721818639305E-4	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999307782968656	WITHOUT_CLASSIFICATION	6.922170313434531E-5	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999617689205142	WITHOUT_CLASSIFICATION	3.8231079485749966E-5	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998297054625859	WITHOUT_CLASSIFICATION	1.7029453741414417E-4	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999054310123443	WITHOUT_CLASSIFICATION	9.456898765569955E-4	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999583048795498	WITHOUT_CLASSIFICATION	4.1695120450208653E-4	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9998089351006031	WITHOUT_CLASSIFICATION	1.910648993968577E-4	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9988220397970679	WITHOUT_CLASSIFICATION	0.0011779602029321867	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9988220397970679	WITHOUT_CLASSIFICATION	0.0011779602029321867	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9995251093551629	WITHOUT_CLASSIFICATION	4.7489064483711E-4	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9995000255729802	WITHOUT_CLASSIFICATION	4.999744270197112E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999430587702467	WITHOUT_CLASSIFICATION	5.6941229753340155E-5	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9998380000692417	WITHOUT_CLASSIFICATION	1.6199993075834476E-4	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9996923733130602	WITHOUT_CLASSIFICATION	3.076266869398937E-4	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9997313857924656	WITHOUT_CLASSIFICATION	2.686142075344923E-4	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999238214346698	WITHOUT_CLASSIFICATION	7.617856533009826E-5	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.999832386809942	WITHOUT_CLASSIFICATION	1.6761319005794358E-4	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9989736379260775	WITHOUT_CLASSIFICATION	0.001026362073922514	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999668652217798	WITHOUT_CLASSIFICATION	3.313477822019342E-4	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.9997309792798537	WITHOUT_CLASSIFICATION	2.690207201463077E-4	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9972301456863722	WITHOUT_CLASSIFICATION	0.002769854313627656	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.999084870752689	WITHOUT_CLASSIFICATION	9.151292473109828E-4	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998136582687331	WITHOUT_CLASSIFICATION	1.8634173126689808E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996816955510124	WITHOUT_CLASSIFICATION	3.183044489876603E-4	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9994890825854343	WITHOUT_CLASSIFICATION	5.109174145656756E-4	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9994890825854343	WITHOUT_CLASSIFICATION	5.109174145656756E-4	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.988584017185407	WITHOUT_CLASSIFICATION	0.011415982814592987	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999219951186178	WITHOUT_CLASSIFICATION	7.800488138216634E-5	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9949495499991104	WITHOUT_CLASSIFICATION	0.005050450000889542	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9997675606755244	WITHOUT_CLASSIFICATION	2.3243932447557927E-4	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9979117389418309	WITHOUT_CLASSIFICATION	0.0020882610581691133	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999219951186178	WITHOUT_CLASSIFICATION	7.800488138216634E-5	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.9997670169102518	WITHOUT_CLASSIFICATION	2.329830897480756E-4	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9994959234175924	WITHOUT_CLASSIFICATION	5.040765824076021E-4	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9991034848222219	WITHOUT_CLASSIFICATION	8.965151777780602E-4	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9998170013863212	WITHOUT_CLASSIFICATION	1.8299861367871128E-4	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9883796121270303	WITHOUT_CLASSIFICATION	0.011620387872969692	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999770903077512	WITHOUT_CLASSIFICATION	2.2909692248894557E-5	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9996993682322145	WITHOUT_CLASSIFICATION	3.0063176778552064E-4	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9971658306963467	WITHOUT_CLASSIFICATION	0.002834169303653233	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9997604138581397	WITHOUT_CLASSIFICATION	2.3958614186017936E-4	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9994740690712822	WITHOUT_CLASSIFICATION	5.259309287176888E-4	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9997848986389026	WITHOUT_CLASSIFICATION	2.151013610973816E-4	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998140797610099	WITHOUT_CLASSIFICATION	1.859202389900225E-4	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9996494716850345	WITHOUT_CLASSIFICATION	3.5052831496544057E-4	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9993299327528816	WITHOUT_CLASSIFICATION	6.700672471183339E-4	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9982239105550602	WITHOUT_CLASSIFICATION	0.0017760894449397008	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9994456995918561	WITHOUT_CLASSIFICATION	5.543004081437525E-4	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999303156860727	WITHOUT_CLASSIFICATION	6.968431392729302E-5	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9998399951740432	WITHOUT_CLASSIFICATION	1.6000482595666433E-4	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9986024573124981	WITHOUT_CLASSIFICATION	0.0013975426875018277	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998136418631182	WITHOUT_CLASSIFICATION	1.8635813688192978E-4	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9997599472675236	WITHOUT_CLASSIFICATION	2.400527324764431E-4	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9972429968236629	WITHOUT_CLASSIFICATION	0.0027570031763370184	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9973904421780827	WITHOUT_CLASSIFICATION	0.002609557821917209	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9995868044077019	WITHOUT_CLASSIFICATION	4.1319559229823627E-4	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9998691849070086	WITHOUT_CLASSIFICATION	1.308150929914407E-4	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9996356607826569	WITHOUT_CLASSIFICATION	3.6433921734308703E-4	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9997020458199956	WITHOUT_CLASSIFICATION	2.979541800043907E-4	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9982101213494066	WITHOUT_CLASSIFICATION	0.0017898786505934493	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9976229701482208	WITHOUT_CLASSIFICATION	0.002377029851779162	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9996604052057598	WITHOUT_CLASSIFICATION	3.3959479424012476E-4	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9989165231135886	WITHOUT_CLASSIFICATION	0.001083476886411405	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9989165231135886	WITHOUT_CLASSIFICATION	0.001083476886411405	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9996988093035934	WITHOUT_CLASSIFICATION	3.0119069640651715E-4	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9995847999871442	WITHOUT_CLASSIFICATION	4.1520001285585056E-4	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9994899524046869	WITHOUT_CLASSIFICATION	5.100475953132491E-4	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9994899524046869	WITHOUT_CLASSIFICATION	5.100475953132491E-4	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9997265260727387	WITHOUT_CLASSIFICATION	2.7347392726125E-4	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9997656835027875	WITHOUT_CLASSIFICATION	2.343164972125251E-4	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9980777929164361	WITHOUT_CLASSIFICATION	0.0019222070835639164	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9997741624773677	WITHOUT_CLASSIFICATION	2.2583752263227887E-4	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995625848576565	WITHOUT_CLASSIFICATION	4.3741514234343416E-4	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.999644705947673	WITHOUT_CLASSIFICATION	3.552940523269338E-4	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.999644705947673	WITHOUT_CLASSIFICATION	3.552940523269338E-4	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9992833304843862	WITHOUT_CLASSIFICATION	7.166695156137457E-4	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9995904130918531	WITHOUT_CLASSIFICATION	4.095869081469328E-4	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.999585889909062	WITHOUT_CLASSIFICATION	4.1411009093791E-4	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.999585889909062	WITHOUT_CLASSIFICATION	4.1411009093791E-4	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.9997259228126831	WITHOUT_CLASSIFICATION	2.7407718731686017E-4	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9997715016645099	WITHOUT_CLASSIFICATION	2.2849833549018467E-4	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999905953447468	WITHOUT_CLASSIFICATION	9.40465525319542E-5	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999300532887858	WITHOUT_CLASSIFICATION	6.994671121422931E-5	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999268622619002	WITHOUT_CLASSIFICATION	7.313773809983149E-5	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.999588228026522	WITHOUT_CLASSIFICATION	4.11771973477954E-4	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9989614649085875	WITHOUT_CLASSIFICATION	0.0010385350914124938	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9995895398318044	WITHOUT_CLASSIFICATION	4.104601681956091E-4	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999018528628449	WITHOUT_CLASSIFICATION	9.814713715501377E-5	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9997181114742512	WITHOUT_CLASSIFICATION	2.8188852574877215E-4	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9996036611992423	WITHOUT_CLASSIFICATION	3.9633880075768747E-4	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9984890017421494	WITHOUT_CLASSIFICATION	0.0015109982578506524	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9997912473555144	WITHOUT_CLASSIFICATION	2.087526444856861E-4	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9997771462041632	WITHOUT_CLASSIFICATION	2.2285379583675003E-4	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9998331042035541	WITHOUT_CLASSIFICATION	1.6689579644581928E-4	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9997608748328731	WITHOUT_CLASSIFICATION	2.3912516712693433E-4	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9996943330668343	WITHOUT_CLASSIFICATION	3.0566693316573876E-4	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9987142606854253	WITHOUT_CLASSIFICATION	0.0012857393145747282	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9995366990277088	WITHOUT_CLASSIFICATION	4.633009722911619E-4	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.99952591852585	WITHOUT_CLASSIFICATION	4.740814741499454E-4	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9985426409100019	WITHOUT_CLASSIFICATION	0.0014573590899981228	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998680467543456	WITHOUT_CLASSIFICATION	1.3195324565446324E-4	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9988001048575809	WITHOUT_CLASSIFICATION	0.0011998951424191308	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9997904510890643	WITHOUT_CLASSIFICATION	2.0954891093561434E-4	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9991752461086101	WITHOUT_CLASSIFICATION	8.247538913899724E-4	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.999727242907825	WITHOUT_CLASSIFICATION	2.727570921749859E-4	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9997435055305347	WITHOUT_CLASSIFICATION	2.5649446946524496E-4	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999510594873559	WITHOUT_CLASSIFICATION	4.8940512644003395E-5	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999011356267892	WITHOUT_CLASSIFICATION	9.886437321079522E-5	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999116290443693	WITHOUT_CLASSIFICATION	8.837095563069985E-5	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9993098104750251	WITHOUT_CLASSIFICATION	6.901895249748008E-4	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9997582432910793	WITHOUT_CLASSIFICATION	2.417567089207484E-4	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9996415552205136	WITHOUT_CLASSIFICATION	3.5844477948641945E-4	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9997214394457156	WITHOUT_CLASSIFICATION	2.7856055428439086E-4	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9997943086507086	WITHOUT_CLASSIFICATION	2.0569134929140183E-4	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9996146549772146	WITHOUT_CLASSIFICATION	3.8534502278538327E-4	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999064975461438	WITHOUT_CLASSIFICATION	9.350245385616168E-5	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9947196639086281	WITHOUT_CLASSIFICATION	0.00528033609137187	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.9995975956720264	WITHOUT_CLASSIFICATION	4.024043279735674E-4	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.9995970177770733	WITHOUT_CLASSIFICATION	4.0298222292675694E-4	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9995909438983825	WITHOUT_CLASSIFICATION	4.090561016174228E-4	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.9949363425352834	WITHOUT_CLASSIFICATION	0.005063657464716541	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9998997423324899	WITHOUT_CLASSIFICATION	1.002576675100476E-4	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999076833505176	WITHOUT_CLASSIFICATION	9.231664948239885E-4	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9994775857308994	WITHOUT_CLASSIFICATION	5.224142691005786E-4	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9996132711542591	WITHOUT_CLASSIFICATION	3.86728845740886E-4	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9997408599930355	WITHOUT_CLASSIFICATION	2.5914000696446816E-4	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9998181767035055	WITHOUT_CLASSIFICATION	1.818232964944401E-4	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9997226419490503	WITHOUT_CLASSIFICATION	2.773580509498393E-4	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9978282291519109	WITHOUT_CLASSIFICATION	0.002171770848089052	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9996574520183262	WITHOUT_CLASSIFICATION	3.4254798167367726E-4	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9968484727232404	WITHOUT_CLASSIFICATION	0.003151527276759489	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9993809939838226	WITHOUT_CLASSIFICATION	6.190060161773884E-4	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9995795992323623	WITHOUT_CLASSIFICATION	4.2040076763769763E-4	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.994841096769867	WITHOUT_CLASSIFICATION	0.005158903230133034	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9997013497965263	WITHOUT_CLASSIFICATION	2.986502034737109E-4	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9997013497965263	WITHOUT_CLASSIFICATION	2.986502034737109E-4	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9985952270610992	WITHOUT_CLASSIFICATION	0.0014047729389008925	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9997652366652463	WITHOUT_CLASSIFICATION	2.34763334753725E-4	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9994068680221879	WITHOUT_CLASSIFICATION	5.931319778121366E-4	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9997501730706434	WITHOUT_CLASSIFICATION	2.4982692935663335E-4	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999723760772167	WITHOUT_CLASSIFICATION	2.7623922783309555E-4	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9995282054517778	WITHOUT_CLASSIFICATION	4.717945482221511E-4	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999349675258326	WITHOUT_CLASSIFICATION	6.503247416740228E-5	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999256238926462	WITHOUT_CLASSIFICATION	7.437610735381451E-5	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9998841410127931	WITHOUT_CLASSIFICATION	1.1585898720683299E-4	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9997657262204033	WITHOUT_CLASSIFICATION	2.3427377959678184E-4	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9998961826133353	WITHOUT_CLASSIFICATION	1.0381738666460761E-4	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9989123796527587	WITHOUT_CLASSIFICATION	0.0010876203472412842	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999275746100147	WITHOUT_CLASSIFICATION	7.2425389985298E-5	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999274319989354	WITHOUT_CLASSIFICATION	7.25680010645755E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998869457296842	WITHOUT_CLASSIFICATION	1.1305427031572798E-4	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998869457296842	WITHOUT_CLASSIFICATION	1.1305427031572798E-4	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9995236105858976	WITHOUT_CLASSIFICATION	4.7638941410236326E-4	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9981777257557857	WITHOUT_CLASSIFICATION	0.001822274244214287	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9997027565539156	WITHOUT_CLASSIFICATION	2.97243446084441E-4	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9995901070272142	WITHOUT_CLASSIFICATION	4.0989297278588556E-4	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9997832708099974	WITHOUT_CLASSIFICATION	2.1672919000264833E-4	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995885363085846	WITHOUT_CLASSIFICATION	4.1146369141535107E-4	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9996051608643088	WITHOUT_CLASSIFICATION	3.9483913569125925E-4	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.999606357078613	WITHOUT_CLASSIFICATION	3.9364292138705816E-4	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9998537030929515	WITHOUT_CLASSIFICATION	1.4629690704858785E-4	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999389909921856	WITHOUT_CLASSIFICATION	6.100900781447918E-5	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.999986899779644	WITHOUT_CLASSIFICATION	1.3100220356082697E-5	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.999884363805301	WITHOUT_CLASSIFICATION	1.1563619469904729E-4	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9984998941903315	WITHOUT_CLASSIFICATION	0.0015001058096685983	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999035769310461	WITHOUT_CLASSIFICATION	9.642306895387543E-5	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9989278068316442	WITHOUT_CLASSIFICATION	0.0010721931683558327	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999215509994138	WITHOUT_CLASSIFICATION	7.844900058624398E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999095887515482	WITHOUT_CLASSIFICATION	9.04112484518023E-5	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9931967425465084	WITHOUT_CLASSIFICATION	0.006803257453491638	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9998602561997101	WITHOUT_CLASSIFICATION	1.3974380028986737E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.7726789031534379	WITHOUT_CLASSIFICATION	0.22732109684656213	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9997507482757597	WITHOUT_CLASSIFICATION	2.492517242402854E-4	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9994233063261482	WITHOUT_CLASSIFICATION	5.766936738519262E-4	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9996277119861064	WITHOUT_CLASSIFICATION	3.7228801389348534E-4	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9997638184361624	WITHOUT_CLASSIFICATION	2.3618156383756994E-4	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9998098683973594	WITHOUT_CLASSIFICATION	1.9013160264049755E-4	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9995852286029993	WITHOUT_CLASSIFICATION	4.1477139700070876E-4	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9989420028102982	WITHOUT_CLASSIFICATION	0.001057997189701796	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999361847243171	WITHOUT_CLASSIFICATION	6.381527568279765E-5	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9987079051041429	WITHOUT_CLASSIFICATION	0.0012920948958572223	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9998175816103948	WITHOUT_CLASSIFICATION	1.8241838960513749E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9991672890050304	WITHOUT_CLASSIFICATION	8.327109949695615E-4	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9993802451950902	WITHOUT_CLASSIFICATION	6.197548049097747E-4	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.998979423248505	WITHOUT_CLASSIFICATION	0.0010205767514951081	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9998379060519927	WITHOUT_CLASSIFICATION	1.620939480071823E-4	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999590841604303	WITHOUT_CLASSIFICATION	4.0915839569676724E-5	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999916565372112	WITHOUT_CLASSIFICATION	8.343462788798122E-5	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9991033529022408	WITHOUT_CLASSIFICATION	8.966470977590654E-4	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999290764948162	WITHOUT_CLASSIFICATION	7.092350518378719E-4	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997730319435171	WITHOUT_CLASSIFICATION	2.2696805648293598E-4	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9989338100888895	WITHOUT_CLASSIFICATION	0.00106618991111052	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9988430355714351	WITHOUT_CLASSIFICATION	0.001156964428564923	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999402975012484	WITHOUT_CLASSIFICATION	5.970249875166979E-5	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.998443784358786	WITHOUT_CLASSIFICATION	0.0015562156412140288	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.998443784358786	WITHOUT_CLASSIFICATION	0.0015562156412140288	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9998494026557823	WITHOUT_CLASSIFICATION	1.5059734421769334E-4	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9972807386869434	WITHOUT_CLASSIFICATION	0.002719261313056518	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9998400508207389	WITHOUT_CLASSIFICATION	1.5994917926102434E-4	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9997367602251118	WITHOUT_CLASSIFICATION	2.632397748882026E-4	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9986605157169629	WITHOUT_CLASSIFICATION	0.0013394842830370436	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9996444163722205	WITHOUT_CLASSIFICATION	3.555836277795854E-4	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9978450378153871	WITHOUT_CLASSIFICATION	0.0021549621846127906	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9995185971124378	WITHOUT_CLASSIFICATION	4.8140288756214094E-4	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9985266180919009	WITHOUT_CLASSIFICATION	0.0014733819080990885	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995717313052253	WITHOUT_CLASSIFICATION	4.2826869477476933E-4	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995717313052253	WITHOUT_CLASSIFICATION	4.2826869477476933E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998800305956348	WITHOUT_CLASSIFICATION	1.19969404365095E-4	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9993312858295235	WITHOUT_CLASSIFICATION	6.68714170476516E-4	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999685566780395	WITHOUT_CLASSIFICATION	3.1443321960435204E-5	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9993741571775345	WITHOUT_CLASSIFICATION	6.258428224654836E-4	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9996997040827438	WITHOUT_CLASSIFICATION	3.0029591725623436E-4	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999451433402958	WITHOUT_CLASSIFICATION	5.4856659704219513E-5	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9976327199310046	WITHOUT_CLASSIFICATION	0.0023672800689954463	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9996700266936107	WITHOUT_CLASSIFICATION	3.2997330638929274E-4	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9995771995232812	WITHOUT_CLASSIFICATION	4.228004767188578E-4	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9996076519668038	WITHOUT_CLASSIFICATION	3.923480331962154E-4	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9998442377005053	WITHOUT_CLASSIFICATION	1.557622994946207E-4	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9991076630429486	WITHOUT_CLASSIFICATION	8.923369570514979E-4	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999101689053245	WITHOUT_CLASSIFICATION	8.983109467549682E-4	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9996648632730566	WITHOUT_CLASSIFICATION	3.351367269434655E-4	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9994805549111031	WITHOUT_CLASSIFICATION	5.194450888968688E-4	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9995976689454729	WITHOUT_CLASSIFICATION	4.023310545272283E-4	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9991693622216903	WITHOUT_CLASSIFICATION	8.306377783096839E-4	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9994204376298915	WITHOUT_CLASSIFICATION	5.795623701084757E-4	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9996459006217085	WITHOUT_CLASSIFICATION	3.5409937829150064E-4	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9996760433518872	WITHOUT_CLASSIFICATION	3.239566481128423E-4	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9990230531911757	WITHOUT_CLASSIFICATION	9.769468088242556E-4	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9992129093216386	WITHOUT_CLASSIFICATION	7.870906783614003E-4	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9978934165923451	WITHOUT_CLASSIFICATION	0.002106583407654827	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9923896779982367	WITHOUT_CLASSIFICATION	0.007610322001763287	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9996005362597588	WITHOUT_CLASSIFICATION	3.9946374024131884E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9887106803033175	WITHOUT_CLASSIFICATION	0.011289319696682535	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9980030322812465	WITHOUT_CLASSIFICATION	0.0019969677187533412	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9992688478699857	WITHOUT_CLASSIFICATION	7.311521300142427E-4	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9997759655324177	WITHOUT_CLASSIFICATION	2.2403446758236428E-4	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.985912276198915	WITHOUT_CLASSIFICATION	0.014087723801084978	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.999347550884355	WITHOUT_CLASSIFICATION	6.524491156450079E-4	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9996447212100935	WITHOUT_CLASSIFICATION	3.552787899064247E-4	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9998892759796427	WITHOUT_CLASSIFICATION	1.107240203571845E-4	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9982893407972441	WITHOUT_CLASSIFICATION	0.0017106592027560045	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9967591267503471	WITHOUT_CLASSIFICATION	0.0032408732496529784	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999707095918099	WITHOUT_CLASSIFICATION	2.929040819012543E-5	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9990137568792905	WITHOUT_CLASSIFICATION	9.862431207095237E-4	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9995524632944366	WITHOUT_CLASSIFICATION	4.475367055634202E-4	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999275746100147	WITHOUT_CLASSIFICATION	7.2425389985298E-5	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9998967115860609	WITHOUT_CLASSIFICATION	1.032884139391083E-4	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9985939450622586	WITHOUT_CLASSIFICATION	0.0014060549377413578	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9986105603308542	WITHOUT_CLASSIFICATION	0.0013894396691458205	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.999956499567835	WITHOUT_CLASSIFICATION	4.350043216500718E-5	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9997556410034031	WITHOUT_CLASSIFICATION	2.44358996596913E-4	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9998783780251475	WITHOUT_CLASSIFICATION	1.2162197485252239E-4	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9991876790026275	WITHOUT_CLASSIFICATION	8.123209973724787E-4	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9315102308732468	WITHOUT_CLASSIFICATION	0.06848976912675321	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9998635607431203	WITHOUT_CLASSIFICATION	1.364392568797115E-4	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9996586174594783	WITHOUT_CLASSIFICATION	3.4138254052182927E-4	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9998459378606834	WITHOUT_CLASSIFICATION	1.54062139316565E-4	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9903577465283493	WITHOUT_CLASSIFICATION	0.009642253471650717	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9988951117650028	WITHOUT_CLASSIFICATION	0.0011048882349972895	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9997590240341026	WITHOUT_CLASSIFICATION	2.4097596589743353E-4	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9951221194722125	WITHOUT_CLASSIFICATION	0.004877880527787465	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998228480427857	WITHOUT_CLASSIFICATION	1.7715195721432767E-4	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999529979562194	WITHOUT_CLASSIFICATION	4.700204378058972E-4	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9997248267416963	WITHOUT_CLASSIFICATION	2.751732583037156E-4	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9998819644380651	WITHOUT_CLASSIFICATION	1.1803556193488422E-4	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9927384020121185	WITHOUT_CLASSIFICATION	0.00726159798788155	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998228480427857	WITHOUT_CLASSIFICATION	1.7715195721432767E-4	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9956005959636971	WITHOUT_CLASSIFICATION	0.0043994040363028114	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.975719946516452	WITHOUT_CLASSIFICATION	0.02428005348354808	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9996176556718646	WITHOUT_CLASSIFICATION	3.823443281354046E-4	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9979542233005115	WITHOUT_CLASSIFICATION	0.0020457766994884984	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999016460228755	WITHOUT_CLASSIFICATION	9.835397712453443E-5	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9992591546512829	WITHOUT_CLASSIFICATION	7.408453487171235E-4	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999577408606768	WITHOUT_CLASSIFICATION	4.225913932320208E-5	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9998451408627145	WITHOUT_CLASSIFICATION	1.5485913728558676E-4	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999650274364726	WITHOUT_CLASSIFICATION	3.4972563527314496E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9966147649316442	WITHOUT_CLASSIFICATION	0.0033852350683557853	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9982326267976867	WITHOUT_CLASSIFICATION	0.0017673732023132823	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9918122909902884	WITHOUT_CLASSIFICATION	0.008187709009711604	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9963313676871339	WITHOUT_CLASSIFICATION	0.0036686323128659448	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999394984267721	WITHOUT_CLASSIFICATION	6.050157322795652E-5	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.999847955373157	WITHOUT_CLASSIFICATION	1.5204462684299016E-4	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.999529979562194	WITHOUT_CLASSIFICATION	4.700204378058972E-4	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9994456995918561	WITHOUT_CLASSIFICATION	5.543004081437525E-4	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9997548392713916	WITHOUT_CLASSIFICATION	2.4516072860828874E-4	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.999346803434855	WITHOUT_CLASSIFICATION	6.531965651449099E-4	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9927085619418087	WITHOUT_CLASSIFICATION	0.007291438058191282	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9998653345367844	WITHOUT_CLASSIFICATION	1.346654632155901E-4	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9992413791702104	WITHOUT_CLASSIFICATION	7.58620829789683E-4	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9996075483247644	WITHOUT_CLASSIFICATION	3.9245167523556406E-4	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9994872246864589	WITHOUT_CLASSIFICATION	5.12775313541074E-4	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9996343702190601	WITHOUT_CLASSIFICATION	3.6562978093990163E-4	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999599919175236	WITHOUT_CLASSIFICATION	4.000808247636319E-5	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.997837107658595	WITHOUT_CLASSIFICATION	0.0021628923414049183	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9874627257399006	WITHOUT_CLASSIFICATION	0.012537274260099412	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999427829024542	WITHOUT_CLASSIFICATION	5.72170975458627E-5	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9995845438085791	WITHOUT_CLASSIFICATION	4.154561914209284E-4	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999866685697679	WITHOUT_CLASSIFICATION	1.3331430232089826E-5	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9998308327981285	WITHOUT_CLASSIFICATION	1.691672018715928E-4	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9994583583657695	WITHOUT_CLASSIFICATION	5.416416342305232E-4	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9995704116488895	WITHOUT_CLASSIFICATION	4.2958835111051366E-4	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9997983815885787	WITHOUT_CLASSIFICATION	2.0161841142125292E-4	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9997209816304888	WITHOUT_CLASSIFICATION	2.790183695112458E-4	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999461537935294	WITHOUT_CLASSIFICATION	5.384620647055155E-5	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9995809754667203	WITHOUT_CLASSIFICATION	4.1902453327977477E-4	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9986968485093847	WITHOUT_CLASSIFICATION	0.0013031514906153055	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9997237438781582	WITHOUT_CLASSIFICATION	2.7625612184175094E-4	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9984526234073045	WITHOUT_CLASSIFICATION	0.0015473765926955984	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998027335036619	WITHOUT_CLASSIFICATION	1.972664963380759E-4	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998027335036619	WITHOUT_CLASSIFICATION	1.972664963380759E-4	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9995533028078158	WITHOUT_CLASSIFICATION	4.4669719218416677E-4	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9997110525811779	WITHOUT_CLASSIFICATION	2.8894741882214093E-4	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9995431787128508	WITHOUT_CLASSIFICATION	4.5682128714917433E-4	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9998939737231909	WITHOUT_CLASSIFICATION	1.0602627680915918E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9998552305385929	WITHOUT_CLASSIFICATION	1.4476946140703343E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9998552305385929	WITHOUT_CLASSIFICATION	1.4476946140703343E-4	DEFECT
}	WITHOUT_CLASSIFICATION	0.9998417748609435	WITHOUT_CLASSIFICATION	1.5822513905658272E-4	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.999890383789941	WITHOUT_CLASSIFICATION	1.0961621005889502E-4	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9996305747612301	WITHOUT_CLASSIFICATION	3.6942523876984704E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9984876873419034	WITHOUT_CLASSIFICATION	0.0015123126580966857	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.999529979562194	WITHOUT_CLASSIFICATION	4.700204378058972E-4	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9988838753335749	WITHOUT_CLASSIFICATION	0.0011161246664251276	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.994977243749811	WITHOUT_CLASSIFICATION	0.005022756250189053	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9985327270235168	WITHOUT_CLASSIFICATION	0.0014672729764831983	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9997688868640495	WITHOUT_CLASSIFICATION	2.3111313595043512E-4	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9998295071130285	WITHOUT_CLASSIFICATION	1.704928869713795E-4	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9933142842834772	WITHOUT_CLASSIFICATION	0.006685715716522721	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995133310842524	WITHOUT_CLASSIFICATION	4.8666891574760133E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995133310842524	WITHOUT_CLASSIFICATION	4.8666891574760133E-4	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.999529979562194	WITHOUT_CLASSIFICATION	4.700204378058972E-4	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.99983167772864	WITHOUT_CLASSIFICATION	1.6832227136002155E-4	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9995981211778404	WITHOUT_CLASSIFICATION	4.0187882215957695E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999546467171538	WITHOUT_CLASSIFICATION	4.535328284615917E-5	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999696126944125	WITHOUT_CLASSIFICATION	3.0387305587501476E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9998319464938957	WITHOUT_CLASSIFICATION	1.6805350610438395E-4	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9993749792910344	WITHOUT_CLASSIFICATION	6.250207089656362E-4	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9995798645188866	WITHOUT_CLASSIFICATION	4.2013548111337107E-4	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999010885978402	WITHOUT_CLASSIFICATION	9.891140215984793E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9966147649316442	WITHOUT_CLASSIFICATION	0.0033852350683557853	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9998960641128778	WITHOUT_CLASSIFICATION	1.0393588712219516E-4	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999093485409934	WITHOUT_CLASSIFICATION	9.06514590066009E-4	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9998322047647616	WITHOUT_CLASSIFICATION	1.6779523523847853E-4	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9995651296288783	WITHOUT_CLASSIFICATION	4.3487037112168445E-4	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996943705483435	WITHOUT_CLASSIFICATION	3.0562945165653603E-4	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9995590618831858	WITHOUT_CLASSIFICATION	4.409381168141914E-4	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999299726612744	WITHOUT_CLASSIFICATION	7.002733872563109E-5	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.999297334127963	WITHOUT_CLASSIFICATION	7.026658720370581E-4	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9992770206532433	WITHOUT_CLASSIFICATION	7.229793467566632E-4	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9988832604751087	WITHOUT_CLASSIFICATION	0.0011167395248912386	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9988832604751087	WITHOUT_CLASSIFICATION	0.0011167395248912386	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998626117620621	WITHOUT_CLASSIFICATION	1.3738823793786207E-4	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9998789128312454	WITHOUT_CLASSIFICATION	1.2108716875451912E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.999842922878908	WITHOUT_CLASSIFICATION	1.5707712109200067E-4	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9994466798529501	WITHOUT_CLASSIFICATION	5.533201470499557E-4	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9998001787500292	WITHOUT_CLASSIFICATION	1.9982124997087693E-4	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9967899548550186	WITHOUT_CLASSIFICATION	0.0032100451449814014	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9978914076684422	WITHOUT_CLASSIFICATION	0.002108592331557841	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9977666488802298	WITHOUT_CLASSIFICATION	0.002233351119770172	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9992633873394752	WITHOUT_CLASSIFICATION	7.366126605247681E-4	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9994524623470114	WITHOUT_CLASSIFICATION	5.475376529887503E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995734736060043	WITHOUT_CLASSIFICATION	4.2652639399570785E-4	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9936181361487886	WITHOUT_CLASSIFICATION	0.006381863851211393	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9994079936923599	WITHOUT_CLASSIFICATION	5.92006307640114E-4	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999930391492683	WITHOUT_CLASSIFICATION	6.9608507317663546E-6	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9998543064723072	WITHOUT_CLASSIFICATION	1.4569352769284798E-4	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9986286943799809	WITHOUT_CLASSIFICATION	0.0013713056200191087	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9533008244301721	WITHOUT_CLASSIFICATION	0.046699175569827944	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998439820515895	WITHOUT_CLASSIFICATION	1.5601794841057373E-4	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9988309954069093	WITHOUT_CLASSIFICATION	0.0011690045930907024	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.999976725831643	WITHOUT_CLASSIFICATION	2.3274168357024327E-5	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.992312862556231	WITHOUT_CLASSIFICATION	0.007687137443768978	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9993855444578258	WITHOUT_CLASSIFICATION	6.144555421742268E-4	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999905953447468	WITHOUT_CLASSIFICATION	9.40465525319542E-5	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9365936091239866	WITHOUT_CLASSIFICATION	0.06340639087601337	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998580154885569	WITHOUT_CLASSIFICATION	1.4198451144310946E-4	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998580154885569	WITHOUT_CLASSIFICATION	1.4198451144310946E-4	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9930586844319547	WITHOUT_CLASSIFICATION	0.006941315568045247	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9987840207327219	WITHOUT_CLASSIFICATION	0.0012159792672780246	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9976855630898617	WITHOUT_CLASSIFICATION	0.002314436910138363	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9996015715752093	WITHOUT_CLASSIFICATION	3.9842842479069344E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9995850528743826	WITHOUT_CLASSIFICATION	4.149471256174833E-4	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9985899866282234	WITHOUT_CLASSIFICATION	0.0014100133717765933	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.994621574501012	WITHOUT_CLASSIFICATION	0.005378425498987999	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9998658488755565	WITHOUT_CLASSIFICATION	1.3415112444340252E-4	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.9911808826141691	WITHOUT_CLASSIFICATION	0.008819117385830775	DEFECT
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.9520188437662067	WITHOUT_CLASSIFICATION	0.047981156233793204	DEFECT
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9983699172347825	WITHOUT_CLASSIFICATION	0.0016300827652174932	DEFECT
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9984493101680443	WITHOUT_CLASSIFICATION	0.0015506898319557429	DEFECT
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.995234255410762	WITHOUT_CLASSIFICATION	0.00476574458923794	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.9999037582252712	WITHOUT_CLASSIFICATION	9.624177472883442E-5	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9917799525801028	WITHOUT_CLASSIFICATION	0.008220047419897299	DEFECT
TODO : should this be an error?	DEFECT	0.9994618971920137	WITHOUT_CLASSIFICATION	5.381028079862855E-4	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.9986369247070405	WITHOUT_CLASSIFICATION	0.0013630752929595954	DEFECT
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.8711778046870547	DEFECT	0.12882219531294523	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.847306849475134	DEFECT	0.15269315052486598	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.847306849475134	DEFECT	0.15269315052486598	WITHOUT_CLASSIFICATION
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.5853522433814168	DEFECT	0.41464775661858316	WITHOUT_CLASSIFICATION
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9996397893919245	WITHOUT_CLASSIFICATION	3.602106080754059E-4	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.5174548304043929	WITHOUT_CLASSIFICATION	0.48254516959560717	DEFECT
this call is side-effecty	DEFECT	0.9997410052149532	WITHOUT_CLASSIFICATION	2.5899478504674416E-4	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.9136443085420812	DEFECT	0.08635569145791874	WITHOUT_CLASSIFICATION
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.8450512845873558	WITHOUT_CLASSIFICATION	0.15494871541264418	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.9736347745302002	WITHOUT_CLASSIFICATION	0.026365225469799775	DEFECT
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.8405025817631013	WITHOUT_CLASSIFICATION	0.1594974182368986	DEFECT
TODO: is this completely correct?	DEFECT	0.6745230295272618	WITHOUT_CLASSIFICATION	0.32547697047273816	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.5367391486633039	DEFECT	0.4632608513366961	WITHOUT_CLASSIFICATION
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.9552134590100562	WITHOUT_CLASSIFICATION	0.04478654098994377	DEFECT
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.6992153920353127	WITHOUT_CLASSIFICATION	0.3007846079646873	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.7457641098854239	WITHOUT_CLASSIFICATION	0.2542358901145762	DEFECT
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.9695861355712307	DEFECT	0.030413864428769356	WITHOUT_CLASSIFICATION
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.5104704425869463	WITHOUT_CLASSIFICATION	0.48952955741305376	DEFECT
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.7541144831907975	DEFECT	0.24588551680920248	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.8549523931551428	WITHOUT_CLASSIFICATION	0.14504760684485718	DEFECT
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9312156931992305	WITHOUT_CLASSIFICATION	0.06878430680076955	DEFECT
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.5593508157407604	WITHOUT_CLASSIFICATION	0.44064918425923955	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.847306849475134	DEFECT	0.15269315052486598	WITHOUT_CLASSIFICATION
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.7935427212605506	DEFECT	0.2064572787394493	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.794925231072543	DEFECT	0.20507476892745707	WITHOUT_CLASSIFICATION
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.6031704238794401	WITHOUT_CLASSIFICATION	0.39682957612055986	DEFECT
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9995882709312969	WITHOUT_CLASSIFICATION	4.1172906870311926E-4	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.9861554706452906	WITHOUT_CLASSIFICATION	0.013844529354709385	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9991112559965678	WITHOUT_CLASSIFICATION	8.887440034322435E-4	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9843015999791144	WITHOUT_CLASSIFICATION	0.015698400020885656	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.9997703623535134	WITHOUT_CLASSIFICATION	2.2963764648659506E-4	DEFECT
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.6941222559473429	WITHOUT_CLASSIFICATION	0.30587774405265705	DEFECT
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.936973222891317	WITHOUT_CLASSIFICATION	0.06302677710868294	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.675199394312751	WITHOUT_CLASSIFICATION	0.32480060568724894	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.9289950802784389	DEFECT	0.07100491972156119	WITHOUT_CLASSIFICATION
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9993159299514848	WITHOUT_CLASSIFICATION	6.840700485152578E-4	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.8452348738807379	WITHOUT_CLASSIFICATION	0.1547651261192621	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.7077190384229386	DEFECT	0.29228096157706135	WITHOUT_CLASSIFICATION
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.7047340399797363	WITHOUT_CLASSIFICATION	0.2952659600202638	DEFECT
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.989611934045138	DEFECT	0.010388065954861962	WITHOUT_CLASSIFICATION
