test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999842154557688	WITHOUT_CLASSIFICATION	1.578454423118901E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999918205363232	WITHOUT_CLASSIFICATION	8.17946367683412E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999918205363232	WITHOUT_CLASSIFICATION	8.17946367683412E-6	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9996346679175759	WITHOUT_CLASSIFICATION	3.6533208242410834E-4	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999743987273148	WITHOUT_CLASSIFICATION	2.560127268534785E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999365238298336	WITHOUT_CLASSIFICATION	6.347617016646649E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999365238298336	WITHOUT_CLASSIFICATION	6.347617016646649E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999746875851004	WITHOUT_CLASSIFICATION	2.5312414899488254E-5	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998286155143686	WITHOUT_CLASSIFICATION	1.7138448563137548E-4	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999076276654834	WITHOUT_CLASSIFICATION	9.237233451671307E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999745176516226	WITHOUT_CLASSIFICATION	2.5482348377354296E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999849695595837	WITHOUT_CLASSIFICATION	1.5030440416172088E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999849695595837	WITHOUT_CLASSIFICATION	1.5030440416172088E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999707752741822	WITHOUT_CLASSIFICATION	2.9224725817818124E-5	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998767396829326	WITHOUT_CLASSIFICATION	1.2326031706748464E-4	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.9999491297097288	WITHOUT_CLASSIFICATION	5.0870290271206586E-5	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9996730791426963	WITHOUT_CLASSIFICATION	3.2692085730377335E-4	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9988609123869379	WITHOUT_CLASSIFICATION	0.0011390876130621696	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.9999713219428336	WITHOUT_CLASSIFICATION	2.8678057166448074E-5	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999195049741174	WITHOUT_CLASSIFICATION	8.0495025882574E-5	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999112218359052	WITHOUT_CLASSIFICATION	8.877816409481286E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9983637280103638	WITHOUT_CLASSIFICATION	0.0016362719896362268	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999714063331986	WITHOUT_CLASSIFICATION	2.859366680140996E-5	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999077236423213	WITHOUT_CLASSIFICATION	9.227635767872222E-5	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999931828964108	WITHOUT_CLASSIFICATION	6.817103589192334E-5	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.7943668237286152	WITHOUT_CLASSIFICATION	0.2056331762713848	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999961474927341	WITHOUT_CLASSIFICATION	3.852507265948202E-6	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.999899410395031	WITHOUT_CLASSIFICATION	1.0058960496895824E-4	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.999991033087289	WITHOUT_CLASSIFICATION	8.966912711080602E-6	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9960100925612343	WITHOUT_CLASSIFICATION	0.003989907438765674	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999588064295887	WITHOUT_CLASSIFICATION	4.1193570411196396E-5	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9997085966947055	WITHOUT_CLASSIFICATION	2.914033052945908E-4	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998234775589122	WITHOUT_CLASSIFICATION	1.765224410878923E-4	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999242488996902	WITHOUT_CLASSIFICATION	7.575110030970416E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999617821246571	WITHOUT_CLASSIFICATION	3.8217875342774444E-5	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999481455577629	WITHOUT_CLASSIFICATION	5.185444223707752E-5	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997725060994543	WITHOUT_CLASSIFICATION	2.2749390054575922E-4	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997725060994543	WITHOUT_CLASSIFICATION	2.2749390054575922E-4	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999115701974339	WITHOUT_CLASSIFICATION	8.842980256603638E-5	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9948287744492775	WITHOUT_CLASSIFICATION	0.005171225550722482	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999710445359873	WITHOUT_CLASSIFICATION	2.895546401263807E-5	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999710445359873	WITHOUT_CLASSIFICATION	2.895546401263807E-5	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999115701974339	WITHOUT_CLASSIFICATION	8.842980256603638E-5	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.8403662558363227	WITHOUT_CLASSIFICATION	0.15963374416367734	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998220327080085	WITHOUT_CLASSIFICATION	1.779672919914542E-4	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9977804534726362	WITHOUT_CLASSIFICATION	0.002219546527363752	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999119011980031	WITHOUT_CLASSIFICATION	8.809880199690116E-5	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.999995233249734	WITHOUT_CLASSIFICATION	4.766750266025624E-6	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.867024258365181	WITHOUT_CLASSIFICATION	0.13297574163481898	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999196187198316	WITHOUT_CLASSIFICATION	8.038128016845082E-5	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999329738082448	WITHOUT_CLASSIFICATION	6.702619175516415E-5	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9999317162037813	WITHOUT_CLASSIFICATION	6.828379621872204E-5	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999873951562004	WITHOUT_CLASSIFICATION	1.2604843799698004E-5	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999710445359873	WITHOUT_CLASSIFICATION	2.895546401263807E-5	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999883071443056	WITHOUT_CLASSIFICATION	1.1692855694400244E-5	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998668240812526	WITHOUT_CLASSIFICATION	1.3317591874734388E-4	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9982720242984614	WITHOUT_CLASSIFICATION	0.001727975701538546	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9968784215286535	WITHOUT_CLASSIFICATION	0.003121578471346477	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999811597848188	WITHOUT_CLASSIFICATION	1.884021518119047E-5	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9995024676343942	WITHOUT_CLASSIFICATION	4.975323656058327E-4	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998514193591062	WITHOUT_CLASSIFICATION	1.485806408938784E-4	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999134508290154	WITHOUT_CLASSIFICATION	8.654917098454183E-5	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999975610003135	WITHOUT_CLASSIFICATION	2.4389996865014536E-5	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999991812277701	WITHOUT_CLASSIFICATION	8.187722298664454E-7	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9996851667239995	WITHOUT_CLASSIFICATION	3.1483327600046823E-4	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999496512932873	WITHOUT_CLASSIFICATION	5.0348706712866436E-5	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9886839780322764	WITHOUT_CLASSIFICATION	0.011316021967723739	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9998227503986977	WITHOUT_CLASSIFICATION	1.772496013023395E-4	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9998889465798028	WITHOUT_CLASSIFICATION	1.1105342019722948E-4	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999377465851561	WITHOUT_CLASSIFICATION	6.225341484390009E-5	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9985065826661539	WITHOUT_CLASSIFICATION	0.0014934173338460254	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999572115319744	WITHOUT_CLASSIFICATION	4.278846802553199E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999903682984967	WITHOUT_CLASSIFICATION	9.631701503209713E-6	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999588368743998	WITHOUT_CLASSIFICATION	4.116312560028749E-5	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998753558538547	WITHOUT_CLASSIFICATION	1.2464414614534087E-4	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9994596277252672	WITHOUT_CLASSIFICATION	5.403722747328124E-4	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998720149172203	WITHOUT_CLASSIFICATION	1.279850827796719E-4	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999857367796603	WITHOUT_CLASSIFICATION	1.4263220339736649E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9994596277252672	WITHOUT_CLASSIFICATION	5.403722747328124E-4	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9983147780080665	WITHOUT_CLASSIFICATION	0.0016852219919336131	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9984956820603037	WITHOUT_CLASSIFICATION	0.0015043179396962655	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999681784097865	WITHOUT_CLASSIFICATION	3.1821590213463226E-5	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.9999360073102499	WITHOUT_CLASSIFICATION	6.399268975007314E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999572053157268	WITHOUT_CLASSIFICATION	4.279468427318363E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999572053157268	WITHOUT_CLASSIFICATION	4.279468427318363E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998774812850582	WITHOUT_CLASSIFICATION	1.2251871494185434E-4	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999969724328994	WITHOUT_CLASSIFICATION	3.0275671004930466E-6	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9997538019621434	WITHOUT_CLASSIFICATION	2.461980378566822E-4	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999597732568034	WITHOUT_CLASSIFICATION	4.0226743196565715E-5	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9998577891287243	WITHOUT_CLASSIFICATION	1.4221087127571448E-4	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999952269882528	WITHOUT_CLASSIFICATION	4.773011747143946E-6	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999422553604227	WITHOUT_CLASSIFICATION	5.774463957727815E-5	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9999923501744913	WITHOUT_CLASSIFICATION	7.649825508675143E-6	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999495189195686	WITHOUT_CLASSIFICATION	5.04810804312398E-5	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999538692335133	WITHOUT_CLASSIFICATION	4.61307664867353E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999779473864641	WITHOUT_CLASSIFICATION	2.2052613535956186E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999779473864641	WITHOUT_CLASSIFICATION	2.2052613535956186E-5	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9997798734346112	WITHOUT_CLASSIFICATION	2.2012656538881564E-4	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999847041539682	WITHOUT_CLASSIFICATION	1.5295846031811289E-4	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998918165267136	WITHOUT_CLASSIFICATION	1.0818347328645369E-4	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999779473864641	WITHOUT_CLASSIFICATION	2.2052613535956186E-5	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9997798734346112	WITHOUT_CLASSIFICATION	2.2012656538881564E-4	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9997798734346112	WITHOUT_CLASSIFICATION	2.2012656538881564E-4	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999909962930111	WITHOUT_CLASSIFICATION	9.003706988897383E-5	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.999956248469668	WITHOUT_CLASSIFICATION	4.375153033200315E-5	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999513797018511	WITHOUT_CLASSIFICATION	4.862029814897171E-5	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999555126951899	WITHOUT_CLASSIFICATION	4.448730481011953E-5	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9991841589223994	WITHOUT_CLASSIFICATION	8.158410776007153E-4	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9991841589223994	WITHOUT_CLASSIFICATION	8.158410776007153E-4	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9996702827813554	WITHOUT_CLASSIFICATION	3.2971721864470015E-4	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999363428764187	WITHOUT_CLASSIFICATION	6.365712358118527E-5	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.999959051109095	WITHOUT_CLASSIFICATION	4.094889090498102E-5	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.999899561479526	WITHOUT_CLASSIFICATION	1.0043852047395693E-4	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.999899561479526	WITHOUT_CLASSIFICATION	1.0043852047395693E-4	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999509127305757	WITHOUT_CLASSIFICATION	4.908726942429778E-5	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999699489934523	WITHOUT_CLASSIFICATION	3.0051006547703605E-4	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999265171256055	WITHOUT_CLASSIFICATION	7.348287439443985E-5	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9995522622419046	WITHOUT_CLASSIFICATION	4.4773775809535887E-4	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999832271095841	WITHOUT_CLASSIFICATION	1.6772890415891503E-5	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999863714293557	WITHOUT_CLASSIFICATION	1.3628570644294954E-4	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998592454262759	WITHOUT_CLASSIFICATION	1.4075457372410798E-4	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999843498726273	WITHOUT_CLASSIFICATION	1.565012737274285E-5	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999265171256055	WITHOUT_CLASSIFICATION	7.348287439443985E-5	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999659432836816	WITHOUT_CLASSIFICATION	3.4056716318406684E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999169238626222	WITHOUT_CLASSIFICATION	8.307613737779003E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999169238626222	WITHOUT_CLASSIFICATION	8.307613737779003E-5	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999982303757077	WITHOUT_CLASSIFICATION	1.769624292368403E-6	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999603595664679	WITHOUT_CLASSIFICATION	3.96404335320187E-5	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.999861955412698	WITHOUT_CLASSIFICATION	1.3804458730200839E-4	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9989497244679888	WITHOUT_CLASSIFICATION	0.0010502755320112465	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9996917030439705	WITHOUT_CLASSIFICATION	3.082969560295745E-4	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999845610240933	WITHOUT_CLASSIFICATION	1.543897590673423E-5	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.9999666011776406	WITHOUT_CLASSIFICATION	3.3398822359431604E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9996865637113403	WITHOUT_CLASSIFICATION	3.134362886596498E-4	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999667623019483	WITHOUT_CLASSIFICATION	3.3237698051637436E-5	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999878682345141	WITHOUT_CLASSIFICATION	1.2131765485889909E-5	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999878682345141	WITHOUT_CLASSIFICATION	1.2131765485889909E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999363369757113	WITHOUT_CLASSIFICATION	6.366302428882168E-5	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999842154557688	WITHOUT_CLASSIFICATION	1.578454423118901E-5	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999889611353329	WITHOUT_CLASSIFICATION	1.103886466725235E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999918205363232	WITHOUT_CLASSIFICATION	8.17946367683412E-6	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9998334760093186	WITHOUT_CLASSIFICATION	1.6652399068140775E-4	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9998773590280433	WITHOUT_CLASSIFICATION	1.2264097195670181E-4	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9998891568902608	WITHOUT_CLASSIFICATION	1.1084310973923285E-4	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9997188001573815	WITHOUT_CLASSIFICATION	2.811998426185233E-4	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9969790289271921	WITHOUT_CLASSIFICATION	0.0030209710728078243	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999886229477919	WITHOUT_CLASSIFICATION	1.1377052208136998E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999711098499823	WITHOUT_CLASSIFICATION	2.88901500177234E-5	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999555047970585	WITHOUT_CLASSIFICATION	4.449520294150535E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9997188001573815	WITHOUT_CLASSIFICATION	2.811998426185233E-4	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9985446261841158	WITHOUT_CLASSIFICATION	0.0014553738158842478	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9985728918266861	WITHOUT_CLASSIFICATION	0.0014271081733139034	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.9998892854710486	WITHOUT_CLASSIFICATION	1.1071452895135735E-4	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999575009557519	WITHOUT_CLASSIFICATION	4.249904424811409E-5	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9997682027969031	WITHOUT_CLASSIFICATION	2.317972030969228E-4	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999365238298336	WITHOUT_CLASSIFICATION	6.347617016646649E-5	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9973815273664678	WITHOUT_CLASSIFICATION	0.0026184726335322863	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999783670345346	WITHOUT_CLASSIFICATION	2.1632965465391118E-5	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999615365476032	WITHOUT_CLASSIFICATION	3.8463452396814265E-5	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999027560346795	WITHOUT_CLASSIFICATION	9.724396532048658E-5	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999709791038739	WITHOUT_CLASSIFICATION	2.9020896126133097E-5	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9997581619011804	WITHOUT_CLASSIFICATION	2.418380988196263E-4	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9997989652913282	WITHOUT_CLASSIFICATION	2.0103470867174195E-4	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.9994488368509598	WITHOUT_CLASSIFICATION	5.511631490401465E-4	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9985609917339866	WITHOUT_CLASSIFICATION	0.00143900826601334	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.9998433482836812	WITHOUT_CLASSIFICATION	1.5665171631895272E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999918205363232	WITHOUT_CLASSIFICATION	8.17946367683412E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999918205363232	WITHOUT_CLASSIFICATION	8.17946367683412E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999711098499823	WITHOUT_CLASSIFICATION	2.88901500177234E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999709791038739	WITHOUT_CLASSIFICATION	2.9020896126133097E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999746875851004	WITHOUT_CLASSIFICATION	2.5312414899488254E-5	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.999824992762969	WITHOUT_CLASSIFICATION	1.750072370311071E-4	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999788891558743	WITHOUT_CLASSIFICATION	2.1110844125584972E-5	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9997370881765774	WITHOUT_CLASSIFICATION	2.6291182342256733E-4	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.999970986464219	WITHOUT_CLASSIFICATION	2.901353578092595E-5	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9965833844921115	WITHOUT_CLASSIFICATION	0.0034166155078884	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9999714293748454	WITHOUT_CLASSIFICATION	2.8570625154628015E-5	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9999677242821797	WITHOUT_CLASSIFICATION	3.22757178202722E-5	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998238849730732	WITHOUT_CLASSIFICATION	1.7611502692678127E-4	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998238849730732	WITHOUT_CLASSIFICATION	1.7611502692678127E-4	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999677214960446	WITHOUT_CLASSIFICATION	3.2278503955299215E-5	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999335879504352	WITHOUT_CLASSIFICATION	6.641204956485356E-5	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9998897037193021	WITHOUT_CLASSIFICATION	1.1029628069788055E-4	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999271606600938	WITHOUT_CLASSIFICATION	7.283933990622986E-5	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999686121362436	WITHOUT_CLASSIFICATION	3.138786375650381E-5	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.9999306092260636	WITHOUT_CLASSIFICATION	6.939077393637091E-5	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9999694204373346	WITHOUT_CLASSIFICATION	3.057956266539769E-5	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998286155143686	WITHOUT_CLASSIFICATION	1.7138448563137548E-4	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.999991270436415	WITHOUT_CLASSIFICATION	8.729563584928718E-6	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.999991270436415	WITHOUT_CLASSIFICATION	8.729563584928718E-6	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.9999689992729609	WITHOUT_CLASSIFICATION	3.100072703918774E-5	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999702650027534	WITHOUT_CLASSIFICATION	2.973499724653072E-5	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9999689992729609	WITHOUT_CLASSIFICATION	3.100072703918774E-5	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999567702652744	WITHOUT_CLASSIFICATION	4.3229734725713025E-5	DEFECT
int	WITHOUT_CLASSIFICATION	0.9999770759347912	WITHOUT_CLASSIFICATION	2.2924065208723847E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999918205363232	WITHOUT_CLASSIFICATION	8.17946367683412E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999711098499823	WITHOUT_CLASSIFICATION	2.88901500177234E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999709791038739	WITHOUT_CLASSIFICATION	2.9020896126133097E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999709791038739	WITHOUT_CLASSIFICATION	2.9020896126133097E-5	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.9999918205363232	WITHOUT_CLASSIFICATION	8.17946367683412E-6	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999421483680223	WITHOUT_CLASSIFICATION	5.7851631977798624E-5	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9998150209965878	WITHOUT_CLASSIFICATION	1.8497900341225018E-4	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999745176516226	WITHOUT_CLASSIFICATION	2.5482348377354296E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999745176516226	WITHOUT_CLASSIFICATION	2.5482348377354296E-5	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9997321487786066	WITHOUT_CLASSIFICATION	2.678512213934379E-4	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999792074072629	WITHOUT_CLASSIFICATION	2.079259273717919E-5	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.999982036604668	WITHOUT_CLASSIFICATION	1.796339533201562E-5	DEFECT
byte	WITHOUT_CLASSIFICATION	0.9999759724442024	WITHOUT_CLASSIFICATION	2.4027555797523936E-5	DEFECT
char	WITHOUT_CLASSIFICATION	0.9999733915444922	WITHOUT_CLASSIFICATION	2.660845550786535E-5	DEFECT
short	WITHOUT_CLASSIFICATION	0.9999716886654205	WITHOUT_CLASSIFICATION	2.8311334579453878E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999849695595837	WITHOUT_CLASSIFICATION	1.5030440416172088E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999712272833704	WITHOUT_CLASSIFICATION	2.8772716629583076E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999712272833704	WITHOUT_CLASSIFICATION	2.8772716629583076E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999707752741822	WITHOUT_CLASSIFICATION	2.9224725817818124E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999707752741822	WITHOUT_CLASSIFICATION	2.9224725817818124E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999900383294302	WITHOUT_CLASSIFICATION	9.961670569794782E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999900383294302	WITHOUT_CLASSIFICATION	9.961670569794782E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998310384694874	WITHOUT_CLASSIFICATION	1.689615305126077E-4	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998310384694874	WITHOUT_CLASSIFICATION	1.689615305126077E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999745176516226	WITHOUT_CLASSIFICATION	2.5482348377354296E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999849695595837	WITHOUT_CLASSIFICATION	1.5030440416172088E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999712272833704	WITHOUT_CLASSIFICATION	2.8772716629583076E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999712272833704	WITHOUT_CLASSIFICATION	2.8772716629583076E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999707752741822	WITHOUT_CLASSIFICATION	2.9224725817818124E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999900383294302	WITHOUT_CLASSIFICATION	9.961670569794782E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999900383294302	WITHOUT_CLASSIFICATION	9.961670569794782E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998310384694874	WITHOUT_CLASSIFICATION	1.689615305126077E-4	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999772657939324	WITHOUT_CLASSIFICATION	2.2734206067626653E-5	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998343086645856	WITHOUT_CLASSIFICATION	1.6569133541440758E-4	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.9999501900126609	WITHOUT_CLASSIFICATION	4.980998733906382E-5	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999895069497816	WITHOUT_CLASSIFICATION	1.049305021835978E-5	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9999661511328868	WITHOUT_CLASSIFICATION	3.3848867113171025E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999710676314426	WITHOUT_CLASSIFICATION	2.893236855738253E-5	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9953041438263897	WITHOUT_CLASSIFICATION	0.004695856173610392	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9993707311874669	WITHOUT_CLASSIFICATION	6.292688125330802E-4	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999463952195822	WITHOUT_CLASSIFICATION	5.360478041782687E-5	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9991876613211358	WITHOUT_CLASSIFICATION	8.123386788643083E-4	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998536538130808	WITHOUT_CLASSIFICATION	1.463461869193111E-4	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.999961157257303	WITHOUT_CLASSIFICATION	3.8842742697045443E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998774812850582	WITHOUT_CLASSIFICATION	1.2251871494185434E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999710676314426	WITHOUT_CLASSIFICATION	2.893236855738253E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999710676314426	WITHOUT_CLASSIFICATION	2.893236855738253E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999710676314426	WITHOUT_CLASSIFICATION	2.893236855738253E-5	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999681788587594	WITHOUT_CLASSIFICATION	3.182114124059758E-4	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999590181749948	WITHOUT_CLASSIFICATION	4.098182500525754E-5	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999590181749948	WITHOUT_CLASSIFICATION	4.098182500525754E-5	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9987517221693535	WITHOUT_CLASSIFICATION	0.0012482778306465811	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9998327057338319	WITHOUT_CLASSIFICATION	1.6729426616802522E-4	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9995147296268663	WITHOUT_CLASSIFICATION	4.8527037313375094E-4	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9958837100951577	WITHOUT_CLASSIFICATION	0.004116289904842344	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9958837100951577	WITHOUT_CLASSIFICATION	0.004116289904842344	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9988609123869379	WITHOUT_CLASSIFICATION	0.0011390876130621696	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9991226873691187	WITHOUT_CLASSIFICATION	8.773126308813211E-4	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9991226873691187	WITHOUT_CLASSIFICATION	8.773126308813211E-4	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9993749219788575	WITHOUT_CLASSIFICATION	6.250780211425989E-4	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9997058663412709	WITHOUT_CLASSIFICATION	2.941336587290829E-4	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999112218359052	WITHOUT_CLASSIFICATION	8.877816409481286E-5	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9846543420890035	WITHOUT_CLASSIFICATION	0.01534565791099653	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9999713219428336	WITHOUT_CLASSIFICATION	2.8678057166448074E-5	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9998827062089363	WITHOUT_CLASSIFICATION	1.1729379106373087E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999551901237014	WITHOUT_CLASSIFICATION	4.480987629851654E-5	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999735054667921	WITHOUT_CLASSIFICATION	2.6494533207883094E-5	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9990871309861723	WITHOUT_CLASSIFICATION	9.128690138276274E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999931828964108	WITHOUT_CLASSIFICATION	6.817103589192334E-5	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999969886528665	WITHOUT_CLASSIFICATION	3.0113471336042975E-6	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999709868652303	WITHOUT_CLASSIFICATION	2.9013134769726308E-5	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999112218359052	WITHOUT_CLASSIFICATION	8.877816409481286E-5	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999300222272698	WITHOUT_CLASSIFICATION	6.997777273025652E-5	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9998940345726226	WITHOUT_CLASSIFICATION	1.0596542737740433E-4	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999710340247556	WITHOUT_CLASSIFICATION	2.896597524431429E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999709868652303	WITHOUT_CLASSIFICATION	2.9013134769726308E-5	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999300222272698	WITHOUT_CLASSIFICATION	6.997777273025652E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999710340247556	WITHOUT_CLASSIFICATION	2.896597524431429E-5	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999307728738838	WITHOUT_CLASSIFICATION	6.922712611629793E-5	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999307728738838	WITHOUT_CLASSIFICATION	6.922712611629793E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
column index	WITHOUT_CLASSIFICATION	0.9998092317922863	WITHOUT_CLASSIFICATION	1.9076820771373075E-4	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.9998869579368059	WITHOUT_CLASSIFICATION	1.1304206319407932E-4	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999871371192699	WITHOUT_CLASSIFICATION	1.2862880730167771E-5	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999874887444652	WITHOUT_CLASSIFICATION	1.2511255534873407E-5	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9993978938391297	WITHOUT_CLASSIFICATION	6.021061608703117E-4	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999240990109776	WITHOUT_CLASSIFICATION	7.590098902244534E-5	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9992787429248416	WITHOUT_CLASSIFICATION	7.212570751582412E-4	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9968195480637929	WITHOUT_CLASSIFICATION	0.0031804519362070654	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999240990109776	WITHOUT_CLASSIFICATION	7.590098902244534E-5	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999714063331986	WITHOUT_CLASSIFICATION	2.859366680140996E-5	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998547693905823	WITHOUT_CLASSIFICATION	1.4523060941769696E-4	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999709868652303	WITHOUT_CLASSIFICATION	2.9013134769726308E-5	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9996128941945288	WITHOUT_CLASSIFICATION	3.8710580547115825E-4	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.9999473849479353	WITHOUT_CLASSIFICATION	5.261505206465406E-5	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9992585792440796	WITHOUT_CLASSIFICATION	7.414207559203447E-4	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9999244293568367	WITHOUT_CLASSIFICATION	7.557064316326613E-5	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9989175445577677	WITHOUT_CLASSIFICATION	0.0010824554422322948	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999865079858395	WITHOUT_CLASSIFICATION	1.34920141604637E-5	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9997881338694026	WITHOUT_CLASSIFICATION	2.118661305974454E-4	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9998598048303923	WITHOUT_CLASSIFICATION	1.401951696076978E-4	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998786549626993	WITHOUT_CLASSIFICATION	1.2134503730075985E-4	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999461018242066	WITHOUT_CLASSIFICATION	5.389817579331904E-5	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9982691982622423	WITHOUT_CLASSIFICATION	0.0017308017377576674	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999931828964108	WITHOUT_CLASSIFICATION	6.817103589192334E-5	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9999040214157101	WITHOUT_CLASSIFICATION	9.597858428992456E-5	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998410418366674	WITHOUT_CLASSIFICATION	1.5895816333263377E-4	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9999485602034519	WITHOUT_CLASSIFICATION	5.143979654805743E-5	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.999928557702635	WITHOUT_CLASSIFICATION	7.144229736502687E-5	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.999928557702635	WITHOUT_CLASSIFICATION	7.144229736502687E-5	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999267034495473	WITHOUT_CLASSIFICATION	7.329655045280458E-5	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999993181259492	WITHOUT_CLASSIFICATION	6.818740507409103E-7	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999774459496482	WITHOUT_CLASSIFICATION	2.2554050351784365E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9996534886287429	WITHOUT_CLASSIFICATION	3.4651137125706326E-4	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999004831676717	WITHOUT_CLASSIFICATION	9.95168323282671E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999699760510504	WITHOUT_CLASSIFICATION	3.002394894952342E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999699760510504	WITHOUT_CLASSIFICATION	3.002394894952342E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999461018242066	WITHOUT_CLASSIFICATION	5.389817579331904E-5	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998648844289736	WITHOUT_CLASSIFICATION	1.351155710263246E-4	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.999955179845448	WITHOUT_CLASSIFICATION	4.4820154552005384E-5	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999462072344494	WITHOUT_CLASSIFICATION	5.3792765550631E-5	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999462741014876	WITHOUT_CLASSIFICATION	5.372589851235129E-5	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999352458478651	WITHOUT_CLASSIFICATION	6.475415213490284E-5	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999487703183614	WITHOUT_CLASSIFICATION	5.122968163867791E-5	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999327595374292	WITHOUT_CLASSIFICATION	6.724046257074699E-5	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999592622089227	WITHOUT_CLASSIFICATION	4.073779107719308E-5	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999652663389407	WITHOUT_CLASSIFICATION	3.473366105936625E-5	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9997190577917088	WITHOUT_CLASSIFICATION	2.8094220829129215E-4	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999906999880938	WITHOUT_CLASSIFICATION	9.300011906201728E-5	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9998988573749912	WITHOUT_CLASSIFICATION	1.0114262500893605E-4	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9989690652331453	WITHOUT_CLASSIFICATION	0.001030934766854666	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9997313432411996	WITHOUT_CLASSIFICATION	2.686567588003324E-4	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999199519700309	WITHOUT_CLASSIFICATION	8.004802996901105E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999855002101034	WITHOUT_CLASSIFICATION	1.4499789896637625E-5	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998706377597651	WITHOUT_CLASSIFICATION	1.293622402349252E-4	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9998634933950065	WITHOUT_CLASSIFICATION	1.3650660499354918E-4	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999824245675724	WITHOUT_CLASSIFICATION	1.757543242762621E-5	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9995013424369172	WITHOUT_CLASSIFICATION	4.986575630827016E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9997313432411996	WITHOUT_CLASSIFICATION	2.686567588003324E-4	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999538921363725	WITHOUT_CLASSIFICATION	4.610786362742756E-5	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999035578398482	WITHOUT_CLASSIFICATION	9.644216015182612E-5	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999035578398482	WITHOUT_CLASSIFICATION	9.644216015182612E-5	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999298804381822	WITHOUT_CLASSIFICATION	7.011956181778496E-5	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999753899035322	WITHOUT_CLASSIFICATION	2.461009646775493E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999855002101034	WITHOUT_CLASSIFICATION	1.4499789896637625E-5	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9990749624334844	WITHOUT_CLASSIFICATION	9.250375665155865E-4	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997546958704762	WITHOUT_CLASSIFICATION	2.453041295238205E-4	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997538019621434	WITHOUT_CLASSIFICATION	2.461980378566822E-4	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999832025021065	WITHOUT_CLASSIFICATION	1.679749789349494E-5	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999832025021065	WITHOUT_CLASSIFICATION	1.679749789349494E-5	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998756877805802	WITHOUT_CLASSIFICATION	1.243122194198181E-4	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.999877558033055	WITHOUT_CLASSIFICATION	1.2244196694503827E-4	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.999877558033055	WITHOUT_CLASSIFICATION	1.2244196694503827E-4	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9996534886287429	WITHOUT_CLASSIFICATION	3.4651137125706326E-4	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9961211502452932	WITHOUT_CLASSIFICATION	0.0038788497547066823	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9961883049801133	WITHOUT_CLASSIFICATION	0.003811695019886713	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998004285758518	WITHOUT_CLASSIFICATION	1.9957142414811147E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999363369757113	WITHOUT_CLASSIFICATION	6.366302428882168E-5	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9961883049801133	WITHOUT_CLASSIFICATION	0.003811695019886713	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998004285758518	WITHOUT_CLASSIFICATION	1.9957142414811147E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999199820379949	WITHOUT_CLASSIFICATION	8.001796200507544E-5	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.999881166915633	WITHOUT_CLASSIFICATION	1.1883308436699574E-4	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.999950615130648	WITHOUT_CLASSIFICATION	4.938486935192574E-5	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999879151496636	WITHOUT_CLASSIFICATION	1.2084850336427245E-5	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996948356156645	WITHOUT_CLASSIFICATION	3.0516438433546674E-4	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.999989218670937	WITHOUT_CLASSIFICATION	1.0781329062920405E-5	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999643452155309	WITHOUT_CLASSIFICATION	3.5654784469136075E-5	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999643452155309	WITHOUT_CLASSIFICATION	3.5654784469136075E-5	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999207802524304	WITHOUT_CLASSIFICATION	7.921974756956969E-5	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999993496804052	WITHOUT_CLASSIFICATION	6.503195948053308E-6	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999371322387933	WITHOUT_CLASSIFICATION	6.286776120667901E-5	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999337944588415	WITHOUT_CLASSIFICATION	6.620554115857235E-5	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999877882838055	WITHOUT_CLASSIFICATION	1.2211716194488206E-5	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.999711487924042	WITHOUT_CLASSIFICATION	2.885120759580201E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999363369757113	WITHOUT_CLASSIFICATION	6.366302428882168E-5	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.999711487924042	WITHOUT_CLASSIFICATION	2.885120759580201E-4	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9996988489712147	WITHOUT_CLASSIFICATION	3.011510287852846E-4	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9996988489712147	WITHOUT_CLASSIFICATION	3.011510287852846E-4	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.997799754180137	WITHOUT_CLASSIFICATION	0.0022002458198629826	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999199820379949	WITHOUT_CLASSIFICATION	8.001796200507544E-5	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9997679689591136	WITHOUT_CLASSIFICATION	2.3203104088643226E-4	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999871466773476	WITHOUT_CLASSIFICATION	1.2853322652303801E-5	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9994793984763974	WITHOUT_CLASSIFICATION	5.206015236025362E-4	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997200752245942	WITHOUT_CLASSIFICATION	2.7992477540582654E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999562979402307	WITHOUT_CLASSIFICATION	4.370205976929964E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999199820379949	WITHOUT_CLASSIFICATION	8.001796200507544E-5	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997200752245942	WITHOUT_CLASSIFICATION	2.7992477540582654E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999562979402307	WITHOUT_CLASSIFICATION	4.370205976929964E-4	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999602138120827	WITHOUT_CLASSIFICATION	3.978618791736611E-5	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.999894491021328	WITHOUT_CLASSIFICATION	1.0550897867206954E-4	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999165671754422	WITHOUT_CLASSIFICATION	8.343282455785118E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999199820379949	WITHOUT_CLASSIFICATION	8.001796200507544E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999199820379949	WITHOUT_CLASSIFICATION	8.001796200507544E-5	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.999951415596752	WITHOUT_CLASSIFICATION	4.8584403247930796E-5	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9997828689851989	WITHOUT_CLASSIFICATION	2.1713101480117373E-4	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9997893656124712	WITHOUT_CLASSIFICATION	2.1063438752880035E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999617821246571	WITHOUT_CLASSIFICATION	3.8217875342774444E-5	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9999864053831836	WITHOUT_CLASSIFICATION	1.35946168163811E-5	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999413860592288	WITHOUT_CLASSIFICATION	5.8613940771323754E-5	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999415124696109	WITHOUT_CLASSIFICATION	5.8487530388971875E-5	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999369008649568	WITHOUT_CLASSIFICATION	6.309913504313504E-5	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998697027977642	WITHOUT_CLASSIFICATION	1.3029720223580395E-4	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9998565013887182	WITHOUT_CLASSIFICATION	1.434986112817859E-4	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9996436724846092	WITHOUT_CLASSIFICATION	3.5632751539087693E-4	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999449215694703	WITHOUT_CLASSIFICATION	5.507843052966803E-5	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999816765165058	WITHOUT_CLASSIFICATION	1.8323483494195547E-5	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9994956883922973	WITHOUT_CLASSIFICATION	5.043116077027095E-4	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998235378625023	WITHOUT_CLASSIFICATION	1.7646213749770672E-4	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9927971476448287	WITHOUT_CLASSIFICATION	0.007202852355171231	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999617821246571	WITHOUT_CLASSIFICATION	3.8217875342774444E-5	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999637918602509	WITHOUT_CLASSIFICATION	3.62081397491413E-5	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999184824378621	WITHOUT_CLASSIFICATION	8.151756213797E-5	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999768881202322	WITHOUT_CLASSIFICATION	2.3111879767792587E-4	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999641465781446	WITHOUT_CLASSIFICATION	3.585342185535415E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998789410638573	WITHOUT_CLASSIFICATION	1.2105893614269936E-4	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998789410638573	WITHOUT_CLASSIFICATION	1.2105893614269936E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999617821246571	WITHOUT_CLASSIFICATION	3.8217875342774444E-5	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9810433598856765	WITHOUT_CLASSIFICATION	0.018956640114323516	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999981454585212	WITHOUT_CLASSIFICATION	1.8545414789110313E-6	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9955693540979966	WITHOUT_CLASSIFICATION	0.004430645902003451	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999715479013256	WITHOUT_CLASSIFICATION	2.8452098674457966E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999444132780324	WITHOUT_CLASSIFICATION	5.558672196767116E-5	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9953487462680009	WITHOUT_CLASSIFICATION	0.004651253731999106	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999479568235212	WITHOUT_CLASSIFICATION	5.204317647868289E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998255965054589	WITHOUT_CLASSIFICATION	1.7440349454119996E-4	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9996251911883935	WITHOUT_CLASSIFICATION	3.748088116064926E-4	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998613714297978	WITHOUT_CLASSIFICATION	1.3862857020220386E-4	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9996000004984413	WITHOUT_CLASSIFICATION	3.999995015586791E-4	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999420679465386	WITHOUT_CLASSIFICATION	5.793205346131706E-5	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999524851195658	WITHOUT_CLASSIFICATION	4.751488043419885E-5	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996714898795115	WITHOUT_CLASSIFICATION	3.285101204886022E-4	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9996276695852544	WITHOUT_CLASSIFICATION	3.7233041474555624E-4	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9996400939622716	WITHOUT_CLASSIFICATION	3.5990603772844705E-4	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998238592380375	WITHOUT_CLASSIFICATION	1.7614076196250668E-4	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999943218768283	WITHOUT_CLASSIFICATION	5.6781231717029954E-5	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9997953310928971	WITHOUT_CLASSIFICATION	2.0466890710292066E-4	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9992236589441468	WITHOUT_CLASSIFICATION	7.763410558532106E-4	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999761646648055	WITHOUT_CLASSIFICATION	2.3835335194446108E-5	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998655551426094	WITHOUT_CLASSIFICATION	1.3444485739058602E-4	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998655551426094	WITHOUT_CLASSIFICATION	1.3444485739058602E-4	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996648370291829	WITHOUT_CLASSIFICATION	3.351629708171425E-4	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998661276513876	WITHOUT_CLASSIFICATION	1.3387234861236082E-4	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996372896360644	WITHOUT_CLASSIFICATION	3.6271036393574946E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996372896360644	WITHOUT_CLASSIFICATION	3.6271036393574946E-4	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996372896360644	WITHOUT_CLASSIFICATION	3.6271036393574946E-4	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996372896360644	WITHOUT_CLASSIFICATION	3.6271036393574946E-4	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999828958577512	WITHOUT_CLASSIFICATION	1.710414224881602E-5	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999707805362847	WITHOUT_CLASSIFICATION	2.9219463715268555E-5	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997667703692584	WITHOUT_CLASSIFICATION	2.3322963074145928E-4	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998238693111704	WITHOUT_CLASSIFICATION	1.7613068882956236E-4	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995474275548918	WITHOUT_CLASSIFICATION	4.5257244510812835E-4	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998423184725196	WITHOUT_CLASSIFICATION	1.5768152748044616E-4	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996372896360644	WITHOUT_CLASSIFICATION	3.6271036393574946E-4	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996372896360644	WITHOUT_CLASSIFICATION	3.6271036393574946E-4	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996376287189429	WITHOUT_CLASSIFICATION	3.623712810571292E-4	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996372896360644	WITHOUT_CLASSIFICATION	3.6271036393574946E-4	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9996085817382664	WITHOUT_CLASSIFICATION	3.914182617336907E-4	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9998598588011472	WITHOUT_CLASSIFICATION	1.4014119885275535E-4	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999883256009731	WITHOUT_CLASSIFICATION	1.1674399026887773E-4	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999681574255341	WITHOUT_CLASSIFICATION	3.184257446577488E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999561342884099	WITHOUT_CLASSIFICATION	4.386571159013021E-5	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.9999024573783849	WITHOUT_CLASSIFICATION	9.754262161507163E-5	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998935316851711	WITHOUT_CLASSIFICATION	1.0646831482887956E-4	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999235543259994	WITHOUT_CLASSIFICATION	7.644567400051658E-5	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999946252599082	WITHOUT_CLASSIFICATION	5.374740091808981E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998255965054589	WITHOUT_CLASSIFICATION	1.7440349454119996E-4	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998939544263237	WITHOUT_CLASSIFICATION	1.0604557367633418E-4	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999489936037224	WITHOUT_CLASSIFICATION	5.1006396277762414E-5	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9995377339450691	WITHOUT_CLASSIFICATION	4.6226605493090945E-4	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9964280935086454	WITHOUT_CLASSIFICATION	0.003571906491354786	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9987492642973397	WITHOUT_CLASSIFICATION	0.0012507357026602867	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998682654258837	WITHOUT_CLASSIFICATION	1.3173457411622266E-4	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999886298818887	WITHOUT_CLASSIFICATION	1.1370118111301299E-4	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998241699233889	WITHOUT_CLASSIFICATION	1.758300766111921E-4	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9968445433811113	WITHOUT_CLASSIFICATION	0.0031554566188887983	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999067232426665	WITHOUT_CLASSIFICATION	9.327675733352285E-5	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.999971181496012	WITHOUT_CLASSIFICATION	2.8818503987943258E-5	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9922777874078115	WITHOUT_CLASSIFICATION	0.0077222125921885005	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998874521663168	WITHOUT_CLASSIFICATION	1.1254783368316724E-4	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9997683008188404	WITHOUT_CLASSIFICATION	2.3169918115963485E-4	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999336640838536	WITHOUT_CLASSIFICATION	6.633591614638408E-5	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999825620824255	WITHOUT_CLASSIFICATION	1.7437917574500124E-4	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998162770904553	WITHOUT_CLASSIFICATION	1.8372290954481925E-4	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9995729465616783	WITHOUT_CLASSIFICATION	4.2705343832166986E-4	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9989907866518543	WITHOUT_CLASSIFICATION	0.0010092133481457931	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9993392667285752	WITHOUT_CLASSIFICATION	6.607332714247771E-4	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.999966512423719	WITHOUT_CLASSIFICATION	3.348757628090954E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998255965054589	WITHOUT_CLASSIFICATION	1.7440349454119996E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999561342884099	WITHOUT_CLASSIFICATION	4.386571159013021E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9994377740826957	WITHOUT_CLASSIFICATION	5.62225917304203E-4	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.999807855862073	WITHOUT_CLASSIFICATION	1.9214413792705316E-4	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999902297438517	WITHOUT_CLASSIFICATION	9.770256148307794E-5	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999883256009731	WITHOUT_CLASSIFICATION	1.1674399026887773E-4	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.9998516917584573	WITHOUT_CLASSIFICATION	1.483082415427641E-4	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9968445433811113	WITHOUT_CLASSIFICATION	0.0031554566188887983	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9998586858953226	WITHOUT_CLASSIFICATION	1.413141046774147E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9993086921694986	WITHOUT_CLASSIFICATION	6.913078305014562E-4	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9996676483883616	WITHOUT_CLASSIFICATION	3.323516116383597E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998269238181026	WITHOUT_CLASSIFICATION	1.730761818973867E-4	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999577337764677	WITHOUT_CLASSIFICATION	4.226622353223727E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998255965054589	WITHOUT_CLASSIFICATION	1.7440349454119996E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998255965054589	WITHOUT_CLASSIFICATION	1.7440349454119996E-4	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9985612337606937	WITHOUT_CLASSIFICATION	0.0014387662393062634	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999983665223364	WITHOUT_CLASSIFICATION	1.633477663605708E-5	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9998113876303317	WITHOUT_CLASSIFICATION	1.88612369668242E-4	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999835742258862	WITHOUT_CLASSIFICATION	1.6425774113799473E-5	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999495868862354	WITHOUT_CLASSIFICATION	5.0413113764497944E-5	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999883256009731	WITHOUT_CLASSIFICATION	1.1674399026887773E-4	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9994434695664487	WITHOUT_CLASSIFICATION	5.5653043355124E-4	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9998487222215514	WITHOUT_CLASSIFICATION	1.512777784485704E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998255965054589	WITHOUT_CLASSIFICATION	1.7440349454119996E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9989319528706729	WITHOUT_CLASSIFICATION	0.0010680471293270774	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999119251416063	WITHOUT_CLASSIFICATION	8.807485839368866E-5	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999111445925464	WITHOUT_CLASSIFICATION	8.885540745365322E-5	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9998913303627166	WITHOUT_CLASSIFICATION	1.0866963728339356E-4	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999002065914417	WITHOUT_CLASSIFICATION	9.979340855830086E-4	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999844844259579	WITHOUT_CLASSIFICATION	1.5515574042105002E-4	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9993448209490041	WITHOUT_CLASSIFICATION	6.551790509959867E-4	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9998953290539023	WITHOUT_CLASSIFICATION	1.0467094609759415E-4	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9942348877175661	WITHOUT_CLASSIFICATION	0.005765112282433903	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999566975315036	WITHOUT_CLASSIFICATION	4.3302468496478143E-5	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999566975315036	WITHOUT_CLASSIFICATION	4.3302468496478143E-5	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999883256009731	WITHOUT_CLASSIFICATION	1.1674399026887773E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999561342884099	WITHOUT_CLASSIFICATION	4.386571159013021E-5	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.8462847901406145	WITHOUT_CLASSIFICATION	0.15371520985938533	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9982053683270858	WITHOUT_CLASSIFICATION	0.0017946316729141804	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.914929538540913	WITHOUT_CLASSIFICATION	0.08507046145908705	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999561342884099	WITHOUT_CLASSIFICATION	4.386571159013021E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9998773677880866	WITHOUT_CLASSIFICATION	1.226322119134779E-4	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999119251416063	WITHOUT_CLASSIFICATION	8.807485839368866E-5	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9993147273805238	WITHOUT_CLASSIFICATION	6.852726194761899E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9989319528706729	WITHOUT_CLASSIFICATION	0.0010680471293270774	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998255965054589	WITHOUT_CLASSIFICATION	1.7440349454119996E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9986786536129795	WITHOUT_CLASSIFICATION	0.001321346387020534	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9973390177230936	WITHOUT_CLASSIFICATION	0.0026609822769064154	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998255965054589	WITHOUT_CLASSIFICATION	1.7440349454119996E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9927126873278452	WITHOUT_CLASSIFICATION	0.00728731267215471	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9996676483883616	WITHOUT_CLASSIFICATION	3.323516116383597E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998269238181026	WITHOUT_CLASSIFICATION	1.730761818973867E-4	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999799706160405	WITHOUT_CLASSIFICATION	2.0029383959517068E-5	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.9999643013163815	WITHOUT_CLASSIFICATION	3.5698683618419986E-5	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9998005526978285	WITHOUT_CLASSIFICATION	1.994473021714232E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9989319528706729	WITHOUT_CLASSIFICATION	0.0010680471293270774	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9986786536129795	WITHOUT_CLASSIFICATION	0.001321346387020534	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998255965054589	WITHOUT_CLASSIFICATION	1.7440349454119996E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999561342884099	WITHOUT_CLASSIFICATION	4.386571159013021E-5	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999577337764677	WITHOUT_CLASSIFICATION	4.226622353223727E-5	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9985612337606937	WITHOUT_CLASSIFICATION	0.0014387662393062634	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999983665223364	WITHOUT_CLASSIFICATION	1.633477663605708E-5	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999788898619886	WITHOUT_CLASSIFICATION	2.1110138011448596E-5	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687603915707	WITHOUT_CLASSIFICATION	1.3123960842925217E-4	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9998919331194653	WITHOUT_CLASSIFICATION	1.0806688053467702E-4	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9997388655730554	WITHOUT_CLASSIFICATION	2.6113442694460814E-4	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999515054136001	WITHOUT_CLASSIFICATION	4.8494586399869526E-5	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996372896360644	WITHOUT_CLASSIFICATION	3.6271036393574946E-4	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9981350777602446	WITHOUT_CLASSIFICATION	0.00186492223975545	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999307213850144	WITHOUT_CLASSIFICATION	6.927861498569523E-5	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9998905045259582	WITHOUT_CLASSIFICATION	1.0949547404170421E-4	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999060618274318	WITHOUT_CLASSIFICATION	9.39381725681465E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996372896360644	WITHOUT_CLASSIFICATION	3.6271036393574946E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996372896360644	WITHOUT_CLASSIFICATION	3.6271036393574946E-4	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998238693111704	WITHOUT_CLASSIFICATION	1.7613068882956236E-4	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999224337963903	WITHOUT_CLASSIFICATION	7.75662036097058E-5	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999889414467612	WITHOUT_CLASSIFICATION	1.105855323879502E-4	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997454798668971	WITHOUT_CLASSIFICATION	2.545201331029359E-4	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996372896360644	WITHOUT_CLASSIFICATION	3.6271036393574946E-4	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.987716141489615	WITHOUT_CLASSIFICATION	0.012283858510385095	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998255965054589	WITHOUT_CLASSIFICATION	1.7440349454119996E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998255965054589	WITHOUT_CLASSIFICATION	1.7440349454119996E-4	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995474275548918	WITHOUT_CLASSIFICATION	4.5257244510812835E-4	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996372896360644	WITHOUT_CLASSIFICATION	3.6271036393574946E-4	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998162770904553	WITHOUT_CLASSIFICATION	1.8372290954481925E-4	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9976366013372843	WITHOUT_CLASSIFICATION	0.0023633986627157348	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9991315545478942	WITHOUT_CLASSIFICATION	8.684454521059339E-4	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9993803043049974	WITHOUT_CLASSIFICATION	6.196956950027422E-4	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999357907656533	WITHOUT_CLASSIFICATION	6.420923434665239E-5	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999673460241831	WITHOUT_CLASSIFICATION	3.2653975816858037E-5	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999307728738838	WITHOUT_CLASSIFICATION	6.922712611629793E-5	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998972241929006	WITHOUT_CLASSIFICATION	1.027758070993637E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999788867809498	WITHOUT_CLASSIFICATION	2.1113219050156658E-5	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999479568235212	WITHOUT_CLASSIFICATION	5.204317647868289E-5	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999594808385679	WITHOUT_CLASSIFICATION	4.051916143210657E-5	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9995945171164934	WITHOUT_CLASSIFICATION	4.054828835066577E-4	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999889251339167	WITHOUT_CLASSIFICATION	1.1074866083303157E-4	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999130837035299	WITHOUT_CLASSIFICATION	8.691629646997755E-5	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999050274644622	WITHOUT_CLASSIFICATION	9.497253553770051E-5	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999371963569401	WITHOUT_CLASSIFICATION	6.280364305981344E-5	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998990038073317	WITHOUT_CLASSIFICATION	1.0099619266834586E-4	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998825398254458	WITHOUT_CLASSIFICATION	1.1746017455417404E-4	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9990842339128185	WITHOUT_CLASSIFICATION	9.157660871815278E-4	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999119347549948	WITHOUT_CLASSIFICATION	8.806524500520205E-4	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9998563777249946	WITHOUT_CLASSIFICATION	1.43622275005433E-4	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9993309544118663	WITHOUT_CLASSIFICATION	6.690455881337261E-4	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9973156588056069	WITHOUT_CLASSIFICATION	0.002684341194393075	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.996635709831268	WITHOUT_CLASSIFICATION	0.003364290168732037	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9968839710181157	WITHOUT_CLASSIFICATION	0.0031160289818844347	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9991622239283741	WITHOUT_CLASSIFICATION	8.37776071626027E-4	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998592611134952	WITHOUT_CLASSIFICATION	1.4073888650477912E-4	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.996635709831268	WITHOUT_CLASSIFICATION	0.003364290168732037	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998759107536936	WITHOUT_CLASSIFICATION	1.2408924630630003E-4	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9991288183803252	WITHOUT_CLASSIFICATION	8.711816196749269E-4	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247258617349	WITHOUT_CLASSIFICATION	7.527413826517515E-5	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9998877934773507	WITHOUT_CLASSIFICATION	1.1220652264928908E-4	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9845061311710879	WITHOUT_CLASSIFICATION	0.015493868828912193	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9998912905235383	WITHOUT_CLASSIFICATION	1.0870947646171004E-4	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9998277463868066	WITHOUT_CLASSIFICATION	1.722536131933617E-4	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999708897929422	WITHOUT_CLASSIFICATION	2.911020705771157E-5	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999708897929422	WITHOUT_CLASSIFICATION	2.911020705771157E-5	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9998794624476958	WITHOUT_CLASSIFICATION	1.2053755230424288E-4	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9995211868283069	WITHOUT_CLASSIFICATION	4.7881317169301676E-4	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998591748403608	WITHOUT_CLASSIFICATION	1.4082515963921563E-4	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999404871964388	WITHOUT_CLASSIFICATION	5.95128035612687E-5	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9998154831513393	WITHOUT_CLASSIFICATION	1.8451684866079975E-4	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999640788084612	WITHOUT_CLASSIFICATION	3.592119153871675E-5	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999889315150015	WITHOUT_CLASSIFICATION	1.106848499855702E-5	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999409820636457	WITHOUT_CLASSIFICATION	5.901793635440476E-5	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999854614702949	WITHOUT_CLASSIFICATION	1.4538529705096167E-4	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999937648496537	WITHOUT_CLASSIFICATION	6.2351503463093755E-6	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999842653899965	WITHOUT_CLASSIFICATION	1.573461000351854E-5	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9998396297653459	WITHOUT_CLASSIFICATION	1.603702346540484E-4	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999724684252802	WITHOUT_CLASSIFICATION	2.753157471985909E-5	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9989163640776758	WITHOUT_CLASSIFICATION	0.001083635922324207	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999274074528992	WITHOUT_CLASSIFICATION	7.259254710080853E-5	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9969863379528823	WITHOUT_CLASSIFICATION	0.003013662047117684	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9995219414612481	WITHOUT_CLASSIFICATION	4.780585387519452E-4	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9981735226904586	WITHOUT_CLASSIFICATION	0.0018264773095413524	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999737048476047	WITHOUT_CLASSIFICATION	2.6295152395200024E-5	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9997968660512834	WITHOUT_CLASSIFICATION	2.031339487165661E-4	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9997636517875538	WITHOUT_CLASSIFICATION	2.3634821244619426E-4	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999402501528123	WITHOUT_CLASSIFICATION	5.974984718756599E-5	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.999334089217042	WITHOUT_CLASSIFICATION	6.659107829580116E-4	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9998595075145517	WITHOUT_CLASSIFICATION	1.404924854483388E-4	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999121344172528	WITHOUT_CLASSIFICATION	8.786558274726165E-5	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9987821187264574	WITHOUT_CLASSIFICATION	0.0012178812735426491	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9967760272557182	WITHOUT_CLASSIFICATION	0.003223972744281689	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999421898878573	WITHOUT_CLASSIFICATION	5.781011214274791E-5	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9977210554632817	WITHOUT_CLASSIFICATION	0.002278944536718208	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9986425147337806	WITHOUT_CLASSIFICATION	0.001357485266219477	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999848487999628	WITHOUT_CLASSIFICATION	1.5151200037196976E-4	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.9999419023331864	WITHOUT_CLASSIFICATION	5.809766681373341E-5	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999742518214992	WITHOUT_CLASSIFICATION	2.574817850085681E-5	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999927245558756	WITHOUT_CLASSIFICATION	7.2754441243618095E-6	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999545335047728	WITHOUT_CLASSIFICATION	4.546649522711291E-5	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.9998245923368444	WITHOUT_CLASSIFICATION	1.754076631555436E-4	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9925124703367698	WITHOUT_CLASSIFICATION	0.007487529663230315	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.99998359034903	WITHOUT_CLASSIFICATION	1.640965097008482E-5	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.997116187124306	WITHOUT_CLASSIFICATION	0.002883812875693953	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999961553983113	WITHOUT_CLASSIFICATION	3.844601688608474E-6	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999958809348241	WITHOUT_CLASSIFICATION	4.119065175899156E-5	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999495868862354	WITHOUT_CLASSIFICATION	5.0413113764497944E-5	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999495868862354	WITHOUT_CLASSIFICATION	5.0413113764497944E-5	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999303797436261	WITHOUT_CLASSIFICATION	6.962025637392926E-5	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998943553608585	WITHOUT_CLASSIFICATION	1.0564463914145778E-4	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999389646516086	WITHOUT_CLASSIFICATION	6.103534839150219E-5	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999739789871422	WITHOUT_CLASSIFICATION	2.6021012857677163E-5	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999174286034579	WITHOUT_CLASSIFICATION	8.257139654208867E-5	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999731531919696	WITHOUT_CLASSIFICATION	2.6846808030449547E-5	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999497062081149	WITHOUT_CLASSIFICATION	5.0293791885105863E-5	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999191436416267	WITHOUT_CLASSIFICATION	8.085635837331086E-5	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999897456398594	WITHOUT_CLASSIFICATION	1.0254360140538096E-5	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999708102075797	WITHOUT_CLASSIFICATION	2.9189792420280172E-5	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999016655003882	WITHOUT_CLASSIFICATION	9.833449961188546E-5	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999766955429156	WITHOUT_CLASSIFICATION	2.3304457084531377E-5	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997538019621434	WITHOUT_CLASSIFICATION	2.461980378566822E-4	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998220759624709	WITHOUT_CLASSIFICATION	1.7792403752920241E-4	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999508152468748	WITHOUT_CLASSIFICATION	4.918475312533489E-5	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.999912512557474	WITHOUT_CLASSIFICATION	8.748744252602162E-5	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9996797061821263	WITHOUT_CLASSIFICATION	3.2029381787363755E-4	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999881314792307	WITHOUT_CLASSIFICATION	1.1868520769333647E-5	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.999643468359855	WITHOUT_CLASSIFICATION	3.5653164014502417E-4	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9994566357002624	WITHOUT_CLASSIFICATION	5.433642997374902E-4	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.9998363843440479	WITHOUT_CLASSIFICATION	1.6361565595213103E-4	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9997318244677906	WITHOUT_CLASSIFICATION	2.6817553220947826E-4	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9994566357002624	WITHOUT_CLASSIFICATION	5.433642997374902E-4	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999778671144299	WITHOUT_CLASSIFICATION	2.2132885570143073E-5	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999246328843829	WITHOUT_CLASSIFICATION	7.536711561706198E-5	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998876694495672	WITHOUT_CLASSIFICATION	1.1233055043276858E-4	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9997353824663521	WITHOUT_CLASSIFICATION	2.646175336479446E-4	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9999020237006312	WITHOUT_CLASSIFICATION	9.797629936883929E-5	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999910243572095	WITHOUT_CLASSIFICATION	8.975642790433188E-6	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998968779536385	WITHOUT_CLASSIFICATION	1.0312204636147745E-4	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9996999971225106	WITHOUT_CLASSIFICATION	3.000028774895042E-4	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998218113269535	WITHOUT_CLASSIFICATION	1.781886730464963E-4	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999296538395837	WITHOUT_CLASSIFICATION	7.034616041639269E-5	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999797548414845	WITHOUT_CLASSIFICATION	2.0245158515532586E-5	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999573518582804	WITHOUT_CLASSIFICATION	4.2648141719543445E-5	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999029128579366	WITHOUT_CLASSIFICATION	9.708714206340752E-5	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999854410855826	WITHOUT_CLASSIFICATION	1.4558914417249232E-5	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9997183274262751	WITHOUT_CLASSIFICATION	2.816725737248472E-4	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999461018242066	WITHOUT_CLASSIFICATION	5.389817579331904E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999461018242066	WITHOUT_CLASSIFICATION	5.389817579331904E-5	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999595615493053	WITHOUT_CLASSIFICATION	4.043845069466094E-5	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9999014866112242	WITHOUT_CLASSIFICATION	9.851338877582193E-5	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9999567996946156	WITHOUT_CLASSIFICATION	4.320030538445806E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9995148135067504	WITHOUT_CLASSIFICATION	4.8518649324956524E-4	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9946213545939963	WITHOUT_CLASSIFICATION	0.005378645406003707	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9999074935842827	WITHOUT_CLASSIFICATION	9.250641571732139E-5	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999869248932029	WITHOUT_CLASSIFICATION	1.3075106797095584E-4	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9998276453051503	WITHOUT_CLASSIFICATION	1.7235469484963619E-4	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.996784989402187	WITHOUT_CLASSIFICATION	0.0032150105978130976	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9985422091113614	WITHOUT_CLASSIFICATION	0.001457790888638596	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999999428055892	WITHOUT_CLASSIFICATION	5.719441080324009E-7	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998966823283423	WITHOUT_CLASSIFICATION	1.0331767165765958E-4	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9997804070808722	WITHOUT_CLASSIFICATION	2.1959291912769201E-4	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999534035150672	WITHOUT_CLASSIFICATION	4.659648493284579E-5	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999371963569401	WITHOUT_CLASSIFICATION	6.280364305981344E-5	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9992510611725643	WITHOUT_CLASSIFICATION	7.489388274355114E-4	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999468886503002	WITHOUT_CLASSIFICATION	5.311134969968613E-5	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.999909335220234	WITHOUT_CLASSIFICATION	9.066477976598027E-5	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999739212488743	WITHOUT_CLASSIFICATION	2.6078751125689702E-5	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998330597489126	WITHOUT_CLASSIFICATION	1.6694025108749598E-4	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9999619284974169	WITHOUT_CLASSIFICATION	3.807150258311898E-5	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999224810352368	WITHOUT_CLASSIFICATION	7.751896476309633E-5	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999249961157466	WITHOUT_CLASSIFICATION	7.500388425336247E-5	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999860970867854	WITHOUT_CLASSIFICATION	1.3902913214600701E-4	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998625150063232	WITHOUT_CLASSIFICATION	1.374849936767682E-4	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999355903417428	WITHOUT_CLASSIFICATION	6.440965825722112E-5	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999222589775094	WITHOUT_CLASSIFICATION	7.774102249055938E-5	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9997628857160108	WITHOUT_CLASSIFICATION	2.3711428398929326E-4	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.999831183834368	WITHOUT_CLASSIFICATION	1.688161656318904E-4	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999932189028301	WITHOUT_CLASSIFICATION	6.7810971699300316E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998860351481028	WITHOUT_CLASSIFICATION	1.1396485189710472E-4	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9993914453767372	WITHOUT_CLASSIFICATION	6.085546232627725E-4	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999615715154695	WITHOUT_CLASSIFICATION	3.8428484530547444E-5	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999794066769065	WITHOUT_CLASSIFICATION	2.0593323093447668E-5	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999923758194941	WITHOUT_CLASSIFICATION	7.624180505940755E-6	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999615395612309	WITHOUT_CLASSIFICATION	3.846043876900421E-5	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999461676104319	WITHOUT_CLASSIFICATION	5.383238956805788E-5	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9997517410548523	WITHOUT_CLASSIFICATION	2.482589451476322E-4	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9999614623273502	WITHOUT_CLASSIFICATION	3.8537672649818685E-5	DEFECT
create one	WITHOUT_CLASSIFICATION	0.999976982739993	WITHOUT_CLASSIFICATION	2.3017260006990297E-5	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9994177606079431	WITHOUT_CLASSIFICATION	5.822393920569402E-4	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999851004268739	WITHOUT_CLASSIFICATION	1.489957312595024E-5	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9975968436564248	WITHOUT_CLASSIFICATION	0.0024031563435753323	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999294985111785	WITHOUT_CLASSIFICATION	7.050148882143326E-5	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998553533109469	WITHOUT_CLASSIFICATION	1.4464668905315396E-4	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998457095734533	WITHOUT_CLASSIFICATION	1.542904265465897E-4	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998212698255198	WITHOUT_CLASSIFICATION	1.7873017448027936E-4	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9975962444773543	WITHOUT_CLASSIFICATION	0.0024037555226457366	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999873318415595	WITHOUT_CLASSIFICATION	1.266815844049293E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999788867809498	WITHOUT_CLASSIFICATION	2.1113219050156658E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999788867809498	WITHOUT_CLASSIFICATION	2.1113219050156658E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999666492236962	WITHOUT_CLASSIFICATION	3.335077630392108E-5	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9840298541899134	WITHOUT_CLASSIFICATION	0.015970145810086607	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9990806196499116	WITHOUT_CLASSIFICATION	9.193803500885147E-4	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998548678737778	WITHOUT_CLASSIFICATION	1.451321262222929E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9990806196499116	WITHOUT_CLASSIFICATION	9.193803500885147E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9997486146128843	WITHOUT_CLASSIFICATION	2.5138538711567265E-4	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999588168668144	WITHOUT_CLASSIFICATION	4.1183133185656767E-5	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.9999028753364193	WITHOUT_CLASSIFICATION	9.71246635807805E-5	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999814101397623	WITHOUT_CLASSIFICATION	1.858986023774664E-5	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999649869498314	WITHOUT_CLASSIFICATION	3.50130501687228E-5	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998939380917263	WITHOUT_CLASSIFICATION	1.0606190827364266E-4	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999411901536296	WITHOUT_CLASSIFICATION	5.8809846370493986E-5	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9996927157901419	WITHOUT_CLASSIFICATION	3.0728420985823236E-4	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999930050577438	WITHOUT_CLASSIFICATION	6.994942256203879E-6	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999940967562131	WITHOUT_CLASSIFICATION	5.9032437869105535E-6	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999422047885246	WITHOUT_CLASSIFICATION	5.779521147551082E-5	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999892371666583	WITHOUT_CLASSIFICATION	1.0762833341698419E-4	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9997278473028806	WITHOUT_CLASSIFICATION	2.7215269711937195E-4	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.7545047945347285	WITHOUT_CLASSIFICATION	0.24549520546527154	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999941850206553	WITHOUT_CLASSIFICATION	5.814979344704263E-6	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9998632539161665	WITHOUT_CLASSIFICATION	1.3674608383359058E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999923019163879	WITHOUT_CLASSIFICATION	7.69808361221523E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999923019163879	WITHOUT_CLASSIFICATION	7.69808361221523E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.999942034101807	WITHOUT_CLASSIFICATION	5.7965898192858805E-5	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9983729804811181	WITHOUT_CLASSIFICATION	0.001627019518881941	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999512818209633	WITHOUT_CLASSIFICATION	4.871817903669877E-5	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9998259879852656	WITHOUT_CLASSIFICATION	1.7401201473454055E-4	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9963937259943288	WITHOUT_CLASSIFICATION	0.003606274005671148	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9998692507629164	WITHOUT_CLASSIFICATION	1.3074923708362432E-4	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.99304152573141	WITHOUT_CLASSIFICATION	0.00695847426858994	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999484818937707	WITHOUT_CLASSIFICATION	5.1518106229235996E-5	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.9999846198271383	WITHOUT_CLASSIFICATION	1.5380172861704146E-5	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999904337294242	WITHOUT_CLASSIFICATION	9.566270575786855E-6	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998724494951517	WITHOUT_CLASSIFICATION	1.2755050484824305E-4	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999213560242147	WITHOUT_CLASSIFICATION	7.864397578522382E-5	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9995578416382085	WITHOUT_CLASSIFICATION	4.4215836179143796E-4	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9997558486133425	WITHOUT_CLASSIFICATION	2.44151386657498E-4	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9988816190952294	WITHOUT_CLASSIFICATION	0.0011183809047706082	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9986170703699904	WITHOUT_CLASSIFICATION	0.0013829296300097399	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998022815115687	WITHOUT_CLASSIFICATION	1.9771848843133525E-4	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999273970565787	WITHOUT_CLASSIFICATION	7.260294342126301E-5	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9998770303857039	WITHOUT_CLASSIFICATION	1.2296961429617606E-4	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999643817934024	WITHOUT_CLASSIFICATION	3.5618206597683165E-5	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999639495896803	WITHOUT_CLASSIFICATION	3.605041031978136E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9998882210429331	WITHOUT_CLASSIFICATION	1.1177895706691609E-4	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999736365139912	WITHOUT_CLASSIFICATION	2.6363486008775957E-5	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999637826156292	WITHOUT_CLASSIFICATION	3.621738437072313E-5	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.999976501969314	WITHOUT_CLASSIFICATION	2.34980306860914E-5	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.99995826418477	WITHOUT_CLASSIFICATION	4.173581523013113E-5	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997920523052297	WITHOUT_CLASSIFICATION	2.0794769477030538E-4	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9984508260772473	WITHOUT_CLASSIFICATION	0.0015491739227527323	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999722794791431	WITHOUT_CLASSIFICATION	2.772052085695879E-5	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9997785696940096	WITHOUT_CLASSIFICATION	2.2143030599049377E-4	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999341086848864	WITHOUT_CLASSIFICATION	6.589131511358905E-5	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999958738842619	WITHOUT_CLASSIFICATION	4.126115738158648E-6	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9977620784813339	WITHOUT_CLASSIFICATION	0.0022379215186661087	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998562381862084	WITHOUT_CLASSIFICATION	1.4376181379160453E-4	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999936963646989	WITHOUT_CLASSIFICATION	6.303635301058055E-6	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999735193920946	WITHOUT_CLASSIFICATION	2.6480607905532743E-5	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999948700994465	WITHOUT_CLASSIFICATION	5.129900553423729E-6	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999870171147893	WITHOUT_CLASSIFICATION	1.2982885210581928E-5	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999211208105682	WITHOUT_CLASSIFICATION	7.887918943182973E-5	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9987902597058247	WITHOUT_CLASSIFICATION	0.0012097402941753268	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9997520202539836	WITHOUT_CLASSIFICATION	2.4797974601639347E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998267895186193	WITHOUT_CLASSIFICATION	1.732104813808185E-4	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9999234139791064	WITHOUT_CLASSIFICATION	7.658602089353301E-5	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.8952594313211325	WITHOUT_CLASSIFICATION	0.10474056867886747	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9995293192260816	WITHOUT_CLASSIFICATION	4.7068077391838826E-4	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.995371112973661	WITHOUT_CLASSIFICATION	0.0046288870263390455	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9574890807778373	WITHOUT_CLASSIFICATION	0.04251091922216263	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999942462318794	WITHOUT_CLASSIFICATION	5.753768120545157E-6	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9995564749911933	WITHOUT_CLASSIFICATION	4.4352500880676446E-4	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999194316575287	WITHOUT_CLASSIFICATION	8.056834247127438E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998267895186193	WITHOUT_CLASSIFICATION	1.732104813808185E-4	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999835101091679	WITHOUT_CLASSIFICATION	1.6489890832177028E-5	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999689518087875	WITHOUT_CLASSIFICATION	3.1048191212506844E-4	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999654729489542	WITHOUT_CLASSIFICATION	3.4527051045773636E-5	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9998731849618067	WITHOUT_CLASSIFICATION	1.2681503819327025E-4	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9998773677880866	WITHOUT_CLASSIFICATION	1.226322119134779E-4	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9998773677880866	WITHOUT_CLASSIFICATION	1.226322119134779E-4	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999993163544547	WITHOUT_CLASSIFICATION	6.83645545298639E-6	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9997313857448722	WITHOUT_CLASSIFICATION	2.686142551277547E-4	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999823771714622	WITHOUT_CLASSIFICATION	1.7622828537835716E-5	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999835730203335	WITHOUT_CLASSIFICATION	1.6426979666489002E-4	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9998215986735008	WITHOUT_CLASSIFICATION	1.784013264992739E-4	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9989612466055428	WITHOUT_CLASSIFICATION	0.0010387533944572207	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9997317221629558	WITHOUT_CLASSIFICATION	2.6827783704427675E-4	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999690335170038	WITHOUT_CLASSIFICATION	3.096648299619455E-5	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9996338486260795	WITHOUT_CLASSIFICATION	3.6615137392042544E-4	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9985689911237402	WITHOUT_CLASSIFICATION	0.0014310088762598846	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9995728602459769	WITHOUT_CLASSIFICATION	4.271397540231035E-4	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999383209641316	WITHOUT_CLASSIFICATION	6.167903586837437E-5	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998678950252105	WITHOUT_CLASSIFICATION	1.321049747895839E-4	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9997850119341588	WITHOUT_CLASSIFICATION	2.1498806584126391E-4	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.993335065813528	WITHOUT_CLASSIFICATION	0.0066649341864719585	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9994401054822086	WITHOUT_CLASSIFICATION	5.59894517791425E-4	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9986856921752539	WITHOUT_CLASSIFICATION	0.0013143078247461258	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.998459175179447	WITHOUT_CLASSIFICATION	0.0015408248205529514	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999401687520613	WITHOUT_CLASSIFICATION	5.983124793886644E-5	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999555731323506	WITHOUT_CLASSIFICATION	4.4426867649393736E-5	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998999540623928	WITHOUT_CLASSIFICATION	1.0004593760712374E-4	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999840689931723	WITHOUT_CLASSIFICATION	1.5931006827739675E-5	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9994623759999642	WITHOUT_CLASSIFICATION	5.376240000356864E-4	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9992646009554527	WITHOUT_CLASSIFICATION	7.353990445472364E-4	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999917064492826	WITHOUT_CLASSIFICATION	8.293550717396895E-5	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999891280405903	WITHOUT_CLASSIFICATION	1.0871959409767485E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9998620591206311	WITHOUT_CLASSIFICATION	1.3794087936894403E-4	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999856644712328	WITHOUT_CLASSIFICATION	1.4335528767090793E-5	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9997603604227352	WITHOUT_CLASSIFICATION	2.3963957726485773E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999759314490446	WITHOUT_CLASSIFICATION	2.4068550955457435E-5	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9998941942089891	WITHOUT_CLASSIFICATION	1.0580579101095211E-4	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9994663467183311	WITHOUT_CLASSIFICATION	5.336532816688605E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999759314490446	WITHOUT_CLASSIFICATION	2.4068550955457435E-5	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999054529317564	WITHOUT_CLASSIFICATION	9.454706824362667E-5	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9997603604227352	WITHOUT_CLASSIFICATION	2.3963957726485773E-4	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999602700111679	WITHOUT_CLASSIFICATION	3.972998883207771E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999759314490446	WITHOUT_CLASSIFICATION	2.4068550955457435E-5	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999959985412405	WITHOUT_CLASSIFICATION	4.001458759494246E-5	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999353058286937	WITHOUT_CLASSIFICATION	6.469417130635596E-5	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998724494951517	WITHOUT_CLASSIFICATION	1.2755050484824305E-4	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999952280686366	WITHOUT_CLASSIFICATION	4.7719313634022204E-5	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999307728738838	WITHOUT_CLASSIFICATION	6.922712611629793E-5	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9990216122697139	WITHOUT_CLASSIFICATION	9.783877302860405E-4	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9995191451811798	WITHOUT_CLASSIFICATION	4.8085481882013226E-4	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9996989147827793	WITHOUT_CLASSIFICATION	3.010852172206608E-4	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9999606341796924	WITHOUT_CLASSIFICATION	3.936582030764318E-5	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999599952646377	WITHOUT_CLASSIFICATION	4.000473536228235E-5	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999551952186301	WITHOUT_CLASSIFICATION	4.480478136999174E-5	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999461018242066	WITHOUT_CLASSIFICATION	5.389817579331904E-5	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9998627032179538	WITHOUT_CLASSIFICATION	1.3729678204618765E-4	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998859968797428	WITHOUT_CLASSIFICATION	1.1400312025724352E-4	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9998110512527398	WITHOUT_CLASSIFICATION	1.8894874726012726E-4	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9998389560375384	WITHOUT_CLASSIFICATION	1.610439624616226E-4	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9996527657623584	WITHOUT_CLASSIFICATION	3.4723423764162977E-4	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999196218785643	WITHOUT_CLASSIFICATION	8.037812143567777E-5	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998410764548612	WITHOUT_CLASSIFICATION	1.5892354513882468E-4	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9998838342405001	WITHOUT_CLASSIFICATION	1.1616575949992446E-4	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999676448813446	WITHOUT_CLASSIFICATION	3.235511865535348E-5	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999906088252327	WITHOUT_CLASSIFICATION	9.39117476724207E-6	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999461018242066	WITHOUT_CLASSIFICATION	5.389817579331904E-5	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999681138024012	WITHOUT_CLASSIFICATION	3.188619759877053E-5	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999694907728356	WITHOUT_CLASSIFICATION	3.0509227164445273E-5	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9995609950653703	WITHOUT_CLASSIFICATION	4.390049346296418E-4	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.997998808699936	WITHOUT_CLASSIFICATION	0.0020011913000639874	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9998758754798786	WITHOUT_CLASSIFICATION	1.241245201214279E-4	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9999579065808699	WITHOUT_CLASSIFICATION	4.2093419130152905E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998130982683157	WITHOUT_CLASSIFICATION	1.8690173168437645E-4	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998631811063468	WITHOUT_CLASSIFICATION	1.3681889365318702E-4	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9942588452488067	WITHOUT_CLASSIFICATION	0.005741154751193236	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.999979480215873	WITHOUT_CLASSIFICATION	2.0519784126992288E-5	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999359052783371	WITHOUT_CLASSIFICATION	6.409472166292657E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999970975618489	WITHOUT_CLASSIFICATION	2.9024381510896112E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999970975618489	WITHOUT_CLASSIFICATION	2.9024381510896112E-5	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999683009631732	WITHOUT_CLASSIFICATION	3.16990368266819E-5	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9995164452031919	WITHOUT_CLASSIFICATION	4.8355479680810525E-4	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9998621093115716	WITHOUT_CLASSIFICATION	1.378906884283945E-4	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999273259499363	WITHOUT_CLASSIFICATION	7.267405006364332E-5	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999766789507085	WITHOUT_CLASSIFICATION	2.3321049291506168E-4	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9992752661647123	WITHOUT_CLASSIFICATION	7.247338352877219E-4	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999893085361087	WITHOUT_CLASSIFICATION	1.0691463891264111E-5	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999559057692863	WITHOUT_CLASSIFICATION	4.409423071367279E-5	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998470192938812	WITHOUT_CLASSIFICATION	1.5298070611880282E-4	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999937824557164	WITHOUT_CLASSIFICATION	6.2175442837155734E-6	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999447577615785	WITHOUT_CLASSIFICATION	5.5242238421550824E-5	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999832392741436	WITHOUT_CLASSIFICATION	1.6760725856414984E-5	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9989061185580207	WITHOUT_CLASSIFICATION	0.001093881441979241	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999970975618489	WITHOUT_CLASSIFICATION	2.9024381510896112E-5	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9988413830436392	WITHOUT_CLASSIFICATION	0.0011586169563607023	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998334980931712	WITHOUT_CLASSIFICATION	1.6650190682879201E-4	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9988263754401064	WITHOUT_CLASSIFICATION	0.0011736245598934826	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9993387198976796	WITHOUT_CLASSIFICATION	6.612801023203563E-4	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.999679485011885	WITHOUT_CLASSIFICATION	3.205149881150985E-4	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9997904558448573	WITHOUT_CLASSIFICATION	2.0954415514280394E-4	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999856980170939	WITHOUT_CLASSIFICATION	1.4301982906053712E-5	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999882574625469	WITHOUT_CLASSIFICATION	1.1742537453106387E-5	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9996943971721017	WITHOUT_CLASSIFICATION	3.0560282789828636E-4	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9995709164891134	WITHOUT_CLASSIFICATION	4.290835108865884E-4	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999648613567975	WITHOUT_CLASSIFICATION	3.5138643202529366E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998130982683157	WITHOUT_CLASSIFICATION	1.8690173168437645E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999970975618489	WITHOUT_CLASSIFICATION	2.9024381510896112E-5	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998862968358222	WITHOUT_CLASSIFICATION	1.1370316417775774E-4	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999461515057658	WITHOUT_CLASSIFICATION	5.3848494234214295E-5	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999610481917197	WITHOUT_CLASSIFICATION	3.895180828038164E-5	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9998744838189656	WITHOUT_CLASSIFICATION	1.255161810344455E-4	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999823727480766	WITHOUT_CLASSIFICATION	1.7627251923419794E-5	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9996135670423913	WITHOUT_CLASSIFICATION	3.864329576085912E-4	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998677704973147	WITHOUT_CLASSIFICATION	1.3222950268523438E-4	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999821302847977	WITHOUT_CLASSIFICATION	1.786971520230621E-5	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999867384923861	WITHOUT_CLASSIFICATION	1.3261507613992282E-5	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9995236292236996	WITHOUT_CLASSIFICATION	4.763707763004317E-4	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9998048326165323	WITHOUT_CLASSIFICATION	1.9516738346758264E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999722794791431	WITHOUT_CLASSIFICATION	2.772052085695879E-5	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999925566557256	WITHOUT_CLASSIFICATION	7.443344274370496E-6	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9996193756426887	WITHOUT_CLASSIFICATION	3.806243573113738E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9997486146128843	WITHOUT_CLASSIFICATION	2.5138538711567265E-4	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9996521618391528	WITHOUT_CLASSIFICATION	3.478381608471883E-4	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9992203844602331	WITHOUT_CLASSIFICATION	7.796155397668987E-4	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9994405415671516	WITHOUT_CLASSIFICATION	5.59458432848439E-4	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.9999850505954088	WITHOUT_CLASSIFICATION	1.4949404591239928E-5	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999901353020958	WITHOUT_CLASSIFICATION	9.864697904084856E-6	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998757195530704	WITHOUT_CLASSIFICATION	1.2428044692948913E-4	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998757195530704	WITHOUT_CLASSIFICATION	1.2428044692948913E-4	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999758862510439	WITHOUT_CLASSIFICATION	2.4113748956068995E-5	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9998458098779083	WITHOUT_CLASSIFICATION	1.5419012209173796E-4	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999116072473996	WITHOUT_CLASSIFICATION	8.839275260036077E-5	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999054614269888	WITHOUT_CLASSIFICATION	9.45385730112131E-5	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998035269016475	WITHOUT_CLASSIFICATION	1.9647309835243217E-4	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9998625737678437	WITHOUT_CLASSIFICATION	1.3742623215633618E-4	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999357615101823	WITHOUT_CLASSIFICATION	6.423848981772497E-5	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9977490094980045	WITHOUT_CLASSIFICATION	0.0022509905019955003	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9977490094980045	WITHOUT_CLASSIFICATION	0.0022509905019955003	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9987292098651462	WITHOUT_CLASSIFICATION	0.0012707901348537284	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999285993168024	WITHOUT_CLASSIFICATION	7.140068319756738E-5	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998664197352387	WITHOUT_CLASSIFICATION	1.3358026476124454E-4	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999200059746759	WITHOUT_CLASSIFICATION	7.999402532407019E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999200059746759	WITHOUT_CLASSIFICATION	7.999402532407019E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999200059746759	WITHOUT_CLASSIFICATION	7.999402532407019E-5	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9998313989840774	WITHOUT_CLASSIFICATION	1.686010159227279E-4	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999377769287185	WITHOUT_CLASSIFICATION	6.222307128145638E-5	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999869151856507	WITHOUT_CLASSIFICATION	1.3084814349278526E-5	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998999268895854	WITHOUT_CLASSIFICATION	1.0007311041462128E-4	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9998035707744601	WITHOUT_CLASSIFICATION	1.964292255399325E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999970975618489	WITHOUT_CLASSIFICATION	2.9024381510896112E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999970975618489	WITHOUT_CLASSIFICATION	2.9024381510896112E-5	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999804796155465	WITHOUT_CLASSIFICATION	1.9520384453498143E-5	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.999976750497615	WITHOUT_CLASSIFICATION	2.324950238498402E-5	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.6908166221150214	WITHOUT_CLASSIFICATION	0.3091833778849785	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999035578398482	WITHOUT_CLASSIFICATION	9.644216015182612E-5	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999625030451107	WITHOUT_CLASSIFICATION	3.749695488924057E-5	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.9998510767106952	WITHOUT_CLASSIFICATION	1.489232893047782E-4	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999897454152131	WITHOUT_CLASSIFICATION	1.0254584786897272E-5	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9989829802471587	WITHOUT_CLASSIFICATION	0.0010170197528413176	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999801014800251	WITHOUT_CLASSIFICATION	1.9898519974833954E-5	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999978060832598	WITHOUT_CLASSIFICATION	2.193916740195901E-6	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999928672462327	WITHOUT_CLASSIFICATION	7.132753767317523E-6	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999666924397694	WITHOUT_CLASSIFICATION	3.3307560230632004E-5	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999437151282291	WITHOUT_CLASSIFICATION	5.628487177088604E-5	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999437151282291	WITHOUT_CLASSIFICATION	5.628487177088604E-5	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999437151282291	WITHOUT_CLASSIFICATION	5.628487177088604E-5	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999437151282291	WITHOUT_CLASSIFICATION	5.628487177088604E-5	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999437151282291	WITHOUT_CLASSIFICATION	5.628487177088604E-5	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998135068465002	WITHOUT_CLASSIFICATION	1.8649315349981315E-4	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998135068465002	WITHOUT_CLASSIFICATION	1.8649315349981315E-4	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998135068465002	WITHOUT_CLASSIFICATION	1.8649315349981315E-4	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998135068465002	WITHOUT_CLASSIFICATION	1.8649315349981315E-4	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998430250222008	WITHOUT_CLASSIFICATION	1.5697497779923334E-4	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998757195530704	WITHOUT_CLASSIFICATION	1.2428044692948913E-4	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999610134470266	WITHOUT_CLASSIFICATION	3.898655297339205E-5	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998135068465002	WITHOUT_CLASSIFICATION	1.8649315349981315E-4	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9960773509944791	WITHOUT_CLASSIFICATION	0.003922649005520754	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999617955187081	WITHOUT_CLASSIFICATION	3.820448129193321E-5	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999487642062908	WITHOUT_CLASSIFICATION	5.123579370919004E-5	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999430287273153	WITHOUT_CLASSIFICATION	5.697127268455411E-5	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999296363782584	WITHOUT_CLASSIFICATION	7.036362174167322E-5	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999865521438662	WITHOUT_CLASSIFICATION	1.3447856133786167E-5	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998397906535357	WITHOUT_CLASSIFICATION	1.6020934646432766E-4	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9997625050699575	WITHOUT_CLASSIFICATION	2.3749493004243327E-4	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9998900264942018	WITHOUT_CLASSIFICATION	1.0997350579813914E-4	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9997678070409097	WITHOUT_CLASSIFICATION	2.3219295909036116E-4	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999706860194166	WITHOUT_CLASSIFICATION	2.9313980583357516E-5	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999709899553725	WITHOUT_CLASSIFICATION	2.9010044627499696E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999760599022809	WITHOUT_CLASSIFICATION	2.3940097719107757E-5	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.9999605740472756	WITHOUT_CLASSIFICATION	3.942595272454519E-5	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9940049558942134	WITHOUT_CLASSIFICATION	0.005995044105786601	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999295136300064	WITHOUT_CLASSIFICATION	7.048636999366448E-5	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999757652973814	WITHOUT_CLASSIFICATION	2.423470261860046E-5	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999754079538163	WITHOUT_CLASSIFICATION	2.459204618370214E-5	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999754079538163	WITHOUT_CLASSIFICATION	2.459204618370214E-5	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999705092138929	WITHOUT_CLASSIFICATION	2.9490786107036E-5	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9998401657428504	WITHOUT_CLASSIFICATION	1.598342571496275E-4	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999697228953369	WITHOUT_CLASSIFICATION	3.0277104663180393E-5	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.99995197673518	WITHOUT_CLASSIFICATION	4.802326481995363E-5	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999060208338525	WITHOUT_CLASSIFICATION	9.39791661475422E-5	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999906989114392	WITHOUT_CLASSIFICATION	9.301088560810382E-6	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998116548167015	WITHOUT_CLASSIFICATION	1.8834518329855139E-4	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998857857748229	WITHOUT_CLASSIFICATION	1.142142251771495E-4	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999274969350397	WITHOUT_CLASSIFICATION	7.250306496030263E-5	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999072004561144	WITHOUT_CLASSIFICATION	9.279954388563059E-5	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9989045592894892	WITHOUT_CLASSIFICATION	0.0010954407105108197	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999722794791431	WITHOUT_CLASSIFICATION	2.772052085695879E-5	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999246576159302	WITHOUT_CLASSIFICATION	7.534238406971428E-5	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9997256356314883	WITHOUT_CLASSIFICATION	2.743643685116721E-4	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999892139131563	WITHOUT_CLASSIFICATION	1.0786086843649149E-5	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9996628414351664	WITHOUT_CLASSIFICATION	3.3715856483370514E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998592060524801	WITHOUT_CLASSIFICATION	1.4079394751992925E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998592060524801	WITHOUT_CLASSIFICATION	1.4079394751992925E-4	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998579294944479	WITHOUT_CLASSIFICATION	1.4207050555225124E-4	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999939966765712	WITHOUT_CLASSIFICATION	6.003323428858333E-6	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9990131344165256	WITHOUT_CLASSIFICATION	9.86865583474381E-4	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9997019908525879	WITHOUT_CLASSIFICATION	2.9800914741214403E-4	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9995098531885349	WITHOUT_CLASSIFICATION	4.901468114650939E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9997991232797094	WITHOUT_CLASSIFICATION	2.0087672029053E-4	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999435921361886	WITHOUT_CLASSIFICATION	5.6407863811509034E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9981767065956447	WITHOUT_CLASSIFICATION	0.0018232934043552215	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999928886257843	WITHOUT_CLASSIFICATION	7.111374215704382E-5	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9992473363910699	WITHOUT_CLASSIFICATION	7.526636089301438E-4	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999204047836073	WITHOUT_CLASSIFICATION	7.959521639260159E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9981767065956447	WITHOUT_CLASSIFICATION	0.0018232934043552215	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9967680819636369	WITHOUT_CLASSIFICATION	0.0032319180363632165	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9997384288185951	WITHOUT_CLASSIFICATION	2.6157118140489625E-4	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999281353870161	WITHOUT_CLASSIFICATION	7.186461298390344E-5	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.999853937328711	WITHOUT_CLASSIFICATION	1.460626712889718E-4	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9998035866152083	WITHOUT_CLASSIFICATION	1.9641338479177837E-4	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999824295301372	WITHOUT_CLASSIFICATION	1.757046986284553E-5	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999558357358564	WITHOUT_CLASSIFICATION	4.416426414362016E-5	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9998493997250342	WITHOUT_CLASSIFICATION	1.5060027496579045E-4	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.99921938844077	WITHOUT_CLASSIFICATION	7.806115592299707E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999751058061878	WITHOUT_CLASSIFICATION	2.4894193812205094E-4	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999630246652093	WITHOUT_CLASSIFICATION	3.697533479072497E-5	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9997013542630179	WITHOUT_CLASSIFICATION	2.986457369821646E-4	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9997762491373897	WITHOUT_CLASSIFICATION	2.2375086261036117E-4	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999765996227171	WITHOUT_CLASSIFICATION	2.3400377282878702E-5	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999987484636509	WITHOUT_CLASSIFICATION	1.2515363491006566E-5	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999917570502782	WITHOUT_CLASSIFICATION	8.242949721757809E-6	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9998814351793595	WITHOUT_CLASSIFICATION	1.1856482064047742E-4	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9994447034731522	WITHOUT_CLASSIFICATION	5.552965268479177E-4	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9994447034731522	WITHOUT_CLASSIFICATION	5.552965268479177E-4	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999558357358564	WITHOUT_CLASSIFICATION	4.416426414362016E-5	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9970627710316765	WITHOUT_CLASSIFICATION	0.002937228968323357	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9989654230694562	WITHOUT_CLASSIFICATION	0.001034576930543725	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999124121358898	WITHOUT_CLASSIFICATION	8.758786411019442E-5	DEFECT
#2	WITHOUT_CLASSIFICATION	0.9999709673623828	WITHOUT_CLASSIFICATION	2.903263761721915E-5	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999972059718413	WITHOUT_CLASSIFICATION	2.794028158701356E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999169238626222	WITHOUT_CLASSIFICATION	8.307613737779003E-5	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999324918390168	WITHOUT_CLASSIFICATION	6.750816098317712E-5	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9998748938114642	WITHOUT_CLASSIFICATION	1.251061885357903E-4	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999024561132588	WITHOUT_CLASSIFICATION	9.754388674116125E-5	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999426902794442	WITHOUT_CLASSIFICATION	5.730972055588037E-5	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999854524588775	WITHOUT_CLASSIFICATION	1.4547541122665781E-5	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9984289037916037	WITHOUT_CLASSIFICATION	0.0015710962083962858	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9995402027847193	WITHOUT_CLASSIFICATION	4.5979721528071986E-4	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999942672328744	WITHOUT_CLASSIFICATION	5.732767125524044E-6	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997813493863748	WITHOUT_CLASSIFICATION	2.1865061362529234E-4	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9998916224202856	WITHOUT_CLASSIFICATION	1.083775797144111E-4	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999741426928621	WITHOUT_CLASSIFICATION	2.5857307137844874E-5	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9998626449047678	WITHOUT_CLASSIFICATION	1.3735509523217436E-4	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999466272265103	WITHOUT_CLASSIFICATION	5.337277348974479E-5	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999845280569164	WITHOUT_CLASSIFICATION	1.5471943083577996E-5	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999295738335003	WITHOUT_CLASSIFICATION	7.042616649958932E-5	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999667622956927	WITHOUT_CLASSIFICATION	3.323770430732776E-5	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999104957610948	WITHOUT_CLASSIFICATION	8.950423890526286E-5	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999769268806451	WITHOUT_CLASSIFICATION	2.307311935490552E-5	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999971717121077	WITHOUT_CLASSIFICATION	2.828287892341902E-6	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999001865425948	WITHOUT_CLASSIFICATION	9.981345740511034E-5	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999142166764728	WITHOUT_CLASSIFICATION	8.578332352712134E-5	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999526817895753	WITHOUT_CLASSIFICATION	4.7318210424727606E-5	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999902111587795	WITHOUT_CLASSIFICATION	9.788841220403764E-6	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999217779720171	WITHOUT_CLASSIFICATION	7.822202798290374E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997725060994543	WITHOUT_CLASSIFICATION	2.2749390054575922E-4	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9997813493863748	WITHOUT_CLASSIFICATION	2.1865061362529234E-4	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999146747494706	WITHOUT_CLASSIFICATION	8.532525052943842E-5	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9998165064143174	WITHOUT_CLASSIFICATION	1.834935856826753E-4	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999598205938011	WITHOUT_CLASSIFICATION	4.017940619889976E-5	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9996689538406557	WITHOUT_CLASSIFICATION	3.3104615934437416E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9940966076037634	WITHOUT_CLASSIFICATION	0.005903392396236621	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999390555922307	WITHOUT_CLASSIFICATION	6.0944407769165186E-5	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9999214722506671	WITHOUT_CLASSIFICATION	7.852774933301318E-5	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9998061383964418	WITHOUT_CLASSIFICATION	1.938616035581341E-4	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9985033592960115	WITHOUT_CLASSIFICATION	0.001496640703988535	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999748273573044	WITHOUT_CLASSIFICATION	2.517264269552446E-5	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.9998539641681995	WITHOUT_CLASSIFICATION	1.4603583180046751E-4	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.790787219369655	WITHOUT_CLASSIFICATION	0.2092127806303449	DEFECT
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.999957757714074	WITHOUT_CLASSIFICATION	4.224228592599419E-5	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9990906190948894	WITHOUT_CLASSIFICATION	9.093809051107333E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997725060994543	WITHOUT_CLASSIFICATION	2.2749390054575922E-4	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998390141982053	WITHOUT_CLASSIFICATION	1.6098580179466082E-4	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.991699693237213	WITHOUT_CLASSIFICATION	0.008300306762787028	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9996222163611126	WITHOUT_CLASSIFICATION	3.7778363888748585E-4	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999782721897789	WITHOUT_CLASSIFICATION	2.1727810221062233E-5	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9997749383087344	WITHOUT_CLASSIFICATION	2.2506169126555988E-4	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9993540160218479	WITHOUT_CLASSIFICATION	6.459839781520655E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999928886257843	WITHOUT_CLASSIFICATION	7.111374215704382E-5	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999998265959364	WITHOUT_CLASSIFICATION	1.7340406358690517E-6	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997813493863748	WITHOUT_CLASSIFICATION	2.1865061362529234E-4	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999679914081896	WITHOUT_CLASSIFICATION	3.2008591810441896E-5	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9996962709690537	WITHOUT_CLASSIFICATION	3.0372903094633044E-4	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999937877069944	WITHOUT_CLASSIFICATION	6.21229300559495E-5	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999378275430627	WITHOUT_CLASSIFICATION	6.217245693728814E-5	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999180655042958	WITHOUT_CLASSIFICATION	8.193449570417225E-5	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999954914137545	WITHOUT_CLASSIFICATION	4.508586245477677E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9940376137017273	WITHOUT_CLASSIFICATION	0.005962386298272737	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999042501406639	WITHOUT_CLASSIFICATION	9.57498593361527E-5	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.8624791189244503	WITHOUT_CLASSIFICATION	0.13752088107554966	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9995223969578881	WITHOUT_CLASSIFICATION	4.776030421118577E-4	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998801638612685	WITHOUT_CLASSIFICATION	1.1983613873152557E-4	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999744344765304	WITHOUT_CLASSIFICATION	2.556552346948216E-5	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9986109534554417	WITHOUT_CLASSIFICATION	0.0013890465445582886	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9986109534554417	WITHOUT_CLASSIFICATION	0.0013890465445582886	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999857716587914	WITHOUT_CLASSIFICATION	1.4228341208684406E-5	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9997345805848376	WITHOUT_CLASSIFICATION	2.6541941516246563E-4	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999533952557077	WITHOUT_CLASSIFICATION	4.66047442922271E-5	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999928334158897	WITHOUT_CLASSIFICATION	7.1665841103089894E-6	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999828512815924	WITHOUT_CLASSIFICATION	1.714871840765157E-5	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999622628469088	WITHOUT_CLASSIFICATION	3.773715309124612E-5	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9998874642381864	WITHOUT_CLASSIFICATION	1.1253576181351463E-4	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9994282305931326	WITHOUT_CLASSIFICATION	5.71769406867536E-4	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9993765893602728	WITHOUT_CLASSIFICATION	6.234106397272487E-4	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.999911575080042	WITHOUT_CLASSIFICATION	8.842491995800549E-5	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.999911575080042	WITHOUT_CLASSIFICATION	8.842491995800549E-5	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9997070364458546	WITHOUT_CLASSIFICATION	2.929635541454065E-4	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9988193224542294	WITHOUT_CLASSIFICATION	0.0011806775457705646	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999637768157182	WITHOUT_CLASSIFICATION	3.6223184281769296E-5	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9994572376940621	WITHOUT_CLASSIFICATION	5.427623059377507E-4	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999477657375061	WITHOUT_CLASSIFICATION	5.2234262493825966E-5	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999491341729645	WITHOUT_CLASSIFICATION	5.086582703552056E-5	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999750113508223	WITHOUT_CLASSIFICATION	2.498864917776549E-5	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9993818476041066	WITHOUT_CLASSIFICATION	6.181523958934008E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998255965054589	WITHOUT_CLASSIFICATION	1.7440349454119996E-4	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999698260621691	WITHOUT_CLASSIFICATION	3.017393783090124E-4	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9997692522011046	WITHOUT_CLASSIFICATION	2.3074779889536846E-4	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999942010191856	WITHOUT_CLASSIFICATION	5.798980814408525E-5	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9998318620287959	WITHOUT_CLASSIFICATION	1.6813797120407783E-4	DEFECT
implied	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999857148684052	WITHOUT_CLASSIFICATION	1.4285131594972583E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998255965054589	WITHOUT_CLASSIFICATION	1.7440349454119996E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998255965054589	WITHOUT_CLASSIFICATION	1.7440349454119996E-4	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998613714297978	WITHOUT_CLASSIFICATION	1.3862857020220386E-4	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9982420369260452	WITHOUT_CLASSIFICATION	0.0017579630739548316	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999509127305757	WITHOUT_CLASSIFICATION	4.908726942429778E-5	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999883256009731	WITHOUT_CLASSIFICATION	1.1674399026887773E-4	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9998330406727384	WITHOUT_CLASSIFICATION	1.6695932726162058E-4	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999184824378621	WITHOUT_CLASSIFICATION	8.151756213797E-5	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9997012245032109	WITHOUT_CLASSIFICATION	2.98775496789174E-4	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999788844933326	WITHOUT_CLASSIFICATION	2.111550666730309E-5	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997649720180863	WITHOUT_CLASSIFICATION	2.35027981913686E-4	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999800255941148	WITHOUT_CLASSIFICATION	1.997440588515534E-5	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999822516801338	WITHOUT_CLASSIFICATION	1.774831986624119E-5	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999783816662481	WITHOUT_CLASSIFICATION	2.161833375188678E-5	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9992420625125649	WITHOUT_CLASSIFICATION	7.579374874351691E-4	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995623497656206	WITHOUT_CLASSIFICATION	4.376502343793936E-4	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999702636051508	WITHOUT_CLASSIFICATION	2.9736394849187334E-5	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999559444613545	WITHOUT_CLASSIFICATION	4.405553864538808E-5	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999635698393508	WITHOUT_CLASSIFICATION	3.6430160649349856E-5	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997454798668971	WITHOUT_CLASSIFICATION	2.545201331029359E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9846543420890035	WITHOUT_CLASSIFICATION	0.01534565791099653	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999223519473603	WITHOUT_CLASSIFICATION	7.764805263958182E-5	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999949513826404	WITHOUT_CLASSIFICATION	5.048617359730405E-6	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998158094403448	WITHOUT_CLASSIFICATION	1.8419055965527065E-4	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997087613399268	WITHOUT_CLASSIFICATION	2.91238660073106E-4	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999988061158608	WITHOUT_CLASSIFICATION	1.1938841391546454E-6	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998178384928859	WITHOUT_CLASSIFICATION	1.8216150711402454E-4	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9997391411158981	WITHOUT_CLASSIFICATION	2.6085888410181654E-4	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999884638200691	WITHOUT_CLASSIFICATION	1.1536179930847398E-5	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9993091393124274	WITHOUT_CLASSIFICATION	6.908606875725871E-4	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9998960876206634	WITHOUT_CLASSIFICATION	1.0391237933666435E-4	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.999510122063529	WITHOUT_CLASSIFICATION	4.898779364709637E-4	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9998516917584573	WITHOUT_CLASSIFICATION	1.483082415427641E-4	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999599423615113	WITHOUT_CLASSIFICATION	4.005763848867527E-5	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999259445787282	WITHOUT_CLASSIFICATION	7.405542127187331E-5	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9997415212215746	WITHOUT_CLASSIFICATION	2.584787784255456E-4	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999538208753256	WITHOUT_CLASSIFICATION	4.617912467447287E-5	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999229995801914	WITHOUT_CLASSIFICATION	7.700041980862649E-5	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999870440529082	WITHOUT_CLASSIFICATION	1.2955947091895281E-5	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999587535818423	WITHOUT_CLASSIFICATION	4.124641815780136E-5	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999423850466956	WITHOUT_CLASSIFICATION	5.76149533043666E-5	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999741776078149	WITHOUT_CLASSIFICATION	2.5822392185005782E-5	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999177585026278	WITHOUT_CLASSIFICATION	8.224149737224566E-5	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999070439798198	WITHOUT_CLASSIFICATION	9.295602018025366E-5	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999177585026278	WITHOUT_CLASSIFICATION	8.224149737224566E-5	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9990417716286598	WITHOUT_CLASSIFICATION	9.58228371340123E-4	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.99978059399269	WITHOUT_CLASSIFICATION	2.194060073099049E-4	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999065427570057	WITHOUT_CLASSIFICATION	9.345724299433545E-5	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999280823313116	WITHOUT_CLASSIFICATION	7.191766868838686E-5	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998791690288539	WITHOUT_CLASSIFICATION	1.2083097114612298E-4	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999065427570057	WITHOUT_CLASSIFICATION	9.345724299433545E-5	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999982680802912	WITHOUT_CLASSIFICATION	1.7319197088026578E-5	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9996684862349559	WITHOUT_CLASSIFICATION	3.315137650441401E-4	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999987713212822	WITHOUT_CLASSIFICATION	1.2286787177999148E-5	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9996298537471794	WITHOUT_CLASSIFICATION	3.7014625282066985E-4	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999757059289123	WITHOUT_CLASSIFICATION	2.4294071087692165E-5	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999597972297222	WITHOUT_CLASSIFICATION	4.020277027771865E-5	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999983897307674	WITHOUT_CLASSIFICATION	1.610269232591905E-5	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9994825482591265	WITHOUT_CLASSIFICATION	5.174517408735316E-4	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999945925663391	WITHOUT_CLASSIFICATION	5.4074336608973846E-5	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9998628692508137	WITHOUT_CLASSIFICATION	1.3713074918631648E-4	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9997961209045956	WITHOUT_CLASSIFICATION	2.0387909540447354E-4	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999462771852256	WITHOUT_CLASSIFICATION	5.372281477454652E-5	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9998582074973131	WITHOUT_CLASSIFICATION	1.417925026868587E-4	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999028891379641	WITHOUT_CLASSIFICATION	9.711086203585703E-5	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999757575187704	WITHOUT_CLASSIFICATION	2.4242481229685992E-5	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9998270655102108	WITHOUT_CLASSIFICATION	1.729344897891147E-4	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9996499192895205	WITHOUT_CLASSIFICATION	3.500807104794295E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9951446785557646	WITHOUT_CLASSIFICATION	0.004855321444235333	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998506146623748	WITHOUT_CLASSIFICATION	1.493853376251808E-4	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9966185285379286	WITHOUT_CLASSIFICATION	0.0033814714620714766	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.999957579945026	WITHOUT_CLASSIFICATION	4.242005497409345E-5	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9999763820667534	WITHOUT_CLASSIFICATION	2.361793324662826E-5	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997553377979747	WITHOUT_CLASSIFICATION	2.446622020253861E-4	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9990468991370016	WITHOUT_CLASSIFICATION	9.531008629983863E-4	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9999378170470614	WITHOUT_CLASSIFICATION	6.21829529385871E-5	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.996252615926829	WITHOUT_CLASSIFICATION	0.0037473840731709882	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9975840932677666	WITHOUT_CLASSIFICATION	0.0024159067322334156	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999894545638516	WITHOUT_CLASSIFICATION	1.0545436148528988E-5	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.9999325833333368	WITHOUT_CLASSIFICATION	6.741666666314729E-5	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.9999593322765405	WITHOUT_CLASSIFICATION	4.0667723459501306E-5	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997553377979747	WITHOUT_CLASSIFICATION	2.446622020253861E-4	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999768881202322	WITHOUT_CLASSIFICATION	2.3111879767792587E-4	DEFECT
an association	WITHOUT_CLASSIFICATION	0.9999827961737642	WITHOUT_CLASSIFICATION	1.7203826235815186E-5	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9999389950554906	WITHOUT_CLASSIFICATION	6.1004944509459414E-5	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.914929538540913	WITHOUT_CLASSIFICATION	0.08507046145908705	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9966185285379286	WITHOUT_CLASSIFICATION	0.0033814714620714766	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.9999645924860942	WITHOUT_CLASSIFICATION	3.540751390585852E-5	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999709996101159	WITHOUT_CLASSIFICATION	2.900038988411115E-5	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997655772355826	WITHOUT_CLASSIFICATION	2.3442276441733003E-4	DEFECT
special case	WITHOUT_CLASSIFICATION	0.9999024025775635	WITHOUT_CLASSIFICATION	9.759742243652499E-5	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.999985033247163	WITHOUT_CLASSIFICATION	1.4966752837015476E-5	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999949762303631	WITHOUT_CLASSIFICATION	5.0237696369010294E-5	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9995196726980534	WITHOUT_CLASSIFICATION	4.803273019465895E-4	DEFECT
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998502441381633	WITHOUT_CLASSIFICATION	1.4975586183672208E-4	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9988937873117136	WITHOUT_CLASSIFICATION	0.0011062126882863982	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.9999670967961278	WITHOUT_CLASSIFICATION	3.290320387211897E-5	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999683205664989	WITHOUT_CLASSIFICATION	3.16794335011488E-5	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999461018242066	WITHOUT_CLASSIFICATION	5.389817579331904E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999461018242066	WITHOUT_CLASSIFICATION	5.389817579331904E-5	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999653078491773	WITHOUT_CLASSIFICATION	3.4692150822652266E-5	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9997799337102462	WITHOUT_CLASSIFICATION	2.2006628975374985E-4	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999459674002245	WITHOUT_CLASSIFICATION	5.4032599775603484E-5	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999600806824727	WITHOUT_CLASSIFICATION	3.9919317527344264E-5	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999770998804562	WITHOUT_CLASSIFICATION	2.2900119543733844E-5	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9915812498080446	WITHOUT_CLASSIFICATION	0.008418750191955385	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9996746075011316	WITHOUT_CLASSIFICATION	3.2539249886847526E-4	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9957217249007481	WITHOUT_CLASSIFICATION	0.004278275099251886	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9980764167807392	WITHOUT_CLASSIFICATION	0.001923583219260705	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9997100814463186	WITHOUT_CLASSIFICATION	2.89918553681339E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9997100814463186	WITHOUT_CLASSIFICATION	2.89918553681339E-4	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999444132780324	WITHOUT_CLASSIFICATION	5.5586721967671105E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9997100814463186	WITHOUT_CLASSIFICATION	2.89918553681339E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9997100814463186	WITHOUT_CLASSIFICATION	2.89918553681339E-4	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9998825876038563	WITHOUT_CLASSIFICATION	1.1741239614374943E-4	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999156203746792	WITHOUT_CLASSIFICATION	8.437962532085923E-5	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998214557732524	WITHOUT_CLASSIFICATION	1.7854422674747354E-4	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998214557732524	WITHOUT_CLASSIFICATION	1.7854422674747354E-4	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9953487462680009	WITHOUT_CLASSIFICATION	0.004651253731999106	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9998489970709579	WITHOUT_CLASSIFICATION	1.5100292904209018E-4	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999029409406961	WITHOUT_CLASSIFICATION	9.705905930399061E-5	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9997275988763283	WITHOUT_CLASSIFICATION	2.7240112367170604E-4	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998635645414286	WITHOUT_CLASSIFICATION	1.364354585714427E-4	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.999893938214288	WITHOUT_CLASSIFICATION	1.060617857120524E-4	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999330887793293	WITHOUT_CLASSIFICATION	6.691122067074137E-5	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999666675039022	WITHOUT_CLASSIFICATION	3.333249609779112E-5	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999483694582777	WITHOUT_CLASSIFICATION	5.163054172235226E-5	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998080173579151	WITHOUT_CLASSIFICATION	1.91982642084911E-4	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999839195812145	WITHOUT_CLASSIFICATION	1.6080418785480583E-5	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9996998758770157	WITHOUT_CLASSIFICATION	3.001241229842422E-4	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999666492236962	WITHOUT_CLASSIFICATION	3.335077630392108E-5	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998838216484897	WITHOUT_CLASSIFICATION	1.1617835151034943E-4	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999491510256897	WITHOUT_CLASSIFICATION	5.084897431020185E-5	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9997429772359121	WITHOUT_CLASSIFICATION	2.5702276408790404E-4	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999188240980619	WITHOUT_CLASSIFICATION	8.117590193814489E-5	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999501311941349	WITHOUT_CLASSIFICATION	4.986880586504936E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999666492236962	WITHOUT_CLASSIFICATION	3.335077630392108E-5	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.999957579945026	WITHOUT_CLASSIFICATION	4.242005497409345E-5	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.9999519293268588	WITHOUT_CLASSIFICATION	4.807067314106483E-5	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9968839710181157	WITHOUT_CLASSIFICATION	0.0031160289818844347	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.996635709831268	WITHOUT_CLASSIFICATION	0.003364290168732037	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9998537488240318	WITHOUT_CLASSIFICATION	1.4625117596811998E-4	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999772978044489	WITHOUT_CLASSIFICATION	2.2702195551072785E-5	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9998909813059953	WITHOUT_CLASSIFICATION	1.0901869400474395E-4	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999773796705739	WITHOUT_CLASSIFICATION	2.2620329426121107E-5	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.999971408030871	WITHOUT_CLASSIFICATION	2.8591969128950116E-5	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999960322409364	WITHOUT_CLASSIFICATION	3.967759063632485E-6	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999143588575472	WITHOUT_CLASSIFICATION	8.564114245285923E-5	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9995662924917198	WITHOUT_CLASSIFICATION	4.337075082802291E-4	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9993944994775861	WITHOUT_CLASSIFICATION	6.055005224140074E-4	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999870639844208	WITHOUT_CLASSIFICATION	1.2936015579204349E-4	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9986644929366724	WITHOUT_CLASSIFICATION	0.0013355070633276284	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999739879281911	WITHOUT_CLASSIFICATION	2.6012071808784787E-5	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999622840060778	WITHOUT_CLASSIFICATION	3.771599392225284E-5	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999852200897965	WITHOUT_CLASSIFICATION	1.4779910203437764E-5	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9998956625920915	WITHOUT_CLASSIFICATION	1.0433740790844276E-4	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999362077196998	WITHOUT_CLASSIFICATION	6.379228030019775E-5	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998246612837901	WITHOUT_CLASSIFICATION	1.753387162098776E-4	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999597991614009	WITHOUT_CLASSIFICATION	4.020083859909443E-5	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999200557896517	WITHOUT_CLASSIFICATION	7.994421034830077E-5	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.999971408030871	WITHOUT_CLASSIFICATION	2.8591969128950116E-5	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999081036942157	WITHOUT_CLASSIFICATION	9.189630578430902E-5	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.999936880410185	WITHOUT_CLASSIFICATION	6.311958981494523E-5	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999804139649007	WITHOUT_CLASSIFICATION	1.95860350993875E-5	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999519835106047	WITHOUT_CLASSIFICATION	4.801648939532481E-5	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997725060994543	WITHOUT_CLASSIFICATION	2.2749390054575922E-4	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.999888526308168	WITHOUT_CLASSIFICATION	1.1147369183202752E-4	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9998305573920645	WITHOUT_CLASSIFICATION	1.694426079354077E-4	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9997323724098859	WITHOUT_CLASSIFICATION	2.676275901140976E-4	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9998305573920645	WITHOUT_CLASSIFICATION	1.694426079354077E-4	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.9998778659108488	WITHOUT_CLASSIFICATION	1.2213408915119305E-4	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999861305141547	WITHOUT_CLASSIFICATION	1.386948584521381E-5	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.999774297199981	WITHOUT_CLASSIFICATION	2.2570280001893596E-4	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9998711314731512	WITHOUT_CLASSIFICATION	1.2886852684885174E-4	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9994832317547917	WITHOUT_CLASSIFICATION	5.167682452083712E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999363369757113	WITHOUT_CLASSIFICATION	6.366302428882168E-5	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998377900272838	WITHOUT_CLASSIFICATION	1.622099727163083E-4	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997926072296861	WITHOUT_CLASSIFICATION	2.0739277031382093E-4	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999861305141547	WITHOUT_CLASSIFICATION	1.386948584521381E-5	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999963788421241	WITHOUT_CLASSIFICATION	3.6211578758474577E-6	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9984106184510794	WITHOUT_CLASSIFICATION	0.0015893815489206788	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9997968660512834	WITHOUT_CLASSIFICATION	2.031339487165661E-4	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999974409379272	WITHOUT_CLASSIFICATION	2.559062072795408E-5	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9999284713835019	WITHOUT_CLASSIFICATION	7.152861649803753E-5	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9998879036774593	WITHOUT_CLASSIFICATION	1.1209632254071522E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999363369757113	WITHOUT_CLASSIFICATION	6.366302428882168E-5	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9997640182007088	WITHOUT_CLASSIFICATION	2.3598179929119038E-4	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998344721293071	WITHOUT_CLASSIFICATION	1.6552787069284497E-4	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998536538130808	WITHOUT_CLASSIFICATION	1.463461869193111E-4	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998657397346148	WITHOUT_CLASSIFICATION	1.3426026538510916E-4	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998657397346148	WITHOUT_CLASSIFICATION	1.3426026538510916E-4	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998657397346148	WITHOUT_CLASSIFICATION	1.3426026538510916E-4	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999809232175114	WITHOUT_CLASSIFICATION	1.9076782488654843E-5	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999809232175114	WITHOUT_CLASSIFICATION	1.9076782488654843E-5	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999244958401178	WITHOUT_CLASSIFICATION	7.550415988222438E-5	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999950215025447	WITHOUT_CLASSIFICATION	4.978497455387937E-6	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.9998780309563178	WITHOUT_CLASSIFICATION	1.2196904368235156E-4	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9999088060842201	WITHOUT_CLASSIFICATION	9.119391578004971E-5	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9897817511305449	WITHOUT_CLASSIFICATION	0.010218248869455108	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998217963252809	WITHOUT_CLASSIFICATION	1.782036747191058E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998516071542131	WITHOUT_CLASSIFICATION	1.4839284578689794E-4	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997725060994543	WITHOUT_CLASSIFICATION	2.2749390054575922E-4	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9998257437630304	WITHOUT_CLASSIFICATION	1.7425623696978716E-4	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999223790962957	WITHOUT_CLASSIFICATION	7.762090370434732E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998217963252809	WITHOUT_CLASSIFICATION	1.782036747191058E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998516071542131	WITHOUT_CLASSIFICATION	1.4839284578689794E-4	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997725060994543	WITHOUT_CLASSIFICATION	2.2749390054575922E-4	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999337447832372	WITHOUT_CLASSIFICATION	6.625521676282105E-5	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998185617663118	WITHOUT_CLASSIFICATION	1.8143823368824046E-4	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999845392437585	WITHOUT_CLASSIFICATION	1.5460756241462235E-5	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9961403765637362	WITHOUT_CLASSIFICATION	0.0038596234362637963	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999372553152999	WITHOUT_CLASSIFICATION	6.27446847001493E-5	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999297975062876	WITHOUT_CLASSIFICATION	7.020249371229608E-5	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9999710676571517	WITHOUT_CLASSIFICATION	2.893234284826283E-5	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999461018242066	WITHOUT_CLASSIFICATION	5.389817579331904E-5	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999788481948372	WITHOUT_CLASSIFICATION	2.115180516278932E-5	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9992627326013177	WITHOUT_CLASSIFICATION	7.372673986821793E-4	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9944408132363356	WITHOUT_CLASSIFICATION	0.00555918676366437	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9996845181062473	WITHOUT_CLASSIFICATION	3.154818937527515E-4	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999982312605317	WITHOUT_CLASSIFICATION	1.768739468294722E-5	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998160717459792	WITHOUT_CLASSIFICATION	1.8392825402071777E-4	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999204855810105	WITHOUT_CLASSIFICATION	7.951441898947476E-5	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998859968797428	WITHOUT_CLASSIFICATION	1.1400312025724352E-4	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999273379344258	WITHOUT_CLASSIFICATION	7.266206557427225E-5	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.999922769367991	WITHOUT_CLASSIFICATION	7.723063200901902E-5	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9986221279051402	WITHOUT_CLASSIFICATION	0.0013778720948598685	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999992789095484	WITHOUT_CLASSIFICATION	7.210904516233662E-7	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9997134501074146	WITHOUT_CLASSIFICATION	2.8654989258535094E-4	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999963691975766	WITHOUT_CLASSIFICATION	3.6308024234464046E-6	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.999987501200699	WITHOUT_CLASSIFICATION	1.249879930110308E-5	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9960279649417072	WITHOUT_CLASSIFICATION	0.003972035058292817	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999977706519537	WITHOUT_CLASSIFICATION	2.229348046363982E-6	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998260512323802	WITHOUT_CLASSIFICATION	1.7394876761980585E-4	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998018753638632	WITHOUT_CLASSIFICATION	1.981246361368295E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999016655003882	WITHOUT_CLASSIFICATION	9.833449961188546E-5	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999016655003882	WITHOUT_CLASSIFICATION	9.833449961188546E-5	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9997598740793564	WITHOUT_CLASSIFICATION	2.4012592064360583E-4	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9988208326309336	WITHOUT_CLASSIFICATION	0.0011791673690663966	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998578097193699	WITHOUT_CLASSIFICATION	1.4219028063015412E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999722794791431	WITHOUT_CLASSIFICATION	2.772052085695879E-5	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9995233763243451	WITHOUT_CLASSIFICATION	4.7662367565494266E-4	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999632702983537	WITHOUT_CLASSIFICATION	3.672970164627947E-5	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9999608400422495	WITHOUT_CLASSIFICATION	3.9159957750489074E-5	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.9999664823429418	WITHOUT_CLASSIFICATION	3.351765705819848E-5	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999881314792307	WITHOUT_CLASSIFICATION	1.1868520769333647E-5	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999736951824921	WITHOUT_CLASSIFICATION	2.63048175078971E-4	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999736951824921	WITHOUT_CLASSIFICATION	2.63048175078971E-4	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999736951824921	WITHOUT_CLASSIFICATION	2.63048175078971E-4	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999736951824921	WITHOUT_CLASSIFICATION	2.63048175078971E-4	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999736951824921	WITHOUT_CLASSIFICATION	2.63048175078971E-4	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999736951824921	WITHOUT_CLASSIFICATION	2.63048175078971E-4	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999736951824921	WITHOUT_CLASSIFICATION	2.63048175078971E-4	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999736951824921	WITHOUT_CLASSIFICATION	2.63048175078971E-4	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999736951824921	WITHOUT_CLASSIFICATION	2.63048175078971E-4	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999736951824921	WITHOUT_CLASSIFICATION	2.63048175078971E-4	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999736951824921	WITHOUT_CLASSIFICATION	2.63048175078971E-4	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9984559570788115	WITHOUT_CLASSIFICATION	0.0015440429211884563	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9998565439274074	WITHOUT_CLASSIFICATION	1.4345607259257643E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999505468822624	WITHOUT_CLASSIFICATION	4.9453117737522974E-5	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9949745398949604	WITHOUT_CLASSIFICATION	0.0050254601050395715	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999954788095296	WITHOUT_CLASSIFICATION	4.5211904703907186E-5	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9995244788088531	WITHOUT_CLASSIFICATION	4.7552119114689575E-4	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999630649059541	WITHOUT_CLASSIFICATION	3.6935094045896346E-5	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999091546175728	WITHOUT_CLASSIFICATION	9.084538242717738E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999505468822624	WITHOUT_CLASSIFICATION	4.9453117737522974E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999505468822624	WITHOUT_CLASSIFICATION	4.9453117737522974E-5	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999839828730314	WITHOUT_CLASSIFICATION	1.6017126968663213E-5	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.99993905043121	WITHOUT_CLASSIFICATION	6.094956879003081E-5	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998593003702467	WITHOUT_CLASSIFICATION	1.406996297532874E-4	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9998040122732567	WITHOUT_CLASSIFICATION	1.9598772674323976E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999760599022809	WITHOUT_CLASSIFICATION	2.3940097719107757E-5	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.999922769367991	WITHOUT_CLASSIFICATION	7.723063200901902E-5	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9997697067111807	WITHOUT_CLASSIFICATION	2.3029328881939176E-4	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999686335909019	WITHOUT_CLASSIFICATION	3.1366409098118165E-5	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999587296831377	WITHOUT_CLASSIFICATION	4.127031686216542E-5	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998636910647802	WITHOUT_CLASSIFICATION	1.3630893521972902E-4	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9998982510887543	WITHOUT_CLASSIFICATION	1.0174891124564528E-4	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999050920032025	WITHOUT_CLASSIFICATION	9.490799679743918E-5	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996858993569826	WITHOUT_CLASSIFICATION	3.141006430174474E-4	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996858993569826	WITHOUT_CLASSIFICATION	3.141006430174474E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996858993569826	WITHOUT_CLASSIFICATION	3.141006430174474E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996858993569826	WITHOUT_CLASSIFICATION	3.141006430174474E-4	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997725060994543	WITHOUT_CLASSIFICATION	2.2749390054575922E-4	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999862568235982	WITHOUT_CLASSIFICATION	1.374317640180615E-4	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999591037807167	WITHOUT_CLASSIFICATION	4.0896219283301596E-4	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997725060994543	WITHOUT_CLASSIFICATION	2.2749390054575922E-4	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9655752970225118	WITHOUT_CLASSIFICATION	0.034424702977488224	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999147555499039	WITHOUT_CLASSIFICATION	8.524445009603953E-5	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998290686128852	WITHOUT_CLASSIFICATION	1.7093138711472177E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998745704537072	WITHOUT_CLASSIFICATION	1.2542954629282105E-4	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999376287622551	WITHOUT_CLASSIFICATION	6.237123774491021E-5	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.999947256816646	WITHOUT_CLASSIFICATION	5.274318335400758E-5	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999786720534255	WITHOUT_CLASSIFICATION	2.132794657450794E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999788867809498	WITHOUT_CLASSIFICATION	2.1113219050156658E-5	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9998618854849186	WITHOUT_CLASSIFICATION	1.3811451508134834E-4	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999539299872909	WITHOUT_CLASSIFICATION	4.6070012709081005E-5	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.99988422056781	WITHOUT_CLASSIFICATION	1.1577943218999934E-4	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999542150887356	WITHOUT_CLASSIFICATION	4.578491126426976E-5	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999542150887356	WITHOUT_CLASSIFICATION	4.578491126426976E-5	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999542150887356	WITHOUT_CLASSIFICATION	4.578491126426976E-5	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9998565389681573	WITHOUT_CLASSIFICATION	1.4346103184269526E-4	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9999661442120856	WITHOUT_CLASSIFICATION	3.385578791435095E-5	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999824542122128	WITHOUT_CLASSIFICATION	1.7545787787245162E-5	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997725060994543	WITHOUT_CLASSIFICATION	2.2749390054575922E-4	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997725060994543	WITHOUT_CLASSIFICATION	2.2749390054575922E-4	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9996192282103	WITHOUT_CLASSIFICATION	3.807717896999246E-4	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998657397346148	WITHOUT_CLASSIFICATION	1.3426026538510916E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9981932518008758	WITHOUT_CLASSIFICATION	0.0018067481991241767	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9998244383476117	WITHOUT_CLASSIFICATION	1.7556165238820687E-4	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.999946036963909	WITHOUT_CLASSIFICATION	5.396303609104444E-5	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9936570456642576	WITHOUT_CLASSIFICATION	0.006342954335742373	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998235378625023	WITHOUT_CLASSIFICATION	1.7646213749770672E-4	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999616388599645	WITHOUT_CLASSIFICATION	3.8361140035583045E-5	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999976480692904	WITHOUT_CLASSIFICATION	2.351930709597334E-5	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9995349805211154	WITHOUT_CLASSIFICATION	4.6501947888445515E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999496944995135	WITHOUT_CLASSIFICATION	5.0305500486550864E-5	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9976108095056232	WITHOUT_CLASSIFICATION	0.002389190494376875	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9979527189785464	WITHOUT_CLASSIFICATION	0.0020472810214535843	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9997765168524213	WITHOUT_CLASSIFICATION	2.2348314757881287E-4	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.999999484889026	WITHOUT_CLASSIFICATION	5.15110973937898E-7	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999919315699842	WITHOUT_CLASSIFICATION	8.068430015767618E-6	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999958364315497	WITHOUT_CLASSIFICATION	4.163568450322348E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999731086782502	WITHOUT_CLASSIFICATION	2.6891321749842776E-5	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999035357381454	WITHOUT_CLASSIFICATION	9.646426185466076E-5	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9997445895018255	WITHOUT_CLASSIFICATION	2.554104981744059E-4	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9984500794892975	WITHOUT_CLASSIFICATION	0.001549920510702428	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999646036569524	WITHOUT_CLASSIFICATION	3.5396343047598254E-5	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9998341886742468	WITHOUT_CLASSIFICATION	1.658113257531744E-4	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9993914453767372	WITHOUT_CLASSIFICATION	6.085546232627725E-4	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.99994556311159	WITHOUT_CLASSIFICATION	5.4436888409946593E-5	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999954667492348	WITHOUT_CLASSIFICATION	4.533250765203246E-5	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9997428750948196	WITHOUT_CLASSIFICATION	2.5712490518036227E-4	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999618946222915	WITHOUT_CLASSIFICATION	3.810537770853891E-5	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999461018242066	WITHOUT_CLASSIFICATION	5.389817579331904E-5	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9995382002771392	WITHOUT_CLASSIFICATION	4.617997228607815E-4	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9986856921752539	WITHOUT_CLASSIFICATION	0.0013143078247461258	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.9999889260420958	WITHOUT_CLASSIFICATION	1.107395790410563E-5	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999377629434966	WITHOUT_CLASSIFICATION	6.223705650341353E-5	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.9999857921861619	WITHOUT_CLASSIFICATION	1.4207813838138216E-5	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9954602989227217	WITHOUT_CLASSIFICATION	0.004539701077278317	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9997473983385393	WITHOUT_CLASSIFICATION	2.5260166146062735E-4	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9997514682499397	WITHOUT_CLASSIFICATION	2.4853175006034003E-4	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9998647988574049	WITHOUT_CLASSIFICATION	1.3520114259503346E-4	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9990374956732219	WITHOUT_CLASSIFICATION	9.625043267781319E-4	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997592521060885	WITHOUT_CLASSIFICATION	2.407478939113616E-4	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.9998777110280083	WITHOUT_CLASSIFICATION	1.2228897199164024E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999923019163879	WITHOUT_CLASSIFICATION	7.69808361221523E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999640366102997	WITHOUT_CLASSIFICATION	3.5963389700300035E-4	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999948194636973	WITHOUT_CLASSIFICATION	5.180536302649991E-6	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999786404779613	WITHOUT_CLASSIFICATION	2.1359522038747754E-5	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9993669935659573	WITHOUT_CLASSIFICATION	6.330064340427387E-4	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9992188288147638	WITHOUT_CLASSIFICATION	7.811711852362374E-4	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9988130941903022	WITHOUT_CLASSIFICATION	0.0011869058096978422	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9991757232338657	WITHOUT_CLASSIFICATION	8.242767661341359E-4	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.9999053569025833	WITHOUT_CLASSIFICATION	9.46430974166628E-5	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999409887453804	WITHOUT_CLASSIFICATION	5.9011254619608256E-5	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.999988176143917	WITHOUT_CLASSIFICATION	1.18238560830085E-5	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999858191464304	WITHOUT_CLASSIFICATION	1.4180853569713088E-5	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997191813033937	WITHOUT_CLASSIFICATION	2.8081869660629E-4	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999907247771936	WITHOUT_CLASSIFICATION	9.275222806392878E-6	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999103593546974	WITHOUT_CLASSIFICATION	8.964064530249212E-5	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999448978529297	WITHOUT_CLASSIFICATION	5.5102147070140106E-5	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999389738292978	WITHOUT_CLASSIFICATION	6.1026170702352876E-5	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999196908020284	WITHOUT_CLASSIFICATION	8.030919797172471E-5	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9997286725447659	WITHOUT_CLASSIFICATION	2.713274552339624E-4	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9990956285263006	WITHOUT_CLASSIFICATION	9.04371473699497E-4	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9998261482858941	WITHOUT_CLASSIFICATION	1.738517141059099E-4	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9991373852224932	WITHOUT_CLASSIFICATION	8.626147775068557E-4	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9996154654206533	WITHOUT_CLASSIFICATION	3.845345793467572E-4	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999945461088608	WITHOUT_CLASSIFICATION	5.4538911392003674E-5	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999484336684717	WITHOUT_CLASSIFICATION	5.156633152826113E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999505368860652	WITHOUT_CLASSIFICATION	4.9463113934886174E-5	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9997848679528367	WITHOUT_CLASSIFICATION	2.1513204716338465E-4	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999280127476522	WITHOUT_CLASSIFICATION	7.19872523478118E-5	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9996307029079188	WITHOUT_CLASSIFICATION	3.692970920812556E-4	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9998777181227223	WITHOUT_CLASSIFICATION	1.222818772776694E-4	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999828190971556	WITHOUT_CLASSIFICATION	1.7180902844327533E-5	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9991205386757329	WITHOUT_CLASSIFICATION	8.794613242671703E-4	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.999905522694629	WITHOUT_CLASSIFICATION	9.447730537112803E-5	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999741019546183	WITHOUT_CLASSIFICATION	2.5898045381598434E-5	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999372729336066	WITHOUT_CLASSIFICATION	6.272706639341355E-5	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.999790784471097	WITHOUT_CLASSIFICATION	2.09215528902931E-4	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.999825250076449	WITHOUT_CLASSIFICATION	1.747499235509708E-4	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998851455075488	WITHOUT_CLASSIFICATION	1.1485449245110188E-4	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9591194389353571	WITHOUT_CLASSIFICATION	0.040880561064642905	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9997520706648415	WITHOUT_CLASSIFICATION	2.4792933515851995E-4	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.9999481242828627	WITHOUT_CLASSIFICATION	5.187571713727625E-5	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999401188121991	WITHOUT_CLASSIFICATION	5.988118780084435E-5	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9996219984263885	WITHOUT_CLASSIFICATION	3.780015736115317E-4	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999878167789889	WITHOUT_CLASSIFICATION	1.2183221011099048E-4	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9983301325824923	WITHOUT_CLASSIFICATION	0.0016698674175076756	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9999244556520334	WITHOUT_CLASSIFICATION	7.55443479666725E-5	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999963118661074	WITHOUT_CLASSIFICATION	3.688133892604208E-5	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999673895194592	WITHOUT_CLASSIFICATION	3.261048054077765E-5	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999696731582254	WITHOUT_CLASSIFICATION	3.0326841774579444E-5	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999542034529703	WITHOUT_CLASSIFICATION	4.579654702980247E-5	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999954028894084	WITHOUT_CLASSIFICATION	4.597110591615552E-6	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9998848290433303	WITHOUT_CLASSIFICATION	1.15170956669592E-4	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999806649248152	WITHOUT_CLASSIFICATION	1.9335075184836533E-5	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9999623478651559	WITHOUT_CLASSIFICATION	3.765213484410628E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996007044451499	WITHOUT_CLASSIFICATION	3.9929555485014926E-4	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996007044451499	WITHOUT_CLASSIFICATION	3.9929555485014926E-4	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9995631741773008	WITHOUT_CLASSIFICATION	4.3682582269925026E-4	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.999700244161529	WITHOUT_CLASSIFICATION	2.9975583847089104E-4	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999461472207862	WITHOUT_CLASSIFICATION	5.385277921385369E-5	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9958544216138164	WITHOUT_CLASSIFICATION	0.004145578386183576	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999208841142556	WITHOUT_CLASSIFICATION	7.911588574434673E-5	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9850884662504764	WITHOUT_CLASSIFICATION	0.014911533749523642	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999157318106532	WITHOUT_CLASSIFICATION	8.426818934684772E-5	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9988394620521318	WITHOUT_CLASSIFICATION	0.0011605379478681135	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9998640598957842	WITHOUT_CLASSIFICATION	1.3594010421576384E-4	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9981691785138759	WITHOUT_CLASSIFICATION	0.0018308214861241408	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999916316111592	WITHOUT_CLASSIFICATION	8.368388840810231E-6	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999833455491167	WITHOUT_CLASSIFICATION	1.6654450883294678E-4	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998757394579476	WITHOUT_CLASSIFICATION	1.242605420523787E-4	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999948314767548	WITHOUT_CLASSIFICATION	5.168523245200776E-5	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9995877953093361	WITHOUT_CLASSIFICATION	4.1220469066395886E-4	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9997958038042942	WITHOUT_CLASSIFICATION	2.0419619570565044E-4	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9939537398786232	WITHOUT_CLASSIFICATION	0.006046260121376841	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9939537398786232	WITHOUT_CLASSIFICATION	0.006046260121376841	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9997871588682548	WITHOUT_CLASSIFICATION	2.1284113174533967E-4	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9995468377102915	WITHOUT_CLASSIFICATION	4.531622897084706E-4	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999726819198673	WITHOUT_CLASSIFICATION	2.731808013273722E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998993056631093	WITHOUT_CLASSIFICATION	1.0069433689068479E-4	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999328691370996	WITHOUT_CLASSIFICATION	6.713086290050705E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999788867809498	WITHOUT_CLASSIFICATION	2.1113219050156658E-5	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999917064492826	WITHOUT_CLASSIFICATION	8.293550717396895E-5	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999328691370996	WITHOUT_CLASSIFICATION	6.713086290050705E-5	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999850310065221	WITHOUT_CLASSIFICATION	1.4968993477823724E-5	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999245995236475	WITHOUT_CLASSIFICATION	7.540047635240532E-5	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999820213617978	WITHOUT_CLASSIFICATION	1.7978638202198072E-5	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999820213617978	WITHOUT_CLASSIFICATION	1.7978638202198072E-5	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998531411690208	WITHOUT_CLASSIFICATION	1.4685883097916572E-4	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9998837409080167	WITHOUT_CLASSIFICATION	1.1625909198328655E-4	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999418660081624	WITHOUT_CLASSIFICATION	5.813399183757035E-5	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9979763486293288	WITHOUT_CLASSIFICATION	0.0020236513706712498	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9997077111726748	WITHOUT_CLASSIFICATION	2.922888273253019E-4	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9997816996754691	WITHOUT_CLASSIFICATION	2.1830032453086984E-4	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998430250222008	WITHOUT_CLASSIFICATION	1.5697497779923334E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.999970975618489	WITHOUT_CLASSIFICATION	2.9024381510896112E-5	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9958234823038166	WITHOUT_CLASSIFICATION	0.004176517696183378	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9988263754401064	WITHOUT_CLASSIFICATION	0.0011736245598934826	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9998744838189656	WITHOUT_CLASSIFICATION	1.255161810344455E-4	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998917116594189	WITHOUT_CLASSIFICATION	1.0828834058102518E-4	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999437151282291	WITHOUT_CLASSIFICATION	5.628487177088604E-5	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999509127305757	WITHOUT_CLASSIFICATION	4.908726942429778E-5	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999739452841781	WITHOUT_CLASSIFICATION	2.6054715821897235E-4	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997538019621434	WITHOUT_CLASSIFICATION	2.461980378566822E-4	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999927775567772	WITHOUT_CLASSIFICATION	7.222443222728324E-6	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9991029331234509	WITHOUT_CLASSIFICATION	8.970668765490767E-4	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999530750358219	WITHOUT_CLASSIFICATION	4.692496417804238E-5	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999375810226756	WITHOUT_CLASSIFICATION	6.2418977324355E-5	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998135068465002	WITHOUT_CLASSIFICATION	1.8649315349981315E-4	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9995469325750361	WITHOUT_CLASSIFICATION	4.5306742496392297E-4	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9998174750633038	WITHOUT_CLASSIFICATION	1.8252493669627462E-4	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999057956638678	WITHOUT_CLASSIFICATION	9.420433613212659E-5	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999072398257004	WITHOUT_CLASSIFICATION	9.27601742996507E-5	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9996734914674642	WITHOUT_CLASSIFICATION	3.265085325357745E-4	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999928902614033	WITHOUT_CLASSIFICATION	7.109738596687232E-6	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9995838732654473	WITHOUT_CLASSIFICATION	4.161267345526845E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998592060524801	WITHOUT_CLASSIFICATION	1.4079394751992925E-4	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999448970088756	WITHOUT_CLASSIFICATION	5.5102991124440225E-5	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.9998944663273882	WITHOUT_CLASSIFICATION	1.0553367261184784E-4	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999078270893339	WITHOUT_CLASSIFICATION	9.217291066610672E-5	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9988347285834641	WITHOUT_CLASSIFICATION	0.0011652714165358725	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998444774529314	WITHOUT_CLASSIFICATION	1.5552254706866736E-4	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9998763208209192	WITHOUT_CLASSIFICATION	1.236791790807727E-4	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999148826603427	WITHOUT_CLASSIFICATION	8.511733965737789E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999148826603427	WITHOUT_CLASSIFICATION	8.511733965737789E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999710161216365	WITHOUT_CLASSIFICATION	2.8983878363558605E-5	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999551901237014	WITHOUT_CLASSIFICATION	4.480987629851654E-5	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9995144544366907	WITHOUT_CLASSIFICATION	4.855455633093302E-4	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9998772580811107	WITHOUT_CLASSIFICATION	1.2274191888933045E-4	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998292441052661	WITHOUT_CLASSIFICATION	1.707558947338681E-4	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999134864934184	WITHOUT_CLASSIFICATION	8.651350658158755E-5	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9998965073315055	WITHOUT_CLASSIFICATION	1.0349266849449266E-4	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9990494963872276	WITHOUT_CLASSIFICATION	9.505036127723678E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999710161216365	WITHOUT_CLASSIFICATION	2.8983878363558605E-5	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999551901237014	WITHOUT_CLASSIFICATION	4.480987629851654E-5	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999158298216215	WITHOUT_CLASSIFICATION	8.417017837853864E-5	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998479500597426	WITHOUT_CLASSIFICATION	1.5204994025738985E-4	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999943943598725	WITHOUT_CLASSIFICATION	5.605640127519836E-6	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9993179133341379	WITHOUT_CLASSIFICATION	6.820866658620714E-4	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9997929138277493	WITHOUT_CLASSIFICATION	2.07086172250697E-4	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9994032775914616	WITHOUT_CLASSIFICATION	5.967224085383597E-4	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999521173759953	WITHOUT_CLASSIFICATION	4.7882624004726864E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999768121436763	WITHOUT_CLASSIFICATION	2.3187856323705464E-5	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9998659130370283	WITHOUT_CLASSIFICATION	1.340869629716745E-4	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.998536444819117	WITHOUT_CLASSIFICATION	0.001463555180883096	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9994122891551602	WITHOUT_CLASSIFICATION	5.877108448396794E-4	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.998536444819117	WITHOUT_CLASSIFICATION	0.001463555180883096	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9994958816247409	WITHOUT_CLASSIFICATION	5.041183752590943E-4	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9998261482858941	WITHOUT_CLASSIFICATION	1.738517141059099E-4	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9994958816247409	WITHOUT_CLASSIFICATION	5.041183752590943E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999142673302128	WITHOUT_CLASSIFICATION	8.573266978722498E-5	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999331763381055	WITHOUT_CLASSIFICATION	6.682366189450479E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999768121436763	WITHOUT_CLASSIFICATION	2.3187856323705464E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999768121436763	WITHOUT_CLASSIFICATION	2.3187856323705464E-5	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999497062081149	WITHOUT_CLASSIFICATION	5.0293791885105863E-5	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999497803759799	WITHOUT_CLASSIFICATION	5.0219624019990576E-5	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999497062081149	WITHOUT_CLASSIFICATION	5.0293791885105863E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9998797333100942	WITHOUT_CLASSIFICATION	1.2026668990588675E-4	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999848224432872	WITHOUT_CLASSIFICATION	1.5177556712864307E-5	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999469077160437	WITHOUT_CLASSIFICATION	5.309228395622232E-5	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999875538890949	WITHOUT_CLASSIFICATION	1.2446110905127175E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9998862593849557	WITHOUT_CLASSIFICATION	1.1374061504427516E-4	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999495868862354	WITHOUT_CLASSIFICATION	5.0413113764497944E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999710340247556	WITHOUT_CLASSIFICATION	2.896597524431429E-5	DEFECT
columns	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9998465754163217	WITHOUT_CLASSIFICATION	1.5342458367836008E-4	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999801135697203	WITHOUT_CLASSIFICATION	1.988643027979669E-5	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.9999716131614454	WITHOUT_CLASSIFICATION	2.8386838554535453E-5	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998931811592616	WITHOUT_CLASSIFICATION	1.0681884073826706E-4	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999188400009179	WITHOUT_CLASSIFICATION	8.115999908199938E-5	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999066950677676	WITHOUT_CLASSIFICATION	9.330493223225417E-5	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999093920873733	WITHOUT_CLASSIFICATION	9.060791262667926E-5	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9997538019621434	WITHOUT_CLASSIFICATION	2.461980378566822E-4	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999157969361419	WITHOUT_CLASSIFICATION	8.420306385812026E-5	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998793696863296	WITHOUT_CLASSIFICATION	1.2063031367034981E-4	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998246949228169	WITHOUT_CLASSIFICATION	1.753050771831999E-4	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9997538019621434	WITHOUT_CLASSIFICATION	2.461980378566822E-4	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9997584884518713	WITHOUT_CLASSIFICATION	2.415115481285682E-4	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998776265815996	WITHOUT_CLASSIFICATION	1.2237341840044746E-4	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9993596937929	WITHOUT_CLASSIFICATION	6.403062070999116E-4	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9991706555004675	WITHOUT_CLASSIFICATION	8.293444995325291E-4	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9997299833207958	WITHOUT_CLASSIFICATION	2.7001667920422665E-4	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9996360082096658	WITHOUT_CLASSIFICATION	3.639917903342447E-4	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9937214840972147	WITHOUT_CLASSIFICATION	0.0062785159027853666	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9997371231803807	WITHOUT_CLASSIFICATION	2.628768196193774E-4	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9998862593849557	WITHOUT_CLASSIFICATION	1.1374061504427516E-4	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999417980133194	WITHOUT_CLASSIFICATION	5.820198668060633E-5	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9998487954252032	WITHOUT_CLASSIFICATION	1.5120457479682434E-4	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9346917630356881	WITHOUT_CLASSIFICATION	0.06530823696431193	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.9999600038602527	WITHOUT_CLASSIFICATION	3.999613974716205E-5	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999824705771576	WITHOUT_CLASSIFICATION	1.7529422842360387E-5	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.9999921121784662	WITHOUT_CLASSIFICATION	7.88782153384748E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9998797333100942	WITHOUT_CLASSIFICATION	1.2026668990588675E-4	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9998797333100942	WITHOUT_CLASSIFICATION	1.2026668990588675E-4	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999616752774788	WITHOUT_CLASSIFICATION	3.832472252116068E-5	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999899957474294	WITHOUT_CLASSIFICATION	1.0004252570681271E-5	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9998773613061595	WITHOUT_CLASSIFICATION	1.2263869384049108E-4	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999793933929203	WITHOUT_CLASSIFICATION	2.0606607079656313E-5	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9963800102057786	WITHOUT_CLASSIFICATION	0.0036199897942213125	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9996925913368705	WITHOUT_CLASSIFICATION	3.074086631294671E-4	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9997855796507669	WITHOUT_CLASSIFICATION	2.144203492331974E-4	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999761368410939	WITHOUT_CLASSIFICATION	2.386315890615304E-5	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9998286054662067	WITHOUT_CLASSIFICATION	1.7139453379333444E-4	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997813040223514	WITHOUT_CLASSIFICATION	2.186959776486038E-4	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999735600736681	WITHOUT_CLASSIFICATION	2.643992633183101E-5	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998931811592616	WITHOUT_CLASSIFICATION	1.0681884073826706E-4	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999710161216365	WITHOUT_CLASSIFICATION	2.8983878363558605E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999735600736681	WITHOUT_CLASSIFICATION	2.643992633183101E-5	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999297114087894	WITHOUT_CLASSIFICATION	7.028859121061142E-5	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999719908394946	WITHOUT_CLASSIFICATION	2.8009160505317034E-5	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999625026216084	WITHOUT_CLASSIFICATION	3.749737839162282E-5	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9548871436120548	WITHOUT_CLASSIFICATION	0.0451128563879451	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9995126835230543	WITHOUT_CLASSIFICATION	4.873164769457257E-4	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999566842764294	WITHOUT_CLASSIFICATION	4.331572357061318E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999660636578949	WITHOUT_CLASSIFICATION	3.393634210518878E-5	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999226986131949	WITHOUT_CLASSIFICATION	7.730138680498997E-5	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999710161216365	WITHOUT_CLASSIFICATION	2.8983878363558605E-5	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999036503966486	WITHOUT_CLASSIFICATION	9.634960335142948E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999931828964108	WITHOUT_CLASSIFICATION	6.817103589192334E-5	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999931828964108	WITHOUT_CLASSIFICATION	6.817103589192334E-5	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9991164691131174	WITHOUT_CLASSIFICATION	8.835308868826403E-4	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999465142126124	WITHOUT_CLASSIFICATION	5.348578738754728E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999735600736681	WITHOUT_CLASSIFICATION	2.643992633183101E-5	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9995126835230543	WITHOUT_CLASSIFICATION	4.873164769457257E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999660636578949	WITHOUT_CLASSIFICATION	3.393634210518878E-5	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999440730752729	WITHOUT_CLASSIFICATION	5.5926924727181574E-5	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999905099301022	WITHOUT_CLASSIFICATION	9.490069897853278E-6	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9998870531426206	WITHOUT_CLASSIFICATION	1.1294685737944068E-4	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999259665016359	WITHOUT_CLASSIFICATION	7.403349836405138E-5	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9998600832073666	WITHOUT_CLASSIFICATION	1.3991679263340717E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999297114087894	WITHOUT_CLASSIFICATION	7.028859121061142E-5	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9998225280235808	WITHOUT_CLASSIFICATION	1.774719764192365E-4	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.9998826431136786	WITHOUT_CLASSIFICATION	1.173568863213133E-4	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9998843603531157	WITHOUT_CLASSIFICATION	1.1563964688429738E-4	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999645637292537	WITHOUT_CLASSIFICATION	3.54362707462861E-5	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999645637292537	WITHOUT_CLASSIFICATION	3.54362707462861E-5	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9999308303521127	WITHOUT_CLASSIFICATION	6.916964788735812E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999142673302128	WITHOUT_CLASSIFICATION	8.573266978722498E-5	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327907506788	WITHOUT_CLASSIFICATION	1.6720924932117604E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9998795247494693	WITHOUT_CLASSIFICATION	1.2047525053067557E-4	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9935255395252138	WITHOUT_CLASSIFICATION	0.0064744604747862195	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.994803986992356	WITHOUT_CLASSIFICATION	0.005196013007643984	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9978366884335846	WITHOUT_CLASSIFICATION	0.0021633115664153515	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9989184853216744	WITHOUT_CLASSIFICATION	0.0010815146783255361	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9998121056196032	WITHOUT_CLASSIFICATION	1.8789438039678238E-4	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9996451162225399	WITHOUT_CLASSIFICATION	3.54883777460082E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999461018242066	WITHOUT_CLASSIFICATION	5.389817579331904E-5	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9998348250925309	WITHOUT_CLASSIFICATION	1.6517490746905718E-4	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9998290007551082	WITHOUT_CLASSIFICATION	1.7099924489179924E-4	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9990470755050418	WITHOUT_CLASSIFICATION	9.529244949582437E-4	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.9998690604164477	WITHOUT_CLASSIFICATION	1.3093958355224055E-4	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998726728033743	WITHOUT_CLASSIFICATION	1.2732719662572703E-4	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9983220239683717	WITHOUT_CLASSIFICATION	0.0016779760316282528	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999121174995982	WITHOUT_CLASSIFICATION	8.788250040172349E-5	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999945277916787	WITHOUT_CLASSIFICATION	5.472208321276968E-6	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999628605561686	WITHOUT_CLASSIFICATION	3.713944383140805E-5	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.9997662713776674	WITHOUT_CLASSIFICATION	2.337286223326743E-4	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999765740447859	WITHOUT_CLASSIFICATION	2.342595521407958E-5	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999529485941647	WITHOUT_CLASSIFICATION	4.7051405835191056E-5	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9991945024983276	WITHOUT_CLASSIFICATION	8.054975016723425E-4	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9997721279442503	WITHOUT_CLASSIFICATION	2.2787205574978757E-4	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999466447323714	WITHOUT_CLASSIFICATION	5.335526762870089E-5	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9994619540616289	WITHOUT_CLASSIFICATION	5.380459383710739E-4	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999410287684533	WITHOUT_CLASSIFICATION	5.897123154673242E-5	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999277101763396	WITHOUT_CLASSIFICATION	7.228982366047165E-5	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9997874767092413	WITHOUT_CLASSIFICATION	2.1252329075858103E-4	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999946716931055	WITHOUT_CLASSIFICATION	5.328306894501307E-5	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9495361133475329	WITHOUT_CLASSIFICATION	0.05046388665246717	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9994022206646135	WITHOUT_CLASSIFICATION	5.977793353865023E-4	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999946992627572	WITHOUT_CLASSIFICATION	5.300737242805427E-5	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998528523426398	WITHOUT_CLASSIFICATION	1.4714765736026242E-4	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9718938964226942	WITHOUT_CLASSIFICATION	0.028106103577305756	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998280498819879	WITHOUT_CLASSIFICATION	1.7195011801207413E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999751058061878	WITHOUT_CLASSIFICATION	2.4894193812205094E-4	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999472929654553	WITHOUT_CLASSIFICATION	5.270703454469733E-5	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999998265959364	WITHOUT_CLASSIFICATION	1.7340406358690517E-6	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9995115058316432	WITHOUT_CLASSIFICATION	4.884941683568519E-4	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999031624131592	WITHOUT_CLASSIFICATION	9.683758684072096E-5	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999783998752142	WITHOUT_CLASSIFICATION	2.1600124785701205E-5	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.999515509794972	WITHOUT_CLASSIFICATION	4.844902050280308E-4	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999031624131592	WITHOUT_CLASSIFICATION	9.683758684072096E-5	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9995115058316432	WITHOUT_CLASSIFICATION	4.884941683568519E-4	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999783998752142	WITHOUT_CLASSIFICATION	2.1600124785701205E-5	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.999966411370872	WITHOUT_CLASSIFICATION	3.358862912798545E-5	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998599782565717	WITHOUT_CLASSIFICATION	1.400217434282415E-4	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999242590354085	WITHOUT_CLASSIFICATION	7.574096459149435E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999287589428211	WITHOUT_CLASSIFICATION	7.12410571790061E-5	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999913934762187	WITHOUT_CLASSIFICATION	8.60652378130764E-6	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9950562527919783	WITHOUT_CLASSIFICATION	0.004943747208021788	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9982921924395602	WITHOUT_CLASSIFICATION	0.0017078075604397948	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999317367655943	WITHOUT_CLASSIFICATION	6.826323440573635E-5	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999980595867097	WITHOUT_CLASSIFICATION	1.9404132902659516E-6	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9980096746058311	WITHOUT_CLASSIFICATION	0.0019903253941688597	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.999840252708282	WITHOUT_CLASSIFICATION	1.5974729171806148E-4	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999477453534648	WITHOUT_CLASSIFICATION	5.2254646535152494E-5	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998904339808667	WITHOUT_CLASSIFICATION	1.0956601913327773E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999287589428211	WITHOUT_CLASSIFICATION	7.12410571790061E-5	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999716766721024	WITHOUT_CLASSIFICATION	2.832332789754338E-5	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9998772612769736	WITHOUT_CLASSIFICATION	1.2273872302634342E-4	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.991277347112278	WITHOUT_CLASSIFICATION	0.008722652887721977	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999959753359454	WITHOUT_CLASSIFICATION	4.024664054532045E-6	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9997637099912023	WITHOUT_CLASSIFICATION	2.3629000879771614E-4	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999085971187606	WITHOUT_CLASSIFICATION	9.140288123936278E-5	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9931645851076422	WITHOUT_CLASSIFICATION	0.006835414892357876	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999709521362757	WITHOUT_CLASSIFICATION	2.9047863724168022E-5	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999060425203097	WITHOUT_CLASSIFICATION	9.395747969033378E-5	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9989810487031451	WITHOUT_CLASSIFICATION	0.0010189512968549492	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999085971187606	WITHOUT_CLASSIFICATION	9.140288123936278E-5	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999085971187606	WITHOUT_CLASSIFICATION	9.140288123936278E-5	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998603003939093	WITHOUT_CLASSIFICATION	1.396996060908285E-4	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998603003939093	WITHOUT_CLASSIFICATION	1.396996060908285E-4	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.9981454515611501	WITHOUT_CLASSIFICATION	0.001854548438849956	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.991277347112278	WITHOUT_CLASSIFICATION	0.008722652887721977	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998403927601308	WITHOUT_CLASSIFICATION	1.5960723986916815E-4	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999177360255016	WITHOUT_CLASSIFICATION	8.226397449844313E-5	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999794331748756	WITHOUT_CLASSIFICATION	2.0566825124478315E-5	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999794331748756	WITHOUT_CLASSIFICATION	2.0566825124478315E-5	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9997192551145095	WITHOUT_CLASSIFICATION	2.8074488549040174E-4	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999709171722898	WITHOUT_CLASSIFICATION	2.9082827710211687E-5	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9995080360703008	WITHOUT_CLASSIFICATION	4.919639296990949E-4	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9999837484857473	WITHOUT_CLASSIFICATION	1.6251514252706903E-5	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9997762835041362	WITHOUT_CLASSIFICATION	2.237164958639549E-4	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9989348150267908	WITHOUT_CLASSIFICATION	0.0010651849732092162	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999227789982139	WITHOUT_CLASSIFICATION	7.722100178603136E-5	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999942288983665	WITHOUT_CLASSIFICATION	5.771101633388183E-6	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9999480478126276	WITHOUT_CLASSIFICATION	5.1952187372371775E-5	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9980667385676834	WITHOUT_CLASSIFICATION	0.0019332614323165896	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.9999715731027845	WITHOUT_CLASSIFICATION	2.842689721539595E-5	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.9999571558632364	WITHOUT_CLASSIFICATION	4.284413676352677E-5	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999461018242066	WITHOUT_CLASSIFICATION	5.389817579331904E-5	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.9999636984865383	WITHOUT_CLASSIFICATION	3.63015134616403E-5	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999471122746898	WITHOUT_CLASSIFICATION	5.288772531016046E-5	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998101684165818	WITHOUT_CLASSIFICATION	1.8983158341819576E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998651368889131	WITHOUT_CLASSIFICATION	1.3486311108695304E-4	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999593827001648	WITHOUT_CLASSIFICATION	4.0617299835199005E-4	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9954176240702245	WITHOUT_CLASSIFICATION	0.004582375929775466	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.999390830042438	WITHOUT_CLASSIFICATION	6.091699575619928E-4	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998159684198572	WITHOUT_CLASSIFICATION	1.840315801428215E-4	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9997514397257398	WITHOUT_CLASSIFICATION	2.485602742602323E-4	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999779640906278	WITHOUT_CLASSIFICATION	2.2035909372239936E-5	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9998430623817298	WITHOUT_CLASSIFICATION	1.5693761827016904E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999722794791431	WITHOUT_CLASSIFICATION	2.772052085695879E-5	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999457182234679	WITHOUT_CLASSIFICATION	5.4281776532145576E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999945277916787	WITHOUT_CLASSIFICATION	5.472208321276968E-6	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998261880729212	WITHOUT_CLASSIFICATION	1.7381192707877235E-4	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9998528177128945	WITHOUT_CLASSIFICATION	1.471822871055161E-4	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999821575308487	WITHOUT_CLASSIFICATION	1.7842469151300666E-4	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.999914189731063	WITHOUT_CLASSIFICATION	8.581026893693151E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.999914189731063	WITHOUT_CLASSIFICATION	8.581026893693151E-5	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999955789341665	WITHOUT_CLASSIFICATION	4.4210658335067726E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9999896086305623	WITHOUT_CLASSIFICATION	1.0391369437734139E-5	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999368466687878	WITHOUT_CLASSIFICATION	6.315333121222912E-5	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999368466687878	WITHOUT_CLASSIFICATION	6.315333121222912E-5	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9940966076037634	WITHOUT_CLASSIFICATION	0.005903392396236621	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9996685885315336	WITHOUT_CLASSIFICATION	3.314114684663357E-4	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.9992637207008765	WITHOUT_CLASSIFICATION	7.362792991235481E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999760599022809	WITHOUT_CLASSIFICATION	2.3940097719107757E-5	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9998796431261402	WITHOUT_CLASSIFICATION	1.2035687385990333E-4	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9997808733417132	WITHOUT_CLASSIFICATION	2.1912665828673368E-4	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999772657939324	WITHOUT_CLASSIFICATION	2.2734206067626653E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997239922610573	WITHOUT_CLASSIFICATION	2.760077389427118E-4	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997239922610573	WITHOUT_CLASSIFICATION	2.760077389427118E-4	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9996156336506544	WITHOUT_CLASSIFICATION	3.843663493455378E-4	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999782153128206	WITHOUT_CLASSIFICATION	2.178468717935204E-5	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999782153128206	WITHOUT_CLASSIFICATION	2.178468717935204E-5	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997436670148474	WITHOUT_CLASSIFICATION	2.56332985152525E-4	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999106380643521	WITHOUT_CLASSIFICATION	8.9361935647815E-5	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.9999593382079259	WITHOUT_CLASSIFICATION	4.066179207405251E-5	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.999982169481788	WITHOUT_CLASSIFICATION	1.7830518211935826E-5	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999382368621311	WITHOUT_CLASSIFICATION	6.17631378689588E-5	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.999696556485622	WITHOUT_CLASSIFICATION	3.034435143781285E-4	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999462306087065	WITHOUT_CLASSIFICATION	5.376939129358869E-5	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999782821550632	WITHOUT_CLASSIFICATION	2.1717844936810146E-4	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.998593225359858	WITHOUT_CLASSIFICATION	0.001406774640142087	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997510070579125	WITHOUT_CLASSIFICATION	2.489929420874651E-4	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9997529874559515	WITHOUT_CLASSIFICATION	2.470125440485026E-4	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999867745150465	WITHOUT_CLASSIFICATION	1.3225484953501747E-4	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9991929522060428	WITHOUT_CLASSIFICATION	8.070477939572285E-4	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9999608400422495	WITHOUT_CLASSIFICATION	3.9159957750489074E-5	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999037445289212	WITHOUT_CLASSIFICATION	9.625547107882657E-5	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9998954316899877	WITHOUT_CLASSIFICATION	1.0456831001232234E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999788867809498	WITHOUT_CLASSIFICATION	2.1113219050156658E-5	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9974296062115039	WITHOUT_CLASSIFICATION	0.002570393788496169	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998979498202247	WITHOUT_CLASSIFICATION	1.0205017977515441E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999788867809498	WITHOUT_CLASSIFICATION	2.1113219050156658E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999788867809498	WITHOUT_CLASSIFICATION	2.1113219050156658E-5	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999869534057292	WITHOUT_CLASSIFICATION	1.3046594270868065E-5	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999386724316843	WITHOUT_CLASSIFICATION	6.132756831566366E-5	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999281532861098	WITHOUT_CLASSIFICATION	7.184671389012096E-5	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999643073612542	WITHOUT_CLASSIFICATION	3.569263874579538E-4	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999201814944342	WITHOUT_CLASSIFICATION	7.981850556575858E-5	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9996659482223937	WITHOUT_CLASSIFICATION	3.340517776062414E-4	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999883471539012	WITHOUT_CLASSIFICATION	1.1652846098801733E-5	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999643073612542	WITHOUT_CLASSIFICATION	3.569263874579538E-4	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999776586098071	WITHOUT_CLASSIFICATION	2.2341390192840608E-5	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9990275560319141	WITHOUT_CLASSIFICATION	9.72443968086002E-4	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999800182869446	WITHOUT_CLASSIFICATION	1.998171305536192E-5	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999492070793874	WITHOUT_CLASSIFICATION	5.079292061270444E-5	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999952667737252	WITHOUT_CLASSIFICATION	4.733226274855698E-6	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9969920980221448	WITHOUT_CLASSIFICATION	0.003007901977855264	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999406795579122	WITHOUT_CLASSIFICATION	5.93204420878553E-5	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999551151182441	WITHOUT_CLASSIFICATION	4.488488175585992E-5	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999537224296764	WITHOUT_CLASSIFICATION	4.6277570323583815E-5	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999007671061595	WITHOUT_CLASSIFICATION	9.923289384044433E-5	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999537224296764	WITHOUT_CLASSIFICATION	4.6277570323583815E-5	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999026655530183	WITHOUT_CLASSIFICATION	9.733444698165629E-5	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.999687791882059	WITHOUT_CLASSIFICATION	3.1220811794099943E-4	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9987748851094232	WITHOUT_CLASSIFICATION	0.0012251148905767348	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997011694902099	WITHOUT_CLASSIFICATION	2.988305097900603E-4	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998557466548887	WITHOUT_CLASSIFICATION	1.442533451111547E-4	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999689202968854	WITHOUT_CLASSIFICATION	3.1079703114569874E-5	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998992195025329	WITHOUT_CLASSIFICATION	1.0078049746718078E-4	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998543726572463	WITHOUT_CLASSIFICATION	1.456273427536831E-4	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998992195025329	WITHOUT_CLASSIFICATION	1.0078049746718078E-4	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998337399861599	WITHOUT_CLASSIFICATION	1.6626001384003697E-4	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9997502053337787	WITHOUT_CLASSIFICATION	2.4979466622132573E-4	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9998551896464359	WITHOUT_CLASSIFICATION	1.448103535641415E-4	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999299092172138	WITHOUT_CLASSIFICATION	7.009078278613435E-5	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999364605067392	WITHOUT_CLASSIFICATION	6.353949326074501E-5	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9997538019621434	WITHOUT_CLASSIFICATION	2.461980378566822E-4	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999572584029025	WITHOUT_CLASSIFICATION	4.274159709749506E-5	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999689202968854	WITHOUT_CLASSIFICATION	3.1079703114569874E-5	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998543726572463	WITHOUT_CLASSIFICATION	1.456273427536831E-4	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998337399861599	WITHOUT_CLASSIFICATION	1.6626001384003697E-4	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999235635507198	WITHOUT_CLASSIFICATION	7.643644928026474E-5	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9999653880641934	WITHOUT_CLASSIFICATION	3.461193580660028E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9998621565481314	WITHOUT_CLASSIFICATION	1.3784345186862898E-4	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9983385310239129	WITHOUT_CLASSIFICATION	0.001661468976087032	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9991975602602425	WITHOUT_CLASSIFICATION	8.024397397574093E-4	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9978376990206407	WITHOUT_CLASSIFICATION	0.002162300979359238	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999608542946938	WITHOUT_CLASSIFICATION	3.9145705306228025E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998651368889131	WITHOUT_CLASSIFICATION	1.3486311108695304E-4	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9997502053337787	WITHOUT_CLASSIFICATION	2.4979466622132573E-4	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999108850164533	WITHOUT_CLASSIFICATION	8.911498354662316E-5	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999497062081149	WITHOUT_CLASSIFICATION	5.0293791885105863E-5	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9808713414024617	WITHOUT_CLASSIFICATION	0.01912865859753831	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999508917180594	WITHOUT_CLASSIFICATION	4.9108281940718105E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998651368889131	WITHOUT_CLASSIFICATION	1.3486311108695304E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999480093712056	WITHOUT_CLASSIFICATION	5.199062879432827E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998651368889131	WITHOUT_CLASSIFICATION	1.3486311108695304E-4	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999351020202711	WITHOUT_CLASSIFICATION	6.489797972888428E-5	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9992420625125649	WITHOUT_CLASSIFICATION	7.579374874351691E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999722438824905	WITHOUT_CLASSIFICATION	2.7756117509513404E-5	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998514939099518	WITHOUT_CLASSIFICATION	1.48506090048279E-4	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999223519473603	WITHOUT_CLASSIFICATION	7.764805263958182E-5	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.9999086527384844	WITHOUT_CLASSIFICATION	9.134726151567515E-5	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9993200531230921	WITHOUT_CLASSIFICATION	6.799468769078787E-4	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999324795313228	WITHOUT_CLASSIFICATION	6.752046867727228E-5	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999974013490036	WITHOUT_CLASSIFICATION	2.5986509963982163E-5	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.9999682958172363	WITHOUT_CLASSIFICATION	3.170418276356157E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999786023905627	WITHOUT_CLASSIFICATION	2.139760943724502E-5	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999748366664335	WITHOUT_CLASSIFICATION	2.5163333566485536E-5	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9949563814436487	WITHOUT_CLASSIFICATION	0.005043618556351188	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.9998200378718824	WITHOUT_CLASSIFICATION	1.7996212811766164E-4	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9997440359341273	WITHOUT_CLASSIFICATION	2.5596406587269246E-4	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999934215469878	WITHOUT_CLASSIFICATION	6.578453012246202E-6	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999203423723277	WITHOUT_CLASSIFICATION	7.965762767226213E-5	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9998553685838133	WITHOUT_CLASSIFICATION	1.4463141618670098E-4	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999872680096815	WITHOUT_CLASSIFICATION	1.2731990318584547E-5	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999910087705908	WITHOUT_CLASSIFICATION	8.991229409196533E-5	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997881356193855	WITHOUT_CLASSIFICATION	2.1186438061445112E-4	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997881356193855	WITHOUT_CLASSIFICATION	2.1186438061445112E-4	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999279519649926	WITHOUT_CLASSIFICATION	7.204803500743064E-5	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999058176335857	WITHOUT_CLASSIFICATION	9.418236641426083E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999710676314426	WITHOUT_CLASSIFICATION	2.893236855738253E-5	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999959755150361	WITHOUT_CLASSIFICATION	4.0244849639021834E-5	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9998499671116227	WITHOUT_CLASSIFICATION	1.500328883773387E-4	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999446754956889	WITHOUT_CLASSIFICATION	5.532450431122264E-5	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999420679465386	WITHOUT_CLASSIFICATION	5.793205346131706E-5	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999908781158111	WITHOUT_CLASSIFICATION	9.121884188899474E-5	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.9997552385398385	WITHOUT_CLASSIFICATION	2.447614601615566E-4	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999423850466956	WITHOUT_CLASSIFICATION	5.76149533043666E-5	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9998876875224434	WITHOUT_CLASSIFICATION	1.1231247755654329E-4	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.9999715635080711	WITHOUT_CLASSIFICATION	2.8436491928867755E-5	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9996139237946842	WITHOUT_CLASSIFICATION	3.8607620531579893E-4	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999145537291307	WITHOUT_CLASSIFICATION	8.544627086934239E-5	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999280823313116	WITHOUT_CLASSIFICATION	7.191766868838686E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999334610666406	WITHOUT_CLASSIFICATION	6.653893335932033E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999169238626222	WITHOUT_CLASSIFICATION	8.307613737779003E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999169238626222	WITHOUT_CLASSIFICATION	8.307613737779003E-5	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.998699438990698	WITHOUT_CLASSIFICATION	0.0013005610093020756	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999324795313228	WITHOUT_CLASSIFICATION	6.752046867727228E-5	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9974912390342069	WITHOUT_CLASSIFICATION	0.002508760965793118	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999711894362022	WITHOUT_CLASSIFICATION	2.8810563797803142E-5	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9946253949708588	WITHOUT_CLASSIFICATION	0.005374605029141202	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999325405675816	WITHOUT_CLASSIFICATION	6.74594324183641E-5	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.9999605737852941	WITHOUT_CLASSIFICATION	3.942621470594039E-5	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9973916684617612	WITHOUT_CLASSIFICATION	0.002608331538238906	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9993134353840326	WITHOUT_CLASSIFICATION	6.865646159672905E-4	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999767214986182	WITHOUT_CLASSIFICATION	2.3278501381862924E-5	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9873759927473832	WITHOUT_CLASSIFICATION	0.012624007252616882	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999755048747027	WITHOUT_CLASSIFICATION	2.4495125297289494E-4	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999346176167055	WITHOUT_CLASSIFICATION	6.538238329449391E-5	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9998862899087511	WITHOUT_CLASSIFICATION	1.1371009124891686E-4	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999955649151718	WITHOUT_CLASSIFICATION	4.4350848282002036E-5	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999671015993418	WITHOUT_CLASSIFICATION	3.289840065826534E-5	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999939281923823	WITHOUT_CLASSIFICATION	6.071807617708398E-6	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998437088459096	WITHOUT_CLASSIFICATION	1.5629115409040471E-4	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.99996362262495	WITHOUT_CLASSIFICATION	3.637737505000933E-5	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998183449873508	WITHOUT_CLASSIFICATION	1.8165501264920034E-4	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999083252046109	WITHOUT_CLASSIFICATION	9.167479538905974E-5	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9990130524618016	WITHOUT_CLASSIFICATION	9.86947538198442E-4	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9998978857329027	WITHOUT_CLASSIFICATION	1.0211426709727102E-4	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999587154140548	WITHOUT_CLASSIFICATION	4.1284585945296664E-5	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9994465866920752	WITHOUT_CLASSIFICATION	5.534133079248206E-4	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998890446796846	WITHOUT_CLASSIFICATION	1.1095532031533319E-4	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9996507094558482	WITHOUT_CLASSIFICATION	3.4929054415172583E-4	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998686332717492	WITHOUT_CLASSIFICATION	1.3136672825084095E-4	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9972522741032848	WITHOUT_CLASSIFICATION	0.0027477258967152987	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998217963252809	WITHOUT_CLASSIFICATION	1.782036747191058E-4	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998334941089799	WITHOUT_CLASSIFICATION	1.6650589102004066E-4	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999921089766817	WITHOUT_CLASSIFICATION	7.89102331834417E-6	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998355229898247	WITHOUT_CLASSIFICATION	1.64477010175368E-4	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999269802648005	WITHOUT_CLASSIFICATION	7.301973519941358E-5	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.997481739300524	WITHOUT_CLASSIFICATION	0.002518260699476118	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9988191251471195	WITHOUT_CLASSIFICATION	0.0011808748528805526	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9984415018810563	WITHOUT_CLASSIFICATION	0.001558498118943766	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998840919849262	WITHOUT_CLASSIFICATION	1.1590801507375701E-4	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998840919849262	WITHOUT_CLASSIFICATION	1.1590801507375701E-4	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999346354558378	WITHOUT_CLASSIFICATION	6.536454416215138E-5	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999479244710374	WITHOUT_CLASSIFICATION	5.2075528962514746E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999472863538893	WITHOUT_CLASSIFICATION	5.2713646110731034E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999472863538893	WITHOUT_CLASSIFICATION	5.2713646110731034E-5	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999669960769811	WITHOUT_CLASSIFICATION	3.3003923018878325E-5	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999666675039022	WITHOUT_CLASSIFICATION	3.333249609779112E-5	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9998659953092901	WITHOUT_CLASSIFICATION	1.3400469070992338E-4	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9998983123541502	WITHOUT_CLASSIFICATION	1.0168764584990473E-4	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998224243347786	WITHOUT_CLASSIFICATION	1.7757566522136141E-4	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999596052932949	WITHOUT_CLASSIFICATION	4.039470670507958E-5	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999596052932949	WITHOUT_CLASSIFICATION	4.039470670507958E-5	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9997759633326689	WITHOUT_CLASSIFICATION	2.2403666733108855E-4	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9998797333100942	WITHOUT_CLASSIFICATION	1.2026668990588675E-4	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9998772184045972	WITHOUT_CLASSIFICATION	1.22781595402885E-4	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9998772184045972	WITHOUT_CLASSIFICATION	1.22781595402885E-4	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.9998735567697797	WITHOUT_CLASSIFICATION	1.2644323022026165E-4	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998909135522906	WITHOUT_CLASSIFICATION	1.0908644770928701E-4	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999905565998837	WITHOUT_CLASSIFICATION	9.443400116241745E-6	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999907233615831	WITHOUT_CLASSIFICATION	9.276638416914686E-6	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999891072974268	WITHOUT_CLASSIFICATION	1.0892702573224392E-5	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.9998872322845167	WITHOUT_CLASSIFICATION	1.1276771548330803E-4	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998101205563517	WITHOUT_CLASSIFICATION	1.898794436484166E-4	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999690223044083	WITHOUT_CLASSIFICATION	3.0977695591603894E-5	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.999990925844711	WITHOUT_CLASSIFICATION	9.074155288938814E-6	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999829900187597	WITHOUT_CLASSIFICATION	1.7009981240354685E-5	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999045864435689	WITHOUT_CLASSIFICATION	9.541355643108448E-5	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9993917638647593	WITHOUT_CLASSIFICATION	6.082361352407331E-4	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999350500599086	WITHOUT_CLASSIFICATION	6.494994009137946E-5	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999990526770088	WITHOUT_CLASSIFICATION	9.473229911963142E-6	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9999710702661512	WITHOUT_CLASSIFICATION	2.8929733848871055E-5	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9997628912160488	WITHOUT_CLASSIFICATION	2.3710878395121065E-4	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998674912373715	WITHOUT_CLASSIFICATION	1.325087626284862E-4	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9975166317698142	WITHOUT_CLASSIFICATION	0.00248336823018567	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999148158772564	WITHOUT_CLASSIFICATION	8.518412274357056E-5	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998573340389796	WITHOUT_CLASSIFICATION	1.4266596102038834E-4	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9998366554047857	WITHOUT_CLASSIFICATION	1.633445952142059E-4	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999338378785958	WITHOUT_CLASSIFICATION	6.616212140413929E-5	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9994475166381903	WITHOUT_CLASSIFICATION	5.524833618096936E-4	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9998733329810514	WITHOUT_CLASSIFICATION	1.266670189484832E-4	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9999120660877742	WITHOUT_CLASSIFICATION	8.793391222589125E-5	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999911238848042	WITHOUT_CLASSIFICATION	8.876115195819583E-6	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999389950554906	WITHOUT_CLASSIFICATION	6.1004944509459414E-5	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999959883668185	WITHOUT_CLASSIFICATION	4.011633181606623E-6	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999982312605317	WITHOUT_CLASSIFICATION	1.768739468294722E-5	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999992789095484	WITHOUT_CLASSIFICATION	7.210904516233662E-7	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9996605157977403	WITHOUT_CLASSIFICATION	3.39484202259735E-4	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999843970620764	WITHOUT_CLASSIFICATION	1.560293792361101E-5	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.9997746418644444	WITHOUT_CLASSIFICATION	2.2535813555568443E-4	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999857082150002	WITHOUT_CLASSIFICATION	1.429178499986908E-5	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999461018242066	WITHOUT_CLASSIFICATION	5.389817579331904E-5	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999716170645452	WITHOUT_CLASSIFICATION	2.8382935454780634E-5	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9998758622677139	WITHOUT_CLASSIFICATION	1.2413773228612214E-4	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999969162475505	WITHOUT_CLASSIFICATION	3.083752449498258E-5	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9963881606884473	WITHOUT_CLASSIFICATION	0.003611839311552679	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.9998880378555849	WITHOUT_CLASSIFICATION	1.1196214441506496E-4	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.999896070471182	WITHOUT_CLASSIFICATION	1.0392952881795164E-4	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999582514565936	WITHOUT_CLASSIFICATION	4.1748543406502536E-5	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.99988027076523	WITHOUT_CLASSIFICATION	1.1972923477005635E-4	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.9965668427365162	WITHOUT_CLASSIFICATION	0.0034331572634839318	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999133118829834	WITHOUT_CLASSIFICATION	8.668811701663752E-5	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9993080396262236	WITHOUT_CLASSIFICATION	6.919603737763851E-4	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9993402121107327	WITHOUT_CLASSIFICATION	6.597878892674425E-4	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9997738789448527	WITHOUT_CLASSIFICATION	2.2612105514732586E-4	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999613694402721	WITHOUT_CLASSIFICATION	3.86305597278233E-5	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999632828321129	WITHOUT_CLASSIFICATION	3.671716788702973E-5	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9998734548157427	WITHOUT_CLASSIFICATION	1.2654518425715163E-4	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.999138004332157	WITHOUT_CLASSIFICATION	8.619956678428731E-4	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9998912808341902	WITHOUT_CLASSIFICATION	1.0871916580980903E-4	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9978099970801598	WITHOUT_CLASSIFICATION	0.002190002919840202	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9998914469774781	WITHOUT_CLASSIFICATION	1.0855302252186381E-4	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9994457927134272	WITHOUT_CLASSIFICATION	5.542072865728464E-4	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9998219581713675	WITHOUT_CLASSIFICATION	1.7804182863234702E-4	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999922424666656	WITHOUT_CLASSIFICATION	7.75753333441761E-6	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999922424666656	WITHOUT_CLASSIFICATION	7.75753333441761E-6	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999816356839387	WITHOUT_CLASSIFICATION	1.8364316061237426E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9989270771801966	WITHOUT_CLASSIFICATION	0.0010729228198034383	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999512829684286	WITHOUT_CLASSIFICATION	4.871703157145911E-5	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9998998244434025	WITHOUT_CLASSIFICATION	1.0017555659740519E-4	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9997953489448549	WITHOUT_CLASSIFICATION	2.046510551450874E-4	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9996398238691839	WITHOUT_CLASSIFICATION	3.60176130816014E-4	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999976646738273	WITHOUT_CLASSIFICATION	2.3353261726591136E-6	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999076224676424	WITHOUT_CLASSIFICATION	9.237753235745909E-5	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999246389970581	WITHOUT_CLASSIFICATION	7.536100294192207E-5	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.999978032740938	WITHOUT_CLASSIFICATION	2.19672590620173E-5	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999993139526288	WITHOUT_CLASSIFICATION	6.860473712096489E-6	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9982050256259415	WITHOUT_CLASSIFICATION	0.0017949743740585005	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999650932712081	WITHOUT_CLASSIFICATION	3.49067287919962E-5	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999966716715255	WITHOUT_CLASSIFICATION	3.328328474397245E-6	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997926072296861	WITHOUT_CLASSIFICATION	2.0739277031382093E-4	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997926072296861	WITHOUT_CLASSIFICATION	2.0739277031382093E-4	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9997058663412709	WITHOUT_CLASSIFICATION	2.941336587290829E-4	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9993201702391261	WITHOUT_CLASSIFICATION	6.798297608739129E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999609579456031	WITHOUT_CLASSIFICATION	3.904205439694093E-5	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999065405180072	WITHOUT_CLASSIFICATION	9.345948199282795E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999861305141547	WITHOUT_CLASSIFICATION	1.386948584521381E-5	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998968492459658	WITHOUT_CLASSIFICATION	1.0315075403431371E-4	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9998632642936546	WITHOUT_CLASSIFICATION	1.3673570634542816E-4	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9999079628207536	WITHOUT_CLASSIFICATION	9.203717924639363E-5	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9996182549883516	WITHOUT_CLASSIFICATION	3.8174501164845635E-4	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999949466118486	WITHOUT_CLASSIFICATION	5.053388151401264E-6	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999910467690812	WITHOUT_CLASSIFICATION	8.95323091884495E-6	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999751405283003	WITHOUT_CLASSIFICATION	2.485947169969557E-5	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9990384855485229	WITHOUT_CLASSIFICATION	9.615144514770528E-4	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999722739415071	WITHOUT_CLASSIFICATION	2.772605849295773E-5	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9994410512312563	WITHOUT_CLASSIFICATION	5.589487687436811E-4	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.99996220156765	WITHOUT_CLASSIFICATION	3.779843235008008E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9994377740826957	WITHOUT_CLASSIFICATION	5.62225917304203E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9927126873278452	WITHOUT_CLASSIFICATION	0.00728731267215471	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999828977873101	WITHOUT_CLASSIFICATION	1.7102212689886455E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9986786536129795	WITHOUT_CLASSIFICATION	0.001321346387020534	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999654297526002	WITHOUT_CLASSIFICATION	3.4570247399852675E-5	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9998467779033302	WITHOUT_CLASSIFICATION	1.532220966698511E-4	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999112262022005	WITHOUT_CLASSIFICATION	8.877379779944365E-5	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999278192711331	WITHOUT_CLASSIFICATION	7.21807288669268E-5	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999900913466813	WITHOUT_CLASSIFICATION	9.908653318692908E-6	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9998770930166391	WITHOUT_CLASSIFICATION	1.229069833609005E-4	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9992627326013177	WITHOUT_CLASSIFICATION	7.372673986821793E-4	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998310776549784	WITHOUT_CLASSIFICATION	1.68922345021587E-4	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9997102088638551	WITHOUT_CLASSIFICATION	2.897911361449065E-4	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9992848238203141	WITHOUT_CLASSIFICATION	7.151761796858708E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9990991963690444	WITHOUT_CLASSIFICATION	9.00803630955499E-4	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9996945773097389	WITHOUT_CLASSIFICATION	3.054226902611451E-4	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9991624263619924	WITHOUT_CLASSIFICATION	8.37573638007631E-4	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999826486962291	WITHOUT_CLASSIFICATION	1.7351303770956032E-5	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999838460427898	WITHOUT_CLASSIFICATION	1.6153957210248076E-5	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999684809854074	WITHOUT_CLASSIFICATION	3.1519014592757484E-5	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9986273615928927	WITHOUT_CLASSIFICATION	0.0013726384071073216	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9970777971276445	WITHOUT_CLASSIFICATION	0.002922202872355531	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9996834229190956	WITHOUT_CLASSIFICATION	3.1657708090435615E-4	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9993431652900632	WITHOUT_CLASSIFICATION	6.568347099368549E-4	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9891141374874796	WITHOUT_CLASSIFICATION	0.010885862512520475	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999775297266329	WITHOUT_CLASSIFICATION	2.2470273367016198E-5	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9992836431835663	WITHOUT_CLASSIFICATION	7.163568164337205E-4	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9992836431835663	WITHOUT_CLASSIFICATION	7.163568164337205E-4	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999654710573297	WITHOUT_CLASSIFICATION	3.4528942670313206E-5	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9665146548676758	WITHOUT_CLASSIFICATION	0.03348534513232411	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999700301532399	WITHOUT_CLASSIFICATION	2.9969846760116614E-5	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999657510155563	WITHOUT_CLASSIFICATION	3.42489844437595E-5	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9992916056095059	WITHOUT_CLASSIFICATION	7.083943904941467E-4	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9998979985718206	WITHOUT_CLASSIFICATION	1.0200142817936542E-4	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999138850424489	WITHOUT_CLASSIFICATION	8.611495755106681E-5	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999123409887308	WITHOUT_CLASSIFICATION	8.765901126919503E-5	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9991708980587423	WITHOUT_CLASSIFICATION	8.291019412577686E-4	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999736951824921	WITHOUT_CLASSIFICATION	2.63048175078971E-4	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999736951824921	WITHOUT_CLASSIFICATION	2.63048175078971E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999505468822624	WITHOUT_CLASSIFICATION	4.9453117737522974E-5	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999952119698489	WITHOUT_CLASSIFICATION	4.7880301511065886E-5	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9998762350386157	WITHOUT_CLASSIFICATION	1.237649613842929E-4	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9978526120803368	WITHOUT_CLASSIFICATION	0.0021473879196632585	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9993173846734362	WITHOUT_CLASSIFICATION	6.826153265637847E-4	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999832439091242	WITHOUT_CLASSIFICATION	1.6756090875760408E-5	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9994486600879288	WITHOUT_CLASSIFICATION	5.513399120711871E-4	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9998331951902711	WITHOUT_CLASSIFICATION	1.6680480972895286E-4	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.999686206283508	WITHOUT_CLASSIFICATION	3.137937164920749E-4	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999515809094074	WITHOUT_CLASSIFICATION	4.841909059256113E-5	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999733250790172	WITHOUT_CLASSIFICATION	2.667492098282484E-5	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9995373021430656	WITHOUT_CLASSIFICATION	4.626978569345444E-4	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9996027119837573	WITHOUT_CLASSIFICATION	3.972880162426428E-4	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999433246003451	WITHOUT_CLASSIFICATION	5.6675399654824936E-5	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999509894044791	WITHOUT_CLASSIFICATION	4.901059552092749E-5	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999927993841874	WITHOUT_CLASSIFICATION	7.200615812597041E-5	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9998771243323212	WITHOUT_CLASSIFICATION	1.2287566767871214E-4	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999609107572515	WITHOUT_CLASSIFICATION	3.9089242748589884E-5	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9998030052903427	WITHOUT_CLASSIFICATION	1.969947096572717E-4	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.999213383613589	WITHOUT_CLASSIFICATION	7.866163864109692E-4	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999290751547794	WITHOUT_CLASSIFICATION	7.092484522056578E-5	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9997572950993255	WITHOUT_CLASSIFICATION	2.427049006744815E-4	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999380780659274	WITHOUT_CLASSIFICATION	6.192193407255259E-5	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9995223969578881	WITHOUT_CLASSIFICATION	4.776030421118577E-4	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999820946166768	WITHOUT_CLASSIFICATION	1.7905383323248003E-5	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9951446785557646	WITHOUT_CLASSIFICATION	0.004855321444235333	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999974624176547	WITHOUT_CLASSIFICATION	2.5375823453030606E-5	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999509681672478	WITHOUT_CLASSIFICATION	4.9031832752145905E-5	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9998879857924576	WITHOUT_CLASSIFICATION	1.1201420754234773E-4	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9813677494659048	WITHOUT_CLASSIFICATION	0.01863225053409525	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996641623223058	WITHOUT_CLASSIFICATION	3.3583767769424E-4	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999317342619477	WITHOUT_CLASSIFICATION	6.826573805220754E-5	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999946348942167	WITHOUT_CLASSIFICATION	5.365105783312634E-6	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9996903098743521	WITHOUT_CLASSIFICATION	3.096901256478295E-4	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9991130944861628	WITHOUT_CLASSIFICATION	8.869055138370981E-4	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999873105315136	WITHOUT_CLASSIFICATION	1.2689468486428191E-5	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9892252104988256	WITHOUT_CLASSIFICATION	0.010774789501174322	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9995578490750654	WITHOUT_CLASSIFICATION	4.421509249344869E-4	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999650932712081	WITHOUT_CLASSIFICATION	3.49067287919962E-5	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9994518692334703	WITHOUT_CLASSIFICATION	5.481307665296567E-4	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999921838134315	WITHOUT_CLASSIFICATION	7.816186568515565E-6	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9996328245327365	WITHOUT_CLASSIFICATION	3.6717546726344714E-4	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.999716551968943	WITHOUT_CLASSIFICATION	2.834480310569813E-4	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.999994294299796	WITHOUT_CLASSIFICATION	5.705700203940567E-6	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999936839546826	WITHOUT_CLASSIFICATION	6.316045317374011E-6	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9822662995343814	WITHOUT_CLASSIFICATION	0.017733700465618615	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.8019838167403233	WITHOUT_CLASSIFICATION	0.19801618325967676	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999786720534255	WITHOUT_CLASSIFICATION	2.132794657450794E-5	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9996919218787068	WITHOUT_CLASSIFICATION	3.0807812129315265E-4	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999985843258387	WITHOUT_CLASSIFICATION	1.415674161356117E-6	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9892172432957772	WITHOUT_CLASSIFICATION	0.010782756704222862	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9957217249007481	WITHOUT_CLASSIFICATION	0.004278275099251886	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999847202344259	WITHOUT_CLASSIFICATION	1.5279765574210665E-5	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9994032775914616	WITHOUT_CLASSIFICATION	5.967224085383597E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999914449213643	WITHOUT_CLASSIFICATION	8.555078635693677E-5	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997538019621434	WITHOUT_CLASSIFICATION	2.461980378566822E-4	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.999963464366325	WITHOUT_CLASSIFICATION	3.6535633674936344E-5	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999774190461318	WITHOUT_CLASSIFICATION	2.2580953868164912E-5	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9695144280509166	WITHOUT_CLASSIFICATION	0.030485571949083374	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999914449213643	WITHOUT_CLASSIFICATION	8.555078635693677E-5	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9924937516742502	WITHOUT_CLASSIFICATION	0.0075062483257497	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9963966885803451	WITHOUT_CLASSIFICATION	0.0036033114196549563	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999562572847648	WITHOUT_CLASSIFICATION	4.3742715235130097E-5	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9963341026125243	WITHOUT_CLASSIFICATION	0.003665897387475599	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999712200280274	WITHOUT_CLASSIFICATION	2.8779971972575562E-5	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9865626244290631	WITHOUT_CLASSIFICATION	0.013437375570936869	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999842043653111	WITHOUT_CLASSIFICATION	1.5795634688934703E-5	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9996645974835542	WITHOUT_CLASSIFICATION	3.354025164458651E-4	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.99997000431656	WITHOUT_CLASSIFICATION	2.9995683440002898E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9881074489182173	WITHOUT_CLASSIFICATION	0.011892551081782695	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9993656184595355	WITHOUT_CLASSIFICATION	6.343815404644703E-4	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9886551146551529	WITHOUT_CLASSIFICATION	0.011344885344847015	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9996634289997762	WITHOUT_CLASSIFICATION	3.3657100022373257E-4	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9994340516156507	WITHOUT_CLASSIFICATION	5.659483843492102E-4	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999712782052884	WITHOUT_CLASSIFICATION	2.872179471155719E-5	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9997538019621434	WITHOUT_CLASSIFICATION	2.461980378566822E-4	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9990130524618016	WITHOUT_CLASSIFICATION	9.86947538198442E-4	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999151773008506	WITHOUT_CLASSIFICATION	8.482269914948665E-5	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999284004180048	WITHOUT_CLASSIFICATION	7.159958199529723E-5	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.998625946531169	WITHOUT_CLASSIFICATION	0.0013740534688310175	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9982091701279919	WITHOUT_CLASSIFICATION	0.001790829872008034	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999863002443371	WITHOUT_CLASSIFICATION	1.3699755662887214E-5	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9998395368148757	WITHOUT_CLASSIFICATION	1.6046318512427635E-4	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999057255109861	WITHOUT_CLASSIFICATION	9.427448901392478E-5	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999958080729054	WITHOUT_CLASSIFICATION	4.1919270945769005E-6	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999974996744193	WITHOUT_CLASSIFICATION	2.5003255806663867E-6	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9996913973754055	WITHOUT_CLASSIFICATION	3.08602624594564E-4	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.995705417301189	WITHOUT_CLASSIFICATION	0.00429458269881105	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999496944995135	WITHOUT_CLASSIFICATION	5.0305500486550864E-5	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999759042291209	WITHOUT_CLASSIFICATION	2.409577087919747E-5	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999756532410858	WITHOUT_CLASSIFICATION	2.4346758914191307E-5	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9999367121944445	WITHOUT_CLASSIFICATION	6.328780555545327E-5	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998153596614269	WITHOUT_CLASSIFICATION	1.846403385731563E-4	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999577574186965	WITHOUT_CLASSIFICATION	4.224258130343874E-5	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999862701989074	WITHOUT_CLASSIFICATION	1.3729801092699065E-5	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999938220139609	WITHOUT_CLASSIFICATION	6.177986039044536E-6	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999968099849669	WITHOUT_CLASSIFICATION	3.1900150331814452E-6	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9986445304349714	WITHOUT_CLASSIFICATION	0.0013554695650286792	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9996267881564288	WITHOUT_CLASSIFICATION	3.732118435711831E-4	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9992751479575139	WITHOUT_CLASSIFICATION	7.248520424859699E-4	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9983301325824923	WITHOUT_CLASSIFICATION	0.0016698674175076756	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998754239810683	WITHOUT_CLASSIFICATION	1.245760189317106E-4	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998754239810683	WITHOUT_CLASSIFICATION	1.245760189317106E-4	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9850884662504764	WITHOUT_CLASSIFICATION	0.014911533749523642	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999916316111592	WITHOUT_CLASSIFICATION	8.368388840810231E-6	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998993056631093	WITHOUT_CLASSIFICATION	1.0069433689068479E-4	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999974682142443	WITHOUT_CLASSIFICATION	2.531785755725545E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999760599022809	WITHOUT_CLASSIFICATION	2.3940097719107757E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999760599022809	WITHOUT_CLASSIFICATION	2.3940097719107757E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999768121436763	WITHOUT_CLASSIFICATION	2.3187856323705464E-5	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999927127558929	WITHOUT_CLASSIFICATION	7.287244107043194E-6	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9998830396265899	WITHOUT_CLASSIFICATION	1.1696037341008049E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999739452841781	WITHOUT_CLASSIFICATION	2.6054715821897235E-4	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9997538019621434	WITHOUT_CLASSIFICATION	2.461980378566822E-4	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9995469325750361	WITHOUT_CLASSIFICATION	4.5306742496392297E-4	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9996008361015646	WITHOUT_CLASSIFICATION	3.9916389843532523E-4	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9994826873016035	WITHOUT_CLASSIFICATION	5.173126983964105E-4	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9998335519333288	WITHOUT_CLASSIFICATION	1.6644806667125934E-4	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999094739116237	WITHOUT_CLASSIFICATION	9.05260883764048E-5	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999909931799122	WITHOUT_CLASSIFICATION	9.006820087677197E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999211960366144	WITHOUT_CLASSIFICATION	7.880396338545259E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999211960366144	WITHOUT_CLASSIFICATION	7.880396338545259E-5	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9997538019621434	WITHOUT_CLASSIFICATION	2.461980378566822E-4	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999709527659456	WITHOUT_CLASSIFICATION	2.904723405436176E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999710161216365	WITHOUT_CLASSIFICATION	2.8983878363558605E-5	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999021493403685	WITHOUT_CLASSIFICATION	9.785065963150107E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998634932549652	WITHOUT_CLASSIFICATION	1.3650674503476958E-4	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327907506788	WITHOUT_CLASSIFICATION	1.6720924932117604E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999601293864627	WITHOUT_CLASSIFICATION	3.9870613537267516E-5	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999501990317216	WITHOUT_CLASSIFICATION	4.98009682784111E-4	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999204560443532	WITHOUT_CLASSIFICATION	7.954395564684979E-5	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999674761056309	WITHOUT_CLASSIFICATION	3.252389436909686E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9881074489182173	WITHOUT_CLASSIFICATION	0.011892551081782695	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999892971646713	WITHOUT_CLASSIFICATION	1.0702835328668683E-5	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9988005950298143	WITHOUT_CLASSIFICATION	0.0011994049701856432	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999624124655322	WITHOUT_CLASSIFICATION	3.7587534467877966E-5	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9999570588318446	WITHOUT_CLASSIFICATION	4.294116815541286E-5	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999249857931669	WITHOUT_CLASSIFICATION	7.501420683301183E-5	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9998214138904963	WITHOUT_CLASSIFICATION	1.7858610950376356E-4	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999594639877876	WITHOUT_CLASSIFICATION	4.0536012212393334E-5	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9997240261560663	WITHOUT_CLASSIFICATION	2.7597384393369316E-4	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999259392068068	WITHOUT_CLASSIFICATION	7.406079319310104E-5	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998176168971502	WITHOUT_CLASSIFICATION	1.8238310284982297E-4	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998176168971502	WITHOUT_CLASSIFICATION	1.8238310284982297E-4	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999643073612542	WITHOUT_CLASSIFICATION	3.569263874579538E-4	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999839144900233	WITHOUT_CLASSIFICATION	1.6085509976724952E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999788867809498	WITHOUT_CLASSIFICATION	2.1113219050156658E-5	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9997719176134368	WITHOUT_CLASSIFICATION	2.2808238656311545E-4	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999681784097865	WITHOUT_CLASSIFICATION	3.1821590213463226E-5	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999564551594432	WITHOUT_CLASSIFICATION	4.354484055683265E-5	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997011694902099	WITHOUT_CLASSIFICATION	2.988305097900603E-4	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9995125692366166	WITHOUT_CLASSIFICATION	4.8743076338344897E-4	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999235635507198	WITHOUT_CLASSIFICATION	7.643644928026474E-5	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9977804534726362	WITHOUT_CLASSIFICATION	0.002219546527363752	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998651368889131	WITHOUT_CLASSIFICATION	1.3486311108695304E-4	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9788284936878346	WITHOUT_CLASSIFICATION	0.021171506312165373	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999426271665749	WITHOUT_CLASSIFICATION	5.7372833425169697E-5	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999883071443056	WITHOUT_CLASSIFICATION	1.1692855694400244E-5	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999842901952922	WITHOUT_CLASSIFICATION	1.5709804707805312E-5	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9996851667239995	WITHOUT_CLASSIFICATION	3.1483327600046823E-4	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9431867616645435	WITHOUT_CLASSIFICATION	0.05681323833545639	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999496512932873	WITHOUT_CLASSIFICATION	5.0348706712866436E-5	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998300919710585	WITHOUT_CLASSIFICATION	1.6990802894140865E-4	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9998550470984349	WITHOUT_CLASSIFICATION	1.4495290156511708E-4	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9996809718751478	WITHOUT_CLASSIFICATION	3.190281248521655E-4	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999951325916857	WITHOUT_CLASSIFICATION	4.8674083143556595E-6	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999905565998837	WITHOUT_CLASSIFICATION	9.443400116241745E-6	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999935116670485	WITHOUT_CLASSIFICATION	6.488332951492164E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999572053157268	WITHOUT_CLASSIFICATION	4.279468427318363E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999572053157268	WITHOUT_CLASSIFICATION	4.279468427318363E-5	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999699489934523	WITHOUT_CLASSIFICATION	3.0051006547703605E-4	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9989497244679888	WITHOUT_CLASSIFICATION	0.0010502755320112465	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999255611293413	WITHOUT_CLASSIFICATION	7.443887065875114E-5	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9998042518242477	WITHOUT_CLASSIFICATION	1.9574817575230825E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999363369757113	WITHOUT_CLASSIFICATION	6.366302428882168E-5	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9961549955086739	WITHOUT_CLASSIFICATION	0.0038450044913259916	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9980522984835538	WITHOUT_CLASSIFICATION	0.001947701516446253	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9984770076784969	WITHOUT_CLASSIFICATION	0.0015229923215031593	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.7715024712495986	WITHOUT_CLASSIFICATION	0.22849752875040139	DEFECT
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.7274455783603141	WITHOUT_CLASSIFICATION	0.27255442163968596	DEFECT
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9995663147524888	WITHOUT_CLASSIFICATION	4.336852475111718E-4	DEFECT
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9995695648389238	WITHOUT_CLASSIFICATION	4.3043516107622745E-4	DEFECT
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.9997415842965597	WITHOUT_CLASSIFICATION	2.584157034403408E-4	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.9998323358724411	WITHOUT_CLASSIFICATION	1.676641275587491E-4	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9635617358929172	WITHOUT_CLASSIFICATION	0.03643826410708294	DEFECT
TODO : should this be an error?	DEFECT	0.9957157367133979	WITHOUT_CLASSIFICATION	0.004284263286602154	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.9905834334938319	WITHOUT_CLASSIFICATION	0.009416566506168168	DEFECT
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.9230533312801341	DEFECT	0.07694666871986591	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7413623014586562	DEFECT	0.2586376985413437	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7413623014586562	DEFECT	0.2586376985413437	WITHOUT_CLASSIFICATION
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9480758099787774	WITHOUT_CLASSIFICATION	0.051924190021222616	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999135425274134	WITHOUT_CLASSIFICATION	8.645747258653688E-5	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.8512694970929175	WITHOUT_CLASSIFICATION	0.14873050290708245	DEFECT
this call is side-effecty	DEFECT	0.9999595042975211	WITHOUT_CLASSIFICATION	4.0495702478774855E-5	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.9880398241786071	DEFECT	0.011960175821392766	WITHOUT_CLASSIFICATION
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.909432017295847	WITHOUT_CLASSIFICATION	0.09056798270415303	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.9700879083616974	WITHOUT_CLASSIFICATION	0.029912091638302583	DEFECT
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.9854429314323575	WITHOUT_CLASSIFICATION	0.014557068567642507	DEFECT
TODO: is this completely correct?	DEFECT	0.876161942544626	WITHOUT_CLASSIFICATION	0.12383805745537406	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.9900982218480218	DEFECT	0.009901778151978256	WITHOUT_CLASSIFICATION
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.9480125312245297	WITHOUT_CLASSIFICATION	0.051987468775470426	DEFECT
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9599284248479022	WITHOUT_CLASSIFICATION	0.04007157515209792	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.7918637977070389	WITHOUT_CLASSIFICATION	0.20813620229296112	DEFECT
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.9940941124722402	DEFECT	0.005905887527759855	WITHOUT_CLASSIFICATION
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.767354367747927	WITHOUT_CLASSIFICATION	0.2326456322520731	DEFECT
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.6499602604898674	DEFECT	0.3500397395101326	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.5056693396213479	DEFECT	0.49433066037865214	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.6776273621667477	WITHOUT_CLASSIFICATION	0.3223726378332522	DEFECT
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.8828762280320508	WITHOUT_CLASSIFICATION	0.11712377196794929	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7413623014586562	DEFECT	0.2586376985413437	WITHOUT_CLASSIFICATION
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.987846030834401	DEFECT	0.012153969165598933	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.5848186644780772	DEFECT	0.4151813355219228	WITHOUT_CLASSIFICATION
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.9610232260595487	WITHOUT_CLASSIFICATION	0.03897677394045134	DEFECT
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9997631770804107	WITHOUT_CLASSIFICATION	2.368229195893452E-4	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.934463215698875	WITHOUT_CLASSIFICATION	0.06553678430112489	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9999637327580785	WITHOUT_CLASSIFICATION	3.626724192148712E-5	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9955875184042259	WITHOUT_CLASSIFICATION	0.0044124815957741	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.999486743439995	WITHOUT_CLASSIFICATION	5.132565600049545E-4	DEFECT
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.9798257788761432	WITHOUT_CLASSIFICATION	0.020174221123856865	DEFECT
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.958008175088695	WITHOUT_CLASSIFICATION	0.041991824911305084	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.9847638938205355	WITHOUT_CLASSIFICATION	0.015236106179464325	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.7698542813238483	WITHOUT_CLASSIFICATION	0.23014571867615166	DEFECT
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9998654866229936	WITHOUT_CLASSIFICATION	1.345133770065311E-4	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.9989646678516969	WITHOUT_CLASSIFICATION	0.0010353321483030594	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.898027119230157	DEFECT	0.1019728807698431	WITHOUT_CLASSIFICATION
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.9622995405541115	WITHOUT_CLASSIFICATION	0.037700459445888436	DEFECT
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.9998553989619114	DEFECT	1.4460103808849715E-4	WITHOUT_CLASSIFICATION
