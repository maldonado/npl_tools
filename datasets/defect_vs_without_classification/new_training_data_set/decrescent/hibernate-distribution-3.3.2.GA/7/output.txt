test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999835217978673	WITHOUT_CLASSIFICATION	1.64782021327193E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999964190761651	WITHOUT_CLASSIFICATION	3.5809238349605016E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999964190761651	WITHOUT_CLASSIFICATION	3.5809238349605016E-6	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.999464476243091	WITHOUT_CLASSIFICATION	5.355237569089694E-4	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999575697821648	WITHOUT_CLASSIFICATION	4.243021783535638E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999468236621201	WITHOUT_CLASSIFICATION	5.3176337879889276E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999468236621201	WITHOUT_CLASSIFICATION	5.3176337879889276E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999936441752363	WITHOUT_CLASSIFICATION	6.355824763728078E-6	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999899746774241	WITHOUT_CLASSIFICATION	1.0025322575894648E-4	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.999981092124707	WITHOUT_CLASSIFICATION	1.8907875292971892E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999280072278245	WITHOUT_CLASSIFICATION	7.19927721754626E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999964978245895	WITHOUT_CLASSIFICATION	3.502175410515562E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999964978245895	WITHOUT_CLASSIFICATION	3.502175410515562E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999955237773528	WITHOUT_CLASSIFICATION	4.476222647215867E-6	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999618643446359	WITHOUT_CLASSIFICATION	3.8135655364193944E-5	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.9999388776029012	WITHOUT_CLASSIFICATION	6.112239709873814E-5	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999696999692036	WITHOUT_CLASSIFICATION	3.030003079636292E-5	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999688456165702	WITHOUT_CLASSIFICATION	3.115438342973409E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999905537524425	WITHOUT_CLASSIFICATION	9.446247557496216E-6	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.9999907425627128	WITHOUT_CLASSIFICATION	9.257437287159705E-6	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999491305712828	WITHOUT_CLASSIFICATION	5.086942871719767E-5	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999120279497045	WITHOUT_CLASSIFICATION	8.79720502955382E-5	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999960056574069	WITHOUT_CLASSIFICATION	3.9943425931095244E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.99999048053986	WITHOUT_CLASSIFICATION	9.519460140054929E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.99999048053986	WITHOUT_CLASSIFICATION	9.519460140054929E-6	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9992501824891351	WITHOUT_CLASSIFICATION	7.498175108650018E-4	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999918239916894	WITHOUT_CLASSIFICATION	8.176008310542043E-6	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999578434046237	WITHOUT_CLASSIFICATION	4.215659537635731E-5	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999462725685538	WITHOUT_CLASSIFICATION	5.372743144624744E-5	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9995470970197226	WITHOUT_CLASSIFICATION	4.52902980277405E-4	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999990802999992	WITHOUT_CLASSIFICATION	9.197000008833947E-7	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9998645244947241	WITHOUT_CLASSIFICATION	1.354755052760596E-4	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999829776876895	WITHOUT_CLASSIFICATION	1.7022312310401018E-5	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9991693410722293	WITHOUT_CLASSIFICATION	8.3065892777071E-4	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999649587455955	WITHOUT_CLASSIFICATION	3.50412544045688E-5	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9997266306614091	WITHOUT_CLASSIFICATION	2.7336933859093576E-4	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999830922886799	WITHOUT_CLASSIFICATION	1.6907711320207224E-5	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.99996898664936	WITHOUT_CLASSIFICATION	3.101335064000777E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999002518567204	WITHOUT_CLASSIFICATION	9.97481432795598E-5	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999412290494673	WITHOUT_CLASSIFICATION	5.877095053281766E-5	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998506194607875	WITHOUT_CLASSIFICATION	1.4938053921244565E-4	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998526783567928	WITHOUT_CLASSIFICATION	1.4732164320720108E-4	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9996985182787864	WITHOUT_CLASSIFICATION	3.014817212136154E-4	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999770902878514	WITHOUT_CLASSIFICATION	2.290971214852084E-5	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9331965894030615	WITHOUT_CLASSIFICATION	0.0668034105969386	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.999991391970028	WITHOUT_CLASSIFICATION	8.608029972101147E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.999991391970028	WITHOUT_CLASSIFICATION	8.608029972101147E-6	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999770902878514	WITHOUT_CLASSIFICATION	2.290971214852084E-5	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9996427592242378	WITHOUT_CLASSIFICATION	3.572407757622128E-4	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998874141512049	WITHOUT_CLASSIFICATION	1.1258584879511966E-4	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998611080136073	WITHOUT_CLASSIFICATION	1.3889198639271662E-4	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999889010943694	WITHOUT_CLASSIFICATION	1.1098905630438522E-5	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999997182954325	WITHOUT_CLASSIFICATION	2.8170456745030546E-7	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9969202908993348	WITHOUT_CLASSIFICATION	0.0030797091006653007	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9996321219387775	WITHOUT_CLASSIFICATION	3.678780612225543E-4	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999933208292985	WITHOUT_CLASSIFICATION	6.679170701546582E-6	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9998551039527774	WITHOUT_CLASSIFICATION	1.448960472225329E-4	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9997894312820457	WITHOUT_CLASSIFICATION	2.1056871795427593E-4	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.999991391970028	WITHOUT_CLASSIFICATION	8.608029972101147E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999865521014294	WITHOUT_CLASSIFICATION	1.3447898570556155E-5	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.998869551503228	WITHOUT_CLASSIFICATION	0.0011304484967720454	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9985128965316595	WITHOUT_CLASSIFICATION	0.0014871034683404253	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9990894090599094	WITHOUT_CLASSIFICATION	9.105909400906999E-4	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999555990665172	WITHOUT_CLASSIFICATION	4.44009334827248E-5	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9996668983372919	WITHOUT_CLASSIFICATION	3.331016627081333E-4	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999157641606045	WITHOUT_CLASSIFICATION	8.423583939552793E-5	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999420378308763	WITHOUT_CLASSIFICATION	5.79621691236883E-5	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999813572961603	WITHOUT_CLASSIFICATION	1.8642703839669444E-5	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999996309098784	WITHOUT_CLASSIFICATION	3.6909012149181337E-7	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999735244181474	WITHOUT_CLASSIFICATION	2.6475581852719197E-5	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999153916577305	WITHOUT_CLASSIFICATION	8.460834226948561E-5	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9992247689607766	WITHOUT_CLASSIFICATION	7.752310392233825E-4	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999640482238844	WITHOUT_CLASSIFICATION	3.595177611572592E-5	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999527725769973	WITHOUT_CLASSIFICATION	4.722742300263776E-5	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999983800201857	WITHOUT_CLASSIFICATION	1.6199798142401292E-6	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9997928862378579	WITHOUT_CLASSIFICATION	2.0711376214222128E-4	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999554978773858	WITHOUT_CLASSIFICATION	4.4502122614288834E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999992087165749	WITHOUT_CLASSIFICATION	7.912834251132781E-7	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999885542407778	WITHOUT_CLASSIFICATION	1.144575922215617E-5	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.99984955913769	WITHOUT_CLASSIFICATION	1.5044086231002872E-4	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997199286158475	WITHOUT_CLASSIFICATION	2.800713841525115E-4	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999031469524174	WITHOUT_CLASSIFICATION	9.6853047582471E-5	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999539780133461	WITHOUT_CLASSIFICATION	4.602198665383886E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997199286158475	WITHOUT_CLASSIFICATION	2.800713841525115E-4	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9995300198414675	WITHOUT_CLASSIFICATION	4.6998015853257075E-4	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9996419831916528	WITHOUT_CLASSIFICATION	3.580168083472572E-4	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999954000770115	WITHOUT_CLASSIFICATION	4.5999229884854555E-6	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.9999698404250926	WITHOUT_CLASSIFICATION	3.0159574907380074E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999892718878638	WITHOUT_CLASSIFICATION	1.072811213623926E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999892718878638	WITHOUT_CLASSIFICATION	1.072811213623926E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999191443217049	WITHOUT_CLASSIFICATION	8.085567829512842E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999999507972747	WITHOUT_CLASSIFICATION	4.920272530061075E-7	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999011243260093	WITHOUT_CLASSIFICATION	9.887567399077352E-5	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999943040771029	WITHOUT_CLASSIFICATION	5.695922897081087E-6	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999676337269316	WITHOUT_CLASSIFICATION	3.2366273068290705E-5	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999993928752382	WITHOUT_CLASSIFICATION	6.071247617978363E-6	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999141208728121	WITHOUT_CLASSIFICATION	8.587912718797071E-5	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9999845061502804	WITHOUT_CLASSIFICATION	1.5493849719628663E-5	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999721724838329	WITHOUT_CLASSIFICATION	2.7827516167216197E-5	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999638251073566	WITHOUT_CLASSIFICATION	3.617489264340496E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999965960536186	WITHOUT_CLASSIFICATION	3.403946381444537E-6	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999965960536186	WITHOUT_CLASSIFICATION	3.403946381444537E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999177930197599	WITHOUT_CLASSIFICATION	8.220698024007497E-5	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998487085583613	WITHOUT_CLASSIFICATION	1.512914416387919E-4	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999488215323452	WITHOUT_CLASSIFICATION	5.117846765488305E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999965960536186	WITHOUT_CLASSIFICATION	3.403946381444537E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999177930197599	WITHOUT_CLASSIFICATION	8.220698024007497E-5	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999177930197599	WITHOUT_CLASSIFICATION	8.220698024007497E-5	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999634883173659	WITHOUT_CLASSIFICATION	3.651168263398755E-5	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999396676640717	WITHOUT_CLASSIFICATION	6.033233592842631E-5	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999785046974219	WITHOUT_CLASSIFICATION	2.149530257818398E-5	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999917190221786	WITHOUT_CLASSIFICATION	8.280977821349556E-6	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9996652910730703	WITHOUT_CLASSIFICATION	3.347089269296483E-4	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9996652910730703	WITHOUT_CLASSIFICATION	3.347089269296483E-4	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999183330593823	WITHOUT_CLASSIFICATION	8.166694061774953E-5	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998944859513657	WITHOUT_CLASSIFICATION	1.0551404863441879E-4	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999498619787207	WITHOUT_CLASSIFICATION	5.01380212793333E-5	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998820109687253	WITHOUT_CLASSIFICATION	1.1798903127468767E-4	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998820109687253	WITHOUT_CLASSIFICATION	1.1798903127468767E-4	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9998674658080234	WITHOUT_CLASSIFICATION	1.3253419197652624E-4	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999486887086012	WITHOUT_CLASSIFICATION	5.131129139869981E-5	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9995121479384305	WITHOUT_CLASSIFICATION	4.878520615695747E-4	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9997697569093899	WITHOUT_CLASSIFICATION	2.3024309061008775E-4	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999611139665981	WITHOUT_CLASSIFICATION	3.8886033401857127E-5	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999277633741136	WITHOUT_CLASSIFICATION	7.223662588641827E-5	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999122047147494	WITHOUT_CLASSIFICATION	8.779528525064547E-5	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999871629337702	WITHOUT_CLASSIFICATION	1.283706622967253E-5	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9995121479384305	WITHOUT_CLASSIFICATION	4.878520615695747E-4	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999899723118769	WITHOUT_CLASSIFICATION	1.0027688123166484E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999706613623406	WITHOUT_CLASSIFICATION	2.9338637659409656E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999706613623406	WITHOUT_CLASSIFICATION	2.9338637659409656E-5	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999971068073018	WITHOUT_CLASSIFICATION	2.893192698193042E-6	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999833631120744	WITHOUT_CLASSIFICATION	1.6636887925610506E-4	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999643356111362	WITHOUT_CLASSIFICATION	3.566438886386604E-5	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999395967956207	WITHOUT_CLASSIFICATION	6.040320437928063E-5	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999864305092209	WITHOUT_CLASSIFICATION	1.3569490779102262E-4	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999774454792763	WITHOUT_CLASSIFICATION	2.2554520723692973E-5	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.9999524279487495	WITHOUT_CLASSIFICATION	4.7572051250392566E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9998341588168933	WITHOUT_CLASSIFICATION	1.658411831066054E-4	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999968626039036	WITHOUT_CLASSIFICATION	3.1373960963625204E-6	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999778197292577	WITHOUT_CLASSIFICATION	2.218027074228379E-5	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999778197292577	WITHOUT_CLASSIFICATION	2.218027074228379E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999758371949111	WITHOUT_CLASSIFICATION	2.4162805088824387E-5	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999835217978673	WITHOUT_CLASSIFICATION	1.64782021327193E-5	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999987996495726	WITHOUT_CLASSIFICATION	1.2003504273964352E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999964190761651	WITHOUT_CLASSIFICATION	3.5809238349605016E-6	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.999914440621642	WITHOUT_CLASSIFICATION	8.555937835800797E-5	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999289318065984	WITHOUT_CLASSIFICATION	7.106819340167147E-5	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999446718239409	WITHOUT_CLASSIFICATION	5.532817605921591E-5	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9998002931885628	WITHOUT_CLASSIFICATION	1.9970681143720344E-4	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9992838149442047	WITHOUT_CLASSIFICATION	7.161850557953387E-4	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999936723878664	WITHOUT_CLASSIFICATION	6.327612133637165E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999905026549695	WITHOUT_CLASSIFICATION	9.497345030615233E-6	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999445059986296	WITHOUT_CLASSIFICATION	5.54940013703562E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9998002931885628	WITHOUT_CLASSIFICATION	1.9970681143720344E-4	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9985789957370664	WITHOUT_CLASSIFICATION	0.0014210042629335855	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9995731325926578	WITHOUT_CLASSIFICATION	4.268674073422052E-4	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999519696376064	WITHOUT_CLASSIFICATION	4.8030362393771464E-5	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999456569475647	WITHOUT_CLASSIFICATION	5.434305243547443E-5	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999843282019539	WITHOUT_CLASSIFICATION	1.567179804610593E-4	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999468236621201	WITHOUT_CLASSIFICATION	5.3176337879889276E-5	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998148787891462	WITHOUT_CLASSIFICATION	1.8512121085372243E-4	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999947796072266	WITHOUT_CLASSIFICATION	5.220392773363633E-6	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999343855354357	WITHOUT_CLASSIFICATION	6.561446456434127E-5	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9998778400547592	WITHOUT_CLASSIFICATION	1.2215994524076928E-4	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999904671136939	WITHOUT_CLASSIFICATION	9.532886306126367E-6	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999334647790764	WITHOUT_CLASSIFICATION	6.653522092361363E-5	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999476039907723	WITHOUT_CLASSIFICATION	5.2396009227692427E-5	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.9992636164502685	WITHOUT_CLASSIFICATION	7.363835497315038E-4	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9995084106443903	WITHOUT_CLASSIFICATION	4.915893556097415E-4	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.9999370575541604	WITHOUT_CLASSIFICATION	6.294244583963756E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999964190761651	WITHOUT_CLASSIFICATION	3.5809238349605016E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999964190761651	WITHOUT_CLASSIFICATION	3.5809238349605016E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999905026549695	WITHOUT_CLASSIFICATION	9.497345030615233E-6	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999904671136939	WITHOUT_CLASSIFICATION	9.532886306126367E-6	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999936441752363	WITHOUT_CLASSIFICATION	6.355824763728078E-6	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9998612796732246	WITHOUT_CLASSIFICATION	1.38720326775307E-4	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999448295976172	WITHOUT_CLASSIFICATION	5.517040238267589E-5	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9997854929448613	WITHOUT_CLASSIFICATION	2.1450705513871338E-4	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.9999917891143414	WITHOUT_CLASSIFICATION	8.21088565853605E-6	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9973270742996502	WITHOUT_CLASSIFICATION	0.0026729257003499157	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9999915909931932	WITHOUT_CLASSIFICATION	8.409006806853723E-6	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9999125421322219	WITHOUT_CLASSIFICATION	8.74578677781012E-5	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997472498400513	WITHOUT_CLASSIFICATION	2.527501599487348E-4	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997472498400513	WITHOUT_CLASSIFICATION	2.527501599487348E-4	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999973914813414	WITHOUT_CLASSIFICATION	2.6085186585376256E-6	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999892995920705	WITHOUT_CLASSIFICATION	1.0700407929561128E-5	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.99987654386411	WITHOUT_CLASSIFICATION	1.2345613589012403E-4	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999206335053362	WITHOUT_CLASSIFICATION	7.936649466382853E-5	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999963875694564	WITHOUT_CLASSIFICATION	3.612430543511112E-6	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.9999661476177018	WITHOUT_CLASSIFICATION	3.385238229815462E-5	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9999919381468323	WITHOUT_CLASSIFICATION	8.061853167732616E-6	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999899746774241	WITHOUT_CLASSIFICATION	1.0025322575894648E-4	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999723685103858	WITHOUT_CLASSIFICATION	2.76314896142107E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999723685103858	WITHOUT_CLASSIFICATION	2.76314896142107E-5	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.9999264309021363	WITHOUT_CLASSIFICATION	7.356909786380036E-5	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999888333374999	WITHOUT_CLASSIFICATION	1.1166662500151407E-5	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9999264309021363	WITHOUT_CLASSIFICATION	7.356909786380036E-5	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999176454389471	WITHOUT_CLASSIFICATION	8.235456105290652E-5	DEFECT
int	WITHOUT_CLASSIFICATION	0.9999373839732932	WITHOUT_CLASSIFICATION	6.26160267067352E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999964190761651	WITHOUT_CLASSIFICATION	3.5809238349605016E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999905026549695	WITHOUT_CLASSIFICATION	9.497345030615233E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999904671136939	WITHOUT_CLASSIFICATION	9.532886306126367E-6	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999904671136939	WITHOUT_CLASSIFICATION	9.532886306126367E-6	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.9999964797250864	WITHOUT_CLASSIFICATION	3.520274913445671E-6	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999781327622185	WITHOUT_CLASSIFICATION	2.18672377815323E-5	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999495102006377	WITHOUT_CLASSIFICATION	5.048979936223233E-5	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999280072278245	WITHOUT_CLASSIFICATION	7.19927721754626E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999280072278245	WITHOUT_CLASSIFICATION	7.19927721754626E-5	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9999607144660723	WITHOUT_CLASSIFICATION	3.928553392761582E-5	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999526661354549	WITHOUT_CLASSIFICATION	4.7333864545173816E-5	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.9999937006759907	WITHOUT_CLASSIFICATION	6.299324009250963E-6	DEFECT
byte	WITHOUT_CLASSIFICATION	0.9999921197537006	WITHOUT_CLASSIFICATION	7.880246299509494E-6	DEFECT
char	WITHOUT_CLASSIFICATION	0.9999928915852394	WITHOUT_CLASSIFICATION	7.108414760603921E-6	DEFECT
short	WITHOUT_CLASSIFICATION	0.999991099300258	WITHOUT_CLASSIFICATION	8.900699742062344E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999964978245895	WITHOUT_CLASSIFICATION	3.502175410515562E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999905690062313	WITHOUT_CLASSIFICATION	9.430993768693842E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999905690062313	WITHOUT_CLASSIFICATION	9.430993768693842E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999955237773528	WITHOUT_CLASSIFICATION	4.476222647215867E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999955237773528	WITHOUT_CLASSIFICATION	4.476222647215867E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999172888898572	WITHOUT_CLASSIFICATION	8.271111014285662E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999172888898572	WITHOUT_CLASSIFICATION	8.271111014285662E-5	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998841419256739	WITHOUT_CLASSIFICATION	1.1585807432615389E-4	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998841419256739	WITHOUT_CLASSIFICATION	1.1585807432615389E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999280072278245	WITHOUT_CLASSIFICATION	7.19927721754626E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999964978245895	WITHOUT_CLASSIFICATION	3.502175410515562E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999905690062313	WITHOUT_CLASSIFICATION	9.430993768693842E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999905690062313	WITHOUT_CLASSIFICATION	9.430993768693842E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999955237773528	WITHOUT_CLASSIFICATION	4.476222647215867E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999172888898572	WITHOUT_CLASSIFICATION	8.271111014285662E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999172888898572	WITHOUT_CLASSIFICATION	8.271111014285662E-5	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998841419256739	WITHOUT_CLASSIFICATION	1.1585807432615389E-4	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999538381110104	WITHOUT_CLASSIFICATION	4.616188898969384E-5	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999199747681724	WITHOUT_CLASSIFICATION	8.002523182761533E-5	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.999965551857245	WITHOUT_CLASSIFICATION	3.4448142754987796E-5	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999875809304318	WITHOUT_CLASSIFICATION	1.2419069568191329E-5	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.999956578693782	WITHOUT_CLASSIFICATION	4.342130621808909E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999905537544108	WITHOUT_CLASSIFICATION	9.446245589162285E-6	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9935410545969068	WITHOUT_CLASSIFICATION	0.006458945403093192	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9982817239032638	WITHOUT_CLASSIFICATION	0.001718276096736233	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999515405287372	WITHOUT_CLASSIFICATION	4.8459471262780466E-5	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999922368683422	WITHOUT_CLASSIFICATION	7.763131657881774E-6	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998916677591476	WITHOUT_CLASSIFICATION	1.0833224085235159E-4	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999465440650505	WITHOUT_CLASSIFICATION	5.345593494950644E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999191443217049	WITHOUT_CLASSIFICATION	8.085567829512842E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999905537544108	WITHOUT_CLASSIFICATION	9.446245589162285E-6	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999905537544108	WITHOUT_CLASSIFICATION	9.446245589162285E-6	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999905537544108	WITHOUT_CLASSIFICATION	9.446245589162285E-6	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9993559889215041	WITHOUT_CLASSIFICATION	6.4401107849589E-4	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999745800384661	WITHOUT_CLASSIFICATION	2.541996153396603E-5	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999745800384661	WITHOUT_CLASSIFICATION	2.541996153396603E-5	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.999752623484843	WITHOUT_CLASSIFICATION	2.473765151570703E-4	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999847492680726	WITHOUT_CLASSIFICATION	1.5250731927394708E-5	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9993329111054696	WITHOUT_CLASSIFICATION	6.670888945304055E-4	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9993684666902737	WITHOUT_CLASSIFICATION	6.315333097262699E-4	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9993684666902737	WITHOUT_CLASSIFICATION	6.315333097262699E-4	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999688456165702	WITHOUT_CLASSIFICATION	3.115438342973409E-5	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997696764715198	WITHOUT_CLASSIFICATION	2.3032352848015113E-4	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997696764715198	WITHOUT_CLASSIFICATION	2.3032352848015113E-4	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999908421401059	WITHOUT_CLASSIFICATION	9.157859894107242E-5	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999382010663531	WITHOUT_CLASSIFICATION	6.179893364697807E-5	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.999960056574069	WITHOUT_CLASSIFICATION	3.9943425931095244E-5	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.9999917445847312	WITHOUT_CLASSIFICATION	8.255415268834225E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999905537524425	WITHOUT_CLASSIFICATION	9.446247557496216E-6	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9916867937624351	WITHOUT_CLASSIFICATION	0.00831320623756493	DEFECT
ID	WITHOUT_CLASSIFICATION	0.999990610291039	WITHOUT_CLASSIFICATION	9.38970896108932E-6	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999316871120213	WITHOUT_CLASSIFICATION	6.83128879786249E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997405277713174	WITHOUT_CLASSIFICATION	2.5947222868266586E-4	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999665688426682	WITHOUT_CLASSIFICATION	3.343115733181637E-5	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999720403698437	WITHOUT_CLASSIFICATION	2.7959630156375402E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999462725685538	WITHOUT_CLASSIFICATION	5.372743144624744E-5	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999977504813883	WITHOUT_CLASSIFICATION	2.24951861168416E-6	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999914276024957	WITHOUT_CLASSIFICATION	8.572397504302999E-5	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9999909305389264	WITHOUT_CLASSIFICATION	9.0694610736511E-6	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999904836562841	WITHOUT_CLASSIFICATION	9.516343715908869E-6	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999187208495065	WITHOUT_CLASSIFICATION	8.127915049344378E-5	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999105837301657	WITHOUT_CLASSIFICATION	8.941626983419161E-5	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999945004993485	WITHOUT_CLASSIFICATION	5.499500651525856E-6	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999960056574069	WITHOUT_CLASSIFICATION	3.9943425931095244E-5	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999872872068137	WITHOUT_CLASSIFICATION	1.2712793186308456E-5	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9999293109316412	WITHOUT_CLASSIFICATION	7.068906835882728E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.999991015556634	WITHOUT_CLASSIFICATION	8.984443365886611E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999905537524425	WITHOUT_CLASSIFICATION	9.446247557496216E-6	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999945004993485	WITHOUT_CLASSIFICATION	5.499500651525856E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999872872068137	WITHOUT_CLASSIFICATION	1.2712793186308456E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.999991015556634	WITHOUT_CLASSIFICATION	8.984443365886611E-6	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999816577540644	WITHOUT_CLASSIFICATION	1.8342245935593917E-4	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.9999904675401196	WITHOUT_CLASSIFICATION	9.532459880404136E-6	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999816577540644	WITHOUT_CLASSIFICATION	1.8342245935593917E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.99999048053986	WITHOUT_CLASSIFICATION	9.519460140054929E-6	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
column index	WITHOUT_CLASSIFICATION	0.999916473191733	WITHOUT_CLASSIFICATION	8.352680826694635E-5	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.9999488920255798	WITHOUT_CLASSIFICATION	5.110797442012376E-5	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999908440626338	WITHOUT_CLASSIFICATION	9.155937366088676E-6	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999984553182903	WITHOUT_CLASSIFICATION	1.5446817096281493E-6	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.999977602071607	WITHOUT_CLASSIFICATION	2.2397928393007337E-5	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999817346753171	WITHOUT_CLASSIFICATION	1.826532468284947E-5	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9991932114625784	WITHOUT_CLASSIFICATION	8.067885374215445E-4	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999686391983614	WITHOUT_CLASSIFICATION	3.136080163864595E-5	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999817346753171	WITHOUT_CLASSIFICATION	1.826532468284947E-5	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999918239916894	WITHOUT_CLASSIFICATION	8.176008310542043E-6	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998471712779681	WITHOUT_CLASSIFICATION	1.5282872203193268E-4	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999945004993485	WITHOUT_CLASSIFICATION	5.499500651525856E-6	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998967663910293	WITHOUT_CLASSIFICATION	1.0323360897071461E-4	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.9999327312151384	WITHOUT_CLASSIFICATION	6.726878486165114E-5	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9994440119427193	WITHOUT_CLASSIFICATION	5.559880572807202E-4	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9998860947006878	WITHOUT_CLASSIFICATION	1.1390529931223654E-4	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999207619495463	WITHOUT_CLASSIFICATION	7.923805045376796E-5	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999992868193821	WITHOUT_CLASSIFICATION	7.131806178946067E-6	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999887779173656	WITHOUT_CLASSIFICATION	1.1222082634393964E-4	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999439633285079	WITHOUT_CLASSIFICATION	5.603667149211961E-5	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.999990484686929	WITHOUT_CLASSIFICATION	9.515313071025472E-6	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999911802548486	WITHOUT_CLASSIFICATION	8.819745151402117E-5	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999168697412572	WITHOUT_CLASSIFICATION	8.313025874274129E-5	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.99945931890703	WITHOUT_CLASSIFICATION	5.406810929699514E-4	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999462725685538	WITHOUT_CLASSIFICATION	5.372743144624744E-5	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.999941429225521	WITHOUT_CLASSIFICATION	5.857077447909524E-5	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998486897877849	WITHOUT_CLASSIFICATION	1.5131021221514144E-4	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9999655758950415	WITHOUT_CLASSIFICATION	3.442410495840603E-5	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999401179806015	WITHOUT_CLASSIFICATION	5.988201939859182E-5	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9999409267053683	WITHOUT_CLASSIFICATION	5.907329463167966E-5	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999380760500322	WITHOUT_CLASSIFICATION	6.192394996782966E-5	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999997228107718	WITHOUT_CLASSIFICATION	2.7718922828916764E-7	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999784957170916	WITHOUT_CLASSIFICATION	2.1504282908320647E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999696051327693	WITHOUT_CLASSIFICATION	3.0394867230705882E-5	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999352686061407	WITHOUT_CLASSIFICATION	6.473139385926909E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999552185534232	WITHOUT_CLASSIFICATION	4.478144657669039E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999552185534232	WITHOUT_CLASSIFICATION	4.478144657669039E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999148294496035	WITHOUT_CLASSIFICATION	8.517055039641348E-5	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999157496547832	WITHOUT_CLASSIFICATION	8.425034521670558E-5	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999759835399363	WITHOUT_CLASSIFICATION	2.401646006361489E-5	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999100739807357	WITHOUT_CLASSIFICATION	8.99260192642955E-5	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999952140562216	WITHOUT_CLASSIFICATION	4.785943778394932E-5	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9997385087108651	WITHOUT_CLASSIFICATION	2.61491289134895E-4	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997526596901135	WITHOUT_CLASSIFICATION	2.473403098865486E-4	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999410987745173	WITHOUT_CLASSIFICATION	5.890122548257616E-5	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999716120659793	WITHOUT_CLASSIFICATION	2.8387934020652736E-5	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999400711805135	WITHOUT_CLASSIFICATION	5.9928819486415006E-5	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.999920480530547	WITHOUT_CLASSIFICATION	7.951946945302876E-5	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9996979619086672	WITHOUT_CLASSIFICATION	3.0203809133278706E-4	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999335076529358	WITHOUT_CLASSIFICATION	6.649234706421771E-5	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9993707925047537	WITHOUT_CLASSIFICATION	6.292074952462753E-4	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9995489755617439	WITHOUT_CLASSIFICATION	4.510244382560566E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9996543963236949	WITHOUT_CLASSIFICATION	3.456036763050283E-4	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999242120302401	WITHOUT_CLASSIFICATION	7.578796975994311E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999974235258043	WITHOUT_CLASSIFICATION	2.5764741957065193E-5	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260489540843	WITHOUT_CLASSIFICATION	7.395104591566177E-5	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999354785642706	WITHOUT_CLASSIFICATION	6.452143572947834E-5	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.999985404089277	WITHOUT_CLASSIFICATION	1.4595910722908547E-5	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9971427121347595	WITHOUT_CLASSIFICATION	0.0028572878652406188	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9996543963236949	WITHOUT_CLASSIFICATION	3.456036763050283E-4	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999386320404066	WITHOUT_CLASSIFICATION	6.136795959342143E-5	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999345739601312	WITHOUT_CLASSIFICATION	6.542603986871012E-5	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.999934360952943	WITHOUT_CLASSIFICATION	6.563904705710947E-5	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999882039944679	WITHOUT_CLASSIFICATION	1.1796005532108056E-4	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999490583225896	WITHOUT_CLASSIFICATION	5.094167741042424E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999974235258043	WITHOUT_CLASSIFICATION	2.5764741957065193E-5	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9957975039415591	WITHOUT_CLASSIFICATION	0.004202496058440918	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999205473539561	WITHOUT_CLASSIFICATION	7.945264604398251E-5	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999012986179614	WITHOUT_CLASSIFICATION	9.870138203852705E-5	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999952991245893	WITHOUT_CLASSIFICATION	4.700875410740552E-6	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999952991245893	WITHOUT_CLASSIFICATION	4.700875410740552E-6	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9996985182787864	WITHOUT_CLASSIFICATION	3.014817212136154E-4	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999135643811605	WITHOUT_CLASSIFICATION	8.643561883946328E-5	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.999910559487663	WITHOUT_CLASSIFICATION	8.9440512336944E-5	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.999910559487663	WITHOUT_CLASSIFICATION	8.9440512336944E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999696051327693	WITHOUT_CLASSIFICATION	3.0394867230705882E-5	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9915258606824644	WITHOUT_CLASSIFICATION	0.008474139317535554	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995586098379706	WITHOUT_CLASSIFICATION	4.413901620293296E-4	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998476678356591	WITHOUT_CLASSIFICATION	1.523321643408141E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999758371949111	WITHOUT_CLASSIFICATION	2.4162805088824387E-5	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995586098379706	WITHOUT_CLASSIFICATION	4.413901620293296E-4	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998476678356591	WITHOUT_CLASSIFICATION	1.523321643408141E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999670505988466	WITHOUT_CLASSIFICATION	3.294940115333092E-5	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9989247344595844	WITHOUT_CLASSIFICATION	0.0010752655404155619	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999544699432406	WITHOUT_CLASSIFICATION	4.5530056759574816E-5	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999859083119319	WITHOUT_CLASSIFICATION	1.409168806808322E-5	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998269778565197	WITHOUT_CLASSIFICATION	1.730221434802348E-4	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999836896315919	WITHOUT_CLASSIFICATION	1.6310368408071056E-5	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996901370398937	WITHOUT_CLASSIFICATION	3.0986296010622987E-4	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996901370398937	WITHOUT_CLASSIFICATION	3.0986296010622987E-4	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9997950279236423	WITHOUT_CLASSIFICATION	2.0497207635786587E-4	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999982174252516	WITHOUT_CLASSIFICATION	1.7825747483644543E-6	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999761721321989	WITHOUT_CLASSIFICATION	2.382786780111426E-5	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9998386627656657	WITHOUT_CLASSIFICATION	1.6133723433431454E-4	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999771392311612	WITHOUT_CLASSIFICATION	2.286076883881445E-5	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999235349555161	WITHOUT_CLASSIFICATION	7.646504448393282E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999758371949111	WITHOUT_CLASSIFICATION	2.4162805088824387E-5	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999235349555161	WITHOUT_CLASSIFICATION	7.646504448393282E-5	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9992367107101388	WITHOUT_CLASSIFICATION	7.632892898611083E-4	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9992367107101388	WITHOUT_CLASSIFICATION	7.632892898611083E-4	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9991853111593709	WITHOUT_CLASSIFICATION	8.14688840629077E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999670505988466	WITHOUT_CLASSIFICATION	3.294940115333092E-5	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999129901059172	WITHOUT_CLASSIFICATION	8.700989408285554E-5	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9997869280963765	WITHOUT_CLASSIFICATION	2.1307190362360471E-4	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9997026911198982	WITHOUT_CLASSIFICATION	2.973088801017896E-4	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998941522530024	WITHOUT_CLASSIFICATION	1.0584774699770626E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9945758682954315	WITHOUT_CLASSIFICATION	0.005424131704568449	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999670505988466	WITHOUT_CLASSIFICATION	3.294940115333092E-5	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998941522530024	WITHOUT_CLASSIFICATION	1.0584774699770626E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9945758682954315	WITHOUT_CLASSIFICATION	0.005424131704568449	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9996701855703912	WITHOUT_CLASSIFICATION	3.298144296086979E-4	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999244744585454	WITHOUT_CLASSIFICATION	7.552554145460498E-5	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999494555986937	WITHOUT_CLASSIFICATION	5.054440130627492E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999670505988466	WITHOUT_CLASSIFICATION	3.294940115333092E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999670505988466	WITHOUT_CLASSIFICATION	3.294940115333092E-5	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9999898750603678	WITHOUT_CLASSIFICATION	1.0124939632160916E-5	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9998908141312476	WITHOUT_CLASSIFICATION	1.0918586875247604E-4	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9999340820521273	WITHOUT_CLASSIFICATION	6.591794787273992E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999002518567204	WITHOUT_CLASSIFICATION	9.97481432795598E-5	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9999714310297866	WITHOUT_CLASSIFICATION	2.8568970213456353E-5	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999947105311975	WITHOUT_CLASSIFICATION	5.289468802591022E-6	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999647579340871	WITHOUT_CLASSIFICATION	3.5242065912931206E-5	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999555860007334	WITHOUT_CLASSIFICATION	4.441399926663311E-5	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998723189697688	WITHOUT_CLASSIFICATION	1.2768103023112214E-4	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9998976901267049	WITHOUT_CLASSIFICATION	1.02309873295051E-4	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999187334452286	WITHOUT_CLASSIFICATION	8.12665547713611E-5	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999916888850138	WITHOUT_CLASSIFICATION	8.31111498624194E-6	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999924796394184	WITHOUT_CLASSIFICATION	7.520360581647395E-6	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999630899218753	WITHOUT_CLASSIFICATION	3.6910078124663684E-5	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998776672331092	WITHOUT_CLASSIFICATION	1.2233276689079263E-4	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999935503170175	WITHOUT_CLASSIFICATION	6.449682982434762E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999002518567204	WITHOUT_CLASSIFICATION	9.97481432795598E-5	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.9998966920328525	WITHOUT_CLASSIFICATION	1.0330796714760127E-4	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999240753493271	WITHOUT_CLASSIFICATION	7.592465067281217E-5	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9997763971450467	WITHOUT_CLASSIFICATION	2.236028549532843E-4	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999408661782913	WITHOUT_CLASSIFICATION	5.913382170879905E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.999911178266406	WITHOUT_CLASSIFICATION	8.882173359401296E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.999911178266406	WITHOUT_CLASSIFICATION	8.882173359401296E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999002518567204	WITHOUT_CLASSIFICATION	9.97481432795598E-5	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9065088530753445	WITHOUT_CLASSIFICATION	0.09349114692465556	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999980621820398	WITHOUT_CLASSIFICATION	1.9378179602700424E-6	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9988205336751362	WITHOUT_CLASSIFICATION	0.0011794663248637575	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999357349027095	WITHOUT_CLASSIFICATION	6.426509729044539E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999904797882281	WITHOUT_CLASSIFICATION	9.520211771824701E-6	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999731067684345	WITHOUT_CLASSIFICATION	2.6893231565518813E-5	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9987987889493826	WITHOUT_CLASSIFICATION	0.001201211050617424	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999941659589804	WITHOUT_CLASSIFICATION	5.8340410195849595E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999873519732046	WITHOUT_CLASSIFICATION	1.2648026795408017E-4	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999629422437886	WITHOUT_CLASSIFICATION	3.7057756211556645E-5	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999543265971023	WITHOUT_CLASSIFICATION	4.567340289775079E-5	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9977708672800852	WITHOUT_CLASSIFICATION	0.0022291327199147407	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999319668932698	WITHOUT_CLASSIFICATION	6.803310673019948E-5	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999957168333684	WITHOUT_CLASSIFICATION	4.283166631565181E-6	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999423980154255	WITHOUT_CLASSIFICATION	5.760198457439903E-5	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9996603781032383	WITHOUT_CLASSIFICATION	3.396218967617036E-4	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999363036230475	WITHOUT_CLASSIFICATION	6.369637695239025E-5	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9996514305319665	WITHOUT_CLASSIFICATION	3.485694680334183E-4	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999381787870949	WITHOUT_CLASSIFICATION	6.182121290517125E-5	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999171553046075	WITHOUT_CLASSIFICATION	8.284469539266039E-5	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9993969530787911	WITHOUT_CLASSIFICATION	6.030469212090003E-4	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999753088280987	WITHOUT_CLASSIFICATION	2.469117190127783E-5	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998780459927061	WITHOUT_CLASSIFICATION	1.2195400729386222E-4	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998832937441882	WITHOUT_CLASSIFICATION	1.1670625581185448E-4	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999286798824847	WITHOUT_CLASSIFICATION	7.132011751528689E-5	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998588418471902	WITHOUT_CLASSIFICATION	1.411581528096972E-4	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204832960205	WITHOUT_CLASSIFICATION	7.951670397952152E-5	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999926160860519	WITHOUT_CLASSIFICATION	7.383913948100587E-5	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204832960205	WITHOUT_CLASSIFICATION	7.951670397952152E-5	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204832960205	WITHOUT_CLASSIFICATION	7.951670397952152E-5	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999978672377527	WITHOUT_CLASSIFICATION	2.132762247256581E-6	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999978228088108	WITHOUT_CLASSIFICATION	2.177191189249381E-6	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999771464931976	WITHOUT_CLASSIFICATION	2.2853506802477744E-5	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999853025163686	WITHOUT_CLASSIFICATION	1.469748363132914E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999341741930662	WITHOUT_CLASSIFICATION	6.582580693385126E-5	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999653311504941	WITHOUT_CLASSIFICATION	3.46688495058597E-5	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999217351668154	WITHOUT_CLASSIFICATION	7.826483318453858E-5	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204832960205	WITHOUT_CLASSIFICATION	7.951670397952152E-5	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999069534716005	WITHOUT_CLASSIFICATION	9.304652839941227E-5	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204832960205	WITHOUT_CLASSIFICATION	7.951670397952152E-5	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999338652629017	WITHOUT_CLASSIFICATION	6.613473709829028E-5	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999872149687343	WITHOUT_CLASSIFICATION	1.2785031265696994E-4	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9997809756468145	WITHOUT_CLASSIFICATION	2.1902435318557352E-4	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999347657240872	WITHOUT_CLASSIFICATION	6.523427591273135E-5	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999971748942807	WITHOUT_CLASSIFICATION	2.82510571925442E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999952739176997	WITHOUT_CLASSIFICATION	4.726082300309215E-5	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.9998972821989031	WITHOUT_CLASSIFICATION	1.0271780109690126E-4	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998858592741783	WITHOUT_CLASSIFICATION	1.1414072582168847E-4	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999941410330304	WITHOUT_CLASSIFICATION	5.858966969558335E-6	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999112715240649	WITHOUT_CLASSIFICATION	8.872847593518247E-5	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999131359844136	WITHOUT_CLASSIFICATION	8.686401558647149E-5	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999257342863981	WITHOUT_CLASSIFICATION	7.42657136018441E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999873519732046	WITHOUT_CLASSIFICATION	1.2648026795408017E-4	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999300051864038	WITHOUT_CLASSIFICATION	6.999481359617655E-5	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.999990594560737	WITHOUT_CLASSIFICATION	9.4054392629501E-6	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999623897946722	WITHOUT_CLASSIFICATION	3.761020532774948E-5	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9998491426240393	WITHOUT_CLASSIFICATION	1.5085737596065894E-4	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.999285194760005	WITHOUT_CLASSIFICATION	7.148052399949561E-4	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9996985137261765	WITHOUT_CLASSIFICATION	3.0148627382356507E-4	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998715891159459	WITHOUT_CLASSIFICATION	1.2841088405413816E-4	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998999061666304	WITHOUT_CLASSIFICATION	1.0009383336965511E-4	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999121599737069	WITHOUT_CLASSIFICATION	8.784002629313199E-5	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998766781305316	WITHOUT_CLASSIFICATION	1.2332186946834234E-4	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9949776939273184	WITHOUT_CLASSIFICATION	0.005022306072681599	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999090556526522	WITHOUT_CLASSIFICATION	9.09443473478298E-5	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999663924409208	WITHOUT_CLASSIFICATION	3.360755907933144E-5	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9979855026550655	WITHOUT_CLASSIFICATION	0.0020144973449345085	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99985053300755	WITHOUT_CLASSIFICATION	1.4946699244997282E-4	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999845872318712	WITHOUT_CLASSIFICATION	1.541276812879923E-4	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999823386008319	WITHOUT_CLASSIFICATION	1.7661399168095968E-4	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999099936831221	WITHOUT_CLASSIFICATION	9.000631687789186E-5	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999989644414245	WITHOUT_CLASSIFICATION	1.0355585755004962E-5	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9993227808111869	WITHOUT_CLASSIFICATION	6.772191888132043E-4	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9997824986432002	WITHOUT_CLASSIFICATION	2.1750135679971867E-4	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9997847337844021	WITHOUT_CLASSIFICATION	2.1526621559790087E-4	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9997211332426538	WITHOUT_CLASSIFICATION	2.788667573463157E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999873519732046	WITHOUT_CLASSIFICATION	1.2648026795408017E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999952739176997	WITHOUT_CLASSIFICATION	4.726082300309215E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9998283971876288	WITHOUT_CLASSIFICATION	1.7160281237111114E-4	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999669641062161	WITHOUT_CLASSIFICATION	3.3035893783881804E-5	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999326344330444	WITHOUT_CLASSIFICATION	6.736556695558457E-5	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999347657240872	WITHOUT_CLASSIFICATION	6.523427591273135E-5	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998781195599458	WITHOUT_CLASSIFICATION	1.2188044005431317E-4	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.999925775051703	WITHOUT_CLASSIFICATION	7.422494829700051E-5	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9949776939273184	WITHOUT_CLASSIFICATION	0.005022306072681599	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9992138208890936	WITHOUT_CLASSIFICATION	7.861791109064323E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9997762336025945	WITHOUT_CLASSIFICATION	2.2376639740546E-4	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998408914827774	WITHOUT_CLASSIFICATION	1.5910851722253207E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998866509111235	WITHOUT_CLASSIFICATION	1.1334908887661873E-4	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997876878903968	WITHOUT_CLASSIFICATION	2.1231210960317371E-4	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999712159122112	WITHOUT_CLASSIFICATION	2.8784087788856707E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999873519732046	WITHOUT_CLASSIFICATION	1.2648026795408017E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999873519732046	WITHOUT_CLASSIFICATION	1.2648026795408017E-4	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999234793056603	WITHOUT_CLASSIFICATION	7.652069433965689E-5	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999942977934781	WITHOUT_CLASSIFICATION	5.702206521849494E-6	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999613312278915	WITHOUT_CLASSIFICATION	3.86687721084901E-4	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999136747778548	WITHOUT_CLASSIFICATION	8.632522214518672E-5	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.999949837063536	WITHOUT_CLASSIFICATION	5.0162936463935096E-5	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999348281428424	WITHOUT_CLASSIFICATION	6.517185715756181E-5	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999790089402357	WITHOUT_CLASSIFICATION	2.099105976426342E-5	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9993078900633388	WITHOUT_CLASSIFICATION	6.921099366612928E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.999699187078278	WITHOUT_CLASSIFICATION	3.008129217220896E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999873519732046	WITHOUT_CLASSIFICATION	1.2648026795408017E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999060854243751	WITHOUT_CLASSIFICATION	9.391457562499176E-5	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999820470619534	WITHOUT_CLASSIFICATION	1.7952938046612937E-5	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999412392718731	WITHOUT_CLASSIFICATION	5.8760728126908234E-5	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.999928709487885	WITHOUT_CLASSIFICATION	7.129051211504101E-5	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9996201346718442	WITHOUT_CLASSIFICATION	3.798653281558819E-4	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999167709456306	WITHOUT_CLASSIFICATION	8.322905436938035E-5	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999001488235577	WITHOUT_CLASSIFICATION	9.985117644224561E-5	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9999162265707571	WITHOUT_CLASSIFICATION	8.377342924291548E-5	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.8733026183290028	WITHOUT_CLASSIFICATION	0.12669738167099717	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999854836448663	WITHOUT_CLASSIFICATION	1.4516355133695352E-5	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999855209531056	WITHOUT_CLASSIFICATION	1.4479046894474611E-5	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999347657240872	WITHOUT_CLASSIFICATION	6.523427591273135E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999952739176997	WITHOUT_CLASSIFICATION	4.726082300309215E-5	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9981682351573201	WITHOUT_CLASSIFICATION	0.0018317648426798474	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999928234860072	WITHOUT_CLASSIFICATION	7.176513992849781E-6	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9902809351254126	WITHOUT_CLASSIFICATION	0.009719064874587426	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9996989156180008	WITHOUT_CLASSIFICATION	3.01084381999165E-4	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9997026736098987	WITHOUT_CLASSIFICATION	2.9732639010135426E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9997033331940434	WITHOUT_CLASSIFICATION	2.966668059566608E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999952739176997	WITHOUT_CLASSIFICATION	4.726082300309215E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999119590616047	WITHOUT_CLASSIFICATION	8.804093839538198E-5	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999820470619534	WITHOUT_CLASSIFICATION	1.7952938046612937E-5	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9979073208033697	WITHOUT_CLASSIFICATION	0.002092679196630317	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999060854243751	WITHOUT_CLASSIFICATION	9.391457562499176E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999873519732046	WITHOUT_CLASSIFICATION	1.2648026795408017E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9996200201110086	WITHOUT_CLASSIFICATION	3.799798889914467E-4	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9796104794035507	WITHOUT_CLASSIFICATION	0.020389520596449297	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999873519732046	WITHOUT_CLASSIFICATION	1.2648026795408017E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999867971005301	WITHOUT_CLASSIFICATION	1.3202899469805704E-5	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998408914827774	WITHOUT_CLASSIFICATION	1.5910851722253207E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998866509111235	WITHOUT_CLASSIFICATION	1.1334908887661873E-4	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997876878903968	WITHOUT_CLASSIFICATION	2.1231210960317371E-4	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999596958949593	WITHOUT_CLASSIFICATION	4.0304105040745266E-5	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.999849007062944	WITHOUT_CLASSIFICATION	1.5099293705609517E-4	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999915926484093	WITHOUT_CLASSIFICATION	8.4073515907016E-5	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999060854243751	WITHOUT_CLASSIFICATION	9.391457562499176E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9996200201110086	WITHOUT_CLASSIFICATION	3.799798889914467E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999873519732046	WITHOUT_CLASSIFICATION	1.2648026795408017E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999952739176997	WITHOUT_CLASSIFICATION	4.726082300309215E-5	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999712159122112	WITHOUT_CLASSIFICATION	2.8784087788856707E-5	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999234793056603	WITHOUT_CLASSIFICATION	7.652069433965689E-5	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999942977934781	WITHOUT_CLASSIFICATION	5.702206521849494E-6	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950937276757	WITHOUT_CLASSIFICATION	4.9062723242770305E-6	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999376398222944	WITHOUT_CLASSIFICATION	6.236017770555217E-5	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999316946176969	WITHOUT_CLASSIFICATION	6.830538230309244E-5	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9998331798232762	WITHOUT_CLASSIFICATION	1.6682017672379806E-4	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9933739473795931	WITHOUT_CLASSIFICATION	0.0066260526204069085	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204832960205	WITHOUT_CLASSIFICATION	7.951670397952152E-5	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9992356407870561	WITHOUT_CLASSIFICATION	7.643592129440417E-4	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.999885369432671	WITHOUT_CLASSIFICATION	1.1463056732891768E-4	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999047880856263	WITHOUT_CLASSIFICATION	9.521191437368185E-5	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999304821060929	WITHOUT_CLASSIFICATION	6.951789390715768E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204832960205	WITHOUT_CLASSIFICATION	7.951670397952152E-5	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999926160860519	WITHOUT_CLASSIFICATION	7.383913948100587E-5	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999853025163686	WITHOUT_CLASSIFICATION	1.469748363132914E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999950845958764	WITHOUT_CLASSIFICATION	4.915404123718651E-6	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999251856383561	WITHOUT_CLASSIFICATION	7.481436164389039E-5	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999548015158601	WITHOUT_CLASSIFICATION	4.519848413988956E-5	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204832960205	WITHOUT_CLASSIFICATION	7.951670397952152E-5	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9933128736038542	WITHOUT_CLASSIFICATION	0.006687126396145751	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999873519732046	WITHOUT_CLASSIFICATION	1.2648026795408017E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999873519732046	WITHOUT_CLASSIFICATION	1.2648026795408017E-4	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.9999904675401196	WITHOUT_CLASSIFICATION	9.532459880404136E-6	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999341741930662	WITHOUT_CLASSIFICATION	6.582580693385126E-5	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204832960205	WITHOUT_CLASSIFICATION	7.951670397952152E-5	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999989644414245	WITHOUT_CLASSIFICATION	1.0355585755004962E-5	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9996173183138795	WITHOUT_CLASSIFICATION	3.8268168612046774E-4	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9997660067465552	WITHOUT_CLASSIFICATION	2.3399325344488085E-4	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999377310465812	WITHOUT_CLASSIFICATION	6.226895341873575E-5	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999296411049425	WITHOUT_CLASSIFICATION	7.035889505743462E-5	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999965640956352	WITHOUT_CLASSIFICATION	3.435904364802744E-6	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.999816577540644	WITHOUT_CLASSIFICATION	1.8342245935593917E-4	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999230208176813	WITHOUT_CLASSIFICATION	7.697918231864538E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999936737557088	WITHOUT_CLASSIFICATION	6.326244291115449E-6	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999941659589804	WITHOUT_CLASSIFICATION	5.8340410195849595E-6	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9998403909472654	WITHOUT_CLASSIFICATION	1.596090527345959E-4	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999607947818635	WITHOUT_CLASSIFICATION	3.9205218136419594E-5	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999308533508611	WITHOUT_CLASSIFICATION	6.914664913901726E-5	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999823289676261	WITHOUT_CLASSIFICATION	1.7671032373845592E-5	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999819690432514	WITHOUT_CLASSIFICATION	1.8030956748612706E-5	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999612196212949	WITHOUT_CLASSIFICATION	3.8780378705112095E-5	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999253894784027	WITHOUT_CLASSIFICATION	7.461052159727407E-5	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999901175952619	WITHOUT_CLASSIFICATION	9.882404738106603E-5	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997460282626375	WITHOUT_CLASSIFICATION	2.539717373625583E-4	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9996844951051389	WITHOUT_CLASSIFICATION	3.155048948611304E-4	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9994518235011862	WITHOUT_CLASSIFICATION	5.481764988137594E-4	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995114400474598	WITHOUT_CLASSIFICATION	4.885599525401289E-4	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9978212615450043	WITHOUT_CLASSIFICATION	0.0021787384549957437	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999516264826263	WITHOUT_CLASSIFICATION	4.837351737369207E-4	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996749957162242	WITHOUT_CLASSIFICATION	3.250042837757256E-4	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9995508512170446	WITHOUT_CLASSIFICATION	4.491487829554506E-4	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999256042919035	WITHOUT_CLASSIFICATION	7.439570809662168E-5	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999516264826263	WITHOUT_CLASSIFICATION	4.837351737369207E-4	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998496653509785	WITHOUT_CLASSIFICATION	1.5033464902153255E-4	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996384396158643	WITHOUT_CLASSIFICATION	3.615603841356806E-4	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999372632318893	WITHOUT_CLASSIFICATION	6.273676811079207E-5	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999563772210539	WITHOUT_CLASSIFICATION	4.362277894610963E-5	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9997582659037387	WITHOUT_CLASSIFICATION	2.417340962613035E-4	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999811781843985	WITHOUT_CLASSIFICATION	1.8821815601611047E-5	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9999234520810035	WITHOUT_CLASSIFICATION	7.654791899646475E-5	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999557159241961	WITHOUT_CLASSIFICATION	4.4284075803913715E-5	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999557159241961	WITHOUT_CLASSIFICATION	4.4284075803913715E-5	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.99997910782345	WITHOUT_CLASSIFICATION	2.0892176550041123E-5	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9998680991465694	WITHOUT_CLASSIFICATION	1.319008534306311E-4	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999900535605016	WITHOUT_CLASSIFICATION	9.946439498394617E-5	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999529579439753	WITHOUT_CLASSIFICATION	4.7042056024643144E-5	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9979020123755988	WITHOUT_CLASSIFICATION	0.0020979876244011024	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999366460038117	WITHOUT_CLASSIFICATION	6.335399618829493E-5	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999931776811036	WITHOUT_CLASSIFICATION	6.822318896344204E-6	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999763080349308	WITHOUT_CLASSIFICATION	2.3691965069244944E-5	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9996806660939375	WITHOUT_CLASSIFICATION	3.193339060625557E-4	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999969521069844	WITHOUT_CLASSIFICATION	3.047893015640034E-6	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999880811172639	WITHOUT_CLASSIFICATION	1.1918882736129051E-5	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.99994246455977	WITHOUT_CLASSIFICATION	5.7535440230062166E-5	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999853739665007	WITHOUT_CLASSIFICATION	1.4626033499398966E-5	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9983394421773635	WITHOUT_CLASSIFICATION	0.0016605578226365064	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999599630942391	WITHOUT_CLASSIFICATION	4.0036905761039774E-5	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9994741113335301	WITHOUT_CLASSIFICATION	5.258886664698713E-4	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9992075027556513	WITHOUT_CLASSIFICATION	7.924972443486907E-4	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9987849356061643	WITHOUT_CLASSIFICATION	0.0012150643938356501	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999982626217534	WITHOUT_CLASSIFICATION	1.7373782466058155E-5	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998125870342088	WITHOUT_CLASSIFICATION	1.8741296579123917E-4	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9998715047903958	WITHOUT_CLASSIFICATION	1.2849520960421195E-4	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999930878018808	WITHOUT_CLASSIFICATION	6.912198119198517E-5	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999201229120421	WITHOUT_CLASSIFICATION	7.987708795787789E-5	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999612413037967	WITHOUT_CLASSIFICATION	3.875869620326242E-5	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999351573497056	WITHOUT_CLASSIFICATION	6.484265029432218E-5	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9995984597751979	WITHOUT_CLASSIFICATION	4.015402248021397E-4	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9992009515230944	WITHOUT_CLASSIFICATION	7.990484769055999E-4	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999420679979359	WITHOUT_CLASSIFICATION	5.793200206409744E-4	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9781142509962286	WITHOUT_CLASSIFICATION	0.02188574900377144	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9988912973368727	WITHOUT_CLASSIFICATION	0.0011087026631273352	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999569687490644	WITHOUT_CLASSIFICATION	4.303125093556447E-5	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.9999754008972668	WITHOUT_CLASSIFICATION	2.459910273323071E-5	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999790688417083	WITHOUT_CLASSIFICATION	2.0931158291714084E-5	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.999991575425932	WITHOUT_CLASSIFICATION	8.424574068112572E-6	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999505011628533	WITHOUT_CLASSIFICATION	4.9498837146625695E-5	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.9998958873654411	WITHOUT_CLASSIFICATION	1.041126345589217E-4	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9990602758873174	WITHOUT_CLASSIFICATION	9.397241126826102E-4	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999892425869364	WITHOUT_CLASSIFICATION	1.075741306346942E-5	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8264895298836122	WITHOUT_CLASSIFICATION	0.1735104701163878	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999875819342022	WITHOUT_CLASSIFICATION	1.24180657976847E-5	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999312820539753	WITHOUT_CLASSIFICATION	6.871794602471378E-5	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999949837063536	WITHOUT_CLASSIFICATION	5.0162936463935096E-5	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999949837063536	WITHOUT_CLASSIFICATION	5.0162936463935096E-5	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9998005732550559	WITHOUT_CLASSIFICATION	1.9942674494416362E-4	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9997968487892874	WITHOUT_CLASSIFICATION	2.0315121071260976E-4	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999851587067213	WITHOUT_CLASSIFICATION	1.4841293278645598E-5	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999911409431828	WITHOUT_CLASSIFICATION	8.859056817215662E-6	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999516206942868	WITHOUT_CLASSIFICATION	4.837930571315413E-5	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999579223753247	WITHOUT_CLASSIFICATION	4.207762467524911E-5	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999516931926594	WITHOUT_CLASSIFICATION	4.830680734063427E-5	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999975359880622	WITHOUT_CLASSIFICATION	2.464011937794367E-6	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999993485872773	WITHOUT_CLASSIFICATION	6.514127225911233E-7	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999802062166395	WITHOUT_CLASSIFICATION	1.9793783360477853E-5	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999957525356287	WITHOUT_CLASSIFICATION	4.247464371298437E-5	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999950420391953	WITHOUT_CLASSIFICATION	4.957960804678995E-6	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999010962077688	WITHOUT_CLASSIFICATION	9.890379223122211E-5	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999872803770976	WITHOUT_CLASSIFICATION	1.2719622902393422E-4	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999555984352723	WITHOUT_CLASSIFICATION	4.4401564727794276E-5	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999682977686134	WITHOUT_CLASSIFICATION	3.170223138671294E-5	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9995353665535108	WITHOUT_CLASSIFICATION	4.646334464891266E-4	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999959633845827	WITHOUT_CLASSIFICATION	4.036615417221846E-6	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9998645745675515	WITHOUT_CLASSIFICATION	1.354254324485389E-4	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9992041516470133	WITHOUT_CLASSIFICATION	7.958483529868599E-4	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.9998955557936765	WITHOUT_CLASSIFICATION	1.0444420632352355E-4	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999163153187205	WITHOUT_CLASSIFICATION	8.368468127953319E-5	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9992041516470133	WITHOUT_CLASSIFICATION	7.958483529868599E-4	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999726561524707	WITHOUT_CLASSIFICATION	2.73438475292131E-5	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999369018974144	WITHOUT_CLASSIFICATION	6.309810258569531E-5	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999690507504476	WITHOUT_CLASSIFICATION	3.09492495524261E-5	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998726327403518	WITHOUT_CLASSIFICATION	1.2736725964820474E-4	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9999176090585669	WITHOUT_CLASSIFICATION	8.239094143318755E-5	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.999994800597592	WITHOUT_CLASSIFICATION	5.199402408009138E-6	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998716873069698	WITHOUT_CLASSIFICATION	1.2831269303009848E-4	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999410663271195	WITHOUT_CLASSIFICATION	5.8933672880390485E-5	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998957165567955	WITHOUT_CLASSIFICATION	1.0428344320444975E-4	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998726758064963	WITHOUT_CLASSIFICATION	1.2732419350365172E-4	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999190454598864	WITHOUT_CLASSIFICATION	8.09545401135462E-5	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999696120551789	WITHOUT_CLASSIFICATION	3.0387944821178037E-5	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999872127967872	WITHOUT_CLASSIFICATION	1.278720321293626E-5	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999932352830453	WITHOUT_CLASSIFICATION	6.764716954764658E-6	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9995797050447152	WITHOUT_CLASSIFICATION	4.2029495528484985E-4	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999602960647628	WITHOUT_CLASSIFICATION	3.9703935237105474E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999168697412572	WITHOUT_CLASSIFICATION	8.313025874274129E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999168697412572	WITHOUT_CLASSIFICATION	8.313025874274129E-5	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9992897192781002	WITHOUT_CLASSIFICATION	7.102807218998439E-4	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9999249224584095	WITHOUT_CLASSIFICATION	7.507754159045589E-5	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9999303113958956	WITHOUT_CLASSIFICATION	6.968860410443313E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9996996601764668	WITHOUT_CLASSIFICATION	3.003398235331608E-4	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9953320553240483	WITHOUT_CLASSIFICATION	0.004667944675951654	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9994260804487186	WITHOUT_CLASSIFICATION	5.739195512813422E-4	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999624355238186	WITHOUT_CLASSIFICATION	3.756447618149806E-5	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9999193468456891	WITHOUT_CLASSIFICATION	8.06531543109607E-5	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.997899214504994	WITHOUT_CLASSIFICATION	0.0021007854950060773	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999678998933084	WITHOUT_CLASSIFICATION	3.2100106691601925E-5	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999805220052	WITHOUT_CLASSIFICATION	1.9477994718294155E-8	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999624827698134	WITHOUT_CLASSIFICATION	3.751723018665097E-5	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9994372463935777	WITHOUT_CLASSIFICATION	5.627536064223041E-4	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999014245484609	WITHOUT_CLASSIFICATION	9.857545153906835E-5	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999612196212949	WITHOUT_CLASSIFICATION	3.8780378705112095E-5	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9995969346532654	WITHOUT_CLASSIFICATION	4.0306534673462704E-4	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999798099026456	WITHOUT_CLASSIFICATION	2.019009735451927E-5	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9998567466612199	WITHOUT_CLASSIFICATION	1.4325333878004566E-4	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999722669020503	WITHOUT_CLASSIFICATION	2.773309794966E-5	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998145533968803	WITHOUT_CLASSIFICATION	1.8544660311961157E-4	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.999989765514736	WITHOUT_CLASSIFICATION	1.0234485264017409E-5	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.994296358310829	WITHOUT_CLASSIFICATION	0.005703641689170953	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999554004230746	WITHOUT_CLASSIFICATION	4.459957692538281E-5	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999789985449299	WITHOUT_CLASSIFICATION	2.1001455070111206E-5	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999791230918955	WITHOUT_CLASSIFICATION	2.087690810448979E-5	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999906505283462	WITHOUT_CLASSIFICATION	9.34947165375112E-6	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999633796951838	WITHOUT_CLASSIFICATION	3.662030481610562E-5	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9982688864369811	WITHOUT_CLASSIFICATION	0.001731113563018914	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9994651153058273	WITHOUT_CLASSIFICATION	5.34884694172807E-4	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999902658883104	WITHOUT_CLASSIFICATION	9.734111689599786E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999483840444651	WITHOUT_CLASSIFICATION	5.1615955534799315E-5	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999402398805299	WITHOUT_CLASSIFICATION	5.976011946998853E-5	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999878632794339	WITHOUT_CLASSIFICATION	1.2136720566092525E-5	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999947434267008	WITHOUT_CLASSIFICATION	5.256573299187952E-6	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999874194907624	WITHOUT_CLASSIFICATION	1.2580509237622471E-5	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999870762438076	WITHOUT_CLASSIFICATION	1.2923756192453327E-5	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999907134917448	WITHOUT_CLASSIFICATION	9.286508255232828E-6	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999531845693815	WITHOUT_CLASSIFICATION	4.681543061843992E-5	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9998722328742842	WITHOUT_CLASSIFICATION	1.277671257158149E-4	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9999968829811076	WITHOUT_CLASSIFICATION	3.1170188924156877E-6	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9990441894210805	WITHOUT_CLASSIFICATION	9.558105789194246E-4	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999934660383752	WITHOUT_CLASSIFICATION	6.533961624738175E-6	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9979868144429483	WITHOUT_CLASSIFICATION	0.0020131855570517205	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999445630169784	WITHOUT_CLASSIFICATION	5.543698302151825E-5	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999106973369141	WITHOUT_CLASSIFICATION	8.93026630859771E-5	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999792052360149	WITHOUT_CLASSIFICATION	2.079476398510204E-4	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998944975909685	WITHOUT_CLASSIFICATION	1.055024090315031E-4	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999244860370126	WITHOUT_CLASSIFICATION	7.551396298740785E-5	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999943074007774	WITHOUT_CLASSIFICATION	5.692599222590037E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999936737557088	WITHOUT_CLASSIFICATION	6.326244291115449E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999936737557088	WITHOUT_CLASSIFICATION	6.326244291115449E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999879975795448	WITHOUT_CLASSIFICATION	1.2002420455108655E-5	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9984398396541165	WITHOUT_CLASSIFICATION	0.0015601603458833763	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9997151199897972	WITHOUT_CLASSIFICATION	2.8488001020275086E-4	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999085274837662	WITHOUT_CLASSIFICATION	9.147251623366284E-5	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9997151199897972	WITHOUT_CLASSIFICATION	2.8488001020275086E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9996983095834019	WITHOUT_CLASSIFICATION	3.016904165980789E-4	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999691032466608	WITHOUT_CLASSIFICATION	3.089675333922056E-5	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.9998973212180496	WITHOUT_CLASSIFICATION	1.0267878195041258E-4	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999907910125273	WITHOUT_CLASSIFICATION	9.208987472688702E-6	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999069532600876	WITHOUT_CLASSIFICATION	9.304673991237504E-5	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998535512123463	WITHOUT_CLASSIFICATION	1.4644878765380172E-4	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999598512055812	WITHOUT_CLASSIFICATION	4.0148794418776946E-5	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.998340180281274	WITHOUT_CLASSIFICATION	0.001659819718725985	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999961579464351	WITHOUT_CLASSIFICATION	3.842053564847747E-6	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999976698605372	WITHOUT_CLASSIFICATION	2.3301394628292873E-6	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.999967857577675	WITHOUT_CLASSIFICATION	3.214242232505831E-5	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998085463571709	WITHOUT_CLASSIFICATION	1.9145364282907874E-4	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9997928245104871	WITHOUT_CLASSIFICATION	2.0717548951287087E-4	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9350418444753413	WITHOUT_CLASSIFICATION	0.06495815552465865	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999940614726752	WITHOUT_CLASSIFICATION	5.938527324782498E-6	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9996998179556602	WITHOUT_CLASSIFICATION	3.0018204433982437E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999974123727854	WITHOUT_CLASSIFICATION	2.587627214612916E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999974123727854	WITHOUT_CLASSIFICATION	2.587627214612916E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999200069172649	WITHOUT_CLASSIFICATION	7.999308273516189E-5	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.999916479072241	WITHOUT_CLASSIFICATION	8.35209277590586E-5	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999829762873249	WITHOUT_CLASSIFICATION	1.7023712675055407E-5	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9995550281508706	WITHOUT_CLASSIFICATION	4.449718491294104E-4	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9998932810925433	WITHOUT_CLASSIFICATION	1.0671890745673812E-4	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999363732618778	WITHOUT_CLASSIFICATION	6.362673812219917E-4	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9970420482734029	WITHOUT_CLASSIFICATION	0.002957951726597124	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999953526600452	WITHOUT_CLASSIFICATION	4.6473399547958E-5	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.99998488680374	WITHOUT_CLASSIFICATION	1.5113196260141145E-5	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999646747426122	WITHOUT_CLASSIFICATION	3.5325257387856686E-5	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998934005754266	WITHOUT_CLASSIFICATION	1.065994245734382E-4	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999890521456328	WITHOUT_CLASSIFICATION	1.0947854367171476E-5	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999271980356254	WITHOUT_CLASSIFICATION	7.280196437461492E-5	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999371131931896	WITHOUT_CLASSIFICATION	6.288680681041506E-5	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9997714482974152	WITHOUT_CLASSIFICATION	2.2855170258490948E-4	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999150942698518	WITHOUT_CLASSIFICATION	8.490573014818902E-5	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999088746984055	WITHOUT_CLASSIFICATION	9.112530159451299E-5	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9997017069692133	WITHOUT_CLASSIFICATION	2.9829303078666156E-4	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9999560949164178	WITHOUT_CLASSIFICATION	4.390508358222247E-5	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.999976498807628	WITHOUT_CLASSIFICATION	2.3501192372078778E-5	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.999973946626067	WITHOUT_CLASSIFICATION	2.605337393311694E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999557617626087	WITHOUT_CLASSIFICATION	4.4238237391410924E-5	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999790574187967	WITHOUT_CLASSIFICATION	2.094258120329668E-5	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999849827899314	WITHOUT_CLASSIFICATION	1.501721006845086E-5	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9998794083388592	WITHOUT_CLASSIFICATION	1.2059166114076914E-4	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999467503590054	WITHOUT_CLASSIFICATION	5.324964099459806E-5	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999089449761424	WITHOUT_CLASSIFICATION	9.105502385772037E-5	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9991927248883433	WITHOUT_CLASSIFICATION	8.072751116567315E-4	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999922049571953	WITHOUT_CLASSIFICATION	7.795042804684572E-6	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9994003795156848	WITHOUT_CLASSIFICATION	5.996204843151283E-4	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999752960365547	WITHOUT_CLASSIFICATION	2.470396344529576E-5	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999972291901073	WITHOUT_CLASSIFICATION	2.7708098927321512E-6	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9995687179637675	WITHOUT_CLASSIFICATION	4.3128203623244994E-4	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999196998318642	WITHOUT_CLASSIFICATION	8.030016813576604E-5	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999864933546941	WITHOUT_CLASSIFICATION	1.3506645305808701E-5	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999926468843854	WITHOUT_CLASSIFICATION	7.353115614609304E-6	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999858274038772	WITHOUT_CLASSIFICATION	1.4172596122821556E-5	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999736217019056	WITHOUT_CLASSIFICATION	2.6378298094372978E-5	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999465349651396	WITHOUT_CLASSIFICATION	5.346503486042677E-5	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9981618039185213	WITHOUT_CLASSIFICATION	0.0018381960814788127	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9997525794914857	WITHOUT_CLASSIFICATION	2.4742050851439307E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998768879155026	WITHOUT_CLASSIFICATION	1.2311208449735037E-4	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9997422333212249	WITHOUT_CLASSIFICATION	2.5776667877518454E-4	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.970564920366753	WITHOUT_CLASSIFICATION	0.029435079633246944	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9993926812510373	WITHOUT_CLASSIFICATION	6.07318748962713E-4	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9919531975522927	WITHOUT_CLASSIFICATION	0.008046802447707311	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9739113296588873	WITHOUT_CLASSIFICATION	0.02608867034111266	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999990110879285	WITHOUT_CLASSIFICATION	9.889120714774475E-7	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998597559251604	WITHOUT_CLASSIFICATION	1.402440748395573E-4	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9998628473698462	WITHOUT_CLASSIFICATION	1.3715263015373044E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998768879155026	WITHOUT_CLASSIFICATION	1.2311208449735037E-4	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999828651013641	WITHOUT_CLASSIFICATION	1.7134898635857502E-5	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9998718526110199	WITHOUT_CLASSIFICATION	1.281473889800521E-4	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999776904453644	WITHOUT_CLASSIFICATION	2.2309554635617262E-5	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9999601886496737	WITHOUT_CLASSIFICATION	3.9811350326195884E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999119590616047	WITHOUT_CLASSIFICATION	8.804093839538198E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999119590616047	WITHOUT_CLASSIFICATION	8.804093839538198E-5	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999974039349601	WITHOUT_CLASSIFICATION	2.59606503989608E-5	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9996895583940995	WITHOUT_CLASSIFICATION	3.104416059005192E-4	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999667988739266	WITHOUT_CLASSIFICATION	3.3201126073375416E-5	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9995572975832974	WITHOUT_CLASSIFICATION	4.427024167025951E-4	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9998050044624107	WITHOUT_CLASSIFICATION	1.94995537589261E-4	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9997453508917563	WITHOUT_CLASSIFICATION	2.5464910824364584E-4	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999564480988368	WITHOUT_CLASSIFICATION	4.355190116327397E-5	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.999992992098686	WITHOUT_CLASSIFICATION	7.007901313965633E-6	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9994928163600207	WITHOUT_CLASSIFICATION	5.071836399792516E-4	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998865169970694	WITHOUT_CLASSIFICATION	1.134830029304602E-4	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999221061165676	WITHOUT_CLASSIFICATION	7.789388343239063E-5	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.9998185266256556	WITHOUT_CLASSIFICATION	1.8147337434437129E-4	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999267059640577	WITHOUT_CLASSIFICATION	7.329403594221906E-5	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9998827547830241	WITHOUT_CLASSIFICATION	1.172452169758366E-4	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9943532425264053	WITHOUT_CLASSIFICATION	0.005646757473594653	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998503366306882	WITHOUT_CLASSIFICATION	1.496633693117871E-4	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999385426991021	WITHOUT_CLASSIFICATION	6.145730089791282E-4	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9917814407549062	WITHOUT_CLASSIFICATION	0.008218559245093843	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999052913627673	WITHOUT_CLASSIFICATION	9.47086372326992E-5	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999808437168773	WITHOUT_CLASSIFICATION	1.915628312274676E-5	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9996985182787864	WITHOUT_CLASSIFICATION	3.014817212136154E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999561087703758	WITHOUT_CLASSIFICATION	4.3891229624235916E-5	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999988471261588	WITHOUT_CLASSIFICATION	1.152873841182783E-6	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9996849339412764	WITHOUT_CLASSIFICATION	3.150660587235908E-4	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999983242170987	WITHOUT_CLASSIFICATION	1.6757829013057403E-5	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999903238348027	WITHOUT_CLASSIFICATION	9.676165197292492E-5	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999748340545116	WITHOUT_CLASSIFICATION	2.5165945488427833E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999213094186921	WITHOUT_CLASSIFICATION	7.869058130788648E-5	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999825909553035	WITHOUT_CLASSIFICATION	1.7409044696544584E-5	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9998132051313153	WITHOUT_CLASSIFICATION	1.8679486868462461E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999737771782216	WITHOUT_CLASSIFICATION	2.6222821778477705E-5	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999543022861092	WITHOUT_CLASSIFICATION	4.569771389078367E-5	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999385948631786	WITHOUT_CLASSIFICATION	6.140513682137929E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999737771782216	WITHOUT_CLASSIFICATION	2.6222821778477705E-5	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9993927882503665	WITHOUT_CLASSIFICATION	6.072117496335805E-4	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9998132051313153	WITHOUT_CLASSIFICATION	1.8679486868462461E-4	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999576929451525	WITHOUT_CLASSIFICATION	4.2307054847473466E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999737771782216	WITHOUT_CLASSIFICATION	2.6222821778477705E-5	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998272874376933	WITHOUT_CLASSIFICATION	1.7271256230660966E-4	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999927517578613	WITHOUT_CLASSIFICATION	7.248242138775313E-6	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998934005754266	WITHOUT_CLASSIFICATION	1.065994245734382E-4	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999176969871865	WITHOUT_CLASSIFICATION	8.230301281345264E-5	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999816577540644	WITHOUT_CLASSIFICATION	1.8342245935593917E-4	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9998752316547043	WITHOUT_CLASSIFICATION	1.2476834529572448E-4	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998867315811906	WITHOUT_CLASSIFICATION	1.1326841880944788E-4	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999863462434453	WITHOUT_CLASSIFICATION	1.3653756554812841E-5	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9999614871563234	WITHOUT_CLASSIFICATION	3.8512843676629494E-5	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999794271526655	WITHOUT_CLASSIFICATION	2.057284733443198E-5	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999770532095805	WITHOUT_CLASSIFICATION	2.2946790419440203E-5	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999168697412572	WITHOUT_CLASSIFICATION	8.313025874274129E-5	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999530664194456	WITHOUT_CLASSIFICATION	4.693358055443771E-5	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999274953549726	WITHOUT_CLASSIFICATION	7.250464502749899E-5	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.999929229029898	WITHOUT_CLASSIFICATION	7.077097010197708E-5	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999591030531488	WITHOUT_CLASSIFICATION	4.089694685116029E-5	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9998101610938882	WITHOUT_CLASSIFICATION	1.8983890611176375E-4	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999855854939275	WITHOUT_CLASSIFICATION	1.4414506072553787E-5	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999326510970387	WITHOUT_CLASSIFICATION	6.734890296135801E-5	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999951498185448	WITHOUT_CLASSIFICATION	4.8501814551954684E-5	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.99994978678142	WITHOUT_CLASSIFICATION	5.0213218579927936E-5	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999655758134113	WITHOUT_CLASSIFICATION	3.44241865886911E-5	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999871406839767	WITHOUT_CLASSIFICATION	1.285931602328401E-4	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999168697412572	WITHOUT_CLASSIFICATION	8.313025874274129E-5	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999925705818551	WITHOUT_CLASSIFICATION	7.429418144843276E-6	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999828153612289	WITHOUT_CLASSIFICATION	1.7184638771069164E-5	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998981774580322	WITHOUT_CLASSIFICATION	1.0182254196780108E-4	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999561627154499	WITHOUT_CLASSIFICATION	4.383728455009931E-4	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9999271360561675	WITHOUT_CLASSIFICATION	7.286394383251064E-5	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9999344836397316	WITHOUT_CLASSIFICATION	6.551636026836382E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998836569361245	WITHOUT_CLASSIFICATION	1.1634306387548488E-4	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998000844399388	WITHOUT_CLASSIFICATION	1.9991556006107952E-4	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9987427889543489	WITHOUT_CLASSIFICATION	0.0012572110456511377	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999707050507203	WITHOUT_CLASSIFICATION	2.929494927971884E-5	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999442302908008	WITHOUT_CLASSIFICATION	5.5769709199196576E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999495394438087	WITHOUT_CLASSIFICATION	5.0460556191237755E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999495394438087	WITHOUT_CLASSIFICATION	5.0460556191237755E-5	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999993492451045	WITHOUT_CLASSIFICATION	6.507548954735778E-7	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998601374521058	WITHOUT_CLASSIFICATION	1.398625478943128E-4	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999472292500807	WITHOUT_CLASSIFICATION	5.277074991938593E-5	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999422944221468	WITHOUT_CLASSIFICATION	5.7705577853266556E-5	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9998338145902919	WITHOUT_CLASSIFICATION	1.6618540970819858E-4	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9994457536348388	WITHOUT_CLASSIFICATION	5.542463651611923E-4	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999925654846837	WITHOUT_CLASSIFICATION	7.43451531632815E-6	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999819053642885	WITHOUT_CLASSIFICATION	1.809463571150709E-5	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999277208754278	WITHOUT_CLASSIFICATION	7.227912457215042E-5	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999962474943918	WITHOUT_CLASSIFICATION	3.752505608190064E-6	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999299545201051	WITHOUT_CLASSIFICATION	7.004547989481506E-5	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999995742211674	WITHOUT_CLASSIFICATION	4.2577883261304326E-7	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9987655042082954	WITHOUT_CLASSIFICATION	0.0012344957917047193	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999495394438087	WITHOUT_CLASSIFICATION	5.0460556191237755E-5	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999071041618741	WITHOUT_CLASSIFICATION	9.289583812588965E-5	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999025493041176	WITHOUT_CLASSIFICATION	9.745069588237792E-5	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9993527772729013	WITHOUT_CLASSIFICATION	6.472227270987403E-4	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9996331329942131	WITHOUT_CLASSIFICATION	3.668670057869371E-4	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998928520637039	WITHOUT_CLASSIFICATION	1.0714793629609935E-4	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998006034529263	WITHOUT_CLASSIFICATION	1.993965470736827E-4	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999953179471788	WITHOUT_CLASSIFICATION	4.682052821236416E-6	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999841676025406	WITHOUT_CLASSIFICATION	1.5832397459401258E-5	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999017863308818	WITHOUT_CLASSIFICATION	9.821366911830923E-5	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.999877463818949	WITHOUT_CLASSIFICATION	1.2253618105101608E-4	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999694458672591	WITHOUT_CLASSIFICATION	3.055413274091527E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998836569361245	WITHOUT_CLASSIFICATION	1.1634306387548488E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999495394438087	WITHOUT_CLASSIFICATION	5.0460556191237755E-5	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9996946151289164	WITHOUT_CLASSIFICATION	3.0538487108350477E-4	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999891349204518	WITHOUT_CLASSIFICATION	1.086507954823328E-5	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999908754136756	WITHOUT_CLASSIFICATION	9.124586324309534E-6	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9998718644346966	WITHOUT_CLASSIFICATION	1.2813556530335898E-4	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999997572465495	WITHOUT_CLASSIFICATION	2.4275345049977293E-6	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999145907726689	WITHOUT_CLASSIFICATION	8.540922733109878E-4	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997552592918775	WITHOUT_CLASSIFICATION	2.447407081225361E-4	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999835865955012	WITHOUT_CLASSIFICATION	1.641340449869016E-5	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999773161744615	WITHOUT_CLASSIFICATION	2.2683825538511164E-5	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998376014691102	WITHOUT_CLASSIFICATION	1.6239853088995465E-4	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9997496422668576	WITHOUT_CLASSIFICATION	2.5035773314233215E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999922049571953	WITHOUT_CLASSIFICATION	7.795042804684572E-6	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999950310609755	WITHOUT_CLASSIFICATION	4.9689390244397694E-6	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9997360829926714	WITHOUT_CLASSIFICATION	2.639170073285932E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9996983095834019	WITHOUT_CLASSIFICATION	3.016904165980789E-4	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999507764978549	WITHOUT_CLASSIFICATION	4.9223502145044254E-5	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9997136806061425	WITHOUT_CLASSIFICATION	2.8631939385741754E-4	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9998875259398857	WITHOUT_CLASSIFICATION	1.1247406011422587E-4	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.9999971620250605	WITHOUT_CLASSIFICATION	2.8379749395459627E-6	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999903739936554	WITHOUT_CLASSIFICATION	9.626006344616963E-6	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999626066449386	WITHOUT_CLASSIFICATION	3.739335506142467E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999626066449386	WITHOUT_CLASSIFICATION	3.739335506142467E-5	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999968737698205	WITHOUT_CLASSIFICATION	3.126230179489837E-5	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999919832341658	WITHOUT_CLASSIFICATION	8.01676583420871E-6	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9996924123020989	WITHOUT_CLASSIFICATION	3.0758769790109803E-4	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999439813971814	WITHOUT_CLASSIFICATION	5.6018602818638585E-5	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999194611523533	WITHOUT_CLASSIFICATION	8.053884764668068E-5	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999556717111365	WITHOUT_CLASSIFICATION	4.4328288863453265E-5	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999406593779318	WITHOUT_CLASSIFICATION	5.934062206825899E-5	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9994191471523832	WITHOUT_CLASSIFICATION	5.808528476167544E-4	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9994191471523832	WITHOUT_CLASSIFICATION	5.808528476167544E-4	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998086188790426	WITHOUT_CLASSIFICATION	1.9138112095741858E-4	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999423748363362	WITHOUT_CLASSIFICATION	5.76251636637411E-5	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9997718547541927	WITHOUT_CLASSIFICATION	2.281452458073218E-4	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999317042321482	WITHOUT_CLASSIFICATION	6.829576785179873E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999317042321482	WITHOUT_CLASSIFICATION	6.829576785179873E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999317042321482	WITHOUT_CLASSIFICATION	6.829576785179873E-5	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999745096156356	WITHOUT_CLASSIFICATION	2.5490384364280016E-5	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999286034643516	WITHOUT_CLASSIFICATION	7.13965356484058E-5	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999952314117074	WITHOUT_CLASSIFICATION	4.768588292596066E-6	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999794785249019	WITHOUT_CLASSIFICATION	2.0521475098103255E-4	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999391651861363	WITHOUT_CLASSIFICATION	6.0834813863790476E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999495394438087	WITHOUT_CLASSIFICATION	5.0460556191237755E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999495394438087	WITHOUT_CLASSIFICATION	5.0460556191237755E-5	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.999980293810832	WITHOUT_CLASSIFICATION	1.9706189167981983E-5	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999871125894266	WITHOUT_CLASSIFICATION	1.2887410573367863E-5	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9624884418358373	WITHOUT_CLASSIFICATION	0.0375115581641627	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.999846122372956	WITHOUT_CLASSIFICATION	1.538776270439441E-4	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999749925877416	WITHOUT_CLASSIFICATION	2.5007412258459988E-5	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.9999027914778517	WITHOUT_CLASSIFICATION	9.720852214840498E-5	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999270793450776	WITHOUT_CLASSIFICATION	7.292065492241658E-5	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9978977832708216	WITHOUT_CLASSIFICATION	0.0021022167291784542	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999832977245243	WITHOUT_CLASSIFICATION	1.6702275475600068E-5	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999739019157854	WITHOUT_CLASSIFICATION	2.6098084214705515E-5	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999899498686684	WITHOUT_CLASSIFICATION	1.005013133171838E-5	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999780051475023	WITHOUT_CLASSIFICATION	2.1994852497704448E-5	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999341579346733	WITHOUT_CLASSIFICATION	6.584206532665931E-5	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999341579346733	WITHOUT_CLASSIFICATION	6.584206532665931E-5	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999341579346733	WITHOUT_CLASSIFICATION	6.584206532665931E-5	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999341579346733	WITHOUT_CLASSIFICATION	6.584206532665931E-5	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999341579346733	WITHOUT_CLASSIFICATION	6.584206532665931E-5	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998981331303046	WITHOUT_CLASSIFICATION	1.0186686969531455E-4	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998981331303046	WITHOUT_CLASSIFICATION	1.0186686969531455E-4	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998981331303046	WITHOUT_CLASSIFICATION	1.0186686969531455E-4	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998981331303046	WITHOUT_CLASSIFICATION	1.0186686969531455E-4	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999543437530395	WITHOUT_CLASSIFICATION	4.565624696064786E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999626066449386	WITHOUT_CLASSIFICATION	3.739335506142467E-5	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999892272437201	WITHOUT_CLASSIFICATION	1.0772756279885213E-5	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998981331303046	WITHOUT_CLASSIFICATION	1.0186686969531455E-4	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9993473411515975	WITHOUT_CLASSIFICATION	6.526588484024988E-4	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9997750318192692	WITHOUT_CLASSIFICATION	2.2496818073090507E-4	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999941750168561	WITHOUT_CLASSIFICATION	5.8249831438961304E-5	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999267643715288	WITHOUT_CLASSIFICATION	7.323562847109851E-5	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999746755158034	WITHOUT_CLASSIFICATION	2.5324484196624276E-5	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999848191703303	WITHOUT_CLASSIFICATION	1.5180829669744292E-5	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998783018512477	WITHOUT_CLASSIFICATION	1.2169814875230352E-4	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998941247897719	WITHOUT_CLASSIFICATION	1.0587521022809907E-4	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999306831765683	WITHOUT_CLASSIFICATION	6.931682343162372E-5	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9995989792992409	WITHOUT_CLASSIFICATION	4.0102070075911646E-4	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999422320143837	WITHOUT_CLASSIFICATION	5.7767985616222336E-5	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999891906957754	WITHOUT_CLASSIFICATION	1.0809304224551464E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999958114633428	WITHOUT_CLASSIFICATION	4.188536657181814E-6	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.9999635932639926	WITHOUT_CLASSIFICATION	3.6406736007358694E-5	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9246830197657168	WITHOUT_CLASSIFICATION	0.0753169802342832	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9992666388151907	WITHOUT_CLASSIFICATION	7.333611848091948E-4	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999882596991685	WITHOUT_CLASSIFICATION	1.1740300831639848E-5	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999587847979435	WITHOUT_CLASSIFICATION	4.121520205638133E-5	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999587847979435	WITHOUT_CLASSIFICATION	4.121520205638133E-5	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999521087721023	WITHOUT_CLASSIFICATION	4.789122789780436E-5	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999793001952078	WITHOUT_CLASSIFICATION	2.069980479224006E-5	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999481706951607	WITHOUT_CLASSIFICATION	5.182930483930219E-5	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999469271669665	WITHOUT_CLASSIFICATION	5.307283303341274E-5	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9998016985612261	WITHOUT_CLASSIFICATION	1.9830143877401502E-4	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999878546329142	WITHOUT_CLASSIFICATION	1.2145367085788102E-5	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999858826466576	WITHOUT_CLASSIFICATION	1.4117353342403888E-4	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999867651175611	WITHOUT_CLASSIFICATION	1.3234882438896707E-4	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999760558341494	WITHOUT_CLASSIFICATION	2.3944165850600834E-5	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999650462657481	WITHOUT_CLASSIFICATION	3.495373425179206E-5	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9996804497932622	WITHOUT_CLASSIFICATION	3.1955020673781354E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999922049571953	WITHOUT_CLASSIFICATION	7.795042804684572E-6	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999972929030461	WITHOUT_CLASSIFICATION	2.707096954027911E-6	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999501783896193	WITHOUT_CLASSIFICATION	4.982161038074217E-5	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999874995080136	WITHOUT_CLASSIFICATION	1.250049198633744E-5	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.999411484843453	WITHOUT_CLASSIFICATION	5.885151565469588E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999820815573852	WITHOUT_CLASSIFICATION	1.791844261478633E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999820815573852	WITHOUT_CLASSIFICATION	1.791844261478633E-5	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9997384861683583	WITHOUT_CLASSIFICATION	2.6151383164174527E-4	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9917248914029837	WITHOUT_CLASSIFICATION	0.008275108597016228	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9994677237095663	WITHOUT_CLASSIFICATION	5.322762904336624E-4	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9996559086755704	WITHOUT_CLASSIFICATION	3.440913244295579E-4	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9998166726699277	WITHOUT_CLASSIFICATION	1.8332733007241786E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9996757004773531	WITHOUT_CLASSIFICATION	3.242995226469806E-4	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999980078210054	WITHOUT_CLASSIFICATION	1.9921789946062652E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9986936630824017	WITHOUT_CLASSIFICATION	0.0013063369175982942	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9995655306828551	WITHOUT_CLASSIFICATION	4.3446931714484445E-4	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9998652773587724	WITHOUT_CLASSIFICATION	1.3472264122762833E-4	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999973305481417	WITHOUT_CLASSIFICATION	2.6694518582959146E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9986936630824017	WITHOUT_CLASSIFICATION	0.0013063369175982942	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9977273281115443	WITHOUT_CLASSIFICATION	0.002272671888455653	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998634127648495	WITHOUT_CLASSIFICATION	1.3658723515045672E-4	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999141418225133	WITHOUT_CLASSIFICATION	8.585817748674683E-5	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.9995566872075607	WITHOUT_CLASSIFICATION	4.433127924392627E-4	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9998358971426552	WITHOUT_CLASSIFICATION	1.6410285734480147E-4	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999995201516833	WITHOUT_CLASSIFICATION	4.798483167042362E-6	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999654257329539	WITHOUT_CLASSIFICATION	3.4574267046120404E-5	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999731647196703	WITHOUT_CLASSIFICATION	2.683528032955967E-5	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9998439555264094	WITHOUT_CLASSIFICATION	1.5604447359072115E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.997923046110115	WITHOUT_CLASSIFICATION	0.002076953889885089	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999339479810697	WITHOUT_CLASSIFICATION	6.605201893035041E-5	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9998593072961363	WITHOUT_CLASSIFICATION	1.4069270386364064E-4	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999429417983816	WITHOUT_CLASSIFICATION	5.705820161836049E-5	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999911587521593	WITHOUT_CLASSIFICATION	8.841247840706675E-6	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999554309416326	WITHOUT_CLASSIFICATION	4.456905836741797E-5	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999188902611734	WITHOUT_CLASSIFICATION	8.110973882655752E-5	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999349598582853	WITHOUT_CLASSIFICATION	6.504014171473463E-5	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9997126268668006	WITHOUT_CLASSIFICATION	2.873731331993843E-4	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9997126268668006	WITHOUT_CLASSIFICATION	2.873731331993843E-4	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999654257329539	WITHOUT_CLASSIFICATION	3.4574267046120404E-5	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9998471541389475	WITHOUT_CLASSIFICATION	1.5284586105257145E-4	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9996855437497516	WITHOUT_CLASSIFICATION	3.1445625024839683E-4	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.998951190751293	WITHOUT_CLASSIFICATION	0.001048809248706962	DEFECT
#2	WITHOUT_CLASSIFICATION	0.9999904807828668	WITHOUT_CLASSIFICATION	9.51921713309602E-6	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999859030416575	WITHOUT_CLASSIFICATION	1.4096958342492669E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999706613623406	WITHOUT_CLASSIFICATION	2.9338637659409656E-5	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999273172997575	WITHOUT_CLASSIFICATION	7.268270024253797E-5	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9989863721771673	WITHOUT_CLASSIFICATION	0.0010136278228325695	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999956889248816	WITHOUT_CLASSIFICATION	4.3110751184946705E-6	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999561705000333	WITHOUT_CLASSIFICATION	4.382949996667052E-5	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999912792930638	WITHOUT_CLASSIFICATION	8.720706936291576E-6	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9989790647889232	WITHOUT_CLASSIFICATION	0.0010209352110768202	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9997354085779175	WITHOUT_CLASSIFICATION	2.645914220824076E-4	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999980490085977	WITHOUT_CLASSIFICATION	1.950991402334173E-6	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999637941542203	WITHOUT_CLASSIFICATION	3.620584577972239E-5	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999845852205653	WITHOUT_CLASSIFICATION	1.541477943475755E-5	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999949946574068	WITHOUT_CLASSIFICATION	5.0053425931291285E-6	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999035371629025	WITHOUT_CLASSIFICATION	9.646283709754899E-5	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999833758605309	WITHOUT_CLASSIFICATION	1.66241394690722E-5	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999790789427282	WITHOUT_CLASSIFICATION	2.092105727180042E-5	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999780237442456	WITHOUT_CLASSIFICATION	2.1976255754359003E-5	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999952154899091	WITHOUT_CLASSIFICATION	4.784510090899208E-5	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999491867184992	WITHOUT_CLASSIFICATION	5.081328150076188E-5	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999945814524752	WITHOUT_CLASSIFICATION	5.4185475247732995E-6	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999976172703062	WITHOUT_CLASSIFICATION	2.3827296937228394E-6	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999350044295827	WITHOUT_CLASSIFICATION	6.499557041727827E-5	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999261933118152	WITHOUT_CLASSIFICATION	7.380668818481766E-5	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999753498241276	WITHOUT_CLASSIFICATION	2.465017587231707E-5	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999995608416429	WITHOUT_CLASSIFICATION	4.39158357099042E-6	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999688217820184	WITHOUT_CLASSIFICATION	3.1178217981606403E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998506194607875	WITHOUT_CLASSIFICATION	1.4938053921244565E-4	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999963795648321	WITHOUT_CLASSIFICATION	3.62043516788554E-5	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999851260699351	WITHOUT_CLASSIFICATION	1.4873930064857698E-5	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9997712407551979	WITHOUT_CLASSIFICATION	2.287592448021938E-4	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999990678333851	WITHOUT_CLASSIFICATION	9.321666148936171E-6	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9998955698258866	WITHOUT_CLASSIFICATION	1.0443017411340376E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997167763226208	WITHOUT_CLASSIFICATION	2.832236773792063E-4	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9997444576057112	WITHOUT_CLASSIFICATION	2.555423942888082E-4	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9999645226787812	WITHOUT_CLASSIFICATION	3.547732121882677E-5	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999168259287151	WITHOUT_CLASSIFICATION	8.317407128484166E-5	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.996124727878317	WITHOUT_CLASSIFICATION	0.0038752721216829974	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999611036759135	WITHOUT_CLASSIFICATION	3.889632408650137E-5	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.9994919245871887	WITHOUT_CLASSIFICATION	5.080754128113307E-4	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.5322270077983373	WITHOUT_CLASSIFICATION	0.4677729922016626	DEFECT
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999573961491593	WITHOUT_CLASSIFICATION	4.260385084066677E-5	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998511624944831	WITHOUT_CLASSIFICATION	1.4883750551686304E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998506194607875	WITHOUT_CLASSIFICATION	1.4938053921244565E-4	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998902976739037	WITHOUT_CLASSIFICATION	1.0970232609631758E-4	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9992720479300411	WITHOUT_CLASSIFICATION	7.279520699590063E-4	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9994533053771857	WITHOUT_CLASSIFICATION	5.466946228143134E-4	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999853449031989	WITHOUT_CLASSIFICATION	1.4655096801105288E-5	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999332201839761	WITHOUT_CLASSIFICATION	6.677981602384177E-5	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998102064593183	WITHOUT_CLASSIFICATION	1.8979354068177895E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9995655306828551	WITHOUT_CLASSIFICATION	4.3446931714484445E-4	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999994870746018	WITHOUT_CLASSIFICATION	5.129253982531089E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999637941542203	WITHOUT_CLASSIFICATION	3.620584577972239E-5	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.996214604015361	WITHOUT_CLASSIFICATION	0.003785395984639028	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998376435585141	WITHOUT_CLASSIFICATION	1.6235644148585477E-4	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999682671642212	WITHOUT_CLASSIFICATION	3.1732835778913864E-5	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999682238364661	WITHOUT_CLASSIFICATION	3.177616353399617E-5	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999915567746476	WITHOUT_CLASSIFICATION	8.443225352403118E-5	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999983939057365	WITHOUT_CLASSIFICATION	1.6060942634969464E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9988701692690729	WITHOUT_CLASSIFICATION	0.0011298307309270496	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999995687306106	WITHOUT_CLASSIFICATION	4.3126938940756505E-6	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.982097729708796	WITHOUT_CLASSIFICATION	0.017902270291204	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998284833682859	WITHOUT_CLASSIFICATION	1.7151663171401105E-4	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999895414050357	WITHOUT_CLASSIFICATION	1.0458594964188519E-5	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999969262966021	WITHOUT_CLASSIFICATION	3.0737033977918177E-6	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997222558043979	WITHOUT_CLASSIFICATION	2.777441956020754E-4	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997222558043979	WITHOUT_CLASSIFICATION	2.777441956020754E-4	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999959041827398	WITHOUT_CLASSIFICATION	4.095817260248995E-6	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999890927885011	WITHOUT_CLASSIFICATION	1.0907211498892878E-4	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999976892542676	WITHOUT_CLASSIFICATION	2.3107457324099472E-5	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999879322573609	WITHOUT_CLASSIFICATION	1.2067742639098903E-5	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999498208559214	WITHOUT_CLASSIFICATION	5.0179144078528197E-5	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999043391332796	WITHOUT_CLASSIFICATION	9.566086672036687E-5	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9996291223725132	WITHOUT_CLASSIFICATION	3.708776274867581E-4	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999121284829323	WITHOUT_CLASSIFICATION	8.78715170676912E-5	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999747746322672	WITHOUT_CLASSIFICATION	2.522536773264106E-5	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999537471676605	WITHOUT_CLASSIFICATION	4.6252832339441914E-5	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.9999537471676605	WITHOUT_CLASSIFICATION	4.6252832339441914E-5	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999284396422723	WITHOUT_CLASSIFICATION	7.156035772772846E-5	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999530003407776	WITHOUT_CLASSIFICATION	4.6999659222463627E-5	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999488830531247	WITHOUT_CLASSIFICATION	5.111694687538165E-5	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9989069231502647	WITHOUT_CLASSIFICATION	0.0010930768497352792	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999575144818887	WITHOUT_CLASSIFICATION	4.2485518111219384E-5	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998435633554505	WITHOUT_CLASSIFICATION	1.564366445494113E-4	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999937685332321	WITHOUT_CLASSIFICATION	6.231466767886837E-6	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999280301370462	WITHOUT_CLASSIFICATION	7.196986295381025E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999873519732046	WITHOUT_CLASSIFICATION	1.2648026795408017E-4	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9996242562336694	WITHOUT_CLASSIFICATION	3.757437663306749E-4	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9990852128434586	WITHOUT_CLASSIFICATION	9.147871565412533E-4	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999404113319443	WITHOUT_CLASSIFICATION	5.95886680556988E-5	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999423033743352	WITHOUT_CLASSIFICATION	5.769662566490627E-5	DEFECT
implied	WITHOUT_CLASSIFICATION	0.999990502447866	WITHOUT_CLASSIFICATION	9.49755213396748E-6	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999786591387196	WITHOUT_CLASSIFICATION	2.1340861280431925E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999873519732046	WITHOUT_CLASSIFICATION	1.2648026795408017E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999873519732046	WITHOUT_CLASSIFICATION	1.2648026795408017E-4	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999543265971023	WITHOUT_CLASSIFICATION	4.567340289775079E-5	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9996515329788773	WITHOUT_CLASSIFICATION	3.484670211226698E-4	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9998674658080234	WITHOUT_CLASSIFICATION	1.3253419197652624E-4	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999267895176078	WITHOUT_CLASSIFICATION	7.321048239214462E-5	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9998411528666707	WITHOUT_CLASSIFICATION	1.588471333292453E-4	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999240753493271	WITHOUT_CLASSIFICATION	7.592465067281217E-5	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999875385788651	WITHOUT_CLASSIFICATION	1.2461421134775293E-5	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999636950246336	WITHOUT_CLASSIFICATION	3.6304975366529605E-5	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9996985182787864	WITHOUT_CLASSIFICATION	3.014817212136154E-4	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999553137369454	WITHOUT_CLASSIFICATION	4.468626305471674E-5	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9996935469877324	WITHOUT_CLASSIFICATION	3.0645301226761253E-4	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999493624142741	WITHOUT_CLASSIFICATION	5.0637585725930604E-5	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999302501576038	WITHOUT_CLASSIFICATION	6.974984239623794E-5	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999142156270607	WITHOUT_CLASSIFICATION	8.578437293928284E-5	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172644601252	WITHOUT_CLASSIFICATION	8.273553987474796E-5	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999778200984807	WITHOUT_CLASSIFICATION	2.217990151929654E-5	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999241526526392	WITHOUT_CLASSIFICATION	7.584734736086866E-5	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.999941074795051	WITHOUT_CLASSIFICATION	5.8925204948922283E-5	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999548015158601	WITHOUT_CLASSIFICATION	4.519848413988956E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9916867937624351	WITHOUT_CLASSIFICATION	0.00831320623756493	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999791108411048	WITHOUT_CLASSIFICATION	2.0889158895158867E-5	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999083871137	WITHOUT_CLASSIFICATION	9.161288618890314E-8	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998769085612027	WITHOUT_CLASSIFICATION	1.2309143879735533E-4	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999937901962607	WITHOUT_CLASSIFICATION	6.209803739297308E-5	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999974528020612	WITHOUT_CLASSIFICATION	2.5471979388080557E-6	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999242842055752	WITHOUT_CLASSIFICATION	7.571579442480105E-5	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998352833322651	WITHOUT_CLASSIFICATION	1.6471666773483777E-4	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.999982081217035	WITHOUT_CLASSIFICATION	1.79187829649692E-5	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9994961261651945	WITHOUT_CLASSIFICATION	5.03873834805594E-4	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9995879920024029	WITHOUT_CLASSIFICATION	4.1200799759708295E-4	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9998203882902231	WITHOUT_CLASSIFICATION	1.7961170977693266E-4	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9999073466635989	WITHOUT_CLASSIFICATION	9.265333640099064E-5	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999271290828363	WITHOUT_CLASSIFICATION	7.28709171637211E-5	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999118781112426	WITHOUT_CLASSIFICATION	8.812188875737514E-5	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9992517301201425	WITHOUT_CLASSIFICATION	7.482698798574968E-4	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999760661338333	WITHOUT_CLASSIFICATION	2.393386616663195E-5	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999249733693633	WITHOUT_CLASSIFICATION	7.502663063680127E-5	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999597759253174	WITHOUT_CLASSIFICATION	4.022407468268893E-5	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9998520398431777	WITHOUT_CLASSIFICATION	1.4796015682225265E-4	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999597044115635	WITHOUT_CLASSIFICATION	4.029558843665529E-5	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999231629547571	WITHOUT_CLASSIFICATION	7.683704524294232E-5	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999883652629509	WITHOUT_CLASSIFICATION	1.1634737049133205E-5	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.999943496879542	WITHOUT_CLASSIFICATION	5.650312045802608E-5	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999883652629509	WITHOUT_CLASSIFICATION	1.1634737049133205E-5	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9984342737337756	WITHOUT_CLASSIFICATION	0.0015657262662243181	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9972984329392676	WITHOUT_CLASSIFICATION	0.0027015670607323187	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999562900767766	WITHOUT_CLASSIFICATION	4.370992322337015E-5	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999925229324673	WITHOUT_CLASSIFICATION	7.477067532639155E-6	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999012015267932	WITHOUT_CLASSIFICATION	9.879847320674037E-5	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999562900767766	WITHOUT_CLASSIFICATION	4.370992322337015E-5	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999985298673889	WITHOUT_CLASSIFICATION	1.4701326110703888E-6	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998602746137484	WITHOUT_CLASSIFICATION	1.3972538625167455E-4	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999515630512721	WITHOUT_CLASSIFICATION	4.8436948727908824E-5	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999773642568934	WITHOUT_CLASSIFICATION	2.263574310661963E-5	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999912587594421	WITHOUT_CLASSIFICATION	8.741240557875502E-6	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999969408297261	WITHOUT_CLASSIFICATION	3.059170273893136E-5	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999998236116446	WITHOUT_CLASSIFICATION	1.763883553975182E-6	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999010457301882	WITHOUT_CLASSIFICATION	9.895426981167199E-5	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999889924655042	WITHOUT_CLASSIFICATION	1.1007534495834575E-5	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999054434489639	WITHOUT_CLASSIFICATION	9.455655103610453E-5	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9988826658653598	WITHOUT_CLASSIFICATION	0.001117334134640169	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999197818675398	WITHOUT_CLASSIFICATION	8.021813246015803E-5	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9998544803774583	WITHOUT_CLASSIFICATION	1.455196225416961E-4	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999440969439412	WITHOUT_CLASSIFICATION	5.590305605875461E-5	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999232297944689	WITHOUT_CLASSIFICATION	7.677020553111548E-5	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9998911570406275	WITHOUT_CLASSIFICATION	1.0884295937242242E-4	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9992316607469033	WITHOUT_CLASSIFICATION	7.683392530968194E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997261486024553	WITHOUT_CLASSIFICATION	2.738513975446139E-4	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998722849620283	WITHOUT_CLASSIFICATION	1.2771503797163807E-4	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9938758368114545	WITHOUT_CLASSIFICATION	0.00612416318854547	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9996531697564314	WITHOUT_CLASSIFICATION	3.4683024356865755E-4	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9999384732750374	WITHOUT_CLASSIFICATION	6.152672496269536E-5	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999092968968647	WITHOUT_CLASSIFICATION	9.070310313532641E-5	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9996948154393543	WITHOUT_CLASSIFICATION	3.0518456064562174E-4	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9999587725906636	WITHOUT_CLASSIFICATION	4.122740933643731E-5	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9288156953748822	WITHOUT_CLASSIFICATION	0.07118430462511781	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9938983501587932	WITHOUT_CLASSIFICATION	0.0061016498412067854	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999890513163867	WITHOUT_CLASSIFICATION	1.0948683613359955E-5	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.9999525241659546	WITHOUT_CLASSIFICATION	4.747583404540832E-5	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.9998271089066425	WITHOUT_CLASSIFICATION	1.7289109335748715E-4	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999092968968647	WITHOUT_CLASSIFICATION	9.070310313532641E-5	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999046146893185	WITHOUT_CLASSIFICATION	9.538531068164809E-5	DEFECT
an association	WITHOUT_CLASSIFICATION	0.9999880162798566	WITHOUT_CLASSIFICATION	1.1983720143508467E-5	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9999475323420993	WITHOUT_CLASSIFICATION	5.2467657900525505E-5	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9902809351254126	WITHOUT_CLASSIFICATION	0.009719064874587426	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9938758368114545	WITHOUT_CLASSIFICATION	0.00612416318854547	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.999966021733785	WITHOUT_CLASSIFICATION	3.3978266214889026E-5	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9997984664529374	WITHOUT_CLASSIFICATION	2.0153354706269028E-4	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997377018006823	WITHOUT_CLASSIFICATION	2.6229819931756224E-4	DEFECT
special case	WITHOUT_CLASSIFICATION	0.999893363186948	WITHOUT_CLASSIFICATION	1.0663681305203218E-4	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999954219215329	WITHOUT_CLASSIFICATION	4.578078467090107E-6	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999900064283704	WITHOUT_CLASSIFICATION	9.993571629520866E-6	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9821005210640996	WITHOUT_CLASSIFICATION	0.017899478935900406	DEFECT
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998716275951236	WITHOUT_CLASSIFICATION	1.2837240487641006E-4	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9995628857198052	WITHOUT_CLASSIFICATION	4.3711428019464814E-4	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.9999749185526385	WITHOUT_CLASSIFICATION	2.5081447361492468E-5	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999924926775958	WITHOUT_CLASSIFICATION	7.50732240415882E-6	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999168697412572	WITHOUT_CLASSIFICATION	8.313025874274129E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999168697412572	WITHOUT_CLASSIFICATION	8.313025874274129E-5	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999855217305016	WITHOUT_CLASSIFICATION	1.4478269498505395E-5	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999359773165737	WITHOUT_CLASSIFICATION	6.402268342633141E-5	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999906300192946	WITHOUT_CLASSIFICATION	9.369980705490444E-6	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999477100924127	WITHOUT_CLASSIFICATION	5.228990758736362E-5	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999761904839167	WITHOUT_CLASSIFICATION	2.3809516083365796E-5	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9971561726699927	WITHOUT_CLASSIFICATION	0.00284382733000728	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9995168991534501	WITHOUT_CLASSIFICATION	4.8310084654995804E-4	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9986130133385571	WITHOUT_CLASSIFICATION	0.0013869866614428783	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9992248716702904	WITHOUT_CLASSIFICATION	7.751283297096879E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999554067274665	WITHOUT_CLASSIFICATION	4.459327253341708E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999554067274665	WITHOUT_CLASSIFICATION	4.459327253341708E-5	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999731067684345	WITHOUT_CLASSIFICATION	2.6893231565518813E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999554067274665	WITHOUT_CLASSIFICATION	4.459327253341708E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999554067274665	WITHOUT_CLASSIFICATION	4.459327253341708E-5	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9974124648730475	WITHOUT_CLASSIFICATION	0.002587535126952482	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9997661414150029	WITHOUT_CLASSIFICATION	2.3385858499721209E-4	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998916981514611	WITHOUT_CLASSIFICATION	1.0830184853888722E-4	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998916981514611	WITHOUT_CLASSIFICATION	1.0830184853888722E-4	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9987987889493826	WITHOUT_CLASSIFICATION	0.001201211050617424	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999936118073149	WITHOUT_CLASSIFICATION	6.3881926850442E-6	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9987327883602228	WITHOUT_CLASSIFICATION	0.0012672116397771617	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9997921441095788	WITHOUT_CLASSIFICATION	2.0785589042112145E-4	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998979678530788	WITHOUT_CLASSIFICATION	1.0203214692121554E-4	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999220723849978	WITHOUT_CLASSIFICATION	7.792761500224973E-5	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997905954644163	WITHOUT_CLASSIFICATION	2.094045355836622E-4	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999577507828713	WITHOUT_CLASSIFICATION	4.224921712871663E-5	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999175910645026	WITHOUT_CLASSIFICATION	8.240893549745321E-5	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999959821825441	WITHOUT_CLASSIFICATION	4.017817455898819E-5	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999373782370015	WITHOUT_CLASSIFICATION	6.26217629984972E-5	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9944370641543663	WITHOUT_CLASSIFICATION	0.005562935845633661	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999879975795448	WITHOUT_CLASSIFICATION	1.2002420455108655E-5	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999824328956057	WITHOUT_CLASSIFICATION	1.7567104394194206E-5	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9994671183941667	WITHOUT_CLASSIFICATION	5.32881605833402E-4	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999261421253077	WITHOUT_CLASSIFICATION	7.385787469227967E-5	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9997333665754722	WITHOUT_CLASSIFICATION	2.6663342452770954E-4	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999807334537468	WITHOUT_CLASSIFICATION	1.9266546253198004E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999879975795448	WITHOUT_CLASSIFICATION	1.2002420455108655E-5	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9996531697564314	WITHOUT_CLASSIFICATION	3.4683024356865755E-4	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.9998267331023539	WITHOUT_CLASSIFICATION	1.732668976459625E-4	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996749957162242	WITHOUT_CLASSIFICATION	3.250042837757256E-4	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999516264826263	WITHOUT_CLASSIFICATION	4.837351737369207E-4	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9997484481059326	WITHOUT_CLASSIFICATION	2.515518940674066E-4	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999161925695358	WITHOUT_CLASSIFICATION	8.380743046421961E-5	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9999525829361067	WITHOUT_CLASSIFICATION	4.7417063893393326E-5	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998171155576989	WITHOUT_CLASSIFICATION	1.8288444230115191E-4	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999526879927924	WITHOUT_CLASSIFICATION	4.7312007207738906E-5	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999992497302014	WITHOUT_CLASSIFICATION	7.502697985906837E-7	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999325076323338	WITHOUT_CLASSIFICATION	6.749236766612888E-5	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999504506038147	WITHOUT_CLASSIFICATION	4.954939618525813E-5	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9997433586189302	WITHOUT_CLASSIFICATION	2.56641381069888E-4	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999121835270729	WITHOUT_CLASSIFICATION	8.781647292709515E-5	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9918437028697517	WITHOUT_CLASSIFICATION	0.008156297130248362	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999833249864466	WITHOUT_CLASSIFICATION	1.6675013553373822E-5	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999506010875532	WITHOUT_CLASSIFICATION	4.939891244680888E-5	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999008777265406	WITHOUT_CLASSIFICATION	9.912227345944503E-5	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999910546595927	WITHOUT_CLASSIFICATION	8.945340407301676E-5	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997997297124552	WITHOUT_CLASSIFICATION	2.0027028754474128E-4	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999456983799524	WITHOUT_CLASSIFICATION	5.430162004773414E-5	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999115636193833	WITHOUT_CLASSIFICATION	8.843638061672412E-5	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999992559826134	WITHOUT_CLASSIFICATION	7.440173865141595E-7	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999526879927924	WITHOUT_CLASSIFICATION	4.7312007207738906E-5	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999649735590552	WITHOUT_CLASSIFICATION	3.502644094481259E-5	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9999398155906108	WITHOUT_CLASSIFICATION	6.018440938916441E-5	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999899721322614	WITHOUT_CLASSIFICATION	1.0027867738655804E-5	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999116221062088	WITHOUT_CLASSIFICATION	8.837789379123552E-5	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998506194607875	WITHOUT_CLASSIFICATION	1.4938053921244565E-4	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.999912930678927	WITHOUT_CLASSIFICATION	8.706932107295261E-5	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9999360192651604	WITHOUT_CLASSIFICATION	6.398073483956562E-5	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9998715765977407	WITHOUT_CLASSIFICATION	1.2842340225934087E-4	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9999359115891555	WITHOUT_CLASSIFICATION	6.408841084451046E-5	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.999917754276549	WITHOUT_CLASSIFICATION	8.224572345092696E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999913699846177	WITHOUT_CLASSIFICATION	8.630015382312486E-6	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999732097363292	WITHOUT_CLASSIFICATION	2.679026367087688E-5	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999787332577422	WITHOUT_CLASSIFICATION	2.126674225771434E-5	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999369994946373	WITHOUT_CLASSIFICATION	6.300050536265404E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999758371949111	WITHOUT_CLASSIFICATION	2.4162805088824387E-5	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999977808529171	WITHOUT_CLASSIFICATION	2.2191470829013243E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999212163008157	WITHOUT_CLASSIFICATION	7.878369918430371E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999913699846177	WITHOUT_CLASSIFICATION	8.630015382312486E-6	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999009213417815	WITHOUT_CLASSIFICATION	9.907865821845434E-5	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9997376407924858	WITHOUT_CLASSIFICATION	2.623592075140818E-4	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998125870342088	WITHOUT_CLASSIFICATION	1.8741296579123917E-4	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999779302349422	WITHOUT_CLASSIFICATION	2.2069765057882492E-5	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9999388020225668	WITHOUT_CLASSIFICATION	6.119797743314305E-5	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999903243517093	WITHOUT_CLASSIFICATION	9.675648290675559E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999758371949111	WITHOUT_CLASSIFICATION	2.4162805088824387E-5	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999218782746276	WITHOUT_CLASSIFICATION	7.812172537236191E-5	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998871442557611	WITHOUT_CLASSIFICATION	1.1285574423884367E-4	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999889975271137	WITHOUT_CLASSIFICATION	1.1002472886292111E-4	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997530751754987	WITHOUT_CLASSIFICATION	2.469248245013424E-4	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997530751754987	WITHOUT_CLASSIFICATION	2.469248245013424E-4	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997530751754987	WITHOUT_CLASSIFICATION	2.469248245013424E-4	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999743251137108	WITHOUT_CLASSIFICATION	2.5674886289201E-5	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999743251137108	WITHOUT_CLASSIFICATION	2.5674886289201E-5	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9968427516346601	WITHOUT_CLASSIFICATION	0.003157248365339939	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999968981196166	WITHOUT_CLASSIFICATION	3.1018803834767525E-6	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.9998185040888782	WITHOUT_CLASSIFICATION	1.814959111217307E-4	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9998278615247203	WITHOUT_CLASSIFICATION	1.7213847527974735E-4	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9991649705520103	WITHOUT_CLASSIFICATION	8.350294479898274E-4	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998738306884899	WITHOUT_CLASSIFICATION	1.261693115101475E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998946912808546	WITHOUT_CLASSIFICATION	1.0530871914535819E-4	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998506194607875	WITHOUT_CLASSIFICATION	1.4938053921244565E-4	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9992691087743245	WITHOUT_CLASSIFICATION	7.308912256754465E-4	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999345897515628	WITHOUT_CLASSIFICATION	6.541024843723082E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998738306884899	WITHOUT_CLASSIFICATION	1.261693115101475E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998946912808546	WITHOUT_CLASSIFICATION	1.0530871914535819E-4	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998506194607875	WITHOUT_CLASSIFICATION	1.4938053921244565E-4	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999783183529165	WITHOUT_CLASSIFICATION	2.1681647083502413E-5	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999775800761301	WITHOUT_CLASSIFICATION	2.241992386982125E-5	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999942047956202	WITHOUT_CLASSIFICATION	5.795204379799957E-6	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9182658349210451	WITHOUT_CLASSIFICATION	0.08173416507895498	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999910314332579	WITHOUT_CLASSIFICATION	8.968566742097263E-5	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999434313448623	WITHOUT_CLASSIFICATION	5.65686551377379E-5	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9999906284603077	WITHOUT_CLASSIFICATION	9.371539692275415E-6	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999168697412572	WITHOUT_CLASSIFICATION	8.313025874274129E-5	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999808124275038	WITHOUT_CLASSIFICATION	1.91875724961379E-5	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997681994162216	WITHOUT_CLASSIFICATION	2.3180058377837782E-4	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9970470155830937	WITHOUT_CLASSIFICATION	0.002952984416906338	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.99984320207995	WITHOUT_CLASSIFICATION	1.5679792004995644E-4	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999855548106457	WITHOUT_CLASSIFICATION	1.4445189354396466E-5	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999084104857147	WITHOUT_CLASSIFICATION	9.158951428538496E-5	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.999636460230959	WITHOUT_CLASSIFICATION	3.635397690409865E-4	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999274953549726	WITHOUT_CLASSIFICATION	7.250464502749899E-5	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999253779762595	WITHOUT_CLASSIFICATION	7.462202374060142E-5	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999104601478653	WITHOUT_CLASSIFICATION	8.953985213477909E-5	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9994201462096176	WITHOUT_CLASSIFICATION	5.798537903824771E-4	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999975185326335	WITHOUT_CLASSIFICATION	2.481467366390978E-6	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999377134469727	WITHOUT_CLASSIFICATION	6.228655302732345E-5	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999892764495025	WITHOUT_CLASSIFICATION	1.0723550497597894E-5	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999993569493713	WITHOUT_CLASSIFICATION	6.430506287505286E-7	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9997425485879738	WITHOUT_CLASSIFICATION	2.5745141202612905E-4	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998715484942644	WITHOUT_CLASSIFICATION	1.284515057355753E-4	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998742522504546	WITHOUT_CLASSIFICATION	1.2574774954545684E-4	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999998971551585	WITHOUT_CLASSIFICATION	1.02844841459462E-7	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998838061213599	WITHOUT_CLASSIFICATION	1.1619387864021658E-4	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996631079130338	WITHOUT_CLASSIFICATION	3.3689208696618587E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999957525356287	WITHOUT_CLASSIFICATION	4.247464371298437E-5	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999957525356287	WITHOUT_CLASSIFICATION	4.247464371298437E-5	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998174463484234	WITHOUT_CLASSIFICATION	1.8255365157655263E-4	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9992206266392253	WITHOUT_CLASSIFICATION	7.793733607747871E-4	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999626421809796	WITHOUT_CLASSIFICATION	3.7357819020406395E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999922049571953	WITHOUT_CLASSIFICATION	7.795042804684572E-6	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999826951367969	WITHOUT_CLASSIFICATION	1.73048632030714E-5	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999843244174919	WITHOUT_CLASSIFICATION	1.567558250817332E-5	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.999991441292173	WITHOUT_CLASSIFICATION	8.558707826980732E-6	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.9999928348978723	WITHOUT_CLASSIFICATION	7.16510212764651E-6	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999959633845827	WITHOUT_CLASSIFICATION	4.036615417221846E-6	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999021085418058	WITHOUT_CLASSIFICATION	9.789145819414674E-5	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999052126927191	WITHOUT_CLASSIFICATION	9.478730728081773E-5	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999021085418058	WITHOUT_CLASSIFICATION	9.789145819414674E-5	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999021085418058	WITHOUT_CLASSIFICATION	9.789145819414674E-5	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999021085418058	WITHOUT_CLASSIFICATION	9.789145819414674E-5	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999023108407253	WITHOUT_CLASSIFICATION	9.768915927467352E-5	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999021085418058	WITHOUT_CLASSIFICATION	9.789145819414674E-5	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999029108674264	WITHOUT_CLASSIFICATION	9.708913257355983E-5	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999021085418058	WITHOUT_CLASSIFICATION	9.789145819414674E-5	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999021085418058	WITHOUT_CLASSIFICATION	9.789145819414674E-5	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999021085418058	WITHOUT_CLASSIFICATION	9.789145819414674E-5	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.999140541861686	WITHOUT_CLASSIFICATION	8.594581383140283E-4	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9997449301279765	WITHOUT_CLASSIFICATION	2.5506987202349315E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992947298611842	WITHOUT_CLASSIFICATION	7.052701388157206E-4	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9995104736647339	WITHOUT_CLASSIFICATION	4.895263352661068E-4	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999846048255899	WITHOUT_CLASSIFICATION	1.539517441005144E-5	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.999801408314197	WITHOUT_CLASSIFICATION	1.985916858031278E-4	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999807422255008	WITHOUT_CLASSIFICATION	1.9257774499148933E-5	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999861136821019	WITHOUT_CLASSIFICATION	1.388631789811479E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992947298611842	WITHOUT_CLASSIFICATION	7.052701388157206E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992947298611842	WITHOUT_CLASSIFICATION	7.052701388157206E-4	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999781778659391	WITHOUT_CLASSIFICATION	2.182213406094152E-5	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999856227890357	WITHOUT_CLASSIFICATION	1.4377210964385948E-5	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9995417376752638	WITHOUT_CLASSIFICATION	4.582623247361515E-4	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999464659479008	WITHOUT_CLASSIFICATION	5.3534052099299477E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999958114633428	WITHOUT_CLASSIFICATION	4.188536657181814E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999104601478653	WITHOUT_CLASSIFICATION	8.953985213477909E-5	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9998498013707405	WITHOUT_CLASSIFICATION	1.5019862925953536E-4	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999431168025087	WITHOUT_CLASSIFICATION	5.6883197491266434E-5	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9998950270456227	WITHOUT_CLASSIFICATION	1.0497295437720828E-4	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999492787217222	WITHOUT_CLASSIFICATION	5.072127827785204E-5	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9996855288617752	WITHOUT_CLASSIFICATION	3.144711382248677E-4	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998835604353372	WITHOUT_CLASSIFICATION	1.1643956466273741E-4	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9995754703237679	WITHOUT_CLASSIFICATION	4.2452967623201726E-4	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9995754703237679	WITHOUT_CLASSIFICATION	4.2452967623201726E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9995754703237679	WITHOUT_CLASSIFICATION	4.2452967623201726E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9995754703237679	WITHOUT_CLASSIFICATION	4.2452967623201726E-4	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998506194607875	WITHOUT_CLASSIFICATION	1.4938053921244565E-4	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999011903953827	WITHOUT_CLASSIFICATION	9.88096046172894E-5	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998589460034434	WITHOUT_CLASSIFICATION	1.4105399655658346E-4	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998506194607875	WITHOUT_CLASSIFICATION	1.4938053921244565E-4	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9980176052504939	WITHOUT_CLASSIFICATION	0.0019823947495060936	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999215500423213	WITHOUT_CLASSIFICATION	7.844995767873919E-5	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999889666796582	WITHOUT_CLASSIFICATION	1.1033320341793311E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999062658492193	WITHOUT_CLASSIFICATION	9.37341507807331E-5	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999852790968462	WITHOUT_CLASSIFICATION	1.4720903153870248E-5	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.9999877173557676	WITHOUT_CLASSIFICATION	1.2282644232397728E-5	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999898597863555	WITHOUT_CLASSIFICATION	1.0140213644415821E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999936737557088	WITHOUT_CLASSIFICATION	6.326244291115449E-6	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999362838365722	WITHOUT_CLASSIFICATION	6.371616342789014E-5	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999838550662227	WITHOUT_CLASSIFICATION	1.614493377731818E-5	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998607180317527	WITHOUT_CLASSIFICATION	1.3928196824724263E-4	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999923059136464	WITHOUT_CLASSIFICATION	7.6940863536034E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999923059136464	WITHOUT_CLASSIFICATION	7.6940863536034E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999923059136464	WITHOUT_CLASSIFICATION	7.6940863536034E-6	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999881105405553	WITHOUT_CLASSIFICATION	1.1889459444634177E-5	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9999686105923395	WITHOUT_CLASSIFICATION	3.1389407660526206E-5	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999957984410957	WITHOUT_CLASSIFICATION	4.201558904303754E-6	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998531975216579	WITHOUT_CLASSIFICATION	1.4680247834206512E-4	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998531975216579	WITHOUT_CLASSIFICATION	1.4680247834206512E-4	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9993796758940552	WITHOUT_CLASSIFICATION	6.203241059447632E-4	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997530751754987	WITHOUT_CLASSIFICATION	2.469248245013424E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999308869564941	WITHOUT_CLASSIFICATION	6.911304350596252E-5	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999427910827641	WITHOUT_CLASSIFICATION	5.7208917235993544E-5	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999991669824224	WITHOUT_CLASSIFICATION	8.330175776143564E-7	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9985332810976785	WITHOUT_CLASSIFICATION	0.0014667189023215813	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998776672331092	WITHOUT_CLASSIFICATION	1.2233276689079263E-4	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998067711092651	WITHOUT_CLASSIFICATION	1.9322889073489853E-4	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999806576935173	WITHOUT_CLASSIFICATION	1.9342306482598817E-5	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9987572164793108	WITHOUT_CLASSIFICATION	0.0012427835206891642	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999503147256072	WITHOUT_CLASSIFICATION	4.968527439286639E-5	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9998094234823183	WITHOUT_CLASSIFICATION	1.9057651768176266E-4	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9998929941185174	WITHOUT_CLASSIFICATION	1.0700588148257726E-4	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999661729087808	WITHOUT_CLASSIFICATION	3.382709121924362E-5	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999960275093717	WITHOUT_CLASSIFICATION	3.9724906282605846E-6	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999687828732114	WITHOUT_CLASSIFICATION	3.121712678857148E-5	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999960027656072	WITHOUT_CLASSIFICATION	3.997234392837664E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999968359815486	WITHOUT_CLASSIFICATION	3.1640184513049973E-6	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999675718411127	WITHOUT_CLASSIFICATION	3.2428158887247985E-5	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9994036362341894	WITHOUT_CLASSIFICATION	5.96363765810628E-4	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9988942723381439	WITHOUT_CLASSIFICATION	0.0011057276618561093	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999676113244161	WITHOUT_CLASSIFICATION	3.238867558376452E-5	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9997767942573055	WITHOUT_CLASSIFICATION	2.2320574269440045E-4	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999402398805299	WITHOUT_CLASSIFICATION	5.976011946998853E-5	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999977758720371	WITHOUT_CLASSIFICATION	2.224127962936402E-6	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999545582771435	WITHOUT_CLASSIFICATION	4.544172285641748E-5	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.996532933254386	WITHOUT_CLASSIFICATION	0.0034670667456139777	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.999989567360858	WITHOUT_CLASSIFICATION	1.0432639141929793E-5	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999168697412572	WITHOUT_CLASSIFICATION	8.313025874274129E-5	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9977403167602573	WITHOUT_CLASSIFICATION	0.0022596832397426317	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999385426991021	WITHOUT_CLASSIFICATION	6.145730089791282E-4	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.999996966452324	WITHOUT_CLASSIFICATION	3.0335476760464487E-6	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999899861160779	WITHOUT_CLASSIFICATION	1.0013883922075319E-5	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.9999951121259394	WITHOUT_CLASSIFICATION	4.8878740606499866E-6	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9983313547797418	WITHOUT_CLASSIFICATION	0.0016686452202581462	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999242128520096	WITHOUT_CLASSIFICATION	7.578714799045322E-5	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999051971213199	WITHOUT_CLASSIFICATION	9.480287868019023E-5	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999309078132135	WITHOUT_CLASSIFICATION	6.909218678652484E-5	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999415782435562	WITHOUT_CLASSIFICATION	5.842175644368419E-5	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.999647209407089	WITHOUT_CLASSIFICATION	3.527905929110054E-4	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.9997769566707445	WITHOUT_CLASSIFICATION	2.230433292553822E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999974123727854	WITHOUT_CLASSIFICATION	2.587627214612916E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999038958185971	WITHOUT_CLASSIFICATION	9.610418140295189E-5	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999950266926222	WITHOUT_CLASSIFICATION	4.9733073777705385E-6	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999827318823798	WITHOUT_CLASSIFICATION	1.7268117620066845E-5	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.999970913469594	WITHOUT_CLASSIFICATION	2.908653040602431E-5	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9991500512788327	WITHOUT_CLASSIFICATION	8.499487211673542E-4	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.99965239242395	WITHOUT_CLASSIFICATION	3.476075760500229E-4	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998292027921776	WITHOUT_CLASSIFICATION	1.7079720782230622E-4	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.9999482773052141	WITHOUT_CLASSIFICATION	5.172269478595094E-5	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999428017049085	WITHOUT_CLASSIFICATION	5.7198295091463015E-5	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999937870681334	WITHOUT_CLASSIFICATION	6.212931866657561E-6	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999765047053248	WITHOUT_CLASSIFICATION	2.349529467515242E-5	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999219734675908	WITHOUT_CLASSIFICATION	7.802653240910576E-5	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999882373016425	WITHOUT_CLASSIFICATION	1.1762698357385165E-5	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9997940747333495	WITHOUT_CLASSIFICATION	2.0592526665052661E-4	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9998614833015875	WITHOUT_CLASSIFICATION	1.3851669841256304E-4	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999961477047879	WITHOUT_CLASSIFICATION	3.852295212101825E-5	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999528909119858	WITHOUT_CLASSIFICATION	4.7109088014200866E-5	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999912822638732	WITHOUT_CLASSIFICATION	8.717736126798522E-5	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998517147742664	WITHOUT_CLASSIFICATION	1.4828522573360575E-4	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9998913079944852	WITHOUT_CLASSIFICATION	1.0869200551472039E-4	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9996635854298768	WITHOUT_CLASSIFICATION	3.364145701231385E-4	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999803016172699	WITHOUT_CLASSIFICATION	1.9698382730120894E-5	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999748476591759	WITHOUT_CLASSIFICATION	2.5152340824133766E-5	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999712395992878	WITHOUT_CLASSIFICATION	2.876040071224453E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999823594921154	WITHOUT_CLASSIFICATION	1.7640507884503273E-5	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999952622647234	WITHOUT_CLASSIFICATION	4.737735276723685E-6	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999836143649005	WITHOUT_CLASSIFICATION	1.638563509949856E-5	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9997654468518661	WITHOUT_CLASSIFICATION	2.3455314813395592E-4	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999943684965783	WITHOUT_CLASSIFICATION	5.631503421755678E-6	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999928995834289	WITHOUT_CLASSIFICATION	7.100416571112066E-6	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9996911379204487	WITHOUT_CLASSIFICATION	3.088620795512476E-4	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.9997046410704589	WITHOUT_CLASSIFICATION	2.9535892954116216E-4	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999948918272725	WITHOUT_CLASSIFICATION	5.1081727274164585E-6	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999394126746888	WITHOUT_CLASSIFICATION	6.058732531130146E-5	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999707799403608	WITHOUT_CLASSIFICATION	2.922005963932835E-5	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9998812617407138	WITHOUT_CLASSIFICATION	1.1873825928622263E-4	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9997797473159049	WITHOUT_CLASSIFICATION	2.2025268409501172E-4	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9856001930673307	WITHOUT_CLASSIFICATION	0.014399806932669254	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999506376295253	WITHOUT_CLASSIFICATION	4.936237047472903E-5	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.9999602187943141	WITHOUT_CLASSIFICATION	3.978120568586137E-5	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999861466739703	WITHOUT_CLASSIFICATION	1.3853326029703165E-5	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9996426652256679	WITHOUT_CLASSIFICATION	3.573347743321375E-4	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998949274133753	WITHOUT_CLASSIFICATION	1.0507258662464021E-4	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998426632611004	WITHOUT_CLASSIFICATION	1.573367388995271E-4	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9998750209383912	WITHOUT_CLASSIFICATION	1.2497906160882438E-4	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999803687244841	WITHOUT_CLASSIFICATION	1.9631275515811875E-5	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996480272049534	WITHOUT_CLASSIFICATION	3.5197279504662563E-4	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.999926732241905	WITHOUT_CLASSIFICATION	7.326775809501125E-5	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999926739873033	WITHOUT_CLASSIFICATION	7.326012696689668E-6	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999964620379205	WITHOUT_CLASSIFICATION	3.537962079483148E-6	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999214171767677	WITHOUT_CLASSIFICATION	7.858282323231936E-5	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.999977953803411	WITHOUT_CLASSIFICATION	2.204619658894528E-5	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9999449348560301	WITHOUT_CLASSIFICATION	5.506514396990525E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996621463405008	WITHOUT_CLASSIFICATION	3.378536594993153E-4	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996621463405008	WITHOUT_CLASSIFICATION	3.378536594993153E-4	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999598355613988	WITHOUT_CLASSIFICATION	4.0164438601276816E-5	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.9988746484042679	WITHOUT_CLASSIFICATION	0.0011253515957321122	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999183243216803	WITHOUT_CLASSIFICATION	8.167567831977266E-5	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9984905843035125	WITHOUT_CLASSIFICATION	0.0015094156964875268	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.999969608698105	WITHOUT_CLASSIFICATION	3.0391301894975403E-5	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9993985889510324	WITHOUT_CLASSIFICATION	6.014110489676849E-4	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999871010521808	WITHOUT_CLASSIFICATION	1.289894781918273E-4	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9994231800256866	WITHOUT_CLASSIFICATION	5.768199743132939E-4	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999011507026657	WITHOUT_CLASSIFICATION	9.884929733419468E-5	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9992576297990174	WITHOUT_CLASSIFICATION	7.423702009825936E-4	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999988042938624	WITHOUT_CLASSIFICATION	1.1957061375936616E-5	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9995799385720753	WITHOUT_CLASSIFICATION	4.2006142792474176E-4	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999627619505583	WITHOUT_CLASSIFICATION	3.7238049441632576E-5	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999833383945247	WITHOUT_CLASSIFICATION	1.6661605475358404E-5	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9996399164887589	WITHOUT_CLASSIFICATION	3.6008351124117117E-4	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999726058930272	WITHOUT_CLASSIFICATION	2.73941069729126E-5	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9969481699048336	WITHOUT_CLASSIFICATION	0.0030518300951664704	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9969481699048336	WITHOUT_CLASSIFICATION	0.0030518300951664704	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999923130540881	WITHOUT_CLASSIFICATION	7.686945911892834E-5	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997443426929616	WITHOUT_CLASSIFICATION	2.5565730703840193E-4	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999891463600802	WITHOUT_CLASSIFICATION	1.0853639919691966E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999403706966907	WITHOUT_CLASSIFICATION	5.962930330916931E-5	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999560306708102	WITHOUT_CLASSIFICATION	4.396932918987847E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999936737557088	WITHOUT_CLASSIFICATION	6.326244291115449E-6	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999903238348027	WITHOUT_CLASSIFICATION	9.676165197292492E-5	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999560306708102	WITHOUT_CLASSIFICATION	4.396932918987847E-5	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999877606559193	WITHOUT_CLASSIFICATION	1.2239344080682035E-5	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999120345965214	WITHOUT_CLASSIFICATION	8.796540347856125E-5	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999859348709893	WITHOUT_CLASSIFICATION	1.4065129010733274E-5	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999859348709893	WITHOUT_CLASSIFICATION	1.4065129010733274E-5	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999622073757947	WITHOUT_CLASSIFICATION	3.7792624205362996E-5	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999691465843914	WITHOUT_CLASSIFICATION	3.085341560860405E-5	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9996985182787864	WITHOUT_CLASSIFICATION	3.014817212136154E-4	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999753615947187	WITHOUT_CLASSIFICATION	2.4638405281340792E-5	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9996985182787864	WITHOUT_CLASSIFICATION	3.014817212136154E-4	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9985637761477558	WITHOUT_CLASSIFICATION	0.0014362238522440645	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999700407458414	WITHOUT_CLASSIFICATION	2.9959254158567055E-5	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999420674836057	WITHOUT_CLASSIFICATION	5.793251639424497E-5	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999543437530395	WITHOUT_CLASSIFICATION	4.565624696064786E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999495394438087	WITHOUT_CLASSIFICATION	5.0460556191237755E-5	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9954102159439001	WITHOUT_CLASSIFICATION	0.00458978405609979	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9993527772729013	WITHOUT_CLASSIFICATION	6.472227270987403E-4	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9998718644346966	WITHOUT_CLASSIFICATION	1.2813556530335898E-4	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998849626096313	WITHOUT_CLASSIFICATION	1.1503739036866224E-4	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999341579346733	WITHOUT_CLASSIFICATION	6.584206532665931E-5	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9998674658080234	WITHOUT_CLASSIFICATION	1.3253419197652624E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998428604769648	WITHOUT_CLASSIFICATION	1.5713952303509184E-4	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999010962077688	WITHOUT_CLASSIFICATION	9.890379223122211E-5	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999972807893017	WITHOUT_CLASSIFICATION	2.7192106982085236E-6	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9981851124032548	WITHOUT_CLASSIFICATION	0.0018148875967451455	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997592337328433	WITHOUT_CLASSIFICATION	2.4076626715671304E-4	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9998664404069231	WITHOUT_CLASSIFICATION	1.3355959307697948E-4	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998981331303046	WITHOUT_CLASSIFICATION	1.0186686969531455E-4	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999767982688871	WITHOUT_CLASSIFICATION	2.3201731112990465E-5	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999738199611337	WITHOUT_CLASSIFICATION	2.618003886629143E-5	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998930405115375	WITHOUT_CLASSIFICATION	1.0695948846250652E-4	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9997393024451181	WITHOUT_CLASSIFICATION	2.6069755488189564E-4	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9998910140459832	WITHOUT_CLASSIFICATION	1.089859540166544E-4	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999995939640908	WITHOUT_CLASSIFICATION	4.060359092658109E-7	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9998616440504251	WITHOUT_CLASSIFICATION	1.3835594957490623E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999820815573852	WITHOUT_CLASSIFICATION	1.791844261478633E-5	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999916462136078	WITHOUT_CLASSIFICATION	8.353786392177452E-6	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.9999041663228829	WITHOUT_CLASSIFICATION	9.583367711710849E-5	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9684393906530687	WITHOUT_CLASSIFICATION	0.03156060934693118	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9990332418585097	WITHOUT_CLASSIFICATION	9.667581414901711E-4	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999389093231267	WITHOUT_CLASSIFICATION	6.109067687327688E-5	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9998935523377367	WITHOUT_CLASSIFICATION	1.0644766226326115E-4	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999258765501818	WITHOUT_CLASSIFICATION	7.412344981821848E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999258765501818	WITHOUT_CLASSIFICATION	7.412344981821848E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.99999451188277	WITHOUT_CLASSIFICATION	5.48811722995348E-6	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997405277713174	WITHOUT_CLASSIFICATION	2.5947222868266586E-4	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999942600197726	WITHOUT_CLASSIFICATION	5.73998022741724E-5	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9999572944391607	WITHOUT_CLASSIFICATION	4.270556083936915E-5	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9993110152159865	WITHOUT_CLASSIFICATION	6.889847840135142E-4	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999499096457651	WITHOUT_CLASSIFICATION	5.009035423482924E-5	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999203180472377	WITHOUT_CLASSIFICATION	7.968195276226569E-5	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9997091354864723	WITHOUT_CLASSIFICATION	2.908645135276673E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.99999451188277	WITHOUT_CLASSIFICATION	5.48811722995348E-6	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997405277713174	WITHOUT_CLASSIFICATION	2.5947222868266586E-4	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9997408338213272	WITHOUT_CLASSIFICATION	2.591661786728943E-4	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999431332078839	WITHOUT_CLASSIFICATION	5.686679211624841E-5	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999981481041441	WITHOUT_CLASSIFICATION	1.8518958558556046E-6	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9998125211597759	WITHOUT_CLASSIFICATION	1.8747884022413667E-4	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999936465167628	WITHOUT_CLASSIFICATION	6.353483237199966E-5	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9992675456054172	WITHOUT_CLASSIFICATION	7.32454394582882E-4	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999776312514429	WITHOUT_CLASSIFICATION	2.236874855704366E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999908291797422	WITHOUT_CLASSIFICATION	9.170820257804396E-6	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999609623864865	WITHOUT_CLASSIFICATION	3.9037613513584986E-5	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9992872354065546	WITHOUT_CLASSIFICATION	7.127645934453469E-4	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9998559922400898	WITHOUT_CLASSIFICATION	1.4400775991007451E-4	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9992872354065546	WITHOUT_CLASSIFICATION	7.127645934453469E-4	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9998494688024092	WITHOUT_CLASSIFICATION	1.5053119759074273E-4	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9998913079944852	WITHOUT_CLASSIFICATION	1.0869200551472039E-4	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998494688024092	WITHOUT_CLASSIFICATION	1.5053119759074273E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999869521349227	WITHOUT_CLASSIFICATION	1.3047865077299705E-4	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9945195408754013	WITHOUT_CLASSIFICATION	0.0054804591245987	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999908291797422	WITHOUT_CLASSIFICATION	9.170820257804396E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999908291797422	WITHOUT_CLASSIFICATION	9.170820257804396E-6	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999516931926594	WITHOUT_CLASSIFICATION	4.830680734063427E-5	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999517479757839	WITHOUT_CLASSIFICATION	4.825202421600544E-5	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999516931926594	WITHOUT_CLASSIFICATION	4.830680734063427E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999173178436392	WITHOUT_CLASSIFICATION	8.268215636076562E-5	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999687772901623	WITHOUT_CLASSIFICATION	3.1222709837748165E-5	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999279168479273	WITHOUT_CLASSIFICATION	7.20831520727059E-5	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999486385349928	WITHOUT_CLASSIFICATION	5.136146500714513E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999235444474766	WITHOUT_CLASSIFICATION	7.645555252340901E-5	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.999949767346704	WITHOUT_CLASSIFICATION	5.023265329594506E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.999991015556634	WITHOUT_CLASSIFICATION	8.984443365886611E-6	DEFECT
columns	WITHOUT_CLASSIFICATION	0.9999913350163557	WITHOUT_CLASSIFICATION	8.664983644340422E-6	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9999505859989887	WITHOUT_CLASSIFICATION	4.94140010113656E-5	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9993990659975669	WITHOUT_CLASSIFICATION	6.009340024332282E-4	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999924105339172	WITHOUT_CLASSIFICATION	7.58946608279751E-6	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.9999929004013001	WITHOUT_CLASSIFICATION	7.0995986999677125E-6	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999201071378001	WITHOUT_CLASSIFICATION	7.989286219994238E-5	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999721759841615	WITHOUT_CLASSIFICATION	2.782401583846397E-5	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999958297440245	WITHOUT_CLASSIFICATION	4.170255975497226E-5	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998161379194637	WITHOUT_CLASSIFICATION	1.838620805362314E-4	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999010962077688	WITHOUT_CLASSIFICATION	9.890379223122211E-5	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999670887909311	WITHOUT_CLASSIFICATION	3.291120906893398E-5	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999327561207548	WITHOUT_CLASSIFICATION	6.724387924510547E-5	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999181302366188	WITHOUT_CLASSIFICATION	8.186976338121032E-5	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999010962077688	WITHOUT_CLASSIFICATION	9.890379223122211E-5	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999045589830814	WITHOUT_CLASSIFICATION	9.544101691868878E-5	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999045060962946	WITHOUT_CLASSIFICATION	9.54939037054475E-5	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9995514330430982	WITHOUT_CLASSIFICATION	4.4856695690166475E-4	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9997433117187142	WITHOUT_CLASSIFICATION	2.566882812858217E-4	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998969048700905	WITHOUT_CLASSIFICATION	1.0309512990940207E-4	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999074562852407	WITHOUT_CLASSIFICATION	9.254371475936309E-5	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9429575531742996	WITHOUT_CLASSIFICATION	0.05704244682570052	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9997456190860033	WITHOUT_CLASSIFICATION	2.543809139966551E-4	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999235444474766	WITHOUT_CLASSIFICATION	7.645555252340901E-5	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999199604746211	WITHOUT_CLASSIFICATION	8.003952537896181E-5	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9999606921506008	WITHOUT_CLASSIFICATION	3.9307849399217E-5	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9533461947398862	WITHOUT_CLASSIFICATION	0.04665380526011386	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.9999739770756279	WITHOUT_CLASSIFICATION	2.6022924372135774E-5	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999719245519236	WITHOUT_CLASSIFICATION	2.8075448076330693E-5	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.999994946985956	WITHOUT_CLASSIFICATION	5.053014043941081E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999173178436392	WITHOUT_CLASSIFICATION	8.268215636076562E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999173178436392	WITHOUT_CLASSIFICATION	8.268215636076562E-5	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999850103164576	WITHOUT_CLASSIFICATION	1.4989683542317466E-5	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999914403126082	WITHOUT_CLASSIFICATION	8.55968739173278E-6	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9998272392239509	WITHOUT_CLASSIFICATION	1.7276077604913724E-4	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999907034459015	WITHOUT_CLASSIFICATION	9.296554098469588E-6	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9993849645667036	WITHOUT_CLASSIFICATION	6.150354332964817E-4	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9993487109969335	WITHOUT_CLASSIFICATION	6.512890030666308E-4	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9991548476495	WITHOUT_CLASSIFICATION	8.451523505000404E-4	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999767252796095	WITHOUT_CLASSIFICATION	2.3274720390583776E-5	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999514307054315	WITHOUT_CLASSIFICATION	4.856929456848339E-5	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999221207975818	WITHOUT_CLASSIFICATION	7.787920241823613E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998492369759068	WITHOUT_CLASSIFICATION	1.5076302409322426E-4	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999201071378001	WITHOUT_CLASSIFICATION	7.989286219994238E-5	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.99999451188277	WITHOUT_CLASSIFICATION	5.48811722995348E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998492369759068	WITHOUT_CLASSIFICATION	1.5076302409322426E-4	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999314652048441	WITHOUT_CLASSIFICATION	6.853479515590913E-5	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999814596925518	WITHOUT_CLASSIFICATION	1.8540307448149376E-5	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.99995711227163	WITHOUT_CLASSIFICATION	4.28877283699605E-5	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9582778836842913	WITHOUT_CLASSIFICATION	0.04172211631570877	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9997331299658218	WITHOUT_CLASSIFICATION	2.6687003417821993E-4	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9993846237697501	WITHOUT_CLASSIFICATION	6.153762302498119E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999769910077018	WITHOUT_CLASSIFICATION	2.3008992298156655E-5	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9996811579800641	WITHOUT_CLASSIFICATION	3.188420199358931E-4	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999911514450776	WITHOUT_CLASSIFICATION	8.848554922455672E-6	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999129235947247	WITHOUT_CLASSIFICATION	8.707640527523841E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999462725685538	WITHOUT_CLASSIFICATION	5.372743144624744E-5	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999462725685538	WITHOUT_CLASSIFICATION	5.372743144624744E-5	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9994571387671092	WITHOUT_CLASSIFICATION	5.428612328909051E-4	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999756465346493	WITHOUT_CLASSIFICATION	2.4353465350685675E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998492369759068	WITHOUT_CLASSIFICATION	1.5076302409322426E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9997331299658218	WITHOUT_CLASSIFICATION	2.6687003417821993E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999769910077018	WITHOUT_CLASSIFICATION	2.3008992298156655E-5	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999445520790287	WITHOUT_CLASSIFICATION	5.5447920971370245E-5	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999940558457513	WITHOUT_CLASSIFICATION	5.944154248724267E-6	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9999489100452469	WITHOUT_CLASSIFICATION	5.108995475298659E-5	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999545129243551	WITHOUT_CLASSIFICATION	4.5487075644800814E-5	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999179892382393	WITHOUT_CLASSIFICATION	8.201076176069227E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.99999048053986	WITHOUT_CLASSIFICATION	9.519460140054929E-6	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999314652048441	WITHOUT_CLASSIFICATION	6.853479515590913E-5	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997235112384869	WITHOUT_CLASSIFICATION	2.764887615130444E-4	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.999962844607692	WITHOUT_CLASSIFICATION	3.7155392308023624E-5	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999862066874672	WITHOUT_CLASSIFICATION	1.3793312532777974E-5	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999941800399402	WITHOUT_CLASSIFICATION	5.819960059707101E-6	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999935959315865	WITHOUT_CLASSIFICATION	6.404068413440897E-6	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9999709100922312	WITHOUT_CLASSIFICATION	2.9089907768880365E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999869521349227	WITHOUT_CLASSIFICATION	1.3047865077299705E-4	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998339202489085	WITHOUT_CLASSIFICATION	1.6607975109147986E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999986925892171	WITHOUT_CLASSIFICATION	1.3074107828918865E-5	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9954011012311722	WITHOUT_CLASSIFICATION	0.004598898768827889	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9968395631721908	WITHOUT_CLASSIFICATION	0.0031604368278092478	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9976277983189953	WITHOUT_CLASSIFICATION	0.0023722016810047257	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9996320689837221	WITHOUT_CLASSIFICATION	3.679310162779148E-4	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9997332629491347	WITHOUT_CLASSIFICATION	2.6673705086538544E-4	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9998265936941786	WITHOUT_CLASSIFICATION	1.7340630582138604E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.99999048053986	WITHOUT_CLASSIFICATION	9.519460140054929E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999226370075269	WITHOUT_CLASSIFICATION	7.736299247311916E-5	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999172006917099	WITHOUT_CLASSIFICATION	8.279930829020339E-5	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9997431207322858	WITHOUT_CLASSIFICATION	2.5687926771425225E-4	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999113777401568	WITHOUT_CLASSIFICATION	8.862225984324567E-5	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9996385537361998	WITHOUT_CLASSIFICATION	3.614462638001784E-4	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.9997952809875087	WITHOUT_CLASSIFICATION	2.0471901249116602E-4	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999725777911402	WITHOUT_CLASSIFICATION	2.742220885968953E-5	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9930570029069136	WITHOUT_CLASSIFICATION	0.0069429970930864286	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999141185347378	WITHOUT_CLASSIFICATION	8.588146526218795E-5	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999815046568833	WITHOUT_CLASSIFICATION	1.849534311662544E-5	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999932691711977	WITHOUT_CLASSIFICATION	6.7308288023353015E-6	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.9994882967934122	WITHOUT_CLASSIFICATION	5.117032065878559E-4	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999830731507889	WITHOUT_CLASSIFICATION	1.692684921104277E-5	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999898021402179	WITHOUT_CLASSIFICATION	1.0197859782054018E-5	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9995161178392574	WITHOUT_CLASSIFICATION	4.83882160742612E-4	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999908396763902	WITHOUT_CLASSIFICATION	9.160323609772075E-6	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999987821954165	WITHOUT_CLASSIFICATION	1.2178045834913331E-5	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9998934523358148	WITHOUT_CLASSIFICATION	1.0654766418505687E-4	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999648449944168	WITHOUT_CLASSIFICATION	3.515500558319604E-5	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999280077053387	WITHOUT_CLASSIFICATION	7.199229466125511E-5	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999906345072974	WITHOUT_CLASSIFICATION	9.36549270260162E-5	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999634411785335	WITHOUT_CLASSIFICATION	3.655882146648182E-5	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9537070360230672	WITHOUT_CLASSIFICATION	0.04629296397693286	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999113800110135	WITHOUT_CLASSIFICATION	8.861998898651802E-5	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998895213256263	WITHOUT_CLASSIFICATION	1.1047867437376604E-4	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9997382151989748	WITHOUT_CLASSIFICATION	2.6178480102528336E-4	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.931884839319349	WITHOUT_CLASSIFICATION	0.06811516068065103	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998030141779906	WITHOUT_CLASSIFICATION	1.9698582200936506E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.997923046110115	WITHOUT_CLASSIFICATION	0.002076953889885089	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999564894096036	WITHOUT_CLASSIFICATION	4.351059039647982E-5	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999994870746018	WITHOUT_CLASSIFICATION	5.129253982531089E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996109396538722	WITHOUT_CLASSIFICATION	3.8906034612790915E-4	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9997736899245829	WITHOUT_CLASSIFICATION	2.2631007541706188E-4	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999216459230962	WITHOUT_CLASSIFICATION	7.835407690379148E-5	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9959623866347246	WITHOUT_CLASSIFICATION	0.004037613365275392	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9997736899245829	WITHOUT_CLASSIFICATION	2.2631007541706188E-4	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996109396538722	WITHOUT_CLASSIFICATION	3.8906034612790915E-4	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999216459230962	WITHOUT_CLASSIFICATION	7.835407690379148E-5	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.9998246352395675	WITHOUT_CLASSIFICATION	1.7536476043244462E-4	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999610852641122	WITHOUT_CLASSIFICATION	3.891473588776469E-5	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9995219257690375	WITHOUT_CLASSIFICATION	4.7807423096248155E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998712032824263	WITHOUT_CLASSIFICATION	1.287967175737977E-4	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999809288254078	WITHOUT_CLASSIFICATION	1.9071174592184535E-5	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.848215969257111	WITHOUT_CLASSIFICATION	0.15178403074288904	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998546625358928	WITHOUT_CLASSIFICATION	1.453374641072777E-4	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997979395420667	WITHOUT_CLASSIFICATION	2.0206045793324932E-4	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999995434009781	WITHOUT_CLASSIFICATION	4.5659902197486525E-7	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9986941104045772	WITHOUT_CLASSIFICATION	0.0013058895954227896	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.9999185945801818	WITHOUT_CLASSIFICATION	8.14054198182673E-5	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999721818900011	WITHOUT_CLASSIFICATION	2.7818109998906336E-5	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998939205592804	WITHOUT_CLASSIFICATION	1.0607944071956108E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998712032824263	WITHOUT_CLASSIFICATION	1.287967175737977E-4	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999888615388942	WITHOUT_CLASSIFICATION	1.1138461105806733E-5	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.999990150081315	WITHOUT_CLASSIFICATION	9.849918684985639E-6	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.99895843691393	WITHOUT_CLASSIFICATION	0.0010415630860699686	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999997607094101	WITHOUT_CLASSIFICATION	2.3929058992400224E-7	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9996850901488062	WITHOUT_CLASSIFICATION	3.1490985119378466E-4	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999416611631224	WITHOUT_CLASSIFICATION	5.833883687750548E-5	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9994655681908026	WITHOUT_CLASSIFICATION	5.344318091974814E-4	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999989687025873	WITHOUT_CLASSIFICATION	1.0312974126325874E-6	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998269816158047	WITHOUT_CLASSIFICATION	1.7301838419519667E-4	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999577749271018	WITHOUT_CLASSIFICATION	4.2225072898218884E-5	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999401312086209	WITHOUT_CLASSIFICATION	5.9868791379124955E-5	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999401312086209	WITHOUT_CLASSIFICATION	5.9868791379124955E-5	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999904975117245	WITHOUT_CLASSIFICATION	9.502488275413815E-6	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999904975117245	WITHOUT_CLASSIFICATION	9.502488275413815E-6	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.9995125320374735	WITHOUT_CLASSIFICATION	4.874679625265929E-4	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.99895843691393	WITHOUT_CLASSIFICATION	0.0010415630860699686	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999541732219317	WITHOUT_CLASSIFICATION	4.5826778068409016E-5	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999682735452672	WITHOUT_CLASSIFICATION	3.172645473278166E-5	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999883699271088	WITHOUT_CLASSIFICATION	1.1630072891104716E-5	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999883699271088	WITHOUT_CLASSIFICATION	1.1630072891104716E-5	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999985845044516	WITHOUT_CLASSIFICATION	1.4154955483890307E-5	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999618743940847	WITHOUT_CLASSIFICATION	3.812560591539638E-5	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999829633599984	WITHOUT_CLASSIFICATION	1.70366400016341E-5	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9999899227497425	WITHOUT_CLASSIFICATION	1.0077250257344733E-5	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999209734798223	WITHOUT_CLASSIFICATION	7.902652017766544E-5	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9998127051340329	WITHOUT_CLASSIFICATION	1.872948659670578E-4	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999665387742465	WITHOUT_CLASSIFICATION	3.346122575363055E-5	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999813583929165	WITHOUT_CLASSIFICATION	1.8641607083603453E-5	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9999504224100336	WITHOUT_CLASSIFICATION	4.957758996643278E-5	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.998894461781524	WITHOUT_CLASSIFICATION	0.001105538218475967	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.9999702465047214	WITHOUT_CLASSIFICATION	2.9753495278647123E-5	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.9999577235006157	WITHOUT_CLASSIFICATION	4.227649938419238E-5	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999519953983642	WITHOUT_CLASSIFICATION	4.800460163585051E-5	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.9999942365668588	WITHOUT_CLASSIFICATION	5.763433141158708E-6	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999923749011826	WITHOUT_CLASSIFICATION	7.625098817363008E-6	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9997923197398761	WITHOUT_CLASSIFICATION	2.0768026012384696E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172837063235	WITHOUT_CLASSIFICATION	8.271629367647176E-5	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999396469969708	WITHOUT_CLASSIFICATION	6.0353003029226504E-5	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999287051130915	WITHOUT_CLASSIFICATION	7.129488690842822E-5	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9949207673003568	WITHOUT_CLASSIFICATION	0.005079232699643203	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999395807453274	WITHOUT_CLASSIFICATION	6.0419254672470726E-5	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9956514994239184	WITHOUT_CLASSIFICATION	0.004348500576081618	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998508050996298	WITHOUT_CLASSIFICATION	1.4919490037025208E-4	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999728274694861	WITHOUT_CLASSIFICATION	2.7172530513943983E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999922049571953	WITHOUT_CLASSIFICATION	7.795042804684572E-6	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998193804082898	WITHOUT_CLASSIFICATION	1.806195917101315E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999815046568833	WITHOUT_CLASSIFICATION	1.849534311662544E-5	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999394140155592	WITHOUT_CLASSIFICATION	6.058598444080948E-5	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9978729409947951	WITHOUT_CLASSIFICATION	0.0021270590052048783	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998726275767665	WITHOUT_CLASSIFICATION	1.2737242323349637E-4	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998721025138562	WITHOUT_CLASSIFICATION	1.278974861438317E-4	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999319472223644	WITHOUT_CLASSIFICATION	6.805277763559812E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999319472223644	WITHOUT_CLASSIFICATION	6.805277763559812E-5	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999950159353476	WITHOUT_CLASSIFICATION	4.984064652403019E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9999948754620284	WITHOUT_CLASSIFICATION	5.124537971662546E-6	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999398060384939	WITHOUT_CLASSIFICATION	6.0193961506232426E-5	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999398060384939	WITHOUT_CLASSIFICATION	6.0193961506232426E-5	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997167763226208	WITHOUT_CLASSIFICATION	2.832236773792063E-4	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9994542208255731	WITHOUT_CLASSIFICATION	5.457791744268734E-4	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.9982788266583196	WITHOUT_CLASSIFICATION	0.0017211733416804163	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999958114633428	WITHOUT_CLASSIFICATION	4.188536657181814E-6	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9999180023044951	WITHOUT_CLASSIFICATION	8.199769550479644E-5	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999217008172523	WITHOUT_CLASSIFICATION	7.829918274777101E-5	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999538381110104	WITHOUT_CLASSIFICATION	4.616188898969384E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999047551939745	WITHOUT_CLASSIFICATION	9.524480602550801E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999047551939745	WITHOUT_CLASSIFICATION	9.524480602550801E-5	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999972078048893	WITHOUT_CLASSIFICATION	2.7921951107079497E-5	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999621219013984	WITHOUT_CLASSIFICATION	3.787809860165942E-5	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999621219013984	WITHOUT_CLASSIFICATION	3.787809860165942E-5	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999936056429867	WITHOUT_CLASSIFICATION	6.39435701328758E-5	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999329510748898	WITHOUT_CLASSIFICATION	6.704892511019712E-5	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.9999766972779306	WITHOUT_CLASSIFICATION	2.3302722069447045E-5	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999783699878422	WITHOUT_CLASSIFICATION	2.1630012157851133E-5	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999772570235097	WITHOUT_CLASSIFICATION	2.2742976490277303E-5	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9964521943684503	WITHOUT_CLASSIFICATION	0.003547805631549792	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998221895560153	WITHOUT_CLASSIFICATION	1.7781044398461072E-4	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999582482389932	WITHOUT_CLASSIFICATION	4.1751761006765146E-5	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.999504191688272	WITHOUT_CLASSIFICATION	4.958083117280829E-4	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9976393071233968	WITHOUT_CLASSIFICATION	0.002360692876603183	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999746683875836	WITHOUT_CLASSIFICATION	2.5331612416254233E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999904797882281	WITHOUT_CLASSIFICATION	9.520211771824701E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999904797882281	WITHOUT_CLASSIFICATION	9.520211771824701E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999904797882281	WITHOUT_CLASSIFICATION	9.520211771824701E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999904797882281	WITHOUT_CLASSIFICATION	9.520211771824701E-6	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999318645921407	WITHOUT_CLASSIFICATION	6.813540785937355E-5	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9954495915266166	WITHOUT_CLASSIFICATION	0.004550408473383326	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9999938708157444	WITHOUT_CLASSIFICATION	6.1291842556218355E-6	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999936177248054	WITHOUT_CLASSIFICATION	6.382275194601788E-5	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9970650247296269	WITHOUT_CLASSIFICATION	0.002934975270373136	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999936737557088	WITHOUT_CLASSIFICATION	6.326244291115449E-6	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998151006136894	WITHOUT_CLASSIFICATION	1.84899386310551E-4	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997420223343523	WITHOUT_CLASSIFICATION	2.5797766564779974E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999936737557088	WITHOUT_CLASSIFICATION	6.326244291115449E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999936737557088	WITHOUT_CLASSIFICATION	6.326244291115449E-6	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9997809632586364	WITHOUT_CLASSIFICATION	2.1903674136350185E-4	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999449698202773	WITHOUT_CLASSIFICATION	5.5030179722729625E-5	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999422892937249	WITHOUT_CLASSIFICATION	5.77107062750896E-5	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999411964510863	WITHOUT_CLASSIFICATION	5.880354891370155E-5	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9996845119525537	WITHOUT_CLASSIFICATION	3.1548804744632606E-4	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999847600230236	WITHOUT_CLASSIFICATION	1.5239976976407242E-4	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999923991677099	WITHOUT_CLASSIFICATION	7.600832290184314E-6	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999411964510863	WITHOUT_CLASSIFICATION	5.880354891370155E-5	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999811105614025	WITHOUT_CLASSIFICATION	1.8889438597584617E-5	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998079054963898	WITHOUT_CLASSIFICATION	1.920945036101576E-4	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999947508966239	WITHOUT_CLASSIFICATION	5.2491033760329824E-6	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9995655763487048	WITHOUT_CLASSIFICATION	4.344236512952204E-4	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999824976470908	WITHOUT_CLASSIFICATION	1.7502352909208978E-4	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.99887303725351	WITHOUT_CLASSIFICATION	0.001126962746490032	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999982651934409	WITHOUT_CLASSIFICATION	1.734806559103035E-5	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999712208166086	WITHOUT_CLASSIFICATION	2.8779183391449664E-5	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999797223213208	WITHOUT_CLASSIFICATION	2.027767867913588E-5	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9998678485876326	WITHOUT_CLASSIFICATION	1.3215141236739316E-4	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999797223213208	WITHOUT_CLASSIFICATION	2.027767867913588E-5	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999430080254852	WITHOUT_CLASSIFICATION	5.69919745147925E-5	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9967482046680508	WITHOUT_CLASSIFICATION	0.0032517953319491436	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996651498664961	WITHOUT_CLASSIFICATION	3.3485013350387954E-4	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997775283672572	WITHOUT_CLASSIFICATION	2.2247163274271035E-4	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998528681601649	WITHOUT_CLASSIFICATION	1.471318398350506E-4	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999920079225101	WITHOUT_CLASSIFICATION	7.992077489907243E-6	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999149358943592	WITHOUT_CLASSIFICATION	8.506410564088723E-5	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998766920733009	WITHOUT_CLASSIFICATION	1.233079266991966E-4	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999149358943592	WITHOUT_CLASSIFICATION	8.506410564088723E-5	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999005045331467	WITHOUT_CLASSIFICATION	9.949546685323144E-5	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999815336404898	WITHOUT_CLASSIFICATION	1.846635951024778E-5	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9998975044580077	WITHOUT_CLASSIFICATION	1.024955419922158E-4	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999457901511113	WITHOUT_CLASSIFICATION	5.4209848888829505E-5	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999315176970636	WITHOUT_CLASSIFICATION	6.848230293635756E-5	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999010962077688	WITHOUT_CLASSIFICATION	9.890379223122211E-5	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999835259685343	WITHOUT_CLASSIFICATION	1.6474031465626676E-5	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999920079225101	WITHOUT_CLASSIFICATION	7.992077489907243E-6	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998766920733009	WITHOUT_CLASSIFICATION	1.233079266991966E-4	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999005045331467	WITHOUT_CLASSIFICATION	9.949546685323144E-5	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999676019052958	WITHOUT_CLASSIFICATION	3.23980947041821E-5	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9999663627748081	WITHOUT_CLASSIFICATION	3.363722519185301E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9995034485589038	WITHOUT_CLASSIFICATION	4.965514410961014E-4	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9995982583814927	WITHOUT_CLASSIFICATION	4.0174161850721935E-4	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9997656611529229	WITHOUT_CLASSIFICATION	2.3433884707700037E-4	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998410426404823	WITHOUT_CLASSIFICATION	1.5895735951762147E-4	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999683387099707	WITHOUT_CLASSIFICATION	3.1661290029222204E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172837063235	WITHOUT_CLASSIFICATION	8.271629367647176E-5	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999815336404898	WITHOUT_CLASSIFICATION	1.846635951024778E-5	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999305881442482	WITHOUT_CLASSIFICATION	6.941185575184673E-5	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999516931926594	WITHOUT_CLASSIFICATION	4.830680734063427E-5	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9991217258974585	WITHOUT_CLASSIFICATION	8.782741025414241E-4	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999611510193454	WITHOUT_CLASSIFICATION	3.8848980654662426E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172837063235	WITHOUT_CLASSIFICATION	8.271629367647176E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999639269589186	WITHOUT_CLASSIFICATION	3.6073041081409255E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172837063235	WITHOUT_CLASSIFICATION	8.271629367647176E-5	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999874387688176	WITHOUT_CLASSIFICATION	1.2561231182471567E-5	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999142156270607	WITHOUT_CLASSIFICATION	8.578437293928284E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999127049902505	WITHOUT_CLASSIFICATION	8.729500974940001E-5	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999746391125719	WITHOUT_CLASSIFICATION	2.536088742813924E-5	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999791108411048	WITHOUT_CLASSIFICATION	2.0889158895158867E-5	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.9999214940801586	WITHOUT_CLASSIFICATION	7.85059198413704E-5	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999393165228021	WITHOUT_CLASSIFICATION	6.068347719793355E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998041987681519	WITHOUT_CLASSIFICATION	1.95801231848031E-4	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999765685460348	WITHOUT_CLASSIFICATION	2.3431453965290933E-5	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.9999279294603856	WITHOUT_CLASSIFICATION	7.207053961443439E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9997566544788355	WITHOUT_CLASSIFICATION	2.433455211645261E-4	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.999922506508202	WITHOUT_CLASSIFICATION	7.749349179793149E-5	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9857376555018507	WITHOUT_CLASSIFICATION	0.014262344498149282	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.9998795145495524	WITHOUT_CLASSIFICATION	1.2048545044761035E-4	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9994287032902938	WITHOUT_CLASSIFICATION	5.712967097062236E-4	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999974121327476	WITHOUT_CLASSIFICATION	2.5878672523730206E-6	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999860056055987	WITHOUT_CLASSIFICATION	1.3994394401217448E-5	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9997997813424944	WITHOUT_CLASSIFICATION	2.0021865750559633E-4	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999884317238316	WITHOUT_CLASSIFICATION	1.1568276168374297E-5	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9998118657130629	WITHOUT_CLASSIFICATION	1.8813428693713257E-4	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994552271157527	WITHOUT_CLASSIFICATION	5.447728842472545E-4	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994552271157527	WITHOUT_CLASSIFICATION	5.447728842472545E-4	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999662883263789	WITHOUT_CLASSIFICATION	3.371167362114176E-5	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998213241930818	WITHOUT_CLASSIFICATION	1.7867580691828847E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999905537544108	WITHOUT_CLASSIFICATION	9.446245589162285E-6	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999990150573522	WITHOUT_CLASSIFICATION	9.84942647791825E-6	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997607707102004	WITHOUT_CLASSIFICATION	2.3922928979969792E-4	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999941985837135	WITHOUT_CLASSIFICATION	5.801416286504029E-5	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999319668932698	WITHOUT_CLASSIFICATION	6.803310673019948E-5	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9979032338668311	WITHOUT_CLASSIFICATION	0.002096766133168821	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.9968267155540012	WITHOUT_CLASSIFICATION	0.003173284445998982	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999597044115635	WITHOUT_CLASSIFICATION	4.029558843665529E-5	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999396249772313	WITHOUT_CLASSIFICATION	6.037502276864248E-5	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.9999845811014303	WITHOUT_CLASSIFICATION	1.541889856980036E-5	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998298398292348	WITHOUT_CLASSIFICATION	1.7016017076523803E-4	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999723743177447	WITHOUT_CLASSIFICATION	2.7625682255438695E-5	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999925229324673	WITHOUT_CLASSIFICATION	7.477067532639155E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999196497111964	WITHOUT_CLASSIFICATION	8.035028880357098E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999706613623406	WITHOUT_CLASSIFICATION	2.9338637659409656E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999706613623406	WITHOUT_CLASSIFICATION	2.9338637659409656E-5	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999765226755576	WITHOUT_CLASSIFICATION	2.3477324442432886E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998041987681519	WITHOUT_CLASSIFICATION	1.95801231848031E-4	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9981380547058524	WITHOUT_CLASSIFICATION	0.0018619452941475653	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999861407510575	WITHOUT_CLASSIFICATION	1.3859248942400872E-5	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9996390253293063	WITHOUT_CLASSIFICATION	3.609746706937492E-4	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998052878505329	WITHOUT_CLASSIFICATION	1.9471214946704645E-4	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.999958128453505	WITHOUT_CLASSIFICATION	4.1871546495132926E-5	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9999935833726928	WITHOUT_CLASSIFICATION	6.416627307186254E-6	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9998997333970585	WITHOUT_CLASSIFICATION	1.0026660294147792E-4	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998536699564573	WITHOUT_CLASSIFICATION	1.4633004354274267E-4	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999747902315971	WITHOUT_CLASSIFICATION	2.5209768402828964E-5	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999314748967272	WITHOUT_CLASSIFICATION	6.852510327280903E-5	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999579308044291	WITHOUT_CLASSIFICATION	4.206919557090933E-5	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999287146176786	WITHOUT_CLASSIFICATION	7.12853823213671E-5	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999996782181154	WITHOUT_CLASSIFICATION	3.217818845440003E-7	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999643361304417	WITHOUT_CLASSIFICATION	3.566386955827836E-5	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999770787062917	WITHOUT_CLASSIFICATION	2.29212937082932E-5	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999885763096297	WITHOUT_CLASSIFICATION	1.1423690370399595E-5	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999177768494164	WITHOUT_CLASSIFICATION	8.222315058359385E-4	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999992829273101	WITHOUT_CLASSIFICATION	7.170726899632956E-7	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9996104652540866	WITHOUT_CLASSIFICATION	3.895347459134012E-4	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999500928051344	WITHOUT_CLASSIFICATION	4.9907194865769925E-5	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9955829110358826	WITHOUT_CLASSIFICATION	0.004417088964117399	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999699469118206	WITHOUT_CLASSIFICATION	3.0053088179403952E-5	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999456155673986	WITHOUT_CLASSIFICATION	5.438443260142797E-5	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999249000043534	WITHOUT_CLASSIFICATION	7.509999564659529E-5	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9997260977810294	WITHOUT_CLASSIFICATION	2.739022189706521E-4	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9996509014013253	WITHOUT_CLASSIFICATION	3.4909859867471445E-4	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999807678151046	WITHOUT_CLASSIFICATION	1.9232184895519364E-5	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9979269289974956	WITHOUT_CLASSIFICATION	0.0020730710025043744	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998739452831974	WITHOUT_CLASSIFICATION	1.2605471680273109E-4	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.999897357088511	WITHOUT_CLASSIFICATION	1.0264291148897162E-4	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.999991997023314	WITHOUT_CLASSIFICATION	8.002976685954429E-6	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998874349089882	WITHOUT_CLASSIFICATION	1.1256509101182894E-4	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9998201055023951	WITHOUT_CLASSIFICATION	1.798944976049192E-4	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9992994583036429	WITHOUT_CLASSIFICATION	7.00541696357158E-4	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9991554808520919	WITHOUT_CLASSIFICATION	8.445191479081488E-4	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9846093707650424	WITHOUT_CLASSIFICATION	0.015390629234957551	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998036396520528	WITHOUT_CLASSIFICATION	1.9636034794724225E-4	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998036396520528	WITHOUT_CLASSIFICATION	1.9636034794724225E-4	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999407207638749	WITHOUT_CLASSIFICATION	5.927923612519644E-5	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999614596855152	WITHOUT_CLASSIFICATION	3.854031448481526E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999747279076872	WITHOUT_CLASSIFICATION	2.5272092312842003E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999747279076872	WITHOUT_CLASSIFICATION	2.5272092312842003E-5	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999875214415811	WITHOUT_CLASSIFICATION	1.2478558418928089E-5	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999577507828713	WITHOUT_CLASSIFICATION	4.224921712871663E-5	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999574986789839	WITHOUT_CLASSIFICATION	4.250132101604414E-5	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999966381211921	WITHOUT_CLASSIFICATION	3.3618788078519693E-6	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999876374646906	WITHOUT_CLASSIFICATION	1.2362535309392564E-4	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998730301418793	WITHOUT_CLASSIFICATION	1.2696985812055473E-4	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999518368944702	WITHOUT_CLASSIFICATION	4.816310552977953E-5	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999518368944702	WITHOUT_CLASSIFICATION	4.816310552977953E-5	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998730301418793	WITHOUT_CLASSIFICATION	1.2696985812055473E-4	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9998816812659912	WITHOUT_CLASSIFICATION	1.1831873400875304E-4	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999173178436392	WITHOUT_CLASSIFICATION	8.268215636076562E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999106147796032	WITHOUT_CLASSIFICATION	8.938522039676282E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999106147796032	WITHOUT_CLASSIFICATION	8.938522039676282E-5	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.99994336333261	WITHOUT_CLASSIFICATION	5.66366673898546E-5	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999464057296332	WITHOUT_CLASSIFICATION	5.359427036681939E-5	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999677278167475	WITHOUT_CLASSIFICATION	3.2272183252572403E-5	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999900387920296	WITHOUT_CLASSIFICATION	9.961207970258502E-6	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999707129720635	WITHOUT_CLASSIFICATION	2.9287027936434374E-5	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999208128292261	WITHOUT_CLASSIFICATION	7.918717077391743E-5	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999360090661974	WITHOUT_CLASSIFICATION	6.399093380269397E-5	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999747553199857	WITHOUT_CLASSIFICATION	2.5244680014360618E-5	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999959804454333	WITHOUT_CLASSIFICATION	4.01955456681409E-6	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999037263301528	WITHOUT_CLASSIFICATION	9.62736698472405E-5	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9998828461897439	WITHOUT_CLASSIFICATION	1.1715381025623542E-4	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9975402161364828	WITHOUT_CLASSIFICATION	0.002459783863517094	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999661913198403	WITHOUT_CLASSIFICATION	3.380868015961459E-5	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999651766900374	WITHOUT_CLASSIFICATION	3.482330996260398E-5	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9999917759190343	WITHOUT_CLASSIFICATION	8.224080965705812E-6	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9994853123851248	WITHOUT_CLASSIFICATION	5.146876148752003E-4	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998521201219169	WITHOUT_CLASSIFICATION	1.478798780831174E-4	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9997447305066445	WITHOUT_CLASSIFICATION	2.552694933555999E-4	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999670646783223	WITHOUT_CLASSIFICATION	3.293532167769109E-5	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9995054531161354	WITHOUT_CLASSIFICATION	4.945468838646751E-4	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9991653660084154	WITHOUT_CLASSIFICATION	8.346339915845917E-4	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999489393531127	WITHOUT_CLASSIFICATION	5.106064688735282E-5	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999458202926875	WITHOUT_CLASSIFICATION	5.417970731241975E-5	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999709967266378	WITHOUT_CLASSIFICATION	2.9003273362201905E-4	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9999114213335085	WITHOUT_CLASSIFICATION	8.857866649155779E-5	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999508865882321	WITHOUT_CLASSIFICATION	4.9113411767924413E-5	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999468358545545	WITHOUT_CLASSIFICATION	5.316414544543346E-5	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999991864273762	WITHOUT_CLASSIFICATION	8.135726237096862E-7	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999855548106457	WITHOUT_CLASSIFICATION	1.4445189354396466E-5	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999975185326335	WITHOUT_CLASSIFICATION	2.481467366390978E-6	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999829517415028	WITHOUT_CLASSIFICATION	1.7048258497274662E-5	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999939548320909	WITHOUT_CLASSIFICATION	6.045167909218058E-6	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.9998835207329371	WITHOUT_CLASSIFICATION	1.164792670630052E-4	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999966657691598	WITHOUT_CLASSIFICATION	3.3342308401436037E-6	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999168697412572	WITHOUT_CLASSIFICATION	8.313025874274129E-5	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999934333898913	WITHOUT_CLASSIFICATION	6.566610108702944E-5	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999210847809755	WITHOUT_CLASSIFICATION	7.891521902439802E-5	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999492357001997	WITHOUT_CLASSIFICATION	5.076429980033566E-5	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9987503122570612	WITHOUT_CLASSIFICATION	0.0012496877429387535	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.999931761018515	WITHOUT_CLASSIFICATION	6.823898148503564E-5	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.99996063403736	WITHOUT_CLASSIFICATION	3.93659626400144E-5	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999804932471762	WITHOUT_CLASSIFICATION	1.95067528237793E-5	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999171419761689	WITHOUT_CLASSIFICATION	8.285802383104805E-5	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.9988048469383268	WITHOUT_CLASSIFICATION	0.0011951530616732338	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999804210109209	WITHOUT_CLASSIFICATION	1.957898907908592E-5	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9998658223778616	WITHOUT_CLASSIFICATION	1.3417762213845412E-4	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999699709399943	WITHOUT_CLASSIFICATION	3.002906000567596E-5	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998782731460965	WITHOUT_CLASSIFICATION	1.2172685390347624E-4	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999908870766124	WITHOUT_CLASSIFICATION	9.112923387542983E-6	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999781326127536	WITHOUT_CLASSIFICATION	2.1867387246509306E-5	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999876293760825	WITHOUT_CLASSIFICATION	1.2370623917451342E-5	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9996109859533681	WITHOUT_CLASSIFICATION	3.890140466318918E-4	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999696068225422	WITHOUT_CLASSIFICATION	3.039317745781207E-5	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9984883463093185	WITHOUT_CLASSIFICATION	0.0015116536906814818	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999331612724764	WITHOUT_CLASSIFICATION	6.68387275235547E-5	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9989914649667342	WITHOUT_CLASSIFICATION	0.0010085350332657934	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999782999673598	WITHOUT_CLASSIFICATION	2.1700032640266872E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999854887240146	WITHOUT_CLASSIFICATION	1.4511275985422718E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999854887240146	WITHOUT_CLASSIFICATION	1.4511275985422718E-5	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999903383327268	WITHOUT_CLASSIFICATION	9.661667273168524E-6	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9996557807912226	WITHOUT_CLASSIFICATION	3.442192087773533E-4	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999896453424791	WITHOUT_CLASSIFICATION	1.0354657520804018E-5	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999518151359704	WITHOUT_CLASSIFICATION	4.818486402963697E-5	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999257928765818	WITHOUT_CLASSIFICATION	7.420712341817438E-5	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9997895116913461	WITHOUT_CLASSIFICATION	2.1048830865391904E-4	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999955745659831	WITHOUT_CLASSIFICATION	4.425434016927937E-6	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999576300729579	WITHOUT_CLASSIFICATION	4.236992704197273E-5	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9997532519394787	WITHOUT_CLASSIFICATION	2.467480605213143E-4	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999747604639786	WITHOUT_CLASSIFICATION	2.523953602137444E-5	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999746599144496	WITHOUT_CLASSIFICATION	2.534008555049125E-5	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9996961613250275	WITHOUT_CLASSIFICATION	3.0383867497258614E-4	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999994682129342	WITHOUT_CLASSIFICATION	5.317870658102351E-7	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999994980280651	WITHOUT_CLASSIFICATION	5.019719348319876E-7	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999212163008157	WITHOUT_CLASSIFICATION	7.878369918430371E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999212163008157	WITHOUT_CLASSIFICATION	7.878369918430371E-5	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999382010663531	WITHOUT_CLASSIFICATION	6.179893364697807E-5	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.999363625644181	WITHOUT_CLASSIFICATION	6.363743558189493E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999535188769734	WITHOUT_CLASSIFICATION	4.648112302661006E-5	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999861028226005	WITHOUT_CLASSIFICATION	1.3897177399477768E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999913699846177	WITHOUT_CLASSIFICATION	8.630015382312486E-6	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999941021001428	WITHOUT_CLASSIFICATION	5.8978998572063264E-5	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999342582147717	WITHOUT_CLASSIFICATION	6.574178522836854E-5	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9998730798725093	WITHOUT_CLASSIFICATION	1.2692012749082143E-4	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9970849977618843	WITHOUT_CLASSIFICATION	0.002915002238115726	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999986033814536	WITHOUT_CLASSIFICATION	1.3966185463718238E-6	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999413846106685	WITHOUT_CLASSIFICATION	5.8615389331629104E-5	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999759896613392	WITHOUT_CLASSIFICATION	2.401033866088848E-5	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9998705793581824	WITHOUT_CLASSIFICATION	1.2942064181769723E-4	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999956249896128	WITHOUT_CLASSIFICATION	4.375010387189182E-6	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999153761955393	WITHOUT_CLASSIFICATION	8.462380446070764E-5	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999260206442253	WITHOUT_CLASSIFICATION	7.397935577465998E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9998283971876288	WITHOUT_CLASSIFICATION	1.7160281237111114E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999867971005301	WITHOUT_CLASSIFICATION	1.3202899469805704E-5	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9998817303474331	WITHOUT_CLASSIFICATION	1.182696525668359E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9996200201110086	WITHOUT_CLASSIFICATION	3.799798889914467E-4	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.99999421851437	WITHOUT_CLASSIFICATION	5.78148562996837E-6	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999288506653732	WITHOUT_CLASSIFICATION	7.114933462682673E-5	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9998063713228519	WITHOUT_CLASSIFICATION	1.9362867714807546E-4	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999982150817469	WITHOUT_CLASSIFICATION	1.784918253106374E-6	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.99999140732871	WITHOUT_CLASSIFICATION	8.592671290045142E-6	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9999104414695823	WITHOUT_CLASSIFICATION	8.955853041762212E-5	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997681994162216	WITHOUT_CLASSIFICATION	2.3180058377837782E-4	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999125957463632	WITHOUT_CLASSIFICATION	8.74042536368148E-5	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9998892367487802	WITHOUT_CLASSIFICATION	1.1076325121982539E-4	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9995692493634029	WITHOUT_CLASSIFICATION	4.307506365971043E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999599457023936	WITHOUT_CLASSIFICATION	4.0054297606386405E-4	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998557913979462	WITHOUT_CLASSIFICATION	1.4420860205380804E-4	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.999803372611268	WITHOUT_CLASSIFICATION	1.9662738873197323E-4	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9998529199801672	WITHOUT_CLASSIFICATION	1.4708001983271515E-4	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999955426771125	WITHOUT_CLASSIFICATION	4.457322887488802E-6	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9995621348376829	WITHOUT_CLASSIFICATION	4.378651623171138E-4	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999488850692361	WITHOUT_CLASSIFICATION	5.111493076383357E-5	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998527701065313	WITHOUT_CLASSIFICATION	1.4722989346881857E-4	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999577893173265	WITHOUT_CLASSIFICATION	4.221068267350178E-5	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9998268999102876	WITHOUT_CLASSIFICATION	1.7310008971233292E-4	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9989572988438173	WITHOUT_CLASSIFICATION	0.0010427011561826539	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999690153677555	WITHOUT_CLASSIFICATION	3.098463224450979E-5	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9837194006834413	WITHOUT_CLASSIFICATION	0.016280599316558623	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9837194006834413	WITHOUT_CLASSIFICATION	0.016280599316558623	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999873810626116	WITHOUT_CLASSIFICATION	1.261893738825794E-5	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9633919952648738	WITHOUT_CLASSIFICATION	0.03660800473512626	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999884294420107	WITHOUT_CLASSIFICATION	1.1570557989386661E-5	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999671495588918	WITHOUT_CLASSIFICATION	3.2850441108174515E-5	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9996583349959555	WITHOUT_CLASSIFICATION	3.4166500404456834E-4	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9998933971808223	WITHOUT_CLASSIFICATION	1.0660281917775321E-4	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999743836836297	WITHOUT_CLASSIFICATION	2.561631637037555E-5	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999290338787276	WITHOUT_CLASSIFICATION	7.096612127249393E-5	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9990803298762155	WITHOUT_CLASSIFICATION	9.196701237843534E-4	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999816562357733	WITHOUT_CLASSIFICATION	1.834376422671321E-4	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999021085418058	WITHOUT_CLASSIFICATION	9.789145819414674E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992947298611842	WITHOUT_CLASSIFICATION	7.052701388157206E-4	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9997576830159511	WITHOUT_CLASSIFICATION	2.4231698404893353E-4	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999631100189476	WITHOUT_CLASSIFICATION	3.688998105239607E-5	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9995642410932467	WITHOUT_CLASSIFICATION	4.357589067533056E-4	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.999826978044704	WITHOUT_CLASSIFICATION	1.7302195529608143E-4	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999694670887811	WITHOUT_CLASSIFICATION	3.053291121891894E-5	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9992725267951318	WITHOUT_CLASSIFICATION	7.274732048681118E-4	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9994535951973227	WITHOUT_CLASSIFICATION	5.464048026772698E-4	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.998483139955346	WITHOUT_CLASSIFICATION	0.0015168600446540082	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.996519564956602	WITHOUT_CLASSIFICATION	0.003480435043398051	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9997592684303861	WITHOUT_CLASSIFICATION	2.4073156961375948E-4	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999808063244676	WITHOUT_CLASSIFICATION	1.9193675532427408E-5	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999811909334658	WITHOUT_CLASSIFICATION	1.8809066534197587E-5	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999473317515851	WITHOUT_CLASSIFICATION	5.266824841490246E-5	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9998572476927075	WITHOUT_CLASSIFICATION	1.4275230729260657E-4	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999948505583756	WITHOUT_CLASSIFICATION	5.149441624394902E-5	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9998996179541735	WITHOUT_CLASSIFICATION	1.00382045826409E-4	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9910281300420146	WITHOUT_CLASSIFICATION	0.008971869957985308	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999507968009432	WITHOUT_CLASSIFICATION	4.920319905663286E-5	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9993150238863204	WITHOUT_CLASSIFICATION	6.849761136795768E-4	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999967447297243	WITHOUT_CLASSIFICATION	3.2552702757338865E-6	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999797592426879	WITHOUT_CLASSIFICATION	2.0240757312084533E-5	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9995580127638636	WITHOUT_CLASSIFICATION	4.41987236136414E-4	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998284833682859	WITHOUT_CLASSIFICATION	1.7151663171401105E-4	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9998124764089031	WITHOUT_CLASSIFICATION	1.875235910969126E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997261486024553	WITHOUT_CLASSIFICATION	2.738513975446139E-4	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9998847240714921	WITHOUT_CLASSIFICATION	1.152759285078469E-4	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998773814868382	WITHOUT_CLASSIFICATION	1.226185131617736E-4	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999937069462794	WITHOUT_CLASSIFICATION	6.2930537206173885E-6	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999789605616842	WITHOUT_CLASSIFICATION	2.103943831582527E-5	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.999938881685261	WITHOUT_CLASSIFICATION	6.111831473903524E-5	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9995462820235477	WITHOUT_CLASSIFICATION	4.537179764523097E-4	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9990882000324399	WITHOUT_CLASSIFICATION	9.117999675601056E-4	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999649548351843	WITHOUT_CLASSIFICATION	3.5045164815762364E-5	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999918473174924	WITHOUT_CLASSIFICATION	8.152682507747256E-6	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999984663416895	WITHOUT_CLASSIFICATION	1.5336583104095938E-6	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9996107617810783	WITHOUT_CLASSIFICATION	3.892382189216648E-4	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9994269421733688	WITHOUT_CLASSIFICATION	5.730578266311704E-4	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999994682129342	WITHOUT_CLASSIFICATION	5.317870658102351E-7	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9997384713398475	WITHOUT_CLASSIFICATION	2.6152866015254924E-4	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999943765955275	WITHOUT_CLASSIFICATION	5.623404472545905E-6	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998731462355405	WITHOUT_CLASSIFICATION	1.2685376445948954E-4	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999113033396484	WITHOUT_CLASSIFICATION	8.869666035154911E-5	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999984043789155	WITHOUT_CLASSIFICATION	1.5956210844732816E-6	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9996789701710284	WITHOUT_CLASSIFICATION	3.2102982897171166E-4	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9988752443613296	WITHOUT_CLASSIFICATION	0.0011247556386703669	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.864442375878214	WITHOUT_CLASSIFICATION	0.1355576241217859	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999898597863555	WITHOUT_CLASSIFICATION	1.0140213644415821E-5	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9995370786017533	WITHOUT_CLASSIFICATION	4.6292139824668615E-4	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.999999314137924	WITHOUT_CLASSIFICATION	6.858620760048899E-7	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9969972198397252	WITHOUT_CLASSIFICATION	0.0030027801602748616	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9986130133385571	WITHOUT_CLASSIFICATION	0.0013869866614428783	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999798192628109	WITHOUT_CLASSIFICATION	2.0180737189182416E-5	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9982844449864372	WITHOUT_CLASSIFICATION	0.0017155550135628192	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998723380662078	WITHOUT_CLASSIFICATION	1.276619337921622E-4	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999010962077688	WITHOUT_CLASSIFICATION	9.890379223122211E-5	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999545400240157	WITHOUT_CLASSIFICATION	4.545997598425117E-5	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999976523166562	WITHOUT_CLASSIFICATION	2.347683343811695E-6	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9994720498155284	WITHOUT_CLASSIFICATION	5.279501844715919E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998723380662078	WITHOUT_CLASSIFICATION	1.276619337921622E-4	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9992473503180266	WITHOUT_CLASSIFICATION	7.526496819734836E-4	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.999940397264232	WITHOUT_CLASSIFICATION	5.960273576808388E-5	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999989525629626	WITHOUT_CLASSIFICATION	1.047437037406494E-5	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9992267086762546	WITHOUT_CLASSIFICATION	7.732913237454129E-4	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999466011026341	WITHOUT_CLASSIFICATION	5.3398897365923024E-5	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9966437771645095	WITHOUT_CLASSIFICATION	0.003356222835490483	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999947135462436	WITHOUT_CLASSIFICATION	5.286453756484633E-6	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9998796252212384	WITHOUT_CLASSIFICATION	1.2037477876150585E-4	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999847303145724	WITHOUT_CLASSIFICATION	1.5269685427682818E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9753978427065895	WITHOUT_CLASSIFICATION	0.024602157293410545	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998212559919866	WITHOUT_CLASSIFICATION	1.7874400801337067E-4	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.99771401707132	WITHOUT_CLASSIFICATION	0.002285982928679992	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999504600789811	WITHOUT_CLASSIFICATION	4.953992101883764E-5	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999532078165624	WITHOUT_CLASSIFICATION	4.679218343762946E-5	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999658024586583	WITHOUT_CLASSIFICATION	3.419754134162573E-5	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9997681501947634	WITHOUT_CLASSIFICATION	2.3184980523668368E-4	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9955829110358826	WITHOUT_CLASSIFICATION	0.004417088964117399	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9986434485808576	WITHOUT_CLASSIFICATION	0.00135655141914239	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.999984114910316	WITHOUT_CLASSIFICATION	1.5885089684022617E-5	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9990385801743957	WITHOUT_CLASSIFICATION	9.614198256041983E-4	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9969416022255551	WITHOUT_CLASSIFICATION	0.0030583977744448967	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999899733593849	WITHOUT_CLASSIFICATION	1.0026640615065032E-5	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999865015048839	WITHOUT_CLASSIFICATION	1.3498495116100797E-4	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9989288578642981	WITHOUT_CLASSIFICATION	0.0010711421357019026	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999680229367	WITHOUT_CLASSIFICATION	3.197706325489703E-8	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999979209857857	WITHOUT_CLASSIFICATION	2.0790142142569763E-6	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999304314986013	WITHOUT_CLASSIFICATION	6.956850139864989E-5	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998435038136513	WITHOUT_CLASSIFICATION	1.564961863487262E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999503147256072	WITHOUT_CLASSIFICATION	4.968527439286639E-5	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9943754548662368	WITHOUT_CLASSIFICATION	0.005624545133763164	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999908155348181	WITHOUT_CLASSIFICATION	9.184465181974633E-6	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9999558985277214	WITHOUT_CLASSIFICATION	4.410147227862976E-5	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998350668387458	WITHOUT_CLASSIFICATION	1.649331612543007E-4	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9989014115014443	WITHOUT_CLASSIFICATION	0.0010985884985556858	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999670529336869	WITHOUT_CLASSIFICATION	3.294706631314566E-5	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999990282753984	WITHOUT_CLASSIFICATION	9.717246014857166E-7	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999992393719085	WITHOUT_CLASSIFICATION	7.606280914628819E-7	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999570076143034	WITHOUT_CLASSIFICATION	4.299238569662747E-5	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999276253472494	WITHOUT_CLASSIFICATION	7.237465275054541E-5	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999666213010505	WITHOUT_CLASSIFICATION	3.3378698949507326E-5	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998426632611004	WITHOUT_CLASSIFICATION	1.573367388995271E-4	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999797777784845	WITHOUT_CLASSIFICATION	2.0222221515617268E-5	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999797777784845	WITHOUT_CLASSIFICATION	2.0222221515617268E-5	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9993985889510324	WITHOUT_CLASSIFICATION	6.014110489676849E-4	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999988042938624	WITHOUT_CLASSIFICATION	1.1957061375936616E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999403706966907	WITHOUT_CLASSIFICATION	5.962930330916931E-5	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999967722429508	WITHOUT_CLASSIFICATION	3.2277570491015264E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999958114633428	WITHOUT_CLASSIFICATION	4.188536657181814E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999958114633428	WITHOUT_CLASSIFICATION	4.188536657181814E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999908291797422	WITHOUT_CLASSIFICATION	9.170820257804396E-6	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999874967640265	WITHOUT_CLASSIFICATION	1.2503235973557902E-5	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9995143113046969	WITHOUT_CLASSIFICATION	4.856886953029751E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998428604769648	WITHOUT_CLASSIFICATION	1.5713952303509184E-4	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999010962077688	WITHOUT_CLASSIFICATION	9.890379223122211E-5	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999767982688871	WITHOUT_CLASSIFICATION	2.3201731112990465E-5	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999864575995073	WITHOUT_CLASSIFICATION	1.3542400492735002E-5	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9997392011141317	WITHOUT_CLASSIFICATION	2.607988858683336E-4	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9998475155350156	WITHOUT_CLASSIFICATION	1.524844649844633E-4	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999463237174763	WITHOUT_CLASSIFICATION	5.3676282523692564E-5	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999520827851356	WITHOUT_CLASSIFICATION	4.79172148644273E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999200146518787	WITHOUT_CLASSIFICATION	7.998534812130368E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999200146518787	WITHOUT_CLASSIFICATION	7.998534812130368E-5	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9997681501947634	WITHOUT_CLASSIFICATION	2.3184980523668368E-4	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999990465375768	WITHOUT_CLASSIFICATION	9.534624232068182E-6	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999911514450776	WITHOUT_CLASSIFICATION	8.848554922455672E-6	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999745511818304	WITHOUT_CLASSIFICATION	2.5448818169639925E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999749099277135	WITHOUT_CLASSIFICATION	2.5090072286519898E-5	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998339202489085	WITHOUT_CLASSIFICATION	1.6607975109147986E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999182962839115	WITHOUT_CLASSIFICATION	8.170371608855435E-5	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999967176336858	WITHOUT_CLASSIFICATION	3.2823663141913026E-5	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9998945618744464	WITHOUT_CLASSIFICATION	1.0543812555363872E-4	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999692617314732	WITHOUT_CLASSIFICATION	3.073826852678462E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9753978427065895	WITHOUT_CLASSIFICATION	0.024602157293410545	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999937580835407	WITHOUT_CLASSIFICATION	6.241916459234195E-6	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9988949028877813	WITHOUT_CLASSIFICATION	0.0011050971122187382	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999919678322405	WITHOUT_CLASSIFICATION	8.03216775947053E-6	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9999105515000704	WITHOUT_CLASSIFICATION	8.944849992962831E-5	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999151345151488	WITHOUT_CLASSIFICATION	8.486548485131138E-5	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9998713870974855	WITHOUT_CLASSIFICATION	1.2861290251445023E-4	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999444055742208	WITHOUT_CLASSIFICATION	5.559442577906905E-5	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999933988445278	WITHOUT_CLASSIFICATION	6.601155472298125E-6	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999142671746021	WITHOUT_CLASSIFICATION	8.573282539799211E-5	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9990849603177765	WITHOUT_CLASSIFICATION	9.150396822236356E-4	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9990849603177765	WITHOUT_CLASSIFICATION	9.150396822236356E-4	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999411964510863	WITHOUT_CLASSIFICATION	5.880354891370155E-5	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999988422889321	WITHOUT_CLASSIFICATION	1.1577110678432899E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999936737557088	WITHOUT_CLASSIFICATION	6.326244291115449E-6	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999126468688068	WITHOUT_CLASSIFICATION	8.735313119322402E-5	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999954000770115	WITHOUT_CLASSIFICATION	4.5999229884854555E-6	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9997254433189868	WITHOUT_CLASSIFICATION	2.7455668101312465E-4	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997775283672572	WITHOUT_CLASSIFICATION	2.2247163274271035E-4	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9997598355423681	WITHOUT_CLASSIFICATION	2.4016445763188935E-4	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999676019052958	WITHOUT_CLASSIFICATION	3.23980947041821E-5	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998611080136073	WITHOUT_CLASSIFICATION	1.3889198639271662E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172837063235	WITHOUT_CLASSIFICATION	8.271629367647176E-5	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999634219840327	WITHOUT_CLASSIFICATION	3.657801596738621E-5	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999870531417531	WITHOUT_CLASSIFICATION	1.2946858246969332E-5	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999865521014294	WITHOUT_CLASSIFICATION	1.3447898570556155E-5	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.999990260553653	WITHOUT_CLASSIFICATION	9.73944634695796E-6	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999735244181474	WITHOUT_CLASSIFICATION	2.6475581852719197E-5	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9982373835261956	WITHOUT_CLASSIFICATION	0.001762616473804391	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999153916577305	WITHOUT_CLASSIFICATION	8.460834226948561E-5	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9994177439621102	WITHOUT_CLASSIFICATION	5.8225603788978E-4	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9245378140723937	WITHOUT_CLASSIFICATION	0.07546218592760638	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999906186505751	WITHOUT_CLASSIFICATION	9.381349424905845E-5	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.999999737021461	WITHOUT_CLASSIFICATION	2.629785390017657E-7	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999677278167475	WITHOUT_CLASSIFICATION	3.2272183252572403E-5	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999585648939	WITHOUT_CLASSIFICATION	4.143510620771046E-8	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999892718878638	WITHOUT_CLASSIFICATION	1.072811213623926E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999892718878638	WITHOUT_CLASSIFICATION	1.072811213623926E-5	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999486887086012	WITHOUT_CLASSIFICATION	5.131129139869981E-5	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999395967956207	WITHOUT_CLASSIFICATION	6.040320437928063E-5	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999741456993398	WITHOUT_CLASSIFICATION	2.5854300660202024E-5	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.999895648562436	WITHOUT_CLASSIFICATION	1.043514375640621E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999758371949111	WITHOUT_CLASSIFICATION	2.4162805088824387E-5	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.945744620018819	WITHOUT_CLASSIFICATION	0.05425537998118107	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9889167593956367	WITHOUT_CLASSIFICATION	0.01108324060436329	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9998666660249154	WITHOUT_CLASSIFICATION	1.33333975084522E-4	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.9152192228577913	DEFECT	0.08478077714220876	WITHOUT_CLASSIFICATION
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.9054489911478022	WITHOUT_CLASSIFICATION	0.0945510088521977	DEFECT
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9997068333635349	WITHOUT_CLASSIFICATION	2.931666364650746E-4	DEFECT
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9995813098634224	WITHOUT_CLASSIFICATION	4.186901365776611E-4	DEFECT
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.9999944407802992	WITHOUT_CLASSIFICATION	5.559219700710711E-6	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.9996336693644046	WITHOUT_CLASSIFICATION	3.663306355955485E-4	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.8712500337683606	DEFECT	0.12874996623163934	WITHOUT_CLASSIFICATION
TODO : should this be an error?	DEFECT	0.7879355797766284	WITHOUT_CLASSIFICATION	0.21206442022337155	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.8421195950605356	WITHOUT_CLASSIFICATION	0.1578804049394644	DEFECT
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.8764575576046826	DEFECT	0.12354244239531752	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9064892010175223	WITHOUT_CLASSIFICATION	0.09351079898247773	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9064892010175223	WITHOUT_CLASSIFICATION	0.09351079898247773	DEFECT
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9768083417226853	WITHOUT_CLASSIFICATION	0.023191658277314727	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999519151745967	WITHOUT_CLASSIFICATION	4.808482540327806E-5	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.900192407373835	DEFECT	0.09980759262616508	WITHOUT_CLASSIFICATION
this call is side-effecty	DEFECT	0.999775471755736	WITHOUT_CLASSIFICATION	2.2452824426395947E-4	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.9685553943357691	DEFECT	0.03144460566423089	WITHOUT_CLASSIFICATION
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9216551879040322	WITHOUT_CLASSIFICATION	0.07834481209596775	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.9083998381442078	WITHOUT_CLASSIFICATION	0.09160016185579228	DEFECT
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.9615998624006505	WITHOUT_CLASSIFICATION	0.03840013759934944	DEFECT
TODO: is this completely correct?	DEFECT	0.6929159587997243	WITHOUT_CLASSIFICATION	0.3070840412002757	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.7778889434434533	WITHOUT_CLASSIFICATION	0.22211105655654664	DEFECT
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.8375403201362586	WITHOUT_CLASSIFICATION	0.16245967986374135	DEFECT
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9692429155162334	WITHOUT_CLASSIFICATION	0.03075708448376662	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.5273216421461713	DEFECT	0.47267835785382867	WITHOUT_CLASSIFICATION
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.9999975086378571	DEFECT	2.4913621429298847E-6	WITHOUT_CLASSIFICATION
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.7667040135059869	DEFECT	0.23329598649401304	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.9862374455743392	DEFECT	0.013762554425660814	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.8926821935857526	DEFECT	0.10731780641424743	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.878933707832355	DEFECT	0.12106629216764506	WITHOUT_CLASSIFICATION
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.6377164737139847	WITHOUT_CLASSIFICATION	0.36228352628601546	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9064892010175223	WITHOUT_CLASSIFICATION	0.09351079898247773	DEFECT
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9799944862519462	DEFECT	0.02000551374805376	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.9194672653660025	DEFECT	0.08053273463399739	WITHOUT_CLASSIFICATION
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.9873286714472137	WITHOUT_CLASSIFICATION	0.012671328552786326	DEFECT
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9996592854492611	WITHOUT_CLASSIFICATION	3.407145507388505E-4	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.9924363893013262	WITHOUT_CLASSIFICATION	0.007563610698673896	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9979484971580385	WITHOUT_CLASSIFICATION	0.0020515028419615775	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9983723009261933	WITHOUT_CLASSIFICATION	0.0016276990738066735	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.6363338804841063	WITHOUT_CLASSIFICATION	0.36366611951589367	DEFECT
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.6334326571957345	WITHOUT_CLASSIFICATION	0.3665673428042654	DEFECT
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.9410543517582576	WITHOUT_CLASSIFICATION	0.05894564824174255	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.8953419031191528	WITHOUT_CLASSIFICATION	0.10465809688084712	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.7638205538001952	WITHOUT_CLASSIFICATION	0.23617944619980485	DEFECT
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9970285808027902	WITHOUT_CLASSIFICATION	0.0029714191972097996	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.9993804260575968	WITHOUT_CLASSIFICATION	6.195739424032258E-4	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.6019028035173901	DEFECT	0.3980971964826098	WITHOUT_CLASSIFICATION
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.7429678379116403	DEFECT	0.25703216208835966	WITHOUT_CLASSIFICATION
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.9999850092079783	DEFECT	1.4990792021640715E-5	WITHOUT_CLASSIFICATION
