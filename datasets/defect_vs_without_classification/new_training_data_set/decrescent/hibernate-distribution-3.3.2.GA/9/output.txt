test out the optimizer:	WITHOUT_CLASSIFICATION	0.999984055244749	WITHOUT_CLASSIFICATION	1.5944755250957875E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999958326940478	WITHOUT_CLASSIFICATION	4.1673059521556E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999958326940478	WITHOUT_CLASSIFICATION	4.1673059521556E-6	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9993277230725801	WITHOUT_CLASSIFICATION	6.72276927419994E-4	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999600082985052	WITHOUT_CLASSIFICATION	3.999170149478069E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999183121448307	WITHOUT_CLASSIFICATION	8.16878551691922E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999183121448307	WITHOUT_CLASSIFICATION	8.16878551691922E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999942199101634	WITHOUT_CLASSIFICATION	5.7800898366509574E-6	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999154654343854	WITHOUT_CLASSIFICATION	8.453456561462873E-5	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999862952985435	WITHOUT_CLASSIFICATION	1.3704701456433858E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999232810998853	WITHOUT_CLASSIFICATION	7.671890011474646E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999976852455104	WITHOUT_CLASSIFICATION	2.314754489528859E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999976852455104	WITHOUT_CLASSIFICATION	2.314754489528859E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999982411868831	WITHOUT_CLASSIFICATION	1.7588131169752728E-6	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999753066378491	WITHOUT_CLASSIFICATION	2.46933621509154E-5	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.999931516992011	WITHOUT_CLASSIFICATION	6.84830079889331E-5	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999730496005564	WITHOUT_CLASSIFICATION	2.6950399443534223E-5	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999897023927025	WITHOUT_CLASSIFICATION	1.0297607297466203E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999925756798412	WITHOUT_CLASSIFICATION	7.424320158741572E-6	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.9999932543000236	WITHOUT_CLASSIFICATION	6.7456999764109765E-6	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999436646636892	WITHOUT_CLASSIFICATION	5.633533631069254E-5	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999039297741085	WITHOUT_CLASSIFICATION	9.607022589151763E-5	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999590669158485	WITHOUT_CLASSIFICATION	4.093308415156073E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999925340942296	WITHOUT_CLASSIFICATION	7.4659057704093155E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999925340942296	WITHOUT_CLASSIFICATION	7.4659057704093155E-6	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9995145228254362	WITHOUT_CLASSIFICATION	4.854771745638981E-4	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999935408716487	WITHOUT_CLASSIFICATION	6.459128351360018E-6	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999619630808678	WITHOUT_CLASSIFICATION	3.803691913213465E-5	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999537276773904	WITHOUT_CLASSIFICATION	4.627232260951114E-5	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9985599535683153	WITHOUT_CLASSIFICATION	0.0014400464316847203	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999989396755458	WITHOUT_CLASSIFICATION	1.0603244542920013E-6	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999208122558915	WITHOUT_CLASSIFICATION	7.918774410851726E-5	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999870143123648	WITHOUT_CLASSIFICATION	1.2985687635255902E-5	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9993091384024568	WITHOUT_CLASSIFICATION	6.908615975432026E-4	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.999962540789637	WITHOUT_CLASSIFICATION	3.7459210363008664E-5	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9998201835338655	WITHOUT_CLASSIFICATION	1.7981646613442372E-4	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999921217745038	WITHOUT_CLASSIFICATION	7.878225496215694E-6	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999793559572261	WITHOUT_CLASSIFICATION	2.064404277391774E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998959392753393	WITHOUT_CLASSIFICATION	1.0406072466081077E-4	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999427159804066	WITHOUT_CLASSIFICATION	5.728401959331074E-5	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998673305116305	WITHOUT_CLASSIFICATION	1.326694883695439E-4	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999869020825179	WITHOUT_CLASSIFICATION	1.3097917482097598E-4	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9997415070099009	WITHOUT_CLASSIFICATION	2.584929900990344E-4	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999831404155267	WITHOUT_CLASSIFICATION	1.6859584473244677E-5	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9147164020643147	WITHOUT_CLASSIFICATION	0.08528359793568527	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999931128250819	WITHOUT_CLASSIFICATION	6.8871749180636534E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999931128250819	WITHOUT_CLASSIFICATION	6.8871749180636534E-6	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999831404155267	WITHOUT_CLASSIFICATION	1.6859584473244677E-5	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999321856300895	WITHOUT_CLASSIFICATION	6.781436991049875E-4	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.99990756224046	WITHOUT_CLASSIFICATION	9.243775954003091E-5	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998642314295331	WITHOUT_CLASSIFICATION	1.3576857046689438E-4	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999932953806085	WITHOUT_CLASSIFICATION	6.704619391487988E-6	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999998695738784	WITHOUT_CLASSIFICATION	1.3042612154157245E-7	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9983008479928327	WITHOUT_CLASSIFICATION	0.0016991520071673906	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9996584975345312	WITHOUT_CLASSIFICATION	3.4150246546873965E-4	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999968508260701	WITHOUT_CLASSIFICATION	3.1491739298344008E-6	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9997632831281801	WITHOUT_CLASSIFICATION	2.367168718200535E-4	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9997491881376851	WITHOUT_CLASSIFICATION	2.5081186231491894E-4	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999931128250819	WITHOUT_CLASSIFICATION	6.8871749180636534E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999904503493847	WITHOUT_CLASSIFICATION	9.549650615199053E-6	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999515571965235	WITHOUT_CLASSIFICATION	4.8442803476499467E-4	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9989349604552706	WITHOUT_CLASSIFICATION	0.0010650395447293541	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9995903641323353	WITHOUT_CLASSIFICATION	4.096358676648418E-4	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999539093638397	WITHOUT_CLASSIFICATION	4.6090636160370815E-5	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9997875846448004	WITHOUT_CLASSIFICATION	2.1241535519955795E-4	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999422321521069	WITHOUT_CLASSIFICATION	5.776784789310098E-5	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999606165613005	WITHOUT_CLASSIFICATION	3.938343869937887E-5	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999858484945716	WITHOUT_CLASSIFICATION	1.4151505428371963E-5	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999997216663371	WITHOUT_CLASSIFICATION	2.7833366289774717E-7	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999786696950285	WITHOUT_CLASSIFICATION	2.133030497147905E-5	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999540475397185	WITHOUT_CLASSIFICATION	4.5952460281593686E-5	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9995732443392853	WITHOUT_CLASSIFICATION	4.267556607147332E-4	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999750180861045	WITHOUT_CLASSIFICATION	2.498191389550851E-5	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999973513680254	WITHOUT_CLASSIFICATION	2.6486319745991084E-5	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999990217337051	WITHOUT_CLASSIFICATION	9.78266294912939E-7	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9998289090606136	WITHOUT_CLASSIFICATION	1.7109093938627438E-4	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999360214261331	WITHOUT_CLASSIFICATION	6.397857386688336E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999999158597582	WITHOUT_CLASSIFICATION	8.414024179702115E-7	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.999990071104409	WITHOUT_CLASSIFICATION	9.928895591062737E-6	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9996052393950896	WITHOUT_CLASSIFICATION	3.9476060491042304E-4	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997613682375206	WITHOUT_CLASSIFICATION	2.3863176247944053E-4	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998944539325052	WITHOUT_CLASSIFICATION	1.0554606749478967E-4	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999490815333231	WITHOUT_CLASSIFICATION	5.0918466676810154E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997613682375206	WITHOUT_CLASSIFICATION	2.3863176247944053E-4	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9997312262447814	WITHOUT_CLASSIFICATION	2.687737552186265E-4	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9997121358564073	WITHOUT_CLASSIFICATION	2.878641435926911E-4	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.999996524664632	WITHOUT_CLASSIFICATION	3.4753353679903294E-6	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.9999671783317934	WITHOUT_CLASSIFICATION	3.282166820666185E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999898701746476	WITHOUT_CLASSIFICATION	1.0129825352360369E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999898701746476	WITHOUT_CLASSIFICATION	1.0129825352360369E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999101293626137	WITHOUT_CLASSIFICATION	8.987063738627244E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999997529517558	WITHOUT_CLASSIFICATION	2.470482441396425E-7	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.999890030680911	WITHOUT_CLASSIFICATION	1.0996931908902219E-4	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999955932988359	WITHOUT_CLASSIFICATION	4.406701164069733E-6	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999745565574362	WITHOUT_CLASSIFICATION	2.5443442563850066E-5	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999958282523645	WITHOUT_CLASSIFICATION	4.17174763551318E-6	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999482810154746	WITHOUT_CLASSIFICATION	5.171898452529981E-5	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9999750462436597	WITHOUT_CLASSIFICATION	2.4953756340342373E-5	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999778242913198	WITHOUT_CLASSIFICATION	2.2175708680221874E-5	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999714887708683	WITHOUT_CLASSIFICATION	2.8511229131649647E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999946519108943	WITHOUT_CLASSIFICATION	5.348089105728429E-6	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999946519108943	WITHOUT_CLASSIFICATION	5.348089105728429E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999358342045632	WITHOUT_CLASSIFICATION	6.416579543683124E-5	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998996649751359	WITHOUT_CLASSIFICATION	1.0033502486399299E-4	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999579830804305	WITHOUT_CLASSIFICATION	4.201691956945282E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999946519108943	WITHOUT_CLASSIFICATION	5.348089105728429E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999358342045632	WITHOUT_CLASSIFICATION	6.416579543683124E-5	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999358342045632	WITHOUT_CLASSIFICATION	6.416579543683124E-5	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999968405042306	WITHOUT_CLASSIFICATION	3.159495769409164E-5	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999369555376159	WITHOUT_CLASSIFICATION	6.304446238418537E-5	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999668383959106	WITHOUT_CLASSIFICATION	3.316160408936466E-5	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999936330739335	WITHOUT_CLASSIFICATION	6.366926066420246E-6	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9996925601685266	WITHOUT_CLASSIFICATION	3.0743983147334884E-4	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9996925601685266	WITHOUT_CLASSIFICATION	3.0743983147334884E-4	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999398128521091	WITHOUT_CLASSIFICATION	6.018714789088495E-5	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999350808334505	WITHOUT_CLASSIFICATION	6.491916654942945E-5	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999417284095132	WITHOUT_CLASSIFICATION	5.8271590486755776E-5	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999264358978477	WITHOUT_CLASSIFICATION	7.356410215226113E-5	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999264358978477	WITHOUT_CLASSIFICATION	7.356410215226113E-5	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9998693322657831	WITHOUT_CLASSIFICATION	1.3066773421685948E-4	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999829916881215	WITHOUT_CLASSIFICATION	1.700831187850598E-5	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996451445267919	WITHOUT_CLASSIFICATION	3.5485547320810996E-4	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.999869188627966	WITHOUT_CLASSIFICATION	1.308113720339999E-4	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999688597950867	WITHOUT_CLASSIFICATION	3.114020491335386E-5	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999643690524592	WITHOUT_CLASSIFICATION	3.563094754077407E-5	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999500165009368	WITHOUT_CLASSIFICATION	4.9983499063083955E-5	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999895611754701	WITHOUT_CLASSIFICATION	1.043882452998112E-5	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996451445267919	WITHOUT_CLASSIFICATION	3.5485547320810996E-4	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999934306725454	WITHOUT_CLASSIFICATION	6.569327454563306E-6	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999711308418271	WITHOUT_CLASSIFICATION	2.8869158172886875E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999711308418271	WITHOUT_CLASSIFICATION	2.8869158172886875E-5	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999983187462713	WITHOUT_CLASSIFICATION	1.6812537286932128E-6	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9994740762852528	WITHOUT_CLASSIFICATION	5.259237147472551E-4	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999675491709326	WITHOUT_CLASSIFICATION	3.245082906745284E-5	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999587047551789	WITHOUT_CLASSIFICATION	4.1295244821232985E-5	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999189690166864	WITHOUT_CLASSIFICATION	8.103098331357143E-5	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999861876890777	WITHOUT_CLASSIFICATION	1.3812310922363181E-5	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.9999692119165252	WITHOUT_CLASSIFICATION	3.0788083474736255E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9998366313421506	WITHOUT_CLASSIFICATION	1.6336865784934653E-4	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999974755531382	WITHOUT_CLASSIFICATION	2.5244468616904847E-6	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999859661182824	WITHOUT_CLASSIFICATION	1.40338817176947E-5	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999859661182824	WITHOUT_CLASSIFICATION	1.40338817176947E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999788090983778	WITHOUT_CLASSIFICATION	2.1190901622243976E-5	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999984055244749	WITHOUT_CLASSIFICATION	1.5944755250957875E-5	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999901469470113	WITHOUT_CLASSIFICATION	9.853052988723198E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999958326940478	WITHOUT_CLASSIFICATION	4.1673059521556E-6	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999029921756083	WITHOUT_CLASSIFICATION	9.700782439174473E-5	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999206350747498	WITHOUT_CLASSIFICATION	7.936492525020025E-5	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999384016113405	WITHOUT_CLASSIFICATION	6.159838865946431E-5	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9997696811570241	WITHOUT_CLASSIFICATION	2.3031884297599839E-4	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9992926058568897	WITHOUT_CLASSIFICATION	7.073941431101843E-4	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999949961424581	WITHOUT_CLASSIFICATION	5.0038575418767525E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999925518999221	WITHOUT_CLASSIFICATION	7.448100077960764E-6	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999376186313056	WITHOUT_CLASSIFICATION	6.238136869439022E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9997696811570241	WITHOUT_CLASSIFICATION	2.3031884297599839E-4	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.998826242039243	WITHOUT_CLASSIFICATION	0.0011737579607570224	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9997604981834494	WITHOUT_CLASSIFICATION	2.39501816550758E-4	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.999946343991484	WITHOUT_CLASSIFICATION	5.3656008516040015E-5	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999394888168331	WITHOUT_CLASSIFICATION	6.051118316693957E-5	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9998703198156448	WITHOUT_CLASSIFICATION	1.2968018435529746E-4	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999183121448307	WITHOUT_CLASSIFICATION	8.16878551691922E-5	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999091729750039	WITHOUT_CLASSIFICATION	9.082702499614476E-5	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999959016999348	WITHOUT_CLASSIFICATION	4.098300065294359E-6	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999370185449812	WITHOUT_CLASSIFICATION	6.298145501886387E-5	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9998558920053534	WITHOUT_CLASSIFICATION	1.4410799464655138E-4	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999925221290615	WITHOUT_CLASSIFICATION	7.477870938440156E-6	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999451263901362	WITHOUT_CLASSIFICATION	5.487360986373405E-5	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999548221650784	WITHOUT_CLASSIFICATION	4.517783492170089E-5	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.998966297139736	WITHOUT_CLASSIFICATION	0.0010337028602639897	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9996935324721172	WITHOUT_CLASSIFICATION	3.064675278827888E-4	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.9999529944358518	WITHOUT_CLASSIFICATION	4.7005564148077254E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999958326940478	WITHOUT_CLASSIFICATION	4.1673059521556E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999958326940478	WITHOUT_CLASSIFICATION	4.1673059521556E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999925518999221	WITHOUT_CLASSIFICATION	7.448100077960764E-6	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999925221290615	WITHOUT_CLASSIFICATION	7.477870938440156E-6	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999942199101634	WITHOUT_CLASSIFICATION	5.7800898366509574E-6	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999109821254395	WITHOUT_CLASSIFICATION	8.901787456047415E-5	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999400197301361	WITHOUT_CLASSIFICATION	5.9980269863915867E-5	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9998598129851468	WITHOUT_CLASSIFICATION	1.4018701485318507E-4	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.9999935438921599	WITHOUT_CLASSIFICATION	6.456107840147701E-6	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9975629162596348	WITHOUT_CLASSIFICATION	0.0024370837403652795	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9999935178914874	WITHOUT_CLASSIFICATION	6.482108512594157E-6	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9998611951808599	WITHOUT_CLASSIFICATION	1.3880481914002937E-4	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9995997891108058	WITHOUT_CLASSIFICATION	4.00210889194184E-4	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9995997891108058	WITHOUT_CLASSIFICATION	4.00210889194184E-4	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999982935466174	WITHOUT_CLASSIFICATION	1.7064533825207501E-6	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999885864522421	WITHOUT_CLASSIFICATION	1.1413547757946867E-5	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9998501575357396	WITHOUT_CLASSIFICATION	1.4984246426041366E-4	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999106209661017	WITHOUT_CLASSIFICATION	8.937903389822244E-5	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999974368098753	WITHOUT_CLASSIFICATION	2.5631901247006822E-6	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.9999636811553294	WITHOUT_CLASSIFICATION	3.6318844670645765E-5	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9999914590497151	WITHOUT_CLASSIFICATION	8.540950284845417E-6	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999154654343854	WITHOUT_CLASSIFICATION	8.453456561462873E-5	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999610877022189	WITHOUT_CLASSIFICATION	3.891229778113001E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999610877022189	WITHOUT_CLASSIFICATION	3.891229778113001E-5	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.9999301679981146	WITHOUT_CLASSIFICATION	6.983200188529467E-5	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999908531666958	WITHOUT_CLASSIFICATION	9.146833304213583E-6	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9999301679981146	WITHOUT_CLASSIFICATION	6.983200188529467E-5	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999395106943255	WITHOUT_CLASSIFICATION	6.0489305674371926E-5	DEFECT
int	WITHOUT_CLASSIFICATION	0.9999550302791435	WITHOUT_CLASSIFICATION	4.496972085648852E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999958326940478	WITHOUT_CLASSIFICATION	4.1673059521556E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999925518999221	WITHOUT_CLASSIFICATION	7.448100077960764E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999925221290615	WITHOUT_CLASSIFICATION	7.477870938440156E-6	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999925221290615	WITHOUT_CLASSIFICATION	7.477870938440156E-6	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.9999958866782815	WITHOUT_CLASSIFICATION	4.11332171850265E-6	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999807113413116	WITHOUT_CLASSIFICATION	1.9288658688314794E-5	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.999967775325577	WITHOUT_CLASSIFICATION	3.2224674422969553E-5	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999232810998853	WITHOUT_CLASSIFICATION	7.671890011474646E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999232810998853	WITHOUT_CLASSIFICATION	7.671890011474646E-5	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9999703669052314	WITHOUT_CLASSIFICATION	2.9633094768648735E-5	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999524708067884	WITHOUT_CLASSIFICATION	4.7529193211682295E-5	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.9999961934503864	WITHOUT_CLASSIFICATION	3.806549613787341E-6	DEFECT
byte	WITHOUT_CLASSIFICATION	0.9999942888975579	WITHOUT_CLASSIFICATION	5.711102442052266E-6	DEFECT
char	WITHOUT_CLASSIFICATION	0.9999946010410705	WITHOUT_CLASSIFICATION	5.39895892947446E-6	DEFECT
short	WITHOUT_CLASSIFICATION	0.9999930009686774	WITHOUT_CLASSIFICATION	6.999031322641695E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999976852455104	WITHOUT_CLASSIFICATION	2.314754489528859E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999927102091956	WITHOUT_CLASSIFICATION	7.289790804457062E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999927102091956	WITHOUT_CLASSIFICATION	7.289790804457062E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999982411868831	WITHOUT_CLASSIFICATION	1.7588131169752728E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999982411868831	WITHOUT_CLASSIFICATION	1.7588131169752728E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999438270728318	WITHOUT_CLASSIFICATION	5.6172927168109524E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999438270728318	WITHOUT_CLASSIFICATION	5.6172927168109524E-5	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999221932595059	WITHOUT_CLASSIFICATION	7.780674049408573E-5	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999221932595059	WITHOUT_CLASSIFICATION	7.780674049408573E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999232810998853	WITHOUT_CLASSIFICATION	7.671890011474646E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999976852455104	WITHOUT_CLASSIFICATION	2.314754489528859E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999927102091956	WITHOUT_CLASSIFICATION	7.289790804457062E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999927102091956	WITHOUT_CLASSIFICATION	7.289790804457062E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999982411868831	WITHOUT_CLASSIFICATION	1.7588131169752728E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999438270728318	WITHOUT_CLASSIFICATION	5.6172927168109524E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999438270728318	WITHOUT_CLASSIFICATION	5.6172927168109524E-5	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999221932595059	WITHOUT_CLASSIFICATION	7.780674049408573E-5	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.999956488651626	WITHOUT_CLASSIFICATION	4.351134837401215E-5	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999246590518153	WITHOUT_CLASSIFICATION	7.534094818472302E-5	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.9999627313691769	WITHOUT_CLASSIFICATION	3.726863082312695E-5	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999921370238312	WITHOUT_CLASSIFICATION	7.862976168848288E-6	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9999519839924249	WITHOUT_CLASSIFICATION	4.8016007575036636E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999925911538787	WITHOUT_CLASSIFICATION	7.408846121348453E-6	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9920722757327233	WITHOUT_CLASSIFICATION	0.007927724267276696	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9976322343832266	WITHOUT_CLASSIFICATION	0.0023677656167734366	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998026876322594	WITHOUT_CLASSIFICATION	1.9731236774051206E-4	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999916518440978	WITHOUT_CLASSIFICATION	8.348155902341638E-6	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999139766598725	WITHOUT_CLASSIFICATION	8.602334012754813E-5	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999406135827003	WITHOUT_CLASSIFICATION	5.938641729978876E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999101293626137	WITHOUT_CLASSIFICATION	8.987063738627244E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999925911538787	WITHOUT_CLASSIFICATION	7.408846121348453E-6	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999925911538787	WITHOUT_CLASSIFICATION	7.408846121348453E-6	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999925911538787	WITHOUT_CLASSIFICATION	7.408846121348453E-6	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9992821011542362	WITHOUT_CLASSIFICATION	7.178988457638011E-4	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999822156759874	WITHOUT_CLASSIFICATION	1.7784324012521438E-5	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999822156759874	WITHOUT_CLASSIFICATION	1.7784324012521438E-5	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9998586902342448	WITHOUT_CLASSIFICATION	1.4130976575519306E-4	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999857866328673	WITHOUT_CLASSIFICATION	1.4213367132670208E-5	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999330597560472	WITHOUT_CLASSIFICATION	6.694024395278781E-4	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9995043635493639	WITHOUT_CLASSIFICATION	4.956364506360141E-4	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9995043635493639	WITHOUT_CLASSIFICATION	4.956364506360141E-4	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999897023927025	WITHOUT_CLASSIFICATION	1.0297607297466203E-5	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9995584726535442	WITHOUT_CLASSIFICATION	4.415273464558128E-4	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9995584726535442	WITHOUT_CLASSIFICATION	4.415273464558128E-4	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999587196173845	WITHOUT_CLASSIFICATION	4.128038261551249E-5	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999512647247562	WITHOUT_CLASSIFICATION	4.873527524384527E-5	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999590669158485	WITHOUT_CLASSIFICATION	4.093308415156073E-5	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.9999935517574742	WITHOUT_CLASSIFICATION	6.448242525845624E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999925756798412	WITHOUT_CLASSIFICATION	7.424320158741572E-6	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9922789455060212	WITHOUT_CLASSIFICATION	0.007721054493978693	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9999931708454725	WITHOUT_CLASSIFICATION	6.829154527590177E-6	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999416310073819	WITHOUT_CLASSIFICATION	5.836899261812112E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997372671118958	WITHOUT_CLASSIFICATION	2.627328881041611E-4	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999534916736513	WITHOUT_CLASSIFICATION	4.650832634870089E-5	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999756153357008	WITHOUT_CLASSIFICATION	2.438466429918272E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999537276773904	WITHOUT_CLASSIFICATION	4.627232260951114E-5	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.999999027746375	WITHOUT_CLASSIFICATION	9.722536249982378E-7	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999053878597817	WITHOUT_CLASSIFICATION	9.461214021839112E-5	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9999928592702555	WITHOUT_CLASSIFICATION	7.140729744482657E-6	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999925333992025	WITHOUT_CLASSIFICATION	7.466600797532228E-6	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999102496997149	WITHOUT_CLASSIFICATION	8.9750300285094E-5	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999025761835753	WITHOUT_CLASSIFICATION	9.742381642469154E-5	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999954468927973	WITHOUT_CLASSIFICATION	4.553107202729814E-6	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999590669158485	WITHOUT_CLASSIFICATION	4.093308415156073E-5	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999903130934952	WITHOUT_CLASSIFICATION	9.686906504815031E-6	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9999303031731172	WITHOUT_CLASSIFICATION	6.969682688281021E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999930185158459	WITHOUT_CLASSIFICATION	6.981484154094751E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999925756798412	WITHOUT_CLASSIFICATION	7.424320158741572E-6	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999954468927973	WITHOUT_CLASSIFICATION	4.553107202729814E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999903130934952	WITHOUT_CLASSIFICATION	9.686906504815031E-6	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999930185158459	WITHOUT_CLASSIFICATION	6.981484154094751E-6	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998417624649925	WITHOUT_CLASSIFICATION	1.5823753500751337E-4	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.9999925226546235	WITHOUT_CLASSIFICATION	7.477345376661285E-6	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998417624649925	WITHOUT_CLASSIFICATION	1.5823753500751337E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999925340942296	WITHOUT_CLASSIFICATION	7.4659057704093155E-6	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
column index	WITHOUT_CLASSIFICATION	0.999911254910115	WITHOUT_CLASSIFICATION	8.874508988500094E-5	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.9999446900618888	WITHOUT_CLASSIFICATION	5.530993811133208E-5	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999966254144844	WITHOUT_CLASSIFICATION	3.374585515511962E-6	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999969368542572	WITHOUT_CLASSIFICATION	3.063145742768102E-6	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999876609914903	WITHOUT_CLASSIFICATION	1.2339008509691707E-5	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999640964558858	WITHOUT_CLASSIFICATION	3.590354411425563E-5	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9994011530326855	WITHOUT_CLASSIFICATION	5.988469673144286E-4	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999843699120418	WITHOUT_CLASSIFICATION	1.5630087958164482E-5	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999640964558858	WITHOUT_CLASSIFICATION	3.590354411425563E-5	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999935408716487	WITHOUT_CLASSIFICATION	6.459128351360018E-6	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998275638382846	WITHOUT_CLASSIFICATION	1.724361617153329E-4	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.9999925222909284	WITHOUT_CLASSIFICATION	7.477709071566398E-6	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999954468927973	WITHOUT_CLASSIFICATION	4.553107202729814E-6	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999242524555915	WITHOUT_CLASSIFICATION	7.574754440851906E-5	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.9999343589888327	WITHOUT_CLASSIFICATION	6.564101116738207E-5	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9978156413081941	WITHOUT_CLASSIFICATION	0.0021843586918059155	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9998713921831062	WITHOUT_CLASSIFICATION	1.2860781689379413E-4	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9997999297679572	WITHOUT_CLASSIFICATION	2.0007023204279278E-4	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999953695807724	WITHOUT_CLASSIFICATION	4.6304192276376084E-6	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999111677857051	WITHOUT_CLASSIFICATION	8.88322142948544E-5	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999169220284868	WITHOUT_CLASSIFICATION	8.307797151320889E-5	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.9999927667418628	WITHOUT_CLASSIFICATION	7.233258137193099E-6	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999108864074796	WITHOUT_CLASSIFICATION	8.911359252039044E-5	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999103548781969	WITHOUT_CLASSIFICATION	8.964512180318875E-5	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9995396147959291	WITHOUT_CLASSIFICATION	4.603852040708457E-4	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999537276773904	WITHOUT_CLASSIFICATION	4.627232260951114E-5	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9999311028304732	WITHOUT_CLASSIFICATION	6.889716952681174E-5	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999440326985439	WITHOUT_CLASSIFICATION	5.596730145617151E-5	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9999617822860258	WITHOUT_CLASSIFICATION	3.821771397406875E-5	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.999934969478987	WITHOUT_CLASSIFICATION	6.503052101306984E-5	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9999358817227001	WITHOUT_CLASSIFICATION	6.411827729998427E-5	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999509280069878	WITHOUT_CLASSIFICATION	4.907199301213291E-5	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999996829796923	WITHOUT_CLASSIFICATION	3.170203076854804E-7	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999656878329464	WITHOUT_CLASSIFICATION	3.431216705360365E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999794973689466	WITHOUT_CLASSIFICATION	2.0502631053289815E-5	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999289044198956	WITHOUT_CLASSIFICATION	7.109558010435501E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999515146099214	WITHOUT_CLASSIFICATION	4.848539007851438E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999515146099214	WITHOUT_CLASSIFICATION	4.848539007851438E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999077810652374	WITHOUT_CLASSIFICATION	9.221893476265642E-5	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999028078084028	WITHOUT_CLASSIFICATION	9.719219159728124E-5	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999762257383485	WITHOUT_CLASSIFICATION	2.377426165146451E-5	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999016914817918	WITHOUT_CLASSIFICATION	9.830851820826143E-5	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999455293106684	WITHOUT_CLASSIFICATION	5.447068933171869E-5	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9997470924945288	WITHOUT_CLASSIFICATION	2.5290750547127727E-4	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997961201054335	WITHOUT_CLASSIFICATION	2.0387989456656857E-4	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999596242729538	WITHOUT_CLASSIFICATION	4.037572704610631E-5	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999968019035381	WITHOUT_CLASSIFICATION	3.198096461901688E-5	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999362893507003	WITHOUT_CLASSIFICATION	6.371064929959816E-5	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9999110153663048	WITHOUT_CLASSIFICATION	8.898463369533068E-5	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9997071265261794	WITHOUT_CLASSIFICATION	2.92873473820546E-4	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999489234231115	WITHOUT_CLASSIFICATION	5.107657688855099E-5	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9990579459728977	WITHOUT_CLASSIFICATION	9.420540271023197E-4	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9996921869000115	WITHOUT_CLASSIFICATION	3.0781309998847615E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9997196668243689	WITHOUT_CLASSIFICATION	2.803331756310793E-4	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999454840962989	WITHOUT_CLASSIFICATION	5.45159037010017E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999744868193612	WITHOUT_CLASSIFICATION	2.5513180638901828E-5	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999478307690687	WITHOUT_CLASSIFICATION	5.216923093143709E-5	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999324992852452	WITHOUT_CLASSIFICATION	6.750071475486554E-5	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999804438738351	WITHOUT_CLASSIFICATION	1.95561261648119E-5	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9976119395461822	WITHOUT_CLASSIFICATION	0.0023880604538178466	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9997196668243689	WITHOUT_CLASSIFICATION	2.803331756310793E-4	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999326247295471	WITHOUT_CLASSIFICATION	6.737527045287376E-5	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999266793020075	WITHOUT_CLASSIFICATION	7.332069799239223E-5	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999263932560571	WITHOUT_CLASSIFICATION	7.360674394284522E-5	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999397178020268	WITHOUT_CLASSIFICATION	6.0282197973199374E-5	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999693590416885	WITHOUT_CLASSIFICATION	3.064095831149304E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999744868193612	WITHOUT_CLASSIFICATION	2.5513180638901828E-5	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9968453765159143	WITHOUT_CLASSIFICATION	0.0031546234840856406	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999922627547591	WITHOUT_CLASSIFICATION	7.737245240900492E-5	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998904132131626	WITHOUT_CLASSIFICATION	1.0958678683734005E-4	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999962440537811	WITHOUT_CLASSIFICATION	3.7559462189176967E-6	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999962440537811	WITHOUT_CLASSIFICATION	3.7559462189176967E-6	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9997415070099009	WITHOUT_CLASSIFICATION	2.584929900990344E-4	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999349902474808	WITHOUT_CLASSIFICATION	6.500975251918313E-5	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9999025504736841	WITHOUT_CLASSIFICATION	9.744952631580863E-5	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9999025504736841	WITHOUT_CLASSIFICATION	9.744952631580863E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999794973689466	WITHOUT_CLASSIFICATION	2.0502631053289815E-5	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9905962718676626	WITHOUT_CLASSIFICATION	0.009403728132337306	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9997579193856017	WITHOUT_CLASSIFICATION	2.42080614398325E-4	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999809650824909	WITHOUT_CLASSIFICATION	1.9034917509092624E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999788090983778	WITHOUT_CLASSIFICATION	2.1190901622243976E-5	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9997579193856017	WITHOUT_CLASSIFICATION	2.42080614398325E-4	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999809650824909	WITHOUT_CLASSIFICATION	1.9034917509092624E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999659838856195	WITHOUT_CLASSIFICATION	3.401611438053E-5	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.999258682884464	WITHOUT_CLASSIFICATION	7.413171155359366E-4	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999634192017163	WITHOUT_CLASSIFICATION	3.658079828375971E-5	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999879045732565	WITHOUT_CLASSIFICATION	1.2095426743577594E-5	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998691495505885	WITHOUT_CLASSIFICATION	1.3085044941154957E-4	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999793364530988	WITHOUT_CLASSIFICATION	2.0663546901287622E-5	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996576217493743	WITHOUT_CLASSIFICATION	3.423782506256876E-4	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996576217493743	WITHOUT_CLASSIFICATION	3.423782506256876E-4	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9998172193228947	WITHOUT_CLASSIFICATION	1.8278067710526512E-4	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999989785262718	WITHOUT_CLASSIFICATION	1.021473728120665E-6	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999823070039833	WITHOUT_CLASSIFICATION	1.7692996016778392E-5	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999638469878155	WITHOUT_CLASSIFICATION	3.615301218451581E-5	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999807740769692	WITHOUT_CLASSIFICATION	1.922592303092624E-5	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999663413092729	WITHOUT_CLASSIFICATION	3.3658690727067294E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999788090983778	WITHOUT_CLASSIFICATION	2.1190901622243976E-5	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999663413092729	WITHOUT_CLASSIFICATION	3.3658690727067294E-5	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9992657535423016	WITHOUT_CLASSIFICATION	7.342464576983848E-4	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9992657535423016	WITHOUT_CLASSIFICATION	7.342464576983848E-4	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9994743801607431	WITHOUT_CLASSIFICATION	5.25619839256945E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999659838856195	WITHOUT_CLASSIFICATION	3.401611438053E-5	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999218175099226	WITHOUT_CLASSIFICATION	7.818249007743755E-5	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9993600512883136	WITHOUT_CLASSIFICATION	6.399487116863256E-4	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9997379175692208	WITHOUT_CLASSIFICATION	2.6208243077920215E-4	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9996512203008433	WITHOUT_CLASSIFICATION	3.487796991567746E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9871229630269364	WITHOUT_CLASSIFICATION	0.012877036973063596	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999659838856195	WITHOUT_CLASSIFICATION	3.401611438053E-5	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9996512203008433	WITHOUT_CLASSIFICATION	3.487796991567746E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9871229630269364	WITHOUT_CLASSIFICATION	0.012877036973063596	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9998324652759013	WITHOUT_CLASSIFICATION	1.675347240987082E-4	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999153110442912	WITHOUT_CLASSIFICATION	8.468895570879655E-5	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999436257751046	WITHOUT_CLASSIFICATION	5.637422489524493E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999659838856195	WITHOUT_CLASSIFICATION	3.401611438053E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999659838856195	WITHOUT_CLASSIFICATION	3.401611438053E-5	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9999921214375899	WITHOUT_CLASSIFICATION	7.878562410062287E-6	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9998845085146095	WITHOUT_CLASSIFICATION	1.1549148539052113E-4	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9999383034574361	WITHOUT_CLASSIFICATION	6.169654256395218E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998959392753393	WITHOUT_CLASSIFICATION	1.0406072466081077E-4	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9999686488944621	WITHOUT_CLASSIFICATION	3.135110553799401E-5	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999959771974866	WITHOUT_CLASSIFICATION	4.022802513355667E-6	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999979527376741	WITHOUT_CLASSIFICATION	2.0472623258934683E-5	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999513227978695	WITHOUT_CLASSIFICATION	4.8677202130562195E-5	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999896025843145	WITHOUT_CLASSIFICATION	1.0397415685497259E-4	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9998953289080835	WITHOUT_CLASSIFICATION	1.0467109191650411E-4	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999955956668883	WITHOUT_CLASSIFICATION	4.404333111701859E-5	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999996495049924	WITHOUT_CLASSIFICATION	3.504950075995221E-6	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999946221668491	WITHOUT_CLASSIFICATION	5.377833150891706E-6	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999740017565318	WITHOUT_CLASSIFICATION	2.599824346813102E-5	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999011364446552	WITHOUT_CLASSIFICATION	9.886355534485866E-5	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999973932807368	WITHOUT_CLASSIFICATION	2.606719263291705E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998959392753393	WITHOUT_CLASSIFICATION	1.0406072466081077E-4	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999052166925482	WITHOUT_CLASSIFICATION	9.478330745185453E-5	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999453103482732	WITHOUT_CLASSIFICATION	5.468965172672544E-5	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.99974173755906	WITHOUT_CLASSIFICATION	2.5826244093998883E-4	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999302591254307	WITHOUT_CLASSIFICATION	6.97408745693045E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9999028899210177	WITHOUT_CLASSIFICATION	9.71100789822615E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9999028899210177	WITHOUT_CLASSIFICATION	9.71100789822615E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998959392753393	WITHOUT_CLASSIFICATION	1.0406072466081077E-4	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.946653462694762	WITHOUT_CLASSIFICATION	0.053346537305238	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999989475066087	WITHOUT_CLASSIFICATION	1.0524933912978718E-6	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9992955432245872	WITHOUT_CLASSIFICATION	7.044567754127892E-4	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999307161446042	WITHOUT_CLASSIFICATION	6.928385539584493E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999992532943449	WITHOUT_CLASSIFICATION	7.467056551070708E-6	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999752893339628	WITHOUT_CLASSIFICATION	2.4710666037197293E-5	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9987946845143874	WITHOUT_CLASSIFICATION	0.0012053154856126542	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999962987657645	WITHOUT_CLASSIFICATION	3.701234235506656E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971825394036	WITHOUT_CLASSIFICATION	1.028174605963418E-4	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999915865169644	WITHOUT_CLASSIFICATION	8.413483035605037E-6	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999964078720553	WITHOUT_CLASSIFICATION	3.592127944694734E-5	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9985918341676981	WITHOUT_CLASSIFICATION	0.0014081658323018412	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999148921688034	WITHOUT_CLASSIFICATION	8.510783119664608E-5	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999963052861909	WITHOUT_CLASSIFICATION	3.694713809108702E-6	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999614575552972	WITHOUT_CLASSIFICATION	3.8542444702886967E-5	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997185737400262	WITHOUT_CLASSIFICATION	2.814262599738985E-4	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999627117598799	WITHOUT_CLASSIFICATION	3.728824012004263E-5	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998176564402084	WITHOUT_CLASSIFICATION	1.8234355979171565E-4	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999504556954859	WITHOUT_CLASSIFICATION	4.954430451397632E-5	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999937170372126	WITHOUT_CLASSIFICATION	6.282962787397577E-5	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9996304826110999	WITHOUT_CLASSIFICATION	3.6951738890011337E-4	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999864396985364	WITHOUT_CLASSIFICATION	1.3560301463717083E-5	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313142532743	WITHOUT_CLASSIFICATION	6.868574672568337E-5	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999354959893992	WITHOUT_CLASSIFICATION	6.450401060084922E-5	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999449364657951	WITHOUT_CLASSIFICATION	5.5063534205022806E-5	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998895466644491	WITHOUT_CLASSIFICATION	1.1045333555100419E-4	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999386437732213	WITHOUT_CLASSIFICATION	6.135622677880506E-5	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999425813599615	WITHOUT_CLASSIFICATION	5.741864003854393E-5	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999386437732213	WITHOUT_CLASSIFICATION	6.135622677880506E-5	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999386437732213	WITHOUT_CLASSIFICATION	6.135622677880506E-5	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999984635025013	WITHOUT_CLASSIFICATION	1.5364974986711187E-6	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999986117727543	WITHOUT_CLASSIFICATION	1.3882272456965897E-6	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999820894128252	WITHOUT_CLASSIFICATION	1.7910587174797567E-5	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999891579499419	WITHOUT_CLASSIFICATION	1.0842050058085504E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948807116343	WITHOUT_CLASSIFICATION	5.119288365698849E-5	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685945881476	WITHOUT_CLASSIFICATION	3.140541185249376E-5	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999392130916277	WITHOUT_CLASSIFICATION	6.078690837219861E-5	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999386437732213	WITHOUT_CLASSIFICATION	6.135622677880506E-5	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999270643326932	WITHOUT_CLASSIFICATION	7.29356673068647E-5	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999386437732213	WITHOUT_CLASSIFICATION	6.135622677880506E-5	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999540726309182	WITHOUT_CLASSIFICATION	4.592736908186031E-5	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998938900017127	WITHOUT_CLASSIFICATION	1.0610999828726426E-4	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.999708555376417	WITHOUT_CLASSIFICATION	2.91444623583006E-4	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999578663862912	WITHOUT_CLASSIFICATION	4.213361370876328E-5	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999988404568116	WITHOUT_CLASSIFICATION	1.159543188254053E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999314276113092	WITHOUT_CLASSIFICATION	6.857238869080677E-5	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.9998855975902222	WITHOUT_CLASSIFICATION	1.1440240977782057E-4	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999034581469077	WITHOUT_CLASSIFICATION	9.654185309225176E-5	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.999997981088307	WITHOUT_CLASSIFICATION	2.0189116931318142E-6	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999031207898125	WITHOUT_CLASSIFICATION	9.687921018755493E-5	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999048116014135	WITHOUT_CLASSIFICATION	9.518839858642643E-5	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999213509544906	WITHOUT_CLASSIFICATION	7.864904550930962E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971825394036	WITHOUT_CLASSIFICATION	1.028174605963418E-4	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999258013912619	WITHOUT_CLASSIFICATION	7.419860873808592E-5	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999926188483331	WITHOUT_CLASSIFICATION	7.3811516667982154E-6	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999778469546992	WITHOUT_CLASSIFICATION	2.2153045300927715E-5	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999204182650495	WITHOUT_CLASSIFICATION	7.958173495054272E-5	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9994696784991487	WITHOUT_CLASSIFICATION	5.303215008513988E-4	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9997714983455752	WITHOUT_CLASSIFICATION	2.2850165442467486E-4	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998934061748997	WITHOUT_CLASSIFICATION	1.0659382510024315E-4	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999226798524244	WITHOUT_CLASSIFICATION	7.732014757553881E-5	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998877988949773	WITHOUT_CLASSIFICATION	1.1220110502271606E-4	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998979940818391	WITHOUT_CLASSIFICATION	1.0200591816097098E-4	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9942188636718786	WITHOUT_CLASSIFICATION	0.005781136328121434	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999683132471579	WITHOUT_CLASSIFICATION	3.1686752842099183E-4	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999716518892086	WITHOUT_CLASSIFICATION	2.834811079144351E-5	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9989255506998597	WITHOUT_CLASSIFICATION	0.0010744493001403376	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999883579174938	WITHOUT_CLASSIFICATION	1.1642082506206176E-4	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9998976519278973	WITHOUT_CLASSIFICATION	1.0234807210274537E-4	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9997981611046218	WITHOUT_CLASSIFICATION	2.0183889537823076E-4	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999439054734727	WITHOUT_CLASSIFICATION	5.609452652737528E-5	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999923668545241	WITHOUT_CLASSIFICATION	7.633145475907477E-6	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999589904363575	WITHOUT_CLASSIFICATION	4.100956364250473E-4	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9998603943602438	WITHOUT_CLASSIFICATION	1.3960563975619282E-4	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9997584848231728	WITHOUT_CLASSIFICATION	2.4151517682716658E-4	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9996773670343655	WITHOUT_CLASSIFICATION	3.226329656344525E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971825394036	WITHOUT_CLASSIFICATION	1.028174605963418E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999314276113092	WITHOUT_CLASSIFICATION	6.857238869080677E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9996356373942034	WITHOUT_CLASSIFICATION	3.6436260579661363E-4	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999605745303879	WITHOUT_CLASSIFICATION	3.942546961209369E-5	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999424509313978	WITHOUT_CLASSIFICATION	5.754906860228966E-5	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999578663862912	WITHOUT_CLASSIFICATION	4.213361370876328E-5	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999896296615746	WITHOUT_CLASSIFICATION	1.0370338425394592E-4	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.9999240556913517	WITHOUT_CLASSIFICATION	7.594430864838856E-5	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9942188636718786	WITHOUT_CLASSIFICATION	0.005781136328121434	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9991777557255096	WITHOUT_CLASSIFICATION	8.222442744904902E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998363839357137	WITHOUT_CLASSIFICATION	1.6361606428626023E-4	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998759363431837	WITHOUT_CLASSIFICATION	1.2406365681618593E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999025614629925	WITHOUT_CLASSIFICATION	9.743853700748137E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999820524480094	WITHOUT_CLASSIFICATION	1.7947551990612408E-4	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999680164702912	WITHOUT_CLASSIFICATION	3.1983529708797776E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971825394036	WITHOUT_CLASSIFICATION	1.028174605963418E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971825394036	WITHOUT_CLASSIFICATION	1.028174605963418E-4	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999488090963756	WITHOUT_CLASSIFICATION	5.1190903624396605E-5	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999893261653097	WITHOUT_CLASSIFICATION	1.0673834690284209E-5	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9997980348868145	WITHOUT_CLASSIFICATION	2.0196511318544498E-4	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999114560479774	WITHOUT_CLASSIFICATION	8.854395202251793E-5	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999721636859429	WITHOUT_CLASSIFICATION	2.7836314057111892E-5	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999579338674449	WITHOUT_CLASSIFICATION	4.20661325551866E-5	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999875821576893	WITHOUT_CLASSIFICATION	1.2417842310609084E-5	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9997910606667486	WITHOUT_CLASSIFICATION	2.089393332513518E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.999741993204065	WITHOUT_CLASSIFICATION	2.5800679593499095E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971825394036	WITHOUT_CLASSIFICATION	1.028174605963418E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999935218487141	WITHOUT_CLASSIFICATION	6.478151285910049E-5	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999862254853654	WITHOUT_CLASSIFICATION	1.3774514634665968E-5	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999297948877092	WITHOUT_CLASSIFICATION	7.020511229089096E-5	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999412061093265	WITHOUT_CLASSIFICATION	5.879389067348554E-5	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9996702762233488	WITHOUT_CLASSIFICATION	3.297237766512256E-4	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999412315014917	WITHOUT_CLASSIFICATION	5.876849850817769E-5	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999328105002098	WITHOUT_CLASSIFICATION	6.718949979015694E-5	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.999897397572255	WITHOUT_CLASSIFICATION	1.0260242774494828E-4	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.924978498167044	WITHOUT_CLASSIFICATION	0.07502150183295594	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999847135550937	WITHOUT_CLASSIFICATION	1.5286444906388107E-5	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999847086545127	WITHOUT_CLASSIFICATION	1.529134548732038E-5	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999578663862912	WITHOUT_CLASSIFICATION	4.213361370876328E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999314276113092	WITHOUT_CLASSIFICATION	6.857238869080677E-5	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9987565759189198	WITHOUT_CLASSIFICATION	0.0012434240810802234	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999962846013715	WITHOUT_CLASSIFICATION	3.715398628608926E-6	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9915094169207842	WITHOUT_CLASSIFICATION	0.008490583079215717	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9997416434448925	WITHOUT_CLASSIFICATION	2.5835655510755216E-4	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9997443534444695	WITHOUT_CLASSIFICATION	2.556465555304889E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9997448342861996	WITHOUT_CLASSIFICATION	2.551657138003928E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999314276113092	WITHOUT_CLASSIFICATION	6.857238869080677E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999040526488577	WITHOUT_CLASSIFICATION	9.59473511423116E-5	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999862254853654	WITHOUT_CLASSIFICATION	1.3774514634665968E-5	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9985648219794987	WITHOUT_CLASSIFICATION	0.0014351780205012544	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999935218487141	WITHOUT_CLASSIFICATION	6.478151285910049E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971825394036	WITHOUT_CLASSIFICATION	1.028174605963418E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999744332650658	WITHOUT_CLASSIFICATION	2.556673493420749E-4	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9758987476472194	WITHOUT_CLASSIFICATION	0.024101252352780617	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971825394036	WITHOUT_CLASSIFICATION	1.028174605963418E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999619304144837	WITHOUT_CLASSIFICATION	3.80695855164293E-5	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998759363431837	WITHOUT_CLASSIFICATION	1.2406365681618593E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999025614629925	WITHOUT_CLASSIFICATION	9.743853700748137E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999820524480094	WITHOUT_CLASSIFICATION	1.7947551990612408E-4	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999898434429201	WITHOUT_CLASSIFICATION	1.015655707993738E-5	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.9999439622708337	WITHOUT_CLASSIFICATION	5.6037729166368045E-5	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999767144780328	WITHOUT_CLASSIFICATION	2.3285521967187583E-5	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999935218487141	WITHOUT_CLASSIFICATION	6.478151285910049E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999744332650658	WITHOUT_CLASSIFICATION	2.556673493420749E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971825394036	WITHOUT_CLASSIFICATION	1.028174605963418E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999314276113092	WITHOUT_CLASSIFICATION	6.857238869080677E-5	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999680164702912	WITHOUT_CLASSIFICATION	3.1983529708797776E-5	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999488090963756	WITHOUT_CLASSIFICATION	5.1190903624396605E-5	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999893261653097	WITHOUT_CLASSIFICATION	1.0673834690284209E-5	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974889472946	WITHOUT_CLASSIFICATION	2.511052705388407E-6	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999662625641202	WITHOUT_CLASSIFICATION	3.373743587969331E-5	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999495516799362	WITHOUT_CLASSIFICATION	5.044832006379922E-5	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999857585156083	WITHOUT_CLASSIFICATION	1.424148439170205E-4	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9947635880930703	WITHOUT_CLASSIFICATION	0.005236411906929647	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999386437732213	WITHOUT_CLASSIFICATION	6.135622677880506E-5	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9993846957406567	WITHOUT_CLASSIFICATION	6.153042593432654E-4	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999088060130042	WITHOUT_CLASSIFICATION	9.119398699580429E-5	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.999892186876225	WITHOUT_CLASSIFICATION	1.078131237750095E-4	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999826464850867	WITHOUT_CLASSIFICATION	1.7353514913230243E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999386437732213	WITHOUT_CLASSIFICATION	6.135622677880506E-5	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999425813599615	WITHOUT_CLASSIFICATION	5.741864003854393E-5	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999891579499419	WITHOUT_CLASSIFICATION	1.0842050058085504E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999987221909478	WITHOUT_CLASSIFICATION	1.2778090521538941E-6	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999474452110548	WITHOUT_CLASSIFICATION	5.255478894512171E-5	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999647833532225	WITHOUT_CLASSIFICATION	3.521664677743177E-5	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999386437732213	WITHOUT_CLASSIFICATION	6.135622677880506E-5	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9936176508814347	WITHOUT_CLASSIFICATION	0.006382349118565314	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971825394036	WITHOUT_CLASSIFICATION	1.028174605963418E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971825394036	WITHOUT_CLASSIFICATION	1.028174605963418E-4	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.9999925226546235	WITHOUT_CLASSIFICATION	7.477345376661285E-6	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948807116343	WITHOUT_CLASSIFICATION	5.119288365698849E-5	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999386437732213	WITHOUT_CLASSIFICATION	6.135622677880506E-5	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999923668545241	WITHOUT_CLASSIFICATION	7.633145475907477E-6	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9997122333944253	WITHOUT_CLASSIFICATION	2.877666055747921E-4	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9998696358907672	WITHOUT_CLASSIFICATION	1.3036410923291677E-4	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999973731820827	WITHOUT_CLASSIFICATION	2.6268179172991453E-5	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9998360476367808	WITHOUT_CLASSIFICATION	1.6395236321925077E-4	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999984380558864	WITHOUT_CLASSIFICATION	1.5619441136076446E-6	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998417624649925	WITHOUT_CLASSIFICATION	1.5823753500751337E-4	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999406793256002	WITHOUT_CLASSIFICATION	5.932067439985632E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999957370916815	WITHOUT_CLASSIFICATION	4.2629083183905205E-6	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999962987657645	WITHOUT_CLASSIFICATION	3.701234235506656E-6	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9998154290353792	WITHOUT_CLASSIFICATION	1.8457096462072905E-4	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999802632426661	WITHOUT_CLASSIFICATION	1.9736757333926994E-5	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999481960433901	WITHOUT_CLASSIFICATION	5.180395660983417E-5	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999837086102068	WITHOUT_CLASSIFICATION	1.6291389793172302E-5	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999928966758204	WITHOUT_CLASSIFICATION	7.10332417961194E-6	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999566342219135	WITHOUT_CLASSIFICATION	4.336577808643093E-5	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940569637198	WITHOUT_CLASSIFICATION	5.943036280203151E-5	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999914880754358	WITHOUT_CLASSIFICATION	8.51192456420545E-5	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997554138354925	WITHOUT_CLASSIFICATION	2.445861645075413E-4	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9997339338219837	WITHOUT_CLASSIFICATION	2.6606617801626066E-4	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9995174045756006	WITHOUT_CLASSIFICATION	4.8259542439939664E-4	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996472584527466	WITHOUT_CLASSIFICATION	3.5274154725340216E-4	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9985642216649615	WITHOUT_CLASSIFICATION	0.0014357783350385936	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996323385220722	WITHOUT_CLASSIFICATION	3.676614779278094E-4	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998121787051538	WITHOUT_CLASSIFICATION	1.8782129484616914E-4	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9996208768606937	WITHOUT_CLASSIFICATION	3.791231393063333E-4	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999528277699371	WITHOUT_CLASSIFICATION	4.717223006276119E-5	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996323385220722	WITHOUT_CLASSIFICATION	3.676614779278094E-4	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998979498086531	WITHOUT_CLASSIFICATION	1.0205019134688362E-4	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996514809894221	WITHOUT_CLASSIFICATION	3.4851901057794346E-4	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999512543755492	WITHOUT_CLASSIFICATION	4.874562445078409E-5	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999669148442153	WITHOUT_CLASSIFICATION	3.308515578477578E-5	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9998585134089921	WITHOUT_CLASSIFICATION	1.414865910078474E-4	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999848733187283	WITHOUT_CLASSIFICATION	1.5126681271635772E-5	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9999115397655198	WITHOUT_CLASSIFICATION	8.846023448016143E-5	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999542128400185	WITHOUT_CLASSIFICATION	4.5787159981480904E-5	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999542128400185	WITHOUT_CLASSIFICATION	4.5787159981480904E-5	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999883875856054	WITHOUT_CLASSIFICATION	1.1612414394587092E-5	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999307078670783	WITHOUT_CLASSIFICATION	6.929213292175817E-5	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999103201921643	WITHOUT_CLASSIFICATION	8.967980783565728E-5	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999773945907467	WITHOUT_CLASSIFICATION	2.2605409253223508E-5	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9969201431600929	WITHOUT_CLASSIFICATION	0.0030798568399070738	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999372601965381	WITHOUT_CLASSIFICATION	6.273980346197036E-5	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999661537800975	WITHOUT_CLASSIFICATION	3.384621990250098E-5	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999866974831089	WITHOUT_CLASSIFICATION	1.3302516891066904E-5	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9997006999513842	WITHOUT_CLASSIFICATION	2.9930004861568554E-4	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999979796033123	WITHOUT_CLASSIFICATION	2.0203966878380854E-6	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999881469858234	WITHOUT_CLASSIFICATION	1.1853014176610501E-5	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999417389652072	WITHOUT_CLASSIFICATION	5.826103479279977E-5	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999981730754029	WITHOUT_CLASSIFICATION	1.826924597107778E-5	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9991608735307427	WITHOUT_CLASSIFICATION	8.391264692573364E-4	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999662826050422	WITHOUT_CLASSIFICATION	3.371739495784981E-5	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9995796450183387	WITHOUT_CLASSIFICATION	4.2035498166125896E-4	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9993606537535504	WITHOUT_CLASSIFICATION	6.393462464495303E-4	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9992340708990425	WITHOUT_CLASSIFICATION	7.659291009574514E-4	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999804864267853	WITHOUT_CLASSIFICATION	1.9513573214739137E-5	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999019259883589	WITHOUT_CLASSIFICATION	9.807401164098587E-5	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999516375459327	WITHOUT_CLASSIFICATION	4.8362454067303494E-5	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999373598138679	WITHOUT_CLASSIFICATION	6.264018613208634E-5	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.999951885337594	WITHOUT_CLASSIFICATION	4.811466240596718E-5	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999797176563102	WITHOUT_CLASSIFICATION	2.0282343689778053E-5	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999540730948525	WITHOUT_CLASSIFICATION	4.592690514747009E-5	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9997456398976261	WITHOUT_CLASSIFICATION	2.5436010237383177E-4	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9993824465794514	WITHOUT_CLASSIFICATION	6.175534205486131E-4	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9994848314520534	WITHOUT_CLASSIFICATION	5.151685479466996E-4	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9033306556576807	WITHOUT_CLASSIFICATION	0.09666934434231926	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9986911393241316	WITHOUT_CLASSIFICATION	0.0013088606758684244	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999678833388208	WITHOUT_CLASSIFICATION	3.2116661179109274E-5	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.9999761304418462	WITHOUT_CLASSIFICATION	2.386955815380732E-5	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999788588437806	WITHOUT_CLASSIFICATION	2.1141156219483865E-5	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999878444833399	WITHOUT_CLASSIFICATION	1.2155516660193643E-5	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999520749047086	WITHOUT_CLASSIFICATION	4.792509529142359E-5	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.9998866967512893	WITHOUT_CLASSIFICATION	1.1330324871064176E-4	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9978980238040783	WITHOUT_CLASSIFICATION	0.002101976195921617	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999936660521284	WITHOUT_CLASSIFICATION	6.333947871616897E-6	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8264035118964126	WITHOUT_CLASSIFICATION	0.17359648810358733	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999965012568245	WITHOUT_CLASSIFICATION	3.498743175575968E-6	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999896405792508	WITHOUT_CLASSIFICATION	1.0359420749195721E-4	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999721636859429	WITHOUT_CLASSIFICATION	2.7836314057111892E-5	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999721636859429	WITHOUT_CLASSIFICATION	2.7836314057111892E-5	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9997736857157692	WITHOUT_CLASSIFICATION	2.2631428423081245E-4	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9997945026303544	WITHOUT_CLASSIFICATION	2.0549736964561326E-4	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999864595490906	WITHOUT_CLASSIFICATION	1.3540450909339029E-5	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999908237601628	WITHOUT_CLASSIFICATION	9.17623983721087E-6	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999618101017733	WITHOUT_CLASSIFICATION	3.818989822664918E-5	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999670775988164	WITHOUT_CLASSIFICATION	3.292240118356064E-5	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999405254637155	WITHOUT_CLASSIFICATION	5.9474536284519004E-5	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999980886507117	WITHOUT_CLASSIFICATION	1.911349288253268E-6	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999999637446908	WITHOUT_CLASSIFICATION	3.6255309199291083E-7	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999780176323743	WITHOUT_CLASSIFICATION	2.1982367625771578E-5	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999738411764806	WITHOUT_CLASSIFICATION	2.615882351937021E-5	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999972039321678	WITHOUT_CLASSIFICATION	2.7960678320871775E-6	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998899898071572	WITHOUT_CLASSIFICATION	1.1001019284288829E-4	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998941501554085	WITHOUT_CLASSIFICATION	1.0584984459145845E-4	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999454700621525	WITHOUT_CLASSIFICATION	5.452993784752626E-5	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999807850619096	WITHOUT_CLASSIFICATION	1.9214938090486085E-5	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9995110448099978	WITHOUT_CLASSIFICATION	4.889551900022815E-4	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999954777065755	WITHOUT_CLASSIFICATION	4.522293424545199E-6	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.999960370804842	WITHOUT_CLASSIFICATION	3.9629195158023466E-5	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9990592462452303	WITHOUT_CLASSIFICATION	9.407537547697605E-4	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.9998887416750666	WITHOUT_CLASSIFICATION	1.1125832493333895E-4	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999023992741566	WITHOUT_CLASSIFICATION	9.760072584338708E-5	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9990592462452303	WITHOUT_CLASSIFICATION	9.407537547697605E-4	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999789158187974	WITHOUT_CLASSIFICATION	2.108418120260428E-5	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999389615242327	WITHOUT_CLASSIFICATION	6.103847576740007E-5	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999720880437457	WITHOUT_CLASSIFICATION	2.7911956254336855E-5	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998617446035398	WITHOUT_CLASSIFICATION	1.3825539646011408E-4	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9999086340559042	WITHOUT_CLASSIFICATION	9.13659440957637E-5	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.999996195378674	WITHOUT_CLASSIFICATION	3.80462132596418E-6	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998935153848295	WITHOUT_CLASSIFICATION	1.064846151704789E-4	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999489933932353	WITHOUT_CLASSIFICATION	5.100660676473763E-5	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9987394137416331	WITHOUT_CLASSIFICATION	0.0012605862583668355	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998949822492496	WITHOUT_CLASSIFICATION	1.0501775075045687E-4	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.999927189525909	WITHOUT_CLASSIFICATION	7.281047409104068E-5	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999595590840863	WITHOUT_CLASSIFICATION	4.044091591368297E-5	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999862843054202	WITHOUT_CLASSIFICATION	1.371569457967358E-5	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999924856772642	WITHOUT_CLASSIFICATION	7.5143227358749564E-6	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9997607873476702	WITHOUT_CLASSIFICATION	2.392126523297844E-4	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999537243790881	WITHOUT_CLASSIFICATION	4.6275620911965615E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999103548781969	WITHOUT_CLASSIFICATION	8.964512180318875E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999103548781969	WITHOUT_CLASSIFICATION	8.964512180318875E-5	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9996081394600705	WITHOUT_CLASSIFICATION	3.918605399293681E-4	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9999185475443592	WITHOUT_CLASSIFICATION	8.14524556408439E-5	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9999251793170763	WITHOUT_CLASSIFICATION	7.482068292370652E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9997897620043922	WITHOUT_CLASSIFICATION	2.1023799560774905E-4	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9929450851757293	WITHOUT_CLASSIFICATION	0.007054914824270631	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9992222471709211	WITHOUT_CLASSIFICATION	7.77752829078863E-4	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999782631700578	WITHOUT_CLASSIFICATION	2.1736829942237517E-5	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9999232175810997	WITHOUT_CLASSIFICATION	7.678241890028672E-5	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9976787346184532	WITHOUT_CLASSIFICATION	0.002321265381546752	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999829630134985	WITHOUT_CLASSIFICATION	1.7036986501439817E-5	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999815885195	WITHOUT_CLASSIFICATION	1.8411480509907097E-8	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999588432079639	WITHOUT_CLASSIFICATION	4.115679203616641E-5	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9995892199408764	WITHOUT_CLASSIFICATION	4.107800591236451E-4	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999305287866225	WITHOUT_CLASSIFICATION	6.947121337745821E-5	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999566342219135	WITHOUT_CLASSIFICATION	4.336577808643093E-5	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9996451070224768	WITHOUT_CLASSIFICATION	3.548929775231866E-4	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999982941671978	WITHOUT_CLASSIFICATION	1.7058328021951105E-5	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9998124188766045	WITHOUT_CLASSIFICATION	1.8758112339543396E-4	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999682321119676	WITHOUT_CLASSIFICATION	3.176788803248232E-5	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9996821654615118	WITHOUT_CLASSIFICATION	3.1783453848818646E-4	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9999923890811002	WITHOUT_CLASSIFICATION	7.610918899783853E-6	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9943144211668872	WITHOUT_CLASSIFICATION	0.005685578833112787	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999675246589015	WITHOUT_CLASSIFICATION	3.247534109845711E-5	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999850668349974	WITHOUT_CLASSIFICATION	1.4933165002537112E-5	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999852253848914	WITHOUT_CLASSIFICATION	1.4774615108692964E-5	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999839728657771	WITHOUT_CLASSIFICATION	1.6027134222897094E-5	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999783795144652	WITHOUT_CLASSIFICATION	2.162048553472503E-5	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9989134024475256	WITHOUT_CLASSIFICATION	0.0010865975524743288	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9992918967083189	WITHOUT_CLASSIFICATION	7.081032916811015E-4	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999951473471874	WITHOUT_CLASSIFICATION	4.852652812595886E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999242358735991	WITHOUT_CLASSIFICATION	7.576412640084967E-5	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999496171982766	WITHOUT_CLASSIFICATION	5.038280172348993E-5	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999903934047931	WITHOUT_CLASSIFICATION	9.606595206930176E-6	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999994301426798	WITHOUT_CLASSIFICATION	5.698573202073519E-6	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999931373443053	WITHOUT_CLASSIFICATION	6.862655694685753E-6	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999891204551237	WITHOUT_CLASSIFICATION	1.0879544876389763E-5	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999940184651782	WITHOUT_CLASSIFICATION	5.981534821796918E-6	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999470614337488	WITHOUT_CLASSIFICATION	5.2938566251224336E-5	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9998126785467754	WITHOUT_CLASSIFICATION	1.8732145322474967E-4	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9999977252040343	WITHOUT_CLASSIFICATION	2.274795965666373E-6	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9992052591138405	WITHOUT_CLASSIFICATION	7.947408861595598E-4	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999945802067819	WITHOUT_CLASSIFICATION	5.4197932181133795E-6	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9975154118202337	WITHOUT_CLASSIFICATION	0.0024845881797662733	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999332971661777	WITHOUT_CLASSIFICATION	6.670283382230055E-5	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998362551168509	WITHOUT_CLASSIFICATION	1.637448831491068E-4	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998453187020206	WITHOUT_CLASSIFICATION	1.5468129797925918E-4	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999060823854584	WITHOUT_CLASSIFICATION	9.391761454154346E-5	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999371292520344	WITHOUT_CLASSIFICATION	6.287074796556476E-5	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999589819140946	WITHOUT_CLASSIFICATION	4.101808590542066E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999957370916815	WITHOUT_CLASSIFICATION	4.2629083183905205E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999957370916815	WITHOUT_CLASSIFICATION	4.2629083183905205E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999922012659017	WITHOUT_CLASSIFICATION	7.798734098256694E-6	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9990839436893216	WITHOUT_CLASSIFICATION	9.160563106785032E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9996995806976567	WITHOUT_CLASSIFICATION	3.004193023433671E-4	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998334703316377	WITHOUT_CLASSIFICATION	1.6652966836232914E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9996995806976567	WITHOUT_CLASSIFICATION	3.004193023433671E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9995693902850956	WITHOUT_CLASSIFICATION	4.3060971490438914E-4	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999699040824466	WITHOUT_CLASSIFICATION	3.0095917553453443E-5	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.9998850804757191	WITHOUT_CLASSIFICATION	1.1491952428084952E-4	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999793221776416	WITHOUT_CLASSIFICATION	2.067782235837682E-5	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9997237410705019	WITHOUT_CLASSIFICATION	2.762589294981777E-4	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9994343760399277	WITHOUT_CLASSIFICATION	5.656239600722888E-4	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999662935982635	WITHOUT_CLASSIFICATION	3.3706401736526206E-5	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9982860240515418	WITHOUT_CLASSIFICATION	0.0017139759484581698	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999976672682778	WITHOUT_CLASSIFICATION	2.3327317223066384E-6	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999979145112543	WITHOUT_CLASSIFICATION	2.085488745646607E-6	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999763178937635	WITHOUT_CLASSIFICATION	2.3682106236451776E-5	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999910341769766	WITHOUT_CLASSIFICATION	8.965823023397263E-5	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9997979689344232	WITHOUT_CLASSIFICATION	2.020310655769107E-4	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9371460681715114	WITHOUT_CLASSIFICATION	0.06285393182848865	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999959830366234	WITHOUT_CLASSIFICATION	4.016963376536041E-6	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9998775457030449	WITHOUT_CLASSIFICATION	1.2245429695509745E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999980532510809	WITHOUT_CLASSIFICATION	1.946748919066621E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999980532510809	WITHOUT_CLASSIFICATION	1.946748919066621E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999184777714948	WITHOUT_CLASSIFICATION	8.152222850521812E-5	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999402794921932	WITHOUT_CLASSIFICATION	5.97205078068339E-5	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999889477771889	WITHOUT_CLASSIFICATION	1.1052222811114335E-5	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9998373774899836	WITHOUT_CLASSIFICATION	1.626225100164167E-4	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999540908441834	WITHOUT_CLASSIFICATION	4.590915581672931E-5	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9995638271953826	WITHOUT_CLASSIFICATION	4.361728046174078E-4	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9984818513168873	WITHOUT_CLASSIFICATION	0.001518148683112685	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999435708018805	WITHOUT_CLASSIFICATION	5.642919811954416E-5	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.9999797898372064	WITHOUT_CLASSIFICATION	2.0210162793644062E-5	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999660640936726	WITHOUT_CLASSIFICATION	3.393590632729287E-5	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999328713338009	WITHOUT_CLASSIFICATION	6.712866619914458E-5	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999946190416322	WITHOUT_CLASSIFICATION	5.3809583678173945E-6	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999509035227797	WITHOUT_CLASSIFICATION	4.90964772203311E-5	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999687471340011	WITHOUT_CLASSIFICATION	3.1252865998892515E-5	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998417049081215	WITHOUT_CLASSIFICATION	1.5829509187843688E-4	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999915506409087	WITHOUT_CLASSIFICATION	8.449359091292216E-5	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999482329205388	WITHOUT_CLASSIFICATION	5.1767079461263986E-5	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9997429895710147	WITHOUT_CLASSIFICATION	2.570104289852618E-4	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9999454905697158	WITHOUT_CLASSIFICATION	5.45094302840913E-5	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999891144115648	WITHOUT_CLASSIFICATION	1.0885588435126292E-5	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999803663752234	WITHOUT_CLASSIFICATION	1.96336247766404E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999661192207636	WITHOUT_CLASSIFICATION	3.38807792363609E-5	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999800520203315	WITHOUT_CLASSIFICATION	1.9947979668615525E-5	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999859960615125	WITHOUT_CLASSIFICATION	1.4003938487523659E-5	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9998828252911203	WITHOUT_CLASSIFICATION	1.1717470887965917E-4	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999520754690437	WITHOUT_CLASSIFICATION	4.792453095633015E-5	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998145306697461	WITHOUT_CLASSIFICATION	1.8546933025395145E-4	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9990604133601261	WITHOUT_CLASSIFICATION	9.39586639873933E-4	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999953922802819	WITHOUT_CLASSIFICATION	4.607719718114166E-6	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9993608047855164	WITHOUT_CLASSIFICATION	6.391952144835699E-4	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999838240007748	WITHOUT_CLASSIFICATION	1.617599922523938E-5	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999935581484876	WITHOUT_CLASSIFICATION	6.441851512521193E-6	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9986999002666788	WITHOUT_CLASSIFICATION	0.0013000997333213065	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998360854177677	WITHOUT_CLASSIFICATION	1.6391458223240907E-4	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999827831472992	WITHOUT_CLASSIFICATION	1.7216852700930914E-5	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999925262093836	WITHOUT_CLASSIFICATION	7.473790616394731E-6	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999774722535173	WITHOUT_CLASSIFICATION	2.2527746482773693E-5	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999698623016047	WITHOUT_CLASSIFICATION	3.013769839535758E-5	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999493642629543	WITHOUT_CLASSIFICATION	5.063573704559395E-5	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9988755206983463	WITHOUT_CLASSIFICATION	0.0011244793016536533	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9998445931512996	WITHOUT_CLASSIFICATION	1.5540684870052416E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999205602268116	WITHOUT_CLASSIFICATION	7.943977318843325E-5	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9997114092259433	WITHOUT_CLASSIFICATION	2.885907740566815E-4	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9755888950409033	WITHOUT_CLASSIFICATION	0.024411104959096746	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999231674758194	WITHOUT_CLASSIFICATION	7.683252418059587E-4	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9936396178304888	WITHOUT_CLASSIFICATION	0.006360382169511247	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9778788922929365	WITHOUT_CLASSIFICATION	0.022121107707063555	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999983627763845	WITHOUT_CLASSIFICATION	1.6372236154227613E-6	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999888754407946	WITHOUT_CLASSIFICATION	1.1124559205406766E-4	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999098040783307	WITHOUT_CLASSIFICATION	9.019592166921199E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999205602268116	WITHOUT_CLASSIFICATION	7.943977318843325E-5	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999930638298092	WITHOUT_CLASSIFICATION	6.936170190765323E-6	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999081016330755	WITHOUT_CLASSIFICATION	9.18983669244851E-5	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.99998885909964	WITHOUT_CLASSIFICATION	1.1140900359980182E-5	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9999578579534376	WITHOUT_CLASSIFICATION	4.2142046562360634E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999040526488577	WITHOUT_CLASSIFICATION	9.59473511423116E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999040526488577	WITHOUT_CLASSIFICATION	9.59473511423116E-5	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999380250123295	WITHOUT_CLASSIFICATION	6.197498767053072E-5	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999828738288499	WITHOUT_CLASSIFICATION	1.7126171150097763E-4	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999716568052619	WITHOUT_CLASSIFICATION	2.8343194738048694E-5	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9997483320928328	WITHOUT_CLASSIFICATION	2.516679071673409E-4	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9998387929275482	WITHOUT_CLASSIFICATION	1.612070724518616E-4	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9997697265728852	WITHOUT_CLASSIFICATION	2.3027342711475296E-4	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999661764680928	WITHOUT_CLASSIFICATION	3.382353190722834E-5	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999789412254418	WITHOUT_CLASSIFICATION	2.105877455819041E-5	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9996163164123435	WITHOUT_CLASSIFICATION	3.8368358765654214E-4	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9997237226337956	WITHOUT_CLASSIFICATION	2.7627736620429547E-4	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999407036698694	WITHOUT_CLASSIFICATION	5.929633013055865E-5	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.9998233320773533	WITHOUT_CLASSIFICATION	1.7666792264670156E-4	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999073486734815	WITHOUT_CLASSIFICATION	9.265132651846364E-5	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999174617051948	WITHOUT_CLASSIFICATION	8.253829480520706E-5	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.99629331819631	WITHOUT_CLASSIFICATION	0.0037066818036900527	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998514584863537	WITHOUT_CLASSIFICATION	1.4854151364626078E-4	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997437157866781	WITHOUT_CLASSIFICATION	2.5628421332196287E-4	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9954486872742596	WITHOUT_CLASSIFICATION	0.004551312725740459	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998990141622663	WITHOUT_CLASSIFICATION	1.0098583773366999E-4	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999918538552923	WITHOUT_CLASSIFICATION	8.146144707665904E-6	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9997415070099009	WITHOUT_CLASSIFICATION	2.584929900990344E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999654964452895	WITHOUT_CLASSIFICATION	3.450355471042284E-5	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999976364043974	WITHOUT_CLASSIFICATION	2.363595602584265E-6	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9997986753867079	WITHOUT_CLASSIFICATION	2.0132461329213207E-4	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999878662684654	WITHOUT_CLASSIFICATION	1.2133731534727851E-5	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999888177948542	WITHOUT_CLASSIFICATION	1.1182205145795565E-4	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999870185971597	WITHOUT_CLASSIFICATION	1.2981402840373352E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.999451490755007	WITHOUT_CLASSIFICATION	5.48509244992959E-4	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999793726719169	WITHOUT_CLASSIFICATION	2.06273280830505E-5	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9997891095076052	WITHOUT_CLASSIFICATION	2.1089049239471076E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999806999345878	WITHOUT_CLASSIFICATION	1.9300065412252578E-5	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999969426111844	WITHOUT_CLASSIFICATION	3.05738881559321E-5	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999592805422707	WITHOUT_CLASSIFICATION	4.0719457729256944E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999791506603957	WITHOUT_CLASSIFICATION	2.084933960435291E-5	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999416787252075	WITHOUT_CLASSIFICATION	5.832127479249435E-4	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9997891095076052	WITHOUT_CLASSIFICATION	2.1089049239471076E-4	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9998643298241652	WITHOUT_CLASSIFICATION	1.3567017583482585E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999791506603957	WITHOUT_CLASSIFICATION	2.084933960435291E-5	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999278397519492	WITHOUT_CLASSIFICATION	7.216024805074162E-5	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999960278533451	WITHOUT_CLASSIFICATION	3.972146654904047E-6	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999328713338009	WITHOUT_CLASSIFICATION	6.712866619914458E-5	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999348069416285	WITHOUT_CLASSIFICATION	6.519305837152547E-5	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998417624649925	WITHOUT_CLASSIFICATION	1.5823753500751337E-4	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999191536280234	WITHOUT_CLASSIFICATION	8.084637197651867E-5	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999034643249418	WITHOUT_CLASSIFICATION	9.653567505820859E-5	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999772134370127	WITHOUT_CLASSIFICATION	2.2786562987199254E-5	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9999566606303467	WITHOUT_CLASSIFICATION	4.3339369653352056E-5	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999729893841488	WITHOUT_CLASSIFICATION	2.7010615851139485E-5	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999984639520175	WITHOUT_CLASSIFICATION	1.5360479824940728E-5	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999103548781969	WITHOUT_CLASSIFICATION	8.964512180318875E-5	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999533847546134	WITHOUT_CLASSIFICATION	4.6615245386652946E-5	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999171906315659	WITHOUT_CLASSIFICATION	8.280936843403793E-5	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.999945802374598	WITHOUT_CLASSIFICATION	5.4197625401937163E-5	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999749454594166	WITHOUT_CLASSIFICATION	2.505454058352505E-5	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9998775654031198	WITHOUT_CLASSIFICATION	1.2243459688027504E-4	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999920806053045	WITHOUT_CLASSIFICATION	7.919394695371785E-6	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998926245344406	WITHOUT_CLASSIFICATION	1.0737546555939199E-4	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999958486873055	WITHOUT_CLASSIFICATION	4.1513126944965215E-5	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.999942246622796	WITHOUT_CLASSIFICATION	5.7753377203905956E-5	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999603728144084	WITHOUT_CLASSIFICATION	3.96271855915111E-5	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998939534447763	WITHOUT_CLASSIFICATION	1.0604655522365853E-4	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999103548781969	WITHOUT_CLASSIFICATION	8.964512180318875E-5	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999951816727242	WITHOUT_CLASSIFICATION	4.818327275844396E-6	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999990976606661	WITHOUT_CLASSIFICATION	9.023393339061212E-6	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999332578783486	WITHOUT_CLASSIFICATION	6.674212165136759E-5	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9997451590399831	WITHOUT_CLASSIFICATION	2.5484096001697324E-4	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9999218820924499	WITHOUT_CLASSIFICATION	7.811790755007548E-5	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9999266165627934	WITHOUT_CLASSIFICATION	7.338343720658936E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998879149918155	WITHOUT_CLASSIFICATION	1.1208500818450185E-4	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998085375493109	WITHOUT_CLASSIFICATION	1.914624506892354E-4	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9990082472560858	WITHOUT_CLASSIFICATION	9.917527439142414E-4	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999710691478275	WITHOUT_CLASSIFICATION	2.89308521724358E-5	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999720174290677	WITHOUT_CLASSIFICATION	2.7982570932295304E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999459532201399	WITHOUT_CLASSIFICATION	5.404677986005975E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999459532201399	WITHOUT_CLASSIFICATION	5.404677986005975E-5	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999994475513485	WITHOUT_CLASSIFICATION	5.524486515041902E-7	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999060167402409	WITHOUT_CLASSIFICATION	9.398325975908616E-5	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999542629278051	WITHOUT_CLASSIFICATION	4.573707219486893E-5	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999613635325596	WITHOUT_CLASSIFICATION	3.863646744041596E-5	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9998960285878445	WITHOUT_CLASSIFICATION	1.0397141215545169E-4	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9994299504074459	WITHOUT_CLASSIFICATION	5.700495925541503E-4	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999954216328029	WITHOUT_CLASSIFICATION	4.578367197216573E-6	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999553019422925	WITHOUT_CLASSIFICATION	4.4698057707494265E-5	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999468717569614	WITHOUT_CLASSIFICATION	5.312824303850856E-5	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999963775388062	WITHOUT_CLASSIFICATION	3.622461193736484E-6	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999022959049684	WITHOUT_CLASSIFICATION	9.770409503164434E-5	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999997235605366	WITHOUT_CLASSIFICATION	2.764394634085918E-7	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9992209245470086	WITHOUT_CLASSIFICATION	7.790754529914053E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999459532201399	WITHOUT_CLASSIFICATION	5.404677986005975E-5	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999061413682478	WITHOUT_CLASSIFICATION	9.385863175223464E-5	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999147681467317	WITHOUT_CLASSIFICATION	8.523185326823548E-5	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995053224386341	WITHOUT_CLASSIFICATION	4.94677561365947E-4	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998009249710189	WITHOUT_CLASSIFICATION	1.9907502898100905E-4	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999328445120854	WITHOUT_CLASSIFICATION	6.715548791460737E-5	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999793714609116	WITHOUT_CLASSIFICATION	2.0628539088383396E-4	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999967419878553	WITHOUT_CLASSIFICATION	3.2580121448584907E-6	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999861682716782	WITHOUT_CLASSIFICATION	1.3831728321842394E-5	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999378361677511	WITHOUT_CLASSIFICATION	6.216383224881794E-5	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999128520198082	WITHOUT_CLASSIFICATION	8.714798019175874E-5	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999788545049987	WITHOUT_CLASSIFICATION	2.114549500131952E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998879149918155	WITHOUT_CLASSIFICATION	1.1208500818450185E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999459532201399	WITHOUT_CLASSIFICATION	5.404677986005975E-5	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998228738382522	WITHOUT_CLASSIFICATION	1.7712616174779005E-4	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999918757329305	WITHOUT_CLASSIFICATION	8.124267069522207E-6	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999934793364379	WITHOUT_CLASSIFICATION	6.520663562089437E-6	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9998758654234287	WITHOUT_CLASSIFICATION	1.2413457657135625E-4	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999978133618472	WITHOUT_CLASSIFICATION	2.18663815284258E-6	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9989254867464582	WITHOUT_CLASSIFICATION	0.0010745132535418993	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601404978532	WITHOUT_CLASSIFICATION	2.3985950214687766E-4	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999894477108442	WITHOUT_CLASSIFICATION	1.0552289155866352E-5	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999813002935793	WITHOUT_CLASSIFICATION	1.8699706420631476E-5	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998897977284559	WITHOUT_CLASSIFICATION	1.1020227154407691E-4	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9996872608469034	WITHOUT_CLASSIFICATION	3.1273915309666406E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999953922802819	WITHOUT_CLASSIFICATION	4.607719718114166E-6	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999957626266596	WITHOUT_CLASSIFICATION	4.2373733404532614E-6	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9996871496951708	WITHOUT_CLASSIFICATION	3.128503048292517E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9995693902850956	WITHOUT_CLASSIFICATION	4.3060971490438914E-4	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999951674349637	WITHOUT_CLASSIFICATION	4.8325650362870074E-5	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999693498525843	WITHOUT_CLASSIFICATION	3.0650147415696953E-4	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9998944472189408	WITHOUT_CLASSIFICATION	1.0555278105907157E-4	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.9999976492817285	WITHOUT_CLASSIFICATION	2.350718271405048E-6	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999953625569139	WITHOUT_CLASSIFICATION	4.637443086129754E-6	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999602704323013	WITHOUT_CLASSIFICATION	3.9729567698669166E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999602704323013	WITHOUT_CLASSIFICATION	3.9729567698669166E-5	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999774531549733	WITHOUT_CLASSIFICATION	2.2546845026692192E-5	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999954296137108	WITHOUT_CLASSIFICATION	4.570386289279398E-6	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9998423886850957	WITHOUT_CLASSIFICATION	1.576113149044162E-4	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999629879496793	WITHOUT_CLASSIFICATION	3.701205032081303E-5	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998002519001117	WITHOUT_CLASSIFICATION	1.9974809988827734E-4	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9998930460541767	WITHOUT_CLASSIFICATION	1.0695394582328165E-4	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999303216573785	WITHOUT_CLASSIFICATION	6.967834262143127E-5	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9996332706702471	WITHOUT_CLASSIFICATION	3.667293297529294E-4	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9996332706702471	WITHOUT_CLASSIFICATION	3.667293297529294E-4	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999854680224994	WITHOUT_CLASSIFICATION	1.4531977500593983E-4	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999382567183254	WITHOUT_CLASSIFICATION	6.17432816747201E-5	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9995005458717527	WITHOUT_CLASSIFICATION	4.994541282473256E-4	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999314379402333	WITHOUT_CLASSIFICATION	6.856205976668176E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999314379402333	WITHOUT_CLASSIFICATION	6.856205976668176E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999314379402333	WITHOUT_CLASSIFICATION	6.856205976668176E-5	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999976434334345	WITHOUT_CLASSIFICATION	2.356566565487873E-5	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999564301438169	WITHOUT_CLASSIFICATION	4.356985618323192E-5	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999962619321943	WITHOUT_CLASSIFICATION	3.738067805704163E-6	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9997810830430771	WITHOUT_CLASSIFICATION	2.1891695692294978E-4	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999952455470524	WITHOUT_CLASSIFICATION	4.754452947603344E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999459532201399	WITHOUT_CLASSIFICATION	5.404677986005975E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999459532201399	WITHOUT_CLASSIFICATION	5.404677986005975E-5	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999939274020972	WITHOUT_CLASSIFICATION	6.072597902718801E-6	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999877430395102	WITHOUT_CLASSIFICATION	1.2256960489663914E-5	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9855644188752825	WITHOUT_CLASSIFICATION	0.014435581124717406	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9998217230272375	WITHOUT_CLASSIFICATION	1.7827697276251862E-4	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999754485673488	WITHOUT_CLASSIFICATION	2.4551432651241045E-5	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.9999110752607105	WITHOUT_CLASSIFICATION	8.892473928944218E-5	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9998606399136178	WITHOUT_CLASSIFICATION	1.3936008638219019E-4	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9970754530623183	WITHOUT_CLASSIFICATION	0.0029245469376817175	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999793741021611	WITHOUT_CLASSIFICATION	2.062589783891855E-5	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999387329422097	WITHOUT_CLASSIFICATION	6.126705779030002E-5	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999767611105811	WITHOUT_CLASSIFICATION	2.3238889418916677E-5	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999728599969111	WITHOUT_CLASSIFICATION	2.714000308888675E-5	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999280054396877	WITHOUT_CLASSIFICATION	7.199456031220481E-5	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999280054396877	WITHOUT_CLASSIFICATION	7.199456031220481E-5	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999280054396877	WITHOUT_CLASSIFICATION	7.199456031220481E-5	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999280054396877	WITHOUT_CLASSIFICATION	7.199456031220481E-5	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999280054396877	WITHOUT_CLASSIFICATION	7.199456031220481E-5	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999142831767631	WITHOUT_CLASSIFICATION	8.571682323690099E-5	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999142831767631	WITHOUT_CLASSIFICATION	8.571682323690099E-5	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999142831767631	WITHOUT_CLASSIFICATION	8.571682323690099E-5	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999142831767631	WITHOUT_CLASSIFICATION	8.571682323690099E-5	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999638179876967	WITHOUT_CLASSIFICATION	3.61820123032494E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999602704323013	WITHOUT_CLASSIFICATION	3.9729567698669166E-5	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999930372630967	WITHOUT_CLASSIFICATION	6.962736903294192E-6	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999142831767631	WITHOUT_CLASSIFICATION	8.571682323690099E-5	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.99936836548353	WITHOUT_CLASSIFICATION	6.316345164700157E-4	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999124922551211	WITHOUT_CLASSIFICATION	8.750774487883652E-5	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999344175249243	WITHOUT_CLASSIFICATION	6.558247507572259E-5	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999201942231756	WITHOUT_CLASSIFICATION	7.980577682442923E-5	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999690160847656	WITHOUT_CLASSIFICATION	3.098391523440395E-5	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999823670375103	WITHOUT_CLASSIFICATION	1.7632962489642023E-5	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999211859148519	WITHOUT_CLASSIFICATION	7.881408514809008E-5	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.999670099667825	WITHOUT_CLASSIFICATION	3.299003321749193E-4	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999444044143556	WITHOUT_CLASSIFICATION	5.559558564451434E-5	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9992870967071433	WITHOUT_CLASSIFICATION	7.129032928566686E-4	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999188672205102	WITHOUT_CLASSIFICATION	8.113277948986753E-5	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999917030166864	WITHOUT_CLASSIFICATION	8.296983313571096E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999966566318664	WITHOUT_CLASSIFICATION	3.3433681336491724E-6	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.9999564648633671	WITHOUT_CLASSIFICATION	4.35351366329261E-5	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9332909739036256	WITHOUT_CLASSIFICATION	0.06670902609637454	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9995074876276595	WITHOUT_CLASSIFICATION	4.925123723405341E-4	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999876377716932	WITHOUT_CLASSIFICATION	1.2362228306711425E-5	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999468470418682	WITHOUT_CLASSIFICATION	5.3152958131797794E-5	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999468470418682	WITHOUT_CLASSIFICATION	5.3152958131797794E-5	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999477660840763	WITHOUT_CLASSIFICATION	5.223391592356353E-5	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999804932007518	WITHOUT_CLASSIFICATION	1.9506799248194638E-5	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999443242205496	WITHOUT_CLASSIFICATION	5.5675779450440834E-5	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999943793598047	WITHOUT_CLASSIFICATION	5.6206401952906266E-5	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9997703788640322	WITHOUT_CLASSIFICATION	2.2962113596784804E-4	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999886901770467	WITHOUT_CLASSIFICATION	1.1309822953249112E-5	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998832886647856	WITHOUT_CLASSIFICATION	1.1671133521448527E-4	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999215023651313	WITHOUT_CLASSIFICATION	7.849763486863518E-5	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999856223693024	WITHOUT_CLASSIFICATION	1.437763069758687E-5	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999827335716572	WITHOUT_CLASSIFICATION	1.7266428342743786E-5	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9997592526216103	WITHOUT_CLASSIFICATION	2.4074737838984374E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999953922802819	WITHOUT_CLASSIFICATION	4.607719718114166E-6	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999984766327707	WITHOUT_CLASSIFICATION	1.5233672293098132E-6	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999604890759152	WITHOUT_CLASSIFICATION	3.951092408474236E-5	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999933192591308	WITHOUT_CLASSIFICATION	6.680740869175423E-6	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9995322352919862	WITHOUT_CLASSIFICATION	4.677647080137975E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999895411264804	WITHOUT_CLASSIFICATION	1.045887351957796E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999895411264804	WITHOUT_CLASSIFICATION	1.045887351957796E-5	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.999860483695584	WITHOUT_CLASSIFICATION	1.3951630441599635E-4	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9923207215119006	WITHOUT_CLASSIFICATION	0.007679278488099416	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9995342496973154	WITHOUT_CLASSIFICATION	4.6575030268466755E-4	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9996019399692351	WITHOUT_CLASSIFICATION	3.980600307649123E-4	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9998523832017533	WITHOUT_CLASSIFICATION	1.4761679824660967E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9995841041139997	WITHOUT_CLASSIFICATION	4.158958860002888E-4	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999866811799163	WITHOUT_CLASSIFICATION	1.3318820083807788E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9991923276779004	WITHOUT_CLASSIFICATION	8.076723220994525E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998660144933464	WITHOUT_CLASSIFICATION	1.339855066536276E-4	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9998806603347121	WITHOUT_CLASSIFICATION	1.1933966528785716E-4	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999746590738833	WITHOUT_CLASSIFICATION	2.5340926116766214E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9991923276779004	WITHOUT_CLASSIFICATION	8.076723220994525E-4	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999141323203714	WITHOUT_CLASSIFICATION	8.586767962859518E-4	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998821251360027	WITHOUT_CLASSIFICATION	1.1787486399724655E-4	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999937698001758	WITHOUT_CLASSIFICATION	6.230199824189252E-5	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.9994867129284418	WITHOUT_CLASSIFICATION	5.13287071558257E-4	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9996525582272884	WITHOUT_CLASSIFICATION	3.474417727116623E-4	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999959018997177	WITHOUT_CLASSIFICATION	4.0981002823585784E-6	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999973089118387	WITHOUT_CLASSIFICATION	2.6910881613023292E-5	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999614011039635	WITHOUT_CLASSIFICATION	3.859889603647201E-5	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999242873638767	WITHOUT_CLASSIFICATION	7.571263612333738E-5	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9961023581934786	WITHOUT_CLASSIFICATION	0.003897641806521461	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999543193408904	WITHOUT_CLASSIFICATION	4.5680659109578436E-5	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999101693835516	WITHOUT_CLASSIFICATION	8.983061644837474E-5	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999522226342169	WITHOUT_CLASSIFICATION	4.7777365783099854E-5	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999937108236315	WITHOUT_CLASSIFICATION	6.289176368498645E-6	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999950893682613	WITHOUT_CLASSIFICATION	4.910631738696585E-5	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999584398252022	WITHOUT_CLASSIFICATION	4.156017479790869E-5	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999552393819009	WITHOUT_CLASSIFICATION	4.4760618098963435E-5	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9997427441468771	WITHOUT_CLASSIFICATION	2.572558531228684E-4	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9997427441468771	WITHOUT_CLASSIFICATION	2.572558531228684E-4	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999973089118387	WITHOUT_CLASSIFICATION	2.6910881613023292E-5	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9998852849859486	WITHOUT_CLASSIFICATION	1.1471501405139026E-4	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9996980172166351	WITHOUT_CLASSIFICATION	3.019827833649441E-4	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9989272945878646	WITHOUT_CLASSIFICATION	0.001072705412135406	DEFECT
#2	WITHOUT_CLASSIFICATION	0.9999925691129686	WITHOUT_CLASSIFICATION	7.430887031351778E-6	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999895198317633	WITHOUT_CLASSIFICATION	1.0480168236622089E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999711308418271	WITHOUT_CLASSIFICATION	2.8869158172886875E-5	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999517965650823	WITHOUT_CLASSIFICATION	4.82034349176004E-5	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9990818303577618	WITHOUT_CLASSIFICATION	9.181696422381641E-4	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999962335287109	WITHOUT_CLASSIFICATION	3.7664712891841503E-6	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999394301049644	WITHOUT_CLASSIFICATION	6.05698950355343E-5	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999903059497934	WITHOUT_CLASSIFICATION	9.694050206539307E-6	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9991823631756174	WITHOUT_CLASSIFICATION	8.176368243826865E-4	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9997457360539234	WITHOUT_CLASSIFICATION	2.542639460766456E-4	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999993001681196	WITHOUT_CLASSIFICATION	6.998318804627122E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999758121320608	WITHOUT_CLASSIFICATION	2.4187867939267706E-5	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999989145191882	WITHOUT_CLASSIFICATION	1.0854808117984554E-5	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999886199501151	WITHOUT_CLASSIFICATION	1.1380049884931206E-5	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999438097034623	WITHOUT_CLASSIFICATION	5.619029653775435E-5	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999797021902321	WITHOUT_CLASSIFICATION	2.029780976792487E-5	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.99998373318886	WITHOUT_CLASSIFICATION	1.626681114005727E-5	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999862105684287	WITHOUT_CLASSIFICATION	1.3789431571191012E-5	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999943527261911	WITHOUT_CLASSIFICATION	5.647273808886443E-5	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999504536884595	WITHOUT_CLASSIFICATION	4.9546311540602096E-5	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999968158092798	WITHOUT_CLASSIFICATION	3.1841907201684754E-6	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999907024918763	WITHOUT_CLASSIFICATION	9.29750812377964E-6	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999378787919543	WITHOUT_CLASSIFICATION	6.212120804570105E-5	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9998818583352285	WITHOUT_CLASSIFICATION	1.1814166477146294E-4	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999783477584717	WITHOUT_CLASSIFICATION	2.1652241528211323E-5	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999961928103324	WITHOUT_CLASSIFICATION	3.8071896676443685E-6	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9997586760875408	WITHOUT_CLASSIFICATION	2.4132391245916827E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998673305116305	WITHOUT_CLASSIFICATION	1.326694883695439E-4	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999758025083466	WITHOUT_CLASSIFICATION	2.419749165340561E-5	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999889756074835	WITHOUT_CLASSIFICATION	1.1024392516458521E-5	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9997757232008813	WITHOUT_CLASSIFICATION	2.242767991186206E-4	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999952460105431	WITHOUT_CLASSIFICATION	4.753989456854083E-6	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999233262065879	WITHOUT_CLASSIFICATION	7.66737934121027E-5	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998483263925255	WITHOUT_CLASSIFICATION	1.5167360747452311E-4	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9996714187408581	WITHOUT_CLASSIFICATION	3.285812591418915E-4	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9999631436111832	WITHOUT_CLASSIFICATION	3.68563888167251E-5	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999235799888504	WITHOUT_CLASSIFICATION	7.642001114970184E-5	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9976806421432451	WITHOUT_CLASSIFICATION	0.002319357856754849	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.999945088508697	WITHOUT_CLASSIFICATION	5.4911491303015405E-5	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.9994737084477855	WITHOUT_CLASSIFICATION	5.262915522145624E-4	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.5308409265403029	DEFECT	0.4691590734596972	WITHOUT_CLASSIFICATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999764392064877	WITHOUT_CLASSIFICATION	2.3560793512289085E-5	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9996472323650158	WITHOUT_CLASSIFICATION	3.527676349841975E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998673305116305	WITHOUT_CLASSIFICATION	1.326694883695439E-4	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998796255866259	WITHOUT_CLASSIFICATION	1.2037441337415641E-4	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9994929132143473	WITHOUT_CLASSIFICATION	5.0708678565268E-4	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9986035535090027	WITHOUT_CLASSIFICATION	0.001396446490997346	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999876074303378	WITHOUT_CLASSIFICATION	1.2392569662347873E-5	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.99995626635521	WITHOUT_CLASSIFICATION	4.373364479003389E-5	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998634547435585	WITHOUT_CLASSIFICATION	1.3654525644150116E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998660144933464	WITHOUT_CLASSIFICATION	1.339855066536276E-4	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999999307072051	WITHOUT_CLASSIFICATION	6.929279491092607E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999758121320608	WITHOUT_CLASSIFICATION	2.4187867939267706E-5	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9969350342910516	WITHOUT_CLASSIFICATION	0.0030649657089483902	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998796824706832	WITHOUT_CLASSIFICATION	1.203175293169132E-4	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999642711616978	WITHOUT_CLASSIFICATION	3.572883830210406E-5	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999641921522288	WITHOUT_CLASSIFICATION	3.580784777115861E-5	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999169752169821	WITHOUT_CLASSIFICATION	8.302478301789066E-5	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999983699528527	WITHOUT_CLASSIFICATION	1.6300471472837938E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9985481510166054	WITHOUT_CLASSIFICATION	0.0014518489833946116	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999974016897811	WITHOUT_CLASSIFICATION	2.598310218964674E-6	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9838223241126518	WITHOUT_CLASSIFICATION	0.016177675887348166	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998279642478375	WITHOUT_CLASSIFICATION	1.7203575216250355E-4	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999907282390578	WITHOUT_CLASSIFICATION	9.271760942346933E-6	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999979360955269	WITHOUT_CLASSIFICATION	2.0639044731177358E-6	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997536244681012	WITHOUT_CLASSIFICATION	2.4637553189871806E-4	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997536244681012	WITHOUT_CLASSIFICATION	2.4637553189871806E-4	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999851502914172	WITHOUT_CLASSIFICATION	1.4849708582815776E-5	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999860296095157	WITHOUT_CLASSIFICATION	1.3970390484302635E-4	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999880094376359	WITHOUT_CLASSIFICATION	1.1990562364109887E-5	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999713270542478	WITHOUT_CLASSIFICATION	2.8672945752163652E-5	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999687889102327	WITHOUT_CLASSIFICATION	3.121108976736541E-5	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998778225461393	WITHOUT_CLASSIFICATION	1.221774538606099E-4	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9998020998997524	WITHOUT_CLASSIFICATION	1.9790010024747898E-4	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9997932000338964	WITHOUT_CLASSIFICATION	2.067999661035712E-4	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999501308648425	WITHOUT_CLASSIFICATION	4.9869135157442285E-5	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999599702271165	WITHOUT_CLASSIFICATION	4.002977288356176E-5	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.9999599702271165	WITHOUT_CLASSIFICATION	4.002977288356176E-5	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999523402065645	WITHOUT_CLASSIFICATION	4.765979343546224E-5	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999986571567268	WITHOUT_CLASSIFICATION	1.3428432732023053E-5	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999704035456081	WITHOUT_CLASSIFICATION	2.959645439191099E-5	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.999185987227932	WITHOUT_CLASSIFICATION	8.1401277206803E-4	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999668039985815	WITHOUT_CLASSIFICATION	3.3196001418508206E-5	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999819378534259	WITHOUT_CLASSIFICATION	1.8062146574099314E-4	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999996070095694	WITHOUT_CLASSIFICATION	3.929904305952429E-6	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999513918387082	WITHOUT_CLASSIFICATION	4.860816129180073E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971825394036	WITHOUT_CLASSIFICATION	1.028174605963418E-4	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9996514339442879	WITHOUT_CLASSIFICATION	3.485660557121151E-4	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9992382411932819	WITHOUT_CLASSIFICATION	7.617588067180876E-4	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999659399606399	WITHOUT_CLASSIFICATION	3.4060039360151615E-5	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999590089571263	WITHOUT_CLASSIFICATION	4.099104287369151E-5	DEFECT
implied	WITHOUT_CLASSIFICATION	0.9999929137899539	WITHOUT_CLASSIFICATION	7.086210046141021E-6	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999935454276311	WITHOUT_CLASSIFICATION	6.4545723687989805E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971825394036	WITHOUT_CLASSIFICATION	1.028174605963418E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971825394036	WITHOUT_CLASSIFICATION	1.028174605963418E-4	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999964078720553	WITHOUT_CLASSIFICATION	3.592127944694734E-5	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9997647988361745	WITHOUT_CLASSIFICATION	2.3520116382541703E-4	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9998693322657831	WITHOUT_CLASSIFICATION	1.3066773421685948E-4	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999512212844931	WITHOUT_CLASSIFICATION	4.877871550694802E-5	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9998961569662025	WITHOUT_CLASSIFICATION	1.0384303379745212E-4	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999453103482732	WITHOUT_CLASSIFICATION	5.468965172672544E-5	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999850186205462	WITHOUT_CLASSIFICATION	1.498137945373763E-5	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999785915391367	WITHOUT_CLASSIFICATION	2.1408460863327466E-5	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9997415070099009	WITHOUT_CLASSIFICATION	2.584929900990344E-4	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999377907790943	WITHOUT_CLASSIFICATION	6.220922090569878E-5	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9996959943564803	WITHOUT_CLASSIFICATION	3.0400564351975825E-4	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999801761146886	WITHOUT_CLASSIFICATION	1.982388531137692E-5	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999719622840383	WITHOUT_CLASSIFICATION	2.8037715961648264E-5	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999335941941496	WITHOUT_CLASSIFICATION	6.6405805850384E-5	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999386055538404	WITHOUT_CLASSIFICATION	6.139444615950654E-5	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999825722794	WITHOUT_CLASSIFICATION	1.7427720600014698E-5	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999916523514831	WITHOUT_CLASSIFICATION	8.347648516905253E-5	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999292878979744	WITHOUT_CLASSIFICATION	7.071210202564223E-5	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999647833532225	WITHOUT_CLASSIFICATION	3.521664677743177E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9922789455060212	WITHOUT_CLASSIFICATION	0.007721054493978693	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999861162402871	WITHOUT_CLASSIFICATION	1.3883759712937124E-5	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999996583704418	WITHOUT_CLASSIFICATION	3.4162955821676294E-7	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999040554285357	WITHOUT_CLASSIFICATION	9.594457146433515E-5	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999540481060516	WITHOUT_CLASSIFICATION	4.595189394836034E-5	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999969984482872	WITHOUT_CLASSIFICATION	3.0015517127643083E-6	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999479010970806	WITHOUT_CLASSIFICATION	5.2098902919376326E-5	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998691729538945	WITHOUT_CLASSIFICATION	1.308270461054933E-4	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999852122721427	WITHOUT_CLASSIFICATION	1.4787727857187586E-5	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.999541142910013	WITHOUT_CLASSIFICATION	4.588570899871029E-4	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999622111811933	WITHOUT_CLASSIFICATION	3.778881880670692E-4	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9998489540493327	WITHOUT_CLASSIFICATION	1.5104595066728436E-4	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9999027085454497	WITHOUT_CLASSIFICATION	9.729145455031059E-5	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999194929677805	WITHOUT_CLASSIFICATION	8.050703221954912E-5	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998415161019184	WITHOUT_CLASSIFICATION	1.5848389808155837E-4	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9993504794918167	WITHOUT_CLASSIFICATION	6.495205081833656E-4	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999241142669969	WITHOUT_CLASSIFICATION	7.588573300317467E-5	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999222408102758	WITHOUT_CLASSIFICATION	7.775918972417441E-5	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999329839829592	WITHOUT_CLASSIFICATION	6.701601704082578E-5	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9998710002759266	WITHOUT_CLASSIFICATION	1.2899972407349005E-4	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999573238028155	WITHOUT_CLASSIFICATION	4.2676197184395584E-5	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999248093647441	WITHOUT_CLASSIFICATION	7.519063525594747E-5	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999990015989693	WITHOUT_CLASSIFICATION	9.98401030715815E-6	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999603257673694	WITHOUT_CLASSIFICATION	3.967423263060124E-5	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999990015989693	WITHOUT_CLASSIFICATION	9.98401030715815E-6	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.999050551660412	WITHOUT_CLASSIFICATION	9.494483395879787E-4	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9974039121920475	WITHOUT_CLASSIFICATION	0.002596087807952559	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999862100797499	WITHOUT_CLASSIFICATION	1.3789920250147367E-5	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999995485533849	WITHOUT_CLASSIFICATION	4.514466150985191E-6	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999277977564415	WITHOUT_CLASSIFICATION	7.220224355848346E-5	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999862100797499	WITHOUT_CLASSIFICATION	1.3789920250147367E-5	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999994156984316	WITHOUT_CLASSIFICATION	5.843015683451006E-7	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998873204027277	WITHOUT_CLASSIFICATION	1.1267959727244211E-4	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999922575809413	WITHOUT_CLASSIFICATION	7.742419058696045E-5	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999779702124241	WITHOUT_CLASSIFICATION	2.2029787575998404E-5	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999964965095848	WITHOUT_CLASSIFICATION	3.503490415236262E-6	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999776799702843	WITHOUT_CLASSIFICATION	2.2320029715655907E-5	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999990885620028	WITHOUT_CLASSIFICATION	9.11437997261704E-7	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.999726043235878	WITHOUT_CLASSIFICATION	2.739567641219911E-4	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999895452563404	WITHOUT_CLASSIFICATION	1.045474365960119E-5	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999510694384717	WITHOUT_CLASSIFICATION	4.893056152828299E-5	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9994495304973229	WITHOUT_CLASSIFICATION	5.504695026771675E-4	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999362581365415	WITHOUT_CLASSIFICATION	6.374186345850043E-5	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9998988573969149	WITHOUT_CLASSIFICATION	1.0114260308514194E-4	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999251280214068	WITHOUT_CLASSIFICATION	7.487197859332032E-5	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999367265485699	WITHOUT_CLASSIFICATION	6.327345143010165E-5	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999101225519791	WITHOUT_CLASSIFICATION	8.987744802082478E-5	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9990753805419254	WITHOUT_CLASSIFICATION	9.246194580746792E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998313873442037	WITHOUT_CLASSIFICATION	1.686126557963483E-4	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999896306528436	WITHOUT_CLASSIFICATION	1.0369347156405832E-4	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9808485483665235	WITHOUT_CLASSIFICATION	0.019151451633476535	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9996103841293174	WITHOUT_CLASSIFICATION	3.8961587068263065E-4	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9999357311661127	WITHOUT_CLASSIFICATION	6.426883388728182E-5	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998982916208796	WITHOUT_CLASSIFICATION	1.017083791203384E-4	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9997816436126963	WITHOUT_CLASSIFICATION	2.183563873036979E-4	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9999648128736295	WITHOUT_CLASSIFICATION	3.518712637053015E-5	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9610576634200028	WITHOUT_CLASSIFICATION	0.03894233657999725	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9969026473876517	WITHOUT_CLASSIFICATION	0.0030973526123483607	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999904046192023	WITHOUT_CLASSIFICATION	9.595380797642719E-6	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.9999539504674465	WITHOUT_CLASSIFICATION	4.6049532553535524E-5	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.9998200783597907	WITHOUT_CLASSIFICATION	1.7992164020940953E-4	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998982916208796	WITHOUT_CLASSIFICATION	1.017083791203384E-4	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999893363960627	WITHOUT_CLASSIFICATION	1.066360393730091E-4	DEFECT
an association	WITHOUT_CLASSIFICATION	0.999963269173493	WITHOUT_CLASSIFICATION	3.6730826506949146E-5	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9999463138569733	WITHOUT_CLASSIFICATION	5.3686143026608854E-5	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9915094169207842	WITHOUT_CLASSIFICATION	0.008490583079215717	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9808485483665235	WITHOUT_CLASSIFICATION	0.019151451633476535	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9999024482495834	WITHOUT_CLASSIFICATION	9.755175041661897E-5	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.9999680617614899	WITHOUT_CLASSIFICATION	3.193823851016654E-5	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998279505432037	WITHOUT_CLASSIFICATION	1.7204945679616474E-4	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997605765684101	WITHOUT_CLASSIFICATION	2.3942343158988525E-4	DEFECT
special case	WITHOUT_CLASSIFICATION	0.999849461654266	WITHOUT_CLASSIFICATION	1.5053834573396454E-4	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999886099198744	WITHOUT_CLASSIFICATION	1.1390080125692203E-5	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999938522464311	WITHOUT_CLASSIFICATION	6.147753568850738E-6	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9801451810149597	WITHOUT_CLASSIFICATION	0.019854818985040174	DEFECT
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998956170097121	WITHOUT_CLASSIFICATION	1.0438299028796437E-4	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9995998225228767	WITHOUT_CLASSIFICATION	4.001774771233024E-4	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.9999727947945595	WITHOUT_CLASSIFICATION	2.7205205440625247E-5	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999865234896799	WITHOUT_CLASSIFICATION	1.3476510320201811E-5	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999103548781969	WITHOUT_CLASSIFICATION	8.964512180318875E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999103548781969	WITHOUT_CLASSIFICATION	8.964512180318875E-5	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999850885289724	WITHOUT_CLASSIFICATION	1.4911471027634174E-5	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999518544309682	WITHOUT_CLASSIFICATION	4.814556903172584E-5	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999902734167245	WITHOUT_CLASSIFICATION	9.726583275510903E-6	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999364561770134	WITHOUT_CLASSIFICATION	6.354382298653271E-5	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999769308853499	WITHOUT_CLASSIFICATION	2.3069114650089307E-5	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9999024482495834	WITHOUT_CLASSIFICATION	9.755175041661897E-5	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9977327018667252	WITHOUT_CLASSIFICATION	0.002267298133274782	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9995021480327737	WITHOUT_CLASSIFICATION	4.978519672262325E-4	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9987316749995496	WITHOUT_CLASSIFICATION	0.0012683250004503278	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9994555632662203	WITHOUT_CLASSIFICATION	5.444367337797642E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999665961992881	WITHOUT_CLASSIFICATION	3.340380071200222E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999665961992881	WITHOUT_CLASSIFICATION	3.340380071200222E-5	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999752893339628	WITHOUT_CLASSIFICATION	2.4710666037197273E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999665961992881	WITHOUT_CLASSIFICATION	3.340380071200222E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999665961992881	WITHOUT_CLASSIFICATION	3.340380071200222E-5	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9978295046932134	WITHOUT_CLASSIFICATION	0.0021704953067867155	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9998694248130582	WITHOUT_CLASSIFICATION	1.3057518694181423E-4	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999118579457499	WITHOUT_CLASSIFICATION	8.814205425007097E-5	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999118579457499	WITHOUT_CLASSIFICATION	8.814205425007097E-5	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9987946845143874	WITHOUT_CLASSIFICATION	0.0012053154856126542	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.999992404182359	WITHOUT_CLASSIFICATION	7.595817640984227E-6	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9990618980145306	WITHOUT_CLASSIFICATION	9.381019854693959E-4	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9997273191687917	WITHOUT_CLASSIFICATION	2.7268083120830116E-4	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998901074014352	WITHOUT_CLASSIFICATION	1.0989259856472713E-4	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.9998808551436368	WITHOUT_CLASSIFICATION	1.1914485636320817E-4	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997892524335791	WITHOUT_CLASSIFICATION	2.1074756642095472E-4	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.999927655729863	WITHOUT_CLASSIFICATION	7.234427013705598E-5	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998767102875101	WITHOUT_CLASSIFICATION	1.2328971248979094E-4	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999941697546746	WITHOUT_CLASSIFICATION	5.830245325389434E-5	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999316020301573	WITHOUT_CLASSIFICATION	6.839796984265205E-5	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9949114754813014	WITHOUT_CLASSIFICATION	0.00508852451869851	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999922012659017	WITHOUT_CLASSIFICATION	7.798734098256694E-6	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999865267837427	WITHOUT_CLASSIFICATION	1.3473216257394817E-5	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9996013769016878	WITHOUT_CLASSIFICATION	3.9862309831217684E-4	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998911626220633	WITHOUT_CLASSIFICATION	1.0883737793656692E-4	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9996487127235122	WITHOUT_CLASSIFICATION	3.51287276487795E-4	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999750008381463	WITHOUT_CLASSIFICATION	2.499916185362554E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999922012659017	WITHOUT_CLASSIFICATION	7.798734098256694E-6	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9996103841293174	WITHOUT_CLASSIFICATION	3.8961587068263065E-4	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.9998333582953945	WITHOUT_CLASSIFICATION	1.6664170460540718E-4	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998121787051538	WITHOUT_CLASSIFICATION	1.8782129484616914E-4	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996323385220722	WITHOUT_CLASSIFICATION	3.676614779278094E-4	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9997859739585776	WITHOUT_CLASSIFICATION	2.1402604142226866E-4	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999556769687084	WITHOUT_CLASSIFICATION	4.432303129169603E-5	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9999234393036097	WITHOUT_CLASSIFICATION	7.656069639025419E-5	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998472753627473	WITHOUT_CLASSIFICATION	1.5272463725273403E-4	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999489844223878	WITHOUT_CLASSIFICATION	5.1015577612188655E-5	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999989186203102	WITHOUT_CLASSIFICATION	1.081379689802515E-6	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999258135563273	WITHOUT_CLASSIFICATION	7.41864436727559E-5	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999767691856253	WITHOUT_CLASSIFICATION	2.3230814374831496E-5	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9998356575588435	WITHOUT_CLASSIFICATION	1.6434244115642714E-4	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999190253583043	WITHOUT_CLASSIFICATION	8.097464169562996E-5	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9949089218516055	WITHOUT_CLASSIFICATION	0.005091078148394452	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999785710209442	WITHOUT_CLASSIFICATION	2.1428979055682096E-5	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.999954152988242	WITHOUT_CLASSIFICATION	4.5847011758102945E-5	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999187001051328	WITHOUT_CLASSIFICATION	8.129989486726398E-5	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999353289426428	WITHOUT_CLASSIFICATION	6.467105735712285E-5	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998044800930731	WITHOUT_CLASSIFICATION	1.9551990692680485E-4	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999568674984277	WITHOUT_CLASSIFICATION	4.313250157221496E-5	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9998885748654592	WITHOUT_CLASSIFICATION	1.114251345406929E-4	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999974935879203	WITHOUT_CLASSIFICATION	2.506412079606081E-6	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999489844223878	WITHOUT_CLASSIFICATION	5.1015577612188655E-5	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.99996661930766	WITHOUT_CLASSIFICATION	3.338069233998311E-5	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9999301764285021	WITHOUT_CLASSIFICATION	6.98235714979037E-5	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999989060151728	WITHOUT_CLASSIFICATION	1.0939848272160642E-5	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999900964694065	WITHOUT_CLASSIFICATION	9.903530593496018E-5	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998673305116305	WITHOUT_CLASSIFICATION	1.326694883695439E-4	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.9999052305215969	WITHOUT_CLASSIFICATION	9.476947840311483E-5	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9999071087278825	WITHOUT_CLASSIFICATION	9.289127211748251E-5	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.999849082688384	WITHOUT_CLASSIFICATION	1.5091731161599378E-4	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9999069938015929	WITHOUT_CLASSIFICATION	9.300619840708399E-5	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.9999103778013522	WITHOUT_CLASSIFICATION	8.962219864774123E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999904069019468	WITHOUT_CLASSIFICATION	9.59309805325569E-6	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999644954351652	WITHOUT_CLASSIFICATION	3.5504564834934756E-5	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999875056457007	WITHOUT_CLASSIFICATION	1.249435429925798E-5	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999700774571353	WITHOUT_CLASSIFICATION	2.992254286473971E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999788090983778	WITHOUT_CLASSIFICATION	2.1190901622243976E-5	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999828860924977	WITHOUT_CLASSIFICATION	1.7113907502227994E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999474023129975	WITHOUT_CLASSIFICATION	5.259768700248378E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999904069019468	WITHOUT_CLASSIFICATION	9.59309805325569E-6	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999315495048073	WITHOUT_CLASSIFICATION	6.845049519263841E-5	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9998102576455757	WITHOUT_CLASSIFICATION	1.8974235442426596E-4	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999019259883589	WITHOUT_CLASSIFICATION	9.807401164098587E-5	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999858992491261	WITHOUT_CLASSIFICATION	1.4100750873931473E-5	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9999337746354987	WITHOUT_CLASSIFICATION	6.622536450128135E-5	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999659990579969	WITHOUT_CLASSIFICATION	3.4000942003222835E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999788090983778	WITHOUT_CLASSIFICATION	2.1190901622243976E-5	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999616141608153	WITHOUT_CLASSIFICATION	3.8385839184797125E-5	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999233208694629	WITHOUT_CLASSIFICATION	7.667913053708201E-5	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999129860461116	WITHOUT_CLASSIFICATION	8.70139538884905E-5	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997802542693207	WITHOUT_CLASSIFICATION	2.1974573067943162E-4	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997802542693207	WITHOUT_CLASSIFICATION	2.1974573067943162E-4	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997802542693207	WITHOUT_CLASSIFICATION	2.1974573067943162E-4	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999772237793394	WITHOUT_CLASSIFICATION	2.2776220660556254E-5	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999772237793394	WITHOUT_CLASSIFICATION	2.2776220660556254E-5	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9977389766076449	WITHOUT_CLASSIFICATION	0.0022610233923550825	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999963159620999	WITHOUT_CLASSIFICATION	3.68403789995605E-6	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.9998224322074232	WITHOUT_CLASSIFICATION	1.7756779257683815E-4	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9998283146515532	WITHOUT_CLASSIFICATION	1.7168534844671086E-4	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.901543606205178	WITHOUT_CLASSIFICATION	0.09845639379482188	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998958423872483	WITHOUT_CLASSIFICATION	1.0415761275168743E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999911028188568	WITHOUT_CLASSIFICATION	8.897181143196743E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998673305116305	WITHOUT_CLASSIFICATION	1.326694883695439E-4	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9991403286269854	WITHOUT_CLASSIFICATION	8.596713730144355E-4	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999521587025637	WITHOUT_CLASSIFICATION	4.78412974361488E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998958423872483	WITHOUT_CLASSIFICATION	1.0415761275168743E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999911028188568	WITHOUT_CLASSIFICATION	8.897181143196743E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998673305116305	WITHOUT_CLASSIFICATION	1.326694883695439E-4	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999831915997781	WITHOUT_CLASSIFICATION	1.6808400221920725E-5	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999819737419997	WITHOUT_CLASSIFICATION	1.802625800030977E-5	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999954778577275	WITHOUT_CLASSIFICATION	4.522142272535844E-6	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9549858294775342	WITHOUT_CLASSIFICATION	0.04501417052246587	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998987712167936	WITHOUT_CLASSIFICATION	1.0122878320637649E-4	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999384742224994	WITHOUT_CLASSIFICATION	6.15257775006031E-5	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9999926740118329	WITHOUT_CLASSIFICATION	7.325988167100569E-6	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999103548781969	WITHOUT_CLASSIFICATION	8.964512180318875E-5	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.999916188557376	WITHOUT_CLASSIFICATION	8.381144262395992E-5	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9994094010157135	WITHOUT_CLASSIFICATION	5.905989842864248E-4	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9969022480824846	WITHOUT_CLASSIFICATION	0.0030977519175154847	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9998736916046668	WITHOUT_CLASSIFICATION	1.2630839533312962E-4	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.99999075918797	WITHOUT_CLASSIFICATION	9.24081203002387E-6	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999148252616401	WITHOUT_CLASSIFICATION	8.517473835986772E-5	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.999533698640568	WITHOUT_CLASSIFICATION	4.6630135943204936E-4	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999171906315659	WITHOUT_CLASSIFICATION	8.280936843403793E-5	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999305466008936	WITHOUT_CLASSIFICATION	6.945339910642124E-5	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998827938723525	WITHOUT_CLASSIFICATION	1.1720612764752431E-4	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9996767374457941	WITHOUT_CLASSIFICATION	3.2326255420587644E-4	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999948623070023	WITHOUT_CLASSIFICATION	5.137692997616183E-6	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999971171106248	WITHOUT_CLASSIFICATION	2.8828893751937848E-5	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999878370087132	WITHOUT_CLASSIFICATION	1.2162991286950652E-5	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999996455824866	WITHOUT_CLASSIFICATION	3.544175134969152E-7	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9997409171819257	WITHOUT_CLASSIFICATION	2.590828180742326E-4	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998934238868619	WITHOUT_CLASSIFICATION	1.0657611313812207E-4	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998956534961118	WITHOUT_CLASSIFICATION	1.0434650388815902E-4	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999998929152428	WITHOUT_CLASSIFICATION	1.0708475721169944E-7	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999021038777529	WITHOUT_CLASSIFICATION	9.789612224716844E-5	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997415483826366	WITHOUT_CLASSIFICATION	2.584516173633362E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999738411764806	WITHOUT_CLASSIFICATION	2.615882351937021E-5	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999738411764806	WITHOUT_CLASSIFICATION	2.615882351937021E-5	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998567373387971	WITHOUT_CLASSIFICATION	1.4326266120302163E-4	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9996570628740704	WITHOUT_CLASSIFICATION	3.429371259296305E-4	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999758519720742	WITHOUT_CLASSIFICATION	2.4148027925857427E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999953922802819	WITHOUT_CLASSIFICATION	4.607719718114166E-6	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999882627444565	WITHOUT_CLASSIFICATION	1.173725554342148E-5	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999908980571701	WITHOUT_CLASSIFICATION	9.101942829808348E-6	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9999942057957807	WITHOUT_CLASSIFICATION	5.794204219336427E-6	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.999992555411051	WITHOUT_CLASSIFICATION	7.444588948977528E-6	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999954777065755	WITHOUT_CLASSIFICATION	4.522293424545199E-6	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999192875971417	WITHOUT_CLASSIFICATION	8.071240285832104E-5	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999219251722199	WITHOUT_CLASSIFICATION	7.807482778003325E-5	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999192875971417	WITHOUT_CLASSIFICATION	8.071240285832104E-5	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999192875971417	WITHOUT_CLASSIFICATION	8.071240285832104E-5	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999192875971417	WITHOUT_CLASSIFICATION	8.071240285832104E-5	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999194596680224	WITHOUT_CLASSIFICATION	8.054033197759038E-5	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999192875971417	WITHOUT_CLASSIFICATION	8.071240285832104E-5	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999199698897597	WITHOUT_CLASSIFICATION	8.00301102402242E-5	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999192875971417	WITHOUT_CLASSIFICATION	8.071240285832104E-5	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999192875971417	WITHOUT_CLASSIFICATION	8.071240285832104E-5	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999192875971417	WITHOUT_CLASSIFICATION	8.071240285832104E-5	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9993255292429749	WITHOUT_CLASSIFICATION	6.744707570251654E-4	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9989522995029243	WITHOUT_CLASSIFICATION	0.0010477004970756649	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999281032842293	WITHOUT_CLASSIFICATION	7.189671577068952E-4	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9997607829550769	WITHOUT_CLASSIFICATION	2.3921704492309789E-4	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999860851295254	WITHOUT_CLASSIFICATION	1.3914870474679526E-5	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9998313256230125	WITHOUT_CLASSIFICATION	1.6867437698758053E-4	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999829865988556	WITHOUT_CLASSIFICATION	1.7013401144378922E-5	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999935553023731	WITHOUT_CLASSIFICATION	6.444697626848425E-6	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999281032842293	WITHOUT_CLASSIFICATION	7.189671577068952E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999281032842293	WITHOUT_CLASSIFICATION	7.189671577068952E-4	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.999992983180904	WITHOUT_CLASSIFICATION	7.016819095979872E-6	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999666284494423	WITHOUT_CLASSIFICATION	3.3371550557773365E-5	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9986782383584635	WITHOUT_CLASSIFICATION	0.0013217616415364755	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999617864274529	WITHOUT_CLASSIFICATION	3.8213572547193394E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999966566318664	WITHOUT_CLASSIFICATION	3.3433681336491724E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998827938723525	WITHOUT_CLASSIFICATION	1.1720612764752431E-4	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9997754476782331	WITHOUT_CLASSIFICATION	2.245523217668722E-4	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999391251953809	WITHOUT_CLASSIFICATION	6.0874804619255074E-5	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9998959726441561	WITHOUT_CLASSIFICATION	1.0402735584390569E-4	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999076400451389	WITHOUT_CLASSIFICATION	9.235995486114806E-5	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9997737475722479	WITHOUT_CLASSIFICATION	2.2625242775212138E-4	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999087227260819	WITHOUT_CLASSIFICATION	9.127727391810071E-5	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996853859976597	WITHOUT_CLASSIFICATION	3.1461400234030336E-4	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996853859976597	WITHOUT_CLASSIFICATION	3.1461400234030336E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996853859976597	WITHOUT_CLASSIFICATION	3.1461400234030336E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996853859976597	WITHOUT_CLASSIFICATION	3.1461400234030336E-4	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998673305116305	WITHOUT_CLASSIFICATION	1.326694883695439E-4	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999921068922502	WITHOUT_CLASSIFICATION	7.893107749808254E-5	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998940604545529	WITHOUT_CLASSIFICATION	1.0593954544715069E-4	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998673305116305	WITHOUT_CLASSIFICATION	1.326694883695439E-4	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9982898709350977	WITHOUT_CLASSIFICATION	0.0017101290649022627	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.999925032705697	WITHOUT_CLASSIFICATION	7.496729430300944E-5	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051781008621	WITHOUT_CLASSIFICATION	9.482189913789739E-5	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999242435854363	WITHOUT_CLASSIFICATION	7.575641456372784E-5	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999874925493629	WITHOUT_CLASSIFICATION	1.25074506370869E-5	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.9999872852004793	WITHOUT_CLASSIFICATION	1.2714799520629202E-5	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999637763013193	WITHOUT_CLASSIFICATION	3.6223698680770623E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999957370916815	WITHOUT_CLASSIFICATION	4.2629083183905205E-6	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999945007431613	WITHOUT_CLASSIFICATION	5.499256838709665E-5	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999871493249223	WITHOUT_CLASSIFICATION	1.2850675077662163E-5	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998372415861014	WITHOUT_CLASSIFICATION	1.6275841389853287E-4	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999903807769177	WITHOUT_CLASSIFICATION	9.61922308221826E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999903807769177	WITHOUT_CLASSIFICATION	9.61922308221826E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999903807769177	WITHOUT_CLASSIFICATION	9.61922308221826E-6	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999905896823283	WITHOUT_CLASSIFICATION	9.410317671662404E-6	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9999700430912497	WITHOUT_CLASSIFICATION	2.995690875035095E-5	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999966809738331	WITHOUT_CLASSIFICATION	3.3190261667975376E-6	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998691616621971	WITHOUT_CLASSIFICATION	1.3083833780299617E-4	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998691616621971	WITHOUT_CLASSIFICATION	1.3083833780299617E-4	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9995519091600986	WITHOUT_CLASSIFICATION	4.480908399013352E-4	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997802542693207	WITHOUT_CLASSIFICATION	2.1974573067943162E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999189814483822	WITHOUT_CLASSIFICATION	8.101855161779744E-5	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999603449966965	WITHOUT_CLASSIFICATION	3.965500330345802E-5	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999995571525399	WITHOUT_CLASSIFICATION	4.42847460107715E-7	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9990606951159402	WITHOUT_CLASSIFICATION	9.393048840598533E-4	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999011364446552	WITHOUT_CLASSIFICATION	9.886355534485866E-5	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998799539135279	WITHOUT_CLASSIFICATION	1.2004608647210938E-4	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999785499098939	WITHOUT_CLASSIFICATION	2.1450090106243352E-5	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9982499868691471	WITHOUT_CLASSIFICATION	0.0017500131308528242	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999954065006257	WITHOUT_CLASSIFICATION	4.593499374296282E-5	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9998897040017999	WITHOUT_CLASSIFICATION	1.102959982001851E-4	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999408998540911	WITHOUT_CLASSIFICATION	5.9100145908841636E-5	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.999973841986585	WITHOUT_CLASSIFICATION	2.6158013415016506E-5	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999980371056978	WITHOUT_CLASSIFICATION	1.962894302268606E-6	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999587876730218	WITHOUT_CLASSIFICATION	4.121232697828897E-5	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999950061256819	WITHOUT_CLASSIFICATION	4.993874318088548E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999927988842345	WITHOUT_CLASSIFICATION	7.201115765464215E-6	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999737821588018	WITHOUT_CLASSIFICATION	2.6217841198094844E-5	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9993208149013835	WITHOUT_CLASSIFICATION	6.791850986165905E-4	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9994173754680783	WITHOUT_CLASSIFICATION	5.82624531921679E-4	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999686890220595	WITHOUT_CLASSIFICATION	3.131097794053185E-5	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9998766735267869	WITHOUT_CLASSIFICATION	1.2332647321308514E-4	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999496171982766	WITHOUT_CLASSIFICATION	5.038280172348993E-5	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999948208645519	WITHOUT_CLASSIFICATION	5.179135448122283E-6	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999569584717067	WITHOUT_CLASSIFICATION	4.3041528293192656E-5	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9955424334410818	WITHOUT_CLASSIFICATION	0.0044575665589181145	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999900859596659	WITHOUT_CLASSIFICATION	9.914040334143212E-6	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999103548781969	WITHOUT_CLASSIFICATION	8.964512180318875E-5	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9988279414024825	WITHOUT_CLASSIFICATION	0.0011720585975174727	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997437157866781	WITHOUT_CLASSIFICATION	2.5628421332196287E-4	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.9999973592682508	WITHOUT_CLASSIFICATION	2.6407317492121316E-6	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999921680130989	WITHOUT_CLASSIFICATION	7.831986901099584E-6	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.999995604695066	WITHOUT_CLASSIFICATION	4.3953049340129295E-6	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9992532243636625	WITHOUT_CLASSIFICATION	7.467756363374863E-4	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999420515386618	WITHOUT_CLASSIFICATION	5.794846133830186E-5	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999101144800217	WITHOUT_CLASSIFICATION	8.988551997829947E-5	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999587443849017	WITHOUT_CLASSIFICATION	4.125561509829834E-5	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999959863938866	WITHOUT_CLASSIFICATION	4.013606113398788E-5	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997431133596364	WITHOUT_CLASSIFICATION	2.568866403635876E-4	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.9997554909702236	WITHOUT_CLASSIFICATION	2.4450902977633614E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999980532510809	WITHOUT_CLASSIFICATION	1.946748919066621E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999246852760446	WITHOUT_CLASSIFICATION	7.5314723955388E-5	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999962106106084	WITHOUT_CLASSIFICATION	3.7893893915122616E-6	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999883275470317	WITHOUT_CLASSIFICATION	1.1672452968216219E-5	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999858261927833	WITHOUT_CLASSIFICATION	1.4173807216749969E-5	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9993562848820862	WITHOUT_CLASSIFICATION	6.437151179138266E-4	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.99944737062057	WITHOUT_CLASSIFICATION	5.526293794299665E-4	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999810365425522	WITHOUT_CLASSIFICATION	1.896345744779077E-4	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.9999580058202425	WITHOUT_CLASSIFICATION	4.1994179757378665E-5	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999473978398475	WITHOUT_CLASSIFICATION	5.260216015254229E-5	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999948090778784	WITHOUT_CLASSIFICATION	5.190922121579742E-6	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.999976805439846	WITHOUT_CLASSIFICATION	2.319456015402065E-5	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999372965046956	WITHOUT_CLASSIFICATION	6.27034953043398E-5	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999850260748436	WITHOUT_CLASSIFICATION	1.4973925156503344E-5	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998744693149588	WITHOUT_CLASSIFICATION	1.2553068504118808E-4	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9997775528427639	WITHOUT_CLASSIFICATION	2.2244715723594217E-4	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999667897792361	WITHOUT_CLASSIFICATION	3.32102207638343E-5	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999657521854175	WITHOUT_CLASSIFICATION	3.4247814582478136E-5	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999012966827269	WITHOUT_CLASSIFICATION	9.870331727307708E-5	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999348949865409	WITHOUT_CLASSIFICATION	6.510501345911455E-5	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999090029274504	WITHOUT_CLASSIFICATION	9.0997072549553E-5	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9995479990034913	WITHOUT_CLASSIFICATION	4.520009965086966E-4	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999863522970655	WITHOUT_CLASSIFICATION	1.3647702934630456E-5	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999487600884294	WITHOUT_CLASSIFICATION	5.1239911570648835E-5	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999715822696685	WITHOUT_CLASSIFICATION	2.841773033137171E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.999979030472103	WITHOUT_CLASSIFICATION	2.0969527897057528E-5	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999974431475979	WITHOUT_CLASSIFICATION	2.5568524021429575E-6	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999842203319768	WITHOUT_CLASSIFICATION	1.5779668023229357E-5	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9997687216519832	WITHOUT_CLASSIFICATION	2.3127834801674074E-4	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999904297738751	WITHOUT_CLASSIFICATION	9.570226124831257E-6	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999972781581801	WITHOUT_CLASSIFICATION	2.7218418199445634E-6	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.999760940525141	WITHOUT_CLASSIFICATION	2.3905947485910689E-4	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.9997108659499764	WITHOUT_CLASSIFICATION	2.8913405002359196E-4	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999981137549482	WITHOUT_CLASSIFICATION	1.8862450518981295E-6	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998998854158594	WITHOUT_CLASSIFICATION	1.0011458414056948E-4	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999737285771657	WITHOUT_CLASSIFICATION	2.627142283419559E-5	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.999901757641577	WITHOUT_CLASSIFICATION	9.824235842297865E-5	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998757566270141	WITHOUT_CLASSIFICATION	1.2424337298591853E-4	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9912989005541717	WITHOUT_CLASSIFICATION	0.008701099445828305	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999611378872867	WITHOUT_CLASSIFICATION	3.886211271327171E-5	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.9999490270830739	WITHOUT_CLASSIFICATION	5.097291692600142E-5	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999677941228706	WITHOUT_CLASSIFICATION	3.2205877129428606E-5	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9997307512797938	WITHOUT_CLASSIFICATION	2.692487202061286E-4	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998339503858188	WITHOUT_CLASSIFICATION	1.660496141811027E-4	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999162127712762	WITHOUT_CLASSIFICATION	8.378722872393218E-5	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9999102269508423	WITHOUT_CLASSIFICATION	8.977304915769283E-5	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999756609913625	WITHOUT_CLASSIFICATION	2.4339008637547897E-5	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.999618077970719	WITHOUT_CLASSIFICATION	3.8192202928103683E-4	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999321522132755	WITHOUT_CLASSIFICATION	6.78477867245017E-5	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999950563081517	WITHOUT_CLASSIFICATION	4.943691848380044E-6	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999965065643693	WITHOUT_CLASSIFICATION	3.493435630710704E-6	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999201102923468	WITHOUT_CLASSIFICATION	7.988970765308882E-5	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999780660141799	WITHOUT_CLASSIFICATION	2.1933985819977654E-5	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9999647022874723	WITHOUT_CLASSIFICATION	3.5297712527704154E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997918221563629	WITHOUT_CLASSIFICATION	2.0817784363706527E-4	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997918221563629	WITHOUT_CLASSIFICATION	2.0817784363706527E-4	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999148948291641	WITHOUT_CLASSIFICATION	8.510517083592167E-5	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.9986048586260841	WITHOUT_CLASSIFICATION	0.0013951413739159099	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999141857599109	WITHOUT_CLASSIFICATION	8.581424008919893E-5	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9989617716787857	WITHOUT_CLASSIFICATION	0.0010382283212142596	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999617501805725	WITHOUT_CLASSIFICATION	3.824981942750106E-5	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9988337831252649	WITHOUT_CLASSIFICATION	0.0011662168747350991	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9995825947171489	WITHOUT_CLASSIFICATION	4.174052828511035E-4	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9996725905389663	WITHOUT_CLASSIFICATION	3.2740946103375433E-4	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.999927384011257	WITHOUT_CLASSIFICATION	7.261598874301729E-5	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9991940676417068	WITHOUT_CLASSIFICATION	8.059323582930386E-4	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999898516389178	WITHOUT_CLASSIFICATION	1.0148361082130604E-5	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9983812295539427	WITHOUT_CLASSIFICATION	0.0016187704460573064	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999612383469503	WITHOUT_CLASSIFICATION	3.876165304975223E-5	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999983310315837	WITHOUT_CLASSIFICATION	1.6689684162946252E-5	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998224348826603	WITHOUT_CLASSIFICATION	1.7756511733960472E-4	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999975207423415	WITHOUT_CLASSIFICATION	2.4792576584969168E-5	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.99714042884745	WITHOUT_CLASSIFICATION	0.002859571152550018	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.99714042884745	WITHOUT_CLASSIFICATION	0.002859571152550018	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999327346027086	WITHOUT_CLASSIFICATION	6.726539729139813E-5	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997437616393638	WITHOUT_CLASSIFICATION	2.562383606360911E-4	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999961317196187	WITHOUT_CLASSIFICATION	3.868280381336464E-6	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999619168927997	WITHOUT_CLASSIFICATION	3.80831072003534E-5	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999553411179766	WITHOUT_CLASSIFICATION	4.465888202336739E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999957370916815	WITHOUT_CLASSIFICATION	4.2629083183905205E-6	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999888177948542	WITHOUT_CLASSIFICATION	1.1182205145795565E-4	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999553411179766	WITHOUT_CLASSIFICATION	4.465888202336739E-5	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999855713517687	WITHOUT_CLASSIFICATION	1.4428648231182876E-5	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999072550567695	WITHOUT_CLASSIFICATION	9.274494323050293E-5	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999876258522521	WITHOUT_CLASSIFICATION	1.2374147748006218E-5	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999876258522521	WITHOUT_CLASSIFICATION	1.2374147748006218E-5	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999669414611853	WITHOUT_CLASSIFICATION	3.305853881477252E-5	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999882345537965	WITHOUT_CLASSIFICATION	1.176544620344981E-5	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9997415070099009	WITHOUT_CLASSIFICATION	2.584929900990344E-4	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999751463119498	WITHOUT_CLASSIFICATION	2.4853688050050638E-5	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9997415070099009	WITHOUT_CLASSIFICATION	2.584929900990344E-4	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9981927294865167	WITHOUT_CLASSIFICATION	0.0018072705134832875	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999616910175203	WITHOUT_CLASSIFICATION	3.830898247963837E-5	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999471285390704	WITHOUT_CLASSIFICATION	5.2871460929484274E-5	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999638179876967	WITHOUT_CLASSIFICATION	3.61820123032494E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999459532201399	WITHOUT_CLASSIFICATION	5.404677986005975E-5	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9972237951469445	WITHOUT_CLASSIFICATION	0.002776204853055466	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995053224386341	WITHOUT_CLASSIFICATION	4.94677561365947E-4	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9998758654234287	WITHOUT_CLASSIFICATION	1.2413457657135625E-4	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.999914303193132	WITHOUT_CLASSIFICATION	8.569680686803949E-5	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999280054396877	WITHOUT_CLASSIFICATION	7.199456031220481E-5	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9998693322657831	WITHOUT_CLASSIFICATION	1.3066773421685948E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998939678676988	WITHOUT_CLASSIFICATION	1.0603213230119313E-4	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9998899898071572	WITHOUT_CLASSIFICATION	1.1001019284288829E-4	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999983731042694	WITHOUT_CLASSIFICATION	1.6268957306331565E-6	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9976600538730799	WITHOUT_CLASSIFICATION	0.0023399461269200984	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997300366424895	WITHOUT_CLASSIFICATION	2.699633575105946E-4	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.999861131117104	WITHOUT_CLASSIFICATION	1.3886888289595147E-4	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999142831767631	WITHOUT_CLASSIFICATION	8.571682323690099E-5	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999826241428145	WITHOUT_CLASSIFICATION	1.7375857185453876E-5	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999774738956587	WITHOUT_CLASSIFICATION	2.2526104341352443E-5	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999172660337943	WITHOUT_CLASSIFICATION	8.273396620568184E-5	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9998232667864682	WITHOUT_CLASSIFICATION	1.7673321353184237E-4	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999143995831817	WITHOUT_CLASSIFICATION	8.560041681827383E-5	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999998545280369	WITHOUT_CLASSIFICATION	1.4547196310410722E-7	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999399258494884	WITHOUT_CLASSIFICATION	6.007415051153447E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999895411264804	WITHOUT_CLASSIFICATION	1.045887351957796E-5	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999949463338983	WITHOUT_CLASSIFICATION	5.053666101687504E-6	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.9999062086173229	WITHOUT_CLASSIFICATION	9.379138267710273E-5	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9704538450934699	WITHOUT_CLASSIFICATION	0.02954615490653014	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9996141384849206	WITHOUT_CLASSIFICATION	3.858615150794662E-4	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999679636220951	WITHOUT_CLASSIFICATION	3.203637790496117E-5	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999085544912151	WITHOUT_CLASSIFICATION	9.144550878489292E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.999916386032152	WITHOUT_CLASSIFICATION	8.36139678480332E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.999916386032152	WITHOUT_CLASSIFICATION	8.36139678480332E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999954547670565	WITHOUT_CLASSIFICATION	4.5452329434721005E-6	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997372671118958	WITHOUT_CLASSIFICATION	2.627328881041611E-4	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999603857253719	WITHOUT_CLASSIFICATION	3.961427462795234E-5	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9999602450358359	WITHOUT_CLASSIFICATION	3.975496416417626E-5	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9992489258593791	WITHOUT_CLASSIFICATION	7.510741406210444E-4	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9998920030613708	WITHOUT_CLASSIFICATION	1.0799693862913437E-4	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999597647458278	WITHOUT_CLASSIFICATION	4.02352541720403E-5	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9998105850300613	WITHOUT_CLASSIFICATION	1.8941496993867332E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999954547670565	WITHOUT_CLASSIFICATION	4.5452329434721005E-6	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997372671118958	WITHOUT_CLASSIFICATION	2.627328881041611E-4	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998619946315215	WITHOUT_CLASSIFICATION	1.380053684785838E-4	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999367353686208	WITHOUT_CLASSIFICATION	6.326463137916089E-5	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999986643521538	WITHOUT_CLASSIFICATION	1.3356478461386471E-6	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9998378355965155	WITHOUT_CLASSIFICATION	1.6216440348439993E-4	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999421076050559	WITHOUT_CLASSIFICATION	5.789239494411141E-5	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9993996580812731	WITHOUT_CLASSIFICATION	6.003419187268421E-4	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999764880220732	WITHOUT_CLASSIFICATION	2.3511977926862928E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999930436307386	WITHOUT_CLASSIFICATION	6.956369261454619E-6	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999975010481854	WITHOUT_CLASSIFICATION	2.4989518146023873E-5	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9987464360837365	WITHOUT_CLASSIFICATION	0.0012535639162634588	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9998956256740372	WITHOUT_CLASSIFICATION	1.0437432596277577E-4	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9987464360837365	WITHOUT_CLASSIFICATION	0.0012535639162634588	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.999932942986445	WITHOUT_CLASSIFICATION	6.705701355497098E-5	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999090029274504	WITHOUT_CLASSIFICATION	9.0997072549553E-5	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.999932942986445	WITHOUT_CLASSIFICATION	6.705701355497098E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998576733845693	WITHOUT_CLASSIFICATION	1.4232661543075258E-4	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9961161335547948	WITHOUT_CLASSIFICATION	0.0038838664452051745	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999930436307386	WITHOUT_CLASSIFICATION	6.956369261454619E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999930436307386	WITHOUT_CLASSIFICATION	6.956369261454619E-6	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999405254637155	WITHOUT_CLASSIFICATION	5.9474536284519004E-5	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999406008660507	WITHOUT_CLASSIFICATION	5.9399133949227895E-5	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999405254637155	WITHOUT_CLASSIFICATION	5.9474536284519004E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999101712233913	WITHOUT_CLASSIFICATION	8.982877660861794E-5	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999500468526711	WITHOUT_CLASSIFICATION	4.995314732901352E-5	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999213258027455	WITHOUT_CLASSIFICATION	7.867419725443381E-5	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.999961574531752	WITHOUT_CLASSIFICATION	3.842546824801779E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999130917983073	WITHOUT_CLASSIFICATION	8.690820169258795E-5	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999721346811608	WITHOUT_CLASSIFICATION	2.7865318839238328E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999930185158459	WITHOUT_CLASSIFICATION	6.981484154094751E-6	DEFECT
columns	WITHOUT_CLASSIFICATION	0.9999927895440375	WITHOUT_CLASSIFICATION	7.210455962487479E-6	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9999441132339075	WITHOUT_CLASSIFICATION	5.588676609245423E-5	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.999663297345798	WITHOUT_CLASSIFICATION	3.367026542019894E-4	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999947405390406	WITHOUT_CLASSIFICATION	5.259460959354573E-6	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.9999945638447676	WITHOUT_CLASSIFICATION	5.4361552323918366E-6	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999456601430693	WITHOUT_CLASSIFICATION	5.433985693076036E-5	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999800914001337	WITHOUT_CLASSIFICATION	1.9908599866388973E-5	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999697269853013	WITHOUT_CLASSIFICATION	3.0273014698703388E-5	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998645963582561	WITHOUT_CLASSIFICATION	1.3540364174390848E-4	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998899898071572	WITHOUT_CLASSIFICATION	1.1001019284288829E-4	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999708090695908	WITHOUT_CLASSIFICATION	2.9190930409258437E-5	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999244809689496	WITHOUT_CLASSIFICATION	7.551903105040253E-5	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999344371291605	WITHOUT_CLASSIFICATION	6.556287083952783E-5	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998899898071572	WITHOUT_CLASSIFICATION	1.1001019284288829E-4	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998988394858238	WITHOUT_CLASSIFICATION	1.0116051417611908E-4	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998938778733705	WITHOUT_CLASSIFICATION	1.0612212662951196E-4	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9996249764862706	WITHOUT_CLASSIFICATION	3.7502351372941317E-4	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9997881952059364	WITHOUT_CLASSIFICATION	2.1180479406361681E-4	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.999888352550812	WITHOUT_CLASSIFICATION	1.1164744918792212E-4	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999135342205313	WITHOUT_CLASSIFICATION	8.646577946873312E-5	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9237514822655061	WITHOUT_CLASSIFICATION	0.07624851773449388	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9998515004424071	WITHOUT_CLASSIFICATION	1.4849955759295853E-4	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999130917983073	WITHOUT_CLASSIFICATION	8.690820169258795E-5	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999147521496284	WITHOUT_CLASSIFICATION	8.524785037152087E-5	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9999598869015195	WITHOUT_CLASSIFICATION	4.011309848043088E-5	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9370274073961431	WITHOUT_CLASSIFICATION	0.0629725926038569	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.9999133353274982	WITHOUT_CLASSIFICATION	8.666467250178806E-5	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999726845693719	WITHOUT_CLASSIFICATION	2.731543062804223E-5	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.9999947060344021	WITHOUT_CLASSIFICATION	5.293965597895967E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999101712233913	WITHOUT_CLASSIFICATION	8.982877660861794E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999101712233913	WITHOUT_CLASSIFICATION	8.982877660861794E-5	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999839307998847	WITHOUT_CLASSIFICATION	1.6069200115279102E-5	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999913214268918	WITHOUT_CLASSIFICATION	8.678573108219928E-6	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9998276712608818	WITHOUT_CLASSIFICATION	1.7232873911819936E-4	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999929182827649	WITHOUT_CLASSIFICATION	7.0817172350767355E-6	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9996635666580145	WITHOUT_CLASSIFICATION	3.364333419855377E-4	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9995530783275266	WITHOUT_CLASSIFICATION	4.469216724734841E-4	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9995513715642905	WITHOUT_CLASSIFICATION	4.4862843570946635E-4	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999823412918604	WITHOUT_CLASSIFICATION	1.7658708139650115E-5	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999704477299685	WITHOUT_CLASSIFICATION	2.955227003149609E-5	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999578889642109	WITHOUT_CLASSIFICATION	4.2111035789107975E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998474898293144	WITHOUT_CLASSIFICATION	1.5251017068563472E-4	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999456601430693	WITHOUT_CLASSIFICATION	5.433985693076036E-5	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999954547670565	WITHOUT_CLASSIFICATION	4.5452329434721005E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998474898293144	WITHOUT_CLASSIFICATION	1.5251017068563472E-4	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999246305973449	WITHOUT_CLASSIFICATION	7.536940265498617E-5	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999877202051983	WITHOUT_CLASSIFICATION	1.2279794801691422E-5	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999547723882646	WITHOUT_CLASSIFICATION	4.5227611735435744E-5	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9292529014950137	WITHOUT_CLASSIFICATION	0.07074709850498631	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994390088360192	WITHOUT_CLASSIFICATION	5.609911639807079E-4	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.998876701477388	WITHOUT_CLASSIFICATION	0.00112329852261201	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999622656287187	WITHOUT_CLASSIFICATION	3.7734371281225316E-5	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9995429856501029	WITHOUT_CLASSIFICATION	4.570143498970696E-4	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999931007929571	WITHOUT_CLASSIFICATION	6.899207042925157E-6	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999129714351777	WITHOUT_CLASSIFICATION	8.702856482234593E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999537276773904	WITHOUT_CLASSIFICATION	4.627232260951114E-5	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999537276773904	WITHOUT_CLASSIFICATION	4.627232260951114E-5	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9996100823089025	WITHOUT_CLASSIFICATION	3.8991769109748207E-4	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999971734541069	WITHOUT_CLASSIFICATION	2.8265458930949417E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998474898293144	WITHOUT_CLASSIFICATION	1.5251017068563472E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994390088360192	WITHOUT_CLASSIFICATION	5.609911639807079E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999622656287187	WITHOUT_CLASSIFICATION	3.7734371281225316E-5	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999381353111938	WITHOUT_CLASSIFICATION	6.186468880619469E-5	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999895868977164	WITHOUT_CLASSIFICATION	1.0413102283510499E-5	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9999447020384208	WITHOUT_CLASSIFICATION	5.529796157911995E-5	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999540912866817	WITHOUT_CLASSIFICATION	4.5908713318346E-5	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999057510132405	WITHOUT_CLASSIFICATION	9.424898675945322E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999925340942296	WITHOUT_CLASSIFICATION	7.4659057704093155E-6	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999246305973449	WITHOUT_CLASSIFICATION	7.536940265498617E-5	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997610112573595	WITHOUT_CLASSIFICATION	2.38988742640557E-4	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999579661850697	WITHOUT_CLASSIFICATION	4.203381493035989E-5	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999927719093127	WITHOUT_CLASSIFICATION	7.228090687329958E-6	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999952886486128	WITHOUT_CLASSIFICATION	4.711351387186521E-6	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999951132761156	WITHOUT_CLASSIFICATION	4.886723884440932E-6	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9999694653642051	WITHOUT_CLASSIFICATION	3.053463579485321E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998576733845693	WITHOUT_CLASSIFICATION	1.4232661543075258E-4	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998730755440554	WITHOUT_CLASSIFICATION	1.2692445594455738E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999991152270388	WITHOUT_CLASSIFICATION	8.847729611936262E-6	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9959356948270621	WITHOUT_CLASSIFICATION	0.0040643051729378965	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9979318204093182	WITHOUT_CLASSIFICATION	0.0020681795906818804	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9984024959760276	WITHOUT_CLASSIFICATION	0.0015975040239723565	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9996772076734866	WITHOUT_CLASSIFICATION	3.227923265134963E-4	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9996552016676148	WITHOUT_CLASSIFICATION	3.4479833238521977E-4	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999119143753492	WITHOUT_CLASSIFICATION	8.808562465080223E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999925340942296	WITHOUT_CLASSIFICATION	7.4659057704093155E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999161823409615	WITHOUT_CLASSIFICATION	8.381765903841394E-5	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999111722645858	WITHOUT_CLASSIFICATION	8.882773541417949E-5	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9998936591237783	WITHOUT_CLASSIFICATION	1.0634087622174729E-4	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.999936887146267	WITHOUT_CLASSIFICATION	6.311285373292416E-5	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9996906933051025	WITHOUT_CLASSIFICATION	3.0930669489739665E-4	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.9997568449621442	WITHOUT_CLASSIFICATION	2.431550378556975E-4	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999739496141838	WITHOUT_CLASSIFICATION	2.6050385816170935E-5	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9928961370274147	WITHOUT_CLASSIFICATION	0.007103862972585245	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999027826886233	WITHOUT_CLASSIFICATION	9.721731137667629E-5	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999976405289242	WITHOUT_CLASSIFICATION	2.359471075799151E-5	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999919531507923	WITHOUT_CLASSIFICATION	8.046849207697584E-6	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.999441109401075	WITHOUT_CLASSIFICATION	5.588905989250404E-4	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999930286689285	WITHOUT_CLASSIFICATION	6.971331071631227E-6	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999941788274302	WITHOUT_CLASSIFICATION	5.82117256978563E-6	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9994366818625426	WITHOUT_CLASSIFICATION	5.633181374573652E-4	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999991535239033	WITHOUT_CLASSIFICATION	8.46476096702562E-6	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999891385688316	WITHOUT_CLASSIFICATION	1.0861431168371582E-5	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999452119465	WITHOUT_CLASSIFICATION	5.4788053500036925E-5	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999683739570144	WITHOUT_CLASSIFICATION	3.1626042985618664E-5	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999934903960245	WITHOUT_CLASSIFICATION	6.509603975502252E-5	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999917956906837	WITHOUT_CLASSIFICATION	8.204309316288306E-5	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999681496888456	WITHOUT_CLASSIFICATION	3.1850311154354535E-5	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9452327181431545	WITHOUT_CLASSIFICATION	0.054767281856845526	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999448368337356	WITHOUT_CLASSIFICATION	5.516316626450422E-5	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999252243450343	WITHOUT_CLASSIFICATION	7.477565496580902E-5	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999817784753475	WITHOUT_CLASSIFICATION	1.822152465249386E-4	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9146820605986486	WITHOUT_CLASSIFICATION	0.08531793940135128	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9997221556545335	WITHOUT_CLASSIFICATION	2.778443454665459E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9961023581934786	WITHOUT_CLASSIFICATION	0.003897641806521461	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999324191340858	WITHOUT_CLASSIFICATION	6.758086591419927E-5	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999999307072051	WITHOUT_CLASSIFICATION	6.929279491092607E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999431961640081	WITHOUT_CLASSIFICATION	5.680383599190426E-4	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999121014892715	WITHOUT_CLASSIFICATION	8.789851072851028E-5	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999690947777152	WITHOUT_CLASSIFICATION	3.090522228474191E-5	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9971353283678401	WITHOUT_CLASSIFICATION	0.002864671632159848	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999121014892715	WITHOUT_CLASSIFICATION	8.789851072851028E-5	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999431961640081	WITHOUT_CLASSIFICATION	5.680383599190426E-4	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999690947777152	WITHOUT_CLASSIFICATION	3.090522228474191E-5	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.9999339271006381	WITHOUT_CLASSIFICATION	6.607289936195931E-5	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999747157129488	WITHOUT_CLASSIFICATION	2.5284287051145447E-5	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9988894163867303	WITHOUT_CLASSIFICATION	0.00111058361326967	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998508886976178	WITHOUT_CLASSIFICATION	1.4911130238218616E-4	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999756092773627	WITHOUT_CLASSIFICATION	2.4390722637270503E-5	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8690881625671456	WITHOUT_CLASSIFICATION	0.13091183743285448	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9987363954421999	WITHOUT_CLASSIFICATION	0.0012636045578000058	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998450740830931	WITHOUT_CLASSIFICATION	1.5492591690684509E-4	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999997105929366	WITHOUT_CLASSIFICATION	2.8940706344784795E-7	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9991199561077904	WITHOUT_CLASSIFICATION	8.800438922096992E-4	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.999914697216962	WITHOUT_CLASSIFICATION	8.53027830380203E-5	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999728414791133	WITHOUT_CLASSIFICATION	2.7158520886702142E-5	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999185690056529	WITHOUT_CLASSIFICATION	8.143099434714261E-5	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998508886976178	WITHOUT_CLASSIFICATION	1.4911130238218616E-4	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999905616268508	WITHOUT_CLASSIFICATION	9.43837314912858E-6	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999949772194647	WITHOUT_CLASSIFICATION	5.022780535186439E-6	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9989161649499037	WITHOUT_CLASSIFICATION	0.001083835050096326	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999997548585129	WITHOUT_CLASSIFICATION	2.451414870997491E-7	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9996826369865924	WITHOUT_CLASSIFICATION	3.1736301340756047E-4	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999576474081217	WITHOUT_CLASSIFICATION	4.2352591878398666E-5	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9994987166121787	WITHOUT_CLASSIFICATION	5.012833878213956E-4	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999989605785687	WITHOUT_CLASSIFICATION	1.0394214313206884E-6	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999885905782772	WITHOUT_CLASSIFICATION	1.140942172278949E-4	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999615934117125	WITHOUT_CLASSIFICATION	3.84065882873712E-5	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999569946696404	WITHOUT_CLASSIFICATION	4.300533035957025E-5	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999569946696404	WITHOUT_CLASSIFICATION	4.300533035957025E-5	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999930155607794	WITHOUT_CLASSIFICATION	6.984439220565878E-6	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999930155607794	WITHOUT_CLASSIFICATION	6.984439220565878E-6	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.9995929169274625	WITHOUT_CLASSIFICATION	4.0708307253741567E-4	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9989161649499037	WITHOUT_CLASSIFICATION	0.001083835050096326	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999579066955541	WITHOUT_CLASSIFICATION	4.209330444597685E-5	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999749950486083	WITHOUT_CLASSIFICATION	2.5004951391651407E-5	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999876750487521	WITHOUT_CLASSIFICATION	1.2324951247956138E-5	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999876750487521	WITHOUT_CLASSIFICATION	1.2324951247956138E-5	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999892570656658	WITHOUT_CLASSIFICATION	1.074293433426506E-5	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999966012052507	WITHOUT_CLASSIFICATION	3.398794749297516E-5	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999826669642832	WITHOUT_CLASSIFICATION	1.733303571685289E-5	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9999898604477737	WITHOUT_CLASSIFICATION	1.0139552226326115E-5	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999264551059441	WITHOUT_CLASSIFICATION	7.354489405583024E-5	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999364276182282	WITHOUT_CLASSIFICATION	6.357238177180198E-5	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999749933703767	WITHOUT_CLASSIFICATION	2.5006629623401092E-5	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999744758700836	WITHOUT_CLASSIFICATION	2.5524129916300128E-5	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9999520214822663	WITHOUT_CLASSIFICATION	4.797851773372543E-5	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9996846329820733	WITHOUT_CLASSIFICATION	3.153670179267733E-4	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.999971944825438	WITHOUT_CLASSIFICATION	2.805517456203812E-5	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.999957488738482	WITHOUT_CLASSIFICATION	4.251126151804667E-5	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.999945358799225	WITHOUT_CLASSIFICATION	5.4641200775080996E-5	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.9999952840323828	WITHOUT_CLASSIFICATION	4.715967617175667E-6	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999936823083418	WITHOUT_CLASSIFICATION	6.317691658171544E-6	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998703353508666	WITHOUT_CLASSIFICATION	1.296646491334292E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999353887129245	WITHOUT_CLASSIFICATION	6.461128707544596E-5	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999445901458812	WITHOUT_CLASSIFICATION	5.5409854118732546E-5	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999531958407074	WITHOUT_CLASSIFICATION	4.680415929264492E-5	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9953636998589723	WITHOUT_CLASSIFICATION	0.00463630014102767	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999437047640197	WITHOUT_CLASSIFICATION	5.629523598033064E-5	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9974164771703841	WITHOUT_CLASSIFICATION	0.00258352282961586	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9997861237782291	WITHOUT_CLASSIFICATION	2.1387622177082273E-4	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999756521151723	WITHOUT_CLASSIFICATION	2.434788482762875E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999953922802819	WITHOUT_CLASSIFICATION	4.607719718114166E-6	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998822591123422	WITHOUT_CLASSIFICATION	1.1774088765777959E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999976405289242	WITHOUT_CLASSIFICATION	2.359471075799151E-5	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999553378030572	WITHOUT_CLASSIFICATION	4.4662196942759024E-5	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9982454839258766	WITHOUT_CLASSIFICATION	0.0017545160741232893	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998946804469235	WITHOUT_CLASSIFICATION	1.0531955307643762E-4	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999893690829324	WITHOUT_CLASSIFICATION	1.0630917067606578E-4	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.99992269138181	WITHOUT_CLASSIFICATION	7.730861819000075E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.99992269138181	WITHOUT_CLASSIFICATION	7.730861819000075E-5	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999971840346824	WITHOUT_CLASSIFICATION	2.8159653175982983E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9999968774850584	WITHOUT_CLASSIFICATION	3.1225149416397247E-6	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999301308832086	WITHOUT_CLASSIFICATION	6.986911679140701E-5	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999301308832086	WITHOUT_CLASSIFICATION	6.986911679140701E-5	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998483263925255	WITHOUT_CLASSIFICATION	1.5167360747452311E-4	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9995465553084906	WITHOUT_CLASSIFICATION	4.5344469150943083E-4	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.9984584429863471	WITHOUT_CLASSIFICATION	0.001541557013652916	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999966566318664	WITHOUT_CLASSIFICATION	3.3433681336491724E-6	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9999118629891297	WITHOUT_CLASSIFICATION	8.813701087032026E-5	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9997878661114981	WITHOUT_CLASSIFICATION	2.1213388850207162E-4	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.999956488651626	WITHOUT_CLASSIFICATION	4.351134837401215E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999335250849132	WITHOUT_CLASSIFICATION	6.647491508691186E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999335250849132	WITHOUT_CLASSIFICATION	6.647491508691186E-5	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999802982698005	WITHOUT_CLASSIFICATION	1.970173019947908E-5	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999488379088178	WITHOUT_CLASSIFICATION	5.116209118212678E-5	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999488379088178	WITHOUT_CLASSIFICATION	5.116209118212678E-5	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999598298469173	WITHOUT_CLASSIFICATION	4.0170153082669496E-5	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999275004751327	WITHOUT_CLASSIFICATION	7.24995248672924E-5	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.9999749366703867	WITHOUT_CLASSIFICATION	2.506332961324734E-5	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999769774058618	WITHOUT_CLASSIFICATION	2.302259413818351E-5	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999783075834721	WITHOUT_CLASSIFICATION	2.169241652802535E-5	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9985694123360732	WITHOUT_CLASSIFICATION	0.001430587663926798	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998495136812569	WITHOUT_CLASSIFICATION	1.5048631874321647E-4	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999970749735113	WITHOUT_CLASSIFICATION	2.9250264886956942E-5	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9995167588640983	WITHOUT_CLASSIFICATION	4.8324113590164376E-4	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9986338523079853	WITHOUT_CLASSIFICATION	0.0013661476920146635	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999768157653055	WITHOUT_CLASSIFICATION	2.318423469447576E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999992532943449	WITHOUT_CLASSIFICATION	7.467056551070708E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999992532943449	WITHOUT_CLASSIFICATION	7.467056551070708E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999992532943449	WITHOUT_CLASSIFICATION	7.467056551070708E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999992532943449	WITHOUT_CLASSIFICATION	7.467056551070708E-6	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999432180425841	WITHOUT_CLASSIFICATION	5.678195741594304E-5	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9970437022469505	WITHOUT_CLASSIFICATION	0.0029562977530494553	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9999954884806302	WITHOUT_CLASSIFICATION	4.511519369723572E-6	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999284810886521	WITHOUT_CLASSIFICATION	7.151891134800615E-5	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9972183095830424	WITHOUT_CLASSIFICATION	0.002781690416957701	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999957370916815	WITHOUT_CLASSIFICATION	4.2629083183905205E-6	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998232541312817	WITHOUT_CLASSIFICATION	1.7674586871832312E-4	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997257000341971	WITHOUT_CLASSIFICATION	2.742999658028713E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999957370916815	WITHOUT_CLASSIFICATION	4.2629083183905205E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999957370916815	WITHOUT_CLASSIFICATION	4.2629083183905205E-6	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999230666607459	WITHOUT_CLASSIFICATION	7.69333392540324E-5	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999440780131409	WITHOUT_CLASSIFICATION	5.5921986859102576E-5	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999443278884723	WITHOUT_CLASSIFICATION	5.5672111527650184E-5	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998460123401277	WITHOUT_CLASSIFICATION	1.539876598722469E-4	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9997064394877156	WITHOUT_CLASSIFICATION	2.935605122843459E-4	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9998175155826371	WITHOUT_CLASSIFICATION	1.8248441736298224E-4	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999892770925771	WITHOUT_CLASSIFICATION	1.0722907422783539E-5	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998460123401277	WITHOUT_CLASSIFICATION	1.539876598722469E-4	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999760046773399	WITHOUT_CLASSIFICATION	2.3995322660100488E-5	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998586368923845	WITHOUT_CLASSIFICATION	1.413631076154694E-4	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999971004082785	WITHOUT_CLASSIFICATION	2.899591721450778E-6	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9994716822124535	WITHOUT_CLASSIFICATION	5.283177875464781E-4	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9994316533376815	WITHOUT_CLASSIFICATION	5.683466623185342E-4	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9989640578863049	WITHOUT_CLASSIFICATION	0.0010359421136949827	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999866678444052	WITHOUT_CLASSIFICATION	1.3332155594853318E-5	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999722563594762	WITHOUT_CLASSIFICATION	2.7743640523811445E-5	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999834185654228	WITHOUT_CLASSIFICATION	1.6581434577199116E-5	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999916262905421	WITHOUT_CLASSIFICATION	8.373709457896116E-5	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999834185654228	WITHOUT_CLASSIFICATION	1.6581434577199116E-5	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.99995393129419	WITHOUT_CLASSIFICATION	4.606870580993002E-5	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.995675516416531	WITHOUT_CLASSIFICATION	0.004324483583469021	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996905349972428	WITHOUT_CLASSIFICATION	3.094650027571438E-4	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998700595569168	WITHOUT_CLASSIFICATION	1.299404430832823E-4	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998651154496736	WITHOUT_CLASSIFICATION	1.348845503263893E-4	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999952254617227	WITHOUT_CLASSIFICATION	4.7745382772714305E-6	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999297507711536	WITHOUT_CLASSIFICATION	7.024922884638262E-5	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999230576300131	WITHOUT_CLASSIFICATION	7.694236998692152E-5	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999297507711536	WITHOUT_CLASSIFICATION	7.024922884638262E-5	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999293274806246	WITHOUT_CLASSIFICATION	7.067251937543963E-5	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999895102210458	WITHOUT_CLASSIFICATION	1.048977895426431E-5	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999250862318945	WITHOUT_CLASSIFICATION	7.491376810551672E-5	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999504479815381	WITHOUT_CLASSIFICATION	4.95520184618529E-5	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999523304115396	WITHOUT_CLASSIFICATION	4.766958846049282E-5	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9998899898071572	WITHOUT_CLASSIFICATION	1.1001019284288829E-4	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999633093713566	WITHOUT_CLASSIFICATION	3.669062864340827E-5	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999952254617227	WITHOUT_CLASSIFICATION	4.7745382772714305E-6	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999230576300131	WITHOUT_CLASSIFICATION	7.694236998692152E-5	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999293274806246	WITHOUT_CLASSIFICATION	7.067251937543963E-5	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999799896566335	WITHOUT_CLASSIFICATION	2.001034336650224E-5	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9999456191078873	WITHOUT_CLASSIFICATION	5.438089211278268E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9993751618924375	WITHOUT_CLASSIFICATION	6.248381075625861E-4	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9997559108518662	WITHOUT_CLASSIFICATION	2.44089148133813E-4	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9996954708292326	WITHOUT_CLASSIFICATION	3.0452917076738726E-4	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999009072871912	WITHOUT_CLASSIFICATION	9.909271280874865E-5	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999737062010646	WITHOUT_CLASSIFICATION	2.6293798935489747E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999353887129245	WITHOUT_CLASSIFICATION	6.461128707544596E-5	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999895102210458	WITHOUT_CLASSIFICATION	1.048977895426431E-5	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999542895804779	WITHOUT_CLASSIFICATION	4.571041952209609E-5	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999405254637155	WITHOUT_CLASSIFICATION	5.9474536284519004E-5	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9994957036442331	WITHOUT_CLASSIFICATION	5.042963557668026E-4	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999574428698051	WITHOUT_CLASSIFICATION	4.255713019484427E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999353887129245	WITHOUT_CLASSIFICATION	6.461128707544596E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999767469513204	WITHOUT_CLASSIFICATION	2.3253048679471128E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999353887129245	WITHOUT_CLASSIFICATION	6.461128707544596E-5	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999890223012332	WITHOUT_CLASSIFICATION	1.0977698766881905E-5	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999335941941496	WITHOUT_CLASSIFICATION	6.6405805850384E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998497690228026	WITHOUT_CLASSIFICATION	1.5023097719735572E-4	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999840689256154	WITHOUT_CLASSIFICATION	1.593107438466845E-5	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999861162402871	WITHOUT_CLASSIFICATION	1.3883759712937124E-5	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.999912357226517	WITHOUT_CLASSIFICATION	8.764277348308357E-5	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999571623598178	WITHOUT_CLASSIFICATION	4.2837640182138356E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997986796517339	WITHOUT_CLASSIFICATION	2.0132034826608218E-4	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999749595937238	WITHOUT_CLASSIFICATION	2.504040627614696E-5	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.9999516971069199	WITHOUT_CLASSIFICATION	4.83028930800498E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999096184841205	WITHOUT_CLASSIFICATION	9.038151587949185E-5	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999426759848048	WITHOUT_CLASSIFICATION	5.732401519522795E-5	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9868358132065538	WITHOUT_CLASSIFICATION	0.01316418679344631	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.9998808774657432	WITHOUT_CLASSIFICATION	1.1912253425684672E-4	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9995788033304323	WITHOUT_CLASSIFICATION	4.2119666956774184E-4	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999976151566583	WITHOUT_CLASSIFICATION	2.384843341717758E-6	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999992353880852	WITHOUT_CLASSIFICATION	7.646119148022436E-6	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999663588250173	WITHOUT_CLASSIFICATION	3.3641174982694966E-4	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999922832424321	WITHOUT_CLASSIFICATION	7.716757567974256E-6	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9998965761167093	WITHOUT_CLASSIFICATION	1.0342388329060284E-4	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9980701725356806	WITHOUT_CLASSIFICATION	0.001929827464319287	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9980701725356806	WITHOUT_CLASSIFICATION	0.001929827464319287	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999473421799503	WITHOUT_CLASSIFICATION	5.265782004972145E-5	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9997148353541783	WITHOUT_CLASSIFICATION	2.851646458217183E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999925911538787	WITHOUT_CLASSIFICATION	7.408846121348453E-6	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999916652849373	WITHOUT_CLASSIFICATION	8.334715062664534E-6	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.999787148542719	WITHOUT_CLASSIFICATION	2.128514572809972E-4	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999510863487598	WITHOUT_CLASSIFICATION	4.891365124013633E-5	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999148921688034	WITHOUT_CLASSIFICATION	8.510783119664608E-5	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9992558198374207	WITHOUT_CLASSIFICATION	7.441801625793109E-4	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.997554265812449	WITHOUT_CLASSIFICATION	0.002445734187551011	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999573238028155	WITHOUT_CLASSIFICATION	4.2676197184395584E-5	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999544558902139	WITHOUT_CLASSIFICATION	4.5544109786022846E-5	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.9999830352707471	WITHOUT_CLASSIFICATION	1.696472925293785E-5	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998572951613756	WITHOUT_CLASSIFICATION	1.4270483862444656E-4	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999765858407507	WITHOUT_CLASSIFICATION	2.341415924932818E-5	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999995485533849	WITHOUT_CLASSIFICATION	4.514466150985191E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998894856100519	WITHOUT_CLASSIFICATION	1.1051438994825381E-4	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999711308418271	WITHOUT_CLASSIFICATION	2.8869158172886875E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999711308418271	WITHOUT_CLASSIFICATION	2.8869158172886875E-5	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999896746826784	WITHOUT_CLASSIFICATION	1.032531732168113E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997986796517339	WITHOUT_CLASSIFICATION	2.0132034826608218E-4	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9981891027381103	WITHOUT_CLASSIFICATION	0.0018108972618896776	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999894853421817	WITHOUT_CLASSIFICATION	1.051465781837705E-5	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999825333538889	WITHOUT_CLASSIFICATION	1.746664611110147E-4	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.999799475712582	WITHOUT_CLASSIFICATION	2.0052428741812998E-4	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.999958882359494	WITHOUT_CLASSIFICATION	4.11176405060145E-5	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9999946938648238	WITHOUT_CLASSIFICATION	5.306135176220828E-6	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9998048245641151	WITHOUT_CLASSIFICATION	1.9517543588491823E-4	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997481558208231	WITHOUT_CLASSIFICATION	2.5184417917689146E-4	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999590404736693	WITHOUT_CLASSIFICATION	4.095952633069603E-5	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999300862342807	WITHOUT_CLASSIFICATION	6.991376571929734E-5	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999705724208409	WITHOUT_CLASSIFICATION	2.9427579159153484E-5	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999632060527929	WITHOUT_CLASSIFICATION	3.679394720702843E-5	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999997953513187	WITHOUT_CLASSIFICATION	2.046486813532018E-7	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999612619382321	WITHOUT_CLASSIFICATION	3.873806176795192E-5	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999851578748009	WITHOUT_CLASSIFICATION	1.4842125199172896E-5	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999993051298892	WITHOUT_CLASSIFICATION	6.948701107971029E-6	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9987587055163024	WITHOUT_CLASSIFICATION	0.0012412944836976245	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999999288663934	WITHOUT_CLASSIFICATION	7.113360661123737E-7	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9996726571410711	WITHOUT_CLASSIFICATION	3.2734285892882287E-4	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999561810709616	WITHOUT_CLASSIFICATION	4.381892903842439E-5	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9978770456625683	WITHOUT_CLASSIFICATION	0.0021229543374316462	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999777240626757	WITHOUT_CLASSIFICATION	2.2275937324249385E-5	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9998946512298316	WITHOUT_CLASSIFICATION	1.0534877016838136E-4	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999307835521546	WITHOUT_CLASSIFICATION	6.921644784540157E-5	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998253144343415	WITHOUT_CLASSIFICATION	1.7468556565854997E-4	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9996010404684248	WITHOUT_CLASSIFICATION	3.9895953157523457E-4	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999813697977252	WITHOUT_CLASSIFICATION	1.8630202274668257E-5	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.998238331429907	WITHOUT_CLASSIFICATION	0.0017616685700930143	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998958915407079	WITHOUT_CLASSIFICATION	1.0410845929216998E-4	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999163000714598	WITHOUT_CLASSIFICATION	8.369992854026636E-5	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999908866135773	WITHOUT_CLASSIFICATION	9.113386422646615E-6	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.99990922187891	WITHOUT_CLASSIFICATION	9.077812109000082E-5	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9998932848242935	WITHOUT_CLASSIFICATION	1.0671517570647878E-4	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9995571139835158	WITHOUT_CLASSIFICATION	4.428860164842555E-4	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9993384643927284	WITHOUT_CLASSIFICATION	6.615356072715628E-4	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9865382463825412	WITHOUT_CLASSIFICATION	0.013461753617458936	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997074932856443	WITHOUT_CLASSIFICATION	2.9250671435563145E-4	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997074932856443	WITHOUT_CLASSIFICATION	2.9250671435563145E-4	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999557334476483	WITHOUT_CLASSIFICATION	4.426655235166753E-5	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999960748500189	WITHOUT_CLASSIFICATION	3.92514998108865E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999239755035323	WITHOUT_CLASSIFICATION	7.602449646775344E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999239755035323	WITHOUT_CLASSIFICATION	7.602449646775344E-5	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999858904790093	WITHOUT_CLASSIFICATION	1.4109520990695713E-5	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.999927655729863	WITHOUT_CLASSIFICATION	7.234427013705598E-5	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999586716646961	WITHOUT_CLASSIFICATION	4.13283353039076E-5	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999976072309349	WITHOUT_CLASSIFICATION	2.3927690650738275E-6	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998978111749055	WITHOUT_CLASSIFICATION	1.0218882509444666E-4	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998943684902085	WITHOUT_CLASSIFICATION	1.0563150979154682E-4	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999479329014554	WITHOUT_CLASSIFICATION	5.2067098544638156E-5	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999479329014554	WITHOUT_CLASSIFICATION	5.2067098544638156E-5	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998943684902085	WITHOUT_CLASSIFICATION	1.0563150979154682E-4	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999295451133158	WITHOUT_CLASSIFICATION	7.045488668416653E-5	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999101712233913	WITHOUT_CLASSIFICATION	8.982877660861794E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999026017270248	WITHOUT_CLASSIFICATION	9.739827297508975E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999026017270248	WITHOUT_CLASSIFICATION	9.739827297508975E-5	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.9999445308387571	WITHOUT_CLASSIFICATION	5.546916124286108E-5	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999673390655379	WITHOUT_CLASSIFICATION	3.266093446200809E-5	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999354590196573	WITHOUT_CLASSIFICATION	6.454098034265226E-5	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.999987444580113	WITHOUT_CLASSIFICATION	1.2555419886939523E-5	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999543543276442	WITHOUT_CLASSIFICATION	4.564567235572859E-5	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999114152016721	WITHOUT_CLASSIFICATION	8.858479832785474E-5	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999503707271323	WITHOUT_CLASSIFICATION	4.962927286764259E-5	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999731861681687	WITHOUT_CLASSIFICATION	2.6813831831319594E-5	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999963706298601	WITHOUT_CLASSIFICATION	3.6293701398228884E-6	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999242669862136	WITHOUT_CLASSIFICATION	7.573301378639878E-5	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999087304671563	WITHOUT_CLASSIFICATION	9.126953284369524E-5	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9976566987565061	WITHOUT_CLASSIFICATION	0.002343301243493843	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999666045006603	WITHOUT_CLASSIFICATION	3.3395499339746385E-5	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999661009463148	WITHOUT_CLASSIFICATION	3.3899053685205785E-5	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9999939024190971	WITHOUT_CLASSIFICATION	6.097580902900913E-6	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9989972095691294	WITHOUT_CLASSIFICATION	0.0010027904308706613	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998400905341012	WITHOUT_CLASSIFICATION	1.5990946589871792E-4	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9997787717485234	WITHOUT_CLASSIFICATION	2.2122825147667213E-4	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999703566597091	WITHOUT_CLASSIFICATION	2.9643340290928608E-5	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9995335327524704	WITHOUT_CLASSIFICATION	4.6646724752965815E-4	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9990747940445902	WITHOUT_CLASSIFICATION	9.252059554097615E-4	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.999928256811834	WITHOUT_CLASSIFICATION	7.174318816596955E-5	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9998797275415419	WITHOUT_CLASSIFICATION	1.2027245845804922E-4	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999749941205826	WITHOUT_CLASSIFICATION	2.5005879417395636E-4	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9999360372780095	WITHOUT_CLASSIFICATION	6.396272199048352E-5	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999621653896809	WITHOUT_CLASSIFICATION	3.783461031906549E-5	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999458203525378	WITHOUT_CLASSIFICATION	5.417964746229469E-5	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999994596784688	WITHOUT_CLASSIFICATION	5.403215313030631E-7	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.99999075918797	WITHOUT_CLASSIFICATION	9.24081203002387E-6	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999948623070023	WITHOUT_CLASSIFICATION	5.137692997616183E-6	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999841769254899	WITHOUT_CLASSIFICATION	1.5823074510148113E-5	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999960851294531	WITHOUT_CLASSIFICATION	3.9148705468570695E-6	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.9998735761378441	WITHOUT_CLASSIFICATION	1.2642386215594775E-4	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999973027975173	WITHOUT_CLASSIFICATION	2.6972024827501236E-6	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999103548781969	WITHOUT_CLASSIFICATION	8.964512180318875E-5	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999343913196558	WITHOUT_CLASSIFICATION	6.560868034424627E-5	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999498169626049	WITHOUT_CLASSIFICATION	5.0183037395034305E-5	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999974175312485	WITHOUT_CLASSIFICATION	2.582468751493166E-5	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9986889702382609	WITHOUT_CLASSIFICATION	0.0013110297617390638	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.9999316624940517	WITHOUT_CLASSIFICATION	6.833750594823756E-5	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.9999561807087589	WITHOUT_CLASSIFICATION	4.3819291241054956E-5	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999867286025124	WITHOUT_CLASSIFICATION	1.327139748756104E-5	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999117197498621	WITHOUT_CLASSIFICATION	8.828025013777332E-5	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.9987487459103223	WITHOUT_CLASSIFICATION	0.0012512540896777921	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999837895999198	WITHOUT_CLASSIFICATION	1.621040008009826E-5	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999929349441278	WITHOUT_CLASSIFICATION	7.065055872201612E-5	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999769801322452	WITHOUT_CLASSIFICATION	2.3019867754757828E-5	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998931698718503	WITHOUT_CLASSIFICATION	1.0683012814969834E-4	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999932902742152	WITHOUT_CLASSIFICATION	6.709725784775787E-6	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999320132361507	WITHOUT_CLASSIFICATION	6.7986763849393E-5	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999874213302968	WITHOUT_CLASSIFICATION	1.2578669703129074E-5	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9995942183825411	WITHOUT_CLASSIFICATION	4.0578161745888743E-4	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999669883983564	WITHOUT_CLASSIFICATION	3.3011601643633E-5	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9986032441670811	WITHOUT_CLASSIFICATION	0.0013967558329188274	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999318466356933	WITHOUT_CLASSIFICATION	6.815336430656295E-5	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9994222459724885	WITHOUT_CLASSIFICATION	5.77754027511442E-4	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999876933576906	WITHOUT_CLASSIFICATION	1.2306642309382504E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999892699166769	WITHOUT_CLASSIFICATION	1.0730083323049594E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999892699166769	WITHOUT_CLASSIFICATION	1.0730083323049594E-5	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999987731958292	WITHOUT_CLASSIFICATION	1.2268041707976232E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9997128820036483	WITHOUT_CLASSIFICATION	2.871179963517507E-4	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999967201119373	WITHOUT_CLASSIFICATION	3.2798880626836964E-6	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999958753548549	WITHOUT_CLASSIFICATION	4.1246451450984375E-5	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999848614526711	WITHOUT_CLASSIFICATION	1.5138547328894718E-4	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9997524283095307	WITHOUT_CLASSIFICATION	2.47571690469387E-4	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999963746359178	WITHOUT_CLASSIFICATION	3.6253640822251295E-6	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999738340187568	WITHOUT_CLASSIFICATION	2.6165981243090343E-5	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9997776875811553	WITHOUT_CLASSIFICATION	2.2231241884472755E-4	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999821079323047	WITHOUT_CLASSIFICATION	1.7892067695352888E-5	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999498347711808	WITHOUT_CLASSIFICATION	5.0165228819226416E-5	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.99971100183678	WITHOUT_CLASSIFICATION	2.889981632200222E-4	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996824905162	WITHOUT_CLASSIFICATION	3.175094838147447E-7	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999992604743972	WITHOUT_CLASSIFICATION	7.395256028592217E-7	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999474023129975	WITHOUT_CLASSIFICATION	5.259768700248378E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999474023129975	WITHOUT_CLASSIFICATION	5.259768700248378E-5	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999512647247562	WITHOUT_CLASSIFICATION	4.873527524384527E-5	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9995330960565119	WITHOUT_CLASSIFICATION	4.669039434881623E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999651487356618	WITHOUT_CLASSIFICATION	3.485126433822383E-5	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999917421570151	WITHOUT_CLASSIFICATION	8.257842984919371E-6	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999904069019468	WITHOUT_CLASSIFICATION	9.59309805325569E-6	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999489540422316	WITHOUT_CLASSIFICATION	5.104595776836902E-5	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999315774305044	WITHOUT_CLASSIFICATION	6.842256949549392E-5	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9998592450718654	WITHOUT_CLASSIFICATION	1.407549281344699E-4	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9972668091509975	WITHOUT_CLASSIFICATION	0.0027331908490025552	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999987957473608	WITHOUT_CLASSIFICATION	1.2042526391555958E-6	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999181421621738	WITHOUT_CLASSIFICATION	8.185783782614682E-5	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999793964668777	WITHOUT_CLASSIFICATION	2.060353312230982E-5	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999406133741905	WITHOUT_CLASSIFICATION	5.938662580948368E-5	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999982420306017	WITHOUT_CLASSIFICATION	1.7579693982053465E-6	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999365238878191	WITHOUT_CLASSIFICATION	6.347611218094838E-5	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999548307164418	WITHOUT_CLASSIFICATION	4.516928355833401E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9996356373942034	WITHOUT_CLASSIFICATION	3.6436260579661363E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999619304144837	WITHOUT_CLASSIFICATION	3.80695855164293E-5	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999224195253057	WITHOUT_CLASSIFICATION	7.758047469430536E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999744332650658	WITHOUT_CLASSIFICATION	2.556673493420749E-4	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999969889629446	WITHOUT_CLASSIFICATION	3.0110370552631307E-6	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999290746411567	WITHOUT_CLASSIFICATION	7.09253588433309E-5	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9995104769452541	WITHOUT_CLASSIFICATION	4.895230547459515E-4	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999988895525667	WITHOUT_CLASSIFICATION	1.1104474333160183E-6	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999932271795701	WITHOUT_CLASSIFICATION	6.772820429978808E-6	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.999902409261361	WITHOUT_CLASSIFICATION	9.759073863906086E-5	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9994094010157135	WITHOUT_CLASSIFICATION	5.905989842864248E-4	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999102939388897	WITHOUT_CLASSIFICATION	8.970606111031724E-5	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999975409667802	WITHOUT_CLASSIFICATION	2.459033219806686E-5	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9997018992899882	WITHOUT_CLASSIFICATION	2.9810071001175087E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9997254548029963	WITHOUT_CLASSIFICATION	2.7454519700362946E-4	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999277202685631	WITHOUT_CLASSIFICATION	7.227973143689764E-5	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.999795921001039	WITHOUT_CLASSIFICATION	2.0407899896100797E-4	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9998992193172848	WITHOUT_CLASSIFICATION	1.0078068271516818E-4	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999952414790066	WITHOUT_CLASSIFICATION	4.758520993399249E-6	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9997663330767023	WITHOUT_CLASSIFICATION	2.3366692329769337E-4	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9998500900594542	WITHOUT_CLASSIFICATION	1.4990994054586061E-4	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999000411673571	WITHOUT_CLASSIFICATION	9.995883264281004E-5	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998824177051314	WITHOUT_CLASSIFICATION	1.1758229486858009E-4	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9997862396935906	WITHOUT_CLASSIFICATION	2.137603064094656E-4	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9945001573232568	WITHOUT_CLASSIFICATION	0.005499842676743206	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999686247813262	WITHOUT_CLASSIFICATION	3.137521867380993E-5	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9787246282175669	WITHOUT_CLASSIFICATION	0.02127537178243304	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9787246282175669	WITHOUT_CLASSIFICATION	0.02127537178243304	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.999992259065684	WITHOUT_CLASSIFICATION	7.740934315991503E-6	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9686991003814391	WITHOUT_CLASSIFICATION	0.03130089961856084	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999831999431543	WITHOUT_CLASSIFICATION	1.6800056845657527E-5	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999776623362785	WITHOUT_CLASSIFICATION	2.2337663721455122E-5	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999728935972224	WITHOUT_CLASSIFICATION	2.710640277759862E-4	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9998489801651738	WITHOUT_CLASSIFICATION	1.5101983482616226E-4	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999817342409038	WITHOUT_CLASSIFICATION	1.8265759096290856E-5	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999522911030257	WITHOUT_CLASSIFICATION	4.7708896974356645E-5	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9989576770808474	WITHOUT_CLASSIFICATION	0.0010423229191526505	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998483077325263	WITHOUT_CLASSIFICATION	1.5169226747367934E-4	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999192875971417	WITHOUT_CLASSIFICATION	8.071240285832104E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999281032842293	WITHOUT_CLASSIFICATION	7.189671577068952E-4	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9993042338191381	WITHOUT_CLASSIFICATION	6.957661808618015E-4	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.99995501956618	WITHOUT_CLASSIFICATION	4.498043381992324E-5	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9996628993372971	WITHOUT_CLASSIFICATION	3.371006627028853E-4	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9996932716591224	WITHOUT_CLASSIFICATION	3.0672834087760504E-4	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999131620333986	WITHOUT_CLASSIFICATION	8.683796660138348E-5	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9996383614411152	WITHOUT_CLASSIFICATION	3.616385588848295E-4	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.999427764134629	WITHOUT_CLASSIFICATION	5.722358653710215E-4	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9970967132554902	WITHOUT_CLASSIFICATION	0.002903286744509776	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9989745447548214	WITHOUT_CLASSIFICATION	0.0010254552451785346	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9998471632416533	WITHOUT_CLASSIFICATION	1.5283675834654216E-4	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.999977614353617	WITHOUT_CLASSIFICATION	2.238564638294967E-5	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999802943311057	WITHOUT_CLASSIFICATION	1.9705668894235755E-5	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.999968772875901	WITHOUT_CLASSIFICATION	3.1227124098951965E-5	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999061872511033	WITHOUT_CLASSIFICATION	9.381274889673667E-5	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999444189593949	WITHOUT_CLASSIFICATION	5.558104060517048E-5	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9998725824347617	WITHOUT_CLASSIFICATION	1.2741756523817092E-4	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9928789067585463	WITHOUT_CLASSIFICATION	0.0071210932414537895	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.999936718316969	WITHOUT_CLASSIFICATION	6.328168303101641E-5	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9996714514030268	WITHOUT_CLASSIFICATION	3.2854859697319127E-4	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999969234353271	WITHOUT_CLASSIFICATION	3.0765646729720098E-6	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999942517957103	WITHOUT_CLASSIFICATION	5.74820428964084E-6	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9997580635893979	WITHOUT_CLASSIFICATION	2.4193641060220374E-4	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998279642478375	WITHOUT_CLASSIFICATION	1.7203575216250355E-4	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9996310275105151	WITHOUT_CLASSIFICATION	3.6897248948486694E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998313873442037	WITHOUT_CLASSIFICATION	1.686126557963483E-4	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9996076140981671	WITHOUT_CLASSIFICATION	3.9238590183288016E-4	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998719918088629	WITHOUT_CLASSIFICATION	1.2800819113717763E-4	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999966695245246	WITHOUT_CLASSIFICATION	3.330475475365972E-6	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999680684919051	WITHOUT_CLASSIFICATION	3.1931508094913016E-5	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998492861695331	WITHOUT_CLASSIFICATION	1.5071383046691186E-4	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.999674636486532	WITHOUT_CLASSIFICATION	3.253635134680157E-4	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9995034826906785	WITHOUT_CLASSIFICATION	4.965173093215882E-4	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999731734886973	WITHOUT_CLASSIFICATION	2.6826511302651528E-5	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.999997157201642	WITHOUT_CLASSIFICATION	2.842798358099651E-6	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999992326877231	WITHOUT_CLASSIFICATION	7.673122770028888E-7	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9996741362388812	WITHOUT_CLASSIFICATION	3.258637611188483E-4	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9995518039531168	WITHOUT_CLASSIFICATION	4.481960468831564E-4	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996824905162	WITHOUT_CLASSIFICATION	3.175094838147447E-7	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9998196692537459	WITHOUT_CLASSIFICATION	1.8033074625408227E-4	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999995892058375	WITHOUT_CLASSIFICATION	4.107941624937885E-6	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998902372667221	WITHOUT_CLASSIFICATION	1.0976273327791584E-4	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.999923144611547	WITHOUT_CLASSIFICATION	7.685538845296971E-5	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999985206308154	WITHOUT_CLASSIFICATION	1.4793691846786244E-6	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9996307497701027	WITHOUT_CLASSIFICATION	3.692502298973153E-4	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9991756622315265	WITHOUT_CLASSIFICATION	8.243377684734742E-4	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9820453578573348	WITHOUT_CLASSIFICATION	0.017954642142665185	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999637763013193	WITHOUT_CLASSIFICATION	3.6223698680770623E-5	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9996397077152275	WITHOUT_CLASSIFICATION	3.6029228477247016E-4	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999993917029931	WITHOUT_CLASSIFICATION	6.082970069032583E-7	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9974412355215029	WITHOUT_CLASSIFICATION	0.0025587644784971107	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9987316749995496	WITHOUT_CLASSIFICATION	0.0012683250004503278	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999812453815033	WITHOUT_CLASSIFICATION	1.875461849661859E-5	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9985470485178444	WITHOUT_CLASSIFICATION	0.00145295148215562	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998695701454202	WITHOUT_CLASSIFICATION	1.3042985457972352E-4	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9988761051458614	WITHOUT_CLASSIFICATION	0.0011238948541385286	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.999948476208939	WITHOUT_CLASSIFICATION	5.152379106100086E-5	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999986589306725	WITHOUT_CLASSIFICATION	1.341069327368682E-6	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998164758837839	WITHOUT_CLASSIFICATION	1.8352411621607793E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998695701454202	WITHOUT_CLASSIFICATION	1.3042985457972352E-4	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9982588883489713	WITHOUT_CLASSIFICATION	0.0017411116510287889	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9998355157887595	WITHOUT_CLASSIFICATION	1.644842112404689E-4	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999960425232035	WITHOUT_CLASSIFICATION	3.957476796474936E-6	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9987079953520579	WITHOUT_CLASSIFICATION	0.0012920046479421188	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999274064594094	WITHOUT_CLASSIFICATION	7.259354059060375E-5	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9964844258083082	WITHOUT_CLASSIFICATION	0.0035155741916918994	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999963248654665	WITHOUT_CLASSIFICATION	3.6751345334490155E-6	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999192831895061	WITHOUT_CLASSIFICATION	8.071681049395397E-5	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999298050726396	WITHOUT_CLASSIFICATION	7.019492736034273E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9819536384005089	WITHOUT_CLASSIFICATION	0.018046361599491138	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998467519863418	WITHOUT_CLASSIFICATION	1.5324801365827368E-4	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9980713192418185	WITHOUT_CLASSIFICATION	0.0019286807581815287	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999211179219792	WITHOUT_CLASSIFICATION	7.888207802072033E-5	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9998535337405992	WITHOUT_CLASSIFICATION	1.4646625940093413E-4	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999631251695387	WITHOUT_CLASSIFICATION	3.687483046123429E-5	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9997335669556522	WITHOUT_CLASSIFICATION	2.6643304434774407E-4	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9978770456625683	WITHOUT_CLASSIFICATION	0.0021229543374316462	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9989658535566011	WITHOUT_CLASSIFICATION	0.001034146443398887	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999848828882656	WITHOUT_CLASSIFICATION	1.5117111734301781E-5	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.999183375075261	WITHOUT_CLASSIFICATION	8.166249247389157E-4	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9965260150010878	WITHOUT_CLASSIFICATION	0.003473984998912066	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999954004891278	WITHOUT_CLASSIFICATION	4.599510872138704E-6	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999704064741312	WITHOUT_CLASSIFICATION	2.95935258687905E-4	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9991129026927151	WITHOUT_CLASSIFICATION	8.870973072848886E-4	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999771548832	WITHOUT_CLASSIFICATION	2.284511668430935E-8	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.999997489737947	WITHOUT_CLASSIFICATION	2.51026205296155E-6	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999378745444849	WITHOUT_CLASSIFICATION	6.21254555150687E-5	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9968895518531833	WITHOUT_CLASSIFICATION	0.0031104481468166496	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999954065006257	WITHOUT_CLASSIFICATION	4.593499374296282E-5	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9985589178403027	WITHOUT_CLASSIFICATION	0.0014410821596973155	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999920374192721	WITHOUT_CLASSIFICATION	7.962580727792676E-6	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9999499813650371	WITHOUT_CLASSIFICATION	5.001863496289456E-5	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999134730593829	WITHOUT_CLASSIFICATION	8.652694061700503E-5	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9984526101271634	WITHOUT_CLASSIFICATION	0.001547389872836649	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999674544180065	WITHOUT_CLASSIFICATION	3.2545581993504395E-5	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999997448765816	WITHOUT_CLASSIFICATION	2.551234184023476E-6	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999992484329663	WITHOUT_CLASSIFICATION	7.515670336913181E-7	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9998324333930605	WITHOUT_CLASSIFICATION	1.6756660693947656E-4	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999605204994774	WITHOUT_CLASSIFICATION	3.9479500522670754E-5	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999775340144424	WITHOUT_CLASSIFICATION	2.2465985557582643E-5	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999162127712762	WITHOUT_CLASSIFICATION	8.378722872393218E-5	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999986732013358	WITHOUT_CLASSIFICATION	1.3267986642160613E-5	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999986732013358	WITHOUT_CLASSIFICATION	1.3267986642160613E-5	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9988337831252649	WITHOUT_CLASSIFICATION	0.0011662168747350991	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999898516389178	WITHOUT_CLASSIFICATION	1.0148361082130604E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999619168927997	WITHOUT_CLASSIFICATION	3.80831072003534E-5	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999902334938453	WITHOUT_CLASSIFICATION	9.766506154725948E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999966566318664	WITHOUT_CLASSIFICATION	3.3433681336491724E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999966566318664	WITHOUT_CLASSIFICATION	3.3433681336491724E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999930436307386	WITHOUT_CLASSIFICATION	6.956369261454619E-6	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999899690554958	WITHOUT_CLASSIFICATION	1.0030944504138572E-5	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9994983051036592	WITHOUT_CLASSIFICATION	5.016948963408126E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998939678676988	WITHOUT_CLASSIFICATION	1.0603213230119313E-4	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9998899898071572	WITHOUT_CLASSIFICATION	1.1001019284288829E-4	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999826241428145	WITHOUT_CLASSIFICATION	1.7375857185453876E-5	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999994708005277	WITHOUT_CLASSIFICATION	5.291994723010009E-6	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9997070693756528	WITHOUT_CLASSIFICATION	2.929306243471702E-4	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9998969631474444	WITHOUT_CLASSIFICATION	1.0303685255568986E-4	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9998345793968219	WITHOUT_CLASSIFICATION	1.6542060317820207E-4	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999724815240044	WITHOUT_CLASSIFICATION	2.751847599559986E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999118227921854	WITHOUT_CLASSIFICATION	8.817720781456226E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999118227921854	WITHOUT_CLASSIFICATION	8.817720781456226E-5	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9997335669556522	WITHOUT_CLASSIFICATION	2.6643304434774407E-4	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999925211470774	WITHOUT_CLASSIFICATION	7.478852922671705E-6	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999931007929571	WITHOUT_CLASSIFICATION	6.899207042925157E-6	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999824599408933	WITHOUT_CLASSIFICATION	1.754005910664764E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999837338986804	WITHOUT_CLASSIFICATION	1.6266101319602003E-5	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998730755440554	WITHOUT_CLASSIFICATION	1.2692445594455738E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999628084783958	WITHOUT_CLASSIFICATION	3.7191521604278626E-5	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999838947452055	WITHOUT_CLASSIFICATION	1.610525479443306E-5	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999055693288166	WITHOUT_CLASSIFICATION	9.443067118341598E-5	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999328564247846	WITHOUT_CLASSIFICATION	6.714357521547203E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9819536384005089	WITHOUT_CLASSIFICATION	0.018046361599491138	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999938584741209	WITHOUT_CLASSIFICATION	6.141525879047963E-6	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9986656085340384	WITHOUT_CLASSIFICATION	0.0013343914659615836	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999962731691739	WITHOUT_CLASSIFICATION	3.726830826071339E-6	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9999043339774504	WITHOUT_CLASSIFICATION	9.566602254962103E-5	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999130735513015	WITHOUT_CLASSIFICATION	8.692644869842844E-5	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9998932687528952	WITHOUT_CLASSIFICATION	1.0673124710478853E-4	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999062898128598	WITHOUT_CLASSIFICATION	9.371018714022544E-5	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999942616718349	WITHOUT_CLASSIFICATION	5.73832816512245E-6	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999011268864815	WITHOUT_CLASSIFICATION	9.887311351852576E-5	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.99889900257131	WITHOUT_CLASSIFICATION	0.0011009974286899382	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.99889900257131	WITHOUT_CLASSIFICATION	0.0011009974286899382	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998460123401277	WITHOUT_CLASSIFICATION	1.539876598722469E-4	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999995811209366	WITHOUT_CLASSIFICATION	4.188790633677844E-7	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999957370916815	WITHOUT_CLASSIFICATION	4.2629083183905205E-6	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999922707114535	WITHOUT_CLASSIFICATION	7.729288546495817E-5	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.999996524664632	WITHOUT_CLASSIFICATION	3.4753353679903294E-6	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9996469162114626	WITHOUT_CLASSIFICATION	3.5308378853747373E-4	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998700595569168	WITHOUT_CLASSIFICATION	1.299404430832823E-4	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9998076491007148	WITHOUT_CLASSIFICATION	1.9235089928516338E-4	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999799896566335	WITHOUT_CLASSIFICATION	2.001034336650224E-5	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998642314295331	WITHOUT_CLASSIFICATION	1.3576857046689438E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999353887129245	WITHOUT_CLASSIFICATION	6.461128707544596E-5	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999311178417837	WITHOUT_CLASSIFICATION	6.888215821627019E-5	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999900552829409	WITHOUT_CLASSIFICATION	9.94471705905174E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999904503493847	WITHOUT_CLASSIFICATION	9.549650615199053E-6	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999890511622701	WITHOUT_CLASSIFICATION	1.0948837729880803E-5	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999786696950285	WITHOUT_CLASSIFICATION	2.133030497147905E-5	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9989016365008763	WITHOUT_CLASSIFICATION	0.001098363499123726	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999540475397185	WITHOUT_CLASSIFICATION	4.5952460281593686E-5	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9992297642509822	WITHOUT_CLASSIFICATION	7.702357490178152E-4	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9689867459651972	WITHOUT_CLASSIFICATION	0.031013254034802783	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9998341584805084	WITHOUT_CLASSIFICATION	1.6584151949164465E-4	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999997374239515	WITHOUT_CLASSIFICATION	2.625760484540931E-7	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999354590196573	WITHOUT_CLASSIFICATION	6.454098034265226E-5	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999995167169888	WITHOUT_CLASSIFICATION	4.832830111612724E-7	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999898701746476	WITHOUT_CLASSIFICATION	1.0129825352360369E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999898701746476	WITHOUT_CLASSIFICATION	1.0129825352360369E-5	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999829916881215	WITHOUT_CLASSIFICATION	1.700831187850598E-5	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999587047551789	WITHOUT_CLASSIFICATION	4.1295244821232985E-5	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999428411005767	WITHOUT_CLASSIFICATION	5.715889942315369E-5	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.99994976362783	WITHOUT_CLASSIFICATION	5.0236372170148796E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999788090983778	WITHOUT_CLASSIFICATION	2.1190901622243976E-5	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9835617961800813	WITHOUT_CLASSIFICATION	0.016438203819918697	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9955017658438703	WITHOUT_CLASSIFICATION	0.004498234156129773	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9998672641499616	WITHOUT_CLASSIFICATION	1.3273585003829592E-4	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.8250282525903494	DEFECT	0.17497174740965066	WITHOUT_CLASSIFICATION
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.9006732193342579	WITHOUT_CLASSIFICATION	0.09932678066574208	DEFECT
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9995865004716079	WITHOUT_CLASSIFICATION	4.1349952839206204E-4	DEFECT
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9993899591383545	WITHOUT_CLASSIFICATION	6.10040861645533E-4	DEFECT
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.9999898191219476	WITHOUT_CLASSIFICATION	1.0180878052257544E-5	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.9989735959817124	WITHOUT_CLASSIFICATION	0.001026404018287666	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.8878243862851178	DEFECT	0.11217561371488213	WITHOUT_CLASSIFICATION
TODO : should this be an error?	DEFECT	0.5152428088773882	DEFECT	0.48475719112261184	WITHOUT_CLASSIFICATION
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.8449787878326573	WITHOUT_CLASSIFICATION	0.15502121216734263	DEFECT
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.9038366513700091	DEFECT	0.09616334862999089	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.858819973852514	WITHOUT_CLASSIFICATION	0.141180026147486	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.858819973852514	WITHOUT_CLASSIFICATION	0.141180026147486	DEFECT
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9829537269873319	WITHOUT_CLASSIFICATION	0.01704627301266812	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999006407314293	WITHOUT_CLASSIFICATION	9.935926857077E-5	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9173710516384013	DEFECT	0.08262894836159883	WITHOUT_CLASSIFICATION
this call is side-effecty	DEFECT	0.9995919102305674	WITHOUT_CLASSIFICATION	4.0808976943260795E-4	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.9648399326804218	DEFECT	0.035160067319578305	WITHOUT_CLASSIFICATION
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.7052236691358288	WITHOUT_CLASSIFICATION	0.2947763308641712	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.9124649511745566	WITHOUT_CLASSIFICATION	0.08753504882544334	DEFECT
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.963869054945388	WITHOUT_CLASSIFICATION	0.036130945054612	DEFECT
TODO: is this completely correct?	DEFECT	0.5847045278745324	WITHOUT_CLASSIFICATION	0.4152954721254676	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.8067706822127065	WITHOUT_CLASSIFICATION	0.19322931778729344	DEFECT
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.8721999654716586	WITHOUT_CLASSIFICATION	0.1278000345283414	DEFECT
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9498030136830703	WITHOUT_CLASSIFICATION	0.05019698631692969	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.5261966091664405	WITHOUT_CLASSIFICATION	0.47380339083355943	DEFECT
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.9999991033600065	DEFECT	8.966399933618069E-7	WITHOUT_CLASSIFICATION
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.6710353902560117	DEFECT	0.3289646097439884	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.9830109576167417	DEFECT	0.016989042383258254	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.8890291025931775	DEFECT	0.11097089740682252	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.8808365347581366	DEFECT	0.11916346524186337	WITHOUT_CLASSIFICATION
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.569081939265657	DEFECT	0.43091806073434313	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.858819973852514	WITHOUT_CLASSIFICATION	0.141180026147486	DEFECT
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9807770696891606	DEFECT	0.019222930310839464	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.8897432039406492	DEFECT	0.11025679605935085	WITHOUT_CLASSIFICATION
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.9517509146763687	WITHOUT_CLASSIFICATION	0.048249085323631175	DEFECT
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9999087640461036	WITHOUT_CLASSIFICATION	9.123595389635583E-5	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.9917731690118647	WITHOUT_CLASSIFICATION	0.008226830988135318	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.989805179394989	WITHOUT_CLASSIFICATION	0.01019482060501099	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9974178270385875	WITHOUT_CLASSIFICATION	0.002582172961412522	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.6488893977532518	DEFECT	0.3511106022467481	WITHOUT_CLASSIFICATION
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.5460208603732171	WITHOUT_CLASSIFICATION	0.4539791396267829	DEFECT
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.9700761272359966	WITHOUT_CLASSIFICATION	0.029923872764003313	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.7762069449344463	WITHOUT_CLASSIFICATION	0.2237930550655536	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.7244694646396833	WITHOUT_CLASSIFICATION	0.27553053536031674	DEFECT
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9948965724222487	WITHOUT_CLASSIFICATION	0.005103427577751301	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.9996316642069689	WITHOUT_CLASSIFICATION	3.6833579303116636E-4	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.6073752100881913	WITHOUT_CLASSIFICATION	0.3926247899118086	DEFECT
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.7761377791850195	DEFECT	0.22386222081498058	WITHOUT_CLASSIFICATION
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.9999869530550819	DEFECT	1.304694491802304E-5	WITHOUT_CLASSIFICATION
