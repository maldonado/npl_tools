test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999641946670691	WITHOUT_CLASSIFICATION	3.5805332930922015E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.999993934157448	WITHOUT_CLASSIFICATION	6.065842552046718E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.999993934157448	WITHOUT_CLASSIFICATION	6.065842552046718E-6	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9993026988100675	WITHOUT_CLASSIFICATION	6.973011899323719E-4	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999370423240109	WITHOUT_CLASSIFICATION	6.29576759891181E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.999936828393475	WITHOUT_CLASSIFICATION	6.317160652500585E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.999936828393475	WITHOUT_CLASSIFICATION	6.317160652500585E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999940206650035	WITHOUT_CLASSIFICATION	5.97933499656109E-6	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998755274346631	WITHOUT_CLASSIFICATION	1.2447256533686866E-4	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999621101636696	WITHOUT_CLASSIFICATION	3.78898363303889E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999122026937483	WITHOUT_CLASSIFICATION	8.779730625174423E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999931916046061	WITHOUT_CLASSIFICATION	6.808395393930756E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999931916046061	WITHOUT_CLASSIFICATION	6.808395393930756E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.999993570596309	WITHOUT_CLASSIFICATION	6.429403690921422E-6	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999435575656972	WITHOUT_CLASSIFICATION	5.6442434302679465E-5	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.9999270636023961	WITHOUT_CLASSIFICATION	7.29363976038969E-5	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999464219369725	WITHOUT_CLASSIFICATION	5.3578063027579535E-5	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999783077390019	WITHOUT_CLASSIFICATION	2.1692260998165278E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999861445567629	WITHOUT_CLASSIFICATION	1.3855443237019589E-5	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.9999864475894732	WITHOUT_CLASSIFICATION	1.3552410526765124E-5	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999247337121543	WITHOUT_CLASSIFICATION	7.526628784570315E-5	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9998774516784698	WITHOUT_CLASSIFICATION	1.2254832153025988E-4	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999415674088051	WITHOUT_CLASSIFICATION	5.843259119499855E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999860390384661	WITHOUT_CLASSIFICATION	1.396096153403089E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999860390384661	WITHOUT_CLASSIFICATION	1.396096153403089E-5	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9996297705543579	WITHOUT_CLASSIFICATION	3.702294456421058E-4	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999883311584934	WITHOUT_CLASSIFICATION	1.1668841506690763E-5	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999544922080187	WITHOUT_CLASSIFICATION	4.5507791981217955E-5	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999378049892843	WITHOUT_CLASSIFICATION	6.219501071569103E-5	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9962003470333841	WITHOUT_CLASSIFICATION	0.0037996529666158908	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.999998925510824	WITHOUT_CLASSIFICATION	1.074489175944518E-6	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9997632978592269	WITHOUT_CLASSIFICATION	2.3670214077303343E-4	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999771383766228	WITHOUT_CLASSIFICATION	2.2861623377171213E-5	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9996018404723966	WITHOUT_CLASSIFICATION	3.981595276033452E-4	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.99995830275179	WITHOUT_CLASSIFICATION	4.169724821003533E-5	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9997334736776652	WITHOUT_CLASSIFICATION	2.6652632233489657E-4	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999648711178604	WITHOUT_CLASSIFICATION	3.512888213956375E-5	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999344962988729	WITHOUT_CLASSIFICATION	6.550370112719077E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999004875552759	WITHOUT_CLASSIFICATION	9.951244472396518E-5	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999188989661068	WITHOUT_CLASSIFICATION	8.110103389332027E-5	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998127797602571	WITHOUT_CLASSIFICATION	1.8722023974289653E-4	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998163401915164	WITHOUT_CLASSIFICATION	1.8365980848365524E-4	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9994884213434585	WITHOUT_CLASSIFICATION	5.115786565414755E-4	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999561262407874	WITHOUT_CLASSIFICATION	4.387375921249058E-5	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.8238300633491513	WITHOUT_CLASSIFICATION	0.1761699366508486	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999869145186471	WITHOUT_CLASSIFICATION	1.3085481352868205E-5	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999869145186471	WITHOUT_CLASSIFICATION	1.3085481352868205E-5	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999561262407874	WITHOUT_CLASSIFICATION	4.387375921249058E-5	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9995814499540472	WITHOUT_CLASSIFICATION	4.1855004595281025E-4	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998552642079641	WITHOUT_CLASSIFICATION	1.4473579203588014E-4	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997995958366247	WITHOUT_CLASSIFICATION	2.0040416337544683E-4	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999893891432291	WITHOUT_CLASSIFICATION	1.0610856770972143E-5	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999997427755704	WITHOUT_CLASSIFICATION	2.572244296417991E-7	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9952050866578206	WITHOUT_CLASSIFICATION	0.0047949133421794615	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9994307908855954	WITHOUT_CLASSIFICATION	5.692091144046532E-4	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999730311756946	WITHOUT_CLASSIFICATION	2.696882430540831E-5	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9998436882035525	WITHOUT_CLASSIFICATION	1.5631179644748288E-4	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9997959331294376	WITHOUT_CLASSIFICATION	2.0406687056243787E-4	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999869145186471	WITHOUT_CLASSIFICATION	1.3085481352868205E-5	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999852327914175	WITHOUT_CLASSIFICATION	1.4767208582525227E-5	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9988875228555859	WITHOUT_CLASSIFICATION	0.001112477144414143	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9986544093598815	WITHOUT_CLASSIFICATION	0.001345590640118548	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9986835756993584	WITHOUT_CLASSIFICATION	0.0013164243006416766	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999575733541725	WITHOUT_CLASSIFICATION	4.242664582753903E-5	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9995129653639657	WITHOUT_CLASSIFICATION	4.8703463603434765E-4	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999453809969971	WITHOUT_CLASSIFICATION	5.461900300291932E-5	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999582919199029	WITHOUT_CLASSIFICATION	4.1708080097163597E-5	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999712328322242	WITHOUT_CLASSIFICATION	2.876716777577139E-5	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999998465322004	WITHOUT_CLASSIFICATION	1.5346779958159926E-7	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999575954343698	WITHOUT_CLASSIFICATION	4.2404565630101665E-5	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998352559302489	WITHOUT_CLASSIFICATION	1.6474406975120243E-4	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9976918373368913	WITHOUT_CLASSIFICATION	0.002308162663108739	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.999902354696259	WITHOUT_CLASSIFICATION	9.764530374107203E-5	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999066071205948	WITHOUT_CLASSIFICATION	9.339287940517985E-5	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999936324076082	WITHOUT_CLASSIFICATION	6.36759239186621E-6	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9995376790126587	WITHOUT_CLASSIFICATION	4.6232098734121243E-4	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999977568822193	WITHOUT_CLASSIFICATION	2.2431177806986747E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999981994157339	WITHOUT_CLASSIFICATION	1.8005842661501991E-6	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999893413202666	WITHOUT_CLASSIFICATION	1.065867973342123E-5	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999670057627268	WITHOUT_CLASSIFICATION	3.299423727326621E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996334408124941	WITHOUT_CLASSIFICATION	3.665591875060249E-4	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998468083722443	WITHOUT_CLASSIFICATION	1.5319162775582234E-4	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999193652514147	WITHOUT_CLASSIFICATION	8.063474858528031E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996334408124941	WITHOUT_CLASSIFICATION	3.665591875060249E-4	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9997836822059025	WITHOUT_CLASSIFICATION	2.1631779409739426E-4	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9997510604147624	WITHOUT_CLASSIFICATION	2.4893958523769337E-4	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.999989129706151	WITHOUT_CLASSIFICATION	1.0870293848989564E-5	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.9999582514360621	WITHOUT_CLASSIFICATION	4.174856393797854E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999850545153502	WITHOUT_CLASSIFICATION	1.4945484649838579E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999850545153502	WITHOUT_CLASSIFICATION	1.4945484649838579E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999882180986885	WITHOUT_CLASSIFICATION	1.1781901311505313E-4	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999993154959341	WITHOUT_CLASSIFICATION	6.845040658998585E-7	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9998731328593624	WITHOUT_CLASSIFICATION	1.268671406376414E-4	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999920777392409	WITHOUT_CLASSIFICATION	7.92226075900848E-6	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999453252309259	WITHOUT_CLASSIFICATION	5.467476907408793E-5	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999911828560745	WITHOUT_CLASSIFICATION	8.81714392553511E-6	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999422179155766	WITHOUT_CLASSIFICATION	5.778208442352542E-5	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9999773498985715	WITHOUT_CLASSIFICATION	2.2650101428494284E-5	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999566066473874	WITHOUT_CLASSIFICATION	4.3393352612569666E-5	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999516231276644	WITHOUT_CLASSIFICATION	4.837687233555937E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999946388271662	WITHOUT_CLASSIFICATION	5.361172833756724E-6	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999946388271662	WITHOUT_CLASSIFICATION	5.361172833756724E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998946529408916	WITHOUT_CLASSIFICATION	1.0534705910837807E-4	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998145252735617	WITHOUT_CLASSIFICATION	1.8547472643818923E-4	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998960189491597	WITHOUT_CLASSIFICATION	1.0398105084034804E-4	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999946388271662	WITHOUT_CLASSIFICATION	5.361172833756724E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998946529408916	WITHOUT_CLASSIFICATION	1.0534705910837807E-4	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998946529408916	WITHOUT_CLASSIFICATION	1.0534705910837807E-4	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999234846184504	WITHOUT_CLASSIFICATION	7.651538154954537E-5	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999276085685943	WITHOUT_CLASSIFICATION	7.239143140568142E-5	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999759357976362	WITHOUT_CLASSIFICATION	2.4064202363730816E-5	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999870661777828	WITHOUT_CLASSIFICATION	1.2933822217237835E-5	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9997126533318081	WITHOUT_CLASSIFICATION	2.873466681917682E-4	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9997126533318081	WITHOUT_CLASSIFICATION	2.873466681917682E-4	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998526529112982	WITHOUT_CLASSIFICATION	1.4734708870170826E-4	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998819195087736	WITHOUT_CLASSIFICATION	1.180804912264569E-4	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999390979300491	WITHOUT_CLASSIFICATION	6.090206995093565E-5	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998920096259746	WITHOUT_CLASSIFICATION	1.0799037402550587E-4	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998920096259746	WITHOUT_CLASSIFICATION	1.0799037402550587E-4	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9997791298529823	WITHOUT_CLASSIFICATION	2.208701470176475E-4	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9994830967702271	WITHOUT_CLASSIFICATION	5.169032297729724E-4	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9993652468046124	WITHOUT_CLASSIFICATION	6.347531953875788E-4	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9997210232816781	WITHOUT_CLASSIFICATION	2.7897671832191384E-4	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999816747610566	WITHOUT_CLASSIFICATION	1.8325238943368382E-5	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998914053034137	WITHOUT_CLASSIFICATION	1.0859469658629275E-4	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998820454182608	WITHOUT_CLASSIFICATION	1.1795458173926817E-4	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.99998250263246	WITHOUT_CLASSIFICATION	1.7497367539914985E-5	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9993652468046124	WITHOUT_CLASSIFICATION	6.347531953875788E-4	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999830657267096	WITHOUT_CLASSIFICATION	1.6934273290400707E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999553472158424	WITHOUT_CLASSIFICATION	4.46527841575195E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999553472158424	WITHOUT_CLASSIFICATION	4.46527841575195E-5	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999971160367822	WITHOUT_CLASSIFICATION	2.8839632177318057E-6	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9997716451134503	WITHOUT_CLASSIFICATION	2.283548865497421E-4	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999492067566551	WITHOUT_CLASSIFICATION	5.079324334497373E-5	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9996663805105461	WITHOUT_CLASSIFICATION	3.3361948945389495E-4	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999628010285929	WITHOUT_CLASSIFICATION	3.719897140710963E-4	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999826976006148	WITHOUT_CLASSIFICATION	1.730239938519982E-5	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.9999837105483451	WITHOUT_CLASSIFICATION	1.6289451654854764E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.999791505053761	WITHOUT_CLASSIFICATION	2.0849494623903622E-4	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999870106087972	WITHOUT_CLASSIFICATION	1.29893912027625E-5	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999756092348638	WITHOUT_CLASSIFICATION	2.4390765136241256E-5	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999756092348638	WITHOUT_CLASSIFICATION	2.4390765136241256E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999651559844586	WITHOUT_CLASSIFICATION	3.484401554149812E-5	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999641946670691	WITHOUT_CLASSIFICATION	3.5805332930922015E-5	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999812738273998	WITHOUT_CLASSIFICATION	1.872617260018526E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
return	WITHOUT_CLASSIFICATION	0.999993934157448	WITHOUT_CLASSIFICATION	6.065842552046718E-6	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9998553680495463	WITHOUT_CLASSIFICATION	1.4463195045362663E-4	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9998887173137917	WITHOUT_CLASSIFICATION	1.1128268620833719E-4	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999148744053842	WITHOUT_CLASSIFICATION	8.51255946158512E-5	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9997115861153304	WITHOUT_CLASSIFICATION	2.884138846696762E-4	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9993858111377736	WITHOUT_CLASSIFICATION	6.141888622264302E-4	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999887987123893	WITHOUT_CLASSIFICATION	1.1201287610608669E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999860785580206	WITHOUT_CLASSIFICATION	1.392144197946805E-5	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999093645656388	WITHOUT_CLASSIFICATION	9.063543436111038E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9997115861153304	WITHOUT_CLASSIFICATION	2.884138846696762E-4	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9978120056423042	WITHOUT_CLASSIFICATION	0.0021879943576958265	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9994163068739546	WITHOUT_CLASSIFICATION	5.836931260453789E-4	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999171787684044	WITHOUT_CLASSIFICATION	8.282123159562402E-5	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999145527292385	WITHOUT_CLASSIFICATION	8.544727076159795E-5	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9997476815999303	WITHOUT_CLASSIFICATION	2.523184000697092E-4	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.999936828393475	WITHOUT_CLASSIFICATION	6.317160652500585E-5	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9996820928971084	WITHOUT_CLASSIFICATION	3.1790710289154693E-4	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999931934596058	WITHOUT_CLASSIFICATION	6.806540394198087E-6	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9998930306139512	WITHOUT_CLASSIFICATION	1.0696938604874995E-4	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9998030385292027	WITHOUT_CLASSIFICATION	1.9696147079730807E-4	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999860139260721	WITHOUT_CLASSIFICATION	1.3986073927978327E-5	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999139499773585	WITHOUT_CLASSIFICATION	8.605002264149379E-5	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999398728645346	WITHOUT_CLASSIFICATION	6.012713546550084E-5	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.9990558052844735	WITHOUT_CLASSIFICATION	9.441947155266456E-4	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9994211064329872	WITHOUT_CLASSIFICATION	5.788935670128773E-4	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.9999232952680874	WITHOUT_CLASSIFICATION	7.670473191254198E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.999993934157448	WITHOUT_CLASSIFICATION	6.065842552046718E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.999993934157448	WITHOUT_CLASSIFICATION	6.065842552046718E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999860785580206	WITHOUT_CLASSIFICATION	1.392144197946805E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999860139260721	WITHOUT_CLASSIFICATION	1.3986073927978327E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999940206650035	WITHOUT_CLASSIFICATION	5.97933499656109E-6	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9998072088553523	WITHOUT_CLASSIFICATION	1.9279114464768792E-4	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.999921522234048	WITHOUT_CLASSIFICATION	7.847776595204491E-5	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.99967246442415	WITHOUT_CLASSIFICATION	3.2753557584997664E-4	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.9999864788570044	WITHOUT_CLASSIFICATION	1.3521142995563502E-5	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9968999173879998	WITHOUT_CLASSIFICATION	0.003100082612000249	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9999862615173142	WITHOUT_CLASSIFICATION	1.3738482685773527E-5	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9999277833443929	WITHOUT_CLASSIFICATION	7.22166556071651E-5	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9995538207985202	WITHOUT_CLASSIFICATION	4.461792014798266E-4	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9995538207985202	WITHOUT_CLASSIFICATION	4.461792014798266E-4	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999971847412427	WITHOUT_CLASSIFICATION	2.815258757311466E-6	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999794812344994	WITHOUT_CLASSIFICATION	2.051876550058743E-5	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9998674983573349	WITHOUT_CLASSIFICATION	1.3250164266502697E-4	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9998879782195007	WITHOUT_CLASSIFICATION	1.120217804992148E-4	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999960734778679	WITHOUT_CLASSIFICATION	3.9265221321747605E-6	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.9999600736477444	WITHOUT_CLASSIFICATION	3.992635225551303E-5	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9999888890017169	WITHOUT_CLASSIFICATION	1.1110998283074102E-5	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998755274346631	WITHOUT_CLASSIFICATION	1.2447256533686866E-4	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999535818681349	WITHOUT_CLASSIFICATION	4.641813186506181E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999535818681349	WITHOUT_CLASSIFICATION	4.641813186506181E-5	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.9998929317900367	WITHOUT_CLASSIFICATION	1.0706820996333005E-4	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999821972677112	WITHOUT_CLASSIFICATION	1.7802732288787832E-5	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9998929317900367	WITHOUT_CLASSIFICATION	1.0706820996333005E-4	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9998942148658858	WITHOUT_CLASSIFICATION	1.0578513411420362E-4	DEFECT
int	WITHOUT_CLASSIFICATION	0.9999143922694783	WITHOUT_CLASSIFICATION	8.560773052169702E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.999993934157448	WITHOUT_CLASSIFICATION	6.065842552046718E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999860785580206	WITHOUT_CLASSIFICATION	1.392144197946805E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999860139260721	WITHOUT_CLASSIFICATION	1.3986073927978327E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999860139260721	WITHOUT_CLASSIFICATION	1.3986073927978327E-5	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.9999939664444615	WITHOUT_CLASSIFICATION	6.033555538506211E-6	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999639584592357	WITHOUT_CLASSIFICATION	3.6041540764271404E-5	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.999959381946891	WITHOUT_CLASSIFICATION	4.061805310908591E-5	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999122026937483	WITHOUT_CLASSIFICATION	8.779730625174423E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999122026937483	WITHOUT_CLASSIFICATION	8.779730625174423E-5	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9999462587418974	WITHOUT_CLASSIFICATION	5.374125810273154E-5	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999474666128232	WITHOUT_CLASSIFICATION	5.253338717671316E-5	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.9999907686687394	WITHOUT_CLASSIFICATION	9.231331260636684E-6	DEFECT
byte	WITHOUT_CLASSIFICATION	0.9999881663160942	WITHOUT_CLASSIFICATION	1.1833683905656709E-5	DEFECT
char	WITHOUT_CLASSIFICATION	0.9999897687865814	WITHOUT_CLASSIFICATION	1.023121341861285E-5	DEFECT
short	WITHOUT_CLASSIFICATION	0.9999867727592654	WITHOUT_CLASSIFICATION	1.3227240734545793E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999931916046061	WITHOUT_CLASSIFICATION	6.808395393930756E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999863372798276	WITHOUT_CLASSIFICATION	1.3662720172479834E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999863372798276	WITHOUT_CLASSIFICATION	1.3662720172479834E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.999993570596309	WITHOUT_CLASSIFICATION	6.429403690921422E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.999993570596309	WITHOUT_CLASSIFICATION	6.429403690921422E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9998621946645159	WITHOUT_CLASSIFICATION	1.3780533548411584E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9998621946645159	WITHOUT_CLASSIFICATION	1.3780533548411584E-4	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998544865580058	WITHOUT_CLASSIFICATION	1.4551344199410297E-4	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998544865580058	WITHOUT_CLASSIFICATION	1.4551344199410297E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999122026937483	WITHOUT_CLASSIFICATION	8.779730625174423E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999931916046061	WITHOUT_CLASSIFICATION	6.808395393930756E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999863372798276	WITHOUT_CLASSIFICATION	1.3662720172479834E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999863372798276	WITHOUT_CLASSIFICATION	1.3662720172479834E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.999993570596309	WITHOUT_CLASSIFICATION	6.429403690921422E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9998621946645159	WITHOUT_CLASSIFICATION	1.3780533548411584E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9998621946645159	WITHOUT_CLASSIFICATION	1.3780533548411584E-4	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998544865580058	WITHOUT_CLASSIFICATION	1.4551344199410297E-4	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999458728293449	WITHOUT_CLASSIFICATION	5.412717065518617E-5	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998854213423245	WITHOUT_CLASSIFICATION	1.1457865767555982E-4	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.9999377804404247	WITHOUT_CLASSIFICATION	6.221955957523136E-5	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999965685614447	WITHOUT_CLASSIFICATION	3.431438555291286E-5	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9999337653917988	WITHOUT_CLASSIFICATION	6.623460820117091E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999986238837336	WITHOUT_CLASSIFICATION	1.3761162664092515E-5	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9971698743416129	WITHOUT_CLASSIFICATION	0.0028301256583872043	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9989689801122822	WITHOUT_CLASSIFICATION	0.001031019887717829	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999223947931541	WITHOUT_CLASSIFICATION	7.760520684588942E-5	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999920639584736	WITHOUT_CLASSIFICATION	7.936041526409174E-6	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998676731507663	WITHOUT_CLASSIFICATION	1.3232684923365382E-4	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999406229929331	WITHOUT_CLASSIFICATION	5.937700706698819E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999882180986885	WITHOUT_CLASSIFICATION	1.1781901311505313E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999986238837336	WITHOUT_CLASSIFICATION	1.3761162664092515E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999986238837336	WITHOUT_CLASSIFICATION	1.3761162664092515E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999986238837336	WITHOUT_CLASSIFICATION	1.3761162664092515E-5	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9990432103952163	WITHOUT_CLASSIFICATION	9.56789604783748E-4	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999646570328291	WITHOUT_CLASSIFICATION	3.534296717086778E-5	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999646570328291	WITHOUT_CLASSIFICATION	3.534296717086778E-5	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9995154703527664	WITHOUT_CLASSIFICATION	4.845296472336115E-4	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999971004470701	WITHOUT_CLASSIFICATION	2.899552929912015E-5	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9988563704730175	WITHOUT_CLASSIFICATION	0.0011436295269824858	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9990985601350371	WITHOUT_CLASSIFICATION	9.014398649630273E-4	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9990985601350371	WITHOUT_CLASSIFICATION	9.014398649630273E-4	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999783077390019	WITHOUT_CLASSIFICATION	2.1692260998165278E-5	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997351302700129	WITHOUT_CLASSIFICATION	2.6486972998700497E-4	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997351302700129	WITHOUT_CLASSIFICATION	2.6486972998700497E-4	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998968735694884	WITHOUT_CLASSIFICATION	1.031264305115933E-4	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999050847508906	WITHOUT_CLASSIFICATION	9.491524910940501E-5	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999415674088051	WITHOUT_CLASSIFICATION	5.843259119499855E-5	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.9999885716552115	WITHOUT_CLASSIFICATION	1.1428344788597112E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999861445567629	WITHOUT_CLASSIFICATION	1.3855443237019589E-5	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9914502269208821	WITHOUT_CLASSIFICATION	0.008549773079117876	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9999861318218127	WITHOUT_CLASSIFICATION	1.3868178187339124E-5	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999073961075118	WITHOUT_CLASSIFICATION	9.260389248832457E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999625214999913	WITHOUT_CLASSIFICATION	3.747850000864823E-5	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999616412416302	WITHOUT_CLASSIFICATION	3.835875836974863E-5	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999554224989831	WITHOUT_CLASSIFICATION	4.457750101700116E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999378049892843	WITHOUT_CLASSIFICATION	6.219501071569103E-5	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999939521242159	WITHOUT_CLASSIFICATION	6.047875784048904E-6	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9998819234391049	WITHOUT_CLASSIFICATION	1.1807656089518625E-4	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9999869359065666	WITHOUT_CLASSIFICATION	1.3064093433451477E-5	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.999986040210904	WITHOUT_CLASSIFICATION	1.3959789096068367E-5	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9998881927211916	WITHOUT_CLASSIFICATION	1.1180727880839973E-4	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999922080233301	WITHOUT_CLASSIFICATION	7.791976669985848E-6	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999415674088051	WITHOUT_CLASSIFICATION	5.843259119499855E-5	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999794969257972	WITHOUT_CLASSIFICATION	2.050307420278454E-5	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9999058873250272	WITHOUT_CLASSIFICATION	9.411267497277098E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999867796747631	WITHOUT_CLASSIFICATION	1.3220325236883644E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999861445567629	WITHOUT_CLASSIFICATION	1.3855443237019589E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999922080233301	WITHOUT_CLASSIFICATION	7.791976669985848E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999794969257972	WITHOUT_CLASSIFICATION	2.050307420278454E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999867796747631	WITHOUT_CLASSIFICATION	1.3220325236883644E-5	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9996129088387409	WITHOUT_CLASSIFICATION	3.8709116125908106E-4	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.9999860121680022	WITHOUT_CLASSIFICATION	1.39878319977107E-5	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9996129088387409	WITHOUT_CLASSIFICATION	3.8709116125908106E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999860390384661	WITHOUT_CLASSIFICATION	1.396096153403089E-5	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
column index	WITHOUT_CLASSIFICATION	0.9998966664135375	WITHOUT_CLASSIFICATION	1.0333358646254134E-4	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.9999314015071943	WITHOUT_CLASSIFICATION	6.859849280574104E-5	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999830670505542	WITHOUT_CLASSIFICATION	1.693294944576117E-5	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.999997750208581	WITHOUT_CLASSIFICATION	2.2497914189681646E-6	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999713789124627	WITHOUT_CLASSIFICATION	2.8621087537245264E-5	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999767643167777	WITHOUT_CLASSIFICATION	2.3235683222233912E-5	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9995785573087609	WITHOUT_CLASSIFICATION	4.2144269123914796E-4	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999535443914466	WITHOUT_CLASSIFICATION	4.6455608553510184E-5	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999767643167777	WITHOUT_CLASSIFICATION	2.3235683222233912E-5	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999883311584934	WITHOUT_CLASSIFICATION	1.1668841506690763E-5	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9997355247853686	WITHOUT_CLASSIFICATION	2.644752146312617E-4	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999922080233301	WITHOUT_CLASSIFICATION	7.791976669985848E-6	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998555826909367	WITHOUT_CLASSIFICATION	1.4441730906324668E-4	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.9998941017563685	WITHOUT_CLASSIFICATION	1.0589824363156443E-4	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9987760806216376	WITHOUT_CLASSIFICATION	0.0012239193783624735	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9998297407079972	WITHOUT_CLASSIFICATION	1.7025929200289061E-4	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9998710705941865	WITHOUT_CLASSIFICATION	1.2892940581349163E-4	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999913579279615	WITHOUT_CLASSIFICATION	8.642072038522167E-6	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998488640444567	WITHOUT_CLASSIFICATION	1.511359555433097E-4	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.999921064677218	WITHOUT_CLASSIFICATION	7.893532278208306E-5	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.9999860453460563	WITHOUT_CLASSIFICATION	1.3954653943740854E-5	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998751345259878	WITHOUT_CLASSIFICATION	1.248654740122466E-4	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999019701541477	WITHOUT_CLASSIFICATION	9.80298458523304E-5	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9993280566100884	WITHOUT_CLASSIFICATION	6.719433899115826E-4	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999378049892843	WITHOUT_CLASSIFICATION	6.219501071569103E-5	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9999225861527745	WITHOUT_CLASSIFICATION	7.741384722551102E-5	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998298066402199	WITHOUT_CLASSIFICATION	1.7019335978001686E-4	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9999553376922861	WITHOUT_CLASSIFICATION	4.466230771385476E-5	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999074706350312	WITHOUT_CLASSIFICATION	9.252936496886193E-5	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9999077362489664	WITHOUT_CLASSIFICATION	9.226375103355998E-5	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999235616834324	WITHOUT_CLASSIFICATION	7.643831656754877E-5	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999454803298	WITHOUT_CLASSIFICATION	5.45196702107692E-7	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999650898330427	WITHOUT_CLASSIFICATION	3.491016695739802E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999672342383928	WITHOUT_CLASSIFICATION	3.2765761607113214E-5	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999079683500889	WITHOUT_CLASSIFICATION	9.203164991110603E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.99994758546583	WITHOUT_CLASSIFICATION	5.2414534169945835E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.99994758546583	WITHOUT_CLASSIFICATION	5.2414534169945835E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999044431892141	WITHOUT_CLASSIFICATION	9.555681078579154E-5	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999040555857871	WITHOUT_CLASSIFICATION	9.594441421287039E-5	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999554495807809	WITHOUT_CLASSIFICATION	4.4550419219093005E-5	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9998955407211103	WITHOUT_CLASSIFICATION	1.0445927888976764E-4	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999454420182742	WITHOUT_CLASSIFICATION	5.4557981725771205E-5	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9998798059380276	WITHOUT_CLASSIFICATION	1.2019406197236209E-4	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997340377443006	WITHOUT_CLASSIFICATION	2.6596225569941126E-4	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999923085926304	WITHOUT_CLASSIFICATION	7.691407369603062E-5	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999651537240697	WITHOUT_CLASSIFICATION	3.4846275930359736E-5	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999234881628267	WITHOUT_CLASSIFICATION	7.651183717331393E-5	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9998907761322082	WITHOUT_CLASSIFICATION	1.0922386779178882E-4	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9994476631695727	WITHOUT_CLASSIFICATION	5.523368304272736E-4	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9998893516182054	WITHOUT_CLASSIFICATION	1.106483817947186E-4	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9994183501022185	WITHOUT_CLASSIFICATION	5.816498977815459E-4	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.999299588702378	WITHOUT_CLASSIFICATION	7.004112976220071E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9993488617216773	WITHOUT_CLASSIFICATION	6.511382783227827E-4	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999120033029971	WITHOUT_CLASSIFICATION	8.79966970029337E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999653481365558	WITHOUT_CLASSIFICATION	3.4651863444135476E-5	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971228702931	WITHOUT_CLASSIFICATION	1.0287712970687036E-4	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999187501765673	WITHOUT_CLASSIFICATION	8.124982343267858E-5	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999799726114738	WITHOUT_CLASSIFICATION	2.0027388526222513E-5	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.998059022576868	WITHOUT_CLASSIFICATION	0.0019409774231320366	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9993488617216773	WITHOUT_CLASSIFICATION	6.511382783227827E-4	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999267413275862	WITHOUT_CLASSIFICATION	7.325867241383412E-5	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998990495820489	WITHOUT_CLASSIFICATION	1.0095041795104218E-4	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9998983536130714	WITHOUT_CLASSIFICATION	1.0164638692849975E-4	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999152157606718	WITHOUT_CLASSIFICATION	8.47842393282516E-5	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999625714241658	WITHOUT_CLASSIFICATION	3.7428575834196936E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999653481365558	WITHOUT_CLASSIFICATION	3.4651863444135476E-5	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9957120487868611	WITHOUT_CLASSIFICATION	0.004287951213138804	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998751178178729	WITHOUT_CLASSIFICATION	1.24882182127208E-4	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998733182066495	WITHOUT_CLASSIFICATION	1.2668179335052545E-4	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999925009019445	WITHOUT_CLASSIFICATION	7.499098055605864E-6	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999925009019445	WITHOUT_CLASSIFICATION	7.499098055605864E-6	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9994884213434585	WITHOUT_CLASSIFICATION	5.115786565414755E-4	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998473882507444	WITHOUT_CLASSIFICATION	1.526117492555944E-4	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9998741683249515	WITHOUT_CLASSIFICATION	1.2583167504853294E-4	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9998741683249515	WITHOUT_CLASSIFICATION	1.2583167504853294E-4	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999672342383928	WITHOUT_CLASSIFICATION	3.2765761607113214E-5	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9982676049360822	WITHOUT_CLASSIFICATION	0.0017323950639178238	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9994033866262554	WITHOUT_CLASSIFICATION	5.966133737446451E-4	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9996772849433692	WITHOUT_CLASSIFICATION	3.2271505663081636E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999651559844586	WITHOUT_CLASSIFICATION	3.484401554149812E-5	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9994033866262554	WITHOUT_CLASSIFICATION	5.966133737446451E-4	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9996772849433692	WITHOUT_CLASSIFICATION	3.2271505663081636E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999472527685495	WITHOUT_CLASSIFICATION	5.274723145062679E-5	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9996696531294911	WITHOUT_CLASSIFICATION	3.30346870508938E-4	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999247354614138	WITHOUT_CLASSIFICATION	7.526453858621892E-5	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999696265255246	WITHOUT_CLASSIFICATION	3.0373474475321692E-5	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998174165082783	WITHOUT_CLASSIFICATION	1.8258349172176552E-4	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999643318199702	WITHOUT_CLASSIFICATION	3.566818002972886E-5	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9995817091634137	WITHOUT_CLASSIFICATION	4.182908365863053E-4	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9995817091634137	WITHOUT_CLASSIFICATION	4.182908365863053E-4	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9995794014177862	WITHOUT_CLASSIFICATION	4.205985822137763E-4	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999998145834562	WITHOUT_CLASSIFICATION	1.854165437942014E-6	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999573668653174	WITHOUT_CLASSIFICATION	4.2633134682507656E-5	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9997675813576096	WITHOUT_CLASSIFICATION	2.3241864239055237E-4	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999840117035824	WITHOUT_CLASSIFICATION	1.5988296417556834E-5	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9998915614046211	WITHOUT_CLASSIFICATION	1.0843859537896898E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999651559844586	WITHOUT_CLASSIFICATION	3.484401554149812E-5	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9998915614046211	WITHOUT_CLASSIFICATION	1.0843859537896898E-4	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9987148724157905	WITHOUT_CLASSIFICATION	0.0012851275842094144	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9987148724157905	WITHOUT_CLASSIFICATION	0.0012851275842094144	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.998819651428299	WITHOUT_CLASSIFICATION	0.0011803485717010761	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999472527685495	WITHOUT_CLASSIFICATION	5.274723145062679E-5	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9998612067385605	WITHOUT_CLASSIFICATION	1.3879326143940567E-4	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9990470218254361	WITHOUT_CLASSIFICATION	9.52978174563847E-4	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.999476524677181	WITHOUT_CLASSIFICATION	5.234753228191341E-4	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997273693348914	WITHOUT_CLASSIFICATION	2.7263066510855135E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9913565490811594	WITHOUT_CLASSIFICATION	0.008643450918840626	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999472527685495	WITHOUT_CLASSIFICATION	5.274723145062679E-5	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997273693348914	WITHOUT_CLASSIFICATION	2.7263066510855135E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9913565490811594	WITHOUT_CLASSIFICATION	0.008643450918840626	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9996432349637353	WITHOUT_CLASSIFICATION	3.5676503626469116E-4	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998964219042696	WITHOUT_CLASSIFICATION	1.0357809573031895E-4	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999225243912521	WITHOUT_CLASSIFICATION	7.747560874788944E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999472527685495	WITHOUT_CLASSIFICATION	5.274723145062679E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999472527685495	WITHOUT_CLASSIFICATION	5.274723145062679E-5	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9999831402563794	WITHOUT_CLASSIFICATION	1.6859743620628784E-5	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9998272720575904	WITHOUT_CLASSIFICATION	1.727279424095738E-4	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9999012057709963	WITHOUT_CLASSIFICATION	9.879422900376913E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999004875552759	WITHOUT_CLASSIFICATION	9.951244472396518E-5	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9999562980490029	WITHOUT_CLASSIFICATION	4.370195099707601E-5	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999936007421125	WITHOUT_CLASSIFICATION	6.399257887564164E-6	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999929194424358	WITHOUT_CLASSIFICATION	7.08055756420403E-5	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999399876567139	WITHOUT_CLASSIFICATION	6.001234328602793E-5	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998598084729159	WITHOUT_CLASSIFICATION	1.4019152708406063E-4	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9998507054883355	WITHOUT_CLASSIFICATION	1.4929451166441853E-4	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9998847073284086	WITHOUT_CLASSIFICATION	1.152926715913189E-4	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999913203593401	WITHOUT_CLASSIFICATION	8.679640659861543E-6	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999909337499056	WITHOUT_CLASSIFICATION	9.066250094468727E-6	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999505116374983	WITHOUT_CLASSIFICATION	4.94883625018625E-5	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998500632705573	WITHOUT_CLASSIFICATION	1.4993672944268983E-4	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999940189316091	WITHOUT_CLASSIFICATION	5.981068390957466E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999004875552759	WITHOUT_CLASSIFICATION	9.951244472396518E-5	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.9998374013183604	WITHOUT_CLASSIFICATION	1.6259868163962795E-4	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.999911597135355	WITHOUT_CLASSIFICATION	8.840286464504721E-5	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9996227738154624	WITHOUT_CLASSIFICATION	3.772261845375628E-4	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999475726007305	WITHOUT_CLASSIFICATION	5.2427399269531E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998756743416825	WITHOUT_CLASSIFICATION	1.2432565831746545E-4	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998756743416825	WITHOUT_CLASSIFICATION	1.2432565831746545E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999004875552759	WITHOUT_CLASSIFICATION	9.951244472396518E-5	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9330133453047896	WITHOUT_CLASSIFICATION	0.06698665469521031	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.999997670277098	WITHOUT_CLASSIFICATION	2.3297229020722233E-6	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9980919191422333	WITHOUT_CLASSIFICATION	0.0019080808577667911	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999448466978627	WITHOUT_CLASSIFICATION	5.5153302137236364E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999860324401438	WITHOUT_CLASSIFICATION	1.3967559856026099E-5	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999962400740759	WITHOUT_CLASSIFICATION	3.759925924092561E-5	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9987295135764944	WITHOUT_CLASSIFICATION	0.0012704864235054901	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999988881407947	WITHOUT_CLASSIFICATION	1.111859205294771E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998427550615295	WITHOUT_CLASSIFICATION	1.5724493847051152E-4	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999960396873941	WITHOUT_CLASSIFICATION	3.960312605901613E-5	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999376249169668	WITHOUT_CLASSIFICATION	6.237508303327749E-5	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9965106517660023	WITHOUT_CLASSIFICATION	0.003489348233997755	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999093992469399	WITHOUT_CLASSIFICATION	9.060075306013184E-5	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999922743455356	WITHOUT_CLASSIFICATION	7.725654464367106E-6	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004019370658	WITHOUT_CLASSIFICATION	9.959806293422245E-5	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9995885010686226	WITHOUT_CLASSIFICATION	4.1149893137730573E-4	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9998713894301625	WITHOUT_CLASSIFICATION	1.2861056983738052E-4	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9996359948136534	WITHOUT_CLASSIFICATION	3.6400518634661846E-4	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999262898077192	WITHOUT_CLASSIFICATION	7.371019228075786E-5	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999039017379446	WITHOUT_CLASSIFICATION	9.609826205525566E-5	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9992270048530242	WITHOUT_CLASSIFICATION	7.729951469758236E-4	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999545675998617	WITHOUT_CLASSIFICATION	4.543240013834234E-5	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998439463781436	WITHOUT_CLASSIFICATION	1.560536218563914E-4	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998448896185297	WITHOUT_CLASSIFICATION	1.5511038147027773E-4	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999039159080363	WITHOUT_CLASSIFICATION	9.608409196366175E-5	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998902926266195	WITHOUT_CLASSIFICATION	1.0970737338048082E-4	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998912654298696	WITHOUT_CLASSIFICATION	1.0873457013040673E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999013164988395	WITHOUT_CLASSIFICATION	9.868350116041882E-5	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998912654298696	WITHOUT_CLASSIFICATION	1.0873457013040673E-4	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998912654298696	WITHOUT_CLASSIFICATION	1.0873457013040673E-4	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999965091035632	WITHOUT_CLASSIFICATION	3.4908964367333536E-6	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999957025313834	WITHOUT_CLASSIFICATION	4.297468616653683E-6	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708476995882	WITHOUT_CLASSIFICATION	2.9152300411840672E-5	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805454698746	WITHOUT_CLASSIFICATION	1.9454530125395734E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999087015878927	WITHOUT_CLASSIFICATION	9.129841210733089E-5	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999481336225956	WITHOUT_CLASSIFICATION	5.186637740435637E-5	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998928627573161	WITHOUT_CLASSIFICATION	1.0713724268389243E-4	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998912654298696	WITHOUT_CLASSIFICATION	1.0873457013040673E-4	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998761182470982	WITHOUT_CLASSIFICATION	1.2388175290189068E-4	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998912654298696	WITHOUT_CLASSIFICATION	1.0873457013040673E-4	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999161441399509	WITHOUT_CLASSIFICATION	8.385586004907452E-5	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998410270408167	WITHOUT_CLASSIFICATION	1.58972959183376E-4	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9998008668416931	WITHOUT_CLASSIFICATION	1.9913315830694234E-4	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999069472582539	WITHOUT_CLASSIFICATION	9.305274174610532E-5	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999954925744214	WITHOUT_CLASSIFICATION	4.5074255785532875E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999471891280883	WITHOUT_CLASSIFICATION	5.281087191177388E-5	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.9998550224805587	WITHOUT_CLASSIFICATION	1.4497751944136757E-4	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998965117432762	WITHOUT_CLASSIFICATION	1.034882567238024E-4	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999863758504434	WITHOUT_CLASSIFICATION	1.3624149556692768E-5	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998752491754568	WITHOUT_CLASSIFICATION	1.247508245432726E-4	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9998782211760503	WITHOUT_CLASSIFICATION	1.2177882394967026E-4	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999117633906689	WITHOUT_CLASSIFICATION	8.823660933115335E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998427550615295	WITHOUT_CLASSIFICATION	1.5724493847051152E-4	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999109447654538	WITHOUT_CLASSIFICATION	8.905523454608196E-5	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999862450184928	WITHOUT_CLASSIFICATION	1.3754981507162696E-5	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9998936151511212	WITHOUT_CLASSIFICATION	1.063848488787454E-4	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.999828821761713	WITHOUT_CLASSIFICATION	1.7117823828700164E-4	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9991407931165552	WITHOUT_CLASSIFICATION	8.592068834447596E-4	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9994519046527008	WITHOUT_CLASSIFICATION	5.48095347299207E-4	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998412103638769	WITHOUT_CLASSIFICATION	1.587896361232008E-4	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998831052413489	WITHOUT_CLASSIFICATION	1.1689475865104107E-4	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998794902794982	WITHOUT_CLASSIFICATION	1.2050972050188922E-4	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998477340334432	WITHOUT_CLASSIFICATION	1.5226596655684715E-4	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9973129755776524	WITHOUT_CLASSIFICATION	0.0026870244223475594	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999841469015911	WITHOUT_CLASSIFICATION	1.5853098408933884E-5	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999646548750831	WITHOUT_CLASSIFICATION	3.534512491685215E-5	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9967065173021319	WITHOUT_CLASSIFICATION	0.0032934826978680224	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998289919610583	WITHOUT_CLASSIFICATION	1.71008038941702E-4	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9998053680369744	WITHOUT_CLASSIFICATION	1.9463196302557472E-4	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9997087856048688	WITHOUT_CLASSIFICATION	2.9121439513116827E-4	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9998829012068247	WITHOUT_CLASSIFICATION	1.1709879317545097E-4	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999885517181658	WITHOUT_CLASSIFICATION	1.14482818342436E-5	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999046387505896	WITHOUT_CLASSIFICATION	9.536124941039096E-4	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9996068775792566	WITHOUT_CLASSIFICATION	3.9312242074339453E-4	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9998177505835589	WITHOUT_CLASSIFICATION	1.8224941644118595E-4	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9996410545301552	WITHOUT_CLASSIFICATION	3.589454698448799E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998427550615295	WITHOUT_CLASSIFICATION	1.5724493847051152E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999471891280883	WITHOUT_CLASSIFICATION	5.281087191177388E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999649626632029	WITHOUT_CLASSIFICATION	3.503733679709699E-4	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999555160272591	WITHOUT_CLASSIFICATION	4.4483972740939516E-5	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999110496461234	WITHOUT_CLASSIFICATION	8.895035387659968E-5	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999069472582539	WITHOUT_CLASSIFICATION	9.305274174610532E-5	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998514511341972	WITHOUT_CLASSIFICATION	1.4854886580287376E-4	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.9998710373748059	WITHOUT_CLASSIFICATION	1.2896262519407597E-4	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9973129755776524	WITHOUT_CLASSIFICATION	0.0026870244223475594	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9991826593264913	WITHOUT_CLASSIFICATION	8.173406735086607E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9996985682450882	WITHOUT_CLASSIFICATION	3.0143175491188524E-4	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998890099788704	WITHOUT_CLASSIFICATION	1.1099002112951016E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998664023295276	WITHOUT_CLASSIFICATION	1.3359767047237028E-4	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997948920856975	WITHOUT_CLASSIFICATION	2.051079143025561E-4	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999576653630844	WITHOUT_CLASSIFICATION	4.233463691553977E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998427550615295	WITHOUT_CLASSIFICATION	1.5724493847051152E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998427550615295	WITHOUT_CLASSIFICATION	1.5724493847051152E-4	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998148297989637	WITHOUT_CLASSIFICATION	1.8517020103626567E-4	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.99998422437976	WITHOUT_CLASSIFICATION	1.57756202400467E-5	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999592720122694	WITHOUT_CLASSIFICATION	4.072798773060425E-4	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9998953003344156	WITHOUT_CLASSIFICATION	1.0469966558432044E-4	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999416749992612	WITHOUT_CLASSIFICATION	5.832500073886094E-5	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999071306809456	WITHOUT_CLASSIFICATION	9.28693190545012E-5	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999693863138852	WITHOUT_CLASSIFICATION	3.0613686114743985E-5	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9987799662390908	WITHOUT_CLASSIFICATION	0.0012200337609091282	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9994898231552428	WITHOUT_CLASSIFICATION	5.101768447573034E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998427550615295	WITHOUT_CLASSIFICATION	1.5724493847051152E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9998095315889394	WITHOUT_CLASSIFICATION	1.904684110605983E-4	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999752105013466	WITHOUT_CLASSIFICATION	2.478949865336069E-5	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999055559932696	WITHOUT_CLASSIFICATION	9.444400673043196E-5	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999212197816751	WITHOUT_CLASSIFICATION	7.878021832488987E-5	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9993009096175473	WITHOUT_CLASSIFICATION	6.990903824527527E-4	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998863547776204	WITHOUT_CLASSIFICATION	1.1364522237961727E-4	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999096183446519	WITHOUT_CLASSIFICATION	9.038165534818596E-5	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9999232821871471	WITHOUT_CLASSIFICATION	7.671781285283163E-5	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.7860186555152359	WITHOUT_CLASSIFICATION	0.21398134448476422	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999800759998082	WITHOUT_CLASSIFICATION	1.9924000191761355E-5	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999800387486815	WITHOUT_CLASSIFICATION	1.9961251318484928E-5	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999069472582539	WITHOUT_CLASSIFICATION	9.305274174610532E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999471891280883	WITHOUT_CLASSIFICATION	5.281087191177388E-5	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.998061096978427	WITHOUT_CLASSIFICATION	0.0019389030215729	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999917507645328	WITHOUT_CLASSIFICATION	8.249235467117945E-6	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9624200438365794	WITHOUT_CLASSIFICATION	0.03757995616342059	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9994892131336031	WITHOUT_CLASSIFICATION	5.10786866396913E-4	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9994963436545761	WITHOUT_CLASSIFICATION	5.036563454239655E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9994977237688011	WITHOUT_CLASSIFICATION	5.022762311989309E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999471891280883	WITHOUT_CLASSIFICATION	5.281087191177388E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9998757015398487	WITHOUT_CLASSIFICATION	1.2429846015122174E-4	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999752105013466	WITHOUT_CLASSIFICATION	2.478949865336069E-5	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9986012317241767	WITHOUT_CLASSIFICATION	0.0013987682758232849	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9998095315889394	WITHOUT_CLASSIFICATION	1.904684110605983E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998427550615295	WITHOUT_CLASSIFICATION	1.5724493847051152E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9995238821680857	WITHOUT_CLASSIFICATION	4.761178319143209E-4	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9908832539831125	WITHOUT_CLASSIFICATION	0.00911674601688757	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998427550615295	WITHOUT_CLASSIFICATION	1.5724493847051152E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999857382797471	WITHOUT_CLASSIFICATION	1.4261720252946643E-5	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998890099788704	WITHOUT_CLASSIFICATION	1.1099002112951016E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998664023295276	WITHOUT_CLASSIFICATION	1.3359767047237028E-4	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997948920856975	WITHOUT_CLASSIFICATION	2.051079143025561E-4	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999435898169701	WITHOUT_CLASSIFICATION	5.641018302989144E-5	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.9997595928646982	WITHOUT_CLASSIFICATION	2.404071353018939E-4	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999874488698146	WITHOUT_CLASSIFICATION	1.2551130185410597E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9998095315889394	WITHOUT_CLASSIFICATION	1.904684110605983E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9995238821680857	WITHOUT_CLASSIFICATION	4.761178319143209E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998427550615295	WITHOUT_CLASSIFICATION	1.5724493847051152E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999471891280883	WITHOUT_CLASSIFICATION	5.281087191177388E-5	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999576653630844	WITHOUT_CLASSIFICATION	4.233463691553977E-5	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998148297989637	WITHOUT_CLASSIFICATION	1.8517020103626567E-4	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.99998422437976	WITHOUT_CLASSIFICATION	1.57756202400467E-5	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945556899628	WITHOUT_CLASSIFICATION	5.444310037164109E-6	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999319874061972	WITHOUT_CLASSIFICATION	6.80125938028595E-5	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999172771642018	WITHOUT_CLASSIFICATION	8.272283579828734E-5	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9997811693873385	WITHOUT_CLASSIFICATION	2.188306126614589E-4	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9863241802605229	WITHOUT_CLASSIFICATION	0.013675819739477024	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998912654298696	WITHOUT_CLASSIFICATION	1.0873457013040673E-4	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9990201479490771	WITHOUT_CLASSIFICATION	9.7985205092295E-4	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998804653355851	WITHOUT_CLASSIFICATION	1.1953466441500118E-4	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9998886781564787	WITHOUT_CLASSIFICATION	1.1132184352128318E-4	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999891378205559	WITHOUT_CLASSIFICATION	1.0862179444146581E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998912654298696	WITHOUT_CLASSIFICATION	1.0873457013040673E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999013164988395	WITHOUT_CLASSIFICATION	9.868350116041882E-5	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805454698746	WITHOUT_CLASSIFICATION	1.9454530125395734E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999947169189352	WITHOUT_CLASSIFICATION	5.283081064783984E-6	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999160667529886	WITHOUT_CLASSIFICATION	8.393324701142958E-5	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999290727912059	WITHOUT_CLASSIFICATION	7.092720879412344E-5	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998912654298696	WITHOUT_CLASSIFICATION	1.0873457013040673E-4	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9824979201649239	WITHOUT_CLASSIFICATION	0.017502079835076026	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998427550615295	WITHOUT_CLASSIFICATION	1.5724493847051152E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998427550615295	WITHOUT_CLASSIFICATION	1.5724493847051152E-4	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999087015878927	WITHOUT_CLASSIFICATION	9.129841210733089E-5	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998912654298696	WITHOUT_CLASSIFICATION	1.0873457013040673E-4	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999885517181658	WITHOUT_CLASSIFICATION	1.14482818342436E-5	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9993350115284527	WITHOUT_CLASSIFICATION	6.649884715471768E-4	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999790760047927	WITHOUT_CLASSIFICATION	2.0923995207306186E-4	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999341258366746	WITHOUT_CLASSIFICATION	6.587416332527472E-5	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999094261558189	WITHOUT_CLASSIFICATION	9.057384418109214E-5	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999950532056985	WITHOUT_CLASSIFICATION	4.946794301565536E-6	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9996129088387409	WITHOUT_CLASSIFICATION	3.8709116125908106E-4	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998890120410873	WITHOUT_CLASSIFICATION	1.1098795891270663E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999899841481052	WITHOUT_CLASSIFICATION	1.0015851894692495E-5	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999988881407947	WITHOUT_CLASSIFICATION	1.111859205294771E-5	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999830870311991	WITHOUT_CLASSIFICATION	1.6912968800890187E-4	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999094837456672	WITHOUT_CLASSIFICATION	9.051625433281552E-5	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999938101700825	WITHOUT_CLASSIFICATION	6.189829917497071E-5	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999711961316162	WITHOUT_CLASSIFICATION	2.8803868383681415E-5	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999625649559867	WITHOUT_CLASSIFICATION	3.7435044013338814E-5	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999473122153224	WITHOUT_CLASSIFICATION	5.268778467772411E-5	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998973385611394	WITHOUT_CLASSIFICATION	1.0266143886062548E-4	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998631600731049	WITHOUT_CLASSIFICATION	1.3683992689514455E-4	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996521060984513	WITHOUT_CLASSIFICATION	3.4789390154859354E-4	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9996554603891725	WITHOUT_CLASSIFICATION	3.445396108274793E-4	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9992681674767653	WITHOUT_CLASSIFICATION	7.318325232347619E-4	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992151632423907	WITHOUT_CLASSIFICATION	7.848367576093813E-4	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9969281903153682	WITHOUT_CLASSIFICATION	0.003071809684631788	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999238333514515	WITHOUT_CLASSIFICATION	7.616664854849975E-4	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995110795775246	WITHOUT_CLASSIFICATION	4.889204224753276E-4	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9995012019115924	WITHOUT_CLASSIFICATION	4.987980884076293E-4	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999073633645243	WITHOUT_CLASSIFICATION	9.263663547569488E-5	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999238333514515	WITHOUT_CLASSIFICATION	7.616664854849975E-4	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998200110767452	WITHOUT_CLASSIFICATION	1.7998892325475838E-4	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994963465827622	WITHOUT_CLASSIFICATION	5.03653417237741E-4	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999317300780765	WITHOUT_CLASSIFICATION	6.826992192352463E-5	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999292167466111	WITHOUT_CLASSIFICATION	7.078325338886942E-5	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9996053010591541	WITHOUT_CLASSIFICATION	3.94698940845907E-4	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999792705142284	WITHOUT_CLASSIFICATION	2.0729485771485565E-5	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.999905774294168	WITHOUT_CLASSIFICATION	9.42257058319556E-5	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999360270151088	WITHOUT_CLASSIFICATION	6.397298489128348E-5	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999360270151088	WITHOUT_CLASSIFICATION	6.397298489128348E-5	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999841023016447	WITHOUT_CLASSIFICATION	1.5897698355319693E-5	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999798478503211	WITHOUT_CLASSIFICATION	2.015214967890475E-4	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998356975482104	WITHOUT_CLASSIFICATION	1.643024517895734E-4	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999590064939434	WITHOUT_CLASSIFICATION	4.0993506056481996E-5	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9970040902245051	WITHOUT_CLASSIFICATION	0.002995909775494973	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999565155215162	WITHOUT_CLASSIFICATION	4.348447848380743E-5	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999994280935696	WITHOUT_CLASSIFICATION	5.719064303975638E-6	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999745763425357	WITHOUT_CLASSIFICATION	2.5423657464270848E-5	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9997998779250235	WITHOUT_CLASSIFICATION	2.001220749765252E-4	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.999994776512992	WITHOUT_CLASSIFICATION	5.223487008031376E-6	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999983049346961	WITHOUT_CLASSIFICATION	1.6950653038955243E-5	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999891780108471	WITHOUT_CLASSIFICATION	1.082198915290204E-4	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999705710200759	WITHOUT_CLASSIFICATION	2.9428979924065096E-5	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9988497909484619	WITHOUT_CLASSIFICATION	0.001150209051538054	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999556073616446	WITHOUT_CLASSIFICATION	4.439263835544807E-5	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9994011973178583	WITHOUT_CLASSIFICATION	5.988026821418109E-4	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9997072361042434	WITHOUT_CLASSIFICATION	2.927638957566476E-4	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9992327368636661	WITHOUT_CLASSIFICATION	7.672631363338298E-4	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999744293057644	WITHOUT_CLASSIFICATION	2.5570694235608512E-5	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999854215935502	WITHOUT_CLASSIFICATION	1.4578406449804087E-4	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9998703732899236	WITHOUT_CLASSIFICATION	1.2962671007636797E-4	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999088019378476	WITHOUT_CLASSIFICATION	9.119806215240179E-5	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999304129591351	WITHOUT_CLASSIFICATION	6.958704086487844E-5	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999162777948523	WITHOUT_CLASSIFICATION	8.37222051477882E-5	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998977312467444	WITHOUT_CLASSIFICATION	1.0226875325557585E-4	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9994575744931481	WITHOUT_CLASSIFICATION	5.424255068518785E-4	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9989750736050202	WITHOUT_CLASSIFICATION	0.001024926394979838	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9992540754384396	WITHOUT_CLASSIFICATION	7.459245615603333E-4	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9906388895107375	WITHOUT_CLASSIFICATION	0.00936111048926248	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9982102313576815	WITHOUT_CLASSIFICATION	0.0017897686423184375	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999440607871385	WITHOUT_CLASSIFICATION	5.593921286151079E-5	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.9999678655949651	WITHOUT_CLASSIFICATION	3.2134405034989036E-5	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999796709599988	WITHOUT_CLASSIFICATION	2.0329040001208385E-5	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999893032501681	WITHOUT_CLASSIFICATION	1.0696749831809654E-5	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999605630895861	WITHOUT_CLASSIFICATION	3.9436910413863594E-5	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.999860193927472	WITHOUT_CLASSIFICATION	1.3980607252794038E-4	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9987001980078913	WITHOUT_CLASSIFICATION	0.0012998019921086914	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999749526229136	WITHOUT_CLASSIFICATION	2.5047377086400895E-5	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.6343356418831441	WITHOUT_CLASSIFICATION	0.365664358116856	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999805684977121	WITHOUT_CLASSIFICATION	1.9431502287823284E-5	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999072762381691	WITHOUT_CLASSIFICATION	9.272376183098335E-5	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999416749992612	WITHOUT_CLASSIFICATION	5.832500073886094E-5	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999416749992612	WITHOUT_CLASSIFICATION	5.832500073886094E-5	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9997691083500971	WITHOUT_CLASSIFICATION	2.3089164990289937E-4	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998823203526136	WITHOUT_CLASSIFICATION	1.1767964738644932E-4	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999894594002706	WITHOUT_CLASSIFICATION	1.0540599729387094E-5	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999864840057355	WITHOUT_CLASSIFICATION	1.3515994264610314E-5	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999040618660705	WITHOUT_CLASSIFICATION	9.593813392953797E-5	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999192350065149	WITHOUT_CLASSIFICATION	8.076499348509495E-5	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999309651510481	WITHOUT_CLASSIFICATION	6.903484895194754E-5	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.999997260473245	WITHOUT_CLASSIFICATION	2.7395267550009626E-6	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999992016505511	WITHOUT_CLASSIFICATION	7.98349448939477E-7	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999691101108392	WITHOUT_CLASSIFICATION	3.088988916076659E-5	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999456467906487	WITHOUT_CLASSIFICATION	5.43532093514067E-5	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.999991486208854	WITHOUT_CLASSIFICATION	8.513791145905483E-6	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998730299977336	WITHOUT_CLASSIFICATION	1.269700022663765E-4	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998436152342963	WITHOUT_CLASSIFICATION	1.563847657036408E-4	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.999937650674337	WITHOUT_CLASSIFICATION	6.234932566294952E-5	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999498389469086	WITHOUT_CLASSIFICATION	5.016105309134128E-5	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9993407337151898	WITHOUT_CLASSIFICATION	6.592662848100818E-4	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999960170491383	WITHOUT_CLASSIFICATION	3.9829508617204085E-6	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9998829004784127	WITHOUT_CLASSIFICATION	1.1709952158738519E-4	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9988522547681246	WITHOUT_CLASSIFICATION	0.0011477452318753953	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.9997718453204648	WITHOUT_CLASSIFICATION	2.2815467953514438E-4	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999870215281249	WITHOUT_CLASSIFICATION	1.297847187509648E-4	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9988522547681246	WITHOUT_CLASSIFICATION	0.0011477452318753953	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.99996322240978	WITHOUT_CLASSIFICATION	3.677759022011731E-5	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999798772596872	WITHOUT_CLASSIFICATION	2.0122740312800874E-5	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999521233934247	WITHOUT_CLASSIFICATION	4.78766065752923E-5	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998082595485893	WITHOUT_CLASSIFICATION	1.91740451410681E-4	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9998843107096815	WITHOUT_CLASSIFICATION	1.1568929031837476E-4	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999893493382358	WITHOUT_CLASSIFICATION	1.0650661764228127E-5	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999225606247931	WITHOUT_CLASSIFICATION	7.743937520690195E-5	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998893065873706	WITHOUT_CLASSIFICATION	1.106934126293069E-4	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999841791424554	WITHOUT_CLASSIFICATION	1.5820857544592655E-4	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9998534555064829	WITHOUT_CLASSIFICATION	1.4654449351709985E-4	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999703445252276	WITHOUT_CLASSIFICATION	2.965547477241704E-5	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999880998750921	WITHOUT_CLASSIFICATION	1.1900124907935962E-5	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999874131751892	WITHOUT_CLASSIFICATION	1.258682481075961E-5	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9991628520626697	WITHOUT_CLASSIFICATION	8.371479373303326E-4	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999626181751674	WITHOUT_CLASSIFICATION	3.73818248325104E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999019701541477	WITHOUT_CLASSIFICATION	9.80298458523304E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999019701541477	WITHOUT_CLASSIFICATION	9.80298458523304E-5	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9987889733636276	WITHOUT_CLASSIFICATION	0.0012110266363724116	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9998930960690455	WITHOUT_CLASSIFICATION	1.0690393095450994E-4	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.999916815825095	WITHOUT_CLASSIFICATION	8.318417490509886E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999485682970771	WITHOUT_CLASSIFICATION	5.143170292289233E-4	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9954488015181282	WITHOUT_CLASSIFICATION	0.004551198481871776	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9991897607987463	WITHOUT_CLASSIFICATION	8.102392012537942E-4	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999790384615675	WITHOUT_CLASSIFICATION	2.0961538432440003E-5	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9998724954880988	WITHOUT_CLASSIFICATION	1.275045119012722E-4	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9960150808814188	WITHOUT_CLASSIFICATION	0.00398491911858123	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999434719447383	WITHOUT_CLASSIFICATION	5.652805526164776E-5	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999449395962	WITHOUT_CLASSIFICATION	5.506040390115544E-8	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999712081819321	WITHOUT_CLASSIFICATION	2.879181806787658E-5	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9997448306070732	WITHOUT_CLASSIFICATION	2.551693929268088E-4	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999628630314716	WITHOUT_CLASSIFICATION	3.7136968528354114E-5	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999473122153224	WITHOUT_CLASSIFICATION	5.268778467772411E-5	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9992805291630608	WITHOUT_CLASSIFICATION	7.194708369392757E-4	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999764514855295	WITHOUT_CLASSIFICATION	2.3548514470430276E-5	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999409429858381	WITHOUT_CLASSIFICATION	5.9057014161751545E-5	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999408545720911	WITHOUT_CLASSIFICATION	5.9145427908793716E-5	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999015272962358	WITHOUT_CLASSIFICATION	9.847270376417225E-5	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9999847150918393	WITHOUT_CLASSIFICATION	1.528490816068972E-5	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9994007794136706	WITHOUT_CLASSIFICATION	5.992205863293552E-4	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999702405508559	WITHOUT_CLASSIFICATION	2.9759449144126185E-5	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999702151201069	WITHOUT_CLASSIFICATION	2.9784879893187948E-5	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999705267547039	WITHOUT_CLASSIFICATION	2.9473245296101608E-5	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999887018629273	WITHOUT_CLASSIFICATION	1.12981370727482E-5	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999538872604105	WITHOUT_CLASSIFICATION	4.6112739589521396E-5	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9993477082948338	WITHOUT_CLASSIFICATION	6.522917051661191E-4	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9993072272314187	WITHOUT_CLASSIFICATION	6.927727685812178E-4	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.999997933455891	WITHOUT_CLASSIFICATION	2.066544108886231E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999243200989677	WITHOUT_CLASSIFICATION	7.567990103233532E-5	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999128346801406	WITHOUT_CLASSIFICATION	8.716531985943333E-5	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999797542927257	WITHOUT_CLASSIFICATION	2.0245707274375145E-5	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999952491549474	WITHOUT_CLASSIFICATION	4.750845052656219E-6	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999957407222981	WITHOUT_CLASSIFICATION	4.259277701916951E-6	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999779454444526	WITHOUT_CLASSIFICATION	2.2054555547402192E-5	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999865614941487	WITHOUT_CLASSIFICATION	1.3438505851201002E-5	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998667767545496	WITHOUT_CLASSIFICATION	1.332232454503851E-4	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9998325461703135	WITHOUT_CLASSIFICATION	1.6745382968650084E-4	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9999939664571529	WITHOUT_CLASSIFICATION	6.0335428471332815E-6	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9991722027003463	WITHOUT_CLASSIFICATION	8.277972996535478E-4	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999903746466313	WITHOUT_CLASSIFICATION	9.625353368622775E-6	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9975262604583313	WITHOUT_CLASSIFICATION	0.00247373954166883	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999112771631155	WITHOUT_CLASSIFICATION	8.872283688454536E-5	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998563304556117	WITHOUT_CLASSIFICATION	1.4366954438823894E-4	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997317260060199	WITHOUT_CLASSIFICATION	2.682739939800825E-4	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417661646238	WITHOUT_CLASSIFICATION	1.5823383537623862E-4	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999313109352803	WITHOUT_CLASSIFICATION	6.868906471961566E-5	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999290179864548	WITHOUT_CLASSIFICATION	7.0982013545206E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999899841481052	WITHOUT_CLASSIFICATION	1.0015851894692495E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999899841481052	WITHOUT_CLASSIFICATION	1.0015851894692495E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999864605419541	WITHOUT_CLASSIFICATION	1.3539458045900099E-5	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9967897629546015	WITHOUT_CLASSIFICATION	0.0032102370453983616	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9994937830634966	WITHOUT_CLASSIFICATION	5.062169365034102E-4	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998530840140428	WITHOUT_CLASSIFICATION	1.4691598595714008E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9994937830634966	WITHOUT_CLASSIFICATION	5.062169365034102E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9996802822102038	WITHOUT_CLASSIFICATION	3.1971778979621325E-4	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999949204433294	WITHOUT_CLASSIFICATION	5.079556670583658E-5	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.9998519549070758	WITHOUT_CLASSIFICATION	1.4804509292414307E-4	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999987704459542	WITHOUT_CLASSIFICATION	1.2295540458093279E-5	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998449755301243	WITHOUT_CLASSIFICATION	1.550244698756598E-4	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9997786413509872	WITHOUT_CLASSIFICATION	2.213586490127171E-4	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999480237862394	WITHOUT_CLASSIFICATION	5.197621376074729E-5	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9981196815296478	WITHOUT_CLASSIFICATION	0.0018803184703521786	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999922828173092	WITHOUT_CLASSIFICATION	7.71718269080475E-6	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999945496836373	WITHOUT_CLASSIFICATION	5.4503163627170735E-6	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999424913848599	WITHOUT_CLASSIFICATION	5.750861514021882E-5	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998302306651019	WITHOUT_CLASSIFICATION	1.6976933489814031E-4	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9997832667531553	WITHOUT_CLASSIFICATION	2.1673324684480993E-4	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9707797278378912	WITHOUT_CLASSIFICATION	0.029220272162108714	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999950687799818	WITHOUT_CLASSIFICATION	4.931220018208058E-6	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9997012366916843	WITHOUT_CLASSIFICATION	2.9876330831569173E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999959470149505	WITHOUT_CLASSIFICATION	4.052985049406615E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999959470149505	WITHOUT_CLASSIFICATION	4.052985049406615E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9998954009827935	WITHOUT_CLASSIFICATION	1.045990172064221E-4	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9998658428284581	WITHOUT_CLASSIFICATION	1.3415717154193786E-4	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.999992661917463	WITHOUT_CLASSIFICATION	7.338082536848055E-6	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9993838195786435	WITHOUT_CLASSIFICATION	6.161804213565888E-4	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9998466272375888	WITHOUT_CLASSIFICATION	1.533727624112262E-4	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9998839604856545	WITHOUT_CLASSIFICATION	1.1603951434547453E-4	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9923769476035227	WITHOUT_CLASSIFICATION	0.0076230523964773665	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999259361710644	WITHOUT_CLASSIFICATION	7.406382893563343E-5	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.999978768951848	WITHOUT_CLASSIFICATION	2.123104815196773E-5	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999350160460373	WITHOUT_CLASSIFICATION	6.498395396267826E-5	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998539606342509	WITHOUT_CLASSIFICATION	1.4603936574901966E-4	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999809944418049	WITHOUT_CLASSIFICATION	1.9005558195045885E-5	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999007741111421	WITHOUT_CLASSIFICATION	9.922588885796664E-5	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998761273444174	WITHOUT_CLASSIFICATION	1.238726555825986E-4	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9996789702584422	WITHOUT_CLASSIFICATION	3.2102974155781333E-4	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999439289568448	WITHOUT_CLASSIFICATION	5.607104315527628E-5	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998608582990888	WITHOUT_CLASSIFICATION	1.3914170091122586E-4	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9997159300646418	WITHOUT_CLASSIFICATION	2.8406993535825365E-4	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9999234906736771	WITHOUT_CLASSIFICATION	7.650932632283763E-5	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999482024993609	WITHOUT_CLASSIFICATION	5.1797500639214376E-5	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999767131421384	WITHOUT_CLASSIFICATION	2.3286857861582823E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999798467422116	WITHOUT_CLASSIFICATION	2.015325778841938E-5	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999826982850286	WITHOUT_CLASSIFICATION	1.7301714971380053E-5	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999778663800096	WITHOUT_CLASSIFICATION	2.213361999034395E-5	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.999945992538872	WITHOUT_CLASSIFICATION	5.4007461128066266E-5	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999852294902579	WITHOUT_CLASSIFICATION	1.4770509742040067E-5	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998096746315787	WITHOUT_CLASSIFICATION	1.903253684212162E-4	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.999151220959353	WITHOUT_CLASSIFICATION	8.487790406469061E-4	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999894335855194	WITHOUT_CLASSIFICATION	1.0566414480566893E-5	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9993457595853139	WITHOUT_CLASSIFICATION	6.54240414685958E-4	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999747560250197	WITHOUT_CLASSIFICATION	2.5243974980289214E-5	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999941001553924	WITHOUT_CLASSIFICATION	5.899844607649185E-6	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9992397450368103	WITHOUT_CLASSIFICATION	7.602549631896674E-4	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998848855590974	WITHOUT_CLASSIFICATION	1.1511444090265614E-4	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999979941258382	WITHOUT_CLASSIFICATION	2.005874161805373E-5	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999899030747811	WITHOUT_CLASSIFICATION	1.009692521901224E-5	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999776510949457	WITHOUT_CLASSIFICATION	2.2348905054280452E-5	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999835516811032	WITHOUT_CLASSIFICATION	1.6448318896806483E-5	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999933462830077	WITHOUT_CLASSIFICATION	6.653716992294754E-5	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.997810342545464	WITHOUT_CLASSIFICATION	0.002189657454536115	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9996676853480099	WITHOUT_CLASSIFICATION	3.323146519901575E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998486435573113	WITHOUT_CLASSIFICATION	1.51356442688668E-4	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9995604470013086	WITHOUT_CLASSIFICATION	4.3955299869138096E-4	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9435560784885672	WITHOUT_CLASSIFICATION	0.05644392151143292	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999391883592322	WITHOUT_CLASSIFICATION	6.081164076780945E-4	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9870693875444515	WITHOUT_CLASSIFICATION	0.012930612455548574	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9460188577984378	WITHOUT_CLASSIFICATION	0.05398114220156236	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999997695251314	WITHOUT_CLASSIFICATION	2.3047486859906673E-6	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998295174586391	WITHOUT_CLASSIFICATION	1.7048254136085844E-4	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9998737659072933	WITHOUT_CLASSIFICATION	1.2623409270671134E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998486435573113	WITHOUT_CLASSIFICATION	1.51356442688668E-4	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999717388791445	WITHOUT_CLASSIFICATION	2.8261120855531667E-5	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.99974731595921	WITHOUT_CLASSIFICATION	2.526840407900425E-4	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999908817137083	WITHOUT_CLASSIFICATION	9.118286291616614E-6	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9999349070955975	WITHOUT_CLASSIFICATION	6.509290440246414E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9998757015398487	WITHOUT_CLASSIFICATION	1.2429846015122174E-4	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9998757015398487	WITHOUT_CLASSIFICATION	1.2429846015122174E-4	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999971121245439	WITHOUT_CLASSIFICATION	2.8878754561015773E-6	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9997490269561733	WITHOUT_CLASSIFICATION	2.5097304382671183E-4	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999814253323384	WITHOUT_CLASSIFICATION	1.8574667661610683E-5	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9993421706825202	WITHOUT_CLASSIFICATION	6.578293174798316E-4	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9996867195951963	WITHOUT_CLASSIFICATION	3.132804048036835E-4	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9997337964705514	WITHOUT_CLASSIFICATION	2.662035294485549E-4	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999306322642458	WITHOUT_CLASSIFICATION	6.936773575416819E-5	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999892985203991	WITHOUT_CLASSIFICATION	1.0701479600855759E-5	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.99983343544562	WITHOUT_CLASSIFICATION	1.6656455438011778E-4	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998286490400293	WITHOUT_CLASSIFICATION	1.7135095997069817E-4	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998796938162066	WITHOUT_CLASSIFICATION	1.203061837933898E-4	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999560695074876	WITHOUT_CLASSIFICATION	4.393049251234682E-5	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998835649187394	WITHOUT_CLASSIFICATION	1.1643508126059128E-4	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999949696187472	WITHOUT_CLASSIFICATION	5.0303812528044145E-5	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9948838230295293	WITHOUT_CLASSIFICATION	0.005116176970470692	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998852125335042	WITHOUT_CLASSIFICATION	1.1478746649585441E-4	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997262612837942	WITHOUT_CLASSIFICATION	2.7373871620582234E-4	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9842242764219424	WITHOUT_CLASSIFICATION	0.01577572357805749	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998815798506779	WITHOUT_CLASSIFICATION	1.184201493220455E-4	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999634585390363	WITHOUT_CLASSIFICATION	3.6541460963632555E-5	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9994884213434585	WITHOUT_CLASSIFICATION	5.115786565414755E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999416488895257	WITHOUT_CLASSIFICATION	5.8351110474156255E-5	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999967398228162	WITHOUT_CLASSIFICATION	3.260177183674546E-6	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9990545305325625	WITHOUT_CLASSIFICATION	9.454694674374079E-4	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999909962518435	WITHOUT_CLASSIFICATION	9.003748156467446E-6	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998655901370039	WITHOUT_CLASSIFICATION	1.3440986299599687E-4	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999783271919604	WITHOUT_CLASSIFICATION	2.1672808039537535E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.999933929678122	WITHOUT_CLASSIFICATION	6.607032187801203E-5	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999839746051883	WITHOUT_CLASSIFICATION	1.6025394811799156E-5	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9996739898792069	WITHOUT_CLASSIFICATION	3.260101207931102E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999543473199309	WITHOUT_CLASSIFICATION	4.565268006903731E-5	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999378944827517	WITHOUT_CLASSIFICATION	6.210551724827835E-5	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9998825375953592	WITHOUT_CLASSIFICATION	1.1746240464075652E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999543473199309	WITHOUT_CLASSIFICATION	4.565268006903731E-5	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999510270140148	WITHOUT_CLASSIFICATION	4.8972985985078046E-5	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9996739898792069	WITHOUT_CLASSIFICATION	3.260101207931102E-4	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999852039571464	WITHOUT_CLASSIFICATION	1.4796042853575715E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999543473199309	WITHOUT_CLASSIFICATION	4.565268006903731E-5	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999817791097981	WITHOUT_CLASSIFICATION	1.8220890201911302E-4	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999793109940918	WITHOUT_CLASSIFICATION	2.0689005908260295E-5	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998539606342509	WITHOUT_CLASSIFICATION	1.4603936574901966E-4	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999150104864813	WITHOUT_CLASSIFICATION	8.498951351859319E-5	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9996129088387409	WITHOUT_CLASSIFICATION	3.8709116125908106E-4	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9998200144725553	WITHOUT_CLASSIFICATION	1.799855274448064E-4	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998456890535433	WITHOUT_CLASSIFICATION	1.5431094645663632E-4	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999958942250289	WITHOUT_CLASSIFICATION	4.105774971090293E-5	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9999642429275714	WITHOUT_CLASSIFICATION	3.575707242865074E-5	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999926396999109	WITHOUT_CLASSIFICATION	7.360300089017708E-6	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999691134461629	WITHOUT_CLASSIFICATION	3.088655383714381E-5	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999019701541477	WITHOUT_CLASSIFICATION	9.80298458523304E-5	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999494347501562	WITHOUT_CLASSIFICATION	5.056524984387097E-5	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998934324888296	WITHOUT_CLASSIFICATION	1.0656751117052705E-4	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9998615003683479	WITHOUT_CLASSIFICATION	1.3849963165221173E-4	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999251242580207	WITHOUT_CLASSIFICATION	7.487574197926403E-5	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9996427437363432	WITHOUT_CLASSIFICATION	3.572562636567986E-4	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999723183242434	WITHOUT_CLASSIFICATION	2.7681675756567228E-5	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998895590378943	WITHOUT_CLASSIFICATION	1.1044096210566383E-4	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999307506361709	WITHOUT_CLASSIFICATION	6.924936382911943E-5	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999060387532278	WITHOUT_CLASSIFICATION	9.396124677224858E-5	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999413389338504	WITHOUT_CLASSIFICATION	5.866106614963841E-5	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999019701541477	WITHOUT_CLASSIFICATION	9.80298458523304E-5	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999874548604003	WITHOUT_CLASSIFICATION	1.2545139599581013E-5	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999657758702944	WITHOUT_CLASSIFICATION	3.422412970558639E-5	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998795811282377	WITHOUT_CLASSIFICATION	1.2041887176236788E-4	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9993408289010333	WITHOUT_CLASSIFICATION	6.591710989666648E-4	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9998984972609689	WITHOUT_CLASSIFICATION	1.0150273903108885E-4	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9998934953760017	WITHOUT_CLASSIFICATION	1.065046239982949E-4	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999845654310047	WITHOUT_CLASSIFICATION	1.5434568995296234E-4	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996968796689986	WITHOUT_CLASSIFICATION	3.0312033100146976E-4	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9983743659712262	WITHOUT_CLASSIFICATION	0.0016256340287738142	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999646908459576	WITHOUT_CLASSIFICATION	3.530915404238792E-5	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999070258651118	WITHOUT_CLASSIFICATION	9.297413488818096E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999176080703246	WITHOUT_CLASSIFICATION	8.23919296754308E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999176080703246	WITHOUT_CLASSIFICATION	8.23919296754308E-5	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999988507276446	WITHOUT_CLASSIFICATION	1.1492723553192714E-6	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998323005411938	WITHOUT_CLASSIFICATION	1.6769945880622312E-4	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999354357357827	WITHOUT_CLASSIFICATION	6.456426421727733E-5	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9998782036883717	WITHOUT_CLASSIFICATION	1.217963116282577E-4	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9997280981403608	WITHOUT_CLASSIFICATION	2.7190185963927075E-4	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9991941714515093	WITHOUT_CLASSIFICATION	8.058285484907615E-4	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999885068838122	WITHOUT_CLASSIFICATION	1.1493116187648491E-5	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999709866358472	WITHOUT_CLASSIFICATION	2.901336415292178E-5	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999145566338586	WITHOUT_CLASSIFICATION	8.544336614139828E-5	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999920942883651	WITHOUT_CLASSIFICATION	7.905711634885058E-6	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999867461834292	WITHOUT_CLASSIFICATION	1.3253816570806353E-4	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999990526291361	WITHOUT_CLASSIFICATION	9.473708639802941E-7	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9991516314213521	WITHOUT_CLASSIFICATION	8.483685786478193E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999176080703246	WITHOUT_CLASSIFICATION	8.23919296754308E-5	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998133191870406	WITHOUT_CLASSIFICATION	1.8668081295938576E-4	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998780054745541	WITHOUT_CLASSIFICATION	1.2199452544594355E-4	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9992141454341457	WITHOUT_CLASSIFICATION	7.858545658544091E-4	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9994525011832569	WITHOUT_CLASSIFICATION	5.474988167431672E-4	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.999766272266608	WITHOUT_CLASSIFICATION	2.33727733392086E-4	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998081932485762	WITHOUT_CLASSIFICATION	1.9180675142382628E-4	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999923277776002	WITHOUT_CLASSIFICATION	7.672222399933417E-6	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999974785231917	WITHOUT_CLASSIFICATION	2.521476808297915E-5	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9998890772915654	WITHOUT_CLASSIFICATION	1.1092270843455107E-4	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998156412351143	WITHOUT_CLASSIFICATION	1.8435876488567064E-4	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999414786672846	WITHOUT_CLASSIFICATION	5.852133271538058E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999845654310047	WITHOUT_CLASSIFICATION	1.5434568995296234E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999176080703246	WITHOUT_CLASSIFICATION	8.23919296754308E-5	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.999458374339107	WITHOUT_CLASSIFICATION	5.416256608930156E-4	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999786507811267	WITHOUT_CLASSIFICATION	2.134921887331035E-5	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999864098523673	WITHOUT_CLASSIFICATION	1.3590147632680881E-5	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9997646271653774	WITHOUT_CLASSIFICATION	2.3537283462248012E-4	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999970502742744	WITHOUT_CLASSIFICATION	2.9497257256745943E-6	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9991439048525459	WITHOUT_CLASSIFICATION	8.560951474540573E-4	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996655835582325	WITHOUT_CLASSIFICATION	3.344164417674883E-4	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999912557155292	WITHOUT_CLASSIFICATION	8.744284470866423E-6	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999192241704556	WITHOUT_CLASSIFICATION	8.077582954443275E-5	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998130674832396	WITHOUT_CLASSIFICATION	1.8693251676037096E-4	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9997048836402441	WITHOUT_CLASSIFICATION	2.951163597559058E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999894335855194	WITHOUT_CLASSIFICATION	1.0566414480566893E-5	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999957747838054	WITHOUT_CLASSIFICATION	4.225216194682649E-6	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9998136093367371	WITHOUT_CLASSIFICATION	1.863906632627509E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9996802822102038	WITHOUT_CLASSIFICATION	3.1971778979621325E-4	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9998696669006449	WITHOUT_CLASSIFICATION	1.3033309935495336E-4	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999753588639806	WITHOUT_CLASSIFICATION	2.464113601939444E-4	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9998218184579487	WITHOUT_CLASSIFICATION	1.781815420512744E-4	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.9999948767102192	WITHOUT_CLASSIFICATION	5.123289780811352E-6	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999974353112621	WITHOUT_CLASSIFICATION	2.5646887379121272E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999565092015515	WITHOUT_CLASSIFICATION	4.349079844854084E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999565092015515	WITHOUT_CLASSIFICATION	4.349079844854084E-5	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999711935390534	WITHOUT_CLASSIFICATION	2.8806460946674125E-5	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999730575737021	WITHOUT_CLASSIFICATION	2.6942426297862225E-5	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9997379703008054	WITHOUT_CLASSIFICATION	2.6202969919462575E-4	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999221715685782	WITHOUT_CLASSIFICATION	7.782843142187528E-5	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999016130553704	WITHOUT_CLASSIFICATION	9.838694462953161E-5	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999101449820033	WITHOUT_CLASSIFICATION	8.985501799677658E-5	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999137066436383	WITHOUT_CLASSIFICATION	8.629335636166068E-5	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9991337385267935	WITHOUT_CLASSIFICATION	8.6626147320638E-4	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9991337385267935	WITHOUT_CLASSIFICATION	8.6626147320638E-4	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9996744770633306	WITHOUT_CLASSIFICATION	3.2552293666942206E-4	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999084157595969	WITHOUT_CLASSIFICATION	9.158424040309859E-5	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998286545664727	WITHOUT_CLASSIFICATION	1.713454335273307E-4	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999093202793284	WITHOUT_CLASSIFICATION	9.06797206716134E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999093202793284	WITHOUT_CLASSIFICATION	9.06797206716134E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999093202793284	WITHOUT_CLASSIFICATION	9.06797206716134E-5	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999761193546329	WITHOUT_CLASSIFICATION	2.3880645366994585E-5	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999156266818277	WITHOUT_CLASSIFICATION	8.437331817238208E-5	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999954522595477	WITHOUT_CLASSIFICATION	4.5477404523970995E-6	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998454670934339	WITHOUT_CLASSIFICATION	1.545329065660389E-4	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999358717778939	WITHOUT_CLASSIFICATION	6.412822210614517E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999176080703246	WITHOUT_CLASSIFICATION	8.23919296754308E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999176080703246	WITHOUT_CLASSIFICATION	8.23919296754308E-5	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999860440831406	WITHOUT_CLASSIFICATION	1.3955916859430379E-5	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999772373626968	WITHOUT_CLASSIFICATION	2.2762637303193464E-5	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9689341233748102	WITHOUT_CLASSIFICATION	0.031065876625189788	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9996733886397613	WITHOUT_CLASSIFICATION	3.2661136023868885E-4	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999834834652482	WITHOUT_CLASSIFICATION	1.651653475182418E-5	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.999863442687533	WITHOUT_CLASSIFICATION	1.36557312467065E-4	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999353844227673	WITHOUT_CLASSIFICATION	6.461557723278367E-5	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9991840965708627	WITHOUT_CLASSIFICATION	8.159034291372689E-4	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999813913487912	WITHOUT_CLASSIFICATION	1.8608651208844887E-5	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999615763530225	WITHOUT_CLASSIFICATION	3.8423646977454644E-5	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999854168758044	WITHOUT_CLASSIFICATION	1.4583124195546226E-5	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999692814045615	WITHOUT_CLASSIFICATION	3.071859543842412E-5	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999122171187317	WITHOUT_CLASSIFICATION	8.77828812683257E-5	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999122171187317	WITHOUT_CLASSIFICATION	8.77828812683257E-5	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999122171187317	WITHOUT_CLASSIFICATION	8.77828812683257E-5	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999122171187317	WITHOUT_CLASSIFICATION	8.77828812683257E-5	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999122171187317	WITHOUT_CLASSIFICATION	8.77828812683257E-5	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998574120848654	WITHOUT_CLASSIFICATION	1.4258791513448602E-4	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998574120848654	WITHOUT_CLASSIFICATION	1.4258791513448602E-4	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998574120848654	WITHOUT_CLASSIFICATION	1.4258791513448602E-4	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998574120848654	WITHOUT_CLASSIFICATION	1.4258791513448602E-4	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999237676422366	WITHOUT_CLASSIFICATION	7.623235776345985E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999565092015515	WITHOUT_CLASSIFICATION	4.349079844854084E-5	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999778354325299	WITHOUT_CLASSIFICATION	2.216456747008917E-5	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998574120848654	WITHOUT_CLASSIFICATION	1.4258791513448602E-4	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9983055243734129	WITHOUT_CLASSIFICATION	0.0016944756265871565	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9997530469664976	WITHOUT_CLASSIFICATION	2.469530335023694E-4	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999288447281092	WITHOUT_CLASSIFICATION	7.11552718908666E-5	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.999904960597759	WITHOUT_CLASSIFICATION	9.503940224100287E-5	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999575467776262	WITHOUT_CLASSIFICATION	4.2453222373918665E-5	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999780095181733	WITHOUT_CLASSIFICATION	2.1990481826797856E-5	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9997419336961003	WITHOUT_CLASSIFICATION	2.5806630389965446E-4	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.999871278450432	WITHOUT_CLASSIFICATION	1.2872154956801725E-4	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9998859298172337	WITHOUT_CLASSIFICATION	1.1407018276630447E-4	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9991708705316464	WITHOUT_CLASSIFICATION	8.29129468353612E-4	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999317118590262	WITHOUT_CLASSIFICATION	6.828814097386626E-5	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999834579005213	WITHOUT_CLASSIFICATION	1.6542099478651897E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999903416344615	WITHOUT_CLASSIFICATION	9.658365538394094E-6	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.9999488566428629	WITHOUT_CLASSIFICATION	5.1143357137071654E-5	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9339221479787785	WITHOUT_CLASSIFICATION	0.0660778520212214	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9987084445691023	WITHOUT_CLASSIFICATION	0.0012915554308977012	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999788487582432	WITHOUT_CLASSIFICATION	2.115124175675229E-5	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999962805845952	WITHOUT_CLASSIFICATION	3.719415404793959E-5	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999962805845952	WITHOUT_CLASSIFICATION	3.719415404793959E-5	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.99993976148932	WITHOUT_CLASSIFICATION	6.023851068000168E-5	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.999965989719753	WITHOUT_CLASSIFICATION	3.401028024703791E-5	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999327206771614	WITHOUT_CLASSIFICATION	6.727932283857295E-5	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999284643581497	WITHOUT_CLASSIFICATION	7.153564185033E-5	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999766390599786	WITHOUT_CLASSIFICATION	2.3360940021403308E-4	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999975614282102	WITHOUT_CLASSIFICATION	2.4385717898002673E-5	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999804864357698	WITHOUT_CLASSIFICATION	1.9513564230189858E-4	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999901599310591	WITHOUT_CLASSIFICATION	9.84006894090415E-5	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999564288911921	WITHOUT_CLASSIFICATION	4.357110880795565E-5	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999533643178294	WITHOUT_CLASSIFICATION	4.663568217064114E-5	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9992677329326783	WITHOUT_CLASSIFICATION	7.322670673216149E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999894335855194	WITHOUT_CLASSIFICATION	1.0566414480566893E-5	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999936554956175	WITHOUT_CLASSIFICATION	6.344504382484229E-6	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999144006092895	WITHOUT_CLASSIFICATION	8.55993907105859E-5	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999727060612486	WITHOUT_CLASSIFICATION	2.7293938751366932E-5	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9991883234022041	WITHOUT_CLASSIFICATION	8.116765977959769E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999778046944323	WITHOUT_CLASSIFICATION	2.219530556773927E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999778046944323	WITHOUT_CLASSIFICATION	2.219530556773927E-5	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9997645356487805	WITHOUT_CLASSIFICATION	2.3546435121950127E-4	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9941052737615657	WITHOUT_CLASSIFICATION	0.005894726238434263	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9993068791969341	WITHOUT_CLASSIFICATION	6.931208030659076E-4	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.999573196505167	WITHOUT_CLASSIFICATION	4.2680349483295864E-4	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9997291293342349	WITHOUT_CLASSIFICATION	2.7087066576512905E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9996231386045706	WITHOUT_CLASSIFICATION	3.768613954292735E-4	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999644800887276	WITHOUT_CLASSIFICATION	3.551991127237698E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.998057478901919	WITHOUT_CLASSIFICATION	0.00194252109808095	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9994373304837153	WITHOUT_CLASSIFICATION	5.626695162847634E-4	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999863864455444	WITHOUT_CLASSIFICATION	1.361355445560107E-4	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999561478028459	WITHOUT_CLASSIFICATION	4.3852197154136386E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.998057478901919	WITHOUT_CLASSIFICATION	0.00194252109808095	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9974317422159134	WITHOUT_CLASSIFICATION	0.0025682577840865834	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998488973277473	WITHOUT_CLASSIFICATION	1.5110267225274622E-4	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999473877460227	WITHOUT_CLASSIFICATION	5.261225397732377E-5	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.999695055298973	WITHOUT_CLASSIFICATION	3.049447010270878E-4	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9996664792567851	WITHOUT_CLASSIFICATION	3.335207432150062E-4	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999929434584462	WITHOUT_CLASSIFICATION	7.056541553722744E-6	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999372434636822	WITHOUT_CLASSIFICATION	6.275653631773133E-5	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999596388266144	WITHOUT_CLASSIFICATION	4.036117338550177E-5	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999751001636918	WITHOUT_CLASSIFICATION	2.489983630819859E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9992625584343579	WITHOUT_CLASSIFICATION	7.374415656420774E-4	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998601519250856	WITHOUT_CLASSIFICATION	1.3984807491446057E-4	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9997675084685115	WITHOUT_CLASSIFICATION	2.3249153148859473E-4	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999087681445928	WITHOUT_CLASSIFICATION	9.123185540720853E-5	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999850060844611	WITHOUT_CLASSIFICATION	1.499391553896977E-5	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999554168140065	WITHOUT_CLASSIFICATION	4.458318599353166E-5	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9998907215744163	WITHOUT_CLASSIFICATION	1.0927842558373819E-4	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999400090456034	WITHOUT_CLASSIFICATION	5.999095439653548E-5	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.999499564516086	WITHOUT_CLASSIFICATION	5.004354839139394E-4	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999499564516086	WITHOUT_CLASSIFICATION	5.004354839139394E-4	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999372434636822	WITHOUT_CLASSIFICATION	6.275653631773133E-5	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9994568003154852	WITHOUT_CLASSIFICATION	5.431996845147443E-4	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9995041605736387	WITHOUT_CLASSIFICATION	4.958394263614417E-4	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9978098812130913	WITHOUT_CLASSIFICATION	0.0021901187869087465	DEFECT
#2	WITHOUT_CLASSIFICATION	0.9999860409867587	WITHOUT_CLASSIFICATION	1.3959013241190575E-5	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999817668327161	WITHOUT_CLASSIFICATION	1.8233167283855472E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999553472158424	WITHOUT_CLASSIFICATION	4.46527841575195E-5	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999102994883503	WITHOUT_CLASSIFICATION	8.970051164973682E-5	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9984547868531355	WITHOUT_CLASSIFICATION	0.0015452131468644721	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999899334488664	WITHOUT_CLASSIFICATION	1.0066551133466564E-5	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999216476568782	WITHOUT_CLASSIFICATION	7.8352343121745E-5	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999817538118019	WITHOUT_CLASSIFICATION	1.824618819814676E-5	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9984221708552171	WITHOUT_CLASSIFICATION	0.0015778291447829237	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9995391143951214	WITHOUT_CLASSIFICATION	4.60885604878461E-4	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999990539090848	WITHOUT_CLASSIFICATION	9.46090915160213E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999374822896617	WITHOUT_CLASSIFICATION	6.251771033823384E-5	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999883070095994	WITHOUT_CLASSIFICATION	1.169299040052107E-5	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999924938802475	WITHOUT_CLASSIFICATION	7.5061197525584044E-6	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9998651603105418	WITHOUT_CLASSIFICATION	1.3483968945812667E-4	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999804286299445	WITHOUT_CLASSIFICATION	1.9571370055457224E-5	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999669091865191	WITHOUT_CLASSIFICATION	3.3090813481012766E-5	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999500764864432	WITHOUT_CLASSIFICATION	4.9923513556894076E-5	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999344370958257	WITHOUT_CLASSIFICATION	6.556290417424679E-5	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999936326086515	WITHOUT_CLASSIFICATION	6.367391348503394E-5	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999917607097616	WITHOUT_CLASSIFICATION	8.239290238508486E-6	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999964290836652	WITHOUT_CLASSIFICATION	3.5709163347551304E-6	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999178255739878	WITHOUT_CLASSIFICATION	8.217442601223606E-5	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9998757254780867	WITHOUT_CLASSIFICATION	1.2427452191320347E-4	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999741685220657	WITHOUT_CLASSIFICATION	2.5831477934446394E-5	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.99999387449054	WITHOUT_CLASSIFICATION	6.125509460093108E-6	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999360693128507	WITHOUT_CLASSIFICATION	6.393068714931574E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998127797602571	WITHOUT_CLASSIFICATION	1.8722023974289653E-4	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999374822896617	WITHOUT_CLASSIFICATION	6.251771033823384E-5	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999716645393035	WITHOUT_CLASSIFICATION	2.833546069647952E-5	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9998305781456461	WITHOUT_CLASSIFICATION	1.694218543539118E-4	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999734207783938	WITHOUT_CLASSIFICATION	2.6579221606174164E-5	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9997627500971332	WITHOUT_CLASSIFICATION	2.3724990286689554E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9994003390677663	WITHOUT_CLASSIFICATION	5.996609322338109E-4	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999598956610801	WITHOUT_CLASSIFICATION	4.010433891989847E-4	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.999960200734175	WITHOUT_CLASSIFICATION	3.979926582489084E-5	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999859111268287	WITHOUT_CLASSIFICATION	1.408887317130206E-4	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.998674954973854	WITHOUT_CLASSIFICATION	0.0013250450261460206	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.999965047394391	WITHOUT_CLASSIFICATION	3.495260560905386E-5	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.999469295539725	WITHOUT_CLASSIFICATION	5.307044602750027E-4	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.6917101321201291	WITHOUT_CLASSIFICATION	0.3082898678798709	DEFECT
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999673304785092	WITHOUT_CLASSIFICATION	3.266952149087556E-5	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9997962665871573	WITHOUT_CLASSIFICATION	2.0373341284270544E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998127797602571	WITHOUT_CLASSIFICATION	1.8722023974289653E-4	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999543672077925	WITHOUT_CLASSIFICATION	4.563279220746351E-5	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9993470435061265	WITHOUT_CLASSIFICATION	6.529564938736498E-4	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997123464653326	WITHOUT_CLASSIFICATION	2.876535346674027E-4	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999812473167206	WITHOUT_CLASSIFICATION	1.8752683279501822E-5	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998756997721286	WITHOUT_CLASSIFICATION	1.2430022787139253E-4	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9997026143633092	WITHOUT_CLASSIFICATION	2.973856366907816E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9994373304837153	WITHOUT_CLASSIFICATION	5.626695162847634E-4	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999993696486729	WITHOUT_CLASSIFICATION	6.303513272357263E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999374822896617	WITHOUT_CLASSIFICATION	6.251771033823384E-5	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9977739109587163	WITHOUT_CLASSIFICATION	0.0022260890412838237	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9997897133164817	WITHOUT_CLASSIFICATION	2.102866835182404E-4	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999683805220132	WITHOUT_CLASSIFICATION	3.1619477986881016E-5	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999682658290135	WITHOUT_CLASSIFICATION	3.1734170986383565E-5	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998997812640334	WITHOUT_CLASSIFICATION	1.0021873596653195E-4	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999961920086691	WITHOUT_CLASSIFICATION	3.8079913310849326E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.997081591505772	WITHOUT_CLASSIFICATION	0.0029184084942280018	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999895578785574	WITHOUT_CLASSIFICATION	1.0442121442544613E-5	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9880722117933337	WITHOUT_CLASSIFICATION	0.011927788206666217	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998770146957469	WITHOUT_CLASSIFICATION	1.2298530425318234E-4	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999918321603981	WITHOUT_CLASSIFICATION	8.167839601973005E-6	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999959357608784	WITHOUT_CLASSIFICATION	4.064239121586766E-6	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994401598744008	WITHOUT_CLASSIFICATION	5.598401255990744E-4	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994401598744008	WITHOUT_CLASSIFICATION	5.598401255990744E-4	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999952314375264	WITHOUT_CLASSIFICATION	4.768562473645375E-6	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999883455199009	WITHOUT_CLASSIFICATION	1.165448009910644E-4	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999795703698302	WITHOUT_CLASSIFICATION	2.0429630169853088E-5	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999903883565325	WITHOUT_CLASSIFICATION	9.611643467537281E-6	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999032816854925	WITHOUT_CLASSIFICATION	9.671831450743853E-5	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998704737723358	WITHOUT_CLASSIFICATION	1.2952622766409518E-4	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.998670750391294	WITHOUT_CLASSIFICATION	0.001329249608705871	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9998021514324968	WITHOUT_CLASSIFICATION	1.978485675031913E-4	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999669679665608	WITHOUT_CLASSIFICATION	3.303203343926737E-5	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999451931369224	WITHOUT_CLASSIFICATION	5.4806863077589855E-5	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.9999451931369224	WITHOUT_CLASSIFICATION	5.4806863077589855E-5	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999109740175434	WITHOUT_CLASSIFICATION	8.902598245662648E-5	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999943417513732	WITHOUT_CLASSIFICATION	5.6582486268081805E-5	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999201224106349	WITHOUT_CLASSIFICATION	7.987758936511615E-5	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9987758477771616	WITHOUT_CLASSIFICATION	0.001224152222838421	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.999951027011228	WITHOUT_CLASSIFICATION	4.89729887721624E-5	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.99973965279631	WITHOUT_CLASSIFICATION	2.6034720368989266E-4	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999921756598817	WITHOUT_CLASSIFICATION	7.824340118213404E-6	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9990159492011157	WITHOUT_CLASSIFICATION	9.840507988843168E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998427550615295	WITHOUT_CLASSIFICATION	1.5724493847051152E-4	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.99986091508692	WITHOUT_CLASSIFICATION	1.390849130800044E-4	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9990877165616927	WITHOUT_CLASSIFICATION	9.122834383071629E-4	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998959343342081	WITHOUT_CLASSIFICATION	1.0406566579196155E-4	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999257193932326	WITHOUT_CLASSIFICATION	7.428060676744811E-5	DEFECT
implied	WITHOUT_CLASSIFICATION	0.9999860823941605	WITHOUT_CLASSIFICATION	1.3917605839455435E-5	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999970186903283	WITHOUT_CLASSIFICATION	2.9813096717062582E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998427550615295	WITHOUT_CLASSIFICATION	1.5724493847051152E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998427550615295	WITHOUT_CLASSIFICATION	1.5724493847051152E-4	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999376249169668	WITHOUT_CLASSIFICATION	6.237508303327749E-5	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9994444943178263	WITHOUT_CLASSIFICATION	5.555056821735985E-4	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997791298529823	WITHOUT_CLASSIFICATION	2.208701470176475E-4	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998930548997992	WITHOUT_CLASSIFICATION	1.0694510020072509E-4	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9998235628291119	WITHOUT_CLASSIFICATION	1.764371708880741E-4	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.999911597135355	WITHOUT_CLASSIFICATION	8.840286464504721E-5	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999774028291655	WITHOUT_CLASSIFICATION	2.2597170834537513E-5	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999649943564578	WITHOUT_CLASSIFICATION	3.5005643542258614E-5	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9994884213434585	WITHOUT_CLASSIFICATION	5.115786565414755E-4	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999585563170122	WITHOUT_CLASSIFICATION	4.144368298777281E-5	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9995218600698131	WITHOUT_CLASSIFICATION	4.78139930186965E-4	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999211740765608	WITHOUT_CLASSIFICATION	7.882592343915895E-5	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.999904329416326	WITHOUT_CLASSIFICATION	9.567058367400406E-5	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998843975731325	WITHOUT_CLASSIFICATION	1.1560242686737963E-4	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998822267646522	WITHOUT_CLASSIFICATION	1.177732353478322E-4	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999828366834936	WITHOUT_CLASSIFICATION	1.7163316506345013E-5	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999111350865271	WITHOUT_CLASSIFICATION	8.88649134729999E-5	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998794207200766	WITHOUT_CLASSIFICATION	1.2057927992343782E-4	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999290727912059	WITHOUT_CLASSIFICATION	7.092720879412344E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9914502269208821	WITHOUT_CLASSIFICATION	0.008549773079117876	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999588335735861	WITHOUT_CLASSIFICATION	4.116642641395994E-5	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999998865893699	WITHOUT_CLASSIFICATION	1.1341063010738116E-7	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998281075300888	WITHOUT_CLASSIFICATION	1.7189246991126605E-4	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155665005095	WITHOUT_CLASSIFICATION	8.443349949040781E-5	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999997022405906	WITHOUT_CLASSIFICATION	2.9775940940781524E-6	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998853480941866	WITHOUT_CLASSIFICATION	1.1465190581343825E-4	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9997429593532463	WITHOUT_CLASSIFICATION	2.570406467537469E-4	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999715760394974	WITHOUT_CLASSIFICATION	2.8423960502596498E-5	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9991721421519335	WITHOUT_CLASSIFICATION	8.278578480666119E-4	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9993459176457743	WITHOUT_CLASSIFICATION	6.540823542257459E-4	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9997267517265298	WITHOUT_CLASSIFICATION	2.7324827347013274E-4	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9998641569448216	WITHOUT_CLASSIFICATION	1.358430551785201E-4	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999131332142326	WITHOUT_CLASSIFICATION	8.686678576748304E-5	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998996396424062	WITHOUT_CLASSIFICATION	1.0036035759380309E-4	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.999102987961141	WITHOUT_CLASSIFICATION	8.970120388590066E-4	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999705883542442	WITHOUT_CLASSIFICATION	2.9411645755827653E-5	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998841266861452	WITHOUT_CLASSIFICATION	1.1587331385476288E-4	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999613233903212	WITHOUT_CLASSIFICATION	3.867660967891962E-5	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9997593213289471	WITHOUT_CLASSIFICATION	2.4067867105287622E-4	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999649076733608	WITHOUT_CLASSIFICATION	3.509232663919582E-5	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9998715209028362	WITHOUT_CLASSIFICATION	1.2847909716386544E-4	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999800756795513	WITHOUT_CLASSIFICATION	1.9924320448676377E-5	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999263146985831	WITHOUT_CLASSIFICATION	7.368530141699016E-5	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999800756795513	WITHOUT_CLASSIFICATION	1.9924320448676377E-5	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.996743271109545	WITHOUT_CLASSIFICATION	0.0032567288904550656	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9952087331849259	WITHOUT_CLASSIFICATION	0.0047912668150741035	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999515260189256	WITHOUT_CLASSIFICATION	4.847398107444783E-5	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999857288884467	WITHOUT_CLASSIFICATION	1.4271111553262837E-5	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998293232337432	WITHOUT_CLASSIFICATION	1.7067676625692925E-4	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999515260189256	WITHOUT_CLASSIFICATION	4.847398107444783E-5	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999942011928757	WITHOUT_CLASSIFICATION	5.798807124284664E-6	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9996813537043768	WITHOUT_CLASSIFICATION	3.186462956231716E-4	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999935965543359	WITHOUT_CLASSIFICATION	6.4034456641037E-5	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999456804710818	WITHOUT_CLASSIFICATION	5.4319528918335195E-5	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999832028440251	WITHOUT_CLASSIFICATION	1.6797155974911608E-5	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999671358839244	WITHOUT_CLASSIFICATION	3.286411607560571E-5	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999998035386708	WITHOUT_CLASSIFICATION	1.964613292039245E-6	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9996546289453339	WITHOUT_CLASSIFICATION	3.453710546661934E-4	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999846677023677	WITHOUT_CLASSIFICATION	1.5332297632309208E-5	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999094471666204	WITHOUT_CLASSIFICATION	9.055283337945398E-5	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.998828415670115	WITHOUT_CLASSIFICATION	0.0011715843298849326	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999486962042355	WITHOUT_CLASSIFICATION	5.1303795764522236E-5	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999746699117342	WITHOUT_CLASSIFICATION	2.533008826579947E-4	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999388461684586	WITHOUT_CLASSIFICATION	6.115383154137477E-5	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9998782866941731	WITHOUT_CLASSIFICATION	1.2171330582684001E-4	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9998639268931723	WITHOUT_CLASSIFICATION	1.360731068276704E-4	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9989426492455182	WITHOUT_CLASSIFICATION	0.0010573507544817478	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9996170634924626	WITHOUT_CLASSIFICATION	3.829365075374364E-4	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998750196902981	WITHOUT_CLASSIFICATION	1.249803097018114E-4	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9946230547289588	WITHOUT_CLASSIFICATION	0.00537694527104116	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9995861807474771	WITHOUT_CLASSIFICATION	4.138192525229408E-4	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9998797321070015	WITHOUT_CLASSIFICATION	1.202678929984759E-4	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998870775012619	WITHOUT_CLASSIFICATION	1.1292249873812463E-4	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9995840274525457	WITHOUT_CLASSIFICATION	4.159725474543444E-4	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.999931055952717	WITHOUT_CLASSIFICATION	6.894404728293727E-5	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.8549724218689871	WITHOUT_CLASSIFICATION	0.14502757813101283	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9946728060614821	WITHOUT_CLASSIFICATION	0.005327193938517928	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999981903801171	WITHOUT_CLASSIFICATION	1.8096198828875877E-5	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.9999147801815446	WITHOUT_CLASSIFICATION	8.521981845549096E-5	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.9999164708132936	WITHOUT_CLASSIFICATION	8.352918670637606E-5	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998870775012619	WITHOUT_CLASSIFICATION	1.1292249873812463E-4	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998825974211869	WITHOUT_CLASSIFICATION	1.1740257881298863E-4	DEFECT
an association	WITHOUT_CLASSIFICATION	0.9999824909760293	WITHOUT_CLASSIFICATION	1.750902397063366E-5	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9999468952842187	WITHOUT_CLASSIFICATION	5.310471578129164E-5	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9624200438365794	WITHOUT_CLASSIFICATION	0.03757995616342059	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9946230547289588	WITHOUT_CLASSIFICATION	0.00537694527104116	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.9999575420576001	WITHOUT_CLASSIFICATION	4.245794239984777E-5	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9997072972223311	WITHOUT_CLASSIFICATION	2.9270277766881643E-4	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997692608397721	WITHOUT_CLASSIFICATION	2.307391602278127E-4	DEFECT
special case	WITHOUT_CLASSIFICATION	0.999843641701032	WITHOUT_CLASSIFICATION	1.5635829896796843E-4	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999924324476405	WITHOUT_CLASSIFICATION	7.56755235943556E-6	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999991065213684	WITHOUT_CLASSIFICATION	8.934786316029092E-6	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9820511048772418	WITHOUT_CLASSIFICATION	0.01794889512275825	DEFECT
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998741522888576	WITHOUT_CLASSIFICATION	1.2584771114239405E-4	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9993568261350585	WITHOUT_CLASSIFICATION	6.431738649415263E-4	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.9999655919509005	WITHOUT_CLASSIFICATION	3.440804909952165E-5	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999991119776839	WITHOUT_CLASSIFICATION	8.880223161502194E-7	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999019701541477	WITHOUT_CLASSIFICATION	9.80298458523304E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999019701541477	WITHOUT_CLASSIFICATION	9.80298458523304E-5	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999839576942304	WITHOUT_CLASSIFICATION	1.604230576954974E-5	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999123667917301	WITHOUT_CLASSIFICATION	8.763320826992578E-5	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999871166118692	WITHOUT_CLASSIFICATION	1.2883388130763769E-5	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999335437550844	WITHOUT_CLASSIFICATION	6.645624491567532E-5	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999237394913608	WITHOUT_CLASSIFICATION	7.626050863924833E-5	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9984591368522163	WITHOUT_CLASSIFICATION	0.0015408631477837112	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998137763173202	WITHOUT_CLASSIFICATION	1.8622368267983785E-4	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999460326873279	WITHOUT_CLASSIFICATION	5.396731267210107E-4	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9990820780949611	WITHOUT_CLASSIFICATION	9.179219050388517E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999415653057978	WITHOUT_CLASSIFICATION	5.843469420214569E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999415653057978	WITHOUT_CLASSIFICATION	5.843469420214569E-5	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999962400740759	WITHOUT_CLASSIFICATION	3.759925924092558E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999415653057978	WITHOUT_CLASSIFICATION	5.843469420214569E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999415653057978	WITHOUT_CLASSIFICATION	5.843469420214569E-5	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9963507215828514	WITHOUT_CLASSIFICATION	0.003649278417148681	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9992698118758686	WITHOUT_CLASSIFICATION	7.301881241312555E-4	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998665653254247	WITHOUT_CLASSIFICATION	1.3343467457525385E-4	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998665653254247	WITHOUT_CLASSIFICATION	1.3343467457525385E-4	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9987295135764944	WITHOUT_CLASSIFICATION	0.0012704864235054901	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999959435280509	WITHOUT_CLASSIFICATION	4.05647194907931E-6	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9983642618021079	WITHOUT_CLASSIFICATION	0.001635738197892043	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998955135316349	WITHOUT_CLASSIFICATION	1.0448646836514178E-4	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998478141752875	WITHOUT_CLASSIFICATION	1.52185824712604E-4	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999026550643115	WITHOUT_CLASSIFICATION	9.734493568844293E-5	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997769107081875	WITHOUT_CLASSIFICATION	2.2308929181255214E-4	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999353326891544	WITHOUT_CLASSIFICATION	6.46673108456337E-5	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999084983811902	WITHOUT_CLASSIFICATION	9.150161880973318E-5	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999442584584884	WITHOUT_CLASSIFICATION	5.574154151144906E-5	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999385584716843	WITHOUT_CLASSIFICATION	6.144152831563505E-5	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9939440043531387	WITHOUT_CLASSIFICATION	0.006055995646861328	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999864605419541	WITHOUT_CLASSIFICATION	1.3539458045900099E-5	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999714161629616	WITHOUT_CLASSIFICATION	2.8583837038402302E-5	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9995474911964964	WITHOUT_CLASSIFICATION	4.525088035034772E-4	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999907056297297	WITHOUT_CLASSIFICATION	9.29437027029371E-5	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9997232612962101	WITHOUT_CLASSIFICATION	2.7673870378989106E-4	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999732393552462	WITHOUT_CLASSIFICATION	2.676064475380515E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999864605419541	WITHOUT_CLASSIFICATION	1.3539458045900099E-5	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9995861807474771	WITHOUT_CLASSIFICATION	4.138192525229408E-4	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.9997723253205947	WITHOUT_CLASSIFICATION	2.276746794054373E-4	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995110795775246	WITHOUT_CLASSIFICATION	4.889204224753276E-4	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999238333514515	WITHOUT_CLASSIFICATION	7.616664854849975E-4	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9996233159186683	WITHOUT_CLASSIFICATION	3.766840813317292E-4	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998662966712223	WITHOUT_CLASSIFICATION	1.3370332877769562E-4	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.999905357735016	WITHOUT_CLASSIFICATION	9.464226498410866E-5	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9997580477127774	WITHOUT_CLASSIFICATION	2.4195228722262454E-4	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999390667013027	WITHOUT_CLASSIFICATION	6.093329869733051E-5	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999989235517323	WITHOUT_CLASSIFICATION	1.0764482677388688E-6	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999094905392208	WITHOUT_CLASSIFICATION	9.05094607791666E-5	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999114721403053	WITHOUT_CLASSIFICATION	8.852785969472512E-5	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9997100982912277	WITHOUT_CLASSIFICATION	2.899017087722597E-4	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998857641051442	WITHOUT_CLASSIFICATION	1.1423589485589191E-4	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9943480645277161	WITHOUT_CLASSIFICATION	0.005651935472283884	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999721495237449	WITHOUT_CLASSIFICATION	2.785047625503901E-5	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999384556737029	WITHOUT_CLASSIFICATION	6.154432629715961E-5	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998872858656515	WITHOUT_CLASSIFICATION	1.1271413434857331E-4	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9998393680172413	WITHOUT_CLASSIFICATION	1.6063198275872417E-4	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997671986515819	WITHOUT_CLASSIFICATION	2.3280134841804714E-4	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999368656046858	WITHOUT_CLASSIFICATION	6.313439531430106E-5	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9998753130892005	WITHOUT_CLASSIFICATION	1.2468691079950425E-4	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999988067119774	WITHOUT_CLASSIFICATION	1.1932880225673863E-6	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999390667013027	WITHOUT_CLASSIFICATION	6.093329869733051E-5	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999213733877428	WITHOUT_CLASSIFICATION	7.862661225727224E-5	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9999056778692116	WITHOUT_CLASSIFICATION	9.432213078844395E-5	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999984477295405	WITHOUT_CLASSIFICATION	1.5522704595006243E-5	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999133780704059	WITHOUT_CLASSIFICATION	8.662192959407685E-5	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998127797602571	WITHOUT_CLASSIFICATION	1.8722023974289653E-4	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.9998765011213695	WITHOUT_CLASSIFICATION	1.234988786304509E-4	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9999073728722444	WITHOUT_CLASSIFICATION	9.262712775568996E-5	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9998075633791449	WITHOUT_CLASSIFICATION	1.9243662085500612E-4	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9999071673313248	WITHOUT_CLASSIFICATION	9.283266867530388E-5	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.999877252542029	WITHOUT_CLASSIFICATION	1.2274745797105537E-4	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999906273316597	WITHOUT_CLASSIFICATION	9.372668340261358E-6	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999686540834203	WITHOUT_CLASSIFICATION	3.1345916579777144E-5	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999782980334926	WITHOUT_CLASSIFICATION	2.1701966507422016E-5	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9998836137270934	WITHOUT_CLASSIFICATION	1.16386272906624E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999651559844586	WITHOUT_CLASSIFICATION	3.484401554149812E-5	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999653056132061	WITHOUT_CLASSIFICATION	3.469438679399325E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999188327440239	WITHOUT_CLASSIFICATION	8.116725597610753E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999906273316597	WITHOUT_CLASSIFICATION	9.372668340261358E-6	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.99999138014959	WITHOUT_CLASSIFICATION	8.619850410006366E-6	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9990478982027449	WITHOUT_CLASSIFICATION	9.52101797255051E-4	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.999854215935502	WITHOUT_CLASSIFICATION	1.4578406449804087E-4	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999648883417834	WITHOUT_CLASSIFICATION	3.511165821660379E-5	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9999045349514375	WITHOUT_CLASSIFICATION	9.546504856254034E-5	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.999959746305383	WITHOUT_CLASSIFICATION	4.02536946170796E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999651559844586	WITHOUT_CLASSIFICATION	3.484401554149812E-5	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9998606686662239	WITHOUT_CLASSIFICATION	1.3933133377600103E-4	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998331908229755	WITHOUT_CLASSIFICATION	1.668091770244913E-4	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998652532031589	WITHOUT_CLASSIFICATION	1.3474679684120222E-4	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997252923982537	WITHOUT_CLASSIFICATION	2.7470760174633344E-4	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997252923982537	WITHOUT_CLASSIFICATION	2.7470760174633344E-4	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997252923982537	WITHOUT_CLASSIFICATION	2.7470760174633344E-4	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999566565604939	WITHOUT_CLASSIFICATION	4.3343439506051116E-5	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999566565604939	WITHOUT_CLASSIFICATION	4.3343439506051116E-5	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.999614395330717	WITHOUT_CLASSIFICATION	3.8560466928295436E-4	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999964816142907	WITHOUT_CLASSIFICATION	3.5183857093686997E-6	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.9996844402989307	WITHOUT_CLASSIFICATION	3.155597010693571E-4	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9997403208638186	WITHOUT_CLASSIFICATION	2.5967913618141745E-4	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9989894277229624	WITHOUT_CLASSIFICATION	0.0010105722770376176	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998440026126361	WITHOUT_CLASSIFICATION	1.5599738736398727E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601441219054	WITHOUT_CLASSIFICATION	1.3985587809466624E-4	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998127797602571	WITHOUT_CLASSIFICATION	1.8722023974289653E-4	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9989507070777267	WITHOUT_CLASSIFICATION	0.0010492929222733181	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999591689605348	WITHOUT_CLASSIFICATION	4.0831039465109785E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998440026126361	WITHOUT_CLASSIFICATION	1.5599738736398727E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601441219054	WITHOUT_CLASSIFICATION	1.3985587809466624E-4	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998127797602571	WITHOUT_CLASSIFICATION	1.8722023974289653E-4	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999751769784415	WITHOUT_CLASSIFICATION	2.4823021558438824E-5	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999834223183638	WITHOUT_CLASSIFICATION	1.657768163617816E-5	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999929319742757	WITHOUT_CLASSIFICATION	7.068025724254202E-6	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.8548750494417496	WITHOUT_CLASSIFICATION	0.14512495055825042	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999056156844224	WITHOUT_CLASSIFICATION	9.438431557757144E-5	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999432860500265	WITHOUT_CLASSIFICATION	5.671394997349841E-5	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9999863292228728	WITHOUT_CLASSIFICATION	1.3670777127247547E-5	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999019701541477	WITHOUT_CLASSIFICATION	9.80298458523304E-5	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999790460839991	WITHOUT_CLASSIFICATION	2.095391600087128E-5	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999556268221389	WITHOUT_CLASSIFICATION	4.4373177861101203E-4	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9956533565560121	WITHOUT_CLASSIFICATION	0.004346643443987958	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9997816886944012	WITHOUT_CLASSIFICATION	2.183113055988315E-4	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999978892728404	WITHOUT_CLASSIFICATION	2.1107271595970262E-5	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998608376198259	WITHOUT_CLASSIFICATION	1.391623801741124E-4	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9997972797342906	WITHOUT_CLASSIFICATION	2.0272026570941238E-4	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998934324888296	WITHOUT_CLASSIFICATION	1.0656751117052705E-4	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999103595655516	WITHOUT_CLASSIFICATION	8.964043444838963E-5	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998523842209538	WITHOUT_CLASSIFICATION	1.476157790461963E-4	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9989725935980821	WITHOUT_CLASSIFICATION	0.0010274064019178417	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999950918440195	WITHOUT_CLASSIFICATION	4.908155980557352E-6	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999071220645434	WITHOUT_CLASSIFICATION	9.287793545658701E-5	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999823657396875	WITHOUT_CLASSIFICATION	1.763426031249423E-5	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999981722452312	WITHOUT_CLASSIFICATION	1.827754768808813E-6	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9995405526811862	WITHOUT_CLASSIFICATION	4.5944731881372356E-4	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998410981748904	WITHOUT_CLASSIFICATION	1.589018251095856E-4	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998443759187652	WITHOUT_CLASSIFICATION	1.5562408123485807E-4	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999010074465	WITHOUT_CLASSIFICATION	9.899255357410146E-8	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998606607623045	WITHOUT_CLASSIFICATION	1.3933923769548676E-4	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999593614402639	WITHOUT_CLASSIFICATION	4.063855973609262E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999456467906487	WITHOUT_CLASSIFICATION	5.43532093514067E-5	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999456467906487	WITHOUT_CLASSIFICATION	5.43532093514067E-5	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9996200911194114	WITHOUT_CLASSIFICATION	3.79908880588554E-4	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9994762941638006	WITHOUT_CLASSIFICATION	5.237058361994107E-4	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999273472825064	WITHOUT_CLASSIFICATION	7.26527174936115E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999894335855194	WITHOUT_CLASSIFICATION	1.0566414480566893E-5	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999788724342862	WITHOUT_CLASSIFICATION	2.112756571383283E-5	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999774151931833	WITHOUT_CLASSIFICATION	2.2584806816661128E-5	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9999872053200676	WITHOUT_CLASSIFICATION	1.2794679932365163E-5	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.999983299222924	WITHOUT_CLASSIFICATION	1.6700777076079803E-5	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999960170491383	WITHOUT_CLASSIFICATION	3.9829508617204085E-6	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716461112845	WITHOUT_CLASSIFICATION	1.2835388871540817E-4	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998760227994982	WITHOUT_CLASSIFICATION	1.2397720050181813E-4	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716461112845	WITHOUT_CLASSIFICATION	1.2835388871540817E-4	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716461112845	WITHOUT_CLASSIFICATION	1.2835388871540817E-4	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716461112845	WITHOUT_CLASSIFICATION	1.2835388871540817E-4	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998719321301847	WITHOUT_CLASSIFICATION	1.2806786981541714E-4	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716461112845	WITHOUT_CLASSIFICATION	1.2835388871540817E-4	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999872779822387	WITHOUT_CLASSIFICATION	1.2722017761307658E-4	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716461112845	WITHOUT_CLASSIFICATION	1.2835388871540817E-4	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716461112845	WITHOUT_CLASSIFICATION	1.2835388871540817E-4	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716461112845	WITHOUT_CLASSIFICATION	1.2835388871540817E-4	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9992382236588209	WITHOUT_CLASSIFICATION	7.617763411792282E-4	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9996041095208799	WITHOUT_CLASSIFICATION	3.9589047912005654E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992204001278405	WITHOUT_CLASSIFICATION	7.795998721594348E-4	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9993467423416903	WITHOUT_CLASSIFICATION	6.53257658309646E-4	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999725548195133	WITHOUT_CLASSIFICATION	2.74451804867995E-5	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9997822213236828	WITHOUT_CLASSIFICATION	2.1777867631725094E-4	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999746762847612	WITHOUT_CLASSIFICATION	2.532371523869082E-5	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999397201891669	WITHOUT_CLASSIFICATION	6.0279810833200864E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992204001278405	WITHOUT_CLASSIFICATION	7.795998721594348E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992204001278405	WITHOUT_CLASSIFICATION	7.795998721594348E-4	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999715555676357	WITHOUT_CLASSIFICATION	2.844443236425937E-5	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999793926668806	WITHOUT_CLASSIFICATION	2.0607333119310295E-5	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9996689819939445	WITHOUT_CLASSIFICATION	3.3101800605554374E-4	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999931665610961	WITHOUT_CLASSIFICATION	6.833438903895434E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999903416344615	WITHOUT_CLASSIFICATION	9.658365538394094E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998523842209538	WITHOUT_CLASSIFICATION	1.476157790461963E-4	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999811351668157	WITHOUT_CLASSIFICATION	1.8864833184283302E-4	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999255713604785	WITHOUT_CLASSIFICATION	7.442863952142094E-5	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9998666236860139	WITHOUT_CLASSIFICATION	1.3337631398615605E-4	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999107938532138	WITHOUT_CLASSIFICATION	8.920614678609642E-5	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9997356794614428	WITHOUT_CLASSIFICATION	2.6432053855716313E-4	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998705874520245	WITHOUT_CLASSIFICATION	1.2941254797540006E-4	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997105495177797	WITHOUT_CLASSIFICATION	2.894504822203306E-4	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997105495177797	WITHOUT_CLASSIFICATION	2.894504822203306E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997105495177797	WITHOUT_CLASSIFICATION	2.894504822203306E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997105495177797	WITHOUT_CLASSIFICATION	2.894504822203306E-4	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998127797602571	WITHOUT_CLASSIFICATION	1.8722023974289653E-4	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998794959868699	WITHOUT_CLASSIFICATION	1.2050401313012887E-4	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998161050512789	WITHOUT_CLASSIFICATION	1.838949487210313E-4	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998127797602571	WITHOUT_CLASSIFICATION	1.8722023974289653E-4	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9967632078992007	WITHOUT_CLASSIFICATION	0.003236792100799399	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998625254618776	WITHOUT_CLASSIFICATION	1.374745381224693E-4	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998657302461128	WITHOUT_CLASSIFICATION	1.342697538870851E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998833209859018	WITHOUT_CLASSIFICATION	1.1667901409811071E-4	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999775206140205	WITHOUT_CLASSIFICATION	2.2479385979616764E-5	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.999981726025052	WITHOUT_CLASSIFICATION	1.8273974947970706E-5	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999901964284278	WITHOUT_CLASSIFICATION	9.803571572275747E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999899841481052	WITHOUT_CLASSIFICATION	1.0015851894692495E-5	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999126950341501	WITHOUT_CLASSIFICATION	8.730496584986119E-5	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999696789700725	WITHOUT_CLASSIFICATION	3.032102992743101E-5	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9997537030806638	WITHOUT_CLASSIFICATION	2.4629691933619215E-4	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999874648774812	WITHOUT_CLASSIFICATION	1.2535122518770195E-5	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999874648774812	WITHOUT_CLASSIFICATION	1.2535122518770195E-5	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999874648774812	WITHOUT_CLASSIFICATION	1.2535122518770195E-5	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999659036094584	WITHOUT_CLASSIFICATION	3.40963905417084E-5	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9999632551902866	WITHOUT_CLASSIFICATION	3.6744809713472364E-5	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999967923511354	WITHOUT_CLASSIFICATION	3.2076488646700833E-6	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998174653146248	WITHOUT_CLASSIFICATION	1.8253468537521983E-4	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998174653146248	WITHOUT_CLASSIFICATION	1.8253468537521983E-4	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9994349230944588	WITHOUT_CLASSIFICATION	5.650769055412327E-4	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997252923982537	WITHOUT_CLASSIFICATION	2.7470760174633344E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9998863837066837	WITHOUT_CLASSIFICATION	1.136162933162809E-4	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999563528678307	WITHOUT_CLASSIFICATION	4.3647132169263846E-5	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999986904750751	WITHOUT_CLASSIFICATION	1.3095249249958252E-6	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9952763302890585	WITHOUT_CLASSIFICATION	0.004723669710941579	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998500632705573	WITHOUT_CLASSIFICATION	1.4993672944268983E-4	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9997446359137021	WITHOUT_CLASSIFICATION	2.553640862978749E-4	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999717562724838	WITHOUT_CLASSIFICATION	2.8243727516086982E-5	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.997201859993435	WITHOUT_CLASSIFICATION	0.002798140006564927	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999510432792319	WITHOUT_CLASSIFICATION	4.8956720768144E-5	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9997937035566126	WITHOUT_CLASSIFICATION	2.062964433874501E-4	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999889289358513	WITHOUT_CLASSIFICATION	1.1071064148708398E-4	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999554930675978	WITHOUT_CLASSIFICATION	4.4506932402210884E-5	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999997021448513	WITHOUT_CLASSIFICATION	2.9785514861722023E-7	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999977779309159	WITHOUT_CLASSIFICATION	2.2220690840599246E-6	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999969537407836	WITHOUT_CLASSIFICATION	3.04625921644144E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999962125020646	WITHOUT_CLASSIFICATION	3.7874979352477486E-6	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999592590896716	WITHOUT_CLASSIFICATION	4.0740910328417505E-5	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9996439825969216	WITHOUT_CLASSIFICATION	3.560174030785238E-4	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9987235918126962	WITHOUT_CLASSIFICATION	0.0012764081873037668	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999626650796649	WITHOUT_CLASSIFICATION	3.733492033506619E-5	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999689428107457	WITHOUT_CLASSIFICATION	3.105718925438841E-5	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999128346801406	WITHOUT_CLASSIFICATION	8.716531985943333E-5	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999939635026712	WITHOUT_CLASSIFICATION	6.036497328779632E-6	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999541718884153	WITHOUT_CLASSIFICATION	4.5828111584780846E-5	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9984654196396773	WITHOUT_CLASSIFICATION	0.0015345803603227588	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999890182753396	WITHOUT_CLASSIFICATION	1.0981724660479224E-5	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999019701541477	WITHOUT_CLASSIFICATION	9.80298458523304E-5	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9995901594271894	WITHOUT_CLASSIFICATION	4.0984057281045897E-4	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997262612837942	WITHOUT_CLASSIFICATION	2.7373871620582234E-4	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.999994980915534	WITHOUT_CLASSIFICATION	5.019084466024921E-6	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999874275422173	WITHOUT_CLASSIFICATION	1.2572457782631426E-5	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.9999924396165625	WITHOUT_CLASSIFICATION	7.560383437507811E-6	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9976038795825898	WITHOUT_CLASSIFICATION	0.0023961204174101376	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999024408067239	WITHOUT_CLASSIFICATION	9.755919327615278E-5	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9997564534699896	WITHOUT_CLASSIFICATION	2.4354653001047242E-4	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999097657696737	WITHOUT_CLASSIFICATION	9.023423032629699E-5	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999965458825401	WITHOUT_CLASSIFICATION	3.454117459897867E-5	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9995753689249077	WITHOUT_CLASSIFICATION	4.2463107509222467E-4	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.9999075686248872	WITHOUT_CLASSIFICATION	9.243137511281944E-5	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999959470149505	WITHOUT_CLASSIFICATION	4.052985049406615E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9998669100267935	WITHOUT_CLASSIFICATION	1.3308997320661767E-4	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999941578071169	WITHOUT_CLASSIFICATION	5.842192883138955E-6	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999888216365806	WITHOUT_CLASSIFICATION	1.1178363419398762E-5	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999604442224966	WITHOUT_CLASSIFICATION	3.955577750342523E-5	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999332017779161	WITHOUT_CLASSIFICATION	6.679822208390817E-4	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996448485770085	WITHOUT_CLASSIFICATION	3.5515142299143626E-4	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998465794929617	WITHOUT_CLASSIFICATION	1.534205070383376E-4	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.9999304060174037	WITHOUT_CLASSIFICATION	6.959398259631307E-5	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998831502322236	WITHOUT_CLASSIFICATION	1.1684976777627645E-4	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999912796374475	WITHOUT_CLASSIFICATION	8.720362552422614E-6	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999618092269001	WITHOUT_CLASSIFICATION	3.819077309996717E-5	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998759516142841	WITHOUT_CLASSIFICATION	1.2404838571595733E-4	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999882263521704	WITHOUT_CLASSIFICATION	1.1773647829536596E-5	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998275738082762	WITHOUT_CLASSIFICATION	1.7242619172374028E-4	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999874555186228	WITHOUT_CLASSIFICATION	1.2544481377357382E-5	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999459820009329	WITHOUT_CLASSIFICATION	5.401799906706239E-5	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999352473786817	WITHOUT_CLASSIFICATION	6.47526213183152E-5	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999497431526077	WITHOUT_CLASSIFICATION	5.025684739225738E-5	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999809671177985	WITHOUT_CLASSIFICATION	1.9032882201488373E-4	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9998655050261887	WITHOUT_CLASSIFICATION	1.3449497381129438E-4	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9994328332597058	WITHOUT_CLASSIFICATION	5.671667402942768E-4	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999699942497555	WITHOUT_CLASSIFICATION	3.0005750244476948E-5	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999545896491302	WITHOUT_CLASSIFICATION	4.541035086974166E-5	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999660992234536	WITHOUT_CLASSIFICATION	3.390077654645219E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999716386529359	WITHOUT_CLASSIFICATION	2.8361347064106558E-5	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999944061464143	WITHOUT_CLASSIFICATION	5.593853585612491E-6	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999911353736693	WITHOUT_CLASSIFICATION	8.864626330675738E-6	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.999687342891415	WITHOUT_CLASSIFICATION	3.126571085849056E-4	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999831230981936	WITHOUT_CLASSIFICATION	1.6876901806373537E-5	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999925436252585	WITHOUT_CLASSIFICATION	7.456374741540797E-6	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9998781844696296	WITHOUT_CLASSIFICATION	1.2181553037041736E-4	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.9999428527865696	WITHOUT_CLASSIFICATION	5.714721343037255E-5	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999848071528152	WITHOUT_CLASSIFICATION	1.5192847184915564E-5	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999482556062058	WITHOUT_CLASSIFICATION	5.1744393794273724E-5	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999634191684653	WITHOUT_CLASSIFICATION	3.6580831534644166E-5	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9998560200771057	WITHOUT_CLASSIFICATION	1.4397992289432127E-4	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9996738581507322	WITHOUT_CLASSIFICATION	3.2614184926778653E-4	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.965624836300661	WITHOUT_CLASSIFICATION	0.03437516369933897	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999305011466115	WITHOUT_CLASSIFICATION	6.94988533885279E-5	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.99994596123175	WITHOUT_CLASSIFICATION	5.4038768250082E-5	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999759369160263	WITHOUT_CLASSIFICATION	2.4063083973765837E-5	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9993352415927282	WITHOUT_CLASSIFICATION	6.64758407271716E-4	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998338964146831	WITHOUT_CLASSIFICATION	1.6610358531679605E-4	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999854051532668	WITHOUT_CLASSIFICATION	1.459484673320494E-4	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9998907028935146	WITHOUT_CLASSIFICATION	1.092971064854599E-4	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999550286289449	WITHOUT_CLASSIFICATION	4.4971371055093166E-5	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998019747220928	WITHOUT_CLASSIFICATION	1.980252779073515E-4	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999156721397678	WITHOUT_CLASSIFICATION	8.432786023215644E-5	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999786322840485	WITHOUT_CLASSIFICATION	2.1367715951549525E-5	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999995382812813	WITHOUT_CLASSIFICATION	4.617187187073271E-6	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.999889687148761	WITHOUT_CLASSIFICATION	1.1031285123892318E-4	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999682473563755	WITHOUT_CLASSIFICATION	3.1752643624467196E-5	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9999436516235117	WITHOUT_CLASSIFICATION	5.634837648829241E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999488085957628	WITHOUT_CLASSIFICATION	5.119140423720472E-4	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999488085957628	WITHOUT_CLASSIFICATION	5.119140423720472E-4	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999430420604968	WITHOUT_CLASSIFICATION	5.6957939503286634E-5	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.9988916054668179	WITHOUT_CLASSIFICATION	0.0011083945331821817	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999029450423881	WITHOUT_CLASSIFICATION	9.705495761187174E-5	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9987237020539683	WITHOUT_CLASSIFICATION	0.0012762979460316925	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999561207866312	WITHOUT_CLASSIFICATION	4.3879213368710535E-5	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9989891247340984	WITHOUT_CLASSIFICATION	0.0010108752659016191	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998428257642747	WITHOUT_CLASSIFICATION	1.5717423572517278E-4	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9994721543069162	WITHOUT_CLASSIFICATION	5.278456930838449E-4	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9998283660043804	WITHOUT_CLASSIFICATION	1.716339956196432E-4	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9989576188454882	WITHOUT_CLASSIFICATION	0.001042381154511799	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999988628543479	WITHOUT_CLASSIFICATION	1.137145652089119E-5	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9992718134720364	WITHOUT_CLASSIFICATION	7.281865279636298E-4	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999551087864951	WITHOUT_CLASSIFICATION	4.4891213504892207E-5	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999813120076213	WITHOUT_CLASSIFICATION	1.8687992378642528E-5	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9995025648385016	WITHOUT_CLASSIFICATION	4.974351614982737E-4	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999629848105613	WITHOUT_CLASSIFICATION	3.701518943872324E-5	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.99651952486645	WITHOUT_CLASSIFICATION	0.0034804751335500827	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.99651952486645	WITHOUT_CLASSIFICATION	0.0034804751335500827	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999128078971772	WITHOUT_CLASSIFICATION	8.719210282281718E-5	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997008434415895	WITHOUT_CLASSIFICATION	2.9915655841049446E-4	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999792037417455	WITHOUT_CLASSIFICATION	2.0796258254424595E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999101442553978	WITHOUT_CLASSIFICATION	8.985574460212746E-5	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.999903246516422	WITHOUT_CLASSIFICATION	9.675348357787814E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999899841481052	WITHOUT_CLASSIFICATION	1.0015851894692495E-5	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998655901370039	WITHOUT_CLASSIFICATION	1.3440986299599687E-4	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999903246516422	WITHOUT_CLASSIFICATION	9.675348357787814E-5	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999761002852134	WITHOUT_CLASSIFICATION	2.3899714786576766E-5	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998129957186613	WITHOUT_CLASSIFICATION	1.8700428133878043E-4	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999882867501512	WITHOUT_CLASSIFICATION	1.1713249848882893E-5	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999882867501512	WITHOUT_CLASSIFICATION	1.1713249848882893E-5	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999391701359797	WITHOUT_CLASSIFICATION	6.0829864020328025E-5	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999602840196663	WITHOUT_CLASSIFICATION	3.971598033374955E-5	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9994884213434585	WITHOUT_CLASSIFICATION	5.115786565414755E-4	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999641294931585	WITHOUT_CLASSIFICATION	3.587050684141177E-5	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9994884213434585	WITHOUT_CLASSIFICATION	5.115786565414755E-4	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9993325054206713	WITHOUT_CLASSIFICATION	6.674945793287873E-4	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999293716598331	WITHOUT_CLASSIFICATION	7.062834016692108E-5	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999297659899986	WITHOUT_CLASSIFICATION	7.023401000142275E-5	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999237676422366	WITHOUT_CLASSIFICATION	7.623235776345985E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999176080703246	WITHOUT_CLASSIFICATION	8.23919296754308E-5	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9910041864867817	WITHOUT_CLASSIFICATION	0.00899581351321831	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9992141454341457	WITHOUT_CLASSIFICATION	7.858545658544091E-4	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9997646271653774	WITHOUT_CLASSIFICATION	2.3537283462248012E-4	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998723581483794	WITHOUT_CLASSIFICATION	1.2764185162067698E-4	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999122171187317	WITHOUT_CLASSIFICATION	8.77828812683257E-5	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997791298529823	WITHOUT_CLASSIFICATION	2.208701470176475E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998179606901052	WITHOUT_CLASSIFICATION	1.8203930989487357E-4	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9998730299977336	WITHOUT_CLASSIFICATION	1.269700022663765E-4	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999953512962865	WITHOUT_CLASSIFICATION	4.648703713520619E-6	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9978428093406377	WITHOUT_CLASSIFICATION	0.002157190659362248	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997280258835141	WITHOUT_CLASSIFICATION	2.7197411648590786E-4	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9998339092063345	WITHOUT_CLASSIFICATION	1.6609079366550637E-4	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998574120848654	WITHOUT_CLASSIFICATION	1.4258791513448602E-4	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.99995439356928	WITHOUT_CLASSIFICATION	4.56064307199329E-5	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999577255495432	WITHOUT_CLASSIFICATION	4.2274450456763E-5	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998821407746024	WITHOUT_CLASSIFICATION	1.1785922539761303E-4	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9995408620780121	WITHOUT_CLASSIFICATION	4.591379219878567E-4	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.999723475416101	WITHOUT_CLASSIFICATION	2.765245838990698E-4	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999998474759355	WITHOUT_CLASSIFICATION	1.5252406445460763E-7	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9998981425664455	WITHOUT_CLASSIFICATION	1.0185743355456849E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999778046944323	WITHOUT_CLASSIFICATION	2.219530556773927E-5	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999873258907274	WITHOUT_CLASSIFICATION	1.267410927257951E-5	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.9998606961336365	WITHOUT_CLASSIFICATION	1.3930386636361569E-4	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9786610780859761	WITHOUT_CLASSIFICATION	0.021338921914023933	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9984656587543506	WITHOUT_CLASSIFICATION	0.0015343412456494657	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999234476109271	WITHOUT_CLASSIFICATION	7.65523890729402E-5	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9998670090467463	WITHOUT_CLASSIFICATION	1.329909532537831E-4	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9998947794098912	WITHOUT_CLASSIFICATION	1.052205901088196E-4	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9998947794098912	WITHOUT_CLASSIFICATION	1.052205901088196E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999922342975966	WITHOUT_CLASSIFICATION	7.76570240338427E-6	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999625214999913	WITHOUT_CLASSIFICATION	3.747850000864823E-5	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9998436125154492	WITHOUT_CLASSIFICATION	1.5638748455091273E-4	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9999057354997183	WITHOUT_CLASSIFICATION	9.426450028170397E-5	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9995502069975137	WITHOUT_CLASSIFICATION	4.497930024862862E-4	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999018577946327	WITHOUT_CLASSIFICATION	9.814220536725468E-5	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9996127449882134	WITHOUT_CLASSIFICATION	3.872550117865594E-4	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9994286029800517	WITHOUT_CLASSIFICATION	5.713970199482329E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999922342975966	WITHOUT_CLASSIFICATION	7.76570240338427E-6	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999625214999913	WITHOUT_CLASSIFICATION	3.747850000864823E-5	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999300380898921	WITHOUT_CLASSIFICATION	6.996191010786052E-5	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999250741652808	WITHOUT_CLASSIFICATION	7.492583471924683E-5	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999974650515576	WITHOUT_CLASSIFICATION	2.5349484423827037E-6	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9998269931235569	WITHOUT_CLASSIFICATION	1.730068764430425E-4	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9998558070734666	WITHOUT_CLASSIFICATION	1.4419292653348472E-4	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9972009863858247	WITHOUT_CLASSIFICATION	0.002799013614175398	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999612381233987	WITHOUT_CLASSIFICATION	3.876187660128297E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999863435041801	WITHOUT_CLASSIFICATION	1.3656495819897937E-5	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999918499129625	WITHOUT_CLASSIFICATION	8.150087037467464E-6	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9991647652729914	WITHOUT_CLASSIFICATION	8.35234727008687E-4	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999969884507659	WITHOUT_CLASSIFICATION	3.0115492341051445E-5	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9991647652729914	WITHOUT_CLASSIFICATION	8.35234727008687E-4	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9996953375808165	WITHOUT_CLASSIFICATION	3.0466241918342016E-4	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9998655050261887	WITHOUT_CLASSIFICATION	1.3449497381129438E-4	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9996953375808165	WITHOUT_CLASSIFICATION	3.0466241918342016E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998732798071828	WITHOUT_CLASSIFICATION	1.2672019281719988E-4	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9954297456023339	WITHOUT_CLASSIFICATION	0.004570254397666094	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999863435041801	WITHOUT_CLASSIFICATION	1.3656495819897937E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999863435041801	WITHOUT_CLASSIFICATION	1.3656495819897937E-5	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999309651510481	WITHOUT_CLASSIFICATION	6.903484895194754E-5	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.999931084330377	WITHOUT_CLASSIFICATION	6.891566962300625E-5	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999309651510481	WITHOUT_CLASSIFICATION	6.903484895194754E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9998860848287199	WITHOUT_CLASSIFICATION	1.1391517128014813E-4	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999575005595657	WITHOUT_CLASSIFICATION	4.2499440434395925E-5	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999177802092516	WITHOUT_CLASSIFICATION	8.221979074841817E-5	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999190036567336	WITHOUT_CLASSIFICATION	8.099634326646093E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9998829727863994	WITHOUT_CLASSIFICATION	1.1702721360060406E-4	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999416749992612	WITHOUT_CLASSIFICATION	5.832500073886094E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999867796747631	WITHOUT_CLASSIFICATION	1.3220325236883644E-5	DEFECT
columns	WITHOUT_CLASSIFICATION	0.999985330871009	WITHOUT_CLASSIFICATION	1.4669128991061467E-5	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9999326798767885	WITHOUT_CLASSIFICATION	6.732012321159738E-5	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.998702563137386	WITHOUT_CLASSIFICATION	0.00129743686261392	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999891373759374	WITHOUT_CLASSIFICATION	1.086262406259672E-5	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.9999899808981246	WITHOUT_CLASSIFICATION	1.0019101875323947E-5	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998633527663301	WITHOUT_CLASSIFICATION	1.3664723366988305E-4	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999554614432298	WITHOUT_CLASSIFICATION	4.453855677027505E-5	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999352793772739	WITHOUT_CLASSIFICATION	6.472062272602946E-5	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999702092492803	WITHOUT_CLASSIFICATION	2.9790750719693567E-5	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998730299977336	WITHOUT_CLASSIFICATION	1.269700022663765E-4	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999495116548726	WITHOUT_CLASSIFICATION	5.04883451273985E-5	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999083069964426	WITHOUT_CLASSIFICATION	9.169300355736297E-5	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999903850451124	WITHOUT_CLASSIFICATION	9.61495488760143E-5	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998730299977336	WITHOUT_CLASSIFICATION	1.269700022663765E-4	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998781536679763	WITHOUT_CLASSIFICATION	1.218463320238444E-4	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998632315609223	WITHOUT_CLASSIFICATION	1.3676843907771231E-4	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9991461851176862	WITHOUT_CLASSIFICATION	8.538148823139456E-4	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9996978989158171	WITHOUT_CLASSIFICATION	3.021010841829533E-4	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998578034481627	WITHOUT_CLASSIFICATION	1.4219655183723848E-4	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998699721624856	WITHOUT_CLASSIFICATION	1.3002783751429206E-4	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.94449374248238	WITHOUT_CLASSIFICATION	0.05550625751762007	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9997103369294568	WITHOUT_CLASSIFICATION	2.8966307054326855E-4	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9998829727863994	WITHOUT_CLASSIFICATION	1.1702721360060406E-4	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998872724371834	WITHOUT_CLASSIFICATION	1.1272756281651703E-4	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9999331651948008	WITHOUT_CLASSIFICATION	6.683480519923028E-5	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9589547681600961	WITHOUT_CLASSIFICATION	0.04104523183990403	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.9999642454927768	WITHOUT_CLASSIFICATION	3.5754507223161866E-5	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999816114506855	WITHOUT_CLASSIFICATION	1.838854931451094E-5	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.9999899079882385	WITHOUT_CLASSIFICATION	1.0092011761434546E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9998860848287199	WITHOUT_CLASSIFICATION	1.1391517128014813E-4	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9998860848287199	WITHOUT_CLASSIFICATION	1.1391517128014813E-4	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999801930633089	WITHOUT_CLASSIFICATION	1.9806936691192268E-5	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999847411541727	WITHOUT_CLASSIFICATION	1.525884582743427E-5	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9999209832993226	WITHOUT_CLASSIFICATION	7.901670067743634E-5	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.99998677955608	WITHOUT_CLASSIFICATION	1.3220443920152366E-5	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9991538011662081	WITHOUT_CLASSIFICATION	8.461988337918684E-4	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999585580797706	WITHOUT_CLASSIFICATION	4.1441920229390365E-4	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9996714211305762	WITHOUT_CLASSIFICATION	3.285788694237956E-4	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999744410056484	WITHOUT_CLASSIFICATION	2.5558994351655656E-5	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999280200011128	WITHOUT_CLASSIFICATION	7.197999888710528E-5	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999901689243198	WITHOUT_CLASSIFICATION	9.831075680205649E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997934261225164	WITHOUT_CLASSIFICATION	2.0657387748358955E-4	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998633527663301	WITHOUT_CLASSIFICATION	1.3664723366988305E-4	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999922342975966	WITHOUT_CLASSIFICATION	7.76570240338427E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997934261225164	WITHOUT_CLASSIFICATION	2.0657387748358955E-4	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999001133899226	WITHOUT_CLASSIFICATION	9.988661007743556E-5	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999632370355613	WITHOUT_CLASSIFICATION	3.676296443868286E-5	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.999943790219722	WITHOUT_CLASSIFICATION	5.620978027795555E-5	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9761474183599318	WITHOUT_CLASSIFICATION	0.023852581640068215	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996030175486803	WITHOUT_CLASSIFICATION	3.96982451319684E-4	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9988849706909072	WITHOUT_CLASSIFICATION	0.0011150293090928336	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999507386366143	WITHOUT_CLASSIFICATION	4.926136338575434E-5	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999531403599548	WITHOUT_CLASSIFICATION	4.6859640045328945E-5	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999871285728261	WITHOUT_CLASSIFICATION	1.2871427173838998E-5	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9998906784320775	WITHOUT_CLASSIFICATION	1.0932156792249594E-4	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999378049892843	WITHOUT_CLASSIFICATION	6.219501071569103E-5	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999378049892843	WITHOUT_CLASSIFICATION	6.219501071569103E-5	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9996245927754698	WITHOUT_CLASSIFICATION	3.754072245302169E-4	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999705497065348	WITHOUT_CLASSIFICATION	2.94502934652407E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997934261225164	WITHOUT_CLASSIFICATION	2.0657387748358955E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996030175486803	WITHOUT_CLASSIFICATION	3.96982451319684E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999507386366143	WITHOUT_CLASSIFICATION	4.926136338575434E-5	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999199297645304	WITHOUT_CLASSIFICATION	8.007023546967601E-5	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999979344143071	WITHOUT_CLASSIFICATION	2.0655856929651466E-6	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9999314526549806	WITHOUT_CLASSIFICATION	6.854734501939038E-5	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998962319206157	WITHOUT_CLASSIFICATION	1.0376807938427251E-4	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999001981732595	WITHOUT_CLASSIFICATION	9.9801826740529E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999860390384661	WITHOUT_CLASSIFICATION	1.396096153403089E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999001133899226	WITHOUT_CLASSIFICATION	9.988661007743556E-5	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9995450011991625	WITHOUT_CLASSIFICATION	4.5499880083755157E-4	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999504143183063	WITHOUT_CLASSIFICATION	4.958568169366719E-5	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999978283106507	WITHOUT_CLASSIFICATION	2.1716893493036343E-5	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.999991566934859	WITHOUT_CLASSIFICATION	8.433065140997353E-6	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999919560767259	WITHOUT_CLASSIFICATION	8.043923274220082E-6	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9999562599165356	WITHOUT_CLASSIFICATION	4.374008346444399E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998732798071828	WITHOUT_CLASSIFICATION	1.2672019281719988E-4	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998174551563924	WITHOUT_CLASSIFICATION	1.825448436075389E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999883925181313	WITHOUT_CLASSIFICATION	1.1607481868758231E-5	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9898417899327632	WITHOUT_CLASSIFICATION	0.010158210067236861	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9929571470847949	WITHOUT_CLASSIFICATION	0.007042852915205139	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9951828949091801	WITHOUT_CLASSIFICATION	0.004817105090819958	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9995418966785861	WITHOUT_CLASSIFICATION	4.5810332141394766E-4	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9996535659173472	WITHOUT_CLASSIFICATION	3.4643408265273634E-4	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9997678665416597	WITHOUT_CLASSIFICATION	2.3213345834023958E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999860390384661	WITHOUT_CLASSIFICATION	1.396096153403089E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9998973843331934	WITHOUT_CLASSIFICATION	1.0261566680659566E-4	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999024317702755	WITHOUT_CLASSIFICATION	9.756822972452156E-5	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.999569733988342	WITHOUT_CLASSIFICATION	4.3026601165790614E-4	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9998697018581367	WITHOUT_CLASSIFICATION	1.3029814186337174E-4	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9995447143197405	WITHOUT_CLASSIFICATION	4.5528568025945693E-4	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.9997195915974451	WITHOUT_CLASSIFICATION	2.804084025549594E-4	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999980200208743	WITHOUT_CLASSIFICATION	1.979979125698756E-5	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9843590178226311	WITHOUT_CLASSIFICATION	0.01564098217736883	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.999868461732017	WITHOUT_CLASSIFICATION	1.3153826798300205E-4	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999850769506072	WITHOUT_CLASSIFICATION	1.4923049392826854E-5	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999882775673349	WITHOUT_CLASSIFICATION	1.1722432665081269E-5	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.9996944852941247	WITHOUT_CLASSIFICATION	3.0551470587516534E-4	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999888020075096	WITHOUT_CLASSIFICATION	1.1197992490455512E-5	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999809619398966	WITHOUT_CLASSIFICATION	1.9038060103372833E-5	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9993561288713539	WITHOUT_CLASSIFICATION	6.438711286461921E-4	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999826502836352	WITHOUT_CLASSIFICATION	1.7349716364852284E-5	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999778213500685	WITHOUT_CLASSIFICATION	2.217864993157112E-5	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9998625491839931	WITHOUT_CLASSIFICATION	1.3745081600693084E-4	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999602242863013	WITHOUT_CLASSIFICATION	3.9775713698723165E-5	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999140010966374	WITHOUT_CLASSIFICATION	8.599890336266004E-5	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9998424805082556	WITHOUT_CLASSIFICATION	1.5751949174429235E-4	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999551278103207	WITHOUT_CLASSIFICATION	4.487218967943589E-5	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.949602405647208	WITHOUT_CLASSIFICATION	0.0503975943527921	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999835719523321	WITHOUT_CLASSIFICATION	1.642804766791679E-4	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998223425607803	WITHOUT_CLASSIFICATION	1.7765743921969513E-4	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998809048873705	WITHOUT_CLASSIFICATION	1.190951126295769E-4	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.943021233250843	WITHOUT_CLASSIFICATION	0.056978766749156896	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998253917928913	WITHOUT_CLASSIFICATION	1.7460820710860778E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9992625584343579	WITHOUT_CLASSIFICATION	7.374415656420774E-4	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999660998304574	WITHOUT_CLASSIFICATION	3.390016954264715E-5	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999993696486729	WITHOUT_CLASSIFICATION	6.303513272357263E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9995280525090231	WITHOUT_CLASSIFICATION	4.7194749097690433E-4	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9997067776554005	WITHOUT_CLASSIFICATION	2.932223445994871E-4	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999018349105938	WITHOUT_CLASSIFICATION	9.816508940620597E-5	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9958761763036045	WITHOUT_CLASSIFICATION	0.004123823696395475	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9997067776554005	WITHOUT_CLASSIFICATION	2.932223445994871E-4	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9995280525090231	WITHOUT_CLASSIFICATION	4.7194749097690433E-4	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999018349105938	WITHOUT_CLASSIFICATION	9.816508940620597E-5	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.9999623558089052	WITHOUT_CLASSIFICATION	3.764419109479983E-5	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999499728518503	WITHOUT_CLASSIFICATION	5.0027148149697426E-5	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999799004063116	WITHOUT_CLASSIFICATION	2.0099593688395657E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998083054258191	WITHOUT_CLASSIFICATION	1.916945741809132E-4	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999925196089159	WITHOUT_CLASSIFICATION	7.480391084098746E-6	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8964339542805161	WITHOUT_CLASSIFICATION	0.10356604571948383	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998410924162177	WITHOUT_CLASSIFICATION	1.589075837823736E-4	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.999783414070577	WITHOUT_CLASSIFICATION	2.1658592942310064E-4	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999989403047442	WITHOUT_CLASSIFICATION	1.0596952558345208E-6	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9995256865644332	WITHOUT_CLASSIFICATION	4.7431343556673326E-4	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.9998972430771811	WITHOUT_CLASSIFICATION	1.027569228188752E-4	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999600473154302	WITHOUT_CLASSIFICATION	3.995268456979746E-5	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998749106022361	WITHOUT_CLASSIFICATION	1.250893977638616E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998083054258191	WITHOUT_CLASSIFICATION	1.916945741809132E-4	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999978469656515	WITHOUT_CLASSIFICATION	2.1530343484446233E-6	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999818036126799	WITHOUT_CLASSIFICATION	1.819638732005306E-5	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999083795614663	WITHOUT_CLASSIFICATION	9.162043853369106E-4	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999995958080425	WITHOUT_CLASSIFICATION	4.041919574733488E-7	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9994024913109775	WITHOUT_CLASSIFICATION	5.975086890224643E-4	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.999965134304773	WITHOUT_CLASSIFICATION	3.48656952270665E-5	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9994221080485979	WITHOUT_CLASSIFICATION	5.778919514021442E-4	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999977891337269	WITHOUT_CLASSIFICATION	2.2108662730270545E-6	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9997962907360082	WITHOUT_CLASSIFICATION	2.0370926399175635E-4	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999384613107611	WITHOUT_CLASSIFICATION	6.153868923887964E-5	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999638137674138	WITHOUT_CLASSIFICATION	3.6186232586068436E-5	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999638137674138	WITHOUT_CLASSIFICATION	3.6186232586068436E-5	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999787653847525	WITHOUT_CLASSIFICATION	2.1234615247544555E-5	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999787653847525	WITHOUT_CLASSIFICATION	2.1234615247544555E-5	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.999252683248733	WITHOUT_CLASSIFICATION	7.473167512671298E-4	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999083795614663	WITHOUT_CLASSIFICATION	9.162043853369106E-4	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999944815426223	WITHOUT_CLASSIFICATION	5.5184573777014113E-5	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999599825084996	WITHOUT_CLASSIFICATION	4.00174915004456E-5	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999838629919856	WITHOUT_CLASSIFICATION	1.6137008014307887E-5	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999838629919856	WITHOUT_CLASSIFICATION	1.6137008014307887E-5	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999783182911028	WITHOUT_CLASSIFICATION	2.1681708897154795E-5	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999962829753607	WITHOUT_CLASSIFICATION	3.717024639308885E-5	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999826538893434	WITHOUT_CLASSIFICATION	1.7346110656683638E-5	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9999863620130688	WITHOUT_CLASSIFICATION	1.3637986931151563E-5	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.999931361634492	WITHOUT_CLASSIFICATION	6.863836550798187E-5	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9990894473274786	WITHOUT_CLASSIFICATION	9.105526725213701E-4	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999546426581377	WITHOUT_CLASSIFICATION	4.5357341862360245E-5	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999745881988495	WITHOUT_CLASSIFICATION	2.5411801150414965E-5	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9999412726280996	WITHOUT_CLASSIFICATION	5.8727371900450996E-5	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9976142933700424	WITHOUT_CLASSIFICATION	0.002385706629957564	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.999970503703637	WITHOUT_CLASSIFICATION	2.9496296362950253E-5	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.9999517634985913	WITHOUT_CLASSIFICATION	4.823650140867065E-5	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999453186582988	WITHOUT_CLASSIFICATION	5.468134170129758E-5	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.999991804562817	WITHOUT_CLASSIFICATION	8.1954371830142E-6	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999938634047998	WITHOUT_CLASSIFICATION	6.136595200104607E-6	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9996486015101913	WITHOUT_CLASSIFICATION	3.513984898086743E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998937338032143	WITHOUT_CLASSIFICATION	1.062661967857229E-4	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998846460370666	WITHOUT_CLASSIFICATION	1.1535396293341689E-4	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999450853837261	WITHOUT_CLASSIFICATION	5.4914616274014516E-5	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9993557340308524	WITHOUT_CLASSIFICATION	6.442659691476482E-4	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999496101251136	WITHOUT_CLASSIFICATION	5.0389874886258995E-5	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9920628199142466	WITHOUT_CLASSIFICATION	0.007937180085753462	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999774696787094	WITHOUT_CLASSIFICATION	2.2530321290631245E-5	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999983889271605	WITHOUT_CLASSIFICATION	1.6110728395081098E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999894335855194	WITHOUT_CLASSIFICATION	1.0566414480566893E-5	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998815030496141	WITHOUT_CLASSIFICATION	1.1849695038591092E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999850769506072	WITHOUT_CLASSIFICATION	1.4923049392826854E-5	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999119068267568	WITHOUT_CLASSIFICATION	8.809317324316273E-5	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9983854278885109	WITHOUT_CLASSIFICATION	0.0016145721114889664	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999841858250088	WITHOUT_CLASSIFICATION	1.5814174991192814E-4	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999841682285199	WITHOUT_CLASSIFICATION	1.5831771480106024E-4	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999146579602701	WITHOUT_CLASSIFICATION	8.534203972981395E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999146579602701	WITHOUT_CLASSIFICATION	8.534203972981395E-5	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999204933097102	WITHOUT_CLASSIFICATION	7.95066902897633E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9999923019048904	WITHOUT_CLASSIFICATION	7.698095109616963E-6	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.999905660061981	WITHOUT_CLASSIFICATION	9.433993801905394E-5	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.999905660061981	WITHOUT_CLASSIFICATION	9.433993801905394E-5	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9994003390677663	WITHOUT_CLASSIFICATION	5.996609322338109E-4	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9992909100042094	WITHOUT_CLASSIFICATION	7.090899957906111E-4	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.99771486607854	WITHOUT_CLASSIFICATION	0.0022851339214599855	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999903416344615	WITHOUT_CLASSIFICATION	9.658365538394094E-6	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.999881165796577	WITHOUT_CLASSIFICATION	1.1883420342296113E-4	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998700169876518	WITHOUT_CLASSIFICATION	1.2998301234820773E-4	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999458728293449	WITHOUT_CLASSIFICATION	5.412717065518617E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999334215277995	WITHOUT_CLASSIFICATION	6.657847220040212E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999334215277995	WITHOUT_CLASSIFICATION	6.657847220040212E-5	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999337143078554	WITHOUT_CLASSIFICATION	6.628569214459506E-5	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999762394272675	WITHOUT_CLASSIFICATION	2.37605727324634E-5	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999762394272675	WITHOUT_CLASSIFICATION	2.37605727324634E-5	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999508144966376	WITHOUT_CLASSIFICATION	4.918550336229678E-5	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999013689828994	WITHOUT_CLASSIFICATION	9.863101710057898E-5	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.9999659564606782	WITHOUT_CLASSIFICATION	3.404353932172845E-5	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999735104413928	WITHOUT_CLASSIFICATION	2.6489558607240298E-5	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999531054083017	WITHOUT_CLASSIFICATION	4.689459169827727E-5	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9984194620720721	WITHOUT_CLASSIFICATION	0.0015805379279278011	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9996449730342033	WITHOUT_CLASSIFICATION	3.5502696579666393E-4	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999208183509717	WITHOUT_CLASSIFICATION	7.918164902829274E-5	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9996045434916426	WITHOUT_CLASSIFICATION	3.9545650835739137E-4	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9985113228108258	WITHOUT_CLASSIFICATION	0.0014886771891741849	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999476664703588	WITHOUT_CLASSIFICATION	5.233352964107405E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999860324401438	WITHOUT_CLASSIFICATION	1.3967559856026099E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999860324401438	WITHOUT_CLASSIFICATION	1.3967559856026099E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999860324401438	WITHOUT_CLASSIFICATION	1.3967559856026099E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999860324401438	WITHOUT_CLASSIFICATION	1.3967559856026099E-5	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999407704681743	WITHOUT_CLASSIFICATION	5.922953182573715E-5	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9955509313592621	WITHOUT_CLASSIFICATION	0.004449068640737915	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9999906570356453	WITHOUT_CLASSIFICATION	9.34296435471879E-6	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999902363391354	WITHOUT_CLASSIFICATION	9.7636608645996E-5	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9977990746416351	WITHOUT_CLASSIFICATION	0.0022009253583648632	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999899841481052	WITHOUT_CLASSIFICATION	1.0015851894692495E-5	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9994122308081692	WITHOUT_CLASSIFICATION	5.877691918307959E-4	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997949134909729	WITHOUT_CLASSIFICATION	2.0508650902711627E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999899841481052	WITHOUT_CLASSIFICATION	1.0015851894692495E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999899841481052	WITHOUT_CLASSIFICATION	1.0015851894692495E-5	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998414138683719	WITHOUT_CLASSIFICATION	1.5858613162807904E-4	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999174822752923	WITHOUT_CLASSIFICATION	8.25177247077098E-5	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999198482924627	WITHOUT_CLASSIFICATION	8.015170753724192E-5	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999110275694603	WITHOUT_CLASSIFICATION	8.897243053971854E-5	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9991463104927605	WITHOUT_CLASSIFICATION	8.5368950723951E-4	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9996747337149303	WITHOUT_CLASSIFICATION	3.2526628506965847E-4	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999891962531677	WITHOUT_CLASSIFICATION	1.0803746832238025E-5	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999110275694603	WITHOUT_CLASSIFICATION	8.897243053971854E-5	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999762579632737	WITHOUT_CLASSIFICATION	2.3742036726316643E-5	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998560129094255	WITHOUT_CLASSIFICATION	1.439870905745321E-4	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999941602021193	WITHOUT_CLASSIFICATION	5.839797880670979E-6	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9994886728589558	WITHOUT_CLASSIFICATION	5.113271410442259E-4	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999045955155773	WITHOUT_CLASSIFICATION	9.540448442259794E-5	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9988852598524748	WITHOUT_CLASSIFICATION	0.0011147401475251717	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999973465160702	WITHOUT_CLASSIFICATION	2.653483929804169E-5	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999626130173994	WITHOUT_CLASSIFICATION	3.7386982600535006E-5	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999763278029488	WITHOUT_CLASSIFICATION	2.3672197051139406E-5	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9997605692860291	WITHOUT_CLASSIFICATION	2.394307139708823E-4	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999763278029488	WITHOUT_CLASSIFICATION	2.3672197051139406E-5	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9998889646686617	WITHOUT_CLASSIFICATION	1.1103533133831063E-4	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9992174428239335	WITHOUT_CLASSIFICATION	7.825571760664316E-4	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9993955355352099	WITHOUT_CLASSIFICATION	6.044644647900432E-4	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997751040788834	WITHOUT_CLASSIFICATION	2.248959211165497E-4	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999714440299558	WITHOUT_CLASSIFICATION	2.855597004420205E-4	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999817300698784	WITHOUT_CLASSIFICATION	1.826993012149791E-5	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998852576220184	WITHOUT_CLASSIFICATION	1.1474237798165301E-4	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998234230218905	WITHOUT_CLASSIFICATION	1.7657697810937446E-4	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998852576220184	WITHOUT_CLASSIFICATION	1.1474237798165301E-4	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998647669689633	WITHOUT_CLASSIFICATION	1.35233031036791E-4	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999764698757071	WITHOUT_CLASSIFICATION	2.3530124292973673E-5	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.999814379950492	WITHOUT_CLASSIFICATION	1.8562004950794543E-4	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999360001115322	WITHOUT_CLASSIFICATION	6.39998884678495E-5	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999221101854047	WITHOUT_CLASSIFICATION	7.788981459535788E-5	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9998730299977336	WITHOUT_CLASSIFICATION	1.269700022663765E-4	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999958259715518	WITHOUT_CLASSIFICATION	4.17402844813537E-6	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999817300698784	WITHOUT_CLASSIFICATION	1.826993012149791E-5	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998234230218905	WITHOUT_CLASSIFICATION	1.7657697810937446E-4	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998647669689633	WITHOUT_CLASSIFICATION	1.35233031036791E-4	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999731999060941	WITHOUT_CLASSIFICATION	2.6800093905871188E-5	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9999453813184521	WITHOUT_CLASSIFICATION	5.461868154786004E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9998495946373177	WITHOUT_CLASSIFICATION	1.5040536268237057E-4	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9977511279275426	WITHOUT_CLASSIFICATION	0.0022488720724573425	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9996516275822168	WITHOUT_CLASSIFICATION	3.4837241778313253E-4	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9997783464332353	WITHOUT_CLASSIFICATION	2.2165356676484525E-4	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999479995924779	WITHOUT_CLASSIFICATION	5.2000407522137174E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998937338032143	WITHOUT_CLASSIFICATION	1.062661967857229E-4	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999764698757071	WITHOUT_CLASSIFICATION	2.3530124292973673E-5	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999637719461941	WITHOUT_CLASSIFICATION	3.6228053805893646E-5	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999309651510481	WITHOUT_CLASSIFICATION	6.903484895194754E-5	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9991021948733376	WITHOUT_CLASSIFICATION	8.978051266624016E-4	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999576963734083	WITHOUT_CLASSIFICATION	4.2303626591713904E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998937338032143	WITHOUT_CLASSIFICATION	1.062661967857229E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999375240165058	WITHOUT_CLASSIFICATION	6.247598349413357E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998937338032143	WITHOUT_CLASSIFICATION	1.062661967857229E-4	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999748262631265	WITHOUT_CLASSIFICATION	2.5173736873542996E-5	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998843975731325	WITHOUT_CLASSIFICATION	1.1560242686737963E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998684690039474	WITHOUT_CLASSIFICATION	1.315309960525152E-4	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999701302638341	WITHOUT_CLASSIFICATION	2.9869736165902612E-5	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999588335735861	WITHOUT_CLASSIFICATION	4.116642641395994E-5	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.9998883634882935	WITHOUT_CLASSIFICATION	1.1163651170659122E-4	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999927949492991	WITHOUT_CLASSIFICATION	7.205050700896448E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998019592194198	WITHOUT_CLASSIFICATION	1.9804078058010757E-4	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999723734868611	WITHOUT_CLASSIFICATION	2.762651313891512E-5	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.9999387808097363	WITHOUT_CLASSIFICATION	6.121919026370262E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999581871040696	WITHOUT_CLASSIFICATION	4.1812895930334396E-5	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999421852992152	WITHOUT_CLASSIFICATION	5.781470078483948E-5	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9869677536482243	WITHOUT_CLASSIFICATION	0.013032246351775646	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.999824162848129	WITHOUT_CLASSIFICATION	1.7583715187103962E-4	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9995029741280297	WITHOUT_CLASSIFICATION	4.970258719702739E-4	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999959859004035	WITHOUT_CLASSIFICATION	4.014099596562677E-6	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999848140308932	WITHOUT_CLASSIFICATION	1.5185969106799401E-5	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9998157873872013	WITHOUT_CLASSIFICATION	1.842126127986057E-4	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999976668072653	WITHOUT_CLASSIFICATION	2.333192734701852E-5	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9997511855580412	WITHOUT_CLASSIFICATION	2.4881444195881E-4	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9983685620317357	WITHOUT_CLASSIFICATION	0.0016314379682643083	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9983685620317357	WITHOUT_CLASSIFICATION	0.0016314379682643083	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999616359485828	WITHOUT_CLASSIFICATION	3.836405141727052E-5	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998891230881799	WITHOUT_CLASSIFICATION	1.1087691182009133E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999986238837336	WITHOUT_CLASSIFICATION	1.3761162664092515E-5	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999867487864151	WITHOUT_CLASSIFICATION	1.3251213584830155E-5	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9995218613669921	WITHOUT_CLASSIFICATION	4.781386330079402E-4	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999119502417813	WITHOUT_CLASSIFICATION	8.804975821872656E-5	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999093992469399	WITHOUT_CLASSIFICATION	9.060075306013184E-5	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9959633433364106	WITHOUT_CLASSIFICATION	0.004036656663589412	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.9973007791851056	WITHOUT_CLASSIFICATION	0.0026992208148944197	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999649076733608	WITHOUT_CLASSIFICATION	3.509232663919582E-5	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999139335629798	WITHOUT_CLASSIFICATION	8.606643702022177E-5	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.9999787987198342	WITHOUT_CLASSIFICATION	2.12012801657975E-5	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997362610602529	WITHOUT_CLASSIFICATION	2.637389397469934E-4	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999357318281993	WITHOUT_CLASSIFICATION	6.426817180061193E-5	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999857288884467	WITHOUT_CLASSIFICATION	1.4271111553262837E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999924047316713	WITHOUT_CLASSIFICATION	7.595268328696487E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999553472158424	WITHOUT_CLASSIFICATION	4.46527841575195E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999553472158424	WITHOUT_CLASSIFICATION	4.46527841575195E-5	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999774030244393	WITHOUT_CLASSIFICATION	2.259697556063412E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998019592194198	WITHOUT_CLASSIFICATION	1.9804078058010757E-4	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9976776500335974	WITHOUT_CLASSIFICATION	0.002322349966402543	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999840952453017	WITHOUT_CLASSIFICATION	1.5904754698352974E-5	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9994975117614332	WITHOUT_CLASSIFICATION	5.024882385666877E-4	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998030954235877	WITHOUT_CLASSIFICATION	1.9690457641224432E-4	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.999935994256985	WITHOUT_CLASSIFICATION	6.400574301497281E-5	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9999862639070564	WITHOUT_CLASSIFICATION	1.3736092943741308E-5	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9998648473457002	WITHOUT_CLASSIFICATION	1.351526542998743E-4	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998464714573103	WITHOUT_CLASSIFICATION	1.5352854268968345E-4	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999588530506456	WITHOUT_CLASSIFICATION	4.114694935441258E-5	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9998438144008652	WITHOUT_CLASSIFICATION	1.5618559913473793E-4	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999916491124797	WITHOUT_CLASSIFICATION	8.350887520234068E-6	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999927674812127	WITHOUT_CLASSIFICATION	7.2325187873342064E-6	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999998874826479	WITHOUT_CLASSIFICATION	1.1251735210656722E-6	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999334233241998	WITHOUT_CLASSIFICATION	6.657667580018592E-5	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999976018340922	WITHOUT_CLASSIFICATION	2.3981659078069938E-5	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999916776641673	WITHOUT_CLASSIFICATION	8.32233583269356E-6	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9957562106666026	WITHOUT_CLASSIFICATION	0.00424378933339749	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999977641405187	WITHOUT_CLASSIFICATION	2.235859481242959E-6	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999831173445515	WITHOUT_CLASSIFICATION	1.6882655448494568E-4	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999790022037046	WITHOUT_CLASSIFICATION	2.099779629543724E-5	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9991336488266701	WITHOUT_CLASSIFICATION	8.663511733298313E-4	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999422181084104	WITHOUT_CLASSIFICATION	5.7781891589496366E-5	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999267158628038	WITHOUT_CLASSIFICATION	7.328413719630451E-5	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999133991995452	WITHOUT_CLASSIFICATION	8.660080045474415E-5	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999529799821397	WITHOUT_CLASSIFICATION	4.702001786028071E-5	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998185488890093	WITHOUT_CLASSIFICATION	1.8145111099060544E-4	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999982739203852	WITHOUT_CLASSIFICATION	1.7260796148024833E-5	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999610822972108	WITHOUT_CLASSIFICATION	3.891770278919817E-4	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998440026126361	WITHOUT_CLASSIFICATION	1.5599738736398727E-4	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998697540620743	WITHOUT_CLASSIFICATION	1.3024593792568517E-4	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999937647510614	WITHOUT_CLASSIFICATION	6.235248938595846E-6	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998601379812301	WITHOUT_CLASSIFICATION	1.3986201876995367E-4	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9997347093340231	WITHOUT_CLASSIFICATION	2.6529066597696574E-4	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9991235044024085	WITHOUT_CLASSIFICATION	8.764955975914807E-4	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9982918688703113	WITHOUT_CLASSIFICATION	0.0017081311296885966	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9858153477315281	WITHOUT_CLASSIFICATION	0.014184652268471796	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997088423309749	WITHOUT_CLASSIFICATION	2.911576690250463E-4	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997088423309749	WITHOUT_CLASSIFICATION	2.911576690250463E-4	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999257287999193	WITHOUT_CLASSIFICATION	7.427120008081076E-5	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999568914600663	WITHOUT_CLASSIFICATION	4.310853993383935E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999903972841692	WITHOUT_CLASSIFICATION	9.602715830905878E-6	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999903972841692	WITHOUT_CLASSIFICATION	9.602715830905878E-6	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999749027960207	WITHOUT_CLASSIFICATION	2.5097203979271117E-5	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999353326891544	WITHOUT_CLASSIFICATION	6.46673108456337E-5	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999503126710132	WITHOUT_CLASSIFICATION	4.968732898672729E-5	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999972482337717	WITHOUT_CLASSIFICATION	2.7517662283651016E-6	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998484928742296	WITHOUT_CLASSIFICATION	1.5150712577036634E-4	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998435639049548	WITHOUT_CLASSIFICATION	1.564360950451623E-4	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999301060487712	WITHOUT_CLASSIFICATION	6.989395122875706E-5	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999301060487712	WITHOUT_CLASSIFICATION	6.989395122875706E-5	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998435639049548	WITHOUT_CLASSIFICATION	1.564360950451623E-4	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9997989160690635	WITHOUT_CLASSIFICATION	2.0108393093663912E-4	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9998860848287199	WITHOUT_CLASSIFICATION	1.1391517128014813E-4	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9998742523672227	WITHOUT_CLASSIFICATION	1.257476327772105E-4	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9998742523672227	WITHOUT_CLASSIFICATION	1.257476327772105E-4	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.9999190298975311	WITHOUT_CLASSIFICATION	8.097010246884636E-5	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999034766396562	WITHOUT_CLASSIFICATION	9.65233603438825E-5	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999728073037392	WITHOUT_CLASSIFICATION	2.71926962608673E-5	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999903997354016	WITHOUT_CLASSIFICATION	9.600264598326434E-6	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999583015977963	WITHOUT_CLASSIFICATION	4.169840220363706E-5	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.9998927434994288	WITHOUT_CLASSIFICATION	1.0725650057119118E-4	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999070809964237	WITHOUT_CLASSIFICATION	9.29190035762979E-5	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999544608792962	WITHOUT_CLASSIFICATION	4.5539120703774015E-5	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999939158189763	WITHOUT_CLASSIFICATION	6.0841810237173535E-6	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998865367311772	WITHOUT_CLASSIFICATION	1.1346326882288032E-4	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9998755280639781	WITHOUT_CLASSIFICATION	1.2447193602190129E-4	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9980438474932772	WITHOUT_CLASSIFICATION	0.0019561525067228274	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999433912809691	WITHOUT_CLASSIFICATION	5.6608719030901176E-5	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999836799472529	WITHOUT_CLASSIFICATION	1.632005274710308E-4	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9999862230549952	WITHOUT_CLASSIFICATION	1.3776945004836218E-5	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9997435826408207	WITHOUT_CLASSIFICATION	2.5641735917919067E-4	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998140400818937	WITHOUT_CLASSIFICATION	1.8595991810632352E-4	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9995937327395154	WITHOUT_CLASSIFICATION	4.06267260484584E-4	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999175825566088	WITHOUT_CLASSIFICATION	8.241744339120233E-5	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9990173404498663	WITHOUT_CLASSIFICATION	9.826595501336638E-4	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9980793172997222	WITHOUT_CLASSIFICATION	0.0019206827002777897	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999445389368039	WITHOUT_CLASSIFICATION	5.546106319601083E-5	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9997920496342545	WITHOUT_CLASSIFICATION	2.0795036574554777E-4	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999561232802015	WITHOUT_CLASSIFICATION	4.3876719798502633E-4	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9998089612821031	WITHOUT_CLASSIFICATION	1.9103871789695248E-4	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999256964829129	WITHOUT_CLASSIFICATION	7.430351708710341E-5	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.99994580080276	WITHOUT_CLASSIFICATION	5.419919723995004E-5	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999976072333802	WITHOUT_CLASSIFICATION	2.392766619735133E-6	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999978892728404	WITHOUT_CLASSIFICATION	2.1107271595970262E-5	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999950918440195	WITHOUT_CLASSIFICATION	4.908155980557352E-6	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999681657789276	WITHOUT_CLASSIFICATION	3.1834221072418856E-5	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999861338253269	WITHOUT_CLASSIFICATION	1.386617467317415E-5	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.999832937274023	WITHOUT_CLASSIFICATION	1.6706272597710384E-4	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999959688494096	WITHOUT_CLASSIFICATION	4.031150590353821E-6	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999019701541477	WITHOUT_CLASSIFICATION	9.80298458523304E-5	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999305285304303	WITHOUT_CLASSIFICATION	6.947146956964124E-5	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9998806359939061	WITHOUT_CLASSIFICATION	1.1936400609392424E-4	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999079580874339	WITHOUT_CLASSIFICATION	9.204191256608668E-5	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9985477588359333	WITHOUT_CLASSIFICATION	0.0014522411640667515	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.9999041154896171	WITHOUT_CLASSIFICATION	9.588451038287251E-5	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.9999096647348467	WITHOUT_CLASSIFICATION	9.033526515332441E-5	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999685587270886	WITHOUT_CLASSIFICATION	3.1441272911438476E-5	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9998823663006442	WITHOUT_CLASSIFICATION	1.176336993558832E-4	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.9985662442973516	WITHOUT_CLASSIFICATION	0.001433755702648469	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999746768903157	WITHOUT_CLASSIFICATION	2.532310968434945E-5	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9997954676644204	WITHOUT_CLASSIFICATION	2.0453233557954776E-4	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999488821711793	WITHOUT_CLASSIFICATION	5.1117828820836756E-5	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9997704455640584	WITHOUT_CLASSIFICATION	2.29554435941648E-4	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999841107442242	WITHOUT_CLASSIFICATION	1.588925577571664E-5	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999692378973479	WITHOUT_CLASSIFICATION	3.076210265208393E-5	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999811682179081	WITHOUT_CLASSIFICATION	1.883178209195579E-5	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9996593454823125	WITHOUT_CLASSIFICATION	3.406545176874311E-4	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999548136266394	WITHOUT_CLASSIFICATION	4.5186373360579016E-5	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.998529639477748	WITHOUT_CLASSIFICATION	0.0014703605222520647	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999180342452975	WITHOUT_CLASSIFICATION	8.196575470255179E-5	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9979355014844234	WITHOUT_CLASSIFICATION	0.0020644985155765876	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999758165558797	WITHOUT_CLASSIFICATION	2.4183444120359458E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999725705241461	WITHOUT_CLASSIFICATION	2.742947585398609E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999725705241461	WITHOUT_CLASSIFICATION	2.742947585398609E-5	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999942623954612	WITHOUT_CLASSIFICATION	5.737604538753166E-6	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9993561969388719	WITHOUT_CLASSIFICATION	6.438030611280182E-4	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999982651263283	WITHOUT_CLASSIFICATION	1.7348736717007383E-5	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999169399077745	WITHOUT_CLASSIFICATION	8.306009222544376E-5	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999339211293001	WITHOUT_CLASSIFICATION	6.60788706998866E-5	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9997554634237195	WITHOUT_CLASSIFICATION	2.4453657628049837E-4	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999905325552186	WITHOUT_CLASSIFICATION	9.467444781251315E-6	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999683210810235	WITHOUT_CLASSIFICATION	3.167891897639561E-5	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9997335682057423	WITHOUT_CLASSIFICATION	2.664317942577333E-4	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999646234848902	WITHOUT_CLASSIFICATION	3.5376515109724855E-5	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999368642647503	WITHOUT_CLASSIFICATION	6.313573524974466E-5	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999650380726087	WITHOUT_CLASSIFICATION	3.4961927391290247E-4	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999991743799359	WITHOUT_CLASSIFICATION	8.256200640095888E-7	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999990687691098	WITHOUT_CLASSIFICATION	9.312308901912543E-7	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999188327440239	WITHOUT_CLASSIFICATION	8.116725597610753E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999188327440239	WITHOUT_CLASSIFICATION	8.116725597610753E-5	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999050847508906	WITHOUT_CLASSIFICATION	9.491524910940501E-5	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9990948769700106	WITHOUT_CLASSIFICATION	9.051230299892476E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999941608474119	WITHOUT_CLASSIFICATION	5.839152588090616E-5	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999768877322366	WITHOUT_CLASSIFICATION	2.3112267763446034E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999906273316597	WITHOUT_CLASSIFICATION	9.372668340261358E-6	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999225095587956	WITHOUT_CLASSIFICATION	7.749044120435817E-5	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999167874250279	WITHOUT_CLASSIFICATION	8.32125749721502E-5	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9999403544792845	WITHOUT_CLASSIFICATION	5.964552071542679E-5	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9969140108470604	WITHOUT_CLASSIFICATION	0.003085989152939552	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999975896988924	WITHOUT_CLASSIFICATION	2.4103011076566766E-6	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9997325886079633	WITHOUT_CLASSIFICATION	2.6741139203664447E-4	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999321610885075	WITHOUT_CLASSIFICATION	6.783891149252598E-5	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9997514747545193	WITHOUT_CLASSIFICATION	2.4852524548071603E-4	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999884419486894	WITHOUT_CLASSIFICATION	1.1558051310468403E-5	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9997655605906653	WITHOUT_CLASSIFICATION	2.3443940933460017E-4	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998228256630458	WITHOUT_CLASSIFICATION	1.77174336954174E-4	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999649626632029	WITHOUT_CLASSIFICATION	3.503733679709699E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999857382797471	WITHOUT_CLASSIFICATION	1.4261720252946643E-5	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9998702158781178	WITHOUT_CLASSIFICATION	1.2978412188220214E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9995238821680857	WITHOUT_CLASSIFICATION	4.761178319143209E-4	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999918828566468	WITHOUT_CLASSIFICATION	8.117143353282778E-6	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9996931658228861	WITHOUT_CLASSIFICATION	3.068341771138441E-4	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9997860042454206	WITHOUT_CLASSIFICATION	2.1399575457928835E-4	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999981088770671	WITHOUT_CLASSIFICATION	1.8911229329121596E-6	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999934933993182	WITHOUT_CLASSIFICATION	6.506600681754474E-6	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9998740177261133	WITHOUT_CLASSIFICATION	1.259822738866941E-4	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999556268221389	WITHOUT_CLASSIFICATION	4.4373177861101203E-4	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.999934810223452	WITHOUT_CLASSIFICATION	6.518977654801573E-5	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9998899104371298	WITHOUT_CLASSIFICATION	1.1008956287012712E-4	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9996212853250478	WITHOUT_CLASSIFICATION	3.7871467495227977E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9994134711494028	WITHOUT_CLASSIFICATION	5.865288505971023E-4	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999118342423321	WITHOUT_CLASSIFICATION	8.816575766786993E-5	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9995570055113953	WITHOUT_CLASSIFICATION	4.42994488604768E-4	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9997472938272276	WITHOUT_CLASSIFICATION	2.527061727723469E-4	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999957071658946	WITHOUT_CLASSIFICATION	4.292834105490732E-6	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.99920000654717	WITHOUT_CLASSIFICATION	7.999934528299958E-4	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999446719101805	WITHOUT_CLASSIFICATION	5.532808981951637E-5	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9997819681399236	WITHOUT_CLASSIFICATION	2.180318600764179E-4	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999966746298441	WITHOUT_CLASSIFICATION	3.325370155910723E-5	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999651774454407	WITHOUT_CLASSIFICATION	3.4822554559299794E-4	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9985102105518571	WITHOUT_CLASSIFICATION	0.0014897894481429616	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999900908418484	WITHOUT_CLASSIFICATION	9.909158151643743E-6	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9848695286054836	WITHOUT_CLASSIFICATION	0.015130471394516324	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9848695286054836	WITHOUT_CLASSIFICATION	0.015130471394516324	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999724274042748	WITHOUT_CLASSIFICATION	2.7572595725168204E-5	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9681825119101957	WITHOUT_CLASSIFICATION	0.03181748808980438	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999967859920643	WITHOUT_CLASSIFICATION	3.214007935608647E-6	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999442409015111	WITHOUT_CLASSIFICATION	5.575909848895538E-5	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9989886030334718	WITHOUT_CLASSIFICATION	0.0010113969665281625	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9998012128876397	WITHOUT_CLASSIFICATION	1.9878711236038444E-4	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999698740206197	WITHOUT_CLASSIFICATION	3.012597938038528E-5	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999586174773124	WITHOUT_CLASSIFICATION	4.1382522687713123E-5	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9989196060405997	WITHOUT_CLASSIFICATION	0.001080393959400347	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999770660632887	WITHOUT_CLASSIFICATION	2.293393671129702E-4	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716461112845	WITHOUT_CLASSIFICATION	1.2835388871540817E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992204001278405	WITHOUT_CLASSIFICATION	7.795998721594348E-4	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9997332378071858	WITHOUT_CLASSIFICATION	2.667621928141938E-4	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999318753230948	WITHOUT_CLASSIFICATION	6.812467690512287E-5	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9996835552884854	WITHOUT_CLASSIFICATION	3.164447115146595E-4	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.999652947080008	WITHOUT_CLASSIFICATION	3.4705291999206174E-4	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999528302086279	WITHOUT_CLASSIFICATION	4.7169791372116365E-5	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9981070076241794	WITHOUT_CLASSIFICATION	0.0018929923758206838	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9993630601297887	WITHOUT_CLASSIFICATION	6.36939870211306E-4	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.998658160513326	WITHOUT_CLASSIFICATION	0.0013418394866739649	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999839026790862	WITHOUT_CLASSIFICATION	1.609732091378921E-4	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9997965005707756	WITHOUT_CLASSIFICATION	2.0349942922427063E-4	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999651446264038	WITHOUT_CLASSIFICATION	3.485537359621208E-5	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999718575000506	WITHOUT_CLASSIFICATION	2.8142499949493042E-5	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999389087848555	WITHOUT_CLASSIFICATION	6.109121514456712E-5	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9996209636643264	WITHOUT_CLASSIFICATION	3.790363356735466E-4	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999294873140137	WITHOUT_CLASSIFICATION	7.051268598631764E-5	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9998689239937635	WITHOUT_CLASSIFICATION	1.3107600623656003E-4	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9996081872691239	WITHOUT_CLASSIFICATION	3.918127308761507E-4	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999391238173975	WITHOUT_CLASSIFICATION	6.087618260249503E-5	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9993043279657104	WITHOUT_CLASSIFICATION	6.956720342896971E-4	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999973051452994	WITHOUT_CLASSIFICATION	2.694854700687196E-6	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999677502483385	WITHOUT_CLASSIFICATION	3.224975166142137E-5	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9997314079183891	WITHOUT_CLASSIFICATION	2.6859208161087144E-4	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998770146957469	WITHOUT_CLASSIFICATION	1.2298530425318234E-4	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9997325090623754	WITHOUT_CLASSIFICATION	2.6749093762462193E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9996170634924626	WITHOUT_CLASSIFICATION	3.829365075374364E-4	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999791639197869	WITHOUT_CLASSIFICATION	2.0836080213105748E-4	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998280445394893	WITHOUT_CLASSIFICATION	1.7195546051064392E-4	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999775999220509	WITHOUT_CLASSIFICATION	2.2400077949102426E-5	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999662669613048	WITHOUT_CLASSIFICATION	3.373303869514707E-5	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998978849557046	WITHOUT_CLASSIFICATION	1.0211504429526542E-4	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9991618356807536	WITHOUT_CLASSIFICATION	8.381643192464417E-4	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9986338613847822	WITHOUT_CLASSIFICATION	0.001366138615217873	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999154644064239	WITHOUT_CLASSIFICATION	8.453559357605989E-5	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999697022191217	WITHOUT_CLASSIFICATION	3.0297780878280465E-5	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999963267993073	WITHOUT_CLASSIFICATION	3.673200692812091E-6	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9994421878007774	WITHOUT_CLASSIFICATION	5.578121992225718E-4	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9991706762438073	WITHOUT_CLASSIFICATION	8.293237561926639E-4	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999991743799359	WITHOUT_CLASSIFICATION	8.256200640095888E-7	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9998167876885588	WITHOUT_CLASSIFICATION	1.8321231144137278E-4	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999994452314814	WITHOUT_CLASSIFICATION	5.547685185975673E-6	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9997725165115331	WITHOUT_CLASSIFICATION	2.2748348846702917E-4	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999263995731632	WITHOUT_CLASSIFICATION	7.360042683679781E-5	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999997507447738	WITHOUT_CLASSIFICATION	2.4925522624435486E-7	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9995143714183264	WITHOUT_CLASSIFICATION	4.856285816736425E-4	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9927817324923107	WITHOUT_CLASSIFICATION	0.00721826750768934	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.5815714740907236	WITHOUT_CLASSIFICATION	0.41842852590927626	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999901964284278	WITHOUT_CLASSIFICATION	9.803571572275747E-6	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9992465790829227	WITHOUT_CLASSIFICATION	7.534209170772241E-4	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999986041956189	WITHOUT_CLASSIFICATION	1.3958043811897379E-6	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9857605906321402	WITHOUT_CLASSIFICATION	0.014239409367859893	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999460326873279	WITHOUT_CLASSIFICATION	5.396731267210107E-4	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999778111481876	WITHOUT_CLASSIFICATION	2.218885181237561E-5	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9910595551857754	WITHOUT_CLASSIFICATION	0.008940444814224636	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999876361726273	WITHOUT_CLASSIFICATION	1.2363827372693578E-4	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998730299977336	WITHOUT_CLASSIFICATION	1.269700022663765E-4	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999484230868732	WITHOUT_CLASSIFICATION	5.157691312683938E-5	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.99999707060491	WITHOUT_CLASSIFICATION	2.929395089936955E-6	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9996933434211829	WITHOUT_CLASSIFICATION	3.0665657881711114E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999876361726273	WITHOUT_CLASSIFICATION	1.2363827372693578E-4	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9986211062060282	WITHOUT_CLASSIFICATION	0.001378893793971819	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999011611625611	WITHOUT_CLASSIFICATION	9.883883743883153E-5	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999899228740474	WITHOUT_CLASSIFICATION	1.0077125952563082E-5	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.998670679688464	WITHOUT_CLASSIFICATION	0.0013293203115360322	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999457414396596	WITHOUT_CLASSIFICATION	5.425856034029566E-5	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9968085679950491	WITHOUT_CLASSIFICATION	0.0031914320049508398	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999926728013157	WITHOUT_CLASSIFICATION	7.327198684322093E-6	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9998155566673159	WITHOUT_CLASSIFICATION	1.8444333268414335E-4	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999874786598931	WITHOUT_CLASSIFICATION	1.2521340106889005E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9947995670891735	WITHOUT_CLASSIFICATION	0.005200432910826515	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998125480709343	WITHOUT_CLASSIFICATION	1.8745192906567413E-4	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9884651988356334	WITHOUT_CLASSIFICATION	0.011534801164366676	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999453904939534	WITHOUT_CLASSIFICATION	5.460950604667814E-5	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999571552574532	WITHOUT_CLASSIFICATION	4.284474254686116E-5	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.99998852415483	WITHOUT_CLASSIFICATION	1.1475845170025704E-5	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9995920413695341	WITHOUT_CLASSIFICATION	4.0795863046589654E-4	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9991336488266701	WITHOUT_CLASSIFICATION	8.663511733298313E-4	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9987487536904981	WITHOUT_CLASSIFICATION	0.0012512463095019255	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999795096398466	WITHOUT_CLASSIFICATION	2.0490360153364026E-5	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9981132824332054	WITHOUT_CLASSIFICATION	0.001886717566794514	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9948867538115932	WITHOUT_CLASSIFICATION	0.0051132461884067885	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999958288772726	WITHOUT_CLASSIFICATION	4.171122727538729E-6	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9997877384969243	WITHOUT_CLASSIFICATION	2.1226150307582543E-4	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9973786650827493	WITHOUT_CLASSIFICATION	0.0026213349172505935	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999499884461	WITHOUT_CLASSIFICATION	5.001155389237086E-8	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999976398230597	WITHOUT_CLASSIFICATION	2.360176940316761E-6	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999317411902688	WITHOUT_CLASSIFICATION	6.825880973112035E-5	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9995851482740039	WITHOUT_CLASSIFICATION	4.148517259961124E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999510432792319	WITHOUT_CLASSIFICATION	4.8956720768144E-5	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9987299637906002	WITHOUT_CLASSIFICATION	0.001270036209399747	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999907462951895	WITHOUT_CLASSIFICATION	9.253704810575777E-6	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9999041425395668	WITHOUT_CLASSIFICATION	9.585746043314853E-5	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999743456607984	WITHOUT_CLASSIFICATION	2.565433920159685E-4	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9988621561142991	WITHOUT_CLASSIFICATION	0.0011378438857009162	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999490335558385	WITHOUT_CLASSIFICATION	5.096644416153027E-5	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999984533288954	WITHOUT_CLASSIFICATION	1.5466711046080559E-6	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999991008231993	WITHOUT_CLASSIFICATION	8.991768006347974E-7	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999499338589108	WITHOUT_CLASSIFICATION	5.006614108921782E-5	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9997433484975465	WITHOUT_CLASSIFICATION	2.5665150245346663E-4	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999350849005414	WITHOUT_CLASSIFICATION	6.49150994586789E-5	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999854051532668	WITHOUT_CLASSIFICATION	1.459484673320494E-4	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999980751526716	WITHOUT_CLASSIFICATION	1.9248473284028606E-5	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999980751526716	WITHOUT_CLASSIFICATION	1.9248473284028606E-5	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9989891247340984	WITHOUT_CLASSIFICATION	0.0010108752659016191	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999988628543479	WITHOUT_CLASSIFICATION	1.137145652089119E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999101442553978	WITHOUT_CLASSIFICATION	8.985574460212746E-5	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.999995055489232	WITHOUT_CLASSIFICATION	4.944510768113593E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999903416344615	WITHOUT_CLASSIFICATION	9.658365538394094E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999903416344615	WITHOUT_CLASSIFICATION	9.658365538394094E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999863435041801	WITHOUT_CLASSIFICATION	1.3656495819897937E-5	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999834822684773	WITHOUT_CLASSIFICATION	1.6517731522757016E-5	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9995966587545271	WITHOUT_CLASSIFICATION	4.03341245472986E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998179606901052	WITHOUT_CLASSIFICATION	1.8203930989487357E-4	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9998730299977336	WITHOUT_CLASSIFICATION	1.269700022663765E-4	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.99995439356928	WITHOUT_CLASSIFICATION	4.56064307199329E-5	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999797379738422	WITHOUT_CLASSIFICATION	2.0262026157820654E-5	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9995461865386845	WITHOUT_CLASSIFICATION	4.538134613154946E-4	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9996422256453168	WITHOUT_CLASSIFICATION	3.5777435468323075E-4	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999347866986876	WITHOUT_CLASSIFICATION	6.521330131241378E-5	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999024496086246	WITHOUT_CLASSIFICATION	9.755039137542427E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999366059941371	WITHOUT_CLASSIFICATION	6.339400586280945E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999366059941371	WITHOUT_CLASSIFICATION	6.339400586280945E-5	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9995920413695341	WITHOUT_CLASSIFICATION	4.0795863046589654E-4	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999860077705927	WITHOUT_CLASSIFICATION	1.3992229407254336E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999871285728261	WITHOUT_CLASSIFICATION	1.2871427173838998E-5	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999695932046346	WITHOUT_CLASSIFICATION	3.040679536533419E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999973795396024	WITHOUT_CLASSIFICATION	2.6204603975942378E-5	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998174551563924	WITHOUT_CLASSIFICATION	1.825448436075389E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9998894367280643	WITHOUT_CLASSIFICATION	1.1056327193580001E-4	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999384010521677	WITHOUT_CLASSIFICATION	6.159894783233309E-5	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999226791540962	WITHOUT_CLASSIFICATION	7.73208459038347E-5	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999661836363758	WITHOUT_CLASSIFICATION	3.381636362422757E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9947995670891735	WITHOUT_CLASSIFICATION	0.005200432910826515	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999956396751558	WITHOUT_CLASSIFICATION	4.360324844215792E-6	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9990698823126999	WITHOUT_CLASSIFICATION	9.301176873000655E-4	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999862093047827	WITHOUT_CLASSIFICATION	1.3790695217401797E-5	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9999687344519048	WITHOUT_CLASSIFICATION	3.126554809518621E-5	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998205918251766	WITHOUT_CLASSIFICATION	1.7940817482328412E-4	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9998407687044526	WITHOUT_CLASSIFICATION	1.5923129554744377E-4	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999657159496362	WITHOUT_CLASSIFICATION	3.428405036373192E-5	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999805064754185	WITHOUT_CLASSIFICATION	1.9493524581559602E-5	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9998893461286193	WITHOUT_CLASSIFICATION	1.106538713806802E-4	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9990063643022172	WITHOUT_CLASSIFICATION	9.93635697782676E-4	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9990063643022172	WITHOUT_CLASSIFICATION	9.93635697782676E-4	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999110275694603	WITHOUT_CLASSIFICATION	8.897243053971854E-5	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999986881317264	WITHOUT_CLASSIFICATION	1.311868273662362E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999899841481052	WITHOUT_CLASSIFICATION	1.0015851894692495E-5	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9998767665740219	WITHOUT_CLASSIFICATION	1.2323342597805317E-4	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.999989129706151	WITHOUT_CLASSIFICATION	1.0870293848989564E-5	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999480878726847	WITHOUT_CLASSIFICATION	5.191212731523767E-5	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997751040788834	WITHOUT_CLASSIFICATION	2.248959211165497E-4	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9998191067109764	WITHOUT_CLASSIFICATION	1.8089328902357095E-4	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999731999060941	WITHOUT_CLASSIFICATION	2.6800093905871188E-5	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997995958366247	WITHOUT_CLASSIFICATION	2.0040416337544683E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998937338032143	WITHOUT_CLASSIFICATION	1.062661967857229E-4	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998669861015538	WITHOUT_CLASSIFICATION	1.3301389844626996E-4	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999836161592655	WITHOUT_CLASSIFICATION	1.6383840734488896E-5	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999852327914175	WITHOUT_CLASSIFICATION	1.4767208582525227E-5	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999853901691601	WITHOUT_CLASSIFICATION	1.4609830839851615E-5	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999575954343698	WITHOUT_CLASSIFICATION	4.2404565630101665E-5	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9960845857317451	WITHOUT_CLASSIFICATION	0.003915414268254896	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998352559302489	WITHOUT_CLASSIFICATION	1.6474406975120243E-4	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9994406137585248	WITHOUT_CLASSIFICATION	5.593862414751595E-4	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.8850936440550307	WITHOUT_CLASSIFICATION	0.11490635594496942	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999605514014821	WITHOUT_CLASSIFICATION	3.9448598517802227E-5	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999998758276339	WITHOUT_CLASSIFICATION	1.2417236599420705E-7	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999728073037392	WITHOUT_CLASSIFICATION	2.71926962608673E-5	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999998898092947	WITHOUT_CLASSIFICATION	1.1019070533045229E-7	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999850545153502	WITHOUT_CLASSIFICATION	1.4945484649838579E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999850545153502	WITHOUT_CLASSIFICATION	1.4945484649838579E-5	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9994830967702271	WITHOUT_CLASSIFICATION	5.169032297729724E-4	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9996663805105461	WITHOUT_CLASSIFICATION	3.3361948945389495E-4	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.999960452395026	WITHOUT_CLASSIFICATION	3.954760497402864E-5	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.99996788960625	WITHOUT_CLASSIFICATION	3.211039374994116E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999651559844586	WITHOUT_CLASSIFICATION	3.484401554149812E-5	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9942695496373498	WITHOUT_CLASSIFICATION	0.005730450362650212	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9953299668991697	WITHOUT_CLASSIFICATION	0.004670033100830207	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9997613842401252	WITHOUT_CLASSIFICATION	2.3861575987483985E-4	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.9439802287323349	DEFECT	0.05601977126766525	WITHOUT_CLASSIFICATION
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.7302663909649385	WITHOUT_CLASSIFICATION	0.2697336090350615	DEFECT
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9997606623046468	WITHOUT_CLASSIFICATION	2.393376953531686E-4	DEFECT
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9996550527834421	WITHOUT_CLASSIFICATION	3.449472165578209E-4	DEFECT
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.9999833542875118	WITHOUT_CLASSIFICATION	1.6645712488109785E-5	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.9994902534536287	WITHOUT_CLASSIFICATION	5.097465463712635E-4	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.815167757797407	DEFECT	0.184832242202593	WITHOUT_CLASSIFICATION
TODO : should this be an error?	DEFECT	0.849504972595305	WITHOUT_CLASSIFICATION	0.15049502740469506	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.7466240834661271	WITHOUT_CLASSIFICATION	0.2533759165338729	DEFECT
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.8481874375359617	DEFECT	0.15181256246403835	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7699465451089874	WITHOUT_CLASSIFICATION	0.23005345489101264	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7699465451089874	WITHOUT_CLASSIFICATION	0.23005345489101264	DEFECT
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9530481052859867	WITHOUT_CLASSIFICATION	0.04695189471401325	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999729894522411	WITHOUT_CLASSIFICATION	2.7010547758879244E-5	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.792299762988095	DEFECT	0.20770023701190507	WITHOUT_CLASSIFICATION
this call is side-effecty	DEFECT	0.9997064852740775	WITHOUT_CLASSIFICATION	2.93514725922553E-4	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.9086105630950925	DEFECT	0.09138943690490758	WITHOUT_CLASSIFICATION
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9140042017763151	WITHOUT_CLASSIFICATION	0.08599579822368486	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.8898711022796584	WITHOUT_CLASSIFICATION	0.11012889772034162	DEFECT
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.9626195154432731	WITHOUT_CLASSIFICATION	0.037380484556726934	DEFECT
TODO: is this completely correct?	DEFECT	0.7486365514529331	WITHOUT_CLASSIFICATION	0.2513634485470668	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.5265738702621453	WITHOUT_CLASSIFICATION	0.47342612973785475	DEFECT
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.8231727775606698	WITHOUT_CLASSIFICATION	0.1768272224393303	DEFECT
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9881974784879833	WITHOUT_CLASSIFICATION	0.011802521512016618	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.5699539121493855	DEFECT	0.43004608785061443	WITHOUT_CLASSIFICATION
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.9999825490420357	DEFECT	1.7450957964362174E-5	WITHOUT_CLASSIFICATION
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.5096917707645058	DEFECT	0.4903082292354941	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.5284547250771879	DEFECT	0.471545274922812	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.543732456890535	WITHOUT_CLASSIFICATION	0.45626754310946505	DEFECT
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.5378543129247128	DEFECT	0.46214568707528725	WITHOUT_CLASSIFICATION
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.728944278942765	WITHOUT_CLASSIFICATION	0.2710557210572351	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7699465451089874	WITHOUT_CLASSIFICATION	0.23005345489101264	DEFECT
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9731614038130108	DEFECT	0.026838596186989257	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.5486075810579046	DEFECT	0.45139241894209536	WITHOUT_CLASSIFICATION
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.9933826302149402	WITHOUT_CLASSIFICATION	0.006617369785059787	DEFECT
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9995652329781802	WITHOUT_CLASSIFICATION	4.347670218197556E-4	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.9875369411018926	WITHOUT_CLASSIFICATION	0.012463058898107351	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9993932945224402	WITHOUT_CLASSIFICATION	6.067054775597719E-4	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9982950354029231	WITHOUT_CLASSIFICATION	0.0017049645970768476	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.8968335524545362	WITHOUT_CLASSIFICATION	0.10316644754546385	DEFECT
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.5250490584614363	DEFECT	0.47495094153856365	WITHOUT_CLASSIFICATION
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.9369935431420594	WITHOUT_CLASSIFICATION	0.06300645685794053	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.947149551583114	WITHOUT_CLASSIFICATION	0.052850448416885985	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.9059708312824815	WITHOUT_CLASSIFICATION	0.09402916871751855	DEFECT
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9963403014451692	WITHOUT_CLASSIFICATION	0.0036596985548306834	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.9986234377671673	WITHOUT_CLASSIFICATION	0.00137656223283265	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.5469657939975562	DEFECT	0.4530342060024438	WITHOUT_CLASSIFICATION
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.7723093370258228	DEFECT	0.22769066297417723	WITHOUT_CLASSIFICATION
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.9999976802675243	DEFECT	2.3197324757252234E-6	WITHOUT_CLASSIFICATION
